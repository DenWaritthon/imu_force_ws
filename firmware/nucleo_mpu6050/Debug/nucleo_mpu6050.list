
nucleo_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c8b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b68  0801ca98  0801ca98  0001da98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e600  0801e600  00020cb8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e600  0801e600  0001f600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e608  0801e608  00020cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801e608  0801e608  0001f608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e61c  0801e61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000cb8  20000000  0801e620  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b354  20000cb8  0801f2d8  00020cb8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000c00c  0801f2d8  0002100c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020cb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b2a  00000000  00000000  00020ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005306  00000000  00000000  00047812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  0004cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001768  00000000  00000000  0004e958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d8be  00000000  00000000  000500c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f35  00000000  00000000  0007d97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116782  00000000  00000000  000a48b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001bb035  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009354  00000000  00000000  001bb0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001c4400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000cb8 	.word	0x20000cb8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801ca80 	.word	0x0801ca80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000cbc 	.word	0x20000cbc
 800021c:	0801ca80 	.word	0x0801ca80

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_ldivmod>:
 8000c68:	b97b      	cbnz	r3, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6a:	b972      	cbnz	r2, 8000c8a <__aeabi_ldivmod+0x22>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bfbe      	ittt	lt
 8000c70:	2000      	movlt	r0, #0
 8000c72:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c76:	e006      	blt.n	8000c86 <__aeabi_ldivmod+0x1e>
 8000c78:	bf08      	it	eq
 8000c7a:	2800      	cmpeq	r0, #0
 8000c7c:	bf1c      	itt	ne
 8000c7e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c82:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c86:	f000 b9b5 	b.w	8000ff4 <__aeabi_idiv0>
 8000c8a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c8e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c92:	2900      	cmp	r1, #0
 8000c94:	db09      	blt.n	8000caa <__aeabi_ldivmod+0x42>
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db1a      	blt.n	8000cd0 <__aeabi_ldivmod+0x68>
 8000c9a:	f000 f84d 	bl	8000d38 <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4770      	bx	lr
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db1b      	blt.n	8000cec <__aeabi_ldivmod+0x84>
 8000cb4:	f000 f840 	bl	8000d38 <__udivmoddi4>
 8000cb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc0:	b004      	add	sp, #16
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	4252      	negs	r2, r2
 8000cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f82f 	bl	8000d38 <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cea:	4770      	bx	lr
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	f000 f821 	bl	8000d38 <__udivmoddi4>
 8000cf6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cfe:	b004      	add	sp, #16
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d1c:	f000 b96a 	b.w	8000ff4 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d3c:	9d08      	ldr	r5, [sp, #32]
 8000d3e:	460c      	mov	r4, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14e      	bne.n	8000de2 <__udivmoddi4+0xaa>
 8000d44:	4694      	mov	ip, r2
 8000d46:	458c      	cmp	ip, r1
 8000d48:	4686      	mov	lr, r0
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	d962      	bls.n	8000e16 <__udivmoddi4+0xde>
 8000d50:	b14a      	cbz	r2, 8000d66 <__udivmoddi4+0x2e>
 8000d52:	f1c2 0320 	rsb	r3, r2, #32
 8000d56:	4091      	lsls	r1, r2
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	4319      	orrs	r1, r3
 8000d62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6a:	fa1f f68c 	uxth.w	r6, ip
 8000d6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d76:	fb07 1114 	mls	r1, r7, r4, r1
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb04 f106 	mul.w	r1, r4, r6
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d90a      	bls.n	8000d9c <__udivmoddi4+0x64>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8e:	f080 8112 	bcs.w	8000fb6 <__udivmoddi4+0x27e>
 8000d92:	4299      	cmp	r1, r3
 8000d94:	f240 810f 	bls.w	8000fb6 <__udivmoddi4+0x27e>
 8000d98:	3c02      	subs	r4, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	fa1f f38e 	uxth.w	r3, lr
 8000da2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da6:	fb07 1110 	mls	r1, r7, r0, r1
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f606 	mul.w	r6, r0, r6
 8000db2:	429e      	cmp	r6, r3
 8000db4:	d90a      	bls.n	8000dcc <__udivmoddi4+0x94>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dbe:	f080 80fc 	bcs.w	8000fba <__udivmoddi4+0x282>
 8000dc2:	429e      	cmp	r6, r3
 8000dc4:	f240 80f9 	bls.w	8000fba <__udivmoddi4+0x282>
 8000dc8:	4463      	add	r3, ip
 8000dca:	3802      	subs	r0, #2
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11d      	cbz	r5, 8000dde <__udivmoddi4+0xa6>
 8000dd6:	40d3      	lsrs	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	e9c5 3200 	strd	r3, r2, [r5]
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d905      	bls.n	8000df2 <__udivmoddi4+0xba>
 8000de6:	b10d      	cbz	r5, 8000dec <__udivmoddi4+0xb4>
 8000de8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	4608      	mov	r0, r1
 8000df0:	e7f5      	b.n	8000dde <__udivmoddi4+0xa6>
 8000df2:	fab3 f183 	clz	r1, r3
 8000df6:	2900      	cmp	r1, #0
 8000df8:	d146      	bne.n	8000e88 <__udivmoddi4+0x150>
 8000dfa:	42a3      	cmp	r3, r4
 8000dfc:	d302      	bcc.n	8000e04 <__udivmoddi4+0xcc>
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	f0c0 80f0 	bcc.w	8000fe4 <__udivmoddi4+0x2ac>
 8000e04:	1a86      	subs	r6, r0, r2
 8000e06:	eb64 0303 	sbc.w	r3, r4, r3
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	2d00      	cmp	r5, #0
 8000e0e:	d0e6      	beq.n	8000dde <__udivmoddi4+0xa6>
 8000e10:	e9c5 6300 	strd	r6, r3, [r5]
 8000e14:	e7e3      	b.n	8000dde <__udivmoddi4+0xa6>
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	f040 8090 	bne.w	8000f3c <__udivmoddi4+0x204>
 8000e1c:	eba1 040c 	sub.w	r4, r1, ip
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa1f f78c 	uxth.w	r7, ip
 8000e28:	2101      	movs	r1, #1
 8000e2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb08 4416 	mls	r4, r8, r6, r4
 8000e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e3a:	fb07 f006 	mul.w	r0, r7, r6
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x11c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x11a>
 8000e4c:	4298      	cmp	r0, r3
 8000e4e:	f200 80cd 	bhi.w	8000fec <__udivmoddi4+0x2b4>
 8000e52:	4626      	mov	r6, r4
 8000e54:	1a1c      	subs	r4, r3, r0
 8000e56:	fa1f f38e 	uxth.w	r3, lr
 8000e5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb00 f707 	mul.w	r7, r0, r7
 8000e6a:	429f      	cmp	r7, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x148>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x146>
 8000e78:	429f      	cmp	r7, r3
 8000e7a:	f200 80b0 	bhi.w	8000fde <__udivmoddi4+0x2a6>
 8000e7e:	4620      	mov	r0, r4
 8000e80:	1bdb      	subs	r3, r3, r7
 8000e82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0x9c>
 8000e88:	f1c1 0620 	rsb	r6, r1, #32
 8000e8c:	408b      	lsls	r3, r1
 8000e8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e92:	431f      	orrs	r7, r3
 8000e94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e98:	fa04 f301 	lsl.w	r3, r4, r1
 8000e9c:	ea43 030c 	orr.w	r3, r3, ip
 8000ea0:	40f4      	lsrs	r4, r6
 8000ea2:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea6:	0c38      	lsrs	r0, r7, #16
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb4 fef0 	udiv	lr, r4, r0
 8000eb0:	fa1f fc87 	uxth.w	ip, r7
 8000eb4:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebc:	fb0e f90c 	mul.w	r9, lr, ip
 8000ec0:	45a1      	cmp	r9, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	d90a      	bls.n	8000ede <__udivmoddi4+0x1a6>
 8000ec8:	193c      	adds	r4, r7, r4
 8000eca:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ece:	f080 8084 	bcs.w	8000fda <__udivmoddi4+0x2a2>
 8000ed2:	45a1      	cmp	r9, r4
 8000ed4:	f240 8081 	bls.w	8000fda <__udivmoddi4+0x2a2>
 8000ed8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	eba4 0409 	sub.w	r4, r4, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eea:	fb00 4413 	mls	r4, r0, r3, r4
 8000eee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x1d2>
 8000efa:	193c      	adds	r4, r7, r4
 8000efc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f00:	d267      	bcs.n	8000fd2 <__udivmoddi4+0x29a>
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d965      	bls.n	8000fd2 <__udivmoddi4+0x29a>
 8000f06:	3b02      	subs	r3, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f12:	eba4 040c 	sub.w	r4, r4, ip
 8000f16:	429c      	cmp	r4, r3
 8000f18:	46ce      	mov	lr, r9
 8000f1a:	469c      	mov	ip, r3
 8000f1c:	d351      	bcc.n	8000fc2 <__udivmoddi4+0x28a>
 8000f1e:	d04e      	beq.n	8000fbe <__udivmoddi4+0x286>
 8000f20:	b155      	cbz	r5, 8000f38 <__udivmoddi4+0x200>
 8000f22:	ebb8 030e 	subs.w	r3, r8, lr
 8000f26:	eb64 040c 	sbc.w	r4, r4, ip
 8000f2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2e:	40cb      	lsrs	r3, r1
 8000f30:	431e      	orrs	r6, r3
 8000f32:	40cc      	lsrs	r4, r1
 8000f34:	e9c5 6400 	strd	r6, r4, [r5]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	e750      	b.n	8000dde <__udivmoddi4+0xa6>
 8000f3c:	f1c2 0320 	rsb	r3, r2, #32
 8000f40:	fa20 f103 	lsr.w	r1, r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa24 f303 	lsr.w	r3, r4, r3
 8000f4c:	4094      	lsls	r4, r2
 8000f4e:	430c      	orrs	r4, r1
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f58:	fa1f f78c 	uxth.w	r7, ip
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3110 	mls	r1, r8, r0, r3
 8000f64:	0c23      	lsrs	r3, r4, #16
 8000f66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f6a:	fb00 f107 	mul.w	r1, r0, r7
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x24c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f7a:	d22c      	bcs.n	8000fd6 <__udivmoddi4+0x29e>
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d92a      	bls.n	8000fd6 <__udivmoddi4+0x29e>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1a5b      	subs	r3, r3, r1
 8000f86:	b2a4      	uxth	r4, r4
 8000f88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f94:	fb01 f307 	mul.w	r3, r1, r7
 8000f98:	42a3      	cmp	r3, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x276>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa4:	d213      	bcs.n	8000fce <__udivmoddi4+0x296>
 8000fa6:	42a3      	cmp	r3, r4
 8000fa8:	d911      	bls.n	8000fce <__udivmoddi4+0x296>
 8000faa:	3902      	subs	r1, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	1ae4      	subs	r4, r4, r3
 8000fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb4:	e739      	b.n	8000e2a <__udivmoddi4+0xf2>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	e6f0      	b.n	8000d9c <__udivmoddi4+0x64>
 8000fba:	4608      	mov	r0, r1
 8000fbc:	e706      	b.n	8000dcc <__udivmoddi4+0x94>
 8000fbe:	45c8      	cmp	r8, r9
 8000fc0:	d2ae      	bcs.n	8000f20 <__udivmoddi4+0x1e8>
 8000fc2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fca:	3801      	subs	r0, #1
 8000fcc:	e7a8      	b.n	8000f20 <__udivmoddi4+0x1e8>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	e7ed      	b.n	8000fae <__udivmoddi4+0x276>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	e799      	b.n	8000f0a <__udivmoddi4+0x1d2>
 8000fd6:	4630      	mov	r0, r6
 8000fd8:	e7d4      	b.n	8000f84 <__udivmoddi4+0x24c>
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	e77f      	b.n	8000ede <__udivmoddi4+0x1a6>
 8000fde:	4463      	add	r3, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74d      	b.n	8000e80 <__udivmoddi4+0x148>
 8000fe4:	4606      	mov	r6, r0
 8000fe6:	4623      	mov	r3, r4
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e70f      	b.n	8000e0c <__udivmoddi4+0xd4>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	4463      	add	r3, ip
 8000ff0:	e730      	b.n	8000e54 <__udivmoddi4+0x11c>
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <MX_FREERTOS_Init+0x18>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_FREERTOS_Init+0x1c>)
 8001002:	f007 f849 	bl	8008098 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a03      	ldr	r2, [pc, #12]	@ (8001018 <MX_FREERTOS_Init+0x20>)
 800100a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	0801cb90 	.word	0x0801cb90
 8001014:	08001e35 	.word	0x08001e35
 8001018:	20000cd4 	.word	0x20000cd4

0800101c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	@ 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001028:	f008 f90a 	bl	8009240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800102c:	4b5a      	ldr	r3, [pc, #360]	@ (8001198 <pvPortMallocMicroROS+0x17c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001034:	f000 f986 	bl	8001344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001038:	4b58      	ldr	r3, [pc, #352]	@ (800119c <pvPortMallocMicroROS+0x180>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4013      	ands	r3, r2
 8001040:	2b00      	cmp	r3, #0
 8001042:	f040 8090 	bne.w	8001166 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01e      	beq.n	800108a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800104c:	2208      	movs	r2, #8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f023 0307 	bic.w	r3, r3, #7
 8001064:	3308      	adds	r3, #8
 8001066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001076:	f383 8811 	msr	BASEPRI, r3
 800107a:	f3bf 8f6f 	isb	sy
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	e7fd      	b.n	8001086 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d06a      	beq.n	8001166 <pvPortMallocMicroROS+0x14a>
 8001090:	4b43      	ldr	r3, [pc, #268]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d865      	bhi.n	8001166 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800109a:	4b42      	ldr	r3, [pc, #264]	@ (80011a4 <pvPortMallocMicroROS+0x188>)
 800109c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <pvPortMallocMicroROS+0x188>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010a4:	e004      	b.n	80010b0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d903      	bls.n	80010c2 <pvPortMallocMicroROS+0xa6>
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f1      	bne.n	80010a6 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <pvPortMallocMicroROS+0x17c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d04c      	beq.n	8001166 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2208      	movs	r2, #8
 80010d2:	4413      	add	r3, r2
 80010d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	2308      	movs	r3, #8
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d920      	bls.n	8001130 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80010ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001104:	f383 8811 	msr	BASEPRI, r3
 8001108:	f3bf 8f6f 	isb	sy
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	613b      	str	r3, [r7, #16]
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	1ad2      	subs	r2, r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800112a:	69b8      	ldr	r0, [r7, #24]
 800112c:	f000 f96c 	bl	8001408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 800113c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <pvPortMallocMicroROS+0x18c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d203      	bcs.n	8001152 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <pvPortMallocMicroROS+0x184>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <pvPortMallocMicroROS+0x18c>)
 8001150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <pvPortMallocMicroROS+0x180>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001166:	f008 f879 	bl	800925c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00b      	beq.n	800118c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	60fb      	str	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800118c:	69fb      	ldr	r3, [r7, #28]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000481c 	.word	0x2000481c
 800119c:	20004828 	.word	0x20004828
 80011a0:	20004820 	.word	0x20004820
 80011a4:	20004814 	.word	0x20004814
 80011a8:	20004824 	.word	0x20004824

080011ac <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04a      	beq.n	8001254 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80011be:	2308      	movs	r3, #8
 80011c0:	425b      	negs	r3, r3
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4413      	add	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <vPortFreeMicroROS+0xb0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10b      	bne.n	80011f2 <vPortFreeMicroROS+0x46>
	__asm volatile
 80011da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	60fb      	str	r3, [r7, #12]
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	e7fd      	b.n	80011ee <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <vPortFreeMicroROS+0x66>
	__asm volatile
 80011fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011fe:	f383 8811 	msr	BASEPRI, r3
 8001202:	f3bf 8f6f 	isb	sy
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	60bb      	str	r3, [r7, #8]
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	e7fd      	b.n	800120e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <vPortFreeMicroROS+0xb0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d019      	beq.n	8001254 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d115      	bne.n	8001254 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <vPortFreeMicroROS+0xb0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001238:	f008 f802 	bl	8009240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <vPortFreeMicroROS+0xb4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <vPortFreeMicroROS+0xb4>)
 8001248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800124a:	6938      	ldr	r0, [r7, #16]
 800124c:	f000 f8dc 	bl	8001408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001250:	f008 f804 	bl	800925c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20004828 	.word	0x20004828
 8001260:	20004820 	.word	0x20004820

08001264 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001270:	2308      	movs	r3, #8
 8001272:	425b      	negs	r3, r3
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <getBlockSize+0x38>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	43db      	mvns	r3, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

	return count;
 800128c:	68fb      	ldr	r3, [r7, #12]
}
 800128e:	4618      	mov	r0, r3
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20004828 	.word	0x20004828

080012a0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012aa:	f007 ffc9 	bl	8009240 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7ff feb4 	bl	800101c <pvPortMallocMicroROS>
 80012b4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <pvPortReallocMicroROS+0x4c>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d014      	beq.n	80012ec <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffce 	bl	8001264 <getBlockSize>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2208      	movs	r2, #8
 80012cc:	1a9b      	subs	r3, r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d201      	bcs.n	80012dc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f019 fa56 	bl	801a792 <memcpy>

		vPortFreeMicroROS(pv);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff60 	bl	80011ac <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80012ec:	f007 ffb6 	bl	800925c <xTaskResumeAll>

	return newmem;
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001304:	f007 ff9c 	bl	8009240 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff fe82 	bl	800101c <pvPortMallocMicroROS>
 8001318:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	613b      	str	r3, [r7, #16]

  	while(count--)
 800131e:	e004      	b.n	800132a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	613a      	str	r2, [r7, #16]
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	1e5a      	subs	r2, r3, #1
 800132e:	617a      	str	r2, [r7, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f5      	bne.n	8001320 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001334:	f007 ff92 	bl	800925c <xTaskResumeAll>
  	return mem;
 8001338:	68fb      	ldr	r3, [r7, #12]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800134a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800134e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001350:	4b27      	ldr	r3, [pc, #156]	@ (80013f0 <prvHeapInit+0xac>)
 8001352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3307      	adds	r3, #7
 8001362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 0307 	bic.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <prvHeapInit+0xac>)
 8001374:	4413      	add	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800137c:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <prvHeapInit+0xb0>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <prvHeapInit+0xb0>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001390:	2208      	movs	r2, #8
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1a9b      	subs	r3, r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f023 0307 	bic.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a15      	ldr	r2, [pc, #84]	@ (80013f8 <prvHeapInit+0xb4>)
 80013a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <prvHeapInit+0xb4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80013ae:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <prvHeapInit+0xb4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <prvHeapInit+0xb4>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <prvHeapInit+0xb8>)
 80013d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <prvHeapInit+0xbc>)
 80013da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <prvHeapInit+0xc0>)
 80013de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20003c14 	.word	0x20003c14
 80013f4:	20004814 	.word	0x20004814
 80013f8:	2000481c 	.word	0x2000481c
 80013fc:	20004824 	.word	0x20004824
 8001400:	20004820 	.word	0x20004820
 8001404:	20004828 	.word	0x20004828

08001408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001410:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <prvInsertBlockIntoFreeList+0xac>)
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e002      	b.n	800141c <prvInsertBlockIntoFreeList+0x14>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d8f7      	bhi.n	8001416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	429a      	cmp	r2, r3
 8001436:	d108      	bne.n	800144a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	441a      	add	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	441a      	add	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d118      	bne.n	8001490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d00d      	beq.n	8001486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	e008      	b.n	8001498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <prvInsertBlockIntoFreeList+0xb0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e003      	b.n	8001498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d002      	beq.n	80014a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20004814 	.word	0x20004814
 80014b8:	2000481c 	.word	0x2000481c

080014bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_DMA_Init+0x60>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c6:	4a15      	ldr	r2, [pc, #84]	@ (800151c <MX_DMA_Init+0x60>)
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_DMA_Init+0x60>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <MX_DMA_Init+0x60>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <MX_DMA_Init+0x60>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <MX_DMA_Init+0x60>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2105      	movs	r1, #5
 80014f6:	200b      	movs	r0, #11
 80014f8:	f001 fccc 	bl	8002e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014fc:	200b      	movs	r0, #11
 80014fe:	f001 fce3 	bl	8002ec8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	200c      	movs	r0, #12
 8001508:	f001 fcc4 	bl	8002e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800150c:	200c      	movs	r0, #12
 800150e:	f001 fcdb 	bl	8002ec8 <HAL_NVIC_EnableIRQ>

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800152e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001530:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001534:	4904      	ldr	r1, [pc, #16]	@ (8001548 <cubemx_transport_open+0x28>)
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f004 fc70 	bl	8005e1c <HAL_UART_Receive_DMA>
    return true;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000482c 	.word	0x2000482c

0800154c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800155a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f004 fca9 	bl	8005eb4 <HAL_UART_DMAStop>
    return true;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001580:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001588:	2b20      	cmp	r3, #32
 800158a:	d11b      	bne.n	80015c4 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	b29b      	uxth	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	6978      	ldr	r0, [r7, #20]
 8001596:	f004 fbc1 	bl	8005d1c <HAL_UART_Transmit_DMA>
 800159a:	4603      	mov	r3, r0
 800159c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800159e:	e002      	b.n	80015a6 <cubemx_transport_write+0x3a>
            osDelay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f006 fe0b 	bl	80081bc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015a6:	7cfb      	ldrb	r3, [r7, #19]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d104      	bne.n	80015b6 <cubemx_transport_write+0x4a>
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b2:	2b20      	cmp	r3, #32
 80015b4:	d1f4      	bne.n	80015a0 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80015b6:	7cfb      	ldrb	r3, [r7, #19]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <cubemx_transport_write+0x54>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	e002      	b.n	80015c6 <cubemx_transport_write+0x5a>
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80015c4:	2300      	movs	r3, #0
    }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015e4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ea:	b672      	cpsid	i
}
 80015ec:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015fc:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <cubemx_transport_read+0x9c>)
 80015fe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001600:	b662      	cpsie	i
}
 8001602:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	3301      	adds	r3, #1
 8001608:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800160a:	2001      	movs	r0, #1
 800160c:	f006 fdd6 	bl	80081bc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <cubemx_transport_read+0xa0>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <cubemx_transport_read+0x9c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d103      	bne.n	8001624 <cubemx_transport_read+0x54>
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbe2      	blt.n	80015ea <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001628:	e011      	b.n	800164e <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <cubemx_transport_read+0xa0>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	440b      	add	r3, r1
 8001634:	490f      	ldr	r1, [pc, #60]	@ (8001674 <cubemx_transport_read+0xa4>)
 8001636:	5c8a      	ldrb	r2, [r1, r2]
 8001638:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <cubemx_transport_read+0xa0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001644:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <cubemx_transport_read+0xa0>)
 8001646:	6013      	str	r3, [r2, #0]
        wrote++;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	3301      	adds	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <cubemx_transport_read+0xa0>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <cubemx_transport_read+0x9c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d003      	beq.n	8001662 <cubemx_transport_read+0x92>
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	d3e3      	bcc.n	800162a <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001662:	69bb      	ldr	r3, [r7, #24]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20005030 	.word	0x20005030
 8001670:	2000502c 	.word	0x2000502c
 8001674:	2000482c 	.word	0x2000482c

08001678 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <MX_GPIO_Init+0xd4>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	4a2e      	ldr	r2, [pc, #184]	@ (800174c <MX_GPIO_Init+0xd4>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169a:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <MX_GPIO_Init+0xd4>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a6:	4b29      	ldr	r3, [pc, #164]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	4a28      	ldr	r2, [pc, #160]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b2:	4b26      	ldr	r3, [pc, #152]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b23      	ldr	r3, [pc, #140]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	4a22      	ldr	r2, [pc, #136]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b1d      	ldr	r3, [pc, #116]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b1a      	ldr	r3, [pc, #104]	@ (800174c <MX_GPIO_Init+0xd4>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f6:	f002 f8b5 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001700:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480f      	ldr	r0, [pc, #60]	@ (8001750 <MX_GPIO_Init+0xd8>)
 8001712:	f001 ff25 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001716:	2320      	movs	r3, #32
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001730:	f001 ff16 	bl	8003560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2105      	movs	r1, #5
 8001738:	2028      	movs	r0, #40	@ 0x28
 800173a:	f001 fbab 	bl	8002e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800173e:	2028      	movs	r0, #40	@ 0x28
 8001740:	f001 fbc2 	bl	8002ec8 <HAL_NVIC_EnableIRQ>

}
 8001744:	bf00      	nop
 8001746:	3728      	adds	r7, #40	@ 0x28
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000
 8001750:	48000800 	.word	0x48000800

08001754 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800175a:	4a1c      	ldr	r2, [pc, #112]	@ (80017cc <MX_I2C1_Init+0x78>)
 800175c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40621236;
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001760:	4a1b      	ldr	r2, [pc, #108]	@ (80017d0 <MX_I2C1_Init+0x7c>)
 8001762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176a:	4b17      	ldr	r3, [pc, #92]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800176c:	2201      	movs	r2, #1
 800176e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001776:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178e:	480e      	ldr	r0, [pc, #56]	@ (80017c8 <MX_I2C1_Init+0x74>)
 8001790:	f002 f8a3 	bl	80038da <HAL_I2C_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800179a:	f000 fe35 	bl	8002408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800179e:	2100      	movs	r1, #0
 80017a0:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <MX_I2C1_Init+0x74>)
 80017a2:	f002 fe25 	bl	80043f0 <HAL_I2CEx_ConfigAnalogFilter>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017ac:	f000 fe2c 	bl	8002408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017b0:	2100      	movs	r1, #0
 80017b2:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <MX_I2C1_Init+0x74>)
 80017b4:	f002 fe67 	bl	8004486 <HAL_I2CEx_ConfigDigitalFilter>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017be:	f000 fe23 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20005034 	.word	0x20005034
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40621236 	.word	0x40621236

080017d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09e      	sub	sp, #120	@ 0x78
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2254      	movs	r2, #84	@ 0x54
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f018 ff03 	bl	801a600 <memset>
  if(i2cHandle->Instance==I2C1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <HAL_I2C_MspInit+0xa8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d136      	bne.n	8001872 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001804:	2340      	movs	r3, #64	@ 0x40
 8001806:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fc99 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800181c:	f000 fdf4 	bl	8002408 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001824:	4a16      	ldr	r2, [pc, #88]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001838:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800183c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183e:	2312      	movs	r3, #18
 8001840:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800184a:	2304      	movs	r3, #4
 800184c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001852:	4619      	mov	r1, r3
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <HAL_I2C_MspInit+0xb0>)
 8001856:	f001 fe83 	bl	8003560 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 8001860:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001864:	6593      	str	r3, [r2, #88]	@ 0x58
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3778      	adds	r7, #120	@ 0x78
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40005400 	.word	0x40005400
 8001880:	40021000 	.word	0x40021000
 8001884:	48000400 	.word	0x48000400

08001888 <timer_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800188c:	b090      	sub	sp, #64	@ 0x40
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8284 	beq.w	8001da6 <timer_callback+0x51e>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800189e:	49c0      	ldr	r1, [pc, #768]	@ (8001ba0 <timer_callback+0x318>)
 80018a0:	48c0      	ldr	r0, [pc, #768]	@ (8001ba4 <timer_callback+0x31c>)
 80018a2:	f006 f829 	bl	80078f8 <MPU6050_Read_All>

		mpu6050_msg.header.stamp.sec = rmw_uros_epoch_millis() / 1000;
 80018a6:	f00d fa53 	bl	800ed50 <rmw_uros_epoch_millis>
 80018aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	f7ff f9d9 	bl	8000c68 <__aeabi_ldivmod>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4bbb      	ldr	r3, [pc, #748]	@ (8001ba8 <timer_callback+0x320>)
 80018bc:	601a      	str	r2, [r3, #0]
		mpu6050_msg.header.stamp.nanosec = rmw_uros_epoch_nanos() / 1000;
 80018be:	f00d fa55 	bl	800ed6c <rmw_uros_epoch_nanos>
 80018c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f7ff f9cd 	bl	8000c68 <__aeabi_ldivmod>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4bb5      	ldr	r3, [pc, #724]	@ (8001ba8 <timer_callback+0x320>)
 80018d4:	605a      	str	r2, [r3, #4]
//		mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az;
//		mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx;
//		mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy;
//		mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz;

		mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax
 80018d6:	4bb2      	ldr	r3, [pc, #712]	@ (8001ba0 <timer_callback+0x318>)
 80018d8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018dc:	a3a0      	add	r3, pc, #640	@ (adr r3, 8001b60 <timer_callback+0x2d8>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f7fe fec1 	bl	8000668 <__aeabi_dmul>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
				- 1.066469;
 80018ee:	a39e      	add	r3, pc, #632	@ (adr r3, 8001b68 <timer_callback+0x2e0>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fd00 	bl	80002f8 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
		mpu6050_msg.linear_acceleration.x = G2M_S2 * MPU6050.Ax
 80018fc:	49aa      	ldr	r1, [pc, #680]	@ (8001ba8 <timer_callback+0x320>)
 80018fe:	e9c1 2338 	strd	r2, r3, [r1, #224]	@ 0xe0
		mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay
 8001902:	4ba7      	ldr	r3, [pc, #668]	@ (8001ba0 <timer_callback+0x318>)
 8001904:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001908:	a395      	add	r3, pc, #596	@ (adr r3, 8001b60 <timer_callback+0x2d8>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe feab 	bl	8000668 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
				- -0.050949;
 800191a:	a395      	add	r3, pc, #596	@ (adr r3, 8001b70 <timer_callback+0x2e8>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fcec 	bl	80002fc <__adddf3>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
		mpu6050_msg.linear_acceleration.y = G2M_S2 * MPU6050.Ay
 8001928:	499f      	ldr	r1, [pc, #636]	@ (8001ba8 <timer_callback+0x320>)
 800192a:	e9c1 233a 	strd	r2, r3, [r1, #232]	@ 0xe8
		mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az
 800192e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ba0 <timer_callback+0x318>)
 8001930:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001934:	a38a      	add	r3, pc, #552	@ (adr r3, 8001b60 <timer_callback+0x2d8>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe95 	bl	8000668 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
				- 1.663030;
 8001946:	a38c      	add	r3, pc, #560	@ (adr r3, 8001b78 <timer_callback+0x2f0>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fcd4 	bl	80002f8 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
		mpu6050_msg.linear_acceleration.z = G2M_S2 * MPU6050.Az
 8001954:	4994      	ldr	r1, [pc, #592]	@ (8001ba8 <timer_callback+0x320>)
 8001956:	e9c1 233c 	strd	r2, r3, [r1, #240]	@ 0xf0

		mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx
 800195a:	4b91      	ldr	r3, [pc, #580]	@ (8001ba0 <timer_callback+0x318>)
 800195c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001960:	a387      	add	r3, pc, #540	@ (adr r3, 8001b80 <timer_callback+0x2f8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fe7f 	bl	8000668 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
				- (-0.007206);
 8001972:	a385      	add	r3, pc, #532	@ (adr r3, 8001b88 <timer_callback+0x300>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fcc0 	bl	80002fc <__adddf3>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
		mpu6050_msg.angular_velocity.x = DEG2RAD * MPU6050.Gx
 8001980:	4989      	ldr	r1, [pc, #548]	@ (8001ba8 <timer_callback+0x320>)
 8001982:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
		mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy
 8001986:	4b86      	ldr	r3, [pc, #536]	@ (8001ba0 <timer_callback+0x318>)
 8001988:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800198c:	a37c      	add	r3, pc, #496	@ (adr r3, 8001b80 <timer_callback+0x2f8>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fe69 	bl	8000668 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
				- (-0.003486);
 800199e:	a37c      	add	r3, pc, #496	@ (adr r3, 8001b90 <timer_callback+0x308>)
 80019a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a4:	f7fe fcaa 	bl	80002fc <__adddf3>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
		mpu6050_msg.angular_velocity.y = DEG2RAD * MPU6050.Gy
 80019ac:	497e      	ldr	r1, [pc, #504]	@ (8001ba8 <timer_callback+0x320>)
 80019ae:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz
 80019b2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ba0 <timer_callback+0x318>)
 80019b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80019b8:	a371      	add	r3, pc, #452	@ (adr r3, 8001b80 <timer_callback+0x2f8>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe53 	bl	8000668 <__aeabi_dmul>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
				- (0.031661);
 80019ca:	a373      	add	r3, pc, #460	@ (adr r3, 8001b98 <timer_callback+0x310>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fc92 	bl	80002f8 <__aeabi_dsub>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
		mpu6050_msg.angular_velocity.z = DEG2RAD * MPU6050.Gz
 80019d8:	4973      	ldr	r1, [pc, #460]	@ (8001ba8 <timer_callback+0x320>)
 80019da:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

		float Ax = mpu6050_msg.linear_acceleration.x;
 80019de:	4b72      	ldr	r3, [pc, #456]	@ (8001ba8 <timer_callback+0x320>)
 80019e0:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f8ee 	bl	8000bc8 <__aeabi_d2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
		float Ay = mpu6050_msg.linear_acceleration.y;
 80019f0:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba8 <timer_callback+0x320>)
 80019f2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff f8e5 	bl	8000bc8 <__aeabi_d2f>
 80019fe:	4603      	mov	r3, r0
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
		float Az = mpu6050_msg.linear_acceleration.z;
 8001a02:	4b69      	ldr	r3, [pc, #420]	@ (8001ba8 <timer_callback+0x320>)
 8001a04:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	@ 0xf0
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8dc 	bl	8000bc8 <__aeabi_d2f>
 8001a10:	4603      	mov	r3, r0
 8001a12:	633b      	str	r3, [r7, #48]	@ 0x30

		u[0] = mpu6050_msg.angular_velocity.x;
 8001a14:	4b64      	ldr	r3, [pc, #400]	@ (8001ba8 <timer_callback+0x320>)
 8001a16:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001a1a:	4964      	ldr	r1, [pc, #400]	@ (8001bac <timer_callback+0x324>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]
		u[1] = mpu6050_msg.angular_velocity.y;
 8001a20:	4b61      	ldr	r3, [pc, #388]	@ (8001ba8 <timer_callback+0x320>)
 8001a22:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001a26:	4961      	ldr	r1, [pc, #388]	@ (8001bac <timer_callback+0x324>)
 8001a28:	e9c1 2302 	strd	r2, r3, [r1, #8]

		float angleRoll = atan2(Ay, hypot(Ax, Az));
 8001a2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a2e:	f7fe fdc3 	bl	80005b8 <__aeabi_f2d>
 8001a32:	4604      	mov	r4, r0
 8001a34:	460d      	mov	r5, r1
 8001a36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a38:	f7fe fdbe 	bl	80005b8 <__aeabi_f2d>
 8001a3c:	4680      	mov	r8, r0
 8001a3e:	4689      	mov	r9, r1
 8001a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a42:	f7fe fdb9 	bl	80005b8 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	ec43 2b11 	vmov	d1, r2, r3
 8001a4e:	ec49 8b10 	vmov	d0, r8, r9
 8001a52:	f019 fce1 	bl	801b418 <hypot>
 8001a56:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5a:	eef0 7a60 	vmov.f32	s15, s1
 8001a5e:	eeb0 1a47 	vmov.f32	s2, s14
 8001a62:	eef0 1a67 	vmov.f32	s3, s15
 8001a66:	ec45 4b10 	vmov	d0, r4, r5
 8001a6a:	f019 fcd3 	bl	801b414 <atan2>
 8001a6e:	ec53 2b10 	vmov	r2, r3, d0
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f8a7 	bl	8000bc8 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		float anglePitch = atan2(-Ax, hypot(Ay, Az));
 8001a7e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001a82:	eef1 7a67 	vneg.f32	s15, s15
 8001a86:	ee17 3a90 	vmov	r3, s15
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd94 	bl	80005b8 <__aeabi_f2d>
 8001a90:	4604      	mov	r4, r0
 8001a92:	460d      	mov	r5, r1
 8001a94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001a96:	f7fe fd8f 	bl	80005b8 <__aeabi_f2d>
 8001a9a:	4680      	mov	r8, r0
 8001a9c:	4689      	mov	r9, r1
 8001a9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001aa0:	f7fe fd8a 	bl	80005b8 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ec43 2b11 	vmov	d1, r2, r3
 8001aac:	ec49 8b10 	vmov	d0, r8, r9
 8001ab0:	f019 fcb2 	bl	801b418 <hypot>
 8001ab4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ab8:	eef0 7a60 	vmov.f32	s15, s1
 8001abc:	eeb0 1a47 	vmov.f32	s2, s14
 8001ac0:	eef0 1a67 	vmov.f32	s3, s15
 8001ac4:	ec45 4b10 	vmov	d0, r4, r5
 8001ac8:	f019 fca4 	bl	801b414 <atan2>
 8001acc:	ec53 2b10 	vmov	r2, r3, d0
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f878 	bl	8000bc8 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28

		//predict
		float future_roll = x[0] + dt * u[0];
 8001adc:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <timer_callback+0x328>)
 8001ade:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ae2:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <timer_callback+0x32c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd66 	bl	80005b8 <__aeabi_f2d>
 8001aec:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <timer_callback+0x324>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fdb9 	bl	8000668 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4620      	mov	r0, r4
 8001afc:	4629      	mov	r1, r5
 8001afe:	f7fe fbfd 	bl	80002fc <__adddf3>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f85d 	bl	8000bc8 <__aeabi_d2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
		float future_pitch = x[1] + dt * u[1];
 8001b12:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <timer_callback+0x328>)
 8001b14:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <timer_callback+0x32c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd4b 	bl	80005b8 <__aeabi_f2d>
 8001b22:	4b22      	ldr	r3, [pc, #136]	@ (8001bac <timer_callback+0x324>)
 8001b24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b28:	f7fe fd9e 	bl	8000668 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4620      	mov	r0, r4
 8001b32:	4629      	mov	r1, r5
 8001b34:	f7fe fbe2 	bl	80002fc <__adddf3>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f842 	bl	8000bc8 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	623b      	str	r3, [r7, #32]

		float future_P_roll = p[0] + (pow(dt, 2) * p_roll);
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <timer_callback+0x330>)
 8001b4a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <timer_callback+0x32c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd30 	bl	80005b8 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e02e      	b.n	8001bbc <timer_callback+0x334>
 8001b5e:	bf00      	nop
 8001b60:	51eb851f 	.word	0x51eb851f
 8001b64:	40239eb8 	.word	0x40239eb8
 8001b68:	cc532a49 	.word	0xcc532a49
 8001b6c:	3ff11041 	.word	0x3ff11041
 8001b70:	c1871e6d 	.word	0xc1871e6d
 8001b74:	3faa15fc 	.word	0x3faa15fc
 8001b78:	58644524 	.word	0x58644524
 8001b7c:	3ffa9bc5 	.word	0x3ffa9bc5
 8001b80:	a2529d39 	.word	0xa2529d39
 8001b84:	3f91df46 	.word	0x3f91df46
 8001b88:	e55c0fcb 	.word	0xe55c0fcb
 8001b8c:	3f7d8409 	.word	0x3f7d8409
 8001b90:	ffcdab19 	.word	0xffcdab19
 8001b94:	3f6c8eab 	.word	0x3f6c8eab
 8001b98:	df1e0829 	.word	0xdf1e0829
 8001b9c:	3fa035de 	.word	0x3fa035de
 8001ba0:	200052a8 	.word	0x200052a8
 8001ba4:	20005034 	.word	0x20005034
 8001ba8:	200050e0 	.word	0x200050e0
 8001bac:	200053a8 	.word	0x200053a8
 8001bb0:	20005390 	.word	0x20005390
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 8001db0 <timer_callback+0x528>
 8001bc0:	ec43 2b10 	vmov	d0, r2, r3
 8001bc4:	f019 fc5c 	bl	801b480 <pow>
 8001bc8:	ec51 0b10 	vmov	r0, r1, d0
 8001bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8001db8 <timer_callback+0x530>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fd49 	bl	8000668 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb8d 	bl	80002fc <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ffed 	bl	8000bc8 <__aeabi_d2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	61fb      	str	r3, [r7, #28]
		float future_P_pitch = p[1] + (pow(dt, 2) * p_pitch);
 8001bf2:	4b72      	ldr	r3, [pc, #456]	@ (8001dbc <timer_callback+0x534>)
 8001bf4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001bf8:	4b71      	ldr	r3, [pc, #452]	@ (8001dc0 <timer_callback+0x538>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fcdb 	bl	80005b8 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ed9f 1b6a 	vldr	d1, [pc, #424]	@ 8001db0 <timer_callback+0x528>
 8001c0a:	ec43 2b10 	vmov	d0, r2, r3
 8001c0e:	f019 fc37 	bl	801b480 <pow>
 8001c12:	ec51 0b10 	vmov	r0, r1, d0
 8001c16:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc4 <timer_callback+0x53c>)
 8001c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1c:	f7fe fd24 	bl	8000668 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4620      	mov	r0, r4
 8001c26:	4629      	mov	r1, r5
 8001c28:	f7fe fb68 	bl	80002fc <__adddf3>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe ffc8 	bl	8000bc8 <__aeabi_d2f>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	61bb      	str	r3, [r7, #24]

		//kalman gain update
		float K_roll = future_P_roll / (future_P_roll + r_roll);
 8001c3c:	69f8      	ldr	r0, [r7, #28]
 8001c3e:	f7fe fcbb 	bl	80005b8 <__aeabi_f2d>
 8001c42:	4604      	mov	r4, r0
 8001c44:	460d      	mov	r5, r1
 8001c46:	69f8      	ldr	r0, [r7, #28]
 8001c48:	f7fe fcb6 	bl	80005b8 <__aeabi_f2d>
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc8 <timer_callback+0x540>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fb53 	bl	80002fc <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fe2d 	bl	80008bc <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ffad 	bl	8000bc8 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float K_pitch = future_P_pitch / (future_P_pitch + r_pitch);
 8001c72:	69b8      	ldr	r0, [r7, #24]
 8001c74:	f7fe fca0 	bl	80005b8 <__aeabi_f2d>
 8001c78:	4604      	mov	r4, r0
 8001c7a:	460d      	mov	r5, r1
 8001c7c:	69b8      	ldr	r0, [r7, #24]
 8001c7e:	f7fe fc9b 	bl	80005b8 <__aeabi_f2d>
 8001c82:	4b52      	ldr	r3, [pc, #328]	@ (8001dcc <timer_callback+0x544>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fb38 	bl	80002fc <__adddf3>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4620      	mov	r0, r4
 8001c92:	4629      	mov	r1, r5
 8001c94:	f7fe fe12 	bl	80008bc <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe ff92 	bl	8000bc8 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	617b      	str	r3, [r7, #20]

		//fusion state update
		if (abs(angleRoll) > 1.3) {
 8001ca8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb0:	ee17 3a90 	vmov	r3, s15
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bfb8      	it	lt
 8001cb8:	425b      	neglt	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	dd02      	ble.n	8001cc4 <timer_callback+0x43c>
			K_roll = 0;
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		x[0] = future_roll + K_roll * (angleRoll - future_roll);
 8001cc4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001cc8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cd0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce0:	ee17 0a90 	vmov	r0, s15
 8001ce4:	f7fe fc68 	bl	80005b8 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4938      	ldr	r1, [pc, #224]	@ (8001dd0 <timer_callback+0x548>)
 8001cee:	e9c1 2300 	strd	r2, r3, [r1]
		x[1] = future_pitch + K_pitch * (anglePitch - future_pitch);
 8001cf2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001cf6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d06:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0e:	ee17 0a90 	vmov	r0, s15
 8001d12:	f7fe fc51 	bl	80005b8 <__aeabi_f2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	492d      	ldr	r1, [pc, #180]	@ (8001dd0 <timer_callback+0x548>)
 8001d1c:	e9c1 2302 	strd	r2, r3, [r1, #8]

		//p update
		p[0] = (1 - K_roll) * p[0];
 8001d20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d24:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	ee17 0a90 	vmov	r0, s15
 8001d30:	f7fe fc42 	bl	80005b8 <__aeabi_f2d>
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <timer_callback+0x534>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fc95 	bl	8000668 <__aeabi_dmul>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	491e      	ldr	r1, [pc, #120]	@ (8001dbc <timer_callback+0x534>)
 8001d44:	e9c1 2300 	strd	r2, r3, [r1]
		p[1] = (1 - K_pitch) * p[1];
 8001d48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d54:	ee17 0a90 	vmov	r0, s15
 8001d58:	f7fe fc2e 	bl	80005b8 <__aeabi_f2d>
 8001d5c:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <timer_callback+0x534>)
 8001d5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d62:	f7fe fc81 	bl	8000668 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4914      	ldr	r1, [pc, #80]	@ (8001dbc <timer_callback+0x534>)
 8001d6c:	e9c1 2302 	strd	r2, r3, [r1, #8]

		mpu6050_msg.orientation.x = x[0];
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <timer_callback+0x548>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	4917      	ldr	r1, [pc, #92]	@ (8001dd4 <timer_callback+0x54c>)
 8001d78:	e9c1 2306 	strd	r2, r3, [r1, #24]
		mpu6050_msg.orientation.y = x[1];
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <timer_callback+0x548>)
 8001d7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d82:	4914      	ldr	r1, [pc, #80]	@ (8001dd4 <timer_callback+0x54c>)
 8001d84:	e9c1 2308 	strd	r2, r3, [r1, #32]
		mpu6050_msg.orientation.z = angleRoll;
 8001d88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d8a:	f7fe fc15 	bl	80005b8 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4910      	ldr	r1, [pc, #64]	@ (8001dd4 <timer_callback+0x54c>)
 8001d94:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

		update_vel();
 8001d98:	f000 fa1e 	bl	80021d8 <update_vel>





		rcl_publish(&mpu6050_publisher, &mpu6050_msg, NULL);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <timer_callback+0x54c>)
 8001da0:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <timer_callback+0x550>)
 8001da2:	f00b f837 	bl	800ce14 <rcl_publish>

	}
}
 8001da6:	bf00      	nop
 8001da8:	3740      	adds	r7, #64	@ 0x40
 8001daa:	46bd      	mov	sp, r7
 8001dac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40000000 	.word	0x40000000
 8001db8:	200053d0 	.word	0x200053d0
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	200053d8 	.word	0x200053d8
 8001dc8:	200053c0 	.word	0x200053c0
 8001dcc:	200053c8 	.word	0x200053c8
 8001dd0:	20005390 	.word	0x20005390
 8001dd4:	200050e0 	.word	0x200050e0
 8001dd8:	200050dc 	.word	0x200050dc

08001ddc <service_callback>:

void service_callback(const void *request_msg, void *response_msg) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]

	imu_custom_msg__srv__GetStatus_Response *response =
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
			(imu_custom_msg__srv__GetStatus_Response*) response_msg;

	read_register();
 8001dea:	f000 facb 	bl	8002384 <read_register>
	if(ret == 0){
 8001dee:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <service_callback+0x30>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <service_callback+0x22>
		response->status.data = true;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
		response->status.data = false;
	}



}
 8001dfc:	e002      	b.n	8001e04 <service_callback+0x28>
		response->status.data = false;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20005389 	.word	0x20005389

08001e10 <calibrate_service_callback>:

void calibrate_service_callback(const void *req_msg, void *res_msg) {
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    const imu_custom_msg__srv__Calibrate_Request *req = (const imu_custom_msg__srv__Calibrate_Request *) req_msg;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]
    imu_custom_msg__srv__Calibrate_Response *res = (imu_custom_msg__srv__Calibrate_Response *) res_msg;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	60bb      	str	r3, [r7, #8]

    // Set the response
    res->success.data = true;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <StartDefaultTask>:

void StartDefaultTask(void *argument) {
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b0b2      	sub	sp, #200	@ 0xc8
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	/* USER CODE BEGIN 5 */

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 8001e3e:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <StartDefaultTask+0x1a8>)
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	4b67      	ldr	r3, [pc, #412]	@ (8001fe0 <StartDefaultTask+0x1ac>)
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4b67      	ldr	r3, [pc, #412]	@ (8001fe4 <StartDefaultTask+0x1b0>)
 8001e48:	4a67      	ldr	r2, [pc, #412]	@ (8001fe8 <StartDefaultTask+0x1b4>)
 8001e4a:	4968      	ldr	r1, [pc, #416]	@ (8001fec <StartDefaultTask+0x1b8>)
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f00c f8a3 	bl	800df98 <rmw_uros_set_custom_transport>
	true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8001e52:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e56:	4618      	mov	r0, r3
 8001e58:	f00b ffba 	bl	800ddd0 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001e5c:	4b64      	ldr	r3, [pc, #400]	@ (8001ff0 <StartDefaultTask+0x1bc>)
 8001e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001e62:	4b64      	ldr	r3, [pc, #400]	@ (8001ff4 <StartDefaultTask+0x1c0>)
 8001e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001e68:	4b63      	ldr	r3, [pc, #396]	@ (8001ff8 <StartDefaultTask+0x1c4>)
 8001e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001e6e:	4b63      	ldr	r3, [pc, #396]	@ (8001ffc <StartDefaultTask+0x1c8>)
 8001e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001e74:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00b ffb7 	bl	800ddec <rcutils_set_default_allocator>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f083 0301 	eor.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d004      	beq.n	8001e94 <StartDefaultTask+0x60>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8001e8a:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001e8e:	485c      	ldr	r0, [pc, #368]	@ (8002000 <StartDefaultTask+0x1cc>)
 8001e90:	f018 f9d8 	bl	801a244 <iprintf>
	}

	// micro-ROS app
	allocator = rcl_get_default_allocator();
 8001e94:	4c5b      	ldr	r4, [pc, #364]	@ (8002004 <StartDefaultTask+0x1d0>)
 8001e96:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00b ffc4 	bl	800de28 <rcutils_get_default_allocator>
 8001ea0:	4625      	mov	r5, r4
 8001ea2:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	602b      	str	r3, [r5, #0]

	//create init_options
	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8001eae:	f00a fde1 	bl	800ca74 <rcl_get_zero_initialized_init_options>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	rcl_init_options_init(&init_options, allocator);
 8001eb8:	4b52      	ldr	r3, [pc, #328]	@ (8002004 <StartDefaultTask+0x1d0>)
 8001eba:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001ebe:	466d      	mov	r5, sp
 8001ec0:	f103 020c 	add.w	r2, r3, #12
 8001ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f00a fdd2 	bl	800ca78 <rcl_init_options_init>
	rcl_init_options_set_domain_id(&init_options, 69);
 8001ed4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001ed8:	2145      	movs	r1, #69	@ 0x45
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00a fec8 	bl	800cc70 <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 8001ee0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001ee4:	4a47      	ldr	r2, [pc, #284]	@ (8002004 <StartDefaultTask+0x1d0>)
 8001ee6:	9200      	str	r2, [sp, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	4846      	ldr	r0, [pc, #280]	@ (8002008 <StartDefaultTask+0x1d4>)
 8001eee:	f00b fe2b 	bl	800db48 <rclc_support_init_with_options>
			&allocator);

	// create node
	rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001ef2:	4b45      	ldr	r3, [pc, #276]	@ (8002008 <StartDefaultTask+0x1d4>)
 8001ef4:	4a45      	ldr	r2, [pc, #276]	@ (800200c <StartDefaultTask+0x1d8>)
 8001ef6:	4946      	ldr	r1, [pc, #280]	@ (8002010 <StartDefaultTask+0x1dc>)
 8001ef8:	4846      	ldr	r0, [pc, #280]	@ (8002014 <StartDefaultTask+0x1e0>)
 8001efa:	f00b fe59 	bl	800dbb0 <rclc_node_init_default>
	rmw_uros_sync_session(1000);
 8001efe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f02:	f00c ff41 	bl	800ed88 <rmw_uros_sync_session>

	// create timer
	rclc_timer_init_default(&mpu6050_timer, &support, RCL_MS_TO_NS(10),
 8001f06:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <StartDefaultTask+0x1e4>)
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	4a44      	ldr	r2, [pc, #272]	@ (800201c <StartDefaultTask+0x1e8>)
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	493d      	ldr	r1, [pc, #244]	@ (8002008 <StartDefaultTask+0x1d4>)
 8001f12:	4843      	ldr	r0, [pc, #268]	@ (8002020 <StartDefaultTask+0x1ec>)
 8001f14:	f00b ff24 	bl	800dd60 <rclc_timer_init_default>
			timer_callback);

	//create publisher
	rclc_publisher_init_best_effort(&mpu6050_publisher, &node,
 8001f18:	f00d fbbc 	bl	800f694 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b41      	ldr	r3, [pc, #260]	@ (8002024 <StartDefaultTask+0x1f0>)
 8001f20:	493c      	ldr	r1, [pc, #240]	@ (8002014 <StartDefaultTask+0x1e0>)
 8001f22:	4841      	ldr	r0, [pc, #260]	@ (8002028 <StartDefaultTask+0x1f4>)
 8001f24:	f00b feb4 	bl	800dc90 <rclc_publisher_init_best_effort>
			ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			"mpu6050_publisher");

	//create header
	mpu6050_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001f28:	4c40      	ldr	r4, [pc, #256]	@ (800202c <StartDefaultTask+0x1f8>)
 8001f2a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f2e:	4940      	ldr	r1, [pc, #256]	@ (8002030 <StartDefaultTask+0x1fc>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f009 f9fb 	bl	800b32c <micro_ros_string_utilities_init>
 8001f36:	f104 0308 	add.w	r3, r4, #8
 8001f3a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8001f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//imu_status
	rclc_service_init_default(&status_service, &node,
 8001f44:	f008 ff64 	bl	800ae10 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <StartDefaultTask+0x200>)
 8001f4c:	4931      	ldr	r1, [pc, #196]	@ (8002014 <StartDefaultTask+0x1e0>)
 8001f4e:	483a      	ldr	r0, [pc, #232]	@ (8002038 <StartDefaultTask+0x204>)
 8001f50:	f00b fed2 	bl	800dcf8 <rclc_service_init_default>
			ROSIDL_GET_SRV_TYPE_SUPPORT(imu_custom_msg, srv, GetStatus),
			"imu/status");

	rclc_service_init_default(&calibrate_service, &node,
 8001f54:	f008 ff3c 	bl	800add0 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b38      	ldr	r3, [pc, #224]	@ (800203c <StartDefaultTask+0x208>)
 8001f5c:	492d      	ldr	r1, [pc, #180]	@ (8002014 <StartDefaultTask+0x1e0>)
 8001f5e:	4838      	ldr	r0, [pc, #224]	@ (8002040 <StartDefaultTask+0x20c>)
 8001f60:	f00b feca 	bl	800dcf8 <rclc_service_init_default>
				ROSIDL_GET_SRV_TYPE_SUPPORT(imu_custom_msg, srv, Calibrate),
				"imu/calibrate");

	//cmd_vel publisher
	rclc_publisher_init_default(&vel_publisher,
 8001f64:	f008 fdf8 	bl	800ab58 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b36      	ldr	r3, [pc, #216]	@ (8002044 <StartDefaultTask+0x210>)
 8001f6c:	4929      	ldr	r1, [pc, #164]	@ (8002014 <StartDefaultTask+0x1e0>)
 8001f6e:	4836      	ldr	r0, [pc, #216]	@ (8002048 <StartDefaultTask+0x214>)
 8001f70:	f00b fe5a 	bl	800dc28 <rclc_publisher_init_default>
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			"cmd_vel");

	rclc_publisher_init_default(&gazebo_vel_publisher,
 8001f74:	f008 fdf0 	bl	800ab58 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b34      	ldr	r3, [pc, #208]	@ (800204c <StartDefaultTask+0x218>)
 8001f7c:	4925      	ldr	r1, [pc, #148]	@ (8002014 <StartDefaultTask+0x1e0>)
 8001f7e:	4834      	ldr	r0, [pc, #208]	@ (8002050 <StartDefaultTask+0x21c>)
 8001f80:	f00b fe52 	bl	800dc28 <rclc_publisher_init_default>
				"gazebo/cmd_vel");



	//create executor
	executor = rclc_executor_get_zero_initialized_executor();
 8001f84:	4c33      	ldr	r4, [pc, #204]	@ (8002054 <StartDefaultTask+0x220>)
 8001f86:	463b      	mov	r3, r7
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00b fad1 	bl	800d530 <rclc_executor_get_zero_initialized_executor>
 8001f8e:	4620      	mov	r0, r4
 8001f90:	463b      	mov	r3, r7
 8001f92:	2288      	movs	r2, #136	@ 0x88
 8001f94:	4619      	mov	r1, r3
 8001f96:	f018 fbfc 	bl	801a792 <memcpy>
	rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <StartDefaultTask+0x1d0>)
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	491a      	ldr	r1, [pc, #104]	@ (8002008 <StartDefaultTask+0x1d4>)
 8001fa0:	482c      	ldr	r0, [pc, #176]	@ (8002054 <StartDefaultTask+0x220>)
 8001fa2:	f00b fad1 	bl	800d548 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &mpu6050_timer);
 8001fa6:	491e      	ldr	r1, [pc, #120]	@ (8002020 <StartDefaultTask+0x1ec>)
 8001fa8:	482a      	ldr	r0, [pc, #168]	@ (8002054 <StartDefaultTask+0x220>)
 8001faa:	f00b fb3d 	bl	800d628 <rclc_executor_add_timer>
	rclc_executor_add_service(&executor, &status_service, &request_msg, &response_msg, service_callback);
 8001fae:	4b2a      	ldr	r3, [pc, #168]	@ (8002058 <StartDefaultTask+0x224>)
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800205c <StartDefaultTask+0x228>)
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8002060 <StartDefaultTask+0x22c>)
 8001fb6:	4920      	ldr	r1, [pc, #128]	@ (8002038 <StartDefaultTask+0x204>)
 8001fb8:	4826      	ldr	r0, [pc, #152]	@ (8002054 <StartDefaultTask+0x220>)
 8001fba:	f00b fb5f 	bl	800d67c <rclc_executor_add_service>
	rclc_executor_add_service(&executor, &calibrate_service, &calibrate_request_msg, &calibrate_response_msg, calibrate_service_callback);
 8001fbe:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <StartDefaultTask+0x230>)
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <StartDefaultTask+0x234>)
 8001fc4:	4a29      	ldr	r2, [pc, #164]	@ (800206c <StartDefaultTask+0x238>)
 8001fc6:	491e      	ldr	r1, [pc, #120]	@ (8002040 <StartDefaultTask+0x20c>)
 8001fc8:	4822      	ldr	r0, [pc, #136]	@ (8002054 <StartDefaultTask+0x220>)
 8001fca:	f00b fb57 	bl	800d67c <rclc_executor_add_service>
	rclc_executor_spin(&executor);
 8001fce:	4821      	ldr	r0, [pc, #132]	@ (8002054 <StartDefaultTask+0x220>)
 8001fd0:	f00b fd7a 	bl	800dac8 <rclc_executor_spin>

	for (;;) {
		osDelay(10);
 8001fd4:	200a      	movs	r0, #10
 8001fd6:	f006 f8f1 	bl	80081bc <osDelay>
 8001fda:	e7fb      	b.n	8001fd4 <StartDefaultTask+0x1a0>
 8001fdc:	080015d1 	.word	0x080015d1
 8001fe0:	0800156d 	.word	0x0800156d
 8001fe4:	0800154d 	.word	0x0800154d
 8001fe8:	08001521 	.word	0x08001521
 8001fec:	2000543c 	.word	0x2000543c
 8001ff0:	08002415 	.word	0x08002415
 8001ff4:	08002459 	.word	0x08002459
 8001ff8:	08002491 	.word	0x08002491
 8001ffc:	080024fd 	.word	0x080024fd
 8002000:	0801caa4 	.word	0x0801caa4
 8002004:	200050bc 	.word	0x200050bc
 8002008:	20005088 	.word	0x20005088
 800200c:	0801cacc 	.word	0x0801cacc
 8002010:	0801cad0 	.word	0x0801cad0
 8002014:	200050d0 	.word	0x200050d0
 8002018:	08001889 	.word	0x08001889
 800201c:	00989680 	.word	0x00989680
 8002020:	200050d8 	.word	0x200050d8
 8002024:	0801cadc 	.word	0x0801cadc
 8002028:	200050dc 	.word	0x200050dc
 800202c:	200050e0 	.word	0x200050e0
 8002030:	0801caf0 	.word	0x0801caf0
 8002034:	0801cafc 	.word	0x0801cafc
 8002038:	20005300 	.word	0x20005300
 800203c:	0801cb08 	.word	0x0801cb08
 8002040:	20005304 	.word	0x20005304
 8002044:	0801cb18 	.word	0x0801cb18
 8002048:	20005324 	.word	0x20005324
 800204c:	0801cb20 	.word	0x0801cb20
 8002050:	20005320 	.word	0x20005320
 8002054:	20005220 	.word	0x20005220
 8002058:	08001ddd 	.word	0x08001ddd
 800205c:	2000530c 	.word	0x2000530c
 8002060:	20005308 	.word	0x20005308
 8002064:	08001e11 	.word	0x08001e11
 8002068:	2000531c 	.word	0x2000531c
 800206c:	20005310 	.word	0x20005310

08002070 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	r_roll = pow(measure_roll_error, 2);
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <main+0xb0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa9d 	bl	80005b8 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8002118 <main+0xa8>
 8002086:	ec43 2b10 	vmov	d0, r2, r3
 800208a:	f019 f9f9 	bl	801b480 <pow>
 800208e:	eeb0 7a40 	vmov.f32	s14, s0
 8002092:	eef0 7a60 	vmov.f32	s15, s1
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <main+0xb4>)
 8002098:	ed83 7b00 	vstr	d7, [r3]
	r_pitch = pow(measure_pitch_error, 2);
 800209c:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <main+0xb8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa89 	bl	80005b8 <__aeabi_f2d>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8002118 <main+0xa8>
 80020ae:	ec43 2b10 	vmov	d0, r2, r3
 80020b2:	f019 f9e5 	bl	801b480 <pow>
 80020b6:	eeb0 7a40 	vmov.f32	s14, s0
 80020ba:	eef0 7a60 	vmov.f32	s15, s1
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <main+0xbc>)
 80020c0:	ed83 7b00 	vstr	d7, [r3]
	p_roll = pow(2, 2);
 80020c4:	491a      	ldr	r1, [pc, #104]	@ (8002130 <main+0xc0>)
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002134 <main+0xc4>)
 80020cc:	e9c1 2300 	strd	r2, r3, [r1]
	p_pitch = pow(2, 2);
 80020d0:	4919      	ldr	r1, [pc, #100]	@ (8002138 <main+0xc8>)
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <main+0xc4>)
 80020d8:	e9c1 2300 	strd	r2, r3, [r1]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020dc:	f000 fdeb 	bl	8002cb6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80020e0:	f000 f82e 	bl	8002140 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020e4:	f7ff fac8 	bl	8001678 <MX_GPIO_Init>
	MX_DMA_Init();
 80020e8:	f7ff f9e8 	bl	80014bc <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 80020ec:	f000 fcb2 	bl	8002a54 <MX_LPUART1_UART_Init>
	MX_I2C1_Init();
 80020f0:	f7ff fb30 	bl	8001754 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	while (MPU6050_Init(&hi2c1) == 1)
 80020f4:	bf00      	nop
 80020f6:	4811      	ldr	r0, [pc, #68]	@ (800213c <main+0xcc>)
 80020f8:	f005 fba4 	bl	8007844 <MPU6050_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d0f9      	beq.n	80020f6 <main+0x86>
		;
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8002102:	f005 ff7f 	bl	8008004 <osKernelInitialize>

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 8002106:	f7fe ff77 	bl	8000ff8 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800210a:	f005 ff9f 	bl	800804c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <main+0x9e>
 8002112:	bf00      	nop
 8002114:	f3af 8000 	nop.w
 8002118:	00000000 	.word	0x00000000
 800211c:	40000000 	.word	0x40000000
 8002120:	20000000 	.word	0x20000000
 8002124:	200053c0 	.word	0x200053c0
 8002128:	20000004 	.word	0x20000004
 800212c:	200053c8 	.word	0x200053c8
 8002130:	200053d0 	.word	0x200053d0
 8002134:	40100000 	.word	0x40100000
 8002138:	200053d8 	.word	0x200053d8
 800213c:	20005034 	.word	0x20005034

08002140 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b094      	sub	sp, #80	@ 0x50
 8002144:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	2238      	movs	r2, #56	@ 0x38
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f018 fa56 	bl	801a600 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002162:	2000      	movs	r0, #0
 8002164:	f002 f9dc 	bl	8004520 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002168:	2302      	movs	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800216c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002172:	2340      	movs	r3, #64	@ 0x40
 8002174:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	2302      	movs	r3, #2
 8002178:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800217a:	2302      	movs	r3, #2
 800217c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800217e:	2304      	movs	r3, #4
 8002180:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002182:	2355      	movs	r3, #85	@ 0x55
 8002184:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002186:	2302      	movs	r3, #2
 8002188:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800218a:	2302      	movs	r3, #2
 800218c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800218e:	2302      	movs	r3, #2
 8002190:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002192:	f107 0318 	add.w	r3, r7, #24
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fa76 	bl	8004688 <HAL_RCC_OscConfig>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <SystemClock_Config+0x66>
		Error_Handler();
 80021a2:	f000 f931 	bl	8002408 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021a6:	230f      	movs	r3, #15
 80021a8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021aa:	2303      	movs	r3, #3
 80021ac:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2104      	movs	r1, #4
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fd74 	bl	8004cac <HAL_RCC_ClockConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <SystemClock_Config+0x8e>
		Error_Handler();
 80021ca:	f000 f91d 	bl	8002408 <Error_Handler>
	}
}
 80021ce:	bf00      	nop
 80021d0:	3750      	adds	r7, #80	@ 0x50
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <update_vel>:

/* USER CODE BEGIN 4 */
void update_vel(){
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
	float scale_factor = 5.0/90.0;
 80021e0:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <update_vel+0x190>)
 80021e2:	607b      	str	r3, [r7, #4]

	twist_msg.linear.x = x[1] * RAD2DEG * scale_factor;
 80021e4:	4b61      	ldr	r3, [pc, #388]	@ (800236c <update_vel+0x194>)
 80021e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b60      	ldr	r3, [pc, #384]	@ (8002370 <update_vel+0x198>)
 80021f0:	f7fe fa3a 	bl	8000668 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	a356      	add	r3, pc, #344	@ (adr r3, 8002358 <update_vel+0x180>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fe fb5b 	bl	80008bc <__aeabi_ddiv>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4692      	mov	sl, r2
 800220c:	469b      	mov	fp, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe f9d2 	bl	80005b8 <__aeabi_f2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4650      	mov	r0, sl
 800221a:	4659      	mov	r1, fp
 800221c:	f7fe fa24 	bl	8000668 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4953      	ldr	r1, [pc, #332]	@ (8002374 <update_vel+0x19c>)
 8002226:	e9c1 2300 	strd	r2, r3, [r1]
	twist_msg.angular.z = -1 * x[0] * RAD2DEG *scale_factor;
 800222a:	4b50      	ldr	r3, [pc, #320]	@ (800236c <update_vel+0x194>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	4690      	mov	r8, r2
 8002232:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b4d      	ldr	r3, [pc, #308]	@ (8002370 <update_vel+0x198>)
 800223c:	4640      	mov	r0, r8
 800223e:	4649      	mov	r1, r9
 8002240:	f7fe fa12 	bl	8000668 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	a342      	add	r3, pc, #264	@ (adr r3, 8002358 <update_vel+0x180>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe fb33 	bl	80008bc <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4690      	mov	r8, r2
 800225c:	4699      	mov	r9, r3
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe f9aa 	bl	80005b8 <__aeabi_f2d>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4640      	mov	r0, r8
 800226a:	4649      	mov	r1, r9
 800226c:	f7fe f9fc 	bl	8000668 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	493f      	ldr	r1, [pc, #252]	@ (8002374 <update_vel+0x19c>)
 8002276:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	rcl_publish(&vel_publisher, &twist_msg, NULL);
 800227a:	2200      	movs	r2, #0
 800227c:	493d      	ldr	r1, [pc, #244]	@ (8002374 <update_vel+0x19c>)
 800227e:	483e      	ldr	r0, [pc, #248]	@ (8002378 <update_vel+0x1a0>)
 8002280:	f00a fdc8 	bl	800ce14 <rcl_publish>

	gazebo_twist_msg.linear.x = x[1] * RAD2DEG * scale_factor *0.05;
 8002284:	4b39      	ldr	r3, [pc, #228]	@ (800236c <update_vel+0x194>)
 8002286:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4b38      	ldr	r3, [pc, #224]	@ (8002370 <update_vel+0x198>)
 8002290:	f7fe f9ea 	bl	8000668 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	a32e      	add	r3, pc, #184	@ (adr r3, 8002358 <update_vel+0x180>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fe fb0b 	bl	80008bc <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4690      	mov	r8, r2
 80022ac:	4699      	mov	r9, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe f982 	bl	80005b8 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4640      	mov	r0, r8
 80022ba:	4649      	mov	r1, r9
 80022bc:	f7fe f9d4 	bl	8000668 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	a325      	add	r3, pc, #148	@ (adr r3, 8002360 <update_vel+0x188>)
 80022ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ce:	f7fe f9cb 	bl	8000668 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4929      	ldr	r1, [pc, #164]	@ (800237c <update_vel+0x1a4>)
 80022d8:	e9c1 2300 	strd	r2, r3, [r1]
	gazebo_twist_msg.linear.y = -1 * x[0] * RAD2DEG *scale_factor *0.05;
 80022dc:	4b23      	ldr	r3, [pc, #140]	@ (800236c <update_vel+0x194>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	4614      	mov	r4, r2
 80022e4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <update_vel+0x198>)
 80022ee:	4620      	mov	r0, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	f7fe f9b9 	bl	8000668 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	a316      	add	r3, pc, #88	@ (adr r3, 8002358 <update_vel+0x180>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe fada 	bl	80008bc <__aeabi_ddiv>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4614      	mov	r4, r2
 800230e:	461d      	mov	r5, r3
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7fe f951 	bl	80005b8 <__aeabi_f2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f7fe f9a3 	bl	8000668 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	a30d      	add	r3, pc, #52	@ (adr r3, 8002360 <update_vel+0x188>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fe f99a 	bl	8000668 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4910      	ldr	r1, [pc, #64]	@ (800237c <update_vel+0x1a4>)
 800233a:	e9c1 2302 	strd	r2, r3, [r1, #8]

	rcl_publish(&gazebo_vel_publisher, &gazebo_twist_msg, NULL);
 800233e:	2200      	movs	r2, #0
 8002340:	490e      	ldr	r1, [pc, #56]	@ (800237c <update_vel+0x1a4>)
 8002342:	480f      	ldr	r0, [pc, #60]	@ (8002380 <update_vel+0x1a8>)
 8002344:	f00a fd66 	bl	800ce14 <rcl_publish>


}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002352:	bf00      	nop
 8002354:	f3af 8000 	nop.w
 8002358:	54442d18 	.word	0x54442d18
 800235c:	400921fb 	.word	0x400921fb
 8002360:	9999999a 	.word	0x9999999a
 8002364:	3fa99999 	.word	0x3fa99999
 8002368:	3d638e39 	.word	0x3d638e39
 800236c:	20005390 	.word	0x20005390
 8002370:	40668000 	.word	0x40668000
 8002374:	20005328 	.word	0x20005328
 8002378:	20005324 	.word	0x20005324
 800237c:	20005358 	.word	0x20005358
 8002380:	20005320 	.word	0x20005320

08002384 <read_register>:

void read_register() {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af04      	add	r7, sp, #16

    // Read 1 byte from the register
    ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &register_value, 1, HAL_MAX_DELAY);
 800238a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	2301      	movs	r3, #1
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <read_register+0x4c>)
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2301      	movs	r3, #1
 800239a:	2275      	movs	r2, #117	@ 0x75
 800239c:	21d0      	movs	r1, #208	@ 0xd0
 800239e:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <read_register+0x50>)
 80023a0:	f001 fc4a 	bl	8003c38 <HAL_I2C_Mem_Read>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <read_register+0x54>)
 80023aa:	701a      	strb	r2, [r3, #0]

    if (ret == HAL_OK) {
 80023ac:	4b0a      	ldr	r3, [pc, #40]	@ (80023d8 <read_register+0x54>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <read_register+0x3e>
        // Successfully read, print or process `register_value`
        printf("Register Value: 0x%02X\n", register_value);
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <read_register+0x4c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	4808      	ldr	r0, [pc, #32]	@ (80023dc <read_register+0x58>)
 80023bc:	f017 ff42 	bl	801a244 <iprintf>
    } else {
        // Error handling
        printf("I2C Read Error\n");
    }
}
 80023c0:	e002      	b.n	80023c8 <read_register+0x44>
        printf("I2C Read Error\n");
 80023c2:	4807      	ldr	r0, [pc, #28]	@ (80023e0 <read_register+0x5c>)
 80023c4:	f017 ffa6 	bl	801a314 <puts>
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20005388 	.word	0x20005388
 80023d4:	20005034 	.word	0x20005034
 80023d8:	20005389 	.word	0x20005389
 80023dc:	0801cb30 	.word	0x0801cb30
 80023e0:	0801cb48 	.word	0x0801cb48

080023e4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a04      	ldr	r2, [pc, #16]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80023f6:	f000 fc77 	bl	8002ce8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40012c00 	.word	0x40012c00

08002408 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <Error_Handler+0x8>

08002414 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <microros_allocate+0x3c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <microros_allocate+0x3c>)
 800242c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <microros_allocate+0x40>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <microros_allocate+0x40>)
 800243c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe fdec 	bl	800101c <pvPortMallocMicroROS>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200053e0 	.word	0x200053e0
 8002454:	200053e4 	.word	0x200053e4

08002458 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fe fefb 	bl	8001264 <getBlockSize>
 800246e:	4603      	mov	r3, r0
 8002470:	4a06      	ldr	r2, [pc, #24]	@ (800248c <microros_deallocate+0x34>)
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	461a      	mov	r2, r3
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <microros_deallocate+0x34>)
 800247a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe fe95 	bl	80011ac <vPortFreeMicroROS>
  }
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200053e4 	.word	0x200053e4

08002490 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <microros_reallocate+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <microros_reallocate+0x64>)
 80024aa:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <microros_reallocate+0x68>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <microros_reallocate+0x68>)
 80024ba:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80024c2:	68b8      	ldr	r0, [r7, #8]
 80024c4:	f7fe fdaa 	bl	800101c <pvPortMallocMicroROS>
 80024c8:	4603      	mov	r3, r0
 80024ca:	e00e      	b.n	80024ea <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7fe fec9 	bl	8001264 <getBlockSize>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a08      	ldr	r2, [pc, #32]	@ (80024f8 <microros_reallocate+0x68>)
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <microros_reallocate+0x68>)
 80024de:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7fe fedc 	bl	80012a0 <pvPortReallocMicroROS>
 80024e8:	4603      	mov	r3, r0
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200053e0 	.word	0x200053e0
 80024f8:	200053e4 	.word	0x200053e4

080024fc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	4a0c      	ldr	r2, [pc, #48]	@ (8002544 <microros_zero_allocate+0x48>)
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	461a      	mov	r2, r3
 8002518:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <microros_zero_allocate+0x48>)
 800251a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	4a08      	ldr	r2, [pc, #32]	@ (8002548 <microros_zero_allocate+0x4c>)
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	461a      	mov	r2, r3
 800252c:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <microros_zero_allocate+0x4c>)
 800252e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7fe fee1 	bl	80012fa <pvPortCallocMicroROS>
 8002538:	4603      	mov	r3, r0
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200053e0 	.word	0x200053e0
 8002548:	200053e4 	.word	0x200053e4
 800254c:	00000000 	.word	0x00000000

08002550 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002566:	a320      	add	r3, pc, #128	@ (adr r3, 80025e8 <UTILS_NanosecondsToTimespec+0x98>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe fb7c 	bl	8000c68 <__aeabi_ldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800257a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800257e:	a31a      	add	r3, pc, #104	@ (adr r3, 80025e8 <UTILS_NanosecondsToTimespec+0x98>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fe fb70 	bl	8000c68 <__aeabi_ldivmod>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	da20      	bge.n	80025d6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a11      	ldr	r2, [pc, #68]	@ (80025e0 <UTILS_NanosecondsToTimespec+0x90>)
 800259a:	fb82 1203 	smull	r1, r2, r2, r3
 800259e:	1712      	asrs	r2, r2, #28
 80025a0:	17db      	asrs	r3, r3, #31
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	17c8      	asrs	r0, r1, #31
 80025b2:	460c      	mov	r4, r1
 80025b4:	4605      	mov	r5, r0
 80025b6:	ebb2 0804 	subs.w	r8, r2, r4
 80025ba:	eb63 0905 	sbc.w	r9, r3, r5
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	4906      	ldr	r1, [pc, #24]	@ (80025e4 <UTILS_NanosecondsToTimespec+0x94>)
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	609a      	str	r2, [r3, #8]
    }
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025e0:	44b82fa1 	.word	0x44b82fa1
 80025e4:	3b9aca00 	.word	0x3b9aca00
 80025e8:	3b9aca00 	.word	0x3b9aca00
 80025ec:	00000000 	.word	0x00000000

080025f0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80025f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f4:	b08e      	sub	sp, #56	@ 0x38
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80025fa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80025fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002600:	2300      	movs	r3, #0
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002612:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002616:	4618      	mov	r0, r3
 8002618:	f007 f89c 	bl	8009754 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800261c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261e:	17da      	asrs	r2, r3, #31
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	61fa      	str	r2, [r7, #28]
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	69b9      	ldr	r1, [r7, #24]
 800262e:	000b      	movs	r3, r1
 8002630:	2200      	movs	r2, #0
 8002632:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002638:	2200      	movs	r2, #0
 800263a:	461c      	mov	r4, r3
 800263c:	4615      	mov	r5, r2
 800263e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002642:	1911      	adds	r1, r2, r4
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	416b      	adcs	r3, r5
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800264e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002652:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	f04f 0400 	mov.w	r4, #0
 800265e:	f04f 0500 	mov.w	r5, #0
 8002662:	015d      	lsls	r5, r3, #5
 8002664:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002668:	0154      	lsls	r4, r2, #5
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	ebb2 0800 	subs.w	r8, r2, r0
 8002672:	eb63 0901 	sbc.w	r9, r3, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002682:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002686:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800268a:	4690      	mov	r8, r2
 800268c:	4699      	mov	r9, r3
 800268e:	eb18 0a00 	adds.w	sl, r8, r0
 8002692:	eb49 0b01 	adc.w	fp, r9, r1
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026aa:	ebb2 040a 	subs.w	r4, r2, sl
 80026ae:	603c      	str	r4, [r7, #0]
 80026b0:	eb63 030b 	sbc.w	r3, r3, fp
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ba:	4623      	mov	r3, r4
 80026bc:	181b      	adds	r3, r3, r0
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	462b      	mov	r3, r5
 80026c2:	eb41 0303 	adc.w	r3, r1, r3
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	6a3a      	ldr	r2, [r7, #32]
 80026ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026ce:	f7ff ff3f 	bl	8002550 <UTILS_NanosecondsToTimespec>

    return 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	3738      	adds	r7, #56	@ 0x38
 80026d8:	46bd      	mov	sp, r7
 80026da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080026e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_MspInit+0x50>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_MspInit+0x50>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80026f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <HAL_MspInit+0x50>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <HAL_MspInit+0x50>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	4a0b      	ldr	r2, [pc, #44]	@ (8002730 <HAL_MspInit+0x50>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002708:	6593      	str	r3, [r2, #88]	@ 0x58
 800270a:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_MspInit+0x50>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	210f      	movs	r1, #15
 800271a:	f06f 0001 	mvn.w	r0, #1
 800271e:	f000 fbb9 	bl	8002e94 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002722:	f001 ffa1 	bl	8004668 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000

08002734 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	@ 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002744:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <HAL_InitTick+0xc4>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002748:	4a2b      	ldr	r2, [pc, #172]	@ (80027f8 <HAL_InitTick+0xc4>)
 800274a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800274e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002750:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <HAL_InitTick+0xc4>)
 8002752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800275c:	f107 020c 	add.w	r2, r7, #12
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fc76 	bl	8005058 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800276c:	f002 fc5e 	bl	800502c <HAL_RCC_GetPCLK2Freq>
 8002770:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002774:	4a21      	ldr	r2, [pc, #132]	@ (80027fc <HAL_InitTick+0xc8>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0c9b      	lsrs	r3, r3, #18
 800277c:	3b01      	subs	r3, #1
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002780:	4b1f      	ldr	r3, [pc, #124]	@ (8002800 <HAL_InitTick+0xcc>)
 8002782:	4a20      	ldr	r2, [pc, #128]	@ (8002804 <HAL_InitTick+0xd0>)
 8002784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002786:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <HAL_InitTick+0xcc>)
 8002788:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800278c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800278e:	4a1c      	ldr	r2, [pc, #112]	@ (8002800 <HAL_InitTick+0xcc>)
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002794:	4b1a      	ldr	r3, [pc, #104]	@ (8002800 <HAL_InitTick+0xcc>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800279a:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <HAL_InitTick+0xcc>)
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80027a0:	4817      	ldr	r0, [pc, #92]	@ (8002800 <HAL_InitTick+0xcc>)
 80027a2:	f002 ff1f 	bl	80055e4 <HAL_TIM_Base_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80027ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d11b      	bne.n	80027ec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80027b4:	4812      	ldr	r0, [pc, #72]	@ (8002800 <HAL_InitTick+0xcc>)
 80027b6:	f002 ff77 	bl	80056a8 <HAL_TIM_Base_Start_IT>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80027c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d111      	bne.n	80027ec <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80027c8:	2019      	movs	r0, #25
 80027ca:	f000 fb7d 	bl	8002ec8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d808      	bhi.n	80027e6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	2019      	movs	r0, #25
 80027da:	f000 fb5b 	bl	8002e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027de:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <HAL_InitTick+0xd4>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e002      	b.n	80027ec <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80027ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3730      	adds	r7, #48	@ 0x30
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	431bde83 	.word	0x431bde83
 8002800:	200053e8 	.word	0x200053e8
 8002804:	40012c00 	.word	0x40012c00
 8002808:	20000028 	.word	0x20000028

0800280c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <NMI_Handler+0x4>

08002814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <HardFault_Handler+0x4>

0800281c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <MemManage_Handler+0x4>

08002824 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <BusFault_Handler+0x4>

0800282c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <UsageFault_Handler+0x4>

08002834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <DMA1_Channel1_IRQHandler+0x10>)
 800284a:	f000 fd2e 	bl	80032aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200054d0 	.word	0x200054d0

08002858 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800285c:	4802      	ldr	r0, [pc, #8]	@ (8002868 <DMA1_Channel2_IRQHandler+0x10>)
 800285e:	f000 fd24 	bl	80032aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20005530 	.word	0x20005530

0800286c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002872:	f002 ff91 	bl	8005798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200053e8 	.word	0x200053e8

08002880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002884:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002888:	f001 f804 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}

08002890 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002894:	4802      	ldr	r0, [pc, #8]	@ (80028a0 <LPUART1_IRQHandler+0x10>)
 8002896:	f003 fba3 	bl	8005fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000543c 	.word	0x2000543c

080028a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return 1;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_kill>:

int _kill(int pid, int sig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028be:	f017 ff33 	bl	801a728 <__errno>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2216      	movs	r2, #22
 80028c6:	601a      	str	r2, [r3, #0]
  return -1;
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_exit>:

void _exit (int status)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ffe7 	bl	80028b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028e6:	bf00      	nop
 80028e8:	e7fd      	b.n	80028e6 <_exit+0x12>

080028ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e00a      	b.n	8002912 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028fc:	f3af 8000 	nop.w
 8002900:	4601      	mov	r1, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	60ba      	str	r2, [r7, #8]
 8002908:	b2ca      	uxtb	r2, r1
 800290a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	dbf0      	blt.n	80028fc <_read+0x12>
  }

  return len;
 800291a:	687b      	ldr	r3, [r7, #4]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	e009      	b.n	800294a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	60ba      	str	r2, [r7, #8]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	3301      	adds	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	dbf1      	blt.n	8002936 <_write+0x12>
  }
  return len;
 8002952:	687b      	ldr	r3, [r7, #4]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_close>:

int _close(int file)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002984:	605a      	str	r2, [r3, #4]
  return 0;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_isatty>:

int _isatty(int file)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029cc:	4a14      	ldr	r2, [pc, #80]	@ (8002a20 <_sbrk+0x5c>)
 80029ce:	4b15      	ldr	r3, [pc, #84]	@ (8002a24 <_sbrk+0x60>)
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029d8:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <_sbrk+0x64>)
 80029e2:	4a12      	ldr	r2, [pc, #72]	@ (8002a2c <_sbrk+0x68>)
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <_sbrk+0x64>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d207      	bcs.n	8002a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f4:	f017 fe98 	bl	801a728 <__errno>
 80029f8:	4603      	mov	r3, r0
 80029fa:	220c      	movs	r2, #12
 80029fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a02:	e009      	b.n	8002a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a04:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <_sbrk+0x64>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0a:	4b07      	ldr	r3, [pc, #28]	@ (8002a28 <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <_sbrk+0x64>)
 8002a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20020000 	.word	0x20020000
 8002a24:	00000400 	.word	0x00000400
 8002a28:	20005438 	.word	0x20005438
 8002a2c:	2000c010 	.word	0x2000c010

08002a30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <SystemInit+0x20>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	4a05      	ldr	r2, [pc, #20]	@ (8002a50 <SystemInit+0x20>)
 8002a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002a58:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ae0 <MX_LPUART1_UART_Init+0x8c>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a60:	4a20      	ldr	r2, [pc, #128]	@ (8002ae4 <MX_LPUART1_UART_Init+0x90>)
 8002a62:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002a70:	4b1a      	ldr	r3, [pc, #104]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002a76:	4b19      	ldr	r3, [pc, #100]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a78:	220c      	movs	r2, #12
 8002a7a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a82:	4b16      	ldr	r3, [pc, #88]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002a94:	4811      	ldr	r0, [pc, #68]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002a96:	f003 f8f1 	bl	8005c7c <HAL_UART_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8002aa0:	f7ff fcb2 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	480d      	ldr	r0, [pc, #52]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002aa8:	f004 fe01 	bl	80076ae <HAL_UARTEx_SetTxFifoThreshold>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8002ab2:	f7ff fca9 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4808      	ldr	r0, [pc, #32]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002aba:	f004 fe36 	bl	800772a <HAL_UARTEx_SetRxFifoThreshold>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8002ac4:	f7ff fca0 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002ac8:	4804      	ldr	r0, [pc, #16]	@ (8002adc <MX_LPUART1_UART_Init+0x88>)
 8002aca:	f004 fdb7 	bl	800763c <HAL_UARTEx_DisableFifoMode>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8002ad4:	f7ff fc98 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	2000543c 	.word	0x2000543c
 8002ae0:	40008000 	.word	0x40008000
 8002ae4:	001e8480 	.word	0x001e8480

08002ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b09e      	sub	sp, #120	@ 0x78
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b00:	f107 0310 	add.w	r3, r7, #16
 8002b04:	2254      	movs	r2, #84	@ 0x54
 8002b06:	2100      	movs	r1, #0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f017 fd79 	bl	801a600 <memset>
  if(uartHandle->Instance==LPUART1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a4e      	ldr	r2, [pc, #312]	@ (8002c4c <HAL_UART_MspInit+0x164>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	f040 8094 	bne.w	8002c42 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	4618      	mov	r0, r3
 8002b28:	f002 fb0e 	bl	8005148 <HAL_RCCEx_PeriphCLKConfig>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b32:	f7ff fc69 	bl	8002408 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b36:	4b46      	ldr	r3, [pc, #280]	@ (8002c50 <HAL_UART_MspInit+0x168>)
 8002b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3a:	4a45      	ldr	r2, [pc, #276]	@ (8002c50 <HAL_UART_MspInit+0x168>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002b42:	4b43      	ldr	r3, [pc, #268]	@ (8002c50 <HAL_UART_MspInit+0x168>)
 8002b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	4b40      	ldr	r3, [pc, #256]	@ (8002c50 <HAL_UART_MspInit+0x168>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b52:	4a3f      	ldr	r2, [pc, #252]	@ (8002c50 <HAL_UART_MspInit+0x168>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c50 <HAL_UART_MspInit+0x168>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002b66:	230c      	movs	r3, #12
 8002b68:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b72:	2300      	movs	r3, #0
 8002b74:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002b76:	230c      	movs	r3, #12
 8002b78:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b84:	f000 fcec 	bl	8003560 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8002b88:	4b32      	ldr	r3, [pc, #200]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002b8a:	4a33      	ldr	r2, [pc, #204]	@ (8002c58 <HAL_UART_MspInit+0x170>)
 8002b8c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002b8e:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002b90:	2223      	movs	r2, #35	@ 0x23
 8002b92:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b94:	4b2f      	ldr	r3, [pc, #188]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002b96:	2210      	movs	r2, #16
 8002b98:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002ba2:	2280      	movs	r2, #128	@ 0x80
 8002ba4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bac:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bb8:	4b26      	ldr	r3, [pc, #152]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002bba:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002bc0:	4824      	ldr	r0, [pc, #144]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002bc2:	f000 f98f 	bl	8002ee4 <HAL_DMA_Init>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002bcc:	f7ff fc1c 	bl	8002408 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a20      	ldr	r2, [pc, #128]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002bd4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_UART_MspInit+0x16c>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002bde:	4a20      	ldr	r2, [pc, #128]	@ (8002c60 <HAL_UART_MspInit+0x178>)
 8002be0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002be2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002be4:	2222      	movs	r2, #34	@ 0x22
 8002be6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002be8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bee:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf4:	4b19      	ldr	r3, [pc, #100]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002bf6:	2280      	movs	r2, #128	@ 0x80
 8002bf8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c00:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002c06:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002c08:	2220      	movs	r2, #32
 8002c0a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c0c:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002c0e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002c12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002c14:	4811      	ldr	r0, [pc, #68]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002c16:	f000 f965 	bl	8002ee4 <HAL_DMA_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002c20:	f7ff fbf2 	bl	8002408 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002c28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <HAL_UART_MspInit+0x174>)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2105      	movs	r1, #5
 8002c36:	205b      	movs	r0, #91	@ 0x5b
 8002c38:	f000 f92c 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002c3c:	205b      	movs	r0, #91	@ 0x5b
 8002c3e:	f000 f943 	bl	8002ec8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002c42:	bf00      	nop
 8002c44:	3778      	adds	r7, #120	@ 0x78
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40008000 	.word	0x40008000
 8002c50:	40021000 	.word	0x40021000
 8002c54:	200054d0 	.word	0x200054d0
 8002c58:	40020008 	.word	0x40020008
 8002c5c:	20005530 	.word	0x20005530
 8002c60:	4002001c 	.word	0x4002001c

08002c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c64:	480d      	ldr	r0, [pc, #52]	@ (8002c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c68:	f7ff fee2 	bl	8002a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c6c:	480c      	ldr	r0, [pc, #48]	@ (8002ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c6e:	490d      	ldr	r1, [pc, #52]	@ (8002ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <LoopForever+0xe>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c74:	e002      	b.n	8002c7c <LoopCopyDataInit>

08002c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7a:	3304      	adds	r3, #4

08002c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c80:	d3f9      	bcc.n	8002c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c84:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb0 <LoopForever+0x16>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c88:	e001      	b.n	8002c8e <LoopFillZerobss>

08002c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c8c:	3204      	adds	r2, #4

08002c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c90:	d3fb      	bcc.n	8002c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c92:	f017 fd4f 	bl	801a734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c96:	f7ff f9eb 	bl	8002070 <main>

08002c9a <LoopForever>:

LoopForever:
    b LoopForever
 8002c9a:	e7fe      	b.n	8002c9a <LoopForever>
  ldr   r0, =_estack
 8002c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca4:	20000cb8 	.word	0x20000cb8
  ldr r2, =_sidata
 8002ca8:	0801e620 	.word	0x0801e620
  ldr r2, =_sbss
 8002cac:	20000cb8 	.word	0x20000cb8
  ldr r4, =_ebss
 8002cb0:	2000c00c 	.word	0x2000c00c

08002cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC1_2_IRQHandler>

08002cb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f000 f8dc 	bl	8002e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cc6:	200f      	movs	r0, #15
 8002cc8:	f7ff fd34 	bl	8002734 <HAL_InitTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	71fb      	strb	r3, [r7, #7]
 8002cd6:	e001      	b.n	8002cdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cd8:	f7ff fd02 	bl	80026e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]

}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cec:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_IncTick+0x1c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_IncTick+0x20>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	4a03      	ldr	r2, [pc, #12]	@ (8002d04 <HAL_IncTick+0x1c>)
 8002cf8:	6013      	str	r3, [r2, #0]
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	20005590 	.word	0x20005590
 8002d08:	2000002c 	.word	0x2000002c

08002d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d10:	4b03      	ldr	r3, [pc, #12]	@ (8002d20 <HAL_GetTick+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	20005590 	.word	0x20005590

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4907      	ldr	r1, [pc, #28]	@ (8002dc0 <__NVIC_EnableIRQ+0x38>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	@ (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	@ 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ff4c 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea2:	f7ff ff63 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ea6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	6978      	ldr	r0, [r7, #20]
 8002eae:	f7ff ffb3 	bl	8002e18 <NVIC_EncodePriority>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff82 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002ec0:	bf00      	nop
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff56 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e08d      	b.n	8003012 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b47      	ldr	r3, [pc, #284]	@ (800301c <HAL_DMA_Init+0x138>)
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d80f      	bhi.n	8002f22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b45      	ldr	r3, [pc, #276]	@ (8003020 <HAL_DMA_Init+0x13c>)
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a45      	ldr	r2, [pc, #276]	@ (8003024 <HAL_DMA_Init+0x140>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	009a      	lsls	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	@ (8003028 <HAL_DMA_Init+0x144>)
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f20:	e00e      	b.n	8002f40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b40      	ldr	r3, [pc, #256]	@ (800302c <HAL_DMA_Init+0x148>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8003024 <HAL_DMA_Init+0x140>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	009a      	lsls	r2, r3, #2
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003030 <HAL_DMA_Init+0x14c>)
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa82 	bl	800349c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fa0:	d102      	bne.n	8002fa8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fbc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_DMA_Init+0x104>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d80c      	bhi.n	8002fe8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 faa2 	bl	8003518 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	e008      	b.n	8002ffa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40020407 	.word	0x40020407
 8003020:	bffdfff8 	.word	0xbffdfff8
 8003024:	cccccccd 	.word	0xcccccccd
 8003028:	40020000 	.word	0x40020000
 800302c:	bffdfbf8 	.word	0xbffdfbf8
 8003030:	40020400 	.word	0x40020400

08003034 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_DMA_Start_IT+0x20>
 8003050:	2302      	movs	r3, #2
 8003052:	e066      	b.n	8003122 <HAL_DMA_Start_IT+0xee>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d155      	bne.n	8003114 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9c7 	bl	8003420 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 020e 	orr.w	r2, r2, #14
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e00f      	b.n	80030cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0204 	bic.w	r2, r2, #4
 80030ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 020a 	orr.w	r2, r2, #10
 80030ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003100:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	e005      	b.n	8003120 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800311c:	2302      	movs	r3, #2
 800311e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003120:	7dfb      	ldrb	r3, [r7, #23]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d005      	beq.n	800314e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2204      	movs	r2, #4
 8003146:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e037      	b.n	80031be <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 020e 	bic.w	r2, r2, #14
 800315c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800316c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	f003 021f 	and.w	r2, r3, #31
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f202 	lsl.w	r2, r1, r2
 8003190:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800319a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00c      	beq.n	80031be <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031bc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d00d      	beq.n	8003210 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2204      	movs	r2, #4
 80031f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e047      	b.n	80032a0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 020e 	bic.w	r2, r2, #14
 800321e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800323e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f202 	lsl.w	r2, r1, r2
 8003252:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800325c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00c      	beq.n	8003280 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003274:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800327e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
    }
  }
  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2204      	movs	r2, #4
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d026      	beq.n	8003324 <HAL_DMA_IRQHandler+0x7a>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d021      	beq.n	8003324 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d107      	bne.n	80032fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0204 	bic.w	r2, r2, #4
 80032fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f003 021f 	and.w	r2, r3, #31
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	2104      	movs	r1, #4
 800330c:	fa01 f202 	lsl.w	r2, r1, r2
 8003310:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	2b00      	cmp	r3, #0
 8003318:	d071      	beq.n	80033fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003322:	e06c      	b.n	80033fe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2202      	movs	r2, #2
 800332e:	409a      	lsls	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02e      	beq.n	8003396 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d029      	beq.n	8003396 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 020a 	bic.w	r2, r2, #10
 800335e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	2102      	movs	r1, #2
 8003376:	fa01 f202 	lsl.w	r2, r1, r2
 800337a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d038      	beq.n	80033fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003394:	e033      	b.n	80033fe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2208      	movs	r2, #8
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d02a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d025      	beq.n	8003400 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 020e 	bic.w	r2, r2, #14
 80033c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c8:	f003 021f 	and.w	r2, r3, #31
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f202 	lsl.w	r2, r1, r2
 80033d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d004      	beq.n	8003400 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
}
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003436:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344e:	f003 021f 	and.w	r2, r3, #31
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f202 	lsl.w	r2, r1, r2
 800345c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b10      	cmp	r3, #16
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d802      	bhi.n	80034b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034b0:	4b15      	ldr	r3, [pc, #84]	@ (8003508 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	e001      	b.n	80034ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3b08      	subs	r3, #8
 80034c6:	4a12      	ldr	r2, [pc, #72]	@ (8003510 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	009a      	lsls	r2, r3, #2
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003514 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80034e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2201      	movs	r2, #1
 80034f0:	409a      	lsls	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40020407 	.word	0x40020407
 8003508:	40020800 	.word	0x40020800
 800350c:	40020820 	.word	0x40020820
 8003510:	cccccccd 	.word	0xcccccccd
 8003514:	40020880 	.word	0x40020880

08003518 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	461a      	mov	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a08      	ldr	r2, [pc, #32]	@ (800355c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800353a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3b01      	subs	r3, #1
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2201      	movs	r2, #1
 8003546:	409a      	lsls	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	1000823f 	.word	0x1000823f
 800355c:	40020940 	.word	0x40020940

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800356e:	e15a      	b.n	8003826 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2101      	movs	r1, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 814c 	beq.w	8003820 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d005      	beq.n	80035a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800359c:	2b02      	cmp	r3, #2
 800359e:	d130      	bne.n	8003602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035d6:	2201      	movs	r2, #1
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0201 	and.w	r2, r3, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b03      	cmp	r3, #3
 800360c:	d017      	beq.n	800363e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d123      	bne.n	8003692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4013      	ands	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	08da      	lsrs	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3208      	adds	r2, #8
 800368c:	6939      	ldr	r1, [r7, #16]
 800368e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80a6 	beq.w	8003820 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003844 <HAL_GPIO_Init+0x2e4>)
 80036d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003844 <HAL_GPIO_Init+0x2e4>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6613      	str	r3, [r2, #96]	@ 0x60
 80036e0:	4b58      	ldr	r3, [pc, #352]	@ (8003844 <HAL_GPIO_Init+0x2e4>)
 80036e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ec:	4a56      	ldr	r2, [pc, #344]	@ (8003848 <HAL_GPIO_Init+0x2e8>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003716:	d01f      	beq.n	8003758 <HAL_GPIO_Init+0x1f8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a4c      	ldr	r2, [pc, #304]	@ (800384c <HAL_GPIO_Init+0x2ec>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d019      	beq.n	8003754 <HAL_GPIO_Init+0x1f4>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a4b      	ldr	r2, [pc, #300]	@ (8003850 <HAL_GPIO_Init+0x2f0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <HAL_GPIO_Init+0x1f0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a4a      	ldr	r2, [pc, #296]	@ (8003854 <HAL_GPIO_Init+0x2f4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_GPIO_Init+0x1ec>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a49      	ldr	r2, [pc, #292]	@ (8003858 <HAL_GPIO_Init+0x2f8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <HAL_GPIO_Init+0x1e8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a48      	ldr	r2, [pc, #288]	@ (800385c <HAL_GPIO_Init+0x2fc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_GPIO_Init+0x1e4>
 8003740:	2305      	movs	r3, #5
 8003742:	e00a      	b.n	800375a <HAL_GPIO_Init+0x1fa>
 8003744:	2306      	movs	r3, #6
 8003746:	e008      	b.n	800375a <HAL_GPIO_Init+0x1fa>
 8003748:	2304      	movs	r3, #4
 800374a:	e006      	b.n	800375a <HAL_GPIO_Init+0x1fa>
 800374c:	2303      	movs	r3, #3
 800374e:	e004      	b.n	800375a <HAL_GPIO_Init+0x1fa>
 8003750:	2302      	movs	r3, #2
 8003752:	e002      	b.n	800375a <HAL_GPIO_Init+0x1fa>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <HAL_GPIO_Init+0x1fa>
 8003758:	2300      	movs	r3, #0
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	f002 0203 	and.w	r2, r2, #3
 8003760:	0092      	lsls	r2, r2, #2
 8003762:	4093      	lsls	r3, r2
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376a:	4937      	ldr	r1, [pc, #220]	@ (8003848 <HAL_GPIO_Init+0x2e8>)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	089b      	lsrs	r3, r3, #2
 8003770:	3302      	adds	r3, #2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003778:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <HAL_GPIO_Init+0x300>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800379c:	4a30      	ldr	r2, [pc, #192]	@ (8003860 <HAL_GPIO_Init+0x300>)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003860 <HAL_GPIO_Init+0x300>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037c6:	4a26      	ldr	r2, [pc, #152]	@ (8003860 <HAL_GPIO_Init+0x300>)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037cc:	4b24      	ldr	r3, [pc, #144]	@ (8003860 <HAL_GPIO_Init+0x300>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <HAL_GPIO_Init+0x300>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003860 <HAL_GPIO_Init+0x300>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	43db      	mvns	r3, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800381a:	4a11      	ldr	r2, [pc, #68]	@ (8003860 <HAL_GPIO_Init+0x300>)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3301      	adds	r3, #1
 8003824:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	f47f ae9d 	bne.w	8003570 <HAL_GPIO_Init+0x10>
  }
}
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	371c      	adds	r7, #28
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40021000 	.word	0x40021000
 8003848:	40010000 	.word	0x40010000
 800384c:	48000400 	.word	0x48000400
 8003850:	48000800 	.word	0x48000800
 8003854:	48000c00 	.word	0x48000c00
 8003858:	48001000 	.word	0x48001000
 800385c:	48001400 	.word	0x48001400
 8003860:	40010400 	.word	0x40010400

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003880:	e002      	b.n	8003888 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800389e:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038aa:	4a05      	ldr	r2, [pc, #20]	@ (80038c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f806 	bl	80038c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40010400 	.word	0x40010400

080038c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e08d      	b.n	8003a08 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7fd ff67 	bl	80017d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2224      	movs	r2, #36	@ 0x24
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800392a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800393a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	e006      	b.n	8003962 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003960:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d108      	bne.n	800397c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	e007      	b.n	800398c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800398a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800399a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800399e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69d9      	ldr	r1, [r3, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	4608      	mov	r0, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4603      	mov	r3, r0
 8003a20:	817b      	strh	r3, [r7, #10]
 8003a22:	460b      	mov	r3, r1
 8003a24:	813b      	strh	r3, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	f040 80f9 	bne.w	8003c2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_I2C_Mem_Write+0x34>
 8003a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0ed      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Mem_Write+0x4e>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0e6      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a66:	f7ff f951 	bl	8002d0c <HAL_GetTick>
 8003a6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2319      	movs	r3, #25
 8003a72:	2201      	movs	r2, #1
 8003a74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fac3 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0d1      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2221      	movs	r2, #33	@ 0x21
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2240      	movs	r2, #64	@ 0x40
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a3a      	ldr	r2, [r7, #32]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab0:	88f8      	ldrh	r0, [r7, #6]
 8003ab2:	893a      	ldrh	r2, [r7, #8]
 8003ab4:	8979      	ldrh	r1, [r7, #10]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	4603      	mov	r3, r0
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f9d3 	bl	8003e6c <I2C_RequestMemoryWrite>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0a9      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2bff      	cmp	r3, #255	@ 0xff
 8003ae0:	d90e      	bls.n	8003b00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	22ff      	movs	r2, #255	@ 0xff
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	8979      	ldrh	r1, [r7, #10]
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fc47 	bl	800438c <I2C_TransferConfig>
 8003afe:	e00f      	b.n	8003b20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	8979      	ldrh	r1, [r7, #10]
 8003b12:	2300      	movs	r3, #0
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fc36 	bl	800438c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fac6 	bl	80040b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e07b      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d034      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x1c8>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d130      	bne.n	8003bd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2180      	movs	r1, #128	@ 0x80
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fa3f 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e04d      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2bff      	cmp	r3, #255	@ 0xff
 8003b98:	d90e      	bls.n	8003bb8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	22ff      	movs	r2, #255	@ 0xff
 8003b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	8979      	ldrh	r1, [r7, #10]
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fbeb 	bl	800438c <I2C_TransferConfig>
 8003bb6:	e00f      	b.n	8003bd8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	8979      	ldrh	r1, [r7, #10]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fbda 	bl	800438c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d19e      	bne.n	8003b20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 faac 	bl	8004144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e01a      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b0a      	ldr	r3, [pc, #40]	@ (8003c34 <HAL_I2C_Mem_Write+0x224>)
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	fe00e800 	.word	0xfe00e800

08003c38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	f040 80fd 	bne.w	8003e5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_I2C_Mem_Read+0x34>
 8003c66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d105      	bne.n	8003c78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c72:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0f1      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_I2C_Mem_Read+0x4e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0ea      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c8e:	f7ff f83d 	bl	8002d0c <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2319      	movs	r3, #25
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f9af 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0d5      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2222      	movs	r2, #34	@ 0x22
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2240      	movs	r2, #64	@ 0x40
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cd8:	88f8      	ldrh	r0, [r7, #6]
 8003cda:	893a      	ldrh	r2, [r7, #8]
 8003cdc:	8979      	ldrh	r1, [r7, #10]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f913 	bl	8003f14 <I2C_RequestMemoryRead>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0ad      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2bff      	cmp	r3, #255	@ 0xff
 8003d08:	d90e      	bls.n	8003d28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	22ff      	movs	r2, #255	@ 0xff
 8003d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	8979      	ldrh	r1, [r7, #10]
 8003d18:	4b52      	ldr	r3, [pc, #328]	@ (8003e64 <HAL_I2C_Mem_Read+0x22c>)
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fb33 	bl	800438c <I2C_TransferConfig>
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e64 <HAL_I2C_Mem_Read+0x22c>)
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fb22 	bl	800438c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2104      	movs	r1, #4
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f956 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07c      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d034      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x1d0>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d130      	bne.n	8003e08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	2200      	movs	r2, #0
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f927 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e04d      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2bff      	cmp	r3, #255	@ 0xff
 8003dc8:	d90e      	bls.n	8003de8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	22ff      	movs	r2, #255	@ 0xff
 8003dce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	8979      	ldrh	r1, [r7, #10]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fad3 	bl	800438c <I2C_TransferConfig>
 8003de6:	e00f      	b.n	8003e08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	8979      	ldrh	r1, [r7, #10]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fac2 	bl	800438c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d19a      	bne.n	8003d48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f994 	bl	8004144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e01a      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <HAL_I2C_Mem_Read+0x230>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	80002400 	.word	0x80002400
 8003e68:	fe00e800 	.word	0xfe00e800

08003e6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	4608      	mov	r0, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	817b      	strh	r3, [r7, #10]
 8003e7e:	460b      	mov	r3, r1
 8003e80:	813b      	strh	r3, [r7, #8]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <I2C_RequestMemoryWrite+0xa4>)
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fa79 	bl	800438c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f909 	bl	80040b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e02c      	b.n	8003f08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb4:	893b      	ldrh	r3, [r7, #8]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ebe:	e015      	b.n	8003eec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec0:	893b      	ldrh	r3, [r7, #8]
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	69b9      	ldr	r1, [r7, #24]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f8ef 	bl	80040b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e012      	b.n	8003f08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee2:	893b      	ldrh	r3, [r7, #8]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f884 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	80002000 	.word	0x80002000

08003f14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	4611      	mov	r1, r2
 8003f20:	461a      	mov	r2, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	817b      	strh	r3, [r7, #10]
 8003f26:	460b      	mov	r3, r1
 8003f28:	813b      	strh	r3, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	8979      	ldrh	r1, [r7, #10]
 8003f34:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <I2C_RequestMemoryRead+0xa4>)
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fa26 	bl	800438c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	69b9      	ldr	r1, [r7, #24]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f8b6 	bl	80040b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e02c      	b.n	8003fae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5a:	893b      	ldrh	r3, [r7, #8]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f64:	e015      	b.n	8003f92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f66:	893b      	ldrh	r3, [r7, #8]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	69b9      	ldr	r1, [r7, #24]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f89c 	bl	80040b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e012      	b.n	8003fae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f88:	893b      	ldrh	r3, [r7, #8]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2140      	movs	r1, #64	@ 0x40
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f831 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	80002000 	.word	0x80002000

08003fbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d103      	bne.n	8003fda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d007      	beq.n	8003ff8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	619a      	str	r2, [r3, #24]
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	e03b      	b.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f8d6 	bl	80041cc <I2C_IsErrorOccurred>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e041      	b.n	80040ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004030:	d02d      	beq.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004032:	f7fe fe6b 	bl	8002d0c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d302      	bcc.n	8004048 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d122      	bne.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	429a      	cmp	r2, r3
 8004064:	d113      	bne.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e00f      	b.n	80040ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699a      	ldr	r2, [r3, #24]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d0b4      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040c2:	e033      	b.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f87f 	bl	80041cc <I2C_IsErrorOccurred>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e031      	b.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040de:	d025      	beq.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e0:	f7fe fe14 	bl	8002d0c <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d302      	bcc.n	80040f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11a      	bne.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d013      	beq.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d1c4      	bne.n	80040c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004150:	e02f      	b.n	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f838 	bl	80041cc <I2C_IsErrorOccurred>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02d      	b.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7fe fdd1 	bl	8002d0c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11a      	bne.n	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b20      	cmp	r3, #32
 8004188:	d013      	beq.n	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f043 0220 	orr.w	r2, r3, #32
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e007      	b.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d1c8      	bne.n	8004152 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	@ 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d068      	beq.n	80042ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2210      	movs	r2, #16
 80041fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004200:	e049      	b.n	8004296 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004208:	d045      	beq.n	8004296 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fe fd7f 	bl	8002d0c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <I2C_IsErrorOccurred+0x54>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d13a      	bne.n	8004296 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800422a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004232:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800423e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004242:	d121      	bne.n	8004288 <I2C_IsErrorOccurred+0xbc>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800424a:	d01d      	beq.n	8004288 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	2b20      	cmp	r3, #32
 8004250:	d01a      	beq.n	8004288 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004260:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004262:	f7fe fd53 	bl	8002d0c <HAL_GetTick>
 8004266:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004268:	e00e      	b.n	8004288 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800426a:	f7fe fd4f 	bl	8002d0c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b19      	cmp	r3, #25
 8004276:	d907      	bls.n	8004288 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	f043 0320 	orr.w	r3, r3, #32
 800427e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004286:	e006      	b.n	8004296 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b20      	cmp	r3, #32
 8004294:	d1e9      	bne.n	800426a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d003      	beq.n	80042ac <I2C_IsErrorOccurred+0xe0>
 80042a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0aa      	beq.n	8004202 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2220      	movs	r2, #32
 80042ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	f043 0304 	orr.w	r3, r3, #4
 80042c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00b      	beq.n	80042f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800430e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f043 0302 	orr.w	r3, r3, #2
 8004326:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01c      	beq.n	800437a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff fe3b 	bl	8003fbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <I2C_IsErrorOccurred+0x1bc>)
 8004352:	400b      	ands	r3, r1
 8004354:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800437a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800437e:	4618      	mov	r0, r3
 8004380:	3728      	adds	r7, #40	@ 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	fe00e800 	.word	0xfe00e800

0800438c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	607b      	str	r3, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	817b      	strh	r3, [r7, #10]
 800439a:	4613      	mov	r3, r2
 800439c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800439e:	897b      	ldrh	r3, [r7, #10]
 80043a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043a4:	7a7b      	ldrb	r3, [r7, #9]
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	0d5b      	lsrs	r3, r3, #21
 80043c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <I2C_TransferConfig+0x60>)
 80043cc:	430b      	orrs	r3, r1
 80043ce:	43db      	mvns	r3, r3
 80043d0:	ea02 0103 	and.w	r1, r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	03ff63ff 	.word	0x03ff63ff

080043f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b20      	cmp	r3, #32
 8004404:	d138      	bne.n	8004478 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004410:	2302      	movs	r3, #2
 8004412:	e032      	b.n	800447a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	@ 0x24
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004442:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6819      	ldr	r1, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b20      	cmp	r3, #32
 800449a:	d139      	bne.n	8004510 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e033      	b.n	8004512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2224      	movs	r2, #36	@ 0x24
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d141      	bne.n	80045b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800452e:	4b4b      	ldr	r3, [pc, #300]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453a:	d131      	bne.n	80045a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800453c:	4b47      	ldr	r3, [pc, #284]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800453e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004542:	4a46      	ldr	r2, [pc, #280]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004548:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800454c:	4b43      	ldr	r3, [pc, #268]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004554:	4a41      	ldr	r2, [pc, #260]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800455a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800455c:	4b40      	ldr	r3, [pc, #256]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2232      	movs	r2, #50	@ 0x32
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	4a3f      	ldr	r2, [pc, #252]	@ (8004664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	0c9b      	lsrs	r3, r3, #18
 800456e:	3301      	adds	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004572:	e002      	b.n	800457a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b01      	subs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800457a:	4b38      	ldr	r3, [pc, #224]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004586:	d102      	bne.n	800458e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f2      	bne.n	8004574 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800458e:	4b33      	ldr	r3, [pc, #204]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459a:	d158      	bne.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e057      	b.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045a0:	4b2e      	ldr	r3, [pc, #184]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045a6:	4a2d      	ldr	r2, [pc, #180]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80045b0:	e04d      	b.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b8:	d141      	bne.n	800463e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045ba:	4b28      	ldr	r3, [pc, #160]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045c6:	d131      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045c8:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ce:	4a23      	ldr	r2, [pc, #140]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045e0:	4a1e      	ldr	r2, [pc, #120]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2232      	movs	r2, #50	@ 0x32
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004664 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	0c9b      	lsrs	r3, r3, #18
 80045fa:	3301      	adds	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045fe:	e002      	b.n	8004606 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b01      	subs	r3, #1
 8004604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004612:	d102      	bne.n	800461a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f2      	bne.n	8004600 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800461a:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004626:	d112      	bne.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e011      	b.n	8004650 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004632:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004638:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800463c:	e007      	b.n	800464e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800463e:	4b07      	ldr	r3, [pc, #28]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004646:	4a05      	ldr	r2, [pc, #20]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004648:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800464c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40007000 	.word	0x40007000
 8004660:	20000024 	.word	0x20000024
 8004664:	431bde83 	.word	0x431bde83

08004668 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800466c:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4a04      	ldr	r2, [pc, #16]	@ (8004684 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004676:	6093      	str	r3, [r2, #8]
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40007000 	.word	0x40007000

08004688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e2fe      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d075      	beq.n	8004792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046a6:	4b97      	ldr	r3, [pc, #604]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b0:	4b94      	ldr	r3, [pc, #592]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d102      	bne.n	80046c6 <HAL_RCC_OscConfig+0x3e>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d002      	beq.n	80046cc <HAL_RCC_OscConfig+0x44>
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d10b      	bne.n	80046e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	4b8d      	ldr	r3, [pc, #564]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05b      	beq.n	8004790 <HAL_RCC_OscConfig+0x108>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d157      	bne.n	8004790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e2d9      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ec:	d106      	bne.n	80046fc <HAL_RCC_OscConfig+0x74>
 80046ee:	4b85      	ldr	r3, [pc, #532]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a84      	ldr	r2, [pc, #528]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e01d      	b.n	8004738 <HAL_RCC_OscConfig+0xb0>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004704:	d10c      	bne.n	8004720 <HAL_RCC_OscConfig+0x98>
 8004706:	4b7f      	ldr	r3, [pc, #508]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a7e      	ldr	r2, [pc, #504]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800470c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	4b7c      	ldr	r3, [pc, #496]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7b      	ldr	r2, [pc, #492]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e00b      	b.n	8004738 <HAL_RCC_OscConfig+0xb0>
 8004720:	4b78      	ldr	r3, [pc, #480]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a77      	ldr	r2, [pc, #476]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a74      	ldr	r2, [pc, #464]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d013      	beq.n	8004768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fe fae4 	bl	8002d0c <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004748:	f7fe fae0 	bl	8002d0c <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	@ 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e29e      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475a:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0xc0>
 8004766:	e014      	b.n	8004792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fe fad0 	bl	8002d0c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004770:	f7fe facc 	bl	8002d0c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	@ 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e28a      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004782:	4b60      	ldr	r3, [pc, #384]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0xe8>
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d075      	beq.n	800488a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479e:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a8:	4b56      	ldr	r3, [pc, #344]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	d102      	bne.n	80047be <HAL_RCC_OscConfig+0x136>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d002      	beq.n	80047c4 <HAL_RCC_OscConfig+0x13c>
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d11f      	bne.n	8004804 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_OscConfig+0x154>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e25d      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	4946      	ldr	r1, [pc, #280]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047f0:	4b45      	ldr	r3, [pc, #276]	@ (8004908 <HAL_RCC_OscConfig+0x280>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7fd ff9d 	bl	8002734 <HAL_InitTick>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d043      	beq.n	8004888 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e249      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d023      	beq.n	8004854 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480c:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3c      	ldr	r2, [pc, #240]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fe fa78 	bl	8002d0c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004820:	f7fe fa74 	bl	8002d0c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e232      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004832:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483e:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	061b      	lsls	r3, r3, #24
 800484c:	492d      	ldr	r1, [pc, #180]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
 8004852:	e01a      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004854:	4b2b      	ldr	r3, [pc, #172]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800485a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fe fa54 	bl	8002d0c <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004868:	f7fe fa50 	bl	8002d0c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e20e      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800487a:	4b22      	ldr	r3, [pc, #136]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x1e0>
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004888:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d041      	beq.n	800491a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800489e:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a4:	4a17      	ldr	r2, [pc, #92]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	f043 0301 	orr.w	r3, r3, #1
 80048aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ae:	f7fe fa2d 	bl	8002d0c <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b6:	f7fe fa29 	bl	8002d0c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e1e7      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ef      	beq.n	80048b6 <HAL_RCC_OscConfig+0x22e>
 80048d6:	e020      	b.n	800491a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048de:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <HAL_RCC_OscConfig+0x27c>)
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fe fa10 	bl	8002d0c <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048ee:	e00d      	b.n	800490c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fe fa0c 	bl	8002d0c <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d906      	bls.n	800490c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e1ca      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800490c:	4b8c      	ldr	r3, [pc, #560]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ea      	bne.n	80048f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80a6 	beq.w	8004a74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800492c:	4b84      	ldr	r3, [pc, #528]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_OscConfig+0x2b4>
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x2b6>
 800493c:	2300      	movs	r3, #0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	4b7f      	ldr	r3, [pc, #508]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	4a7e      	ldr	r2, [pc, #504]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800494c:	6593      	str	r3, [r2, #88]	@ 0x58
 800494e:	4b7c      	ldr	r3, [pc, #496]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800495e:	4b79      	ldr	r3, [pc, #484]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d118      	bne.n	800499c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800496a:	4b76      	ldr	r3, [pc, #472]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a75      	ldr	r2, [pc, #468]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004976:	f7fe f9c9 	bl	8002d0c <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497e:	f7fe f9c5 	bl	8002d0c <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e183      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004990:	4b6c      	ldr	r3, [pc, #432]	@ (8004b44 <HAL_RCC_OscConfig+0x4bc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d108      	bne.n	80049b6 <HAL_RCC_OscConfig+0x32e>
 80049a4:	4b66      	ldr	r3, [pc, #408]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	4a65      	ldr	r2, [pc, #404]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b4:	e024      	b.n	8004a00 <HAL_RCC_OscConfig+0x378>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d110      	bne.n	80049e0 <HAL_RCC_OscConfig+0x358>
 80049be:	4b60      	ldr	r3, [pc, #384]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049c6:	f043 0304 	orr.w	r3, r3, #4
 80049ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049de:	e00f      	b.n	8004a00 <HAL_RCC_OscConfig+0x378>
 80049e0:	4b57      	ldr	r3, [pc, #348]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	4a56      	ldr	r2, [pc, #344]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049f0:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	4a52      	ldr	r2, [pc, #328]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d016      	beq.n	8004a36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fe f980 	bl	8002d0c <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fe f97c 	bl	8002d0c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e138      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a26:	4b46      	ldr	r3, [pc, #280]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0ed      	beq.n	8004a10 <HAL_RCC_OscConfig+0x388>
 8004a34:	e015      	b.n	8004a62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fe f969 	bl	8002d0c <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fe f965 	bl	8002d0c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e121      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a54:	4b3a      	ldr	r3, [pc, #232]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ed      	bne.n	8004a3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a62:	7ffb      	ldrb	r3, [r7, #31]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a68:	4b35      	ldr	r3, [pc, #212]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6c:	4a34      	ldr	r2, [pc, #208]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0320 	and.w	r3, r3, #32
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d03c      	beq.n	8004afa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a88:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fe f938 	bl	8002d0c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aa0:	f7fe f934 	bl	8002d0c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e0f2      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ab2:	4b23      	ldr	r3, [pc, #140]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ef      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x418>
 8004ac0:	e01b      	b.n	8004afa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fe f91b 	bl	8002d0c <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ada:	f7fe f917 	bl	8002d0c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e0d5      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004aec:	4b14      	ldr	r3, [pc, #80]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ef      	bne.n	8004ada <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80c9 	beq.w	8004c96 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b04:	4b0e      	ldr	r3, [pc, #56]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	f000 8083 	beq.w	8004c18 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d15e      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1a:	4b09      	ldr	r3, [pc, #36]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a08      	ldr	r2, [pc, #32]	@ (8004b40 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b26:	f7fe f8f1 	bl	8002d0c <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	e00c      	b.n	8004b48 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fe f8ed 	bl	8002d0c <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d905      	bls.n	8004b48 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0ab      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b48:	4b55      	ldr	r3, [pc, #340]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ec      	bne.n	8004b2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b54:	4b52      	ldr	r3, [pc, #328]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <HAL_RCC_OscConfig+0x61c>)
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6a11      	ldr	r1, [r2, #32]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0112      	lsls	r2, r2, #4
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b6e:	0212      	lsls	r2, r2, #8
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b76:	0852      	lsrs	r2, r2, #1
 8004b78:	3a01      	subs	r2, #1
 8004b7a:	0552      	lsls	r2, r2, #21
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b82:	0852      	lsrs	r2, r2, #1
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0652      	lsls	r2, r2, #25
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b8e:	06d2      	lsls	r2, r2, #27
 8004b90:	430a      	orrs	r2, r1
 8004b92:	4943      	ldr	r1, [pc, #268]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b98:	4b41      	ldr	r3, [pc, #260]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a40      	ldr	r2, [pc, #256]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ba2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a3d      	ldr	r2, [pc, #244]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fe f8ac 	bl	8002d0c <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fe f8a8 	bl	8002d0c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e066      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bca:	4b35      	ldr	r3, [pc, #212]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x530>
 8004bd6:	e05e      	b.n	8004c96 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd8:	4b31      	ldr	r3, [pc, #196]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a30      	ldr	r2, [pc, #192]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fe f892 	bl	8002d0c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fe f88e 	bl	8002d0c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e04c      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfe:	4b28      	ldr	r3, [pc, #160]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c0a:	4b25      	ldr	r3, [pc, #148]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	4924      	ldr	r1, [pc, #144]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c10:	4b25      	ldr	r3, [pc, #148]	@ (8004ca8 <HAL_RCC_OscConfig+0x620>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	60cb      	str	r3, [r1, #12]
 8004c16:	e03e      	b.n	8004c96 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e039      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004c24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <HAL_RCC_OscConfig+0x618>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f003 0203 	and.w	r2, r3, #3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d12c      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	3b01      	subs	r3, #1
 8004c44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d123      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d11b      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d113      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	3b01      	subs	r3, #1
 8004c78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d109      	bne.n	8004c92 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	019f800c 	.word	0x019f800c
 8004ca8:	feeefffc 	.word	0xfeeefffc

08004cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e11e      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b91      	ldr	r3, [pc, #580]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d910      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b8e      	ldr	r3, [pc, #568]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 020f 	bic.w	r2, r3, #15
 8004cda:	498c      	ldr	r1, [pc, #560]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b8a      	ldr	r3, [pc, #552]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e106      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d073      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d129      	bne.n	8004d5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d08:	4b81      	ldr	r3, [pc, #516]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0f4      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004d18:	f000 f9d0 	bl	80050bc <RCC_GetSysClockFreqFromPLLSource>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	4a7c      	ldr	r2, [pc, #496]	@ (8004f14 <HAL_RCC_ClockConfig+0x268>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d93f      	bls.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d26:	4b7a      	ldr	r3, [pc, #488]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d033      	beq.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d12f      	bne.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d46:	4b72      	ldr	r3, [pc, #456]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d4e:	4a70      	ldr	r2, [pc, #448]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004d56:	2380      	movs	r3, #128	@ 0x80
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	e024      	b.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d64:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e0c6      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d74:	4b66      	ldr	r3, [pc, #408]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0be      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004d84:	f000 f8ce 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4a61      	ldr	r2, [pc, #388]	@ (8004f14 <HAL_RCC_ClockConfig+0x268>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d909      	bls.n	8004da6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004d92:	4b5f      	ldr	r3, [pc, #380]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004da2:	2380      	movs	r3, #128	@ 0x80
 8004da4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004da6:	4b5a      	ldr	r3, [pc, #360]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 0203 	bic.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4957      	ldr	r1, [pc, #348]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db8:	f7fd ffa8 	bl	8002d0c <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dc0:	f7fd ffa4 	bl	8002d0c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e095      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 020c 	and.w	r2, r3, #12
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d1eb      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d023      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e00:	4b43      	ldr	r3, [pc, #268]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4a42      	ldr	r2, [pc, #264]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004e18:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e20:	4a3b      	ldr	r2, [pc, #236]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e28:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4936      	ldr	r1, [pc, #216]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b80      	cmp	r3, #128	@ 0x80
 8004e40:	d105      	bne.n	8004e4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004e42:	4b33      	ldr	r3, [pc, #204]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4a32      	ldr	r2, [pc, #200]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004e48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d21d      	bcs.n	8004e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 020f 	bic.w	r2, r3, #15
 8004e64:	4929      	ldr	r1, [pc, #164]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e6c:	f7fd ff4e 	bl	8002d0c <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fd ff4a 	bl	8002d0c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e03b      	b.n	8004f02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <HAL_RCC_ClockConfig+0x260>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1ed      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4917      	ldr	r1, [pc, #92]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec2:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	490f      	ldr	r1, [pc, #60]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ed6:	f000 f825 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004eda:	4602      	mov	r2, r0
 8004edc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <HAL_RCC_ClockConfig+0x264>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	490c      	ldr	r1, [pc, #48]	@ (8004f18 <HAL_RCC_ClockConfig+0x26c>)
 8004ee8:	5ccb      	ldrb	r3, [r1, r3]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8004f1c <HAL_RCC_ClockConfig+0x270>)
 8004ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <HAL_RCC_ClockConfig+0x274>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fd fc1a 	bl	8002734 <HAL_InitTick>
 8004f00:	4603      	mov	r3, r0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40021000 	.word	0x40021000
 8004f14:	04c4b400 	.word	0x04c4b400
 8004f18:	0801cbb4 	.word	0x0801cbb4
 8004f1c:	20000024 	.word	0x20000024
 8004f20:	20000028 	.word	0x20000028

08004f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 030c 	and.w	r3, r3, #12
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d102      	bne.n	8004f3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f36:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	e047      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004f3c:	4b27      	ldr	r3, [pc, #156]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d102      	bne.n	8004f4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f48:	4b26      	ldr	r3, [pc, #152]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e03e      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004f4e:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d136      	bne.n	8004fc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f5a:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f64:	4b1d      	ldr	r3, [pc, #116]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	3301      	adds	r3, #1
 8004f70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d10c      	bne.n	8004f92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f78:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f82:	68d2      	ldr	r2, [r2, #12]
 8004f84:	0a12      	lsrs	r2, r2, #8
 8004f86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f8a:	fb02 f303 	mul.w	r3, r2, r3
 8004f8e:	617b      	str	r3, [r7, #20]
      break;
 8004f90:	e00c      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f92:	4a13      	ldr	r2, [pc, #76]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	4a10      	ldr	r2, [pc, #64]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f9c:	68d2      	ldr	r2, [r2, #12]
 8004f9e:	0a12      	lsrs	r2, r2, #8
 8004fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004fa4:	fb02 f303 	mul.w	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
      break;
 8004faa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fac:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	0e5b      	lsrs	r3, r3, #25
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	e001      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004fcc:	693b      	ldr	r3, [r7, #16]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	00f42400 	.word	0x00f42400
 8004fe4:	016e3600 	.word	0x016e3600

08004fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fec:	4b03      	ldr	r3, [pc, #12]	@ (8004ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000024 	.word	0x20000024

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005004:	f7ff fff0 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4904      	ldr	r1, [pc, #16]	@ (8005028 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40021000 	.word	0x40021000
 8005028:	0801cbc4 	.word	0x0801cbc4

0800502c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005030:	f7ff ffda 	bl	8004fe8 <HAL_RCC_GetHCLKFreq>
 8005034:	4602      	mov	r2, r0
 8005036:	4b06      	ldr	r3, [pc, #24]	@ (8005050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0adb      	lsrs	r3, r3, #11
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	4904      	ldr	r1, [pc, #16]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005042:	5ccb      	ldrb	r3, [r1, r3]
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40021000 	.word	0x40021000
 8005054:	0801cbc4 	.word	0x0801cbc4

08005058 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	220f      	movs	r2, #15
 8005066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005068:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <HAL_RCC_GetClockConfig+0x5c>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0203 	and.w	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005074:	4b0f      	ldr	r3, [pc, #60]	@ (80050b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005080:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800508c:	4b09      	ldr	r3, [pc, #36]	@ (80050b4 <HAL_RCC_GetClockConfig+0x5c>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	08db      	lsrs	r3, r3, #3
 8005092:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800509a:	4b07      	ldr	r3, [pc, #28]	@ (80050b8 <HAL_RCC_GetClockConfig+0x60>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	601a      	str	r2, [r3, #0]
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40022000 	.word	0x40022000

080050bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d10c      	bne.n	80050fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e0:	4a17      	ldr	r2, [pc, #92]	@ (8005140 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	4a14      	ldr	r2, [pc, #80]	@ (800513c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80050ea:	68d2      	ldr	r2, [r2, #12]
 80050ec:	0a12      	lsrs	r2, r2, #8
 80050ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	617b      	str	r3, [r7, #20]
    break;
 80050f8:	e00c      	b.n	8005114 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050fa:	4a12      	ldr	r2, [pc, #72]	@ (8005144 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	4a0e      	ldr	r2, [pc, #56]	@ (800513c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005104:	68d2      	ldr	r2, [r2, #12]
 8005106:	0a12      	lsrs	r2, r2, #8
 8005108:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800510c:	fb02 f303 	mul.w	r3, r2, r3
 8005110:	617b      	str	r3, [r7, #20]
    break;
 8005112:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005114:	4b09      	ldr	r3, [pc, #36]	@ (800513c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	0e5b      	lsrs	r3, r3, #25
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	3301      	adds	r3, #1
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800512e:	687b      	ldr	r3, [r7, #4]
}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40021000 	.word	0x40021000
 8005140:	016e3600 	.word	0x016e3600
 8005144:	00f42400 	.word	0x00f42400

08005148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005150:	2300      	movs	r3, #0
 8005152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005154:	2300      	movs	r3, #0
 8005156:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 8098 	beq.w	8005296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005166:	2300      	movs	r3, #0
 8005168:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800516a:	4b43      	ldr	r3, [pc, #268]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800516e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10d      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005176:	4b40      	ldr	r3, [pc, #256]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517a:	4a3f      	ldr	r2, [pc, #252]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800517c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005180:	6593      	str	r3, [r2, #88]	@ 0x58
 8005182:	4b3d      	ldr	r3, [pc, #244]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800518a:	60bb      	str	r3, [r7, #8]
 800518c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800518e:	2301      	movs	r3, #1
 8005190:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005192:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a39      	ldr	r2, [pc, #228]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800519e:	f7fd fdb5 	bl	8002d0c <HAL_GetTick>
 80051a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051a4:	e009      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a6:	f7fd fdb1 	bl	8002d0c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d902      	bls.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	74fb      	strb	r3, [r7, #19]
        break;
 80051b8:	e005      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051ba:	4b30      	ldr	r3, [pc, #192]	@ (800527c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0ef      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80051c6:	7cfb      	ldrb	r3, [r7, #19]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d159      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01e      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d019      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051e8:	4b23      	ldr	r3, [pc, #140]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f4:	4b20      	ldr	r3, [pc, #128]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005204:	4b1c      	ldr	r3, [pc, #112]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520a:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800520c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005214:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fd fd71 	bl	8002d0c <HAL_GetTick>
 800522a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522c:	e00b      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fd fd6d 	bl	8002d0c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d902      	bls.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	74fb      	strb	r3, [r7, #19]
            break;
 8005244:	e006      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005246:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ec      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800525a:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005268:	4903      	ldr	r1, [pc, #12]	@ (8005278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005270:	e008      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005272:	7cfb      	ldrb	r3, [r7, #19]
 8005274:	74bb      	strb	r3, [r7, #18]
 8005276:	e005      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005278:	40021000 	.word	0x40021000
 800527c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005284:	7c7b      	ldrb	r3, [r7, #17]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d105      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528a:	4ba7      	ldr	r3, [pc, #668]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	4aa6      	ldr	r2, [pc, #664]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005294:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052a2:	4ba1      	ldr	r3, [pc, #644]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f023 0203 	bic.w	r2, r3, #3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	499d      	ldr	r1, [pc, #628]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052c4:	4b98      	ldr	r3, [pc, #608]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ca:	f023 020c 	bic.w	r2, r3, #12
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	4995      	ldr	r1, [pc, #596]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0304 	and.w	r3, r3, #4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052e6:	4b90      	ldr	r3, [pc, #576]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	498c      	ldr	r1, [pc, #560]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005308:	4b87      	ldr	r3, [pc, #540]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	4984      	ldr	r1, [pc, #528]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800532a:	4b7f      	ldr	r3, [pc, #508]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	497b      	ldr	r1, [pc, #492]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800534c:	4b76      	ldr	r3, [pc, #472]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	4973      	ldr	r1, [pc, #460]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800536e:	4b6e      	ldr	r3, [pc, #440]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005374:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	496a      	ldr	r1, [pc, #424]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005390:	4b65      	ldr	r3, [pc, #404]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	4962      	ldr	r1, [pc, #392]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	4959      	ldr	r1, [pc, #356]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053d4:	4b54      	ldr	r3, [pc, #336]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053da:	f023 0203 	bic.w	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	4951      	ldr	r1, [pc, #324]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	4948      	ldr	r1, [pc, #288]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005418:	4b43      	ldr	r3, [pc, #268]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	4940      	ldr	r1, [pc, #256]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005436:	d105      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005438:	4b3b      	ldr	r3, [pc, #236]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a3a      	ldr	r2, [pc, #232]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005442:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800544c:	2b00      	cmp	r3, #0
 800544e:	d015      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005450:	4b35      	ldr	r3, [pc, #212]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005456:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545e:	4932      	ldr	r1, [pc, #200]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800546e:	d105      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005470:	4b2d      	ldr	r3, [pc, #180]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a2c      	ldr	r2, [pc, #176]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800547a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d015      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005488:	4b27      	ldr	r3, [pc, #156]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	4924      	ldr	r1, [pc, #144]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054a6:	d105      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d015      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ce:	4916      	ldr	r1, [pc, #88]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054de:	d105      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e0:	4b11      	ldr	r3, [pc, #68]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4a10      	ldr	r2, [pc, #64]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d019      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	4908      	ldr	r1, [pc, #32]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005516:	d109      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005518:	4b03      	ldr	r3, [pc, #12]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a02      	ldr	r2, [pc, #8]	@ (8005528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005522:	60d3      	str	r3, [r2, #12]
 8005524:	e002      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005526:	bf00      	nop
 8005528:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005538:	4b29      	ldr	r3, [pc, #164]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005546:	4926      	ldr	r1, [pc, #152]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005556:	d105      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005558:	4b21      	ldr	r3, [pc, #132]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	4a20      	ldr	r2, [pc, #128]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800555e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005562:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005570:	4b1b      	ldr	r3, [pc, #108]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800557e:	4918      	ldr	r1, [pc, #96]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558e:	d105      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005590:	4b13      	ldr	r3, [pc, #76]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a12      	ldr	r2, [pc, #72]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800559a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d015      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80055a8:	4b0d      	ldr	r3, [pc, #52]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b6:	490a      	ldr	r1, [pc, #40]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80055c6:	d105      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055c8:	4b05      	ldr	r3, [pc, #20]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a04      	ldr	r2, [pc, #16]	@ (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80055ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80055d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000

080055e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e049      	b.n	800568a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f841 	bl	8005692 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f000 fa30 	bl	8005a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
	...

080056a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e054      	b.n	800576a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a26      	ldr	r2, [pc, #152]	@ (8005778 <HAL_TIM_Base_Start_IT+0xd0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d022      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ea:	d01d      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a22      	ldr	r2, [pc, #136]	@ (800577c <HAL_TIM_Base_Start_IT+0xd4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d018      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	@ (8005780 <HAL_TIM_Base_Start_IT+0xd8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1f      	ldr	r2, [pc, #124]	@ (8005784 <HAL_TIM_Base_Start_IT+0xdc>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00e      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1e      	ldr	r2, [pc, #120]	@ (8005788 <HAL_TIM_Base_Start_IT+0xe0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d009      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1c      	ldr	r2, [pc, #112]	@ (800578c <HAL_TIM_Base_Start_IT+0xe4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <HAL_TIM_Base_Start_IT+0x80>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1b      	ldr	r2, [pc, #108]	@ (8005790 <HAL_TIM_Base_Start_IT+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d115      	bne.n	8005754 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	4b19      	ldr	r3, [pc, #100]	@ (8005794 <HAL_TIM_Base_Start_IT+0xec>)
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b06      	cmp	r3, #6
 8005738:	d015      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0xbe>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005740:	d011      	beq.n	8005766 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005752:	e008      	b.n	8005766 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e000      	b.n	8005768 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40012c00 	.word	0x40012c00
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40013400 	.word	0x40013400
 800578c:	40014000 	.word	0x40014000
 8005790:	40015000 	.word	0x40015000
 8005794:	00010007 	.word	0x00010007

08005798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d020      	beq.n	80057fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01b      	beq.n	80057fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0202 	mvn.w	r2, #2
 80057cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f931 	bl	8005a4a <HAL_TIM_IC_CaptureCallback>
 80057e8:	e005      	b.n	80057f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f923 	bl	8005a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f934 	bl	8005a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d020      	beq.n	8005848 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01b      	beq.n	8005848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0204 	mvn.w	r2, #4
 8005818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f90b 	bl	8005a4a <HAL_TIM_IC_CaptureCallback>
 8005834:	e005      	b.n	8005842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f8fd 	bl	8005a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f90e 	bl	8005a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d020      	beq.n	8005894 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0208 	mvn.w	r2, #8
 8005864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2204      	movs	r2, #4
 800586a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d003      	beq.n	8005882 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f8e5 	bl	8005a4a <HAL_TIM_IC_CaptureCallback>
 8005880:	e005      	b.n	800588e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f8d7 	bl	8005a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f8e8 	bl	8005a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b00      	cmp	r3, #0
 800589c:	d020      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01b      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0210 	mvn.w	r2, #16
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2208      	movs	r2, #8
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8bf 	bl	8005a4a <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8b1 	bl	8005a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f8c2 	bl	8005a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0201 	mvn.w	r2, #1
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fc fd70 	bl	80023e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f969 	bl	8005c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f961 	bl	8005c18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00c      	beq.n	800597a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f87c 	bl	8005a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00c      	beq.n	800599e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0220 	mvn.w	r2, #32
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f929 	bl	8005bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80059ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f935 	bl	8005c2c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f92d 	bl	8005c40 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f925 	bl	8005c54 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f91d 	bl	8005c68 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a4c      	ldr	r2, [pc, #304]	@ (8005bcc <TIM_Base_SetConfig+0x144>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d017      	beq.n	8005ad0 <TIM_Base_SetConfig+0x48>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa6:	d013      	beq.n	8005ad0 <TIM_Base_SetConfig+0x48>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a49      	ldr	r2, [pc, #292]	@ (8005bd0 <TIM_Base_SetConfig+0x148>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_Base_SetConfig+0x48>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a48      	ldr	r2, [pc, #288]	@ (8005bd4 <TIM_Base_SetConfig+0x14c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_Base_SetConfig+0x48>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a47      	ldr	r2, [pc, #284]	@ (8005bd8 <TIM_Base_SetConfig+0x150>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_Base_SetConfig+0x48>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a46      	ldr	r2, [pc, #280]	@ (8005bdc <TIM_Base_SetConfig+0x154>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_Base_SetConfig+0x48>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a45      	ldr	r2, [pc, #276]	@ (8005be0 <TIM_Base_SetConfig+0x158>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d108      	bne.n	8005ae2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a39      	ldr	r2, [pc, #228]	@ (8005bcc <TIM_Base_SetConfig+0x144>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d023      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af0:	d01f      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a36      	ldr	r2, [pc, #216]	@ (8005bd0 <TIM_Base_SetConfig+0x148>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01b      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a35      	ldr	r2, [pc, #212]	@ (8005bd4 <TIM_Base_SetConfig+0x14c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d017      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a34      	ldr	r2, [pc, #208]	@ (8005bd8 <TIM_Base_SetConfig+0x150>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a33      	ldr	r2, [pc, #204]	@ (8005bdc <TIM_Base_SetConfig+0x154>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00f      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a33      	ldr	r2, [pc, #204]	@ (8005be4 <TIM_Base_SetConfig+0x15c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00b      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a32      	ldr	r2, [pc, #200]	@ (8005be8 <TIM_Base_SetConfig+0x160>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a31      	ldr	r2, [pc, #196]	@ (8005bec <TIM_Base_SetConfig+0x164>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_Base_SetConfig+0xaa>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005be0 <TIM_Base_SetConfig+0x158>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d108      	bne.n	8005b44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <TIM_Base_SetConfig+0x144>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <TIM_Base_SetConfig+0x110>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1a      	ldr	r2, [pc, #104]	@ (8005bdc <TIM_Base_SetConfig+0x154>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00f      	beq.n	8005b98 <TIM_Base_SetConfig+0x110>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005be4 <TIM_Base_SetConfig+0x15c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <TIM_Base_SetConfig+0x110>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a19      	ldr	r2, [pc, #100]	@ (8005be8 <TIM_Base_SetConfig+0x160>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_Base_SetConfig+0x110>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a18      	ldr	r2, [pc, #96]	@ (8005bec <TIM_Base_SetConfig+0x164>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_Base_SetConfig+0x110>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a13      	ldr	r2, [pc, #76]	@ (8005be0 <TIM_Base_SetConfig+0x158>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	611a      	str	r2, [r3, #16]
  }
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	40000800 	.word	0x40000800
 8005bd8:	40000c00 	.word	0x40000c00
 8005bdc:	40013400 	.word	0x40013400
 8005be0:	40015000 	.word	0x40015000
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e042      	b.n	8005d14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fc ff21 	bl	8002ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2224      	movs	r2, #36	@ 0x24
 8005caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0201 	bic.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f001 f806 	bl	8006cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fd07 	bl	80066e0 <UART_SetConfig>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e01b      	b.n	8005d14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f001 f885 	bl	8006e1c <UART_CheckIdleState>
 8005d12:	4603      	mov	r3, r0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	@ 0x28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d167      	bne.n	8005e04 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_UART_Transmit_DMA+0x24>
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e060      	b.n	8005e06 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	88fa      	ldrh	r2, [r7, #6]
 8005d4e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	88fa      	ldrh	r2, [r7, #6]
 8005d56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2221      	movs	r2, #33	@ 0x21
 8005d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d028      	beq.n	8005dc4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d76:	4a26      	ldr	r2, [pc, #152]	@ (8005e10 <HAL_UART_Transmit_DMA+0xf4>)
 8005d78:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d7e:	4a25      	ldr	r2, [pc, #148]	@ (8005e14 <HAL_UART_Transmit_DMA+0xf8>)
 8005d80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d86:	4a24      	ldr	r2, [pc, #144]	@ (8005e18 <HAL_UART_Transmit_DMA+0xfc>)
 8005d88:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d8e:	2200      	movs	r2, #0
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3328      	adds	r3, #40	@ 0x28
 8005da2:	461a      	mov	r2, r3
 8005da4:	88fb      	ldrh	r3, [r7, #6]
 8005da6:	f7fd f945 	bl	8003034 <HAL_DMA_Start_IT>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2210      	movs	r2, #16
 8005db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e020      	b.n	8005e06 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2240      	movs	r2, #64	@ 0x40
 8005dca:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	613b      	str	r3, [r7, #16]
   return(result);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dec:	623a      	str	r2, [r7, #32]
 8005dee:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	69f9      	ldr	r1, [r7, #28]
 8005df2:	6a3a      	ldr	r2, [r7, #32]
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	e000      	b.n	8005e06 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3728      	adds	r7, #40	@ 0x28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	080072e7 	.word	0x080072e7
 8005e14:	08007381 	.word	0x08007381
 8005e18:	08007507 	.word	0x08007507

08005e1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	@ 0x28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d137      	bne.n	8005ea4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_UART_Receive_DMA+0x24>
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e030      	b.n	8005ea6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <HAL_UART_Receive_DMA+0x94>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d01f      	beq.n	8005e94 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d018      	beq.n	8005e94 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e80:	623b      	str	r3, [r7, #32]
 8005e82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	69f9      	ldr	r1, [r7, #28]
 8005e86:	6a3a      	ldr	r2, [r7, #32]
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e6      	bne.n	8005e62 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f001 f8d6 	bl	800704c <UART_Start_Receive_DMA>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	e000      	b.n	8005ea6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
  }
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3728      	adds	r7, #40	@ 0x28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40008000 	.word	0x40008000

08005eb4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b090      	sub	sp, #64	@ 0x40
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed6:	2b80      	cmp	r3, #128	@ 0x80
 8005ed8:	d139      	bne.n	8005f4e <HAL_UART_DMAStop+0x9a>
 8005eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005edc:	2b21      	cmp	r3, #33	@ 0x21
 8005ede:	d136      	bne.n	8005f4e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fd f902 	bl	800312a <HAL_DMA_Abort>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fd fa69 	bl	8003408 <HAL_DMA_GetError>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d105      	bne.n	8005f48 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2210      	movs	r2, #16
 8005f40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e047      	b.n	8005fd8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 f925 	bl	8007198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d13c      	bne.n	8005fd6 <HAL_UART_DMAStop+0x122>
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5e:	2b22      	cmp	r3, #34	@ 0x22
 8005f60:	d139      	bne.n	8005fd6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f82:	61ba      	str	r2, [r7, #24]
 8005f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e5      	bne.n	8005f62 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d017      	beq.n	8005fd0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fd f8bf 	bl	800312a <HAL_DMA_Abort>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00e      	beq.n	8005fd0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fd fa25 	bl	8003408 <HAL_DMA_GetError>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d105      	bne.n	8005fd0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e003      	b.n	8005fd8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f922 	bl	800721a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3740      	adds	r7, #64	@ 0x40
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b0ba      	sub	sp, #232	@ 0xe8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800600a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800600e:	4013      	ands	r3, r2
 8006010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11b      	bne.n	8006054 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d015      	beq.n	8006054 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d105      	bne.n	8006040 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 8300 	beq.w	800664a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
      }
      return;
 8006052:	e2fa      	b.n	800664a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8123 	beq.w	80062a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800605e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006062:	4b8d      	ldr	r3, [pc, #564]	@ (8006298 <HAL_UART_IRQHandler+0x2b8>)
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800606a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800606e:	4b8b      	ldr	r3, [pc, #556]	@ (800629c <HAL_UART_IRQHandler+0x2bc>)
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8116 	beq.w	80062a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d011      	beq.n	80060a8 <HAL_UART_IRQHandler+0xc8>
 8006084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2201      	movs	r2, #1
 8006096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609e:	f043 0201 	orr.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d011      	beq.n	80060d8 <HAL_UART_IRQHandler+0xf8>
 80060b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00b      	beq.n	80060d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2202      	movs	r2, #2
 80060c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ce:	f043 0204 	orr.w	r2, r3, #4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d011      	beq.n	8006108 <HAL_UART_IRQHandler+0x128>
 80060e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2204      	movs	r2, #4
 80060f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fe:	f043 0202 	orr.w	r2, r3, #2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d017      	beq.n	8006144 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006118:	f003 0320 	and.w	r3, r3, #32
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006120:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006124:	4b5c      	ldr	r3, [pc, #368]	@ (8006298 <HAL_UART_IRQHandler+0x2b8>)
 8006126:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00b      	beq.n	8006144 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2208      	movs	r2, #8
 8006132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613a:	f043 0208 	orr.w	r2, r3, #8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800614c:	2b00      	cmp	r3, #0
 800614e:	d012      	beq.n	8006176 <HAL_UART_IRQHandler+0x196>
 8006150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006154:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00c      	beq.n	8006176 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8266 	beq.w	800664e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d013      	beq.n	80061b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800618e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800619a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800619e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ca:	2b40      	cmp	r3, #64	@ 0x40
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d054      	beq.n	8006284 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 f81d 	bl	800721a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ea:	2b40      	cmp	r3, #64	@ 0x40
 80061ec:	d146      	bne.n	800627c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800621a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800621e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1d9      	bne.n	80061ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624a:	4a15      	ldr	r2, [pc, #84]	@ (80062a0 <HAL_UART_IRQHandler+0x2c0>)
 800624c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006254:	4618      	mov	r0, r3
 8006256:	f7fc ffc1 	bl	80031dc <HAL_DMA_Abort_IT>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d019      	beq.n	8006294 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800626e:	4610      	mov	r0, r2
 8006270:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006272:	e00f      	b.n	8006294 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fa1d 	bl	80066b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627a:	e00b      	b.n	8006294 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa19 	bl	80066b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006282:	e007      	b.n	8006294 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fa15 	bl	80066b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006292:	e1dc      	b.n	800664e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	bf00      	nop
    return;
 8006296:	e1da      	b.n	800664e <HAL_UART_IRQHandler+0x66e>
 8006298:	10000001 	.word	0x10000001
 800629c:	04000120 	.word	0x04000120
 80062a0:	08007587 	.word	0x08007587

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	f040 8170 	bne.w	800658e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 8169 	beq.w	800658e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8162 	beq.w	800658e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2210      	movs	r2, #16
 80062d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	f040 80d8 	bne.w	8006492 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80af 	beq.w	8006458 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006300:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006304:	429a      	cmp	r2, r3
 8006306:	f080 80a7 	bcs.w	8006458 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 8087 	bne.w	8006436 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800633c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006356:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800635e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800636a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1da      	bne.n	8006328 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3308      	adds	r3, #8
 8006378:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3308      	adds	r3, #8
 8006392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006396:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800639a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800639e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e1      	bne.n	8006372 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3308      	adds	r3, #8
 80063b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3308      	adds	r3, #8
 80063ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e3      	bne.n	80063ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006404:	f023 0310 	bic.w	r3, r3, #16
 8006408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006416:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006418:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800641c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e4      	bne.n	80063f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006430:	4618      	mov	r0, r3
 8006432:	f7fc fe7a 	bl	800312a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2202      	movs	r2, #2
 800643a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006448:	b29b      	uxth	r3, r3
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	b29b      	uxth	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f939 	bl	80066c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006456:	e0fc      	b.n	8006652 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800645e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006462:	429a      	cmp	r2, r3
 8006464:	f040 80f5 	bne.w	8006652 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0320 	and.w	r3, r3, #32
 8006476:	2b20      	cmp	r3, #32
 8006478:	f040 80eb 	bne.w	8006652 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f91c 	bl	80066c8 <HAL_UARTEx_RxEventCallback>
      return;
 8006490:	e0df      	b.n	8006652 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800649e:	b29b      	uxth	r3, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80d1 	beq.w	8006656 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80064b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80cc 	beq.w	8006656 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e4      	bne.n	80064be <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	623b      	str	r3, [r7, #32]
   return(result);
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3308      	adds	r3, #8
 8006518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800651c:	633a      	str	r2, [r7, #48]	@ 0x30
 800651e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e1      	bne.n	80064f4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	60fb      	str	r3, [r7, #12]
   return(result);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f023 0310 	bic.w	r3, r3, #16
 8006558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	617b      	str	r3, [r7, #20]
   return(result);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e4      	bne.n	8006544 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f89e 	bl	80066c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800658c:	e063      	b.n	8006656 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <HAL_UART_IRQHandler+0x5d8>
 800659a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800659e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80065ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 f825 	bl	8007600 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065b6:	e051      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d014      	beq.n	80065ee <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d03a      	beq.n	800665a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4798      	blx	r3
    }
    return;
 80065ec:	e035      	b.n	800665a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <HAL_UART_IRQHandler+0x62e>
 80065fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 ffcf 	bl	80075aa <UART_EndTransmit_IT>
    return;
 800660c:	e026      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800660e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_UART_IRQHandler+0x64e>
 800661a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800661e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fffe 	bl	8007628 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800662c:	e016      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d010      	beq.n	800665c <HAL_UART_IRQHandler+0x67c>
 800663a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800663e:	2b00      	cmp	r3, #0
 8006640:	da0c      	bge.n	800665c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 ffe6 	bl	8007614 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006648:	e008      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
      return;
 800664a:	bf00      	nop
 800664c:	e006      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
    return;
 800664e:	bf00      	nop
 8006650:	e004      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
      return;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
      return;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_UART_IRQHandler+0x67c>
    return;
 800665a:	bf00      	nop
  }
}
 800665c:	37e8      	adds	r7, #232	@ 0xe8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop

08006664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e4:	b08c      	sub	sp, #48	@ 0x30
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	431a      	orrs	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	431a      	orrs	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4313      	orrs	r3, r2
 8006706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4baa      	ldr	r3, [pc, #680]	@ (80069b8 <UART_SetConfig+0x2d8>)
 8006710:	4013      	ands	r3, r2
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006718:	430b      	orrs	r3, r1
 800671a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	68da      	ldr	r2, [r3, #12]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a9f      	ldr	r2, [pc, #636]	@ (80069bc <UART_SetConfig+0x2dc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006748:	4313      	orrs	r3, r2
 800674a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006756:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006760:	430b      	orrs	r3, r1
 8006762:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676a:	f023 010f 	bic.w	r1, r3, #15
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a90      	ldr	r2, [pc, #576]	@ (80069c0 <UART_SetConfig+0x2e0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d125      	bne.n	80067d0 <UART_SetConfig+0xf0>
 8006784:	4b8f      	ldr	r3, [pc, #572]	@ (80069c4 <UART_SetConfig+0x2e4>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	2b03      	cmp	r3, #3
 8006790:	d81a      	bhi.n	80067c8 <UART_SetConfig+0xe8>
 8006792:	a201      	add	r2, pc, #4	@ (adr r2, 8006798 <UART_SetConfig+0xb8>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067b9 	.word	0x080067b9
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	2301      	movs	r3, #1
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ae:	e116      	b.n	80069de <UART_SetConfig+0x2fe>
 80067b0:	2302      	movs	r3, #2
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067b6:	e112      	b.n	80069de <UART_SetConfig+0x2fe>
 80067b8:	2304      	movs	r3, #4
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067be:	e10e      	b.n	80069de <UART_SetConfig+0x2fe>
 80067c0:	2308      	movs	r3, #8
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c6:	e10a      	b.n	80069de <UART_SetConfig+0x2fe>
 80067c8:	2310      	movs	r3, #16
 80067ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ce:	e106      	b.n	80069de <UART_SetConfig+0x2fe>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a7c      	ldr	r2, [pc, #496]	@ (80069c8 <UART_SetConfig+0x2e8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d138      	bne.n	800684c <UART_SetConfig+0x16c>
 80067da:	4b7a      	ldr	r3, [pc, #488]	@ (80069c4 <UART_SetConfig+0x2e4>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067e0:	f003 030c 	and.w	r3, r3, #12
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	d82d      	bhi.n	8006844 <UART_SetConfig+0x164>
 80067e8:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x110>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006825 	.word	0x08006825
 80067f4:	08006845 	.word	0x08006845
 80067f8:	08006845 	.word	0x08006845
 80067fc:	08006845 	.word	0x08006845
 8006800:	08006835 	.word	0x08006835
 8006804:	08006845 	.word	0x08006845
 8006808:	08006845 	.word	0x08006845
 800680c:	08006845 	.word	0x08006845
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006845 	.word	0x08006845
 8006818:	08006845 	.word	0x08006845
 800681c:	08006845 	.word	0x08006845
 8006820:	0800683d 	.word	0x0800683d
 8006824:	2300      	movs	r3, #0
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800682a:	e0d8      	b.n	80069de <UART_SetConfig+0x2fe>
 800682c:	2302      	movs	r3, #2
 800682e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006832:	e0d4      	b.n	80069de <UART_SetConfig+0x2fe>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683a:	e0d0      	b.n	80069de <UART_SetConfig+0x2fe>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006842:	e0cc      	b.n	80069de <UART_SetConfig+0x2fe>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684a:	e0c8      	b.n	80069de <UART_SetConfig+0x2fe>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5e      	ldr	r2, [pc, #376]	@ (80069cc <UART_SetConfig+0x2ec>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d125      	bne.n	80068a2 <UART_SetConfig+0x1c2>
 8006856:	4b5b      	ldr	r3, [pc, #364]	@ (80069c4 <UART_SetConfig+0x2e4>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006860:	2b30      	cmp	r3, #48	@ 0x30
 8006862:	d016      	beq.n	8006892 <UART_SetConfig+0x1b2>
 8006864:	2b30      	cmp	r3, #48	@ 0x30
 8006866:	d818      	bhi.n	800689a <UART_SetConfig+0x1ba>
 8006868:	2b20      	cmp	r3, #32
 800686a:	d00a      	beq.n	8006882 <UART_SetConfig+0x1a2>
 800686c:	2b20      	cmp	r3, #32
 800686e:	d814      	bhi.n	800689a <UART_SetConfig+0x1ba>
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <UART_SetConfig+0x19a>
 8006874:	2b10      	cmp	r3, #16
 8006876:	d008      	beq.n	800688a <UART_SetConfig+0x1aa>
 8006878:	e00f      	b.n	800689a <UART_SetConfig+0x1ba>
 800687a:	2300      	movs	r3, #0
 800687c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006880:	e0ad      	b.n	80069de <UART_SetConfig+0x2fe>
 8006882:	2302      	movs	r3, #2
 8006884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006888:	e0a9      	b.n	80069de <UART_SetConfig+0x2fe>
 800688a:	2304      	movs	r3, #4
 800688c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006890:	e0a5      	b.n	80069de <UART_SetConfig+0x2fe>
 8006892:	2308      	movs	r3, #8
 8006894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006898:	e0a1      	b.n	80069de <UART_SetConfig+0x2fe>
 800689a:	2310      	movs	r3, #16
 800689c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a0:	e09d      	b.n	80069de <UART_SetConfig+0x2fe>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a4a      	ldr	r2, [pc, #296]	@ (80069d0 <UART_SetConfig+0x2f0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d125      	bne.n	80068f8 <UART_SetConfig+0x218>
 80068ac:	4b45      	ldr	r3, [pc, #276]	@ (80069c4 <UART_SetConfig+0x2e4>)
 80068ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068b8:	d016      	beq.n	80068e8 <UART_SetConfig+0x208>
 80068ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80068bc:	d818      	bhi.n	80068f0 <UART_SetConfig+0x210>
 80068be:	2b80      	cmp	r3, #128	@ 0x80
 80068c0:	d00a      	beq.n	80068d8 <UART_SetConfig+0x1f8>
 80068c2:	2b80      	cmp	r3, #128	@ 0x80
 80068c4:	d814      	bhi.n	80068f0 <UART_SetConfig+0x210>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <UART_SetConfig+0x1f0>
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d008      	beq.n	80068e0 <UART_SetConfig+0x200>
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x210>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d6:	e082      	b.n	80069de <UART_SetConfig+0x2fe>
 80068d8:	2302      	movs	r3, #2
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e07e      	b.n	80069de <UART_SetConfig+0x2fe>
 80068e0:	2304      	movs	r3, #4
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e6:	e07a      	b.n	80069de <UART_SetConfig+0x2fe>
 80068e8:	2308      	movs	r3, #8
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ee:	e076      	b.n	80069de <UART_SetConfig+0x2fe>
 80068f0:	2310      	movs	r3, #16
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f6:	e072      	b.n	80069de <UART_SetConfig+0x2fe>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a35      	ldr	r2, [pc, #212]	@ (80069d4 <UART_SetConfig+0x2f4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d12a      	bne.n	8006958 <UART_SetConfig+0x278>
 8006902:	4b30      	ldr	r3, [pc, #192]	@ (80069c4 <UART_SetConfig+0x2e4>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800690c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006910:	d01a      	beq.n	8006948 <UART_SetConfig+0x268>
 8006912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006916:	d81b      	bhi.n	8006950 <UART_SetConfig+0x270>
 8006918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800691c:	d00c      	beq.n	8006938 <UART_SetConfig+0x258>
 800691e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006922:	d815      	bhi.n	8006950 <UART_SetConfig+0x270>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <UART_SetConfig+0x250>
 8006928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692c:	d008      	beq.n	8006940 <UART_SetConfig+0x260>
 800692e:	e00f      	b.n	8006950 <UART_SetConfig+0x270>
 8006930:	2300      	movs	r3, #0
 8006932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006936:	e052      	b.n	80069de <UART_SetConfig+0x2fe>
 8006938:	2302      	movs	r3, #2
 800693a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693e:	e04e      	b.n	80069de <UART_SetConfig+0x2fe>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006946:	e04a      	b.n	80069de <UART_SetConfig+0x2fe>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694e:	e046      	b.n	80069de <UART_SetConfig+0x2fe>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006956:	e042      	b.n	80069de <UART_SetConfig+0x2fe>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a17      	ldr	r2, [pc, #92]	@ (80069bc <UART_SetConfig+0x2dc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d13a      	bne.n	80069d8 <UART_SetConfig+0x2f8>
 8006962:	4b18      	ldr	r3, [pc, #96]	@ (80069c4 <UART_SetConfig+0x2e4>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800696c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006970:	d01a      	beq.n	80069a8 <UART_SetConfig+0x2c8>
 8006972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006976:	d81b      	bhi.n	80069b0 <UART_SetConfig+0x2d0>
 8006978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800697c:	d00c      	beq.n	8006998 <UART_SetConfig+0x2b8>
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006982:	d815      	bhi.n	80069b0 <UART_SetConfig+0x2d0>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <UART_SetConfig+0x2b0>
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698c:	d008      	beq.n	80069a0 <UART_SetConfig+0x2c0>
 800698e:	e00f      	b.n	80069b0 <UART_SetConfig+0x2d0>
 8006990:	2300      	movs	r3, #0
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006996:	e022      	b.n	80069de <UART_SetConfig+0x2fe>
 8006998:	2302      	movs	r3, #2
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699e:	e01e      	b.n	80069de <UART_SetConfig+0x2fe>
 80069a0:	2304      	movs	r3, #4
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a6:	e01a      	b.n	80069de <UART_SetConfig+0x2fe>
 80069a8:	2308      	movs	r3, #8
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ae:	e016      	b.n	80069de <UART_SetConfig+0x2fe>
 80069b0:	2310      	movs	r3, #16
 80069b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b6:	e012      	b.n	80069de <UART_SetConfig+0x2fe>
 80069b8:	cfff69f3 	.word	0xcfff69f3
 80069bc:	40008000 	.word	0x40008000
 80069c0:	40013800 	.word	0x40013800
 80069c4:	40021000 	.word	0x40021000
 80069c8:	40004400 	.word	0x40004400
 80069cc:	40004800 	.word	0x40004800
 80069d0:	40004c00 	.word	0x40004c00
 80069d4:	40005000 	.word	0x40005000
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4aae      	ldr	r2, [pc, #696]	@ (8006c9c <UART_SetConfig+0x5bc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	f040 8097 	bne.w	8006b18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d823      	bhi.n	8006a3a <UART_SetConfig+0x35a>
 80069f2:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <UART_SetConfig+0x318>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a3b 	.word	0x08006a3b
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a3b 	.word	0x08006a3b
 8006a08:	08006a2b 	.word	0x08006a2b
 8006a0c:	08006a3b 	.word	0x08006a3b
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a3b 	.word	0x08006a3b
 8006a18:	08006a33 	.word	0x08006a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a1c:	f7fe faf0 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a22:	e010      	b.n	8006a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a24:	4b9e      	ldr	r3, [pc, #632]	@ (8006ca0 <UART_SetConfig+0x5c0>)
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a28:	e00d      	b.n	8006a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2a:	f7fe fa7b 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8006a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a30:	e009      	b.n	8006a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a38:	e005      	b.n	8006a46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8130 	beq.w	8006cae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	4a94      	ldr	r2, [pc, #592]	@ (8006ca4 <UART_SetConfig+0x5c4>)
 8006a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4613      	mov	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	4413      	add	r3, r2
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d305      	bcc.n	8006a7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d903      	bls.n	8006a86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a84:	e113      	b.n	8006cae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	2200      	movs	r2, #0
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	60fa      	str	r2, [r7, #12]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	4a84      	ldr	r2, [pc, #528]	@ (8006ca4 <UART_SetConfig+0x5c4>)
 8006a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006aa8:	f7fa f92e 	bl	8000d08 <__aeabi_uldivmod>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	020b      	lsls	r3, r1, #8
 8006abe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ac2:	0202      	lsls	r2, r0, #8
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	6849      	ldr	r1, [r1, #4]
 8006ac8:	0849      	lsrs	r1, r1, #1
 8006aca:	2000      	movs	r0, #0
 8006acc:	460c      	mov	r4, r1
 8006ace:	4605      	mov	r5, r0
 8006ad0:	eb12 0804 	adds.w	r8, r2, r4
 8006ad4:	eb43 0905 	adc.w	r9, r3, r5
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	469a      	mov	sl, r3
 8006ae0:	4693      	mov	fp, r2
 8006ae2:	4652      	mov	r2, sl
 8006ae4:	465b      	mov	r3, fp
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	4649      	mov	r1, r9
 8006aea:	f7fa f90d 	bl	8000d08 <__aeabi_uldivmod>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	4613      	mov	r3, r2
 8006af4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afc:	d308      	bcc.n	8006b10 <UART_SetConfig+0x430>
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b04:	d204      	bcs.n	8006b10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a3a      	ldr	r2, [r7, #32]
 8006b0c:	60da      	str	r2, [r3, #12]
 8006b0e:	e0ce      	b.n	8006cae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b16:	e0ca      	b.n	8006cae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b20:	d166      	bne.n	8006bf0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d827      	bhi.n	8006b7a <UART_SetConfig+0x49a>
 8006b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <UART_SetConfig+0x450>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b55 	.word	0x08006b55
 8006b34:	08006b5d 	.word	0x08006b5d
 8006b38:	08006b65 	.word	0x08006b65
 8006b3c:	08006b7b 	.word	0x08006b7b
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b7b 	.word	0x08006b7b
 8006b48:	08006b7b 	.word	0x08006b7b
 8006b4c:	08006b7b 	.word	0x08006b7b
 8006b50:	08006b73 	.word	0x08006b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fe fa54 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b5a:	e014      	b.n	8006b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b5c:	f7fe fa66 	bl	800502c <HAL_RCC_GetPCLK2Freq>
 8006b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b62:	e010      	b.n	8006b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b64:	4b4e      	ldr	r3, [pc, #312]	@ (8006ca0 <UART_SetConfig+0x5c0>)
 8006b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b68:	e00d      	b.n	8006b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6a:	f7fe f9db 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8006b6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b70:	e009      	b.n	8006b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b78:	e005      	b.n	8006b86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8090 	beq.w	8006cae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	4a44      	ldr	r2, [pc, #272]	@ (8006ca4 <UART_SetConfig+0x5c4>)
 8006b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ba0:	005a      	lsls	r2, r3, #1
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	441a      	add	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d916      	bls.n	8006be8 <UART_SetConfig+0x508>
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc0:	d212      	bcs.n	8006be8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f023 030f 	bic.w	r3, r3, #15
 8006bca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	8bfb      	ldrh	r3, [r7, #30]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	8bfa      	ldrh	r2, [r7, #30]
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e062      	b.n	8006cae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bee:	e05e      	b.n	8006cae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d828      	bhi.n	8006c4a <UART_SetConfig+0x56a>
 8006bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8006c00 <UART_SetConfig+0x520>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c25 	.word	0x08006c25
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c35 	.word	0x08006c35
 8006c0c:	08006c4b 	.word	0x08006c4b
 8006c10:	08006c3b 	.word	0x08006c3b
 8006c14:	08006c4b 	.word	0x08006c4b
 8006c18:	08006c4b 	.word	0x08006c4b
 8006c1c:	08006c4b 	.word	0x08006c4b
 8006c20:	08006c43 	.word	0x08006c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c24:	f7fe f9ec 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8006c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c2a:	e014      	b.n	8006c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7fe f9fe 	bl	800502c <HAL_RCC_GetPCLK2Freq>
 8006c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c32:	e010      	b.n	8006c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c34:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca0 <UART_SetConfig+0x5c0>)
 8006c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c38:	e00d      	b.n	8006c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fe f973 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8006c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c40:	e009      	b.n	8006c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c48:	e005      	b.n	8006c56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c54:	bf00      	nop
    }

    if (pclk != 0U)
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d028      	beq.n	8006cae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	4a10      	ldr	r2, [pc, #64]	@ (8006ca4 <UART_SetConfig+0x5c4>)
 8006c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c66:	461a      	mov	r2, r3
 8006c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	441a      	add	r2, r3
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	d910      	bls.n	8006ca8 <UART_SetConfig+0x5c8>
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c8c:	d20c      	bcs.n	8006ca8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60da      	str	r2, [r3, #12]
 8006c98:	e009      	b.n	8006cae <UART_SetConfig+0x5ce>
 8006c9a:	bf00      	nop
 8006c9c:	40008000 	.word	0x40008000
 8006ca0:	00f42400 	.word	0x00f42400
 8006ca4:	0801cbcc 	.word	0x0801cbcc
      }
      else
      {
        ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3730      	adds	r7, #48	@ 0x30
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01a      	beq.n	8006dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd6:	d10a      	bne.n	8006dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  }
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b098      	sub	sp, #96	@ 0x60
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e2c:	f7fb ff6e 	bl	8002d0c <HAL_GetTick>
 8006e30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d12f      	bne.n	8006ea0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f88e 	bl	8006f70 <UART_WaitOnFlagUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d022      	beq.n	8006ea0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e6      	bne.n	8006e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e063      	b.n	8006f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d149      	bne.n	8006f42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f857 	bl	8006f70 <UART_WaitOnFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d03c      	beq.n	8006f42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e6      	bne.n	8006ec8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3308      	adds	r3, #8
 8006f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f023 0301 	bic.w	r3, r3, #1
 8006f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f1a:	61fa      	str	r2, [r7, #28]
 8006f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	69b9      	ldr	r1, [r7, #24]
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	617b      	str	r3, [r7, #20]
   return(result);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e5      	bne.n	8006efa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e012      	b.n	8006f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3758      	adds	r7, #88	@ 0x58
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f80:	e04f      	b.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f88:	d04b      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8a:	f7fb febf 	bl	8002d0c <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d302      	bcc.n	8006fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e04e      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0304 	and.w	r3, r3, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d037      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b80      	cmp	r3, #128	@ 0x80
 8006fb6:	d034      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2b40      	cmp	r3, #64	@ 0x40
 8006fbc:	d031      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 0308 	and.w	r3, r3, #8
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d110      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f920 	bl	800721a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e029      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ffc:	d111      	bne.n	8007022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 f906 	bl	800721a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e00f      	b.n	8007042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4013      	ands	r3, r2
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	bf0c      	ite	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	2300      	movne	r3, #0
 8007036:	b2db      	uxtb	r3, r3
 8007038:	461a      	mov	r2, r3
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	429a      	cmp	r2, r3
 800703e:	d0a0      	beq.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b096      	sub	sp, #88	@ 0x58
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2222      	movs	r2, #34	@ 0x22
 8007074:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d02d      	beq.n	80070de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007088:	4a40      	ldr	r2, [pc, #256]	@ (800718c <UART_Start_Receive_DMA+0x140>)
 800708a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007092:	4a3f      	ldr	r2, [pc, #252]	@ (8007190 <UART_Start_Receive_DMA+0x144>)
 8007094:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800709c:	4a3d      	ldr	r2, [pc, #244]	@ (8007194 <UART_Start_Receive_DMA+0x148>)
 800709e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a6:	2200      	movs	r2, #0
 80070a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3324      	adds	r3, #36	@ 0x24
 80070b6:	4619      	mov	r1, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070bc:	461a      	mov	r2, r3
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	f7fb ffb8 	bl	8003034 <HAL_DMA_Start_IT>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2210      	movs	r2, #16
 80070ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e051      	b.n	8007182 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d018      	beq.n	8007118 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007106:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800710a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	f043 0301 	orr.w	r3, r3, #1
 800712e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007138:	637a      	str	r2, [r7, #52]	@ 0x34
 800713a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800713e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	613b      	str	r3, [r7, #16]
   return(result);
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800716c:	623a      	str	r2, [r7, #32]
 800716e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	69f9      	ldr	r1, [r7, #28]
 8007172:	6a3a      	ldr	r2, [r7, #32]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	61bb      	str	r3, [r7, #24]
   return(result);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3758      	adds	r7, #88	@ 0x58
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	0800739d 	.word	0x0800739d
 8007190:	080074c9 	.word	0x080074c9
 8007194:	08007507 	.word	0x08007507

08007198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007198:	b480      	push	{r7}
 800719a:	b08f      	sub	sp, #60	@ 0x3c
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	e853 3f00 	ldrex	r3, [r3]
 80071ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80071b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c6:	e841 2300 	strex	r3, r2, [r1]
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1e6      	bne.n	80071a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80071e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f2:	61ba      	str	r2, [r7, #24]
 80071f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	6979      	ldr	r1, [r7, #20]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	e841 2300 	strex	r3, r2, [r1]
 80071fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1e5      	bne.n	80071d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800720e:	bf00      	nop
 8007210:	373c      	adds	r7, #60	@ 0x3c
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800721a:	b480      	push	{r7}
 800721c:	b095      	sub	sp, #84	@ 0x54
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007240:	643b      	str	r3, [r7, #64]	@ 0x40
 8007242:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800724e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e6      	bne.n	8007222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3308      	adds	r3, #8
 800725a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	e853 3f00 	ldrex	r3, [r3]
 8007262:	61fb      	str	r3, [r7, #28]
   return(result);
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007278:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800727a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800727e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007280:	e841 2300 	strex	r3, r2, [r1]
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1e3      	bne.n	8007254 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d118      	bne.n	80072c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6979      	ldr	r1, [r7, #20]
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	613b      	str	r3, [r7, #16]
   return(result);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e6      	bne.n	8007294 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2220      	movs	r2, #32
 80072ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072da:	bf00      	nop
 80072dc:	3754      	adds	r7, #84	@ 0x54
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b090      	sub	sp, #64	@ 0x40
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d137      	bne.n	8007372 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007304:	2200      	movs	r2, #0
 8007306:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800730a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3308      	adds	r3, #8
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	623b      	str	r3, [r7, #32]
   return(result);
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007320:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3308      	adds	r3, #8
 8007328:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800732a:	633a      	str	r2, [r7, #48]	@ 0x30
 800732c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e5      	bne.n	800730a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800733e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	e853 3f00 	ldrex	r3, [r3]
 800734a:	60fb      	str	r3, [r7, #12]
   return(result);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
 8007354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007360:	69b9      	ldr	r1, [r7, #24]
 8007362:	69fa      	ldr	r2, [r7, #28]
 8007364:	e841 2300 	strex	r3, r2, [r1]
 8007368:	617b      	str	r3, [r7, #20]
   return(result);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e6      	bne.n	800733e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007370:	e002      	b.n	8007378 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007372:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007374:	f7ff f976 	bl	8006664 <HAL_UART_TxCpltCallback>
}
 8007378:	bf00      	nop
 800737a:	3740      	adds	r7, #64	@ 0x40
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff f972 	bl	8006678 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b09c      	sub	sp, #112	@ 0x70
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d171      	bne.n	800749c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80073b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e6      	bne.n	80073c0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	f023 0301 	bic.w	r3, r3, #1
 8007408:	667b      	str	r3, [r7, #100]	@ 0x64
 800740a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007412:	647a      	str	r2, [r7, #68]	@ 0x44
 8007414:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007418:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e5      	bne.n	80073f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	623b      	str	r3, [r7, #32]
   return(result);
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800743c:	663b      	str	r3, [r7, #96]	@ 0x60
 800743e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3308      	adds	r3, #8
 8007444:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007446:	633a      	str	r2, [r7, #48]	@ 0x30
 8007448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800744c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e5      	bne.n	8007426 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800745a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800745c:	2220      	movs	r2, #32
 800745e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007466:	2b01      	cmp	r3, #1
 8007468:	d118      	bne.n	800749c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	60fb      	str	r3, [r7, #12]
   return(result);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0310 	bic.w	r3, r3, #16
 800747e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007480:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	69b9      	ldr	r1, [r7, #24]
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	617b      	str	r3, [r7, #20]
   return(result);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800749c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800749e:	2200      	movs	r2, #0
 80074a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d107      	bne.n	80074ba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074b0:	4619      	mov	r1, r3
 80074b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074b4:	f7ff f908 	bl	80066c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074b8:	e002      	b.n	80074c0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80074ba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80074bc:	f7ff f8e6 	bl	800668c <HAL_UART_RxCpltCallback>
}
 80074c0:	bf00      	nop
 80074c2:	3770      	adds	r7, #112	@ 0x70
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d109      	bne.n	80074f8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	4619      	mov	r1, r3
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff f8e9 	bl	80066c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074f6:	e002      	b.n	80074fe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff f8d1 	bl	80066a0 <HAL_UART_RxHalfCpltCallback>
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007512:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007522:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752e:	2b80      	cmp	r3, #128	@ 0x80
 8007530:	d109      	bne.n	8007546 <UART_DMAError+0x40>
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b21      	cmp	r3, #33	@ 0x21
 8007536:	d106      	bne.n	8007546 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2200      	movs	r2, #0
 800753c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007540:	6978      	ldr	r0, [r7, #20]
 8007542:	f7ff fe29 	bl	8007198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b40      	cmp	r3, #64	@ 0x40
 8007552:	d109      	bne.n	8007568 <UART_DMAError+0x62>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b22      	cmp	r3, #34	@ 0x22
 8007558:	d106      	bne.n	8007568 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2200      	movs	r2, #0
 800755e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007562:	6978      	ldr	r0, [r7, #20]
 8007564:	f7ff fe59 	bl	800721a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800756e:	f043 0210 	orr.w	r2, r3, #16
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007578:	6978      	ldr	r0, [r7, #20]
 800757a:	f7ff f89b 	bl	80066b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800757e:	bf00      	nop
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff f889 	bl	80066b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b088      	sub	sp, #32
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	60bb      	str	r3, [r7, #8]
   return(result);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	461a      	mov	r2, r3
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6979      	ldr	r1, [r7, #20]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	613b      	str	r3, [r7, #16]
   return(result);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e6      	bne.n	80075b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff f836 	bl	8006664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075f8:	bf00      	nop
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <HAL_UARTEx_DisableFifoMode+0x16>
 800764e:	2302      	movs	r3, #2
 8007650:	e027      	b.n	80076a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2224      	movs	r2, #36	@ 0x24
 800765e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f022 0201 	bic.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007680:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e02d      	b.n	8007722 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2224      	movs	r2, #36	@ 0x24
 80076d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f850 	bl	80077a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b084      	sub	sp, #16
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800773a:	2b01      	cmp	r3, #1
 800773c:	d101      	bne.n	8007742 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800773e:	2302      	movs	r3, #2
 8007740:	e02d      	b.n	800779e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2224      	movs	r2, #36	@ 0x24
 800774e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0201 	bic.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f812 	bl	80077a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d108      	bne.n	80077ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077c8:	e031      	b.n	800782e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077ca:	2308      	movs	r3, #8
 80077cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077ce:	2308      	movs	r3, #8
 80077d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	0e5b      	lsrs	r3, r3, #25
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	0f5b      	lsrs	r3, r3, #29
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	7b3a      	ldrb	r2, [r7, #12]
 80077f6:	4911      	ldr	r1, [pc, #68]	@ (800783c <UARTEx_SetNbDataToProcess+0x94>)
 80077f8:	5c8a      	ldrb	r2, [r1, r2]
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077fe:	7b3a      	ldrb	r2, [r7, #12]
 8007800:	490f      	ldr	r1, [pc, #60]	@ (8007840 <UARTEx_SetNbDataToProcess+0x98>)
 8007802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007804:	fb93 f3f2 	sdiv	r3, r3, r2
 8007808:	b29a      	uxth	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	7b7a      	ldrb	r2, [r7, #13]
 8007814:	4909      	ldr	r1, [pc, #36]	@ (800783c <UARTEx_SetNbDataToProcess+0x94>)
 8007816:	5c8a      	ldrb	r2, [r1, r2]
 8007818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800781c:	7b7a      	ldrb	r2, [r7, #13]
 800781e:	4908      	ldr	r1, [pc, #32]	@ (8007840 <UARTEx_SetNbDataToProcess+0x98>)
 8007820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007822:	fb93 f3f2 	sdiv	r3, r3, r2
 8007826:	b29a      	uxth	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	0801cbe4 	.word	0x0801cbe4
 8007840:	0801cbec 	.word	0x0801cbec

08007844 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af04      	add	r7, sp, #16
 800784a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800784c:	2364      	movs	r3, #100	@ 0x64
 800784e:	9302      	str	r3, [sp, #8]
 8007850:	2301      	movs	r3, #1
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	f107 030f 	add.w	r3, r7, #15
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	2301      	movs	r3, #1
 800785c:	2275      	movs	r2, #117	@ 0x75
 800785e:	21d0      	movs	r1, #208	@ 0xd0
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7fc f9e9 	bl	8003c38 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	2b68      	cmp	r3, #104	@ 0x68
 800786a:	d13d      	bne.n	80078e8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8007870:	2364      	movs	r3, #100	@ 0x64
 8007872:	9302      	str	r3, [sp, #8]
 8007874:	2301      	movs	r3, #1
 8007876:	9301      	str	r3, [sp, #4]
 8007878:	f107 030e 	add.w	r3, r7, #14
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	2301      	movs	r3, #1
 8007880:	226b      	movs	r2, #107	@ 0x6b
 8007882:	21d0      	movs	r1, #208	@ 0xd0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7fc f8c3 	bl	8003a10 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800788a:	2307      	movs	r3, #7
 800788c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800788e:	2364      	movs	r3, #100	@ 0x64
 8007890:	9302      	str	r3, [sp, #8]
 8007892:	2301      	movs	r3, #1
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f107 030e 	add.w	r3, r7, #14
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	2301      	movs	r3, #1
 800789e:	2219      	movs	r2, #25
 80078a0:	21d0      	movs	r1, #208	@ 0xd0
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fc f8b4 	bl	8003a10 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80078ac:	2364      	movs	r3, #100	@ 0x64
 80078ae:	9302      	str	r3, [sp, #8]
 80078b0:	2301      	movs	r3, #1
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	f107 030e 	add.w	r3, r7, #14
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	2301      	movs	r3, #1
 80078bc:	221c      	movs	r2, #28
 80078be:	21d0      	movs	r1, #208	@ 0xd0
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fc f8a5 	bl	8003a10 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80078ca:	2364      	movs	r3, #100	@ 0x64
 80078cc:	9302      	str	r3, [sp, #8]
 80078ce:	2301      	movs	r3, #1
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	f107 030e 	add.w	r3, r7, #14
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	2301      	movs	r3, #1
 80078da:	221b      	movs	r2, #27
 80078dc:	21d0      	movs	r1, #208	@ 0xd0
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fc f896 	bl	8003a10 <HAL_I2C_Mem_Write>
        return 0;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <MPU6050_Init+0xa6>
    }
    return 1;
 80078e8:	2301      	movs	r3, #1
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	0000      	movs	r0, r0
 80078f4:	0000      	movs	r0, r0
	...

080078f8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80078f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078fc:	b094      	sub	sp, #80	@ 0x50
 80078fe:	af04      	add	r7, sp, #16
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8007904:	2364      	movs	r3, #100	@ 0x64
 8007906:	9302      	str	r3, [sp, #8]
 8007908:	230e      	movs	r3, #14
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	f107 0308 	add.w	r3, r7, #8
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	2301      	movs	r3, #1
 8007914:	223b      	movs	r2, #59	@ 0x3b
 8007916:	21d0      	movs	r1, #208	@ 0xd0
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fc f98d 	bl	8003c38 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800791e:	7a3b      	ldrb	r3, [r7, #8]
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	b21a      	sxth	r2, r3
 8007924:	7a7b      	ldrb	r3, [r7, #9]
 8007926:	b21b      	sxth	r3, r3
 8007928:	4313      	orrs	r3, r2
 800792a:	b21a      	sxth	r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8007930:	7abb      	ldrb	r3, [r7, #10]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	b21a      	sxth	r2, r3
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	b21b      	sxth	r3, r3
 800793a:	4313      	orrs	r3, r2
 800793c:	b21a      	sxth	r2, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8007942:	7b3b      	ldrb	r3, [r7, #12]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	b21a      	sxth	r2, r3
 8007948:	7b7b      	ldrb	r3, [r7, #13]
 800794a:	b21b      	sxth	r3, r3
 800794c:	4313      	orrs	r3, r2
 800794e:	b21a      	sxth	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	b21a      	sxth	r2, r3
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	b21b      	sxth	r3, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8007962:	7c3b      	ldrb	r3, [r7, #16]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	b21a      	sxth	r2, r3
 8007968:	7c7b      	ldrb	r3, [r7, #17]
 800796a:	b21b      	sxth	r3, r3
 800796c:	4313      	orrs	r3, r2
 800796e:	b21a      	sxth	r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8007974:	7cbb      	ldrb	r3, [r7, #18]
 8007976:	021b      	lsls	r3, r3, #8
 8007978:	b21a      	sxth	r2, r3
 800797a:	7cfb      	ldrb	r3, [r7, #19]
 800797c:	b21b      	sxth	r3, r3
 800797e:	4313      	orrs	r3, r2
 8007980:	b21a      	sxth	r2, r3
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8007986:	7d3b      	ldrb	r3, [r7, #20]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	b21a      	sxth	r2, r3
 800798c:	7d7b      	ldrb	r3, [r7, #21]
 800798e:	b21b      	sxth	r3, r3
 8007990:	4313      	orrs	r3, r2
 8007992:	b21a      	sxth	r2, r3
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7f8 fdf8 	bl	8000594 <__aeabi_i2d>
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	4bbd      	ldr	r3, [pc, #756]	@ (8007ca0 <MPU6050_Read_All+0x3a8>)
 80079aa:	f7f8 ff87 	bl	80008bc <__aeabi_ddiv>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7f8 fde8 	bl	8000594 <__aeabi_i2d>
 80079c4:	f04f 0200 	mov.w	r2, #0
 80079c8:	4bb5      	ldr	r3, [pc, #724]	@ (8007ca0 <MPU6050_Read_All+0x3a8>)
 80079ca:	f7f8 ff77 	bl	80008bc <__aeabi_ddiv>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f8 fdd8 	bl	8000594 <__aeabi_i2d>
 80079e4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007c88 <MPU6050_Read_All+0x390>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 ff67 	bl	80008bc <__aeabi_ddiv>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80079f8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80079fc:	ee07 3a90 	vmov	s15, r3
 8007a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a04:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8007ca4 <MPU6050_Read_All+0x3ac>
 8007a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a0c:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8007ca8 <MPU6050_Read_All+0x3b0>
 8007a10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7f8 fdb7 	bl	8000594 <__aeabi_i2d>
 8007a26:	a39a      	add	r3, pc, #616	@ (adr r3, 8007c90 <MPU6050_Read_All+0x398>)
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	f7f8 ff46 	bl	80008bc <__aeabi_ddiv>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7f8 fda7 	bl	8000594 <__aeabi_i2d>
 8007a46:	a392      	add	r3, pc, #584	@ (adr r3, 8007c90 <MPU6050_Read_All+0x398>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 ff36 	bl	80008bc <__aeabi_ddiv>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7f8 fd97 	bl	8000594 <__aeabi_i2d>
 8007a66:	a38a      	add	r3, pc, #552	@ (adr r3, 8007c90 <MPU6050_Read_All+0x398>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 ff26 	bl	80008bc <__aeabi_ddiv>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8007a7a:	f7fb f947 	bl	8002d0c <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	4b8a      	ldr	r3, [pc, #552]	@ (8007cac <MPU6050_Read_All+0x3b4>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7f8 fd74 	bl	8000574 <__aeabi_ui2d>
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	4b87      	ldr	r3, [pc, #540]	@ (8007cb0 <MPU6050_Read_All+0x3b8>)
 8007a92:	f7f8 ff13 	bl	80008bc <__aeabi_ddiv>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8007a9e:	f7fb f935 	bl	8002d0c <HAL_GetTick>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4a81      	ldr	r2, [pc, #516]	@ (8007cac <MPU6050_Read_All+0x3b4>)
 8007aa6:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ab6:	fb03 f202 	mul.w	r2, r3, r2
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007ac8:	fb01 f303 	mul.w	r3, r1, r3
 8007acc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7f8 fd60 	bl	8000594 <__aeabi_i2d>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	ec43 2b10 	vmov	d0, r2, r3
 8007adc:	f013 fd40 	bl	801b560 <sqrt>
 8007ae0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007af0:	f7f9 f822 	bl	8000b38 <__aeabi_dcmpeq>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d11f      	bne.n	8007b3a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7f8 fd47 	bl	8000594 <__aeabi_i2d>
 8007b06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b0a:	f7f8 fed7 	bl	80008bc <__aeabi_ddiv>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	ec43 2b17 	vmov	d7, r2, r3
 8007b16:	eeb0 0a47 	vmov.f32	s0, s14
 8007b1a:	eef0 0a67 	vmov.f32	s1, s15
 8007b1e:	f013 fd4b 	bl	801b5b8 <atan>
 8007b22:	ec51 0b10 	vmov	r0, r1, d0
 8007b26:	a35c      	add	r3, pc, #368	@ (adr r3, 8007c98 <MPU6050_Read_All+0x3a0>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f7f8 fd9c 	bl	8000668 <__aeabi_dmul>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8007b38:	e005      	b.n	8007b46 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8007b3a:	f04f 0200 	mov.w	r2, #0
 8007b3e:	f04f 0300 	mov.w	r3, #0
 8007b42:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b4c:	425b      	negs	r3, r3
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7f8 fd20 	bl	8000594 <__aeabi_i2d>
 8007b54:	4682      	mov	sl, r0
 8007b56:	468b      	mov	fp, r1
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7f8 fd18 	bl	8000594 <__aeabi_i2d>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	ec43 2b11 	vmov	d1, r2, r3
 8007b6c:	ec4b ab10 	vmov	d0, sl, fp
 8007b70:	f013 fc50 	bl	801b414 <atan2>
 8007b74:	ec51 0b10 	vmov	r0, r1, d0
 8007b78:	a347      	add	r3, pc, #284	@ (adr r3, 8007c98 <MPU6050_Read_All+0x3a0>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fd73 	bl	8000668 <__aeabi_dmul>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	4b49      	ldr	r3, [pc, #292]	@ (8007cb4 <MPU6050_Read_All+0x3bc>)
 8007b90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b94:	f7f8 ffda 	bl	8000b4c <__aeabi_dcmplt>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <MPU6050_Read_All+0x2bc>
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	4b43      	ldr	r3, [pc, #268]	@ (8007cb8 <MPU6050_Read_All+0x3c0>)
 8007baa:	f7f8 ffed 	bl	8000b88 <__aeabi_dcmpgt>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d114      	bne.n	8007bde <MPU6050_Read_All+0x2e6>
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8007cb8 <MPU6050_Read_All+0x3c0>)
 8007bba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bbe:	f7f8 ffe3 	bl	8000b88 <__aeabi_dcmpgt>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <MPU6050_Read_All+0x2fc>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	4b38      	ldr	r3, [pc, #224]	@ (8007cb4 <MPU6050_Read_All+0x3bc>)
 8007bd4:	f7f8 ffba 	bl	8000b4c <__aeabi_dcmplt>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8007bde:	4937      	ldr	r1, [pc, #220]	@ (8007cbc <MPU6050_Read_All+0x3c4>)
 8007be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007be4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bee:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8007bf2:	e014      	b.n	8007c1e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8007bfa:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007bfe:	eeb0 1a47 	vmov.f32	s2, s14
 8007c02:	eef0 1a67 	vmov.f32	s3, s15
 8007c06:	ed97 0b06 	vldr	d0, [r7, #24]
 8007c0a:	482c      	ldr	r0, [pc, #176]	@ (8007cbc <MPU6050_Read_All+0x3c4>)
 8007c0c:	f000 f85a 	bl	8007cc4 <Kalman_getAngle>
 8007c10:	eeb0 7a40 	vmov.f32	s14, s0
 8007c14:	eef0 7a60 	vmov.f32	s15, s1
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007c24:	4690      	mov	r8, r2
 8007c26:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	4b22      	ldr	r3, [pc, #136]	@ (8007cb8 <MPU6050_Read_All+0x3c0>)
 8007c30:	4640      	mov	r0, r8
 8007c32:	4649      	mov	r1, r9
 8007c34:	f7f8 ffa8 	bl	8000b88 <__aeabi_dcmpgt>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007c44:	4614      	mov	r4, r2
 8007c46:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8007c56:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8007c5a:	eeb0 1a47 	vmov.f32	s2, s14
 8007c5e:	eef0 1a67 	vmov.f32	s3, s15
 8007c62:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8007c66:	4816      	ldr	r0, [pc, #88]	@ (8007cc0 <MPU6050_Read_All+0x3c8>)
 8007c68:	f000 f82c 	bl	8007cc4 <Kalman_getAngle>
 8007c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8007c70:	eef0 7a60 	vmov.f32	s15, s1
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8007c7a:	bf00      	nop
 8007c7c:	3740      	adds	r7, #64	@ 0x40
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c84:	f3af 8000 	nop.w
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	40cc2900 	.word	0x40cc2900
 8007c90:	00000000 	.word	0x00000000
 8007c94:	40606000 	.word	0x40606000
 8007c98:	1a63c1f8 	.word	0x1a63c1f8
 8007c9c:	404ca5dc 	.word	0x404ca5dc
 8007ca0:	40d00000 	.word	0x40d00000
 8007ca4:	43aa0000 	.word	0x43aa0000
 8007ca8:	42121eb8 	.word	0x42121eb8
 8007cac:	20005594 	.word	0x20005594
 8007cb0:	408f4000 	.word	0x408f4000
 8007cb4:	c0568000 	.word	0xc0568000
 8007cb8:	40568000 	.word	0x40568000
 8007cbc:	20000078 	.word	0x20000078
 8007cc0:	20000030 	.word	0x20000030

08007cc4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8007cc4:	b5b0      	push	{r4, r5, r7, lr}
 8007cc6:	b096      	sub	sp, #88	@ 0x58
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	61f8      	str	r0, [r7, #28]
 8007ccc:	ed87 0b04 	vstr	d0, [r7, #16]
 8007cd0:	ed87 1b02 	vstr	d1, [r7, #8]
 8007cd4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ce2:	f7f8 fb09 	bl	80002f8 <__aeabi_dsub>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cfc:	f7f8 fcb4 	bl	8000668 <__aeabi_dmul>
 8007d00:	4602      	mov	r2, r0
 8007d02:	460b      	mov	r3, r1
 8007d04:	4620      	mov	r0, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	f7f8 faf8 	bl	80002fc <__adddf3>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	69f9      	ldr	r1, [r7, #28]
 8007d12:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d26:	f7f8 fc9f 	bl	8000668 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007d38:	f7f8 fade 	bl	80002f8 <__aeabi_dsub>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007d4a:	f7f8 fad5 	bl	80002f8 <__aeabi_dsub>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5c:	f7f8 face 	bl	80002fc <__adddf3>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d6c:	f7f8 fc7c 	bl	8000668 <__aeabi_dmul>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4620      	mov	r0, r4
 8007d76:	4629      	mov	r1, r5
 8007d78:	f7f8 fac0 	bl	80002fc <__adddf3>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	69f9      	ldr	r1, [r7, #28]
 8007d82:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d96:	f7f8 fc67 	bl	8000668 <__aeabi_dmul>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4620      	mov	r0, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	f7f8 faa9 	bl	80002f8 <__aeabi_dsub>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	69f9      	ldr	r1, [r7, #28]
 8007dac:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc0:	f7f8 fc52 	bl	8000668 <__aeabi_dmul>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4620      	mov	r0, r4
 8007dca:	4629      	mov	r1, r5
 8007dcc:	f7f8 fa94 	bl	80002f8 <__aeabi_dsub>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	69f9      	ldr	r1, [r7, #28]
 8007dd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dea:	f7f8 fc3d 	bl	8000668 <__aeabi_dmul>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 fa81 	bl	80002fc <__adddf3>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	69f9      	ldr	r1, [r7, #28]
 8007e00:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007e10:	f7f8 fa74 	bl	80002fc <__adddf3>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007e22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e26:	f7f8 fd49 	bl	80008bc <__aeabi_ddiv>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e3c:	f7f8 fd3e 	bl	80008bc <__aeabi_ddiv>
 8007e40:	4602      	mov	r2, r0
 8007e42:	460b      	mov	r3, r1
 8007e44:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e52:	f7f8 fa51 	bl	80002f8 <__aeabi_dsub>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8007e64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e6c:	f7f8 fbfc 	bl	8000668 <__aeabi_dmul>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4620      	mov	r0, r4
 8007e76:	4629      	mov	r1, r5
 8007e78:	f7f8 fa40 	bl	80002fc <__adddf3>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	69f9      	ldr	r1, [r7, #28]
 8007e82:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8007e8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007e90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e94:	f7f8 fbe8 	bl	8000668 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f7f8 fa2c 	bl	80002fc <__adddf3>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	69f9      	ldr	r1, [r7, #28]
 8007eaa:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007eb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007ebe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8007ec8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ed0:	f7f8 fbca 	bl	8000668 <__aeabi_dmul>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4620      	mov	r0, r4
 8007eda:	4629      	mov	r1, r5
 8007edc:	f7f8 fa0c 	bl	80002f8 <__aeabi_dsub>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	69f9      	ldr	r1, [r7, #28]
 8007ee6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007ef0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ef4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007ef8:	f7f8 fbb6 	bl	8000668 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f9f8 	bl	80002f8 <__aeabi_dsub>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	69f9      	ldr	r1, [r7, #28]
 8007f0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8007f18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f20:	f7f8 fba2 	bl	8000668 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	f7f8 f9e4 	bl	80002f8 <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	69f9      	ldr	r1, [r7, #28]
 8007f36:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8007f40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007f44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007f48:	f7f8 fb8e 	bl	8000668 <__aeabi_dmul>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7f8 f9d0 	bl	80002f8 <__aeabi_dsub>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	69f9      	ldr	r1, [r7, #28]
 8007f5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007f68:	ec43 2b17 	vmov	d7, r2, r3
};
 8007f6c:	eeb0 0a47 	vmov.f32	s0, s14
 8007f70:	eef0 0a67 	vmov.f32	s1, s15
 8007f74:	3758      	adds	r7, #88	@ 0x58
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007f7c <__NVIC_SetPriority>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	db0a      	blt.n	8007fa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	490c      	ldr	r1, [pc, #48]	@ (8007fc8 <__NVIC_SetPriority+0x4c>)
 8007f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9a:	0112      	lsls	r2, r2, #4
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007fa4:	e00a      	b.n	8007fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4908      	ldr	r1, [pc, #32]	@ (8007fcc <__NVIC_SetPriority+0x50>)
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	3b04      	subs	r3, #4
 8007fb4:	0112      	lsls	r2, r2, #4
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	440b      	add	r3, r1
 8007fba:	761a      	strb	r2, [r3, #24]
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	e000e100 	.word	0xe000e100
 8007fcc:	e000ed00 	.word	0xe000ed00

08007fd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <SysTick_Handler+0x1c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007fd8:	f001 fd40 	bl	8009a5c <xTaskGetSchedulerState>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d001      	beq.n	8007fe6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007fe2:	f002 fb39 	bl	800a658 <xPortSysTickHandler>
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	e000e010 	.word	0xe000e010

08007ff0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	f06f 0004 	mvn.w	r0, #4
 8007ffa:	f7ff ffbf 	bl	8007f7c <__NVIC_SetPriority>
#endif
}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
	...

08008004 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800800a:	f3ef 8305 	mrs	r3, IPSR
 800800e:	603b      	str	r3, [r7, #0]
  return(result);
 8008010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008016:	f06f 0305 	mvn.w	r3, #5
 800801a:	607b      	str	r3, [r7, #4]
 800801c:	e00c      	b.n	8008038 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800801e:	4b0a      	ldr	r3, [pc, #40]	@ (8008048 <osKernelInitialize+0x44>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d105      	bne.n	8008032 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008026:	4b08      	ldr	r3, [pc, #32]	@ (8008048 <osKernelInitialize+0x44>)
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800802c:	2300      	movs	r3, #0
 800802e:	607b      	str	r3, [r7, #4]
 8008030:	e002      	b.n	8008038 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008036:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008038:	687b      	ldr	r3, [r7, #4]
}
 800803a:	4618      	mov	r0, r3
 800803c:	370c      	adds	r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20005598 	.word	0x20005598

0800804c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008052:	f3ef 8305 	mrs	r3, IPSR
 8008056:	603b      	str	r3, [r7, #0]
  return(result);
 8008058:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <osKernelStart+0x1a>
    stat = osErrorISR;
 800805e:	f06f 0305 	mvn.w	r3, #5
 8008062:	607b      	str	r3, [r7, #4]
 8008064:	e010      	b.n	8008088 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008066:	4b0b      	ldr	r3, [pc, #44]	@ (8008094 <osKernelStart+0x48>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d109      	bne.n	8008082 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800806e:	f7ff ffbf 	bl	8007ff0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008072:	4b08      	ldr	r3, [pc, #32]	@ (8008094 <osKernelStart+0x48>)
 8008074:	2202      	movs	r2, #2
 8008076:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008078:	f001 f87a 	bl	8009170 <vTaskStartScheduler>
      stat = osOK;
 800807c:	2300      	movs	r3, #0
 800807e:	607b      	str	r3, [r7, #4]
 8008080:	e002      	b.n	8008088 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008086:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008088:	687b      	ldr	r3, [r7, #4]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20005598 	.word	0x20005598

08008098 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b08e      	sub	sp, #56	@ 0x38
 800809c:	af04      	add	r7, sp, #16
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080a8:	f3ef 8305 	mrs	r3, IPSR
 80080ac:	617b      	str	r3, [r7, #20]
  return(result);
 80080ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d17e      	bne.n	80081b2 <osThreadNew+0x11a>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d07b      	beq.n	80081b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080ba:	2380      	movs	r3, #128	@ 0x80
 80080bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080be:	2318      	movs	r3, #24
 80080c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080c2:	2300      	movs	r3, #0
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80080c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d045      	beq.n	800815e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <osThreadNew+0x48>
        name = attr->name;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d002      	beq.n	80080ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <osThreadNew+0x6e>
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b38      	cmp	r3, #56	@ 0x38
 80080f8:	d805      	bhi.n	8008106 <osThreadNew+0x6e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <osThreadNew+0x72>
        return (NULL);
 8008106:	2300      	movs	r3, #0
 8008108:	e054      	b.n	80081b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	089b      	lsrs	r3, r3, #2
 8008118:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00e      	beq.n	8008140 <osThreadNew+0xa8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	2b5b      	cmp	r3, #91	@ 0x5b
 8008128:	d90a      	bls.n	8008140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800812e:	2b00      	cmp	r3, #0
 8008130:	d006      	beq.n	8008140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <osThreadNew+0xa8>
        mem = 1;
 800813a:	2301      	movs	r3, #1
 800813c:	61bb      	str	r3, [r7, #24]
 800813e:	e010      	b.n	8008162 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10c      	bne.n	8008162 <osThreadNew+0xca>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d108      	bne.n	8008162 <osThreadNew+0xca>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <osThreadNew+0xca>
          mem = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	61bb      	str	r3, [r7, #24]
 800815c:	e001      	b.n	8008162 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d110      	bne.n	800818a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008170:	9202      	str	r2, [sp, #8]
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6a3a      	ldr	r2, [r7, #32]
 800817c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fe1a 	bl	8008db8 <xTaskCreateStatic>
 8008184:	4603      	mov	r3, r0
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	e013      	b.n	80081b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d110      	bne.n	80081b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	b29a      	uxth	r2, r3
 8008194:	f107 0310 	add.w	r3, r7, #16
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fe68 	bl	8008e78 <xTaskCreate>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d001      	beq.n	80081b2 <osThreadNew+0x11a>
            hTask = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081b2:	693b      	ldr	r3, [r7, #16]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3728      	adds	r7, #40	@ 0x28
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081c4:	f3ef 8305 	mrs	r3, IPSR
 80081c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80081ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <osDelay+0x1c>
    stat = osErrorISR;
 80081d0:	f06f 0305 	mvn.w	r3, #5
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	e007      	b.n	80081e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80081d8:	2300      	movs	r3, #0
 80081da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 ff8e 	bl	8009104 <vTaskDelay>
    }
  }

  return (stat);
 80081e8:	68fb      	ldr	r3, [r7, #12]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
	...

080081f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4a07      	ldr	r2, [pc, #28]	@ (8008220 <vApplicationGetIdleTaskMemory+0x2c>)
 8008204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	4a06      	ldr	r2, [pc, #24]	@ (8008224 <vApplicationGetIdleTaskMemory+0x30>)
 800820a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2280      	movs	r2, #128	@ 0x80
 8008210:	601a      	str	r2, [r3, #0]
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	2000559c 	.word	0x2000559c
 8008224:	200055f8 	.word	0x200055f8

08008228 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4a07      	ldr	r2, [pc, #28]	@ (8008254 <vApplicationGetTimerTaskMemory+0x2c>)
 8008238:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	4a06      	ldr	r2, [pc, #24]	@ (8008258 <vApplicationGetTimerTaskMemory+0x30>)
 800823e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008246:	601a      	str	r2, [r3, #0]
}
 8008248:	bf00      	nop
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	200057f8 	.word	0x200057f8
 8008258:	20005854 	.word	0x20005854

0800825c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f103 0208 	add.w	r2, r3, #8
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008274:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f103 0208 	add.w	r2, r3, #8
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f103 0208 	add.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082b6:	b480      	push	{r7}
 80082b8:	b085      	sub	sp, #20
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008314:	d103      	bne.n	800831e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	e00c      	b.n	8008338 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3308      	adds	r3, #8
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e002      	b.n	800832c <vListInsert+0x2e>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	429a      	cmp	r2, r3
 8008336:	d2f6      	bcs.n	8008326 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	601a      	str	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6892      	ldr	r2, [r2, #8]
 8008386:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6852      	ldr	r2, [r2, #4]
 8008390:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	429a      	cmp	r2, r3
 800839a:	d103      	bne.n	80083a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689a      	ldr	r2, [r3, #8]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	1e5a      	subs	r2, r3, #1
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d10b      	bne.n	80083f0 <xQueueGenericReset+0x2c>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	60bb      	str	r3, [r7, #8]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083f0:	f002 f8a2 	bl	800a538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fc:	68f9      	ldr	r1, [r7, #12]
 80083fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008400:	fb01 f303 	mul.w	r3, r1, r3
 8008404:	441a      	add	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008420:	3b01      	subs	r3, #1
 8008422:	68f9      	ldr	r1, [r7, #12]
 8008424:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008426:	fb01 f303 	mul.w	r3, r1, r3
 800842a:	441a      	add	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	22ff      	movs	r2, #255	@ 0xff
 8008434:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	22ff      	movs	r2, #255	@ 0xff
 800843c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d114      	bne.n	8008470 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d01a      	beq.n	8008484 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3310      	adds	r3, #16
 8008452:	4618      	mov	r0, r3
 8008454:	f001 f91a 	bl	800968c <xTaskRemoveFromEventList>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d012      	beq.n	8008484 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800845e:	4b0d      	ldr	r3, [pc, #52]	@ (8008494 <xQueueGenericReset+0xd0>)
 8008460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	e009      	b.n	8008484 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3310      	adds	r3, #16
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff fef1 	bl	800825c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3324      	adds	r3, #36	@ 0x24
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff feec 	bl	800825c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008484:	f002 f88a 	bl	800a59c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008488:	2301      	movs	r3, #1
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	e000ed04 	.word	0xe000ed04

08008498 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08e      	sub	sp, #56	@ 0x38
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10b      	bne.n	80084c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084be:	bf00      	nop
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <xQueueGenericCreateStatic+0x56>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <xQueueGenericCreateStatic+0x5a>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <xQueueGenericCreateStatic+0x5c>
 80084f2:	2300      	movs	r3, #0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10b      	bne.n	8008510 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	623b      	str	r3, [r7, #32]
}
 800850a:	bf00      	nop
 800850c:	bf00      	nop
 800850e:	e7fd      	b.n	800850c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <xQueueGenericCreateStatic+0x84>
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <xQueueGenericCreateStatic+0x88>
 800851c:	2301      	movs	r3, #1
 800851e:	e000      	b.n	8008522 <xQueueGenericCreateStatic+0x8a>
 8008520:	2300      	movs	r3, #0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10b      	bne.n	800853e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	61fb      	str	r3, [r7, #28]
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	e7fd      	b.n	800853a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800853e:	2350      	movs	r3, #80	@ 0x50
 8008540:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b50      	cmp	r3, #80	@ 0x50
 8008546:	d00b      	beq.n	8008560 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	61bb      	str	r3, [r7, #24]
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	e7fd      	b.n	800855c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008560:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00d      	beq.n	8008588 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008574:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4613      	mov	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f805 	bl	8008592 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800858a:	4618      	mov	r0, r3
 800858c:	3730      	adds	r7, #48	@ 0x30
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	60f8      	str	r0, [r7, #12]
 800859a:	60b9      	str	r1, [r7, #8]
 800859c:	607a      	str	r2, [r7, #4]
 800859e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e002      	b.n	80085b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085c0:	2101      	movs	r1, #1
 80085c2:	69b8      	ldr	r0, [r7, #24]
 80085c4:	f7ff fefe 	bl	80083c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085d0:	bf00      	nop
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08e      	sub	sp, #56	@ 0x38
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085e6:	2300      	movs	r3, #0
 80085e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10b      	bne.n	800860c <xQueueGenericSend+0x34>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008606:	bf00      	nop
 8008608:	bf00      	nop
 800860a:	e7fd      	b.n	8008608 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <xQueueGenericSend+0x42>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	2b00      	cmp	r3, #0
 8008618:	d101      	bne.n	800861e <xQueueGenericSend+0x46>
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <xQueueGenericSend+0x48>
 800861e:	2300      	movs	r3, #0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10b      	bne.n	800863c <xQueueGenericSend+0x64>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b02      	cmp	r3, #2
 8008640:	d103      	bne.n	800864a <xQueueGenericSend+0x72>
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <xQueueGenericSend+0x76>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <xQueueGenericSend+0x78>
 800864e:	2300      	movs	r3, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <xQueueGenericSend+0x94>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	623b      	str	r3, [r7, #32]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800866c:	f001 f9f6 	bl	8009a5c <xTaskGetSchedulerState>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <xQueueGenericSend+0xa4>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <xQueueGenericSend+0xa8>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <xQueueGenericSend+0xaa>
 8008680:	2300      	movs	r3, #0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10b      	bne.n	800869e <xQueueGenericSend+0xc6>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	61fb      	str	r3, [r7, #28]
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	e7fd      	b.n	800869a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800869e:	f001 ff4b 	bl	800a538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d302      	bcc.n	80086b4 <xQueueGenericSend+0xdc>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d129      	bne.n	8008708 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	68b9      	ldr	r1, [r7, #8]
 80086b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ba:	f000 fa0f 	bl	8008adc <prvCopyDataToQueue>
 80086be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	3324      	adds	r3, #36	@ 0x24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 ffdd 	bl	800968c <xTaskRemoveFromEventList>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d013      	beq.n	8008700 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086d8:	4b3f      	ldr	r3, [pc, #252]	@ (80087d8 <xQueueGenericSend+0x200>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	e00a      	b.n	8008700 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d007      	beq.n	8008700 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086f0:	4b39      	ldr	r3, [pc, #228]	@ (80087d8 <xQueueGenericSend+0x200>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008700:	f001 ff4c 	bl	800a59c <vPortExitCritical>
				return pdPASS;
 8008704:	2301      	movs	r3, #1
 8008706:	e063      	b.n	80087d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800870e:	f001 ff45 	bl	800a59c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008712:	2300      	movs	r3, #0
 8008714:	e05c      	b.n	80087d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800871c:	f107 0314 	add.w	r3, r7, #20
 8008720:	4618      	mov	r0, r3
 8008722:	f001 f83f 	bl	80097a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008726:	2301      	movs	r3, #1
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800872a:	f001 ff37 	bl	800a59c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800872e:	f000 fd87 	bl	8009240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008732:	f001 ff01 	bl	800a538 <vPortEnterCritical>
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800873c:	b25b      	sxtb	r3, r3
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008742:	d103      	bne.n	800874c <xQueueGenericSend+0x174>
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800874c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008752:	b25b      	sxtb	r3, r3
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008758:	d103      	bne.n	8008762 <xQueueGenericSend+0x18a>
 800875a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008762:	f001 ff1b 	bl	800a59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008766:	1d3a      	adds	r2, r7, #4
 8008768:	f107 0314 	add.w	r3, r7, #20
 800876c:	4611      	mov	r1, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f001 f82e 	bl	80097d0 <xTaskCheckForTimeOut>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d124      	bne.n	80087c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800877a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800877c:	f000 faa6 	bl	8008ccc <prvIsQueueFull>
 8008780:	4603      	mov	r3, r0
 8008782:	2b00      	cmp	r3, #0
 8008784:	d018      	beq.n	80087b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	3310      	adds	r3, #16
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f000 ff2a 	bl	80095e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008796:	f000 fa31 	bl	8008bfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800879a:	f000 fd5f 	bl	800925c <xTaskResumeAll>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f47f af7c 	bne.w	800869e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80087a6:	4b0c      	ldr	r3, [pc, #48]	@ (80087d8 <xQueueGenericSend+0x200>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	e772      	b.n	800869e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ba:	f000 fa1f 	bl	8008bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087be:	f000 fd4d 	bl	800925c <xTaskResumeAll>
 80087c2:	e76c      	b.n	800869e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087c6:	f000 fa19 	bl	8008bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ca:	f000 fd47 	bl	800925c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3738      	adds	r7, #56	@ 0x38
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b090      	sub	sp, #64	@ 0x40
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80087ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10b      	bne.n	800880c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008806:	bf00      	nop
 8008808:	bf00      	nop
 800880a:	e7fd      	b.n	8008808 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <xQueueGenericSendFromISR+0x3e>
 8008812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <xQueueGenericSendFromISR+0x42>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <xQueueGenericSendFromISR+0x44>
 800881e:	2300      	movs	r3, #0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10b      	bne.n	800883c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008828:	f383 8811 	msr	BASEPRI, r3
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	f3bf 8f4f 	dsb	sy
 8008834:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	e7fd      	b.n	8008838 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d103      	bne.n	800884a <xQueueGenericSendFromISR+0x6e>
 8008842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008846:	2b01      	cmp	r3, #1
 8008848:	d101      	bne.n	800884e <xQueueGenericSendFromISR+0x72>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <xQueueGenericSendFromISR+0x74>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	623b      	str	r3, [r7, #32]
}
 8008866:	bf00      	nop
 8008868:	bf00      	nop
 800886a:	e7fd      	b.n	8008868 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800886c:	f001 ff44 	bl	800a6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008870:	f3ef 8211 	mrs	r2, BASEPRI
 8008874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	61fa      	str	r2, [r7, #28]
 8008886:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008888:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008894:	429a      	cmp	r2, r3
 8008896:	d302      	bcc.n	800889e <xQueueGenericSendFromISR+0xc2>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d12f      	bne.n	80088fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800889e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80088b4:	f000 f912 	bl	8008adc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088c0:	d112      	bne.n	80088e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d016      	beq.n	80088f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088cc:	3324      	adds	r3, #36	@ 0x24
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fedc 	bl	800968c <xTaskRemoveFromEventList>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00e      	beq.n	80088f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00b      	beq.n	80088f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	e007      	b.n	80088f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80088ec:	3301      	adds	r3, #1
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	b25a      	sxtb	r2, r3
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80088f8:	2301      	movs	r3, #1
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80088fc:	e001      	b.n	8008902 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008904:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800890c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800890e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008910:	4618      	mov	r0, r3
 8008912:	3740      	adds	r7, #64	@ 0x40
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08c      	sub	sp, #48	@ 0x30
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008924:	2300      	movs	r3, #0
 8008926:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <xQueueReceive+0x32>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	623b      	str	r3, [r7, #32]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d103      	bne.n	8008958 <xQueueReceive+0x40>
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <xQueueReceive+0x44>
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <xQueueReceive+0x46>
 800895c:	2300      	movs	r3, #0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10b      	bne.n	800897a <xQueueReceive+0x62>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	61fb      	str	r3, [r7, #28]
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	e7fd      	b.n	8008976 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800897a:	f001 f86f 	bl	8009a5c <xTaskGetSchedulerState>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d102      	bne.n	800898a <xQueueReceive+0x72>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <xQueueReceive+0x76>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <xQueueReceive+0x78>
 800898e:	2300      	movs	r3, #0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10b      	bne.n	80089ac <xQueueReceive+0x94>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	61bb      	str	r3, [r7, #24]
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	e7fd      	b.n	80089a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ac:	f001 fdc4 	bl	800a538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01f      	beq.n	80089fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c0:	f000 f8f6 	bl	8008bb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	1e5a      	subs	r2, r3, #1
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00f      	beq.n	80089f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d6:	3310      	adds	r3, #16
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fe57 	bl	800968c <xTaskRemoveFromEventList>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089e4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ad8 <xQueueReceive+0x1c0>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089f4:	f001 fdd2 	bl	800a59c <vPortExitCritical>
				return pdPASS;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e069      	b.n	8008ad0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a02:	f001 fdcb 	bl	800a59c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e062      	b.n	8008ad0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a10:	f107 0310 	add.w	r3, r7, #16
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fec5 	bl	80097a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a1e:	f001 fdbd 	bl	800a59c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a22:	f000 fc0d 	bl	8009240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a26:	f001 fd87 	bl	800a538 <vPortEnterCritical>
 8008a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a36:	d103      	bne.n	8008a40 <xQueueReceive+0x128>
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a4c:	d103      	bne.n	8008a56 <xQueueReceive+0x13e>
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a56:	f001 fda1 	bl	800a59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a5a:	1d3a      	adds	r2, r7, #4
 8008a5c:	f107 0310 	add.w	r3, r7, #16
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 feb4 	bl	80097d0 <xTaskCheckForTimeOut>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d123      	bne.n	8008ab6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a70:	f000 f916 	bl	8008ca0 <prvIsQueueEmpty>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d017      	beq.n	8008aaa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	3324      	adds	r3, #36	@ 0x24
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fdb0 	bl	80095e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a8a:	f000 f8b7 	bl	8008bfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a8e:	f000 fbe5 	bl	800925c <xTaskResumeAll>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d189      	bne.n	80089ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008a98:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad8 <xQueueReceive+0x1c0>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	e780      	b.n	80089ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aac:	f000 f8a6 	bl	8008bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ab0:	f000 fbd4 	bl	800925c <xTaskResumeAll>
 8008ab4:	e77a      	b.n	80089ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ab8:	f000 f8a0 	bl	8008bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008abc:	f000 fbce 	bl	800925c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ac2:	f000 f8ed 	bl	8008ca0 <prvIsQueueEmpty>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f43f af6f 	beq.w	80089ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ace:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3730      	adds	r7, #48	@ 0x30
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10d      	bne.n	8008b16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d14d      	bne.n	8008b9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 ffc6 	bl	8009a98 <xTaskPriorityDisinherit>
 8008b0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	609a      	str	r2, [r3, #8]
 8008b14:	e043      	b.n	8008b9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d119      	bne.n	8008b50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6858      	ldr	r0, [r3, #4]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b24:	461a      	mov	r2, r3
 8008b26:	68b9      	ldr	r1, [r7, #8]
 8008b28:	f011 fe33 	bl	801a792 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b34:	441a      	add	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d32b      	bcc.n	8008b9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	e026      	b.n	8008b9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	68d8      	ldr	r0, [r3, #12]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b58:	461a      	mov	r2, r3
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	f011 fe19 	bl	801a792 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b68:	425b      	negs	r3, r3
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d207      	bcs.n	8008b8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b84:	425b      	negs	r3, r3
 8008b86:	441a      	add	r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d105      	bne.n	8008b9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008ba6:	697b      	ldr	r3, [r7, #20]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d018      	beq.n	8008bf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bca:	441a      	add	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d303      	bcc.n	8008be4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68d9      	ldr	r1, [r3, #12]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bec:	461a      	mov	r2, r3
 8008bee:	6838      	ldr	r0, [r7, #0]
 8008bf0:	f011 fdcf 	bl	801a792 <memcpy>
	}
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c04:	f001 fc98 	bl	800a538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c10:	e011      	b.n	8008c36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d012      	beq.n	8008c40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	3324      	adds	r3, #36	@ 0x24
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fd34 	bl	800968c <xTaskRemoveFromEventList>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c2a:	f000 fe35 	bl	8009898 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	dce9      	bgt.n	8008c12 <prvUnlockQueue+0x16>
 8008c3e:	e000      	b.n	8008c42 <prvUnlockQueue+0x46>
					break;
 8008c40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	22ff      	movs	r2, #255	@ 0xff
 8008c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008c4a:	f001 fca7 	bl	800a59c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c4e:	f001 fc73 	bl	800a538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c5a:	e011      	b.n	8008c80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d012      	beq.n	8008c8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3310      	adds	r3, #16
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fd0f 	bl	800968c <xTaskRemoveFromEventList>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d001      	beq.n	8008c78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c74:	f000 fe10 	bl	8009898 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dce9      	bgt.n	8008c5c <prvUnlockQueue+0x60>
 8008c88:	e000      	b.n	8008c8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	22ff      	movs	r2, #255	@ 0xff
 8008c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008c94:	f001 fc82 	bl	800a59c <vPortExitCritical>
}
 8008c98:	bf00      	nop
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ca8:	f001 fc46 	bl	800a538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	e001      	b.n	8008cbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cbe:	f001 fc6d 	bl	800a59c <vPortExitCritical>

	return xReturn;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cd4:	f001 fc30 	bl	800a538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d102      	bne.n	8008cea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e001      	b.n	8008cee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cee:	f001 fc55 	bl	800a59c <vPortExitCritical>

	return xReturn;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	e014      	b.n	8008d36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8008d4c <vQueueAddToRegistry+0x50>)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10b      	bne.n	8008d30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d18:	490c      	ldr	r1, [pc, #48]	@ (8008d4c <vQueueAddToRegistry+0x50>)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d22:	4a0a      	ldr	r2, [pc, #40]	@ (8008d4c <vQueueAddToRegistry+0x50>)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	00db      	lsls	r3, r3, #3
 8008d28:	4413      	add	r3, r2
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d2e:	e006      	b.n	8008d3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3301      	adds	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b07      	cmp	r3, #7
 8008d3a:	d9e7      	bls.n	8008d0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20005c54 	.word	0x20005c54

08008d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d60:	f001 fbea 	bl	800a538 <vPortEnterCritical>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d70:	d103      	bne.n	8008d7a <vQueueWaitForMessageRestricted+0x2a>
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d80:	b25b      	sxtb	r3, r3
 8008d82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d86:	d103      	bne.n	8008d90 <vQueueWaitForMessageRestricted+0x40>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d90:	f001 fc04 	bl	800a59c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	3324      	adds	r3, #36	@ 0x24
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	68b9      	ldr	r1, [r7, #8]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fc45 	bl	8009634 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008daa:	6978      	ldr	r0, [r7, #20]
 8008dac:	f7ff ff26 	bl	8008bfc <prvUnlockQueue>
	}
 8008db0:	bf00      	nop
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08e      	sub	sp, #56	@ 0x38
 8008dbc:	af04      	add	r7, sp, #16
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10b      	bne.n	8008de4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	623b      	str	r3, [r7, #32]
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	e7fd      	b.n	8008de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	61fb      	str	r3, [r7, #28]
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e02:	235c      	movs	r3, #92	@ 0x5c
 8008e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e0a:	d00b      	beq.n	8008e24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	61bb      	str	r3, [r7, #24]
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	e7fd      	b.n	8008e20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d01e      	beq.n	8008e6a <xTaskCreateStatic+0xb2>
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d01b      	beq.n	8008e6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e44:	2300      	movs	r3, #0
 8008e46:	9303      	str	r3, [sp, #12]
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	f107 0314 	add.w	r3, r7, #20
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	68b9      	ldr	r1, [r7, #8]
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 f850 	bl	8008f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e64:	f000 f8de 	bl	8009024 <prvAddNewTaskToReadyList>
 8008e68:	e001      	b.n	8008e6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e6e:	697b      	ldr	r3, [r7, #20]
	}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3728      	adds	r7, #40	@ 0x28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	@ 0x30
 8008e7c:	af04      	add	r7, sp, #16
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 fc75 	bl	800a77c <pvPortMalloc>
 8008e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00e      	beq.n	8008eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e9a:	205c      	movs	r0, #92	@ 0x5c
 8008e9c:	f001 fc6e 	bl	800a77c <pvPortMalloc>
 8008ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8008eae:	e005      	b.n	8008ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008eb0:	6978      	ldr	r0, [r7, #20]
 8008eb2:	f001 fd31 	bl	800a918 <vPortFree>
 8008eb6:	e001      	b.n	8008ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d017      	beq.n	8008ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eca:	88fa      	ldrh	r2, [r7, #6]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	9302      	str	r3, [sp, #8]
 8008ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f80e 	bl	8008f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ee6:	69f8      	ldr	r0, [r7, #28]
 8008ee8:	f000 f89c 	bl	8009024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008eec:	2301      	movs	r3, #1
 8008eee:	61bb      	str	r3, [r7, #24]
 8008ef0:	e002      	b.n	8008ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3720      	adds	r7, #32
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b088      	sub	sp, #32
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	607a      	str	r2, [r7, #4]
 8008f0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	461a      	mov	r2, r3
 8008f1a:	21a5      	movs	r1, #165	@ 0xa5
 8008f1c:	f011 fb70 	bl	801a600 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f023 0307 	bic.w	r3, r3, #7
 8008f38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	617b      	str	r3, [r7, #20]
}
 8008f56:	bf00      	nop
 8008f58:	bf00      	nop
 8008f5a:	e7fd      	b.n	8008f58 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d01f      	beq.n	8008fa2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f62:	2300      	movs	r3, #0
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	e012      	b.n	8008f8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	7819      	ldrb	r1, [r3, #0]
 8008f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	3334      	adds	r3, #52	@ 0x34
 8008f78:	460a      	mov	r2, r1
 8008f7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	2b0f      	cmp	r3, #15
 8008f92:	d9e9      	bls.n	8008f68 <prvInitialiseNewTask+0x66>
 8008f94:	e000      	b.n	8008f98 <prvInitialiseNewTask+0x96>
			{
				break;
 8008f96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fa0:	e003      	b.n	8008faa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fac:	2b37      	cmp	r3, #55	@ 0x37
 8008fae:	d901      	bls.n	8008fb4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fb0:	2337      	movs	r3, #55	@ 0x37
 8008fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	3304      	adds	r3, #4
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff f966 	bl	800829c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	3318      	adds	r3, #24
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff f961 	bl	800829c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	68f9      	ldr	r1, [r7, #12]
 8009002:	69b8      	ldr	r0, [r7, #24]
 8009004:	f001 f966 	bl	800a2d4 <pxPortInitialiseStack>
 8009008:	4602      	mov	r2, r0
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800900e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009018:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800901a:	bf00      	nop
 800901c:	3720      	adds	r7, #32
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800902c:	f001 fa84 	bl	800a538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009030:	4b2d      	ldr	r3, [pc, #180]	@ (80090e8 <prvAddNewTaskToReadyList+0xc4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	4a2c      	ldr	r2, [pc, #176]	@ (80090e8 <prvAddNewTaskToReadyList+0xc4>)
 8009038:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800903a:	4b2c      	ldr	r3, [pc, #176]	@ (80090ec <prvAddNewTaskToReadyList+0xc8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d109      	bne.n	8009056 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009042:	4a2a      	ldr	r2, [pc, #168]	@ (80090ec <prvAddNewTaskToReadyList+0xc8>)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009048:	4b27      	ldr	r3, [pc, #156]	@ (80090e8 <prvAddNewTaskToReadyList+0xc4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d110      	bne.n	8009072 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009050:	f000 fc46 	bl	80098e0 <prvInitialiseTaskLists>
 8009054:	e00d      	b.n	8009072 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009056:	4b26      	ldr	r3, [pc, #152]	@ (80090f0 <prvAddNewTaskToReadyList+0xcc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800905e:	4b23      	ldr	r3, [pc, #140]	@ (80090ec <prvAddNewTaskToReadyList+0xc8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009068:	429a      	cmp	r2, r3
 800906a:	d802      	bhi.n	8009072 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800906c:	4a1f      	ldr	r2, [pc, #124]	@ (80090ec <prvAddNewTaskToReadyList+0xc8>)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009072:	4b20      	ldr	r3, [pc, #128]	@ (80090f4 <prvAddNewTaskToReadyList+0xd0>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	4a1e      	ldr	r2, [pc, #120]	@ (80090f4 <prvAddNewTaskToReadyList+0xd0>)
 800907a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800907c:	4b1d      	ldr	r3, [pc, #116]	@ (80090f4 <prvAddNewTaskToReadyList+0xd0>)
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009088:	4b1b      	ldr	r3, [pc, #108]	@ (80090f8 <prvAddNewTaskToReadyList+0xd4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d903      	bls.n	8009098 <prvAddNewTaskToReadyList+0x74>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009094:	4a18      	ldr	r2, [pc, #96]	@ (80090f8 <prvAddNewTaskToReadyList+0xd4>)
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4a15      	ldr	r2, [pc, #84]	@ (80090fc <prvAddNewTaskToReadyList+0xd8>)
 80090a6:	441a      	add	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f7ff f901 	bl	80082b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090b4:	f001 fa72 	bl	800a59c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090b8:	4b0d      	ldr	r3, [pc, #52]	@ (80090f0 <prvAddNewTaskToReadyList+0xcc>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00e      	beq.n	80090de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090c0:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <prvAddNewTaskToReadyList+0xc8>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d207      	bcs.n	80090de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009100 <prvAddNewTaskToReadyList+0xdc>)
 80090d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	20006168 	.word	0x20006168
 80090ec:	20005c94 	.word	0x20005c94
 80090f0:	20006174 	.word	0x20006174
 80090f4:	20006184 	.word	0x20006184
 80090f8:	20006170 	.word	0x20006170
 80090fc:	20005c98 	.word	0x20005c98
 8009100:	e000ed04 	.word	0xe000ed04

08009104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d018      	beq.n	8009148 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009116:	4b14      	ldr	r3, [pc, #80]	@ (8009168 <vTaskDelay+0x64>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00b      	beq.n	8009136 <vTaskDelay+0x32>
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	60bb      	str	r3, [r7, #8]
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	e7fd      	b.n	8009132 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009136:	f000 f883 	bl	8009240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800913a:	2100      	movs	r1, #0
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fd1b 	bl	8009b78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009142:	f000 f88b 	bl	800925c <xTaskResumeAll>
 8009146:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d107      	bne.n	800915e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800914e:	4b07      	ldr	r3, [pc, #28]	@ (800916c <vTaskDelay+0x68>)
 8009150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800915e:	bf00      	nop
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20006190 	.word	0x20006190
 800916c:	e000ed04 	.word	0xe000ed04

08009170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	@ 0x28
 8009174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800917a:	2300      	movs	r3, #0
 800917c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800917e:	463a      	mov	r2, r7
 8009180:	1d39      	adds	r1, r7, #4
 8009182:	f107 0308 	add.w	r3, r7, #8
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff f834 	bl	80081f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	9202      	str	r2, [sp, #8]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	2300      	movs	r3, #0
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	2300      	movs	r3, #0
 800919c:	460a      	mov	r2, r1
 800919e:	4922      	ldr	r1, [pc, #136]	@ (8009228 <vTaskStartScheduler+0xb8>)
 80091a0:	4822      	ldr	r0, [pc, #136]	@ (800922c <vTaskStartScheduler+0xbc>)
 80091a2:	f7ff fe09 	bl	8008db8 <xTaskCreateStatic>
 80091a6:	4603      	mov	r3, r0
 80091a8:	4a21      	ldr	r2, [pc, #132]	@ (8009230 <vTaskStartScheduler+0xc0>)
 80091aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091ac:	4b20      	ldr	r3, [pc, #128]	@ (8009230 <vTaskStartScheduler+0xc0>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091b4:	2301      	movs	r3, #1
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	e001      	b.n	80091be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d102      	bne.n	80091ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80091c4:	f000 fd2c 	bl	8009c20 <xTimerCreateTimerTask>
 80091c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d116      	bne.n	80091fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
}
 80091e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091e4:	4b13      	ldr	r3, [pc, #76]	@ (8009234 <vTaskStartScheduler+0xc4>)
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091ec:	4b12      	ldr	r3, [pc, #72]	@ (8009238 <vTaskStartScheduler+0xc8>)
 80091ee:	2201      	movs	r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091f2:	4b12      	ldr	r3, [pc, #72]	@ (800923c <vTaskStartScheduler+0xcc>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091f8:	f001 f8fa 	bl	800a3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091fc:	e00f      	b.n	800921e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009204:	d10b      	bne.n	800921e <vTaskStartScheduler+0xae>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60fb      	str	r3, [r7, #12]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <vTaskStartScheduler+0xaa>
}
 800921e:	bf00      	nop
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	0801cb58 	.word	0x0801cb58
 800922c:	080098b1 	.word	0x080098b1
 8009230:	2000618c 	.word	0x2000618c
 8009234:	20006188 	.word	0x20006188
 8009238:	20006174 	.word	0x20006174
 800923c:	2000616c 	.word	0x2000616c

08009240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009244:	4b04      	ldr	r3, [pc, #16]	@ (8009258 <vTaskSuspendAll+0x18>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3301      	adds	r3, #1
 800924a:	4a03      	ldr	r2, [pc, #12]	@ (8009258 <vTaskSuspendAll+0x18>)
 800924c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800924e:	bf00      	nop
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	20006190 	.word	0x20006190

0800925c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009262:	2300      	movs	r3, #0
 8009264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009266:	2300      	movs	r3, #0
 8009268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800926a:	4b42      	ldr	r3, [pc, #264]	@ (8009374 <xTaskResumeAll+0x118>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10b      	bne.n	800928a <xTaskResumeAll+0x2e>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	603b      	str	r3, [r7, #0]
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	e7fd      	b.n	8009286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800928a:	f001 f955 	bl	800a538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800928e:	4b39      	ldr	r3, [pc, #228]	@ (8009374 <xTaskResumeAll+0x118>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3b01      	subs	r3, #1
 8009294:	4a37      	ldr	r2, [pc, #220]	@ (8009374 <xTaskResumeAll+0x118>)
 8009296:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009298:	4b36      	ldr	r3, [pc, #216]	@ (8009374 <xTaskResumeAll+0x118>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d162      	bne.n	8009366 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092a0:	4b35      	ldr	r3, [pc, #212]	@ (8009378 <xTaskResumeAll+0x11c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d05e      	beq.n	8009366 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092a8:	e02f      	b.n	800930a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092aa:	4b34      	ldr	r3, [pc, #208]	@ (800937c <xTaskResumeAll+0x120>)
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3318      	adds	r3, #24
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff f85a 	bl	8008370 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3304      	adds	r3, #4
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff f855 	bl	8008370 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ca:	4b2d      	ldr	r3, [pc, #180]	@ (8009380 <xTaskResumeAll+0x124>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d903      	bls.n	80092da <xTaskResumeAll+0x7e>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009380 <xTaskResumeAll+0x124>)
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4a27      	ldr	r2, [pc, #156]	@ (8009384 <xTaskResumeAll+0x128>)
 80092e8:	441a      	add	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	3304      	adds	r3, #4
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f7fe ffe0 	bl	80082b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092fa:	4b23      	ldr	r3, [pc, #140]	@ (8009388 <xTaskResumeAll+0x12c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009300:	429a      	cmp	r2, r3
 8009302:	d302      	bcc.n	800930a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009304:	4b21      	ldr	r3, [pc, #132]	@ (800938c <xTaskResumeAll+0x130>)
 8009306:	2201      	movs	r2, #1
 8009308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800930a:	4b1c      	ldr	r3, [pc, #112]	@ (800937c <xTaskResumeAll+0x120>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1cb      	bne.n	80092aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009318:	f000 fb80 	bl	8009a1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800931c:	4b1c      	ldr	r3, [pc, #112]	@ (8009390 <xTaskResumeAll+0x134>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d010      	beq.n	800934a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009328:	f000 f846 	bl	80093b8 <xTaskIncrementTick>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d002      	beq.n	8009338 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009332:	4b16      	ldr	r3, [pc, #88]	@ (800938c <xTaskResumeAll+0x130>)
 8009334:	2201      	movs	r2, #1
 8009336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3b01      	subs	r3, #1
 800933c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1f1      	bne.n	8009328 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009344:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <xTaskResumeAll+0x134>)
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800934a:	4b10      	ldr	r3, [pc, #64]	@ (800938c <xTaskResumeAll+0x130>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d009      	beq.n	8009366 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009356:	4b0f      	ldr	r3, [pc, #60]	@ (8009394 <xTaskResumeAll+0x138>)
 8009358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009366:	f001 f919 	bl	800a59c <vPortExitCritical>

	return xAlreadyYielded;
 800936a:	68bb      	ldr	r3, [r7, #8]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20006190 	.word	0x20006190
 8009378:	20006168 	.word	0x20006168
 800937c:	20006128 	.word	0x20006128
 8009380:	20006170 	.word	0x20006170
 8009384:	20005c98 	.word	0x20005c98
 8009388:	20005c94 	.word	0x20005c94
 800938c:	2000617c 	.word	0x2000617c
 8009390:	20006178 	.word	0x20006178
 8009394:	e000ed04 	.word	0xe000ed04

08009398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800939e:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <xTaskGetTickCount+0x1c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093a4:	687b      	ldr	r3, [r7, #4]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	2000616c 	.word	0x2000616c

080093b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093c2:	4b4f      	ldr	r3, [pc, #316]	@ (8009500 <xTaskIncrementTick+0x148>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f040 8090 	bne.w	80094ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093cc:	4b4d      	ldr	r3, [pc, #308]	@ (8009504 <xTaskIncrementTick+0x14c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3301      	adds	r3, #1
 80093d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093d4:	4a4b      	ldr	r2, [pc, #300]	@ (8009504 <xTaskIncrementTick+0x14c>)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d121      	bne.n	8009424 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093e0:	4b49      	ldr	r3, [pc, #292]	@ (8009508 <xTaskIncrementTick+0x150>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00b      	beq.n	8009402 <xTaskIncrementTick+0x4a>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	603b      	str	r3, [r7, #0]
}
 80093fc:	bf00      	nop
 80093fe:	bf00      	nop
 8009400:	e7fd      	b.n	80093fe <xTaskIncrementTick+0x46>
 8009402:	4b41      	ldr	r3, [pc, #260]	@ (8009508 <xTaskIncrementTick+0x150>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	4b40      	ldr	r3, [pc, #256]	@ (800950c <xTaskIncrementTick+0x154>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a3e      	ldr	r2, [pc, #248]	@ (8009508 <xTaskIncrementTick+0x150>)
 800940e:	6013      	str	r3, [r2, #0]
 8009410:	4a3e      	ldr	r2, [pc, #248]	@ (800950c <xTaskIncrementTick+0x154>)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	4b3e      	ldr	r3, [pc, #248]	@ (8009510 <xTaskIncrementTick+0x158>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	4a3c      	ldr	r2, [pc, #240]	@ (8009510 <xTaskIncrementTick+0x158>)
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	f000 fafc 	bl	8009a1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009424:	4b3b      	ldr	r3, [pc, #236]	@ (8009514 <xTaskIncrementTick+0x15c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	429a      	cmp	r2, r3
 800942c:	d349      	bcc.n	80094c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800942e:	4b36      	ldr	r3, [pc, #216]	@ (8009508 <xTaskIncrementTick+0x150>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d104      	bne.n	8009442 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009438:	4b36      	ldr	r3, [pc, #216]	@ (8009514 <xTaskIncrementTick+0x15c>)
 800943a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800943e:	601a      	str	r2, [r3, #0]
					break;
 8009440:	e03f      	b.n	80094c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009442:	4b31      	ldr	r3, [pc, #196]	@ (8009508 <xTaskIncrementTick+0x150>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d203      	bcs.n	8009462 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800945a:	4a2e      	ldr	r2, [pc, #184]	@ (8009514 <xTaskIncrementTick+0x15c>)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009460:	e02f      	b.n	80094c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	3304      	adds	r3, #4
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe ff82 	bl	8008370 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	3318      	adds	r3, #24
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe ff79 	bl	8008370 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009482:	4b25      	ldr	r3, [pc, #148]	@ (8009518 <xTaskIncrementTick+0x160>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d903      	bls.n	8009492 <xTaskIncrementTick+0xda>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	4a22      	ldr	r2, [pc, #136]	@ (8009518 <xTaskIncrementTick+0x160>)
 8009490:	6013      	str	r3, [r2, #0]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4a1f      	ldr	r2, [pc, #124]	@ (800951c <xTaskIncrementTick+0x164>)
 80094a0:	441a      	add	r2, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4619      	mov	r1, r3
 80094a8:	4610      	mov	r0, r2
 80094aa:	f7fe ff04 	bl	80082b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009520 <xTaskIncrementTick+0x168>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d3b8      	bcc.n	800942e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80094bc:	2301      	movs	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094c0:	e7b5      	b.n	800942e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094c2:	4b17      	ldr	r3, [pc, #92]	@ (8009520 <xTaskIncrementTick+0x168>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c8:	4914      	ldr	r1, [pc, #80]	@ (800951c <xTaskIncrementTick+0x164>)
 80094ca:	4613      	mov	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	440b      	add	r3, r1
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d901      	bls.n	80094de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80094da:	2301      	movs	r3, #1
 80094dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094de:	4b11      	ldr	r3, [pc, #68]	@ (8009524 <xTaskIncrementTick+0x16c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80094e6:	2301      	movs	r3, #1
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	e004      	b.n	80094f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009528 <xTaskIncrementTick+0x170>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3301      	adds	r3, #1
 80094f2:	4a0d      	ldr	r2, [pc, #52]	@ (8009528 <xTaskIncrementTick+0x170>)
 80094f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094f6:	697b      	ldr	r3, [r7, #20]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20006190 	.word	0x20006190
 8009504:	2000616c 	.word	0x2000616c
 8009508:	20006120 	.word	0x20006120
 800950c:	20006124 	.word	0x20006124
 8009510:	20006180 	.word	0x20006180
 8009514:	20006188 	.word	0x20006188
 8009518:	20006170 	.word	0x20006170
 800951c:	20005c98 	.word	0x20005c98
 8009520:	20005c94 	.word	0x20005c94
 8009524:	2000617c 	.word	0x2000617c
 8009528:	20006178 	.word	0x20006178

0800952c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009532:	4b28      	ldr	r3, [pc, #160]	@ (80095d4 <vTaskSwitchContext+0xa8>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800953a:	4b27      	ldr	r3, [pc, #156]	@ (80095d8 <vTaskSwitchContext+0xac>)
 800953c:	2201      	movs	r2, #1
 800953e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009540:	e042      	b.n	80095c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009542:	4b25      	ldr	r3, [pc, #148]	@ (80095d8 <vTaskSwitchContext+0xac>)
 8009544:	2200      	movs	r2, #0
 8009546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009548:	4b24      	ldr	r3, [pc, #144]	@ (80095dc <vTaskSwitchContext+0xb0>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	e011      	b.n	8009574 <vTaskSwitchContext+0x48>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d10b      	bne.n	800956e <vTaskSwitchContext+0x42>
	__asm volatile
 8009556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	607b      	str	r3, [r7, #4]
}
 8009568:	bf00      	nop
 800956a:	bf00      	nop
 800956c:	e7fd      	b.n	800956a <vTaskSwitchContext+0x3e>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3b01      	subs	r3, #1
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	491a      	ldr	r1, [pc, #104]	@ (80095e0 <vTaskSwitchContext+0xb4>)
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0e3      	beq.n	8009550 <vTaskSwitchContext+0x24>
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4a13      	ldr	r2, [pc, #76]	@ (80095e0 <vTaskSwitchContext+0xb4>)
 8009594:	4413      	add	r3, r2
 8009596:	60bb      	str	r3, [r7, #8]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	605a      	str	r2, [r3, #4]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	3308      	adds	r3, #8
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d104      	bne.n	80095b8 <vTaskSwitchContext+0x8c>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	605a      	str	r2, [r3, #4]
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	4a09      	ldr	r2, [pc, #36]	@ (80095e4 <vTaskSwitchContext+0xb8>)
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	4a06      	ldr	r2, [pc, #24]	@ (80095dc <vTaskSwitchContext+0xb0>)
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6013      	str	r3, [r2, #0]
}
 80095c8:	bf00      	nop
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	20006190 	.word	0x20006190
 80095d8:	2000617c 	.word	0x2000617c
 80095dc:	20006170 	.word	0x20006170
 80095e0:	20005c98 	.word	0x20005c98
 80095e4:	20005c94 	.word	0x20005c94

080095e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10b      	bne.n	8009610 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60fb      	str	r3, [r7, #12]
}
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009610:	4b07      	ldr	r3, [pc, #28]	@ (8009630 <vTaskPlaceOnEventList+0x48>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3318      	adds	r3, #24
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fe fe70 	bl	80082fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800961e:	2101      	movs	r1, #1
 8009620:	6838      	ldr	r0, [r7, #0]
 8009622:	f000 faa9 	bl	8009b78 <prvAddCurrentTaskToDelayedList>
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20005c94 	.word	0x20005c94

08009634 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10b      	bne.n	800965e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	617b      	str	r3, [r7, #20]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800965e:	4b0a      	ldr	r3, [pc, #40]	@ (8009688 <vTaskPlaceOnEventListRestricted+0x54>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3318      	adds	r3, #24
 8009664:	4619      	mov	r1, r3
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7fe fe25 	bl	80082b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009676:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	68b8      	ldr	r0, [r7, #8]
 800967c:	f000 fa7c 	bl	8009b78 <prvAddCurrentTaskToDelayedList>
	}
 8009680:	bf00      	nop
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20005c94 	.word	0x20005c94

0800968c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10b      	bne.n	80096ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60fb      	str	r3, [r7, #12]
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	e7fd      	b.n	80096b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	3318      	adds	r3, #24
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fe56 	bl	8008370 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096c4:	4b1d      	ldr	r3, [pc, #116]	@ (800973c <xTaskRemoveFromEventList+0xb0>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d11d      	bne.n	8009708 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	3304      	adds	r3, #4
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe fe4d 	bl	8008370 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096da:	4b19      	ldr	r3, [pc, #100]	@ (8009740 <xTaskRemoveFromEventList+0xb4>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d903      	bls.n	80096ea <xTaskRemoveFromEventList+0x5e>
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e6:	4a16      	ldr	r2, [pc, #88]	@ (8009740 <xTaskRemoveFromEventList+0xb4>)
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4a13      	ldr	r2, [pc, #76]	@ (8009744 <xTaskRemoveFromEventList+0xb8>)
 80096f8:	441a      	add	r2, r3
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	3304      	adds	r3, #4
 80096fe:	4619      	mov	r1, r3
 8009700:	4610      	mov	r0, r2
 8009702:	f7fe fdd8 	bl	80082b6 <vListInsertEnd>
 8009706:	e005      	b.n	8009714 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	3318      	adds	r3, #24
 800970c:	4619      	mov	r1, r3
 800970e:	480e      	ldr	r0, [pc, #56]	@ (8009748 <xTaskRemoveFromEventList+0xbc>)
 8009710:	f7fe fdd1 	bl	80082b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009718:	4b0c      	ldr	r3, [pc, #48]	@ (800974c <xTaskRemoveFromEventList+0xc0>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971e:	429a      	cmp	r2, r3
 8009720:	d905      	bls.n	800972e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009722:	2301      	movs	r3, #1
 8009724:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009726:	4b0a      	ldr	r3, [pc, #40]	@ (8009750 <xTaskRemoveFromEventList+0xc4>)
 8009728:	2201      	movs	r2, #1
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	e001      	b.n	8009732 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800972e:	2300      	movs	r3, #0
 8009730:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009732:	697b      	ldr	r3, [r7, #20]
}
 8009734:	4618      	mov	r0, r3
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20006190 	.word	0x20006190
 8009740:	20006170 	.word	0x20006170
 8009744:	20005c98 	.word	0x20005c98
 8009748:	20006128 	.word	0x20006128
 800974c:	20005c94 	.word	0x20005c94
 8009750:	2000617c 	.word	0x2000617c

08009754 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10b      	bne.n	800977a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60fb      	str	r3, [r7, #12]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800977a:	f000 fedd 	bl	800a538 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800977e:	4b07      	ldr	r3, [pc, #28]	@ (800979c <vTaskSetTimeOutState+0x48>)
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009786:	4b06      	ldr	r3, [pc, #24]	@ (80097a0 <vTaskSetTimeOutState+0x4c>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800978e:	f000 ff05 	bl	800a59c <vPortExitCritical>
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20006180 	.word	0x20006180
 80097a0:	2000616c 	.word	0x2000616c

080097a4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097ac:	4b06      	ldr	r3, [pc, #24]	@ (80097c8 <vTaskInternalSetTimeOutState+0x24>)
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097b4:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <vTaskInternalSetTimeOutState+0x28>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	605a      	str	r2, [r3, #4]
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	20006180 	.word	0x20006180
 80097cc:	2000616c 	.word	0x2000616c

080097d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10b      	bne.n	80097f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	613b      	str	r3, [r7, #16]
}
 80097f2:	bf00      	nop
 80097f4:	bf00      	nop
 80097f6:	e7fd      	b.n	80097f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	60fb      	str	r3, [r7, #12]
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009816:	f000 fe8f 	bl	800a538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800981a:	4b1d      	ldr	r3, [pc, #116]	@ (8009890 <xTaskCheckForTimeOut+0xc0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009832:	d102      	bne.n	800983a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	e023      	b.n	8009882 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b15      	ldr	r3, [pc, #84]	@ (8009894 <xTaskCheckForTimeOut+0xc4>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d007      	beq.n	8009856 <xTaskCheckForTimeOut+0x86>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	429a      	cmp	r2, r3
 800984e:	d302      	bcc.n	8009856 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009850:	2301      	movs	r3, #1
 8009852:	61fb      	str	r3, [r7, #28]
 8009854:	e015      	b.n	8009882 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	429a      	cmp	r2, r3
 800985e:	d20b      	bcs.n	8009878 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff ff99 	bl	80097a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009872:	2300      	movs	r3, #0
 8009874:	61fb      	str	r3, [r7, #28]
 8009876:	e004      	b.n	8009882 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009882:	f000 fe8b 	bl	800a59c <vPortExitCritical>

	return xReturn;
 8009886:	69fb      	ldr	r3, [r7, #28]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	2000616c 	.word	0x2000616c
 8009894:	20006180 	.word	0x20006180

08009898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800989c:	4b03      	ldr	r3, [pc, #12]	@ (80098ac <vTaskMissedYield+0x14>)
 800989e:	2201      	movs	r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
}
 80098a2:	bf00      	nop
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	2000617c 	.word	0x2000617c

080098b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098b8:	f000 f852 	bl	8009960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098bc:	4b06      	ldr	r3, [pc, #24]	@ (80098d8 <prvIdleTask+0x28>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d9f9      	bls.n	80098b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80098c4:	4b05      	ldr	r3, [pc, #20]	@ (80098dc <prvIdleTask+0x2c>)
 80098c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098d4:	e7f0      	b.n	80098b8 <prvIdleTask+0x8>
 80098d6:	bf00      	nop
 80098d8:	20005c98 	.word	0x20005c98
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098e6:	2300      	movs	r3, #0
 80098e8:	607b      	str	r3, [r7, #4]
 80098ea:	e00c      	b.n	8009906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4a12      	ldr	r2, [pc, #72]	@ (8009940 <prvInitialiseTaskLists+0x60>)
 80098f8:	4413      	add	r3, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fcae 	bl	800825c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3301      	adds	r3, #1
 8009904:	607b      	str	r3, [r7, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b37      	cmp	r3, #55	@ 0x37
 800990a:	d9ef      	bls.n	80098ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800990c:	480d      	ldr	r0, [pc, #52]	@ (8009944 <prvInitialiseTaskLists+0x64>)
 800990e:	f7fe fca5 	bl	800825c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009912:	480d      	ldr	r0, [pc, #52]	@ (8009948 <prvInitialiseTaskLists+0x68>)
 8009914:	f7fe fca2 	bl	800825c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009918:	480c      	ldr	r0, [pc, #48]	@ (800994c <prvInitialiseTaskLists+0x6c>)
 800991a:	f7fe fc9f 	bl	800825c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800991e:	480c      	ldr	r0, [pc, #48]	@ (8009950 <prvInitialiseTaskLists+0x70>)
 8009920:	f7fe fc9c 	bl	800825c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009924:	480b      	ldr	r0, [pc, #44]	@ (8009954 <prvInitialiseTaskLists+0x74>)
 8009926:	f7fe fc99 	bl	800825c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800992a:	4b0b      	ldr	r3, [pc, #44]	@ (8009958 <prvInitialiseTaskLists+0x78>)
 800992c:	4a05      	ldr	r2, [pc, #20]	@ (8009944 <prvInitialiseTaskLists+0x64>)
 800992e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009930:	4b0a      	ldr	r3, [pc, #40]	@ (800995c <prvInitialiseTaskLists+0x7c>)
 8009932:	4a05      	ldr	r2, [pc, #20]	@ (8009948 <prvInitialiseTaskLists+0x68>)
 8009934:	601a      	str	r2, [r3, #0]
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20005c98 	.word	0x20005c98
 8009944:	200060f8 	.word	0x200060f8
 8009948:	2000610c 	.word	0x2000610c
 800994c:	20006128 	.word	0x20006128
 8009950:	2000613c 	.word	0x2000613c
 8009954:	20006154 	.word	0x20006154
 8009958:	20006120 	.word	0x20006120
 800995c:	20006124 	.word	0x20006124

08009960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009966:	e019      	b.n	800999c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009968:	f000 fde6 	bl	800a538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996c:	4b10      	ldr	r3, [pc, #64]	@ (80099b0 <prvCheckTasksWaitingTermination+0x50>)
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3304      	adds	r3, #4
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe fcf9 	bl	8008370 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800997e:	4b0d      	ldr	r3, [pc, #52]	@ (80099b4 <prvCheckTasksWaitingTermination+0x54>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3b01      	subs	r3, #1
 8009984:	4a0b      	ldr	r2, [pc, #44]	@ (80099b4 <prvCheckTasksWaitingTermination+0x54>)
 8009986:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009988:	4b0b      	ldr	r3, [pc, #44]	@ (80099b8 <prvCheckTasksWaitingTermination+0x58>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	3b01      	subs	r3, #1
 800998e:	4a0a      	ldr	r2, [pc, #40]	@ (80099b8 <prvCheckTasksWaitingTermination+0x58>)
 8009990:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009992:	f000 fe03 	bl	800a59c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f810 	bl	80099bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800999c:	4b06      	ldr	r3, [pc, #24]	@ (80099b8 <prvCheckTasksWaitingTermination+0x58>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e1      	bne.n	8009968 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	2000613c 	.word	0x2000613c
 80099b4:	20006168 	.word	0x20006168
 80099b8:	20006150 	.word	0x20006150

080099bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d108      	bne.n	80099e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 ffa0 	bl	800a918 <vPortFree>
				vPortFree( pxTCB );
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 ff9d 	bl	800a918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099de:	e019      	b.n	8009a14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d103      	bne.n	80099f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 ff94 	bl	800a918 <vPortFree>
	}
 80099f0:	e010      	b.n	8009a14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d00b      	beq.n	8009a14 <prvDeleteTCB+0x58>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	60fb      	str	r3, [r7, #12]
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <prvDeleteTCB+0x54>
	}
 8009a14:	bf00      	nop
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a22:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <prvResetNextTaskUnblockTime+0x38>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a58 <prvResetNextTaskUnblockTime+0x3c>)
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a34:	e008      	b.n	8009a48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a36:	4b07      	ldr	r3, [pc, #28]	@ (8009a54 <prvResetNextTaskUnblockTime+0x38>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	4a04      	ldr	r2, [pc, #16]	@ (8009a58 <prvResetNextTaskUnblockTime+0x3c>)
 8009a46:	6013      	str	r3, [r2, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	20006120 	.word	0x20006120
 8009a58:	20006188 	.word	0x20006188

08009a5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a62:	4b0b      	ldr	r3, [pc, #44]	@ (8009a90 <xTaskGetSchedulerState+0x34>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d102      	bne.n	8009a70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	607b      	str	r3, [r7, #4]
 8009a6e:	e008      	b.n	8009a82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a70:	4b08      	ldr	r3, [pc, #32]	@ (8009a94 <xTaskGetSchedulerState+0x38>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	607b      	str	r3, [r7, #4]
 8009a7c:	e001      	b.n	8009a82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a82:	687b      	ldr	r3, [r7, #4]
	}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	20006174 	.word	0x20006174
 8009a94:	20006190 	.word	0x20006190

08009a98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d058      	beq.n	8009b60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aae:	4b2f      	ldr	r3, [pc, #188]	@ (8009b6c <xTaskPriorityDisinherit+0xd4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d00b      	beq.n	8009ad0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	e7fd      	b.n	8009acc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10b      	bne.n	8009af0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	60bb      	str	r3, [r7, #8]
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af4:	1e5a      	subs	r2, r3, #1
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d02c      	beq.n	8009b60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d128      	bne.n	8009b60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	3304      	adds	r3, #4
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fc2c 	bl	8008370 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b30:	4b0f      	ldr	r3, [pc, #60]	@ (8009b70 <xTaskPriorityDisinherit+0xd8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d903      	bls.n	8009b40 <xTaskPriorityDisinherit+0xa8>
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b70 <xTaskPriorityDisinherit+0xd8>)
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4a09      	ldr	r2, [pc, #36]	@ (8009b74 <xTaskPriorityDisinherit+0xdc>)
 8009b4e:	441a      	add	r2, r3
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fe fbad 	bl	80082b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b60:	697b      	ldr	r3, [r7, #20]
	}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20005c94 	.word	0x20005c94
 8009b70:	20006170 	.word	0x20006170
 8009b74:	20005c98 	.word	0x20005c98

08009b78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b82:	4b21      	ldr	r3, [pc, #132]	@ (8009c08 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b88:	4b20      	ldr	r3, [pc, #128]	@ (8009c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fbee 	bl	8008370 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b9a:	d10a      	bne.n	8009bb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d007      	beq.n	8009bb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8009c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4819      	ldr	r0, [pc, #100]	@ (8009c10 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bac:	f7fe fb83 	bl	80082b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bb0:	e026      	b.n	8009c00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bba:	4b14      	ldr	r3, [pc, #80]	@ (8009c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d209      	bcs.n	8009bde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bca:	4b12      	ldr	r3, [pc, #72]	@ (8009c14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b0f      	ldr	r3, [pc, #60]	@ (8009c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3304      	adds	r3, #4
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4610      	mov	r0, r2
 8009bd8:	f7fe fb91 	bl	80082fe <vListInsert>
}
 8009bdc:	e010      	b.n	8009c00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bde:	4b0e      	ldr	r3, [pc, #56]	@ (8009c18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4619      	mov	r1, r3
 8009bea:	4610      	mov	r0, r2
 8009bec:	f7fe fb87 	bl	80082fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8009c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d202      	bcs.n	8009c00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bfa:	4a08      	ldr	r2, [pc, #32]	@ (8009c1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	6013      	str	r3, [r2, #0]
}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	2000616c 	.word	0x2000616c
 8009c0c:	20005c94 	.word	0x20005c94
 8009c10:	20006154 	.word	0x20006154
 8009c14:	20006124 	.word	0x20006124
 8009c18:	20006120 	.word	0x20006120
 8009c1c:	20006188 	.word	0x20006188

08009c20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08a      	sub	sp, #40	@ 0x28
 8009c24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c2a:	f000 fb13 	bl	800a254 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ca4 <xTimerCreateTimerTask+0x84>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d021      	beq.n	8009c7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c3e:	1d3a      	adds	r2, r7, #4
 8009c40:	f107 0108 	add.w	r1, r7, #8
 8009c44:	f107 030c 	add.w	r3, r7, #12
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7fe faed 	bl	8008228 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	9202      	str	r2, [sp, #8]
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	2302      	movs	r3, #2
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	460a      	mov	r2, r1
 8009c60:	4911      	ldr	r1, [pc, #68]	@ (8009ca8 <xTimerCreateTimerTask+0x88>)
 8009c62:	4812      	ldr	r0, [pc, #72]	@ (8009cac <xTimerCreateTimerTask+0x8c>)
 8009c64:	f7ff f8a8 	bl	8008db8 <xTaskCreateStatic>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	4a11      	ldr	r2, [pc, #68]	@ (8009cb0 <xTimerCreateTimerTask+0x90>)
 8009c6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c6e:	4b10      	ldr	r3, [pc, #64]	@ (8009cb0 <xTimerCreateTimerTask+0x90>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c76:	2301      	movs	r3, #1
 8009c78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10b      	bne.n	8009c98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c98:	697b      	ldr	r3, [r7, #20]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	200061c4 	.word	0x200061c4
 8009ca8:	0801cb60 	.word	0x0801cb60
 8009cac:	08009ded 	.word	0x08009ded
 8009cb0:	200061c8 	.word	0x200061c8

08009cb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08a      	sub	sp, #40	@ 0x28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <xTimerGenericCommand+0x30>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	623b      	str	r3, [r7, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	bf00      	nop
 8009ce2:	e7fd      	b.n	8009ce0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009ce4:	4b19      	ldr	r3, [pc, #100]	@ (8009d4c <xTimerGenericCommand+0x98>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d02a      	beq.n	8009d42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	dc18      	bgt.n	8009d30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cfe:	f7ff fead 	bl	8009a5c <xTaskGetSchedulerState>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b02      	cmp	r3, #2
 8009d06:	d109      	bne.n	8009d1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d08:	4b10      	ldr	r3, [pc, #64]	@ (8009d4c <xTimerGenericCommand+0x98>)
 8009d0a:	6818      	ldr	r0, [r3, #0]
 8009d0c:	f107 0110 	add.w	r1, r7, #16
 8009d10:	2300      	movs	r3, #0
 8009d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d14:	f7fe fc60 	bl	80085d8 <xQueueGenericSend>
 8009d18:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d1a:	e012      	b.n	8009d42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d4c <xTimerGenericCommand+0x98>)
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	f107 0110 	add.w	r1, r7, #16
 8009d24:	2300      	movs	r3, #0
 8009d26:	2200      	movs	r2, #0
 8009d28:	f7fe fc56 	bl	80085d8 <xQueueGenericSend>
 8009d2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d2e:	e008      	b.n	8009d42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d30:	4b06      	ldr	r3, [pc, #24]	@ (8009d4c <xTimerGenericCommand+0x98>)
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	f107 0110 	add.w	r1, r7, #16
 8009d38:	2300      	movs	r3, #0
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	f7fe fd4e 	bl	80087dc <xQueueGenericSendFromISR>
 8009d40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3728      	adds	r7, #40	@ 0x28
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	200061c4 	.word	0x200061c4

08009d50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b088      	sub	sp, #32
 8009d54:	af02      	add	r7, sp, #8
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d5a:	4b23      	ldr	r3, [pc, #140]	@ (8009de8 <prvProcessExpiredTimer+0x98>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	3304      	adds	r3, #4
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe fb01 	bl	8008370 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d023      	beq.n	8009dc4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	699a      	ldr	r2, [r3, #24]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	18d1      	adds	r1, r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	6978      	ldr	r0, [r7, #20]
 8009d8a:	f000 f8d5 	bl	8009f38 <prvInsertTimerInActiveList>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d020      	beq.n	8009dd6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d94:	2300      	movs	r3, #0
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	6978      	ldr	r0, [r7, #20]
 8009da0:	f7ff ff88 	bl	8009cb4 <xTimerGenericCommand>
 8009da4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d114      	bne.n	8009dd6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	60fb      	str	r3, [r7, #12]
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	e7fd      	b.n	8009dc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dca:	f023 0301 	bic.w	r3, r3, #1
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	6978      	ldr	r0, [r7, #20]
 8009ddc:	4798      	blx	r3
}
 8009dde:	bf00      	nop
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	200061bc 	.word	0x200061bc

08009dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009df4:	f107 0308 	add.w	r3, r7, #8
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 f859 	bl	8009eb0 <prvGetNextExpireTime>
 8009dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4619      	mov	r1, r3
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 f805 	bl	8009e14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e0a:	f000 f8d7 	bl	8009fbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e0e:	bf00      	nop
 8009e10:	e7f0      	b.n	8009df4 <prvTimerTask+0x8>
	...

08009e14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e1e:	f7ff fa0f 	bl	8009240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e22:	f107 0308 	add.w	r3, r7, #8
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 f866 	bl	8009ef8 <prvSampleTimeNow>
 8009e2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d130      	bne.n	8009e96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10a      	bne.n	8009e50 <prvProcessTimerOrBlockTask+0x3c>
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d806      	bhi.n	8009e50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e42:	f7ff fa0b 	bl	800925c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff ff81 	bl	8009d50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e4e:	e024      	b.n	8009e9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d008      	beq.n	8009e68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e56:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <prvProcessTimerOrBlockTask+0x90>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <prvProcessTimerOrBlockTask+0x50>
 8009e60:	2301      	movs	r3, #1
 8009e62:	e000      	b.n	8009e66 <prvProcessTimerOrBlockTask+0x52>
 8009e64:	2300      	movs	r3, #0
 8009e66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e68:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea8 <prvProcessTimerOrBlockTask+0x94>)
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	4619      	mov	r1, r3
 8009e76:	f7fe ff6b 	bl	8008d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e7a:	f7ff f9ef 	bl	800925c <xTaskResumeAll>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e84:	4b09      	ldr	r3, [pc, #36]	@ (8009eac <prvProcessTimerOrBlockTask+0x98>)
 8009e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	f3bf 8f6f 	isb	sy
}
 8009e94:	e001      	b.n	8009e9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e96:	f7ff f9e1 	bl	800925c <xTaskResumeAll>
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	200061c0 	.word	0x200061c0
 8009ea8:	200061c4 	.word	0x200061c4
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ef4 <prvGetNextExpireTime+0x44>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <prvGetNextExpireTime+0x16>
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	e000      	b.n	8009ec8 <prvGetNextExpireTime+0x18>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ed4:	4b07      	ldr	r3, [pc, #28]	@ (8009ef4 <prvGetNextExpireTime+0x44>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e001      	b.n	8009ee4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	200061bc 	.word	0x200061bc

08009ef8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f00:	f7ff fa4a 	bl	8009398 <xTaskGetTickCount>
 8009f04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f06:	4b0b      	ldr	r3, [pc, #44]	@ (8009f34 <prvSampleTimeNow+0x3c>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d205      	bcs.n	8009f1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f10:	f000 f93a 	bl	800a188 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	601a      	str	r2, [r3, #0]
 8009f1a:	e002      	b.n	8009f22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f22:	4a04      	ldr	r2, [pc, #16]	@ (8009f34 <prvSampleTimeNow+0x3c>)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f28:	68fb      	ldr	r3, [r7, #12]
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200061cc 	.word	0x200061cc

08009f38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d812      	bhi.n	8009f84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	1ad2      	subs	r2, r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d302      	bcc.n	8009f72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	e01b      	b.n	8009faa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f72:	4b10      	ldr	r3, [pc, #64]	@ (8009fb4 <prvInsertTimerInActiveList+0x7c>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	f7fe f9be 	bl	80082fe <vListInsert>
 8009f82:	e012      	b.n	8009faa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d206      	bcs.n	8009f9a <prvInsertTimerInActiveList+0x62>
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	e007      	b.n	8009faa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f9a:	4b07      	ldr	r3, [pc, #28]	@ (8009fb8 <prvInsertTimerInActiveList+0x80>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f7fe f9aa 	bl	80082fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009faa:	697b      	ldr	r3, [r7, #20]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}
 8009fb4:	200061c0 	.word	0x200061c0
 8009fb8:	200061bc 	.word	0x200061bc

08009fbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b08e      	sub	sp, #56	@ 0x38
 8009fc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fc2:	e0ce      	b.n	800a162 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da19      	bge.n	8009ffe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fca:	1d3b      	adds	r3, r7, #4
 8009fcc:	3304      	adds	r3, #4
 8009fce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10b      	bne.n	8009fee <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	61fb      	str	r3, [r7, #28]
}
 8009fe8:	bf00      	nop
 8009fea:	bf00      	nop
 8009fec:	e7fd      	b.n	8009fea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ff4:	6850      	ldr	r0, [r2, #4]
 8009ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ff8:	6892      	ldr	r2, [r2, #8]
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f2c0 80ae 	blt.w	800a162 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	3304      	adds	r3, #4
 800a016:	4618      	mov	r0, r3
 800a018:	f7fe f9aa 	bl	8008370 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a01c:	463b      	mov	r3, r7
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff ff6a 	bl	8009ef8 <prvSampleTimeNow>
 800a024:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b09      	cmp	r3, #9
 800a02a:	f200 8097 	bhi.w	800a15c <prvProcessReceivedCommands+0x1a0>
 800a02e:	a201      	add	r2, pc, #4	@ (adr r2, 800a034 <prvProcessReceivedCommands+0x78>)
 800a030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a034:	0800a05d 	.word	0x0800a05d
 800a038:	0800a05d 	.word	0x0800a05d
 800a03c:	0800a05d 	.word	0x0800a05d
 800a040:	0800a0d3 	.word	0x0800a0d3
 800a044:	0800a0e7 	.word	0x0800a0e7
 800a048:	0800a133 	.word	0x0800a133
 800a04c:	0800a05d 	.word	0x0800a05d
 800a050:	0800a05d 	.word	0x0800a05d
 800a054:	0800a0d3 	.word	0x0800a0d3
 800a058:	0800a0e7 	.word	0x0800a0e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	b2da      	uxtb	r2, r3
 800a068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a06a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	18d1      	adds	r1, r2, r3
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a07c:	f7ff ff5c 	bl	8009f38 <prvInsertTimerInActiveList>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d06c      	beq.n	800a160 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a08c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d061      	beq.n	800a160 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	441a      	add	r2, r3
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ae:	f7ff fe01 	bl	8009cb4 <xTimerGenericCommand>
 800a0b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d152      	bne.n	800a160 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	61bb      	str	r3, [r7, #24]
}
 800a0cc:	bf00      	nop
 800a0ce:	bf00      	nop
 800a0d0:	e7fd      	b.n	800a0ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0d8:	f023 0301 	bic.w	r3, r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a0e4:	e03d      	b.n	800a162 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0ec:	f043 0301 	orr.w	r3, r3, #1
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	617b      	str	r3, [r7, #20]
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	e7fd      	b.n	800a11a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	18d1      	adds	r1, r2, r3
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a12a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a12c:	f7ff ff04 	bl	8009f38 <prvInsertTimerInActiveList>
					break;
 800a130:	e017      	b.n	800a162 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d103      	bne.n	800a148 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a142:	f000 fbe9 	bl	800a918 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a146:	e00c      	b.n	800a162 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a14e:	f023 0301 	bic.w	r3, r3, #1
 800a152:	b2da      	uxtb	r2, r3
 800a154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a156:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a15a:	e002      	b.n	800a162 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a15c:	bf00      	nop
 800a15e:	e000      	b.n	800a162 <prvProcessReceivedCommands+0x1a6>
					break;
 800a160:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a162:	4b08      	ldr	r3, [pc, #32]	@ (800a184 <prvProcessReceivedCommands+0x1c8>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	1d39      	adds	r1, r7, #4
 800a168:	2200      	movs	r2, #0
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe fbd4 	bl	8008918 <xQueueReceive>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	f47f af26 	bne.w	8009fc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a178:	bf00      	nop
 800a17a:	bf00      	nop
 800a17c:	3730      	adds	r7, #48	@ 0x30
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	200061c4 	.word	0x200061c4

0800a188 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a18e:	e049      	b.n	800a224 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a190:	4b2e      	ldr	r3, [pc, #184]	@ (800a24c <prvSwitchTimerLists+0xc4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a19a:	4b2c      	ldr	r3, [pc, #176]	@ (800a24c <prvSwitchTimerLists+0xc4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fe f8e1 	bl	8008370 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d02f      	beq.n	800a224 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d90e      	bls.n	800a1f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a24c <prvSwitchTimerLists+0xc4>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	f7fe f886 	bl	80082fe <vListInsert>
 800a1f2:	e017      	b.n	800a224 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7ff fd58 	bl	8009cb4 <xTimerGenericCommand>
 800a204:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10b      	bne.n	800a224 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	603b      	str	r3, [r7, #0]
}
 800a21e:	bf00      	nop
 800a220:	bf00      	nop
 800a222:	e7fd      	b.n	800a220 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a224:	4b09      	ldr	r3, [pc, #36]	@ (800a24c <prvSwitchTimerLists+0xc4>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1b0      	bne.n	800a190 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a22e:	4b07      	ldr	r3, [pc, #28]	@ (800a24c <prvSwitchTimerLists+0xc4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a234:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <prvSwitchTimerLists+0xc8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a04      	ldr	r2, [pc, #16]	@ (800a24c <prvSwitchTimerLists+0xc4>)
 800a23a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a23c:	4a04      	ldr	r2, [pc, #16]	@ (800a250 <prvSwitchTimerLists+0xc8>)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	6013      	str	r3, [r2, #0]
}
 800a242:	bf00      	nop
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	200061bc 	.word	0x200061bc
 800a250:	200061c0 	.word	0x200061c0

0800a254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a25a:	f000 f96d 	bl	800a538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a25e:	4b15      	ldr	r3, [pc, #84]	@ (800a2b4 <prvCheckForValidListAndQueue+0x60>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d120      	bne.n	800a2a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a266:	4814      	ldr	r0, [pc, #80]	@ (800a2b8 <prvCheckForValidListAndQueue+0x64>)
 800a268:	f7fd fff8 	bl	800825c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a26c:	4813      	ldr	r0, [pc, #76]	@ (800a2bc <prvCheckForValidListAndQueue+0x68>)
 800a26e:	f7fd fff5 	bl	800825c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a272:	4b13      	ldr	r3, [pc, #76]	@ (800a2c0 <prvCheckForValidListAndQueue+0x6c>)
 800a274:	4a10      	ldr	r2, [pc, #64]	@ (800a2b8 <prvCheckForValidListAndQueue+0x64>)
 800a276:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a278:	4b12      	ldr	r3, [pc, #72]	@ (800a2c4 <prvCheckForValidListAndQueue+0x70>)
 800a27a:	4a10      	ldr	r2, [pc, #64]	@ (800a2bc <prvCheckForValidListAndQueue+0x68>)
 800a27c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a27e:	2300      	movs	r3, #0
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	4b11      	ldr	r3, [pc, #68]	@ (800a2c8 <prvCheckForValidListAndQueue+0x74>)
 800a284:	4a11      	ldr	r2, [pc, #68]	@ (800a2cc <prvCheckForValidListAndQueue+0x78>)
 800a286:	2110      	movs	r1, #16
 800a288:	200a      	movs	r0, #10
 800a28a:	f7fe f905 	bl	8008498 <xQueueGenericCreateStatic>
 800a28e:	4603      	mov	r3, r0
 800a290:	4a08      	ldr	r2, [pc, #32]	@ (800a2b4 <prvCheckForValidListAndQueue+0x60>)
 800a292:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a294:	4b07      	ldr	r3, [pc, #28]	@ (800a2b4 <prvCheckForValidListAndQueue+0x60>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d005      	beq.n	800a2a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a29c:	4b05      	ldr	r3, [pc, #20]	@ (800a2b4 <prvCheckForValidListAndQueue+0x60>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	490b      	ldr	r1, [pc, #44]	@ (800a2d0 <prvCheckForValidListAndQueue+0x7c>)
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe fd2a 	bl	8008cfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2a8:	f000 f978 	bl	800a59c <vPortExitCritical>
}
 800a2ac:	bf00      	nop
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200061c4 	.word	0x200061c4
 800a2b8:	20006194 	.word	0x20006194
 800a2bc:	200061a8 	.word	0x200061a8
 800a2c0:	200061bc 	.word	0x200061bc
 800a2c4:	200061c0 	.word	0x200061c0
 800a2c8:	20006270 	.word	0x20006270
 800a2cc:	200061d0 	.word	0x200061d0
 800a2d0:	0801cb68 	.word	0x0801cb68

0800a2d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3b04      	subs	r3, #4
 800a2e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a2ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	3b04      	subs	r3, #4
 800a2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f023 0201 	bic.w	r2, r3, #1
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3b04      	subs	r3, #4
 800a302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a304:	4a0c      	ldr	r2, [pc, #48]	@ (800a338 <pxPortInitialiseStack+0x64>)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	3b14      	subs	r3, #20
 800a30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	3b04      	subs	r3, #4
 800a31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f06f 0202 	mvn.w	r2, #2
 800a322:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3b20      	subs	r3, #32
 800a328:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a32a:	68fb      	ldr	r3, [r7, #12]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr
 800a338:	0800a33d 	.word	0x0800a33d

0800a33c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a346:	4b13      	ldr	r3, [pc, #76]	@ (800a394 <prvTaskExitError+0x58>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a34e:	d00b      	beq.n	800a368 <prvTaskExitError+0x2c>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	60fb      	str	r3, [r7, #12]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <prvTaskExitError+0x28>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	60bb      	str	r3, [r7, #8]
}
 800a37a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a37c:	bf00      	nop
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d0fc      	beq.n	800a37e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	200000c0 	.word	0x200000c0
	...

0800a3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3a0:	4b07      	ldr	r3, [pc, #28]	@ (800a3c0 <pxCurrentTCBConst2>)
 800a3a2:	6819      	ldr	r1, [r3, #0]
 800a3a4:	6808      	ldr	r0, [r1, #0]
 800a3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	f380 8809 	msr	PSP, r0
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f04f 0000 	mov.w	r0, #0
 800a3b6:	f380 8811 	msr	BASEPRI, r0
 800a3ba:	4770      	bx	lr
 800a3bc:	f3af 8000 	nop.w

0800a3c0 <pxCurrentTCBConst2>:
 800a3c0:	20005c94 	.word	0x20005c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop

0800a3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3c8:	4808      	ldr	r0, [pc, #32]	@ (800a3ec <prvPortStartFirstTask+0x24>)
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	6800      	ldr	r0, [r0, #0]
 800a3ce:	f380 8808 	msr	MSP, r0
 800a3d2:	f04f 0000 	mov.w	r0, #0
 800a3d6:	f380 8814 	msr	CONTROL, r0
 800a3da:	b662      	cpsie	i
 800a3dc:	b661      	cpsie	f
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	df00      	svc	0
 800a3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3ea:	bf00      	nop
 800a3ec:	e000ed08 	.word	0xe000ed08

0800a3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3f6:	4b47      	ldr	r3, [pc, #284]	@ (800a514 <xPortStartScheduler+0x124>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a47      	ldr	r2, [pc, #284]	@ (800a518 <xPortStartScheduler+0x128>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10b      	bne.n	800a418 <xPortStartScheduler+0x28>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	613b      	str	r3, [r7, #16]
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	e7fd      	b.n	800a414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a418:	4b3e      	ldr	r3, [pc, #248]	@ (800a514 <xPortStartScheduler+0x124>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a3f      	ldr	r2, [pc, #252]	@ (800a51c <xPortStartScheduler+0x12c>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d10b      	bne.n	800a43a <xPortStartScheduler+0x4a>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	60fb      	str	r3, [r7, #12]
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	e7fd      	b.n	800a436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a43a:	4b39      	ldr	r3, [pc, #228]	@ (800a520 <xPortStartScheduler+0x130>)
 800a43c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	b2db      	uxtb	r3, r3
 800a444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	22ff      	movs	r2, #255	@ 0xff
 800a44a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	4b31      	ldr	r3, [pc, #196]	@ (800a524 <xPortStartScheduler+0x134>)
 800a460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a462:	4b31      	ldr	r3, [pc, #196]	@ (800a528 <xPortStartScheduler+0x138>)
 800a464:	2207      	movs	r2, #7
 800a466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a468:	e009      	b.n	800a47e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a46a:	4b2f      	ldr	r3, [pc, #188]	@ (800a528 <xPortStartScheduler+0x138>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3b01      	subs	r3, #1
 800a470:	4a2d      	ldr	r2, [pc, #180]	@ (800a528 <xPortStartScheduler+0x138>)
 800a472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	b2db      	uxtb	r3, r3
 800a478:	005b      	lsls	r3, r3, #1
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	b2db      	uxtb	r3, r3
 800a482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a486:	2b80      	cmp	r3, #128	@ 0x80
 800a488:	d0ef      	beq.n	800a46a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a48a:	4b27      	ldr	r3, [pc, #156]	@ (800a528 <xPortStartScheduler+0x138>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f1c3 0307 	rsb	r3, r3, #7
 800a492:	2b04      	cmp	r3, #4
 800a494:	d00b      	beq.n	800a4ae <xPortStartScheduler+0xbe>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	60bb      	str	r3, [r7, #8]
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	e7fd      	b.n	800a4aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	021b      	lsls	r3, r3, #8
 800a4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a4c0:	4a19      	ldr	r2, [pc, #100]	@ (800a528 <xPortStartScheduler+0x138>)
 800a4c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4cc:	4b17      	ldr	r3, [pc, #92]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a16      	ldr	r2, [pc, #88]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a4d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4d8:	4b14      	ldr	r3, [pc, #80]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a13      	ldr	r2, [pc, #76]	@ (800a52c <xPortStartScheduler+0x13c>)
 800a4de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a4e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4e4:	f000 f8da 	bl	800a69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4e8:	4b11      	ldr	r3, [pc, #68]	@ (800a530 <xPortStartScheduler+0x140>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4ee:	f000 f8f9 	bl	800a6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4f2:	4b10      	ldr	r3, [pc, #64]	@ (800a534 <xPortStartScheduler+0x144>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a534 <xPortStartScheduler+0x144>)
 800a4f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a4fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4fe:	f7ff ff63 	bl	800a3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a502:	f7ff f813 	bl	800952c <vTaskSwitchContext>
	prvTaskExitError();
 800a506:	f7ff ff19 	bl	800a33c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3718      	adds	r7, #24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	e000ed00 	.word	0xe000ed00
 800a518:	410fc271 	.word	0x410fc271
 800a51c:	410fc270 	.word	0x410fc270
 800a520:	e000e400 	.word	0xe000e400
 800a524:	200062c0 	.word	0x200062c0
 800a528:	200062c4 	.word	0x200062c4
 800a52c:	e000ed20 	.word	0xe000ed20
 800a530:	200000c0 	.word	0x200000c0
 800a534:	e000ef34 	.word	0xe000ef34

0800a538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	607b      	str	r3, [r7, #4]
}
 800a550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a552:	4b10      	ldr	r3, [pc, #64]	@ (800a594 <vPortEnterCritical+0x5c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3301      	adds	r3, #1
 800a558:	4a0e      	ldr	r2, [pc, #56]	@ (800a594 <vPortEnterCritical+0x5c>)
 800a55a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a55c:	4b0d      	ldr	r3, [pc, #52]	@ (800a594 <vPortEnterCritical+0x5c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d110      	bne.n	800a586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a564:	4b0c      	ldr	r3, [pc, #48]	@ (800a598 <vPortEnterCritical+0x60>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00b      	beq.n	800a586 <vPortEnterCritical+0x4e>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	603b      	str	r3, [r7, #0]
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	e7fd      	b.n	800a582 <vPortEnterCritical+0x4a>
	}
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	200000c0 	.word	0x200000c0
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5a2:	4b12      	ldr	r3, [pc, #72]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d10b      	bne.n	800a5c2 <vPortExitCritical+0x26>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	607b      	str	r3, [r7, #4]
}
 800a5bc:	bf00      	nop
 800a5be:	bf00      	nop
 800a5c0:	e7fd      	b.n	800a5be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	4a08      	ldr	r2, [pc, #32]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5cc:	4b07      	ldr	r3, [pc, #28]	@ (800a5ec <vPortExitCritical+0x50>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d105      	bne.n	800a5e0 <vPortExitCritical+0x44>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f383 8811 	msr	BASEPRI, r3
}
 800a5de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	200000c0 	.word	0x200000c0

0800a5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5f0:	f3ef 8009 	mrs	r0, PSP
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	4b15      	ldr	r3, [pc, #84]	@ (800a650 <pxCurrentTCBConst>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	f01e 0f10 	tst.w	lr, #16
 800a600:	bf08      	it	eq
 800a602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	6010      	str	r0, [r2, #0]
 800a60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a614:	f380 8811 	msr	BASEPRI, r0
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f7fe ff84 	bl	800952c <vTaskSwitchContext>
 800a624:	f04f 0000 	mov.w	r0, #0
 800a628:	f380 8811 	msr	BASEPRI, r0
 800a62c:	bc09      	pop	{r0, r3}
 800a62e:	6819      	ldr	r1, [r3, #0]
 800a630:	6808      	ldr	r0, [r1, #0]
 800a632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a636:	f01e 0f10 	tst.w	lr, #16
 800a63a:	bf08      	it	eq
 800a63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a640:	f380 8809 	msr	PSP, r0
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	f3af 8000 	nop.w

0800a650 <pxCurrentTCBConst>:
 800a650:	20005c94 	.word	0x20005c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop

0800a658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	607b      	str	r3, [r7, #4]
}
 800a670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a672:	f7fe fea1 	bl	80093b8 <xTaskIncrementTick>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a67c:	4b06      	ldr	r3, [pc, #24]	@ (800a698 <xPortSysTickHandler+0x40>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	2300      	movs	r3, #0
 800a686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	f383 8811 	msr	BASEPRI, r3
}
 800a68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d4 <vPortSetupTimerInterrupt+0x38>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d8 <vPortSetupTimerInterrupt+0x3c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a6dc <vPortSetupTimerInterrupt+0x40>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	099b      	lsrs	r3, r3, #6
 800a6b8:	4a09      	ldr	r2, [pc, #36]	@ (800a6e0 <vPortSetupTimerInterrupt+0x44>)
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6be:	4b04      	ldr	r3, [pc, #16]	@ (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6c0:	2207      	movs	r2, #7
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	e000e010 	.word	0xe000e010
 800a6d4:	e000e018 	.word	0xe000e018
 800a6d8:	20000024 	.word	0x20000024
 800a6dc:	10624dd3 	.word	0x10624dd3
 800a6e0:	e000e014 	.word	0xe000e014

0800a6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a6f4 <vPortEnableVFP+0x10>
 800a6e8:	6801      	ldr	r1, [r0, #0]
 800a6ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a6ee:	6001      	str	r1, [r0, #0]
 800a6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6f2:	bf00      	nop
 800a6f4:	e000ed88 	.word	0xe000ed88

0800a6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6fe:	f3ef 8305 	mrs	r3, IPSR
 800a702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b0f      	cmp	r3, #15
 800a708:	d915      	bls.n	800a736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a70a:	4a18      	ldr	r2, [pc, #96]	@ (800a76c <vPortValidateInterruptPriority+0x74>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a714:	4b16      	ldr	r3, [pc, #88]	@ (800a770 <vPortValidateInterruptPriority+0x78>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	7afa      	ldrb	r2, [r7, #11]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d20b      	bcs.n	800a736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
 800a732:	bf00      	nop
 800a734:	e7fd      	b.n	800a732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a736:	4b0f      	ldr	r3, [pc, #60]	@ (800a774 <vPortValidateInterruptPriority+0x7c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a73e:	4b0e      	ldr	r3, [pc, #56]	@ (800a778 <vPortValidateInterruptPriority+0x80>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d90b      	bls.n	800a75e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	603b      	str	r3, [r7, #0]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <vPortValidateInterruptPriority+0x62>
	}
 800a75e:	bf00      	nop
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	e000e3f0 	.word	0xe000e3f0
 800a770:	200062c0 	.word	0x200062c0
 800a774:	e000ed0c 	.word	0xe000ed0c
 800a778:	200062c4 	.word	0x200062c4

0800a77c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08a      	sub	sp, #40	@ 0x28
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a784:	2300      	movs	r3, #0
 800a786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a788:	f7fe fd5a 	bl	8009240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a78c:	4b5c      	ldr	r3, [pc, #368]	@ (800a900 <pvPortMalloc+0x184>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a794:	f000 f924 	bl	800a9e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a798:	4b5a      	ldr	r3, [pc, #360]	@ (800a904 <pvPortMalloc+0x188>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f040 8095 	bne.w	800a8d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01e      	beq.n	800a7ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a7ac:	2208      	movs	r2, #8
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d015      	beq.n	800a7ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f023 0307 	bic.w	r3, r3, #7
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f003 0307 	and.w	r3, r3, #7
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00b      	beq.n	800a7ea <pvPortMalloc+0x6e>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	617b      	str	r3, [r7, #20]
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	e7fd      	b.n	800a7e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d06f      	beq.n	800a8d0 <pvPortMalloc+0x154>
 800a7f0:	4b45      	ldr	r3, [pc, #276]	@ (800a908 <pvPortMalloc+0x18c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d86a      	bhi.n	800a8d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7fa:	4b44      	ldr	r3, [pc, #272]	@ (800a90c <pvPortMalloc+0x190>)
 800a7fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7fe:	4b43      	ldr	r3, [pc, #268]	@ (800a90c <pvPortMalloc+0x190>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a804:	e004      	b.n	800a810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	429a      	cmp	r2, r3
 800a818:	d903      	bls.n	800a822 <pvPortMalloc+0xa6>
 800a81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f1      	bne.n	800a806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a822:	4b37      	ldr	r3, [pc, #220]	@ (800a900 <pvPortMalloc+0x184>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a828:	429a      	cmp	r2, r3
 800a82a:	d051      	beq.n	800a8d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2208      	movs	r2, #8
 800a832:	4413      	add	r3, r2
 800a834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	1ad2      	subs	r2, r2, r3
 800a846:	2308      	movs	r3, #8
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d920      	bls.n	800a890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a84e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4413      	add	r3, r2
 800a854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00b      	beq.n	800a878 <pvPortMalloc+0xfc>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	613b      	str	r3, [r7, #16]
}
 800a872:	bf00      	nop
 800a874:	bf00      	nop
 800a876:	e7fd      	b.n	800a874 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a88a:	69b8      	ldr	r0, [r7, #24]
 800a88c:	f000 f90a 	bl	800aaa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a890:	4b1d      	ldr	r3, [pc, #116]	@ (800a908 <pvPortMalloc+0x18c>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	1ad3      	subs	r3, r2, r3
 800a89a:	4a1b      	ldr	r2, [pc, #108]	@ (800a908 <pvPortMalloc+0x18c>)
 800a89c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a89e:	4b1a      	ldr	r3, [pc, #104]	@ (800a908 <pvPortMalloc+0x18c>)
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a910 <pvPortMalloc+0x194>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d203      	bcs.n	800a8b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8aa:	4b17      	ldr	r3, [pc, #92]	@ (800a908 <pvPortMalloc+0x18c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a18      	ldr	r2, [pc, #96]	@ (800a910 <pvPortMalloc+0x194>)
 800a8b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	4b13      	ldr	r3, [pc, #76]	@ (800a904 <pvPortMalloc+0x188>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8c6:	4b13      	ldr	r3, [pc, #76]	@ (800a914 <pvPortMalloc+0x198>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	4a11      	ldr	r2, [pc, #68]	@ (800a914 <pvPortMalloc+0x198>)
 800a8ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8d0:	f7fe fcc4 	bl	800925c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	f003 0307 	and.w	r3, r3, #7
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00b      	beq.n	800a8f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e2:	f383 8811 	msr	BASEPRI, r3
 800a8e6:	f3bf 8f6f 	isb	sy
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	60fb      	str	r3, [r7, #12]
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	e7fd      	b.n	800a8f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a8f6:	69fb      	ldr	r3, [r7, #28]
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3728      	adds	r7, #40	@ 0x28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20006ed0 	.word	0x20006ed0
 800a904:	20006ee4 	.word	0x20006ee4
 800a908:	20006ed4 	.word	0x20006ed4
 800a90c:	20006ec8 	.word	0x20006ec8
 800a910:	20006ed8 	.word	0x20006ed8
 800a914:	20006edc 	.word	0x20006edc

0800a918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d04f      	beq.n	800a9ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a92a:	2308      	movs	r3, #8
 800a92c:	425b      	negs	r3, r3
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	4413      	add	r3, r2
 800a932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	4b25      	ldr	r3, [pc, #148]	@ (800a9d4 <vPortFree+0xbc>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4013      	ands	r3, r2
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10b      	bne.n	800a95e <vPortFree+0x46>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	60fb      	str	r3, [r7, #12]
}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	e7fd      	b.n	800a95a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00b      	beq.n	800a97e <vPortFree+0x66>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	60bb      	str	r3, [r7, #8]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	4b14      	ldr	r3, [pc, #80]	@ (800a9d4 <vPortFree+0xbc>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4013      	ands	r3, r2
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01e      	beq.n	800a9ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d11a      	bne.n	800a9ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d4 <vPortFree+0xbc>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	43db      	mvns	r3, r3
 800a99e:	401a      	ands	r2, r3
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9a4:	f7fe fc4c 	bl	8009240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a9d8 <vPortFree+0xc0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	4a09      	ldr	r2, [pc, #36]	@ (800a9d8 <vPortFree+0xc0>)
 800a9b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9b6:	6938      	ldr	r0, [r7, #16]
 800a9b8:	f000 f874 	bl	800aaa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a9bc:	4b07      	ldr	r3, [pc, #28]	@ (800a9dc <vPortFree+0xc4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	4a06      	ldr	r2, [pc, #24]	@ (800a9dc <vPortFree+0xc4>)
 800a9c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a9c6:	f7fe fc49 	bl	800925c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9ca:	bf00      	nop
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20006ee4 	.word	0x20006ee4
 800a9d8:	20006ed4 	.word	0x20006ed4
 800a9dc:	20006ee0 	.word	0x20006ee0

0800a9e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a9ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9ec:	4b27      	ldr	r3, [pc, #156]	@ (800aa8c <prvHeapInit+0xac>)
 800a9ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f003 0307 	and.w	r3, r3, #7
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00c      	beq.n	800aa14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	3307      	adds	r3, #7
 800a9fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f023 0307 	bic.w	r3, r3, #7
 800aa06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	4a1f      	ldr	r2, [pc, #124]	@ (800aa8c <prvHeapInit+0xac>)
 800aa10:	4413      	add	r3, r2
 800aa12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa18:	4a1d      	ldr	r2, [pc, #116]	@ (800aa90 <prvHeapInit+0xb0>)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa1e:	4b1c      	ldr	r3, [pc, #112]	@ (800aa90 <prvHeapInit+0xb0>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	4413      	add	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa2c:	2208      	movs	r2, #8
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	1a9b      	subs	r3, r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f023 0307 	bic.w	r3, r3, #7
 800aa3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4a15      	ldr	r2, [pc, #84]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa42:	4b14      	ldr	r3, [pc, #80]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2200      	movs	r2, #0
 800aa48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa4a:	4b12      	ldr	r3, [pc, #72]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	1ad2      	subs	r2, r2, r3
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa60:	4b0c      	ldr	r3, [pc, #48]	@ (800aa94 <prvHeapInit+0xb4>)
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4a0a      	ldr	r2, [pc, #40]	@ (800aa98 <prvHeapInit+0xb8>)
 800aa6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	4a09      	ldr	r2, [pc, #36]	@ (800aa9c <prvHeapInit+0xbc>)
 800aa76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa78:	4b09      	ldr	r3, [pc, #36]	@ (800aaa0 <prvHeapInit+0xc0>)
 800aa7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aa7e:	601a      	str	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	200062c8 	.word	0x200062c8
 800aa90:	20006ec8 	.word	0x20006ec8
 800aa94:	20006ed0 	.word	0x20006ed0
 800aa98:	20006ed8 	.word	0x20006ed8
 800aa9c:	20006ed4 	.word	0x20006ed4
 800aaa0:	20006ee4 	.word	0x20006ee4

0800aaa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaac:	4b28      	ldr	r3, [pc, #160]	@ (800ab50 <prvInsertBlockIntoFreeList+0xac>)
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	e002      	b.n	800aab8 <prvInsertBlockIntoFreeList+0x14>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	60fb      	str	r3, [r7, #12]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d8f7      	bhi.n	800aab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	4413      	add	r3, r2
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d108      	bne.n	800aae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	441a      	add	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	441a      	add	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d118      	bne.n	800ab2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	4b15      	ldr	r3, [pc, #84]	@ (800ab54 <prvInsertBlockIntoFreeList+0xb0>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d00d      	beq.n	800ab22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685a      	ldr	r2, [r3, #4]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	441a      	add	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	e008      	b.n	800ab34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab22:	4b0c      	ldr	r3, [pc, #48]	@ (800ab54 <prvInsertBlockIntoFreeList+0xb0>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	e003      	b.n	800ab34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d002      	beq.n	800ab42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab42:	bf00      	nop
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	20006ec8 	.word	0x20006ec8
 800ab54:	20006ed0 	.word	0x20006ed0

0800ab58 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab58:	4b04      	ldr	r3, [pc, #16]	@ (800ab6c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	b10a      	cbz	r2, 800ab62 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ab5e:	4803      	ldr	r0, [pc, #12]	@ (800ab6c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ab60:	4770      	bx	lr
 800ab62:	4a03      	ldr	r2, [pc, #12]	@ (800ab70 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ab64:	4801      	ldr	r0, [pc, #4]	@ (800ab6c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ab66:	6812      	ldr	r2, [r2, #0]
 800ab68:	601a      	str	r2, [r3, #0]
 800ab6a:	4770      	bx	lr
 800ab6c:	200000cc 	.word	0x200000cc
 800ab70:	20000528 	.word	0x20000528

0800ab74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab74:	4a02      	ldr	r2, [pc, #8]	@ (800ab80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ab76:	4b03      	ldr	r3, [pc, #12]	@ (800ab84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ab78:	6812      	ldr	r2, [r2, #0]
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	20000528 	.word	0x20000528
 800ab84:	200000cc 	.word	0x200000cc

0800ab88 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ab88:	f005 bb06 	b.w	8010198 <geometry_msgs__msg__Twist__init>

0800ab8c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ab8c:	f005 bb28 	b.w	80101e0 <geometry_msgs__msg__Twist__fini>

0800ab90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	f000 f819 	bl	800abc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab96:	4c07      	ldr	r4, [pc, #28]	@ (800abb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800ab98:	60e0      	str	r0, [r4, #12]
 800ab9a:	f000 f815 	bl	800abc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab9e:	4b06      	ldr	r3, [pc, #24]	@ (800abb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aba0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	b10a      	cbz	r2, 800abaa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800aba6:	4804      	ldr	r0, [pc, #16]	@ (800abb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aba8:	bd10      	pop	{r4, pc}
 800abaa:	4a04      	ldr	r2, [pc, #16]	@ (800abbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800abac:	4802      	ldr	r0, [pc, #8]	@ (800abb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800abae:	6812      	ldr	r2, [r2, #0]
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	bd10      	pop	{r4, pc}
 800abb4:	200000d8 	.word	0x200000d8
 800abb8:	20000150 	.word	0x20000150
 800abbc:	2000052c 	.word	0x2000052c

0800abc0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800abc0:	f005 bb1a 	b.w	80101f8 <geometry_msgs__msg__Vector3__init>

0800abc4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800abc4:	f005 bb1c 	b.w	8010200 <geometry_msgs__msg__Vector3__fini>

0800abc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800abc8:	4b04      	ldr	r3, [pc, #16]	@ (800abdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	b10a      	cbz	r2, 800abd2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800abce:	4803      	ldr	r0, [pc, #12]	@ (800abdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800abd0:	4770      	bx	lr
 800abd2:	4a03      	ldr	r2, [pc, #12]	@ (800abe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800abd4:	4801      	ldr	r0, [pc, #4]	@ (800abdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800abd6:	6812      	ldr	r2, [r2, #0]
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	4770      	bx	lr
 800abdc:	20000210 	.word	0x20000210
 800abe0:	2000052c 	.word	0x2000052c

0800abe4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	4604      	mov	r4, r0
 800abe8:	b148      	cbz	r0, 800abfe <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800abea:	460d      	mov	r5, r1
 800abec:	f000 f860 	bl	800acb0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800abf0:	4606      	mov	r6, r0
 800abf2:	1829      	adds	r1, r5, r0
 800abf4:	f104 0018 	add.w	r0, r4, #24
 800abf8:	f000 f85a 	bl	800acb0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800abfc:	4430      	add	r0, r6
 800abfe:	bd70      	pop	{r4, r5, r6, pc}

0800ac00 <_Twist__cdr_deserialize>:
 800ac00:	b570      	push	{r4, r5, r6, lr}
 800ac02:	460c      	mov	r4, r1
 800ac04:	b189      	cbz	r1, 800ac2a <_Twist__cdr_deserialize+0x2a>
 800ac06:	4605      	mov	r5, r0
 800ac08:	f000 f8de 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac0c:	6843      	ldr	r3, [r0, #4]
 800ac0e:	4621      	mov	r1, r4
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	4628      	mov	r0, r5
 800ac14:	4798      	blx	r3
 800ac16:	f000 f8d7 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac1a:	6843      	ldr	r3, [r0, #4]
 800ac1c:	f104 0118 	add.w	r1, r4, #24
 800ac20:	4628      	mov	r0, r5
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac28:	4718      	bx	r3
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	bd70      	pop	{r4, r5, r6, pc}
 800ac2e:	bf00      	nop

0800ac30 <_Twist__cdr_serialize>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	9101      	str	r1, [sp, #4]
 800ac36:	b190      	cbz	r0, 800ac5e <_Twist__cdr_serialize+0x2e>
 800ac38:	4604      	mov	r4, r0
 800ac3a:	f000 f8c5 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac3e:	6843      	ldr	r3, [r0, #4]
 800ac40:	9901      	ldr	r1, [sp, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	4620      	mov	r0, r4
 800ac46:	4798      	blx	r3
 800ac48:	f000 f8be 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ac4c:	6843      	ldr	r3, [r0, #4]
 800ac4e:	9901      	ldr	r1, [sp, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f104 0018 	add.w	r0, r4, #24
 800ac56:	b002      	add	sp, #8
 800ac58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac5c:	4718      	bx	r3
 800ac5e:	b002      	add	sp, #8
 800ac60:	bd10      	pop	{r4, pc}
 800ac62:	bf00      	nop

0800ac64 <_Twist__get_serialized_size>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	4604      	mov	r4, r0
 800ac68:	b148      	cbz	r0, 800ac7e <_Twist__get_serialized_size+0x1a>
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	f000 f820 	bl	800acb0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ac70:	4605      	mov	r5, r0
 800ac72:	4601      	mov	r1, r0
 800ac74:	f104 0018 	add.w	r0, r4, #24
 800ac78:	f000 f81a 	bl	800acb0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ac7c:	4428      	add	r0, r5
 800ac7e:	bd38      	pop	{r3, r4, r5, pc}

0800ac80 <_Twist__max_serialized_size>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	2301      	movs	r3, #1
 800ac86:	2100      	movs	r1, #0
 800ac88:	f10d 0007 	add.w	r0, sp, #7
 800ac8c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ac90:	f000 f87e 	bl	800ad90 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ac94:	4604      	mov	r4, r0
 800ac96:	4601      	mov	r1, r0
 800ac98:	f10d 0007 	add.w	r0, sp, #7
 800ac9c:	f000 f878 	bl	800ad90 <max_serialized_size_geometry_msgs__msg__Vector3>
 800aca0:	4420      	add	r0, r4
 800aca2:	b002      	add	sp, #8
 800aca4:	bd10      	pop	{r4, pc}
 800aca6:	bf00      	nop

0800aca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aca8:	4800      	ldr	r0, [pc, #0]	@ (800acac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800acaa:	4770      	bx	lr
 800acac:	2000021c 	.word	0x2000021c

0800acb0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800acb0:	b1b8      	cbz	r0, 800ace2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800acb2:	b538      	push	{r3, r4, r5, lr}
 800acb4:	460d      	mov	r5, r1
 800acb6:	4628      	mov	r0, r5
 800acb8:	2108      	movs	r1, #8
 800acba:	f001 fe6f 	bl	800c99c <ucdr_alignment>
 800acbe:	f105 0308 	add.w	r3, r5, #8
 800acc2:	181c      	adds	r4, r3, r0
 800acc4:	2108      	movs	r1, #8
 800acc6:	4620      	mov	r0, r4
 800acc8:	f001 fe68 	bl	800c99c <ucdr_alignment>
 800accc:	3008      	adds	r0, #8
 800acce:	4404      	add	r4, r0
 800acd0:	2108      	movs	r1, #8
 800acd2:	4620      	mov	r0, r4
 800acd4:	f001 fe62 	bl	800c99c <ucdr_alignment>
 800acd8:	f1c5 0508 	rsb	r5, r5, #8
 800acdc:	4428      	add	r0, r5
 800acde:	4420      	add	r0, r4
 800ace0:	bd38      	pop	{r3, r4, r5, pc}
 800ace2:	4770      	bx	lr

0800ace4 <_Vector3__cdr_deserialize>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	460c      	mov	r4, r1
 800ace8:	b171      	cbz	r1, 800ad08 <_Vector3__cdr_deserialize+0x24>
 800acea:	4605      	mov	r5, r0
 800acec:	f001 fc6a 	bl	800c5c4 <ucdr_deserialize_double>
 800acf0:	f104 0108 	add.w	r1, r4, #8
 800acf4:	4628      	mov	r0, r5
 800acf6:	f001 fc65 	bl	800c5c4 <ucdr_deserialize_double>
 800acfa:	f104 0110 	add.w	r1, r4, #16
 800acfe:	4628      	mov	r0, r5
 800ad00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad04:	f001 bc5e 	b.w	800c5c4 <ucdr_deserialize_double>
 800ad08:	4608      	mov	r0, r1
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}

0800ad0c <_Vector3__cdr_serialize>:
 800ad0c:	b198      	cbz	r0, 800ad36 <_Vector3__cdr_serialize+0x2a>
 800ad0e:	b538      	push	{r3, r4, r5, lr}
 800ad10:	ed90 0b00 	vldr	d0, [r0]
 800ad14:	460d      	mov	r5, r1
 800ad16:	4604      	mov	r4, r0
 800ad18:	4608      	mov	r0, r1
 800ad1a:	f001 fab1 	bl	800c280 <ucdr_serialize_double>
 800ad1e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ad22:	4628      	mov	r0, r5
 800ad24:	f001 faac 	bl	800c280 <ucdr_serialize_double>
 800ad28:	ed94 0b04 	vldr	d0, [r4, #16]
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad32:	f001 baa5 	b.w	800c280 <ucdr_serialize_double>
 800ad36:	4770      	bx	lr

0800ad38 <_Vector3__get_serialized_size>:
 800ad38:	b198      	cbz	r0, 800ad62 <_Vector3__get_serialized_size+0x2a>
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	2108      	movs	r1, #8
 800ad3e:	2000      	movs	r0, #0
 800ad40:	f001 fe2c 	bl	800c99c <ucdr_alignment>
 800ad44:	f100 0408 	add.w	r4, r0, #8
 800ad48:	2108      	movs	r1, #8
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f001 fe26 	bl	800c99c <ucdr_alignment>
 800ad50:	3008      	adds	r0, #8
 800ad52:	4404      	add	r4, r0
 800ad54:	2108      	movs	r1, #8
 800ad56:	4620      	mov	r0, r4
 800ad58:	f001 fe20 	bl	800c99c <ucdr_alignment>
 800ad5c:	3008      	adds	r0, #8
 800ad5e:	4420      	add	r0, r4
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	4770      	bx	lr

0800ad64 <_Vector3__max_serialized_size>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	2108      	movs	r1, #8
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f001 fe17 	bl	800c99c <ucdr_alignment>
 800ad6e:	f100 0508 	add.w	r5, r0, #8
 800ad72:	2108      	movs	r1, #8
 800ad74:	4628      	mov	r0, r5
 800ad76:	f001 fe11 	bl	800c99c <ucdr_alignment>
 800ad7a:	f100 0408 	add.w	r4, r0, #8
 800ad7e:	442c      	add	r4, r5
 800ad80:	2108      	movs	r1, #8
 800ad82:	4620      	mov	r0, r4
 800ad84:	f001 fe0a 	bl	800c99c <ucdr_alignment>
 800ad88:	3008      	adds	r0, #8
 800ad8a:	4420      	add	r0, r4
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	bf00      	nop

0800ad90 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	2301      	movs	r3, #1
 800ad94:	460c      	mov	r4, r1
 800ad96:	7003      	strb	r3, [r0, #0]
 800ad98:	2108      	movs	r1, #8
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f001 fdfe 	bl	800c99c <ucdr_alignment>
 800ada0:	f104 0508 	add.w	r5, r4, #8
 800ada4:	1946      	adds	r6, r0, r5
 800ada6:	2108      	movs	r1, #8
 800ada8:	4630      	mov	r0, r6
 800adaa:	f001 fdf7 	bl	800c99c <ucdr_alignment>
 800adae:	f100 0508 	add.w	r5, r0, #8
 800adb2:	4435      	add	r5, r6
 800adb4:	2108      	movs	r1, #8
 800adb6:	4628      	mov	r0, r5
 800adb8:	f001 fdf0 	bl	800c99c <ucdr_alignment>
 800adbc:	f1c4 0408 	rsb	r4, r4, #8
 800adc0:	4420      	add	r0, r4
 800adc2:	4428      	add	r0, r5
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	bf00      	nop

0800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800adc8:	4800      	ldr	r0, [pc, #0]	@ (800adcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800adca:	4770      	bx	lr
 800adcc:	20000244 	.word	0x20000244

0800add0 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate>:
 800add0:	4b04      	ldr	r3, [pc, #16]	@ (800ade4 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x14>)
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	b10a      	cbz	r2, 800adda <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0xa>
 800add6:	4803      	ldr	r0, [pc, #12]	@ (800ade4 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x14>)
 800add8:	4770      	bx	lr
 800adda:	4a03      	ldr	r2, [pc, #12]	@ (800ade8 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x18>)
 800addc:	4801      	ldr	r0, [pc, #4]	@ (800ade4 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x14>)
 800adde:	6812      	ldr	r2, [r2, #0]
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	4770      	bx	lr
 800ade4:	20000274 	.word	0x20000274
 800ade8:	20000528 	.word	0x20000528

0800adec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request>:
 800adec:	4b04      	ldr	r3, [pc, #16]	@ (800ae00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x14>)
 800adee:	4805      	ldr	r0, [pc, #20]	@ (800ae04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x18>)
 800adf0:	4905      	ldr	r1, [pc, #20]	@ (800ae08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x1c>)
 800adf2:	4a06      	ldr	r2, [pc, #24]	@ (800ae0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x20>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6003      	str	r3, [r0, #0]
 800adf8:	600b      	str	r3, [r1, #0]
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20000528 	.word	0x20000528
 800ae04:	20000290 	.word	0x20000290
 800ae08:	2000029c 	.word	0x2000029c
 800ae0c:	20000274 	.word	0x20000274

0800ae10 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus>:
 800ae10:	4b04      	ldr	r3, [pc, #16]	@ (800ae24 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x14>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	b10a      	cbz	r2, 800ae1a <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0xa>
 800ae16:	4803      	ldr	r0, [pc, #12]	@ (800ae24 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x14>)
 800ae18:	4770      	bx	lr
 800ae1a:	4a03      	ldr	r2, [pc, #12]	@ (800ae28 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x18>)
 800ae1c:	4801      	ldr	r0, [pc, #4]	@ (800ae24 <rosidl_typesupport_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x14>)
 800ae1e:	6812      	ldr	r2, [r2, #0]
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	4770      	bx	lr
 800ae24:	200002b0 	.word	0x200002b0
 800ae28:	20000528 	.word	0x20000528

0800ae2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request>:
 800ae2c:	4b04      	ldr	r3, [pc, #16]	@ (800ae40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x14>)
 800ae2e:	4805      	ldr	r0, [pc, #20]	@ (800ae44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x18>)
 800ae30:	4905      	ldr	r1, [pc, #20]	@ (800ae48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x1c>)
 800ae32:	4a06      	ldr	r2, [pc, #24]	@ (800ae4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x20>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	6003      	str	r3, [r0, #0]
 800ae38:	600b      	str	r3, [r1, #0]
 800ae3a:	6013      	str	r3, [r2, #0]
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	20000528 	.word	0x20000528
 800ae44:	200002cc 	.word	0x200002cc
 800ae48:	200002d8 	.word	0x200002d8
 800ae4c:	200002b0 	.word	0x200002b0

0800ae50 <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__size_function__Calibrate_Request__data>:
 800ae50:	6840      	ldr	r0, [r0, #4]
 800ae52:	4770      	bx	lr

0800ae54 <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__get_const_function__Calibrate_Request__data>:
 800ae54:	6800      	ldr	r0, [r0, #0]
 800ae56:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ae5a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ae5e:	4770      	bx	lr

0800ae60 <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__fetch_function__Calibrate_Request__data>:
 800ae60:	6803      	ldr	r3, [r0, #0]
 800ae62:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ae66:	b500      	push	{lr}
 800ae68:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800ae6c:	4694      	mov	ip, r2
 800ae6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae76:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800ae7a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800ae7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae82:	bf00      	nop

0800ae84 <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__assign_function__Calibrate_Request__data>:
 800ae84:	6803      	ldr	r3, [r0, #0]
 800ae86:	b500      	push	{lr}
 800ae88:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ae8c:	4696      	mov	lr, r2
 800ae8e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800ae92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ae96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ae9a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800ae9e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800aea2:	f85d fb04 	ldr.w	pc, [sp], #4
 800aea6:	bf00      	nop

0800aea8 <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__Calibrate_Request_init_function>:
 800aea8:	f005 ba76 	b.w	8010398 <imu_custom_msg__srv__Calibrate_Request__init>

0800aeac <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__Calibrate_Request_fini_function>:
 800aeac:	f005 ba86 	b.w	80103bc <imu_custom_msg__srv__Calibrate_Request__fini>

0800aeb0 <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__resize_function__Calibrate_Request__data>:
 800aeb0:	b510      	push	{r4, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	9101      	str	r1, [sp, #4]
 800aeb8:	f004 fdea 	bl	800fa90 <std_msgs__msg__Float64MultiArray__Sequence__fini>
 800aebc:	9901      	ldr	r1, [sp, #4]
 800aebe:	4620      	mov	r0, r4
 800aec0:	b002      	add	sp, #8
 800aec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aec6:	f004 bddf 	b.w	800fa88 <std_msgs__msg__Float64MultiArray__Sequence__init>
 800aeca:	bf00      	nop

0800aecc <imu_custom_msg__srv__Calibrate_Response__rosidl_typesupport_introspection_c__Calibrate_Response_init_function>:
 800aecc:	f005 ba7a 	b.w	80103c4 <imu_custom_msg__srv__Calibrate_Response__init>

0800aed0 <imu_custom_msg__srv__Calibrate_Response__rosidl_typesupport_introspection_c__Calibrate_Response_fini_function>:
 800aed0:	f005 ba8a 	b.w	80103e8 <imu_custom_msg__srv__Calibrate_Response__fini>

0800aed4 <imu_custom_msg__srv__Calibrate_Request__rosidl_typesupport_introspection_c__get_function__Calibrate_Request__data>:
 800aed4:	6800      	ldr	r0, [r0, #0]
 800aed6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800aeda:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800aede:	4770      	bx	lr

0800aee0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request>:
 800aee0:	b508      	push	{r3, lr}
 800aee2:	f004 fe55 	bl	800fb90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800aee6:	4b06      	ldr	r3, [pc, #24]	@ (800af00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x20>)
 800aee8:	4906      	ldr	r1, [pc, #24]	@ (800af04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x24>)
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	60c8      	str	r0, [r1, #12]
 800aeee:	b10a      	cbz	r2, 800aef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x14>
 800aef0:	4803      	ldr	r0, [pc, #12]	@ (800af00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x20>)
 800aef2:	bd08      	pop	{r3, pc}
 800aef4:	4a04      	ldr	r2, [pc, #16]	@ (800af08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x28>)
 800aef6:	4802      	ldr	r0, [pc, #8]	@ (800af00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x20>)
 800aef8:	6812      	ldr	r2, [r2, #0]
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	bd08      	pop	{r3, pc}
 800aefe:	bf00      	nop
 800af00:	20000320 	.word	0x20000320
 800af04:	200002e4 	.word	0x200002e4
 800af08:	2000052c 	.word	0x2000052c

0800af0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response>:
 800af0c:	b508      	push	{r3, lr}
 800af0e:	f004 fe05 	bl	800fb1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800af12:	4b06      	ldr	r3, [pc, #24]	@ (800af2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response+0x20>)
 800af14:	4906      	ldr	r1, [pc, #24]	@ (800af30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response+0x24>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	60c8      	str	r0, [r1, #12]
 800af1a:	b10a      	cbz	r2, 800af20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response+0x14>
 800af1c:	4803      	ldr	r0, [pc, #12]	@ (800af2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response+0x20>)
 800af1e:	bd08      	pop	{r3, pc}
 800af20:	4a04      	ldr	r2, [pc, #16]	@ (800af34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response+0x28>)
 800af22:	4802      	ldr	r0, [pc, #8]	@ (800af2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response+0x20>)
 800af24:	6812      	ldr	r2, [r2, #0]
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	bd08      	pop	{r3, pc}
 800af2a:	bf00      	nop
 800af2c:	20000368 	.word	0x20000368
 800af30:	2000032c 	.word	0x2000032c
 800af34:	2000052c 	.word	0x2000052c

0800af38 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate>:
 800af38:	4b18      	ldr	r3, [pc, #96]	@ (800af9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x64>)
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	b510      	push	{r4, lr}
 800af3e:	b132      	cbz	r2, 800af4e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x16>
 800af40:	685c      	ldr	r4, [r3, #4]
 800af42:	68a3      	ldr	r3, [r4, #8]
 800af44:	b153      	cbz	r3, 800af5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x24>
 800af46:	68e3      	ldr	r3, [r4, #12]
 800af48:	b1a3      	cbz	r3, 800af74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x3c>
 800af4a:	4814      	ldr	r0, [pc, #80]	@ (800af9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x64>)
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	4a14      	ldr	r2, [pc, #80]	@ (800afa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x68>)
 800af50:	685c      	ldr	r4, [r3, #4]
 800af52:	6812      	ldr	r2, [r2, #0]
 800af54:	601a      	str	r2, [r3, #0]
 800af56:	68a3      	ldr	r3, [r4, #8]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1f4      	bne.n	800af46 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0xe>
 800af5c:	f004 fe18 	bl	800fb90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800af60:	4b10      	ldr	r3, [pc, #64]	@ (800afa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x6c>)
 800af62:	4911      	ldr	r1, [pc, #68]	@ (800afa8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x70>)
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	60c8      	str	r0, [r1, #12]
 800af68:	b19a      	cbz	r2, 800af92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x5a>
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	60a3      	str	r3, [r4, #8]
 800af6e:	68e3      	ldr	r3, [r4, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1ea      	bne.n	800af4a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x12>
 800af74:	f004 fdd2 	bl	800fb1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800af78:	4b0c      	ldr	r3, [pc, #48]	@ (800afac <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x74>)
 800af7a:	490d      	ldr	r1, [pc, #52]	@ (800afb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x78>)
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	60c8      	str	r0, [r1, #12]
 800af80:	b11a      	cbz	r2, 800af8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x52>
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	4805      	ldr	r0, [pc, #20]	@ (800af9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x64>)
 800af86:	60e3      	str	r3, [r4, #12]
 800af88:	bd10      	pop	{r4, pc}
 800af8a:	4a05      	ldr	r2, [pc, #20]	@ (800afa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x68>)
 800af8c:	6812      	ldr	r2, [r2, #0]
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	e7f7      	b.n	800af82 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x4a>
 800af92:	4a03      	ldr	r2, [pc, #12]	@ (800afa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x68>)
 800af94:	6812      	ldr	r2, [r2, #0]
 800af96:	601a      	str	r2, [r3, #0]
 800af98:	e7e7      	b.n	800af6a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x32>
 800af9a:	bf00      	nop
 800af9c:	20000384 	.word	0x20000384
 800afa0:	2000052c 	.word	0x2000052c
 800afa4:	20000320 	.word	0x20000320
 800afa8:	200002e4 	.word	0x200002e4
 800afac:	20000368 	.word	0x20000368
 800afb0:	2000032c 	.word	0x2000032c

0800afb4 <imu_custom_msg__srv__GetStatus_Request__rosidl_typesupport_introspection_c__GetStatus_Request_init_function>:
 800afb4:	f005 ba1c 	b.w	80103f0 <imu_custom_msg__srv__GetStatus_Request__init>

0800afb8 <imu_custom_msg__srv__GetStatus_Request__rosidl_typesupport_introspection_c__GetStatus_Request_fini_function>:
 800afb8:	f005 ba1e 	b.w	80103f8 <imu_custom_msg__srv__GetStatus_Request__fini>

0800afbc <imu_custom_msg__srv__GetStatus_Response__rosidl_typesupport_introspection_c__GetStatus_Response_init_function>:
 800afbc:	f005 ba1e 	b.w	80103fc <imu_custom_msg__srv__GetStatus_Response__init>

0800afc0 <imu_custom_msg__srv__GetStatus_Response__rosidl_typesupport_introspection_c__GetStatus_Response_fini_function>:
 800afc0:	f005 ba2e 	b.w	8010420 <imu_custom_msg__srv__GetStatus_Response__fini>

0800afc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request>:
 800afc4:	4b04      	ldr	r3, [pc, #16]	@ (800afd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x14>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	b10a      	cbz	r2, 800afce <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0xa>
 800afca:	4803      	ldr	r0, [pc, #12]	@ (800afd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x14>)
 800afcc:	4770      	bx	lr
 800afce:	4a03      	ldr	r2, [pc, #12]	@ (800afdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x18>)
 800afd0:	4801      	ldr	r0, [pc, #4]	@ (800afd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x14>)
 800afd2:	6812      	ldr	r2, [r2, #0]
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	4770      	bx	lr
 800afd8:	200003cc 	.word	0x200003cc
 800afdc:	2000052c 	.word	0x2000052c

0800afe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response>:
 800afe0:	b508      	push	{r3, lr}
 800afe2:	f004 fd9b 	bl	800fb1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800afe6:	4b06      	ldr	r3, [pc, #24]	@ (800b000 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response+0x20>)
 800afe8:	4906      	ldr	r1, [pc, #24]	@ (800b004 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response+0x24>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	60c8      	str	r0, [r1, #12]
 800afee:	b10a      	cbz	r2, 800aff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response+0x14>
 800aff0:	4803      	ldr	r0, [pc, #12]	@ (800b000 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response+0x20>)
 800aff2:	bd08      	pop	{r3, pc}
 800aff4:	4a04      	ldr	r2, [pc, #16]	@ (800b008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response+0x28>)
 800aff6:	4802      	ldr	r0, [pc, #8]	@ (800b000 <rosidl_typesupport_introspection_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response+0x20>)
 800aff8:	6812      	ldr	r2, [r2, #0]
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	bd08      	pop	{r3, pc}
 800affe:	bf00      	nop
 800b000:	20000414 	.word	0x20000414
 800b004:	200003d8 	.word	0x200003d8
 800b008:	2000052c 	.word	0x2000052c

0800b00c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus>:
 800b00c:	4b16      	ldr	r3, [pc, #88]	@ (800b068 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x5c>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	b510      	push	{r4, lr}
 800b012:	b132      	cbz	r2, 800b022 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x16>
 800b014:	685c      	ldr	r4, [r3, #4]
 800b016:	68a3      	ldr	r3, [r4, #8]
 800b018:	b153      	cbz	r3, 800b030 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x24>
 800b01a:	68e3      	ldr	r3, [r4, #12]
 800b01c:	b183      	cbz	r3, 800b040 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x34>
 800b01e:	4812      	ldr	r0, [pc, #72]	@ (800b068 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x5c>)
 800b020:	bd10      	pop	{r4, pc}
 800b022:	4a12      	ldr	r2, [pc, #72]	@ (800b06c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x60>)
 800b024:	685c      	ldr	r4, [r3, #4]
 800b026:	6812      	ldr	r2, [r2, #0]
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	68a3      	ldr	r3, [r4, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1f4      	bne.n	800b01a <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0xe>
 800b030:	4b0f      	ldr	r3, [pc, #60]	@ (800b070 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x64>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	b17a      	cbz	r2, 800b056 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x4a>
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	60a3      	str	r3, [r4, #8]
 800b03a:	68e3      	ldr	r3, [r4, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1ee      	bne.n	800b01e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x12>
 800b040:	f004 fd6c 	bl	800fb1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b044:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x68>)
 800b046:	490c      	ldr	r1, [pc, #48]	@ (800b078 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x6c>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	60c8      	str	r0, [r1, #12]
 800b04c:	b13a      	cbz	r2, 800b05e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x52>
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	4805      	ldr	r0, [pc, #20]	@ (800b068 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x5c>)
 800b052:	60e3      	str	r3, [r4, #12]
 800b054:	bd10      	pop	{r4, pc}
 800b056:	4a05      	ldr	r2, [pc, #20]	@ (800b06c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x60>)
 800b058:	6812      	ldr	r2, [r2, #0]
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	e7eb      	b.n	800b036 <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x2a>
 800b05e:	4a03      	ldr	r2, [pc, #12]	@ (800b06c <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x60>)
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	e7f3      	b.n	800b04e <rosidl_typesupport_introspection_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x42>
 800b066:	bf00      	nop
 800b068:	20000430 	.word	0x20000430
 800b06c:	2000052c 	.word	0x2000052c
 800b070:	200003cc 	.word	0x200003cc
 800b074:	20000414 	.word	0x20000414
 800b078:	200003d8 	.word	0x200003d8

0800b07c <_Calibrate_Request__max_serialized_size>:
 800b07c:	2000      	movs	r0, #0
 800b07e:	4770      	bx	lr

0800b080 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request>:
 800b080:	4800      	ldr	r0, [pc, #0]	@ (800b084 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Request+0x4>)
 800b082:	4770      	bx	lr
 800b084:	20000458 	.word	0x20000458

0800b088 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response>:
 800b088:	4800      	ldr	r0, [pc, #0]	@ (800b08c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__Calibrate_Response+0x4>)
 800b08a:	4770      	bx	lr
 800b08c:	20000464 	.word	0x20000464

0800b090 <get_serialized_size_imu_custom_msg__srv__Calibrate_Response>:
 800b090:	b108      	cbz	r0, 800b096 <get_serialized_size_imu_custom_msg__srv__Calibrate_Response+0x6>
 800b092:	f004 be15 	b.w	800fcc0 <get_serialized_size_std_msgs__msg__Bool>
 800b096:	4770      	bx	lr

0800b098 <_Calibrate_Response__max_serialized_size>:
 800b098:	b500      	push	{lr}
 800b09a:	b083      	sub	sp, #12
 800b09c:	2301      	movs	r3, #1
 800b09e:	2100      	movs	r1, #0
 800b0a0:	f10d 0007 	add.w	r0, sp, #7
 800b0a4:	f88d 3007 	strb.w	r3, [sp, #7]
 800b0a8:	f004 fe26 	bl	800fcf8 <max_serialized_size_std_msgs__msg__Bool>
 800b0ac:	b003      	add	sp, #12
 800b0ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0b2:	bf00      	nop

0800b0b4 <get_serialized_size_imu_custom_msg__srv__Calibrate_Request>:
 800b0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	b338      	cbz	r0, 800b10c <get_serialized_size_imu_custom_msg__srv__Calibrate_Request+0x58>
 800b0bc:	4689      	mov	r9, r1
 800b0be:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b0c2:	2104      	movs	r1, #4
 800b0c4:	4648      	mov	r0, r9
 800b0c6:	f001 fc69 	bl	800c99c <ucdr_alignment>
 800b0ca:	f109 0604 	add.w	r6, r9, #4
 800b0ce:	4406      	add	r6, r0
 800b0d0:	f1b8 0f00 	cmp.w	r8, #0
 800b0d4:	d018      	beq.n	800b108 <get_serialized_size_imu_custom_msg__srv__Calibrate_Request+0x54>
 800b0d6:	2500      	movs	r5, #0
 800b0d8:	f004 fea6 	bl	800fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	6843      	ldr	r3, [r0, #4]
 800b0e0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	695b      	ldr	r3, [r3, #20]
 800b0e8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b0ec:	4798      	blx	r3
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	2c04      	cmp	r4, #4
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	bf28      	it	cs
 800b0f8:	2104      	movcs	r1, #4
 800b0fa:	f001 fc4f 	bl	800c99c <ucdr_alignment>
 800b0fe:	3501      	adds	r5, #1
 800b100:	4404      	add	r4, r0
 800b102:	45a8      	cmp	r8, r5
 800b104:	4426      	add	r6, r4
 800b106:	d1e7      	bne.n	800b0d8 <get_serialized_size_imu_custom_msg__srv__Calibrate_Request+0x24>
 800b108:	eba6 0009 	sub.w	r0, r6, r9
 800b10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b110 <_Calibrate_Request__cdr_deserialize>:
 800b110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b112:	460e      	mov	r6, r1
 800b114:	b083      	sub	sp, #12
 800b116:	b301      	cbz	r1, 800b15a <_Calibrate_Request__cdr_deserialize+0x4a>
 800b118:	a901      	add	r1, sp, #4
 800b11a:	4607      	mov	r7, r0
 800b11c:	f000 fc9e 	bl	800ba5c <ucdr_deserialize_uint32_t>
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	68b2      	ldr	r2, [r6, #8]
 800b124:	429a      	cmp	r2, r3
 800b126:	d315      	bcc.n	800b154 <_Calibrate_Request__cdr_deserialize+0x44>
 800b128:	6073      	str	r3, [r6, #4]
 800b12a:	b1a3      	cbz	r3, 800b156 <_Calibrate_Request__cdr_deserialize+0x46>
 800b12c:	2400      	movs	r4, #0
 800b12e:	4625      	mov	r5, r4
 800b130:	e002      	b.n	800b138 <_Calibrate_Request__cdr_deserialize+0x28>
 800b132:	9b01      	ldr	r3, [sp, #4]
 800b134:	429d      	cmp	r5, r3
 800b136:	d20e      	bcs.n	800b156 <_Calibrate_Request__cdr_deserialize+0x46>
 800b138:	f004 fe76 	bl	800fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800b13c:	6831      	ldr	r1, [r6, #0]
 800b13e:	6843      	ldr	r3, [r0, #4]
 800b140:	4421      	add	r1, r4
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	4638      	mov	r0, r7
 800b146:	4798      	blx	r3
 800b148:	3501      	adds	r5, #1
 800b14a:	341c      	adds	r4, #28
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d1f0      	bne.n	800b132 <_Calibrate_Request__cdr_deserialize+0x22>
 800b150:	b003      	add	sp, #12
 800b152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b154:	2000      	movs	r0, #0
 800b156:	b003      	add	sp, #12
 800b158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b15a:	4608      	mov	r0, r1
 800b15c:	b003      	add	sp, #12
 800b15e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b160 <_Calibrate_Request__cdr_serialize>:
 800b160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b164:	b1d8      	cbz	r0, 800b19e <_Calibrate_Request__cdr_serialize+0x3e>
 800b166:	6847      	ldr	r7, [r0, #4]
 800b168:	460e      	mov	r6, r1
 800b16a:	4605      	mov	r5, r0
 800b16c:	4608      	mov	r0, r1
 800b16e:	4639      	mov	r1, r7
 800b170:	f000 fb44 	bl	800b7fc <ucdr_serialize_uint32_t>
 800b174:	4680      	mov	r8, r0
 800b176:	b190      	cbz	r0, 800b19e <_Calibrate_Request__cdr_serialize+0x3e>
 800b178:	b19f      	cbz	r7, 800b1a2 <_Calibrate_Request__cdr_serialize+0x42>
 800b17a:	2400      	movs	r4, #0
 800b17c:	e001      	b.n	800b182 <_Calibrate_Request__cdr_serialize+0x22>
 800b17e:	42a7      	cmp	r7, r4
 800b180:	d00f      	beq.n	800b1a2 <_Calibrate_Request__cdr_serialize+0x42>
 800b182:	f004 fe51 	bl	800fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800b186:	682a      	ldr	r2, [r5, #0]
 800b188:	6843      	ldr	r3, [r0, #4]
 800b18a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	4631      	mov	r1, r6
 800b192:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b196:	3401      	adds	r4, #1
 800b198:	4798      	blx	r3
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d1ef      	bne.n	800b17e <_Calibrate_Request__cdr_serialize+0x1e>
 800b19e:	f04f 0800 	mov.w	r8, #0
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b1a8 <_Calibrate_Response__get_serialized_size>:
 800b1a8:	b110      	cbz	r0, 800b1b0 <_Calibrate_Response__get_serialized_size+0x8>
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	f004 bd88 	b.w	800fcc0 <get_serialized_size_std_msgs__msg__Bool>
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop

0800b1b4 <_Calibrate_Response__cdr_deserialize>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	460c      	mov	r4, r1
 800b1b8:	b149      	cbz	r1, 800b1ce <_Calibrate_Response__cdr_deserialize+0x1a>
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	f004 fda6 	bl	800fd0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b1c0:	6843      	ldr	r3, [r0, #4]
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1cc:	4718      	bx	r3
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	bd70      	pop	{r4, r5, r6, pc}
 800b1d2:	bf00      	nop

0800b1d4 <_Calibrate_Response__cdr_serialize>:
 800b1d4:	b158      	cbz	r0, 800b1ee <_Calibrate_Response__cdr_serialize+0x1a>
 800b1d6:	b570      	push	{r4, r5, r6, lr}
 800b1d8:	460d      	mov	r5, r1
 800b1da:	4604      	mov	r4, r0
 800b1dc:	f004 fd96 	bl	800fd0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b1e0:	6843      	ldr	r3, [r0, #4]
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b1ec:	4718      	bx	r3
 800b1ee:	4770      	bx	lr

0800b1f0 <_Calibrate_Request__get_serialized_size>:
 800b1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	b328      	cbz	r0, 800b244 <_Calibrate_Request__get_serialized_size+0x54>
 800b1f8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b1fc:	2104      	movs	r1, #4
 800b1fe:	2000      	movs	r0, #0
 800b200:	f001 fbcc 	bl	800c99c <ucdr_alignment>
 800b204:	1d06      	adds	r6, r0, #4
 800b206:	f1b8 0f00 	cmp.w	r8, #0
 800b20a:	d018      	beq.n	800b23e <_Calibrate_Request__get_serialized_size+0x4e>
 800b20c:	2500      	movs	r5, #0
 800b20e:	f004 fe0b 	bl	800fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	6843      	ldr	r3, [r0, #4]
 800b216:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800b21a:	4631      	mov	r1, r6
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800b222:	4798      	blx	r3
 800b224:	4604      	mov	r4, r0
 800b226:	2c04      	cmp	r4, #4
 800b228:	4621      	mov	r1, r4
 800b22a:	4630      	mov	r0, r6
 800b22c:	bf28      	it	cs
 800b22e:	2104      	movcs	r1, #4
 800b230:	f001 fbb4 	bl	800c99c <ucdr_alignment>
 800b234:	3501      	adds	r5, #1
 800b236:	4404      	add	r4, r0
 800b238:	45a8      	cmp	r8, r5
 800b23a:	4426      	add	r6, r4
 800b23c:	d1e7      	bne.n	800b20e <_Calibrate_Request__get_serialized_size+0x1e>
 800b23e:	4630      	mov	r0, r6
 800b240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b244:	4606      	mov	r6, r0
 800b246:	4630      	mov	r0, r6
 800b248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b24c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate>:
 800b24c:	4800      	ldr	r0, [pc, #0]	@ (800b250 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_custom_msg__srv__Calibrate+0x4>)
 800b24e:	4770      	bx	lr
 800b250:	2000044c 	.word	0x2000044c

0800b254 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request>:
 800b254:	4800      	ldr	r0, [pc, #0]	@ (800b258 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Request+0x4>)
 800b256:	4770      	bx	lr
 800b258:	200004c4 	.word	0x200004c4

0800b25c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response>:
 800b25c:	4800      	ldr	r0, [pc, #0]	@ (800b260 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__imu_custom_msg__srv__GetStatus_Response+0x4>)
 800b25e:	4770      	bx	lr
 800b260:	200004d0 	.word	0x200004d0

0800b264 <_GetStatus_Request__max_serialized_size>:
 800b264:	b508      	push	{r3, lr}
 800b266:	2101      	movs	r1, #1
 800b268:	2000      	movs	r0, #0
 800b26a:	f001 fb97 	bl	800c99c <ucdr_alignment>
 800b26e:	3001      	adds	r0, #1
 800b270:	bd08      	pop	{r3, pc}
 800b272:	bf00      	nop

0800b274 <_GetStatus_Request__cdr_deserialize>:
 800b274:	b109      	cbz	r1, 800b27a <_GetStatus_Request__cdr_deserialize+0x6>
 800b276:	f000 b8c1 	b.w	800b3fc <ucdr_deserialize_uint8_t>
 800b27a:	4608      	mov	r0, r1
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop

0800b280 <get_serialized_size_imu_custom_msg__srv__GetStatus_Response>:
 800b280:	b108      	cbz	r0, 800b286 <get_serialized_size_imu_custom_msg__srv__GetStatus_Response+0x6>
 800b282:	f004 bd1d 	b.w	800fcc0 <get_serialized_size_std_msgs__msg__Bool>
 800b286:	4770      	bx	lr

0800b288 <_GetStatus_Response__max_serialized_size>:
 800b288:	b500      	push	{lr}
 800b28a:	b083      	sub	sp, #12
 800b28c:	2301      	movs	r3, #1
 800b28e:	2100      	movs	r1, #0
 800b290:	f10d 0007 	add.w	r0, sp, #7
 800b294:	f88d 3007 	strb.w	r3, [sp, #7]
 800b298:	f004 fd2e 	bl	800fcf8 <max_serialized_size_std_msgs__msg__Bool>
 800b29c:	b003      	add	sp, #12
 800b29e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b2a2:	bf00      	nop

0800b2a4 <get_serialized_size_imu_custom_msg__srv__GetStatus_Request>:
 800b2a4:	b138      	cbz	r0, 800b2b6 <get_serialized_size_imu_custom_msg__srv__GetStatus_Request+0x12>
 800b2a6:	b508      	push	{r3, lr}
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	f001 fb75 	bl	800c99c <ucdr_alignment>
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	bd08      	pop	{r3, pc}
 800b2b6:	4770      	bx	lr

0800b2b8 <_GetStatus_Request__cdr_serialize>:
 800b2b8:	460a      	mov	r2, r1
 800b2ba:	b118      	cbz	r0, 800b2c4 <_GetStatus_Request__cdr_serialize+0xc>
 800b2bc:	7801      	ldrb	r1, [r0, #0]
 800b2be:	4610      	mov	r0, r2
 800b2c0:	f000 b886 	b.w	800b3d0 <ucdr_serialize_uint8_t>
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop

0800b2c8 <_GetStatus_Response__get_serialized_size>:
 800b2c8:	b110      	cbz	r0, 800b2d0 <_GetStatus_Response__get_serialized_size+0x8>
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	f004 bcf8 	b.w	800fcc0 <get_serialized_size_std_msgs__msg__Bool>
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop

0800b2d4 <_GetStatus_Response__cdr_deserialize>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	b149      	cbz	r1, 800b2ee <_GetStatus_Response__cdr_deserialize+0x1a>
 800b2da:	4605      	mov	r5, r0
 800b2dc:	f004 fd16 	bl	800fd0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b2e0:	6843      	ldr	r3, [r0, #4]
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2ec:	4718      	bx	r3
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	bd70      	pop	{r4, r5, r6, pc}
 800b2f2:	bf00      	nop

0800b2f4 <_GetStatus_Response__cdr_serialize>:
 800b2f4:	b158      	cbz	r0, 800b30e <_GetStatus_Response__cdr_serialize+0x1a>
 800b2f6:	b570      	push	{r4, r5, r6, lr}
 800b2f8:	460d      	mov	r5, r1
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	f004 fd06 	bl	800fd0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>
 800b300:	6843      	ldr	r3, [r0, #4]
 800b302:	4629      	mov	r1, r5
 800b304:	4620      	mov	r0, r4
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b30c:	4718      	bx	r3
 800b30e:	4770      	bx	lr

0800b310 <_GetStatus_Request__get_serialized_size>:
 800b310:	b130      	cbz	r0, 800b320 <_GetStatus_Request__get_serialized_size+0x10>
 800b312:	b508      	push	{r3, lr}
 800b314:	2101      	movs	r1, #1
 800b316:	2000      	movs	r0, #0
 800b318:	f001 fb40 	bl	800c99c <ucdr_alignment>
 800b31c:	3001      	adds	r0, #1
 800b31e:	bd08      	pop	{r3, pc}
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop

0800b324 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus>:
 800b324:	4800      	ldr	r0, [pc, #0]	@ (800b328 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__imu_custom_msg__srv__GetStatus+0x4>)
 800b326:	4770      	bx	lr
 800b328:	200004b8 	.word	0x200004b8

0800b32c <micro_ros_string_utilities_init>:
 800b32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b330:	b086      	sub	sp, #24
 800b332:	460f      	mov	r7, r1
 800b334:	4604      	mov	r4, r0
 800b336:	a801      	add	r0, sp, #4
 800b338:	f002 fd76 	bl	800de28 <rcutils_get_default_allocator>
 800b33c:	4638      	mov	r0, r7
 800b33e:	f7f4 ff79 	bl	8000234 <strlen>
 800b342:	f100 0801 	add.w	r8, r0, #1
 800b346:	9b01      	ldr	r3, [sp, #4]
 800b348:	9905      	ldr	r1, [sp, #20]
 800b34a:	4605      	mov	r5, r0
 800b34c:	4640      	mov	r0, r8
 800b34e:	4798      	blx	r3
 800b350:	4642      	mov	r2, r8
 800b352:	4606      	mov	r6, r0
 800b354:	2100      	movs	r1, #0
 800b356:	f00f f953 	bl	801a600 <memset>
 800b35a:	462a      	mov	r2, r5
 800b35c:	4639      	mov	r1, r7
 800b35e:	4630      	mov	r0, r6
 800b360:	f00f fa17 	bl	801a792 <memcpy>
 800b364:	4620      	mov	r0, r4
 800b366:	e9c4 6500 	strd	r6, r5, [r4]
 800b36a:	f8c4 8008 	str.w	r8, [r4, #8]
 800b36e:	b006      	add	sp, #24
 800b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b374 <ucdr_serialize_bool>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	460d      	mov	r5, r1
 800b378:	2101      	movs	r1, #1
 800b37a:	4604      	mov	r4, r0
 800b37c:	f001 fac2 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b380:	b148      	cbz	r0, 800b396 <ucdr_serialize_bool+0x22>
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	701d      	strb	r5, [r3, #0]
 800b386:	68a2      	ldr	r2, [r4, #8]
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	2101      	movs	r1, #1
 800b38c:	440a      	add	r2, r1
 800b38e:	440b      	add	r3, r1
 800b390:	60a2      	str	r2, [r4, #8]
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	7561      	strb	r1, [r4, #21]
 800b396:	7da0      	ldrb	r0, [r4, #22]
 800b398:	f080 0001 	eor.w	r0, r0, #1
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	bf00      	nop

0800b3a0 <ucdr_deserialize_bool>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	f001 faac 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b3ac:	b160      	cbz	r0, 800b3c8 <ucdr_deserialize_bool+0x28>
 800b3ae:	68a2      	ldr	r2, [r4, #8]
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b3b6:	3900      	subs	r1, #0
 800b3b8:	bf18      	it	ne
 800b3ba:	2101      	movne	r1, #1
 800b3bc:	7029      	strb	r1, [r5, #0]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	60a2      	str	r2, [r4, #8]
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	7561      	strb	r1, [r4, #21]
 800b3c8:	7da0      	ldrb	r0, [r4, #22]
 800b3ca:	f080 0001 	eor.w	r0, r0, #1
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}

0800b3d0 <ucdr_serialize_uint8_t>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	f001 fa94 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b3dc:	b148      	cbz	r0, 800b3f2 <ucdr_serialize_uint8_t+0x22>
 800b3de:	68a3      	ldr	r3, [r4, #8]
 800b3e0:	701d      	strb	r5, [r3, #0]
 800b3e2:	68a2      	ldr	r2, [r4, #8]
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	440a      	add	r2, r1
 800b3ea:	440b      	add	r3, r1
 800b3ec:	60a2      	str	r2, [r4, #8]
 800b3ee:	6123      	str	r3, [r4, #16]
 800b3f0:	7561      	strb	r1, [r4, #21]
 800b3f2:	7da0      	ldrb	r0, [r4, #22]
 800b3f4:	f080 0001 	eor.w	r0, r0, #1
 800b3f8:	bd38      	pop	{r3, r4, r5, pc}
 800b3fa:	bf00      	nop

0800b3fc <ucdr_deserialize_uint8_t>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	460d      	mov	r5, r1
 800b400:	2101      	movs	r1, #1
 800b402:	4604      	mov	r4, r0
 800b404:	f001 fa7e 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b408:	b150      	cbz	r0, 800b420 <ucdr_deserialize_uint8_t+0x24>
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	702b      	strb	r3, [r5, #0]
 800b410:	68a2      	ldr	r2, [r4, #8]
 800b412:	6923      	ldr	r3, [r4, #16]
 800b414:	2101      	movs	r1, #1
 800b416:	440a      	add	r2, r1
 800b418:	440b      	add	r3, r1
 800b41a:	60a2      	str	r2, [r4, #8]
 800b41c:	6123      	str	r3, [r4, #16]
 800b41e:	7561      	strb	r1, [r4, #21]
 800b420:	7da0      	ldrb	r0, [r4, #22]
 800b422:	f080 0001 	eor.w	r0, r0, #1
 800b426:	bd38      	pop	{r3, r4, r5, pc}

0800b428 <ucdr_serialize_uint16_t>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	460b      	mov	r3, r1
 800b430:	2102      	movs	r1, #2
 800b432:	4604      	mov	r4, r0
 800b434:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b438:	f001 fab8 	bl	800c9ac <ucdr_buffer_alignment>
 800b43c:	4601      	mov	r1, r0
 800b43e:	4620      	mov	r0, r4
 800b440:	7d67      	ldrb	r7, [r4, #21]
 800b442:	f001 faf7 	bl	800ca34 <ucdr_advance_buffer>
 800b446:	2102      	movs	r1, #2
 800b448:	4620      	mov	r0, r4
 800b44a:	f001 fa4f 	bl	800c8ec <ucdr_check_buffer_available_for>
 800b44e:	bb78      	cbnz	r0, 800b4b0 <ucdr_serialize_uint16_t+0x88>
 800b450:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b454:	42ab      	cmp	r3, r5
 800b456:	d926      	bls.n	800b4a6 <ucdr_serialize_uint16_t+0x7e>
 800b458:	1b5e      	subs	r6, r3, r5
 800b45a:	60a3      	str	r3, [r4, #8]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	f1c6 0802 	rsb	r8, r6, #2
 800b462:	4433      	add	r3, r6
 800b464:	6123      	str	r3, [r4, #16]
 800b466:	4641      	mov	r1, r8
 800b468:	4620      	mov	r0, r4
 800b46a:	f001 fa4b 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d03b      	beq.n	800b4ea <ucdr_serialize_uint16_t+0xc2>
 800b472:	7d23      	ldrb	r3, [r4, #20]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d04a      	beq.n	800b50e <ucdr_serialize_uint16_t+0xe6>
 800b478:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b47c:	702b      	strb	r3, [r5, #0]
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d040      	beq.n	800b504 <ucdr_serialize_uint16_t+0xdc>
 800b482:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b486:	706b      	strb	r3, [r5, #1]
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	68a2      	ldr	r2, [r4, #8]
 800b48c:	7da0      	ldrb	r0, [r4, #22]
 800b48e:	3302      	adds	r3, #2
 800b490:	1b9e      	subs	r6, r3, r6
 800b492:	4442      	add	r2, r8
 800b494:	2302      	movs	r3, #2
 800b496:	f080 0001 	eor.w	r0, r0, #1
 800b49a:	60a2      	str	r2, [r4, #8]
 800b49c:	6126      	str	r6, [r4, #16]
 800b49e:	7563      	strb	r3, [r4, #21]
 800b4a0:	b002      	add	sp, #8
 800b4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a6:	2102      	movs	r1, #2
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f001 fa2b 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b4ae:	b190      	cbz	r0, 800b4d6 <ucdr_serialize_uint16_t+0xae>
 800b4b0:	7d23      	ldrb	r3, [r4, #20]
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	68a3      	ldr	r3, [r4, #8]
 800b4b6:	d014      	beq.n	800b4e2 <ucdr_serialize_uint16_t+0xba>
 800b4b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4c4:	705a      	strb	r2, [r3, #1]
 800b4c6:	68a2      	ldr	r2, [r4, #8]
 800b4c8:	6923      	ldr	r3, [r4, #16]
 800b4ca:	3202      	adds	r2, #2
 800b4cc:	3302      	adds	r3, #2
 800b4ce:	2102      	movs	r1, #2
 800b4d0:	60a2      	str	r2, [r4, #8]
 800b4d2:	6123      	str	r3, [r4, #16]
 800b4d4:	7561      	strb	r1, [r4, #21]
 800b4d6:	7da0      	ldrb	r0, [r4, #22]
 800b4d8:	f080 0001 	eor.w	r0, r0, #1
 800b4dc:	b002      	add	sp, #8
 800b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b4e6:	801a      	strh	r2, [r3, #0]
 800b4e8:	e7ed      	b.n	800b4c6 <ucdr_serialize_uint16_t+0x9e>
 800b4ea:	68a2      	ldr	r2, [r4, #8]
 800b4ec:	6923      	ldr	r3, [r4, #16]
 800b4ee:	7da0      	ldrb	r0, [r4, #22]
 800b4f0:	7567      	strb	r7, [r4, #21]
 800b4f2:	1b92      	subs	r2, r2, r6
 800b4f4:	1b9b      	subs	r3, r3, r6
 800b4f6:	f080 0001 	eor.w	r0, r0, #1
 800b4fa:	60a2      	str	r2, [r4, #8]
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	b002      	add	sp, #8
 800b500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b504:	68a3      	ldr	r3, [r4, #8]
 800b506:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b50a:	701a      	strb	r2, [r3, #0]
 800b50c:	e7bc      	b.n	800b488 <ucdr_serialize_uint16_t+0x60>
 800b50e:	4628      	mov	r0, r5
 800b510:	f10d 0506 	add.w	r5, sp, #6
 800b514:	4629      	mov	r1, r5
 800b516:	4632      	mov	r2, r6
 800b518:	f00f f93b 	bl	801a792 <memcpy>
 800b51c:	68a0      	ldr	r0, [r4, #8]
 800b51e:	4642      	mov	r2, r8
 800b520:	19a9      	adds	r1, r5, r6
 800b522:	f00f f936 	bl	801a792 <memcpy>
 800b526:	e7af      	b.n	800b488 <ucdr_serialize_uint16_t+0x60>

0800b528 <ucdr_serialize_endian_uint16_t>:
 800b528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b52c:	b083      	sub	sp, #12
 800b52e:	460d      	mov	r5, r1
 800b530:	2102      	movs	r1, #2
 800b532:	4604      	mov	r4, r0
 800b534:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b538:	f001 fa38 	bl	800c9ac <ucdr_buffer_alignment>
 800b53c:	4601      	mov	r1, r0
 800b53e:	4620      	mov	r0, r4
 800b540:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b544:	f001 fa76 	bl	800ca34 <ucdr_advance_buffer>
 800b548:	2102      	movs	r1, #2
 800b54a:	4620      	mov	r0, r4
 800b54c:	f001 f9ce 	bl	800c8ec <ucdr_check_buffer_available_for>
 800b550:	bb70      	cbnz	r0, 800b5b0 <ucdr_serialize_endian_uint16_t+0x88>
 800b552:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b556:	42be      	cmp	r6, r7
 800b558:	d925      	bls.n	800b5a6 <ucdr_serialize_endian_uint16_t+0x7e>
 800b55a:	6923      	ldr	r3, [r4, #16]
 800b55c:	60a6      	str	r6, [r4, #8]
 800b55e:	1bf6      	subs	r6, r6, r7
 800b560:	4433      	add	r3, r6
 800b562:	f1c6 0902 	rsb	r9, r6, #2
 800b566:	6123      	str	r3, [r4, #16]
 800b568:	4649      	mov	r1, r9
 800b56a:	4620      	mov	r0, r4
 800b56c:	f001 f9ca 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b570:	2800      	cmp	r0, #0
 800b572:	d039      	beq.n	800b5e8 <ucdr_serialize_endian_uint16_t+0xc0>
 800b574:	2d01      	cmp	r5, #1
 800b576:	d04a      	beq.n	800b60e <ucdr_serialize_endian_uint16_t+0xe6>
 800b578:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b57c:	703b      	strb	r3, [r7, #0]
 800b57e:	2e00      	cmp	r6, #0
 800b580:	d040      	beq.n	800b604 <ucdr_serialize_endian_uint16_t+0xdc>
 800b582:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b586:	707b      	strb	r3, [r7, #1]
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	68a2      	ldr	r2, [r4, #8]
 800b58c:	7da0      	ldrb	r0, [r4, #22]
 800b58e:	3302      	adds	r3, #2
 800b590:	444a      	add	r2, r9
 800b592:	1b9b      	subs	r3, r3, r6
 800b594:	2102      	movs	r1, #2
 800b596:	f080 0001 	eor.w	r0, r0, #1
 800b59a:	60a2      	str	r2, [r4, #8]
 800b59c:	6123      	str	r3, [r4, #16]
 800b59e:	7561      	strb	r1, [r4, #21]
 800b5a0:	b003      	add	sp, #12
 800b5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5a6:	2102      	movs	r1, #2
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f001 f9ab 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b5ae:	b188      	cbz	r0, 800b5d4 <ucdr_serialize_endian_uint16_t+0xac>
 800b5b0:	2d01      	cmp	r5, #1
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	d014      	beq.n	800b5e0 <ucdr_serialize_endian_uint16_t+0xb8>
 800b5b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5ba:	701a      	strb	r2, [r3, #0]
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5c2:	705a      	strb	r2, [r3, #1]
 800b5c4:	68a2      	ldr	r2, [r4, #8]
 800b5c6:	6923      	ldr	r3, [r4, #16]
 800b5c8:	3202      	adds	r2, #2
 800b5ca:	3302      	adds	r3, #2
 800b5cc:	2102      	movs	r1, #2
 800b5ce:	60a2      	str	r2, [r4, #8]
 800b5d0:	6123      	str	r3, [r4, #16]
 800b5d2:	7561      	strb	r1, [r4, #21]
 800b5d4:	7da0      	ldrb	r0, [r4, #22]
 800b5d6:	f080 0001 	eor.w	r0, r0, #1
 800b5da:	b003      	add	sp, #12
 800b5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5e4:	801a      	strh	r2, [r3, #0]
 800b5e6:	e7ed      	b.n	800b5c4 <ucdr_serialize_endian_uint16_t+0x9c>
 800b5e8:	68a2      	ldr	r2, [r4, #8]
 800b5ea:	6923      	ldr	r3, [r4, #16]
 800b5ec:	7da0      	ldrb	r0, [r4, #22]
 800b5ee:	f884 8015 	strb.w	r8, [r4, #21]
 800b5f2:	1b92      	subs	r2, r2, r6
 800b5f4:	1b9b      	subs	r3, r3, r6
 800b5f6:	f080 0001 	eor.w	r0, r0, #1
 800b5fa:	60a2      	str	r2, [r4, #8]
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	b003      	add	sp, #12
 800b600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b60a:	701a      	strb	r2, [r3, #0]
 800b60c:	e7bc      	b.n	800b588 <ucdr_serialize_endian_uint16_t+0x60>
 800b60e:	f10d 0506 	add.w	r5, sp, #6
 800b612:	4629      	mov	r1, r5
 800b614:	4632      	mov	r2, r6
 800b616:	4638      	mov	r0, r7
 800b618:	f00f f8bb 	bl	801a792 <memcpy>
 800b61c:	68a0      	ldr	r0, [r4, #8]
 800b61e:	464a      	mov	r2, r9
 800b620:	19a9      	adds	r1, r5, r6
 800b622:	f00f f8b6 	bl	801a792 <memcpy>
 800b626:	e7af      	b.n	800b588 <ucdr_serialize_endian_uint16_t+0x60>

0800b628 <ucdr_deserialize_uint16_t>:
 800b628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b62c:	460d      	mov	r5, r1
 800b62e:	2102      	movs	r1, #2
 800b630:	4604      	mov	r4, r0
 800b632:	f001 f9bb 	bl	800c9ac <ucdr_buffer_alignment>
 800b636:	4601      	mov	r1, r0
 800b638:	4620      	mov	r0, r4
 800b63a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b63e:	f001 f9f9 	bl	800ca34 <ucdr_advance_buffer>
 800b642:	2102      	movs	r1, #2
 800b644:	4620      	mov	r0, r4
 800b646:	f001 f951 	bl	800c8ec <ucdr_check_buffer_available_for>
 800b64a:	bb60      	cbnz	r0, 800b6a6 <ucdr_deserialize_uint16_t+0x7e>
 800b64c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b650:	42be      	cmp	r6, r7
 800b652:	d923      	bls.n	800b69c <ucdr_deserialize_uint16_t+0x74>
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	60a6      	str	r6, [r4, #8]
 800b658:	1bf6      	subs	r6, r6, r7
 800b65a:	4433      	add	r3, r6
 800b65c:	f1c6 0902 	rsb	r9, r6, #2
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	4649      	mov	r1, r9
 800b664:	4620      	mov	r0, r4
 800b666:	f001 f94d 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d034      	beq.n	800b6d8 <ucdr_deserialize_uint16_t+0xb0>
 800b66e:	7d23      	ldrb	r3, [r4, #20]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d042      	beq.n	800b6fa <ucdr_deserialize_uint16_t+0xd2>
 800b674:	787b      	ldrb	r3, [r7, #1]
 800b676:	702b      	strb	r3, [r5, #0]
 800b678:	2e00      	cmp	r6, #0
 800b67a:	d03a      	beq.n	800b6f2 <ucdr_deserialize_uint16_t+0xca>
 800b67c:	783b      	ldrb	r3, [r7, #0]
 800b67e:	706b      	strb	r3, [r5, #1]
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	68a2      	ldr	r2, [r4, #8]
 800b684:	7da0      	ldrb	r0, [r4, #22]
 800b686:	2102      	movs	r1, #2
 800b688:	3302      	adds	r3, #2
 800b68a:	444a      	add	r2, r9
 800b68c:	1b9b      	subs	r3, r3, r6
 800b68e:	7561      	strb	r1, [r4, #21]
 800b690:	60a2      	str	r2, [r4, #8]
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	f080 0001 	eor.w	r0, r0, #1
 800b698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69c:	2102      	movs	r1, #2
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f001 f930 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b6a4:	b180      	cbz	r0, 800b6c8 <ucdr_deserialize_uint16_t+0xa0>
 800b6a6:	7d23      	ldrb	r3, [r4, #20]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	d011      	beq.n	800b6d2 <ucdr_deserialize_uint16_t+0xaa>
 800b6ae:	785b      	ldrb	r3, [r3, #1]
 800b6b0:	702b      	strb	r3, [r5, #0]
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	706b      	strb	r3, [r5, #1]
 800b6b8:	68a2      	ldr	r2, [r4, #8]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	3202      	adds	r2, #2
 800b6be:	3302      	adds	r3, #2
 800b6c0:	2102      	movs	r1, #2
 800b6c2:	60a2      	str	r2, [r4, #8]
 800b6c4:	6123      	str	r3, [r4, #16]
 800b6c6:	7561      	strb	r1, [r4, #21]
 800b6c8:	7da0      	ldrb	r0, [r4, #22]
 800b6ca:	f080 0001 	eor.w	r0, r0, #1
 800b6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	802b      	strh	r3, [r5, #0]
 800b6d6:	e7ef      	b.n	800b6b8 <ucdr_deserialize_uint16_t+0x90>
 800b6d8:	68a2      	ldr	r2, [r4, #8]
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	7da0      	ldrb	r0, [r4, #22]
 800b6de:	f884 8015 	strb.w	r8, [r4, #21]
 800b6e2:	1b92      	subs	r2, r2, r6
 800b6e4:	1b9b      	subs	r3, r3, r6
 800b6e6:	60a2      	str	r2, [r4, #8]
 800b6e8:	6123      	str	r3, [r4, #16]
 800b6ea:	f080 0001 	eor.w	r0, r0, #1
 800b6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	706b      	strb	r3, [r5, #1]
 800b6f8:	e7c2      	b.n	800b680 <ucdr_deserialize_uint16_t+0x58>
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	f00f f847 	bl	801a792 <memcpy>
 800b704:	68a1      	ldr	r1, [r4, #8]
 800b706:	464a      	mov	r2, r9
 800b708:	19a8      	adds	r0, r5, r6
 800b70a:	f00f f842 	bl	801a792 <memcpy>
 800b70e:	e7b7      	b.n	800b680 <ucdr_deserialize_uint16_t+0x58>

0800b710 <ucdr_deserialize_endian_uint16_t>:
 800b710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b714:	460e      	mov	r6, r1
 800b716:	2102      	movs	r1, #2
 800b718:	4604      	mov	r4, r0
 800b71a:	4615      	mov	r5, r2
 800b71c:	f001 f946 	bl	800c9ac <ucdr_buffer_alignment>
 800b720:	4601      	mov	r1, r0
 800b722:	4620      	mov	r0, r4
 800b724:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b728:	f001 f984 	bl	800ca34 <ucdr_advance_buffer>
 800b72c:	2102      	movs	r1, #2
 800b72e:	4620      	mov	r0, r4
 800b730:	f001 f8dc 	bl	800c8ec <ucdr_check_buffer_available_for>
 800b734:	bb70      	cbnz	r0, 800b794 <ucdr_deserialize_endian_uint16_t+0x84>
 800b736:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b73a:	4547      	cmp	r7, r8
 800b73c:	d925      	bls.n	800b78a <ucdr_deserialize_endian_uint16_t+0x7a>
 800b73e:	6923      	ldr	r3, [r4, #16]
 800b740:	60a7      	str	r7, [r4, #8]
 800b742:	eba7 0708 	sub.w	r7, r7, r8
 800b746:	443b      	add	r3, r7
 800b748:	f1c7 0a02 	rsb	sl, r7, #2
 800b74c:	6123      	str	r3, [r4, #16]
 800b74e:	4651      	mov	r1, sl
 800b750:	4620      	mov	r0, r4
 800b752:	f001 f8d7 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b756:	2800      	cmp	r0, #0
 800b758:	d034      	beq.n	800b7c4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b75a:	2e01      	cmp	r6, #1
 800b75c:	d043      	beq.n	800b7e6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b75e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b762:	702b      	strb	r3, [r5, #0]
 800b764:	2f00      	cmp	r7, #0
 800b766:	d03a      	beq.n	800b7de <ucdr_deserialize_endian_uint16_t+0xce>
 800b768:	f898 3000 	ldrb.w	r3, [r8]
 800b76c:	706b      	strb	r3, [r5, #1]
 800b76e:	6923      	ldr	r3, [r4, #16]
 800b770:	68a2      	ldr	r2, [r4, #8]
 800b772:	7da0      	ldrb	r0, [r4, #22]
 800b774:	2102      	movs	r1, #2
 800b776:	3302      	adds	r3, #2
 800b778:	4452      	add	r2, sl
 800b77a:	1bdb      	subs	r3, r3, r7
 800b77c:	7561      	strb	r1, [r4, #21]
 800b77e:	60a2      	str	r2, [r4, #8]
 800b780:	6123      	str	r3, [r4, #16]
 800b782:	f080 0001 	eor.w	r0, r0, #1
 800b786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78a:	2102      	movs	r1, #2
 800b78c:	4620      	mov	r0, r4
 800b78e:	f001 f8b9 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b792:	b178      	cbz	r0, 800b7b4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b794:	2e01      	cmp	r6, #1
 800b796:	68a3      	ldr	r3, [r4, #8]
 800b798:	d011      	beq.n	800b7be <ucdr_deserialize_endian_uint16_t+0xae>
 800b79a:	785b      	ldrb	r3, [r3, #1]
 800b79c:	702b      	strb	r3, [r5, #0]
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	706b      	strb	r3, [r5, #1]
 800b7a4:	68a2      	ldr	r2, [r4, #8]
 800b7a6:	6923      	ldr	r3, [r4, #16]
 800b7a8:	3202      	adds	r2, #2
 800b7aa:	3302      	adds	r3, #2
 800b7ac:	2102      	movs	r1, #2
 800b7ae:	60a2      	str	r2, [r4, #8]
 800b7b0:	6123      	str	r3, [r4, #16]
 800b7b2:	7561      	strb	r1, [r4, #21]
 800b7b4:	7da0      	ldrb	r0, [r4, #22]
 800b7b6:	f080 0001 	eor.w	r0, r0, #1
 800b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7be:	881b      	ldrh	r3, [r3, #0]
 800b7c0:	802b      	strh	r3, [r5, #0]
 800b7c2:	e7ef      	b.n	800b7a4 <ucdr_deserialize_endian_uint16_t+0x94>
 800b7c4:	68a2      	ldr	r2, [r4, #8]
 800b7c6:	6923      	ldr	r3, [r4, #16]
 800b7c8:	7da0      	ldrb	r0, [r4, #22]
 800b7ca:	f884 9015 	strb.w	r9, [r4, #21]
 800b7ce:	1bd2      	subs	r2, r2, r7
 800b7d0:	1bdb      	subs	r3, r3, r7
 800b7d2:	60a2      	str	r2, [r4, #8]
 800b7d4:	6123      	str	r3, [r4, #16]
 800b7d6:	f080 0001 	eor.w	r0, r0, #1
 800b7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7de:	68a3      	ldr	r3, [r4, #8]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	706b      	strb	r3, [r5, #1]
 800b7e4:	e7c3      	b.n	800b76e <ucdr_deserialize_endian_uint16_t+0x5e>
 800b7e6:	4641      	mov	r1, r8
 800b7e8:	463a      	mov	r2, r7
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f00e ffd1 	bl	801a792 <memcpy>
 800b7f0:	68a1      	ldr	r1, [r4, #8]
 800b7f2:	4652      	mov	r2, sl
 800b7f4:	19e8      	adds	r0, r5, r7
 800b7f6:	f00e ffcc 	bl	801a792 <memcpy>
 800b7fa:	e7b8      	b.n	800b76e <ucdr_deserialize_endian_uint16_t+0x5e>

0800b7fc <ucdr_serialize_uint32_t>:
 800b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b800:	b082      	sub	sp, #8
 800b802:	4604      	mov	r4, r0
 800b804:	9101      	str	r1, [sp, #4]
 800b806:	2104      	movs	r1, #4
 800b808:	f001 f8d0 	bl	800c9ac <ucdr_buffer_alignment>
 800b80c:	4601      	mov	r1, r0
 800b80e:	4620      	mov	r0, r4
 800b810:	7d67      	ldrb	r7, [r4, #21]
 800b812:	f001 f90f 	bl	800ca34 <ucdr_advance_buffer>
 800b816:	2104      	movs	r1, #4
 800b818:	4620      	mov	r0, r4
 800b81a:	f001 f867 	bl	800c8ec <ucdr_check_buffer_available_for>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d139      	bne.n	800b896 <ucdr_serialize_uint32_t+0x9a>
 800b822:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b826:	42ab      	cmp	r3, r5
 800b828:	d930      	bls.n	800b88c <ucdr_serialize_uint32_t+0x90>
 800b82a:	1b5e      	subs	r6, r3, r5
 800b82c:	60a3      	str	r3, [r4, #8]
 800b82e:	6923      	ldr	r3, [r4, #16]
 800b830:	f1c6 0804 	rsb	r8, r6, #4
 800b834:	4433      	add	r3, r6
 800b836:	6123      	str	r3, [r4, #16]
 800b838:	4641      	mov	r1, r8
 800b83a:	4620      	mov	r0, r4
 800b83c:	f001 f862 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b840:	2800      	cmp	r0, #0
 800b842:	d04c      	beq.n	800b8de <ucdr_serialize_uint32_t+0xe2>
 800b844:	7d23      	ldrb	r3, [r4, #20]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d063      	beq.n	800b912 <ucdr_serialize_uint32_t+0x116>
 800b84a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b84e:	702b      	strb	r3, [r5, #0]
 800b850:	2e00      	cmp	r6, #0
 800b852:	d051      	beq.n	800b8f8 <ucdr_serialize_uint32_t+0xfc>
 800b854:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b858:	706b      	strb	r3, [r5, #1]
 800b85a:	2e01      	cmp	r6, #1
 800b85c:	d050      	beq.n	800b900 <ucdr_serialize_uint32_t+0x104>
 800b85e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b862:	70ab      	strb	r3, [r5, #2]
 800b864:	2e02      	cmp	r6, #2
 800b866:	d04f      	beq.n	800b908 <ucdr_serialize_uint32_t+0x10c>
 800b868:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b86c:	70eb      	strb	r3, [r5, #3]
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	68a2      	ldr	r2, [r4, #8]
 800b872:	7da0      	ldrb	r0, [r4, #22]
 800b874:	3304      	adds	r3, #4
 800b876:	1b9e      	subs	r6, r3, r6
 800b878:	4442      	add	r2, r8
 800b87a:	2304      	movs	r3, #4
 800b87c:	f080 0001 	eor.w	r0, r0, #1
 800b880:	60a2      	str	r2, [r4, #8]
 800b882:	6126      	str	r6, [r4, #16]
 800b884:	7563      	strb	r3, [r4, #21]
 800b886:	b002      	add	sp, #8
 800b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88c:	2104      	movs	r1, #4
 800b88e:	4620      	mov	r0, r4
 800b890:	f001 f838 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b894:	b1d0      	cbz	r0, 800b8cc <ucdr_serialize_uint32_t+0xd0>
 800b896:	7d23      	ldrb	r3, [r4, #20]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	d01c      	beq.n	800b8d8 <ucdr_serialize_uint32_t+0xdc>
 800b89e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b8a2:	701a      	strb	r2, [r3, #0]
 800b8a4:	68a3      	ldr	r3, [r4, #8]
 800b8a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8aa:	705a      	strb	r2, [r3, #1]
 800b8ac:	68a3      	ldr	r3, [r4, #8]
 800b8ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8b2:	709a      	strb	r2, [r3, #2]
 800b8b4:	68a3      	ldr	r3, [r4, #8]
 800b8b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8ba:	70da      	strb	r2, [r3, #3]
 800b8bc:	68a2      	ldr	r2, [r4, #8]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	3204      	adds	r2, #4
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	60a2      	str	r2, [r4, #8]
 800b8c8:	6123      	str	r3, [r4, #16]
 800b8ca:	7561      	strb	r1, [r4, #21]
 800b8cc:	7da0      	ldrb	r0, [r4, #22]
 800b8ce:	f080 0001 	eor.w	r0, r0, #1
 800b8d2:	b002      	add	sp, #8
 800b8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d8:	9a01      	ldr	r2, [sp, #4]
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	e7ee      	b.n	800b8bc <ucdr_serialize_uint32_t+0xc0>
 800b8de:	68a2      	ldr	r2, [r4, #8]
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	7da0      	ldrb	r0, [r4, #22]
 800b8e4:	7567      	strb	r7, [r4, #21]
 800b8e6:	1b92      	subs	r2, r2, r6
 800b8e8:	1b9b      	subs	r3, r3, r6
 800b8ea:	f080 0001 	eor.w	r0, r0, #1
 800b8ee:	60a2      	str	r2, [r4, #8]
 800b8f0:	6123      	str	r3, [r4, #16]
 800b8f2:	b002      	add	sp, #8
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	68a3      	ldr	r3, [r4, #8]
 800b8fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8fe:	701a      	strb	r2, [r3, #0]
 800b900:	68a3      	ldr	r3, [r4, #8]
 800b902:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b906:	701a      	strb	r2, [r3, #0]
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	e7ad      	b.n	800b86e <ucdr_serialize_uint32_t+0x72>
 800b912:	4628      	mov	r0, r5
 800b914:	ad01      	add	r5, sp, #4
 800b916:	4629      	mov	r1, r5
 800b918:	4632      	mov	r2, r6
 800b91a:	f00e ff3a 	bl	801a792 <memcpy>
 800b91e:	68a0      	ldr	r0, [r4, #8]
 800b920:	4642      	mov	r2, r8
 800b922:	19a9      	adds	r1, r5, r6
 800b924:	f00e ff35 	bl	801a792 <memcpy>
 800b928:	e7a1      	b.n	800b86e <ucdr_serialize_uint32_t+0x72>
 800b92a:	bf00      	nop

0800b92c <ucdr_serialize_endian_uint32_t>:
 800b92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b930:	b083      	sub	sp, #12
 800b932:	460d      	mov	r5, r1
 800b934:	2104      	movs	r1, #4
 800b936:	4604      	mov	r4, r0
 800b938:	9201      	str	r2, [sp, #4]
 800b93a:	f001 f837 	bl	800c9ac <ucdr_buffer_alignment>
 800b93e:	4601      	mov	r1, r0
 800b940:	4620      	mov	r0, r4
 800b942:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b946:	f001 f875 	bl	800ca34 <ucdr_advance_buffer>
 800b94a:	2104      	movs	r1, #4
 800b94c:	4620      	mov	r0, r4
 800b94e:	f000 ffcd 	bl	800c8ec <ucdr_check_buffer_available_for>
 800b952:	2800      	cmp	r0, #0
 800b954:	d138      	bne.n	800b9c8 <ucdr_serialize_endian_uint32_t+0x9c>
 800b956:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b95a:	42b7      	cmp	r7, r6
 800b95c:	d92f      	bls.n	800b9be <ucdr_serialize_endian_uint32_t+0x92>
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	60a7      	str	r7, [r4, #8]
 800b962:	1bbf      	subs	r7, r7, r6
 800b964:	443b      	add	r3, r7
 800b966:	f1c7 0904 	rsb	r9, r7, #4
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	4649      	mov	r1, r9
 800b96e:	4620      	mov	r0, r4
 800b970:	f000 ffc8 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b974:	2800      	cmp	r0, #0
 800b976:	d04a      	beq.n	800ba0e <ucdr_serialize_endian_uint32_t+0xe2>
 800b978:	2d01      	cmp	r5, #1
 800b97a:	d063      	beq.n	800ba44 <ucdr_serialize_endian_uint32_t+0x118>
 800b97c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b980:	7033      	strb	r3, [r6, #0]
 800b982:	2f00      	cmp	r7, #0
 800b984:	d051      	beq.n	800ba2a <ucdr_serialize_endian_uint32_t+0xfe>
 800b986:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b98a:	7073      	strb	r3, [r6, #1]
 800b98c:	2f01      	cmp	r7, #1
 800b98e:	d050      	beq.n	800ba32 <ucdr_serialize_endian_uint32_t+0x106>
 800b990:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b994:	70b3      	strb	r3, [r6, #2]
 800b996:	2f02      	cmp	r7, #2
 800b998:	d04f      	beq.n	800ba3a <ucdr_serialize_endian_uint32_t+0x10e>
 800b99a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b99e:	70f3      	strb	r3, [r6, #3]
 800b9a0:	6923      	ldr	r3, [r4, #16]
 800b9a2:	68a2      	ldr	r2, [r4, #8]
 800b9a4:	7da0      	ldrb	r0, [r4, #22]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	444a      	add	r2, r9
 800b9aa:	1bdb      	subs	r3, r3, r7
 800b9ac:	2104      	movs	r1, #4
 800b9ae:	f080 0001 	eor.w	r0, r0, #1
 800b9b2:	60a2      	str	r2, [r4, #8]
 800b9b4:	6123      	str	r3, [r4, #16]
 800b9b6:	7561      	strb	r1, [r4, #21]
 800b9b8:	b003      	add	sp, #12
 800b9ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9be:	2104      	movs	r1, #4
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f000 ff9f 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800b9c6:	b1c8      	cbz	r0, 800b9fc <ucdr_serialize_endian_uint32_t+0xd0>
 800b9c8:	2d01      	cmp	r5, #1
 800b9ca:	68a3      	ldr	r3, [r4, #8]
 800b9cc:	d01c      	beq.n	800ba08 <ucdr_serialize_endian_uint32_t+0xdc>
 800b9ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	68a3      	ldr	r3, [r4, #8]
 800b9d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9da:	705a      	strb	r2, [r3, #1]
 800b9dc:	68a3      	ldr	r3, [r4, #8]
 800b9de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b9e2:	709a      	strb	r2, [r3, #2]
 800b9e4:	68a3      	ldr	r3, [r4, #8]
 800b9e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b9ea:	70da      	strb	r2, [r3, #3]
 800b9ec:	68a2      	ldr	r2, [r4, #8]
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	3204      	adds	r2, #4
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	2104      	movs	r1, #4
 800b9f6:	60a2      	str	r2, [r4, #8]
 800b9f8:	6123      	str	r3, [r4, #16]
 800b9fa:	7561      	strb	r1, [r4, #21]
 800b9fc:	7da0      	ldrb	r0, [r4, #22]
 800b9fe:	f080 0001 	eor.w	r0, r0, #1
 800ba02:	b003      	add	sp, #12
 800ba04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba08:	9a01      	ldr	r2, [sp, #4]
 800ba0a:	601a      	str	r2, [r3, #0]
 800ba0c:	e7ee      	b.n	800b9ec <ucdr_serialize_endian_uint32_t+0xc0>
 800ba0e:	68a2      	ldr	r2, [r4, #8]
 800ba10:	6923      	ldr	r3, [r4, #16]
 800ba12:	7da0      	ldrb	r0, [r4, #22]
 800ba14:	f884 8015 	strb.w	r8, [r4, #21]
 800ba18:	1bd2      	subs	r2, r2, r7
 800ba1a:	1bdb      	subs	r3, r3, r7
 800ba1c:	f080 0001 	eor.w	r0, r0, #1
 800ba20:	60a2      	str	r2, [r4, #8]
 800ba22:	6123      	str	r3, [r4, #16]
 800ba24:	b003      	add	sp, #12
 800ba26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba2a:	68a3      	ldr	r3, [r4, #8]
 800ba2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba30:	701a      	strb	r2, [r3, #0]
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	e7ad      	b.n	800b9a0 <ucdr_serialize_endian_uint32_t+0x74>
 800ba44:	ad01      	add	r5, sp, #4
 800ba46:	4629      	mov	r1, r5
 800ba48:	463a      	mov	r2, r7
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f00e fea1 	bl	801a792 <memcpy>
 800ba50:	68a0      	ldr	r0, [r4, #8]
 800ba52:	464a      	mov	r2, r9
 800ba54:	19e9      	adds	r1, r5, r7
 800ba56:	f00e fe9c 	bl	801a792 <memcpy>
 800ba5a:	e7a1      	b.n	800b9a0 <ucdr_serialize_endian_uint32_t+0x74>

0800ba5c <ucdr_deserialize_uint32_t>:
 800ba5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba60:	460d      	mov	r5, r1
 800ba62:	2104      	movs	r1, #4
 800ba64:	4604      	mov	r4, r0
 800ba66:	f000 ffa1 	bl	800c9ac <ucdr_buffer_alignment>
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba72:	f000 ffdf 	bl	800ca34 <ucdr_advance_buffer>
 800ba76:	2104      	movs	r1, #4
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 ff37 	bl	800c8ec <ucdr_check_buffer_available_for>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d138      	bne.n	800baf4 <ucdr_deserialize_uint32_t+0x98>
 800ba82:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ba86:	42b7      	cmp	r7, r6
 800ba88:	d92f      	bls.n	800baea <ucdr_deserialize_uint32_t+0x8e>
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	60a7      	str	r7, [r4, #8]
 800ba8e:	1bbf      	subs	r7, r7, r6
 800ba90:	443b      	add	r3, r7
 800ba92:	f1c7 0904 	rsb	r9, r7, #4
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	4649      	mov	r1, r9
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 ff32 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d046      	beq.n	800bb32 <ucdr_deserialize_uint32_t+0xd6>
 800baa4:	7d23      	ldrb	r3, [r4, #20]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d05c      	beq.n	800bb64 <ucdr_deserialize_uint32_t+0x108>
 800baaa:	78f3      	ldrb	r3, [r6, #3]
 800baac:	702b      	strb	r3, [r5, #0]
 800baae:	2f00      	cmp	r7, #0
 800bab0:	d04c      	beq.n	800bb4c <ucdr_deserialize_uint32_t+0xf0>
 800bab2:	78b3      	ldrb	r3, [r6, #2]
 800bab4:	706b      	strb	r3, [r5, #1]
 800bab6:	2f01      	cmp	r7, #1
 800bab8:	f105 0302 	add.w	r3, r5, #2
 800babc:	d04a      	beq.n	800bb54 <ucdr_deserialize_uint32_t+0xf8>
 800babe:	7873      	ldrb	r3, [r6, #1]
 800bac0:	70ab      	strb	r3, [r5, #2]
 800bac2:	2f02      	cmp	r7, #2
 800bac4:	f105 0303 	add.w	r3, r5, #3
 800bac8:	d048      	beq.n	800bb5c <ucdr_deserialize_uint32_t+0x100>
 800baca:	7833      	ldrb	r3, [r6, #0]
 800bacc:	70eb      	strb	r3, [r5, #3]
 800bace:	6923      	ldr	r3, [r4, #16]
 800bad0:	68a2      	ldr	r2, [r4, #8]
 800bad2:	7da0      	ldrb	r0, [r4, #22]
 800bad4:	2104      	movs	r1, #4
 800bad6:	3304      	adds	r3, #4
 800bad8:	444a      	add	r2, r9
 800bada:	1bdb      	subs	r3, r3, r7
 800badc:	7561      	strb	r1, [r4, #21]
 800bade:	60a2      	str	r2, [r4, #8]
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	f080 0001 	eor.w	r0, r0, #1
 800bae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baea:	2104      	movs	r1, #4
 800baec:	4620      	mov	r0, r4
 800baee:	f000 ff09 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800baf2:	b1b0      	cbz	r0, 800bb22 <ucdr_deserialize_uint32_t+0xc6>
 800baf4:	7d23      	ldrb	r3, [r4, #20]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	68a3      	ldr	r3, [r4, #8]
 800bafa:	d017      	beq.n	800bb2c <ucdr_deserialize_uint32_t+0xd0>
 800bafc:	78db      	ldrb	r3, [r3, #3]
 800bafe:	702b      	strb	r3, [r5, #0]
 800bb00:	68a3      	ldr	r3, [r4, #8]
 800bb02:	789b      	ldrb	r3, [r3, #2]
 800bb04:	706b      	strb	r3, [r5, #1]
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	785b      	ldrb	r3, [r3, #1]
 800bb0a:	70ab      	strb	r3, [r5, #2]
 800bb0c:	68a3      	ldr	r3, [r4, #8]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	70eb      	strb	r3, [r5, #3]
 800bb12:	68a2      	ldr	r2, [r4, #8]
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	3204      	adds	r2, #4
 800bb18:	3304      	adds	r3, #4
 800bb1a:	2104      	movs	r1, #4
 800bb1c:	60a2      	str	r2, [r4, #8]
 800bb1e:	6123      	str	r3, [r4, #16]
 800bb20:	7561      	strb	r1, [r4, #21]
 800bb22:	7da0      	ldrb	r0, [r4, #22]
 800bb24:	f080 0001 	eor.w	r0, r0, #1
 800bb28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	e7ef      	b.n	800bb12 <ucdr_deserialize_uint32_t+0xb6>
 800bb32:	68a2      	ldr	r2, [r4, #8]
 800bb34:	6923      	ldr	r3, [r4, #16]
 800bb36:	7da0      	ldrb	r0, [r4, #22]
 800bb38:	f884 8015 	strb.w	r8, [r4, #21]
 800bb3c:	1bd2      	subs	r2, r2, r7
 800bb3e:	1bdb      	subs	r3, r3, r7
 800bb40:	60a2      	str	r2, [r4, #8]
 800bb42:	6123      	str	r3, [r4, #16]
 800bb44:	f080 0001 	eor.w	r0, r0, #1
 800bb48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4c:	68a3      	ldr	r3, [r4, #8]
 800bb4e:	789b      	ldrb	r3, [r3, #2]
 800bb50:	706b      	strb	r3, [r5, #1]
 800bb52:	1cab      	adds	r3, r5, #2
 800bb54:	68a2      	ldr	r2, [r4, #8]
 800bb56:	7852      	ldrb	r2, [r2, #1]
 800bb58:	f803 2b01 	strb.w	r2, [r3], #1
 800bb5c:	68a2      	ldr	r2, [r4, #8]
 800bb5e:	7812      	ldrb	r2, [r2, #0]
 800bb60:	701a      	strb	r2, [r3, #0]
 800bb62:	e7b4      	b.n	800bace <ucdr_deserialize_uint32_t+0x72>
 800bb64:	4631      	mov	r1, r6
 800bb66:	463a      	mov	r2, r7
 800bb68:	4628      	mov	r0, r5
 800bb6a:	f00e fe12 	bl	801a792 <memcpy>
 800bb6e:	68a1      	ldr	r1, [r4, #8]
 800bb70:	464a      	mov	r2, r9
 800bb72:	19e8      	adds	r0, r5, r7
 800bb74:	f00e fe0d 	bl	801a792 <memcpy>
 800bb78:	e7a9      	b.n	800bace <ucdr_deserialize_uint32_t+0x72>
 800bb7a:	bf00      	nop

0800bb7c <ucdr_deserialize_endian_uint32_t>:
 800bb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb80:	460e      	mov	r6, r1
 800bb82:	2104      	movs	r1, #4
 800bb84:	4604      	mov	r4, r0
 800bb86:	4615      	mov	r5, r2
 800bb88:	f000 ff10 	bl	800c9ac <ucdr_buffer_alignment>
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bb94:	f000 ff4e 	bl	800ca34 <ucdr_advance_buffer>
 800bb98:	2104      	movs	r1, #4
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fea6 	bl	800c8ec <ucdr_check_buffer_available_for>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d13c      	bne.n	800bc1e <ucdr_deserialize_endian_uint32_t+0xa2>
 800bba4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800bba8:	42bb      	cmp	r3, r7
 800bbaa:	d933      	bls.n	800bc14 <ucdr_deserialize_endian_uint32_t+0x98>
 800bbac:	eba3 0807 	sub.w	r8, r3, r7
 800bbb0:	60a3      	str	r3, [r4, #8]
 800bbb2:	6923      	ldr	r3, [r4, #16]
 800bbb4:	f1c8 0a04 	rsb	sl, r8, #4
 800bbb8:	4443      	add	r3, r8
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	4651      	mov	r1, sl
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 fea0 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d048      	beq.n	800bc5a <ucdr_deserialize_endian_uint32_t+0xde>
 800bbc8:	2e01      	cmp	r6, #1
 800bbca:	d061      	beq.n	800bc90 <ucdr_deserialize_endian_uint32_t+0x114>
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	702b      	strb	r3, [r5, #0]
 800bbd0:	f1b8 0f00 	cmp.w	r8, #0
 800bbd4:	d050      	beq.n	800bc78 <ucdr_deserialize_endian_uint32_t+0xfc>
 800bbd6:	78bb      	ldrb	r3, [r7, #2]
 800bbd8:	706b      	strb	r3, [r5, #1]
 800bbda:	f1b8 0f01 	cmp.w	r8, #1
 800bbde:	f105 0302 	add.w	r3, r5, #2
 800bbe2:	d04d      	beq.n	800bc80 <ucdr_deserialize_endian_uint32_t+0x104>
 800bbe4:	787b      	ldrb	r3, [r7, #1]
 800bbe6:	70ab      	strb	r3, [r5, #2]
 800bbe8:	f1b8 0f02 	cmp.w	r8, #2
 800bbec:	f105 0303 	add.w	r3, r5, #3
 800bbf0:	d04a      	beq.n	800bc88 <ucdr_deserialize_endian_uint32_t+0x10c>
 800bbf2:	783b      	ldrb	r3, [r7, #0]
 800bbf4:	70eb      	strb	r3, [r5, #3]
 800bbf6:	6923      	ldr	r3, [r4, #16]
 800bbf8:	68a2      	ldr	r2, [r4, #8]
 800bbfa:	7da0      	ldrb	r0, [r4, #22]
 800bbfc:	2104      	movs	r1, #4
 800bbfe:	3304      	adds	r3, #4
 800bc00:	4452      	add	r2, sl
 800bc02:	eba3 0308 	sub.w	r3, r3, r8
 800bc06:	7561      	strb	r1, [r4, #21]
 800bc08:	60a2      	str	r2, [r4, #8]
 800bc0a:	6123      	str	r3, [r4, #16]
 800bc0c:	f080 0001 	eor.w	r0, r0, #1
 800bc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc14:	2104      	movs	r1, #4
 800bc16:	4620      	mov	r0, r4
 800bc18:	f000 fe74 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800bc1c:	b1a8      	cbz	r0, 800bc4a <ucdr_deserialize_endian_uint32_t+0xce>
 800bc1e:	2e01      	cmp	r6, #1
 800bc20:	68a3      	ldr	r3, [r4, #8]
 800bc22:	d017      	beq.n	800bc54 <ucdr_deserialize_endian_uint32_t+0xd8>
 800bc24:	78db      	ldrb	r3, [r3, #3]
 800bc26:	702b      	strb	r3, [r5, #0]
 800bc28:	68a3      	ldr	r3, [r4, #8]
 800bc2a:	789b      	ldrb	r3, [r3, #2]
 800bc2c:	706b      	strb	r3, [r5, #1]
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	70ab      	strb	r3, [r5, #2]
 800bc34:	68a3      	ldr	r3, [r4, #8]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	70eb      	strb	r3, [r5, #3]
 800bc3a:	68a2      	ldr	r2, [r4, #8]
 800bc3c:	6923      	ldr	r3, [r4, #16]
 800bc3e:	3204      	adds	r2, #4
 800bc40:	3304      	adds	r3, #4
 800bc42:	2104      	movs	r1, #4
 800bc44:	60a2      	str	r2, [r4, #8]
 800bc46:	6123      	str	r3, [r4, #16]
 800bc48:	7561      	strb	r1, [r4, #21]
 800bc4a:	7da0      	ldrb	r0, [r4, #22]
 800bc4c:	f080 0001 	eor.w	r0, r0, #1
 800bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	602b      	str	r3, [r5, #0]
 800bc58:	e7ef      	b.n	800bc3a <ucdr_deserialize_endian_uint32_t+0xbe>
 800bc5a:	68a2      	ldr	r2, [r4, #8]
 800bc5c:	6923      	ldr	r3, [r4, #16]
 800bc5e:	7da0      	ldrb	r0, [r4, #22]
 800bc60:	f884 9015 	strb.w	r9, [r4, #21]
 800bc64:	eba2 0208 	sub.w	r2, r2, r8
 800bc68:	eba3 0308 	sub.w	r3, r3, r8
 800bc6c:	60a2      	str	r2, [r4, #8]
 800bc6e:	6123      	str	r3, [r4, #16]
 800bc70:	f080 0001 	eor.w	r0, r0, #1
 800bc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc78:	68a3      	ldr	r3, [r4, #8]
 800bc7a:	789b      	ldrb	r3, [r3, #2]
 800bc7c:	706b      	strb	r3, [r5, #1]
 800bc7e:	1cab      	adds	r3, r5, #2
 800bc80:	68a2      	ldr	r2, [r4, #8]
 800bc82:	7852      	ldrb	r2, [r2, #1]
 800bc84:	f803 2b01 	strb.w	r2, [r3], #1
 800bc88:	68a2      	ldr	r2, [r4, #8]
 800bc8a:	7812      	ldrb	r2, [r2, #0]
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	e7b2      	b.n	800bbf6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800bc90:	4639      	mov	r1, r7
 800bc92:	4642      	mov	r2, r8
 800bc94:	4628      	mov	r0, r5
 800bc96:	f00e fd7c 	bl	801a792 <memcpy>
 800bc9a:	68a1      	ldr	r1, [r4, #8]
 800bc9c:	4652      	mov	r2, sl
 800bc9e:	eb05 0008 	add.w	r0, r5, r8
 800bca2:	f00e fd76 	bl	801a792 <memcpy>
 800bca6:	e7a6      	b.n	800bbf6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800bca8 <ucdr_serialize_uint64_t>:
 800bca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcac:	2108      	movs	r1, #8
 800bcae:	b082      	sub	sp, #8
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	e9cd 2300 	strd	r2, r3, [sp]
 800bcb6:	f000 fe79 	bl	800c9ac <ucdr_buffer_alignment>
 800bcba:	4601      	mov	r1, r0
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	7d67      	ldrb	r7, [r4, #21]
 800bcc0:	f000 feb8 	bl	800ca34 <ucdr_advance_buffer>
 800bcc4:	2108      	movs	r1, #8
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 fe10 	bl	800c8ec <ucdr_check_buffer_available_for>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d14e      	bne.n	800bd6e <ucdr_serialize_uint64_t+0xc6>
 800bcd0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bcd4:	42ab      	cmp	r3, r5
 800bcd6:	d945      	bls.n	800bd64 <ucdr_serialize_uint64_t+0xbc>
 800bcd8:	1b5e      	subs	r6, r3, r5
 800bcda:	60a3      	str	r3, [r4, #8]
 800bcdc:	6923      	ldr	r3, [r4, #16]
 800bcde:	f1c6 0808 	rsb	r8, r6, #8
 800bce2:	4433      	add	r3, r6
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	4641      	mov	r1, r8
 800bce8:	4620      	mov	r0, r4
 800bcea:	f000 fe0b 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d074      	beq.n	800bddc <ucdr_serialize_uint64_t+0x134>
 800bcf2:	7d23      	ldrb	r3, [r4, #20]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	f000 809b 	beq.w	800be30 <ucdr_serialize_uint64_t+0x188>
 800bcfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bcfe:	702b      	strb	r3, [r5, #0]
 800bd00:	2e00      	cmp	r6, #0
 800bd02:	d078      	beq.n	800bdf6 <ucdr_serialize_uint64_t+0x14e>
 800bd04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd08:	706b      	strb	r3, [r5, #1]
 800bd0a:	2e01      	cmp	r6, #1
 800bd0c:	d077      	beq.n	800bdfe <ucdr_serialize_uint64_t+0x156>
 800bd0e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bd12:	70ab      	strb	r3, [r5, #2]
 800bd14:	2e02      	cmp	r6, #2
 800bd16:	d076      	beq.n	800be06 <ucdr_serialize_uint64_t+0x15e>
 800bd18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd1c:	70eb      	strb	r3, [r5, #3]
 800bd1e:	2e03      	cmp	r6, #3
 800bd20:	d075      	beq.n	800be0e <ucdr_serialize_uint64_t+0x166>
 800bd22:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bd26:	712b      	strb	r3, [r5, #4]
 800bd28:	2e04      	cmp	r6, #4
 800bd2a:	d074      	beq.n	800be16 <ucdr_serialize_uint64_t+0x16e>
 800bd2c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bd30:	716b      	strb	r3, [r5, #5]
 800bd32:	2e05      	cmp	r6, #5
 800bd34:	d073      	beq.n	800be1e <ucdr_serialize_uint64_t+0x176>
 800bd36:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bd3a:	71ab      	strb	r3, [r5, #6]
 800bd3c:	2e06      	cmp	r6, #6
 800bd3e:	d072      	beq.n	800be26 <ucdr_serialize_uint64_t+0x17e>
 800bd40:	f89d 3000 	ldrb.w	r3, [sp]
 800bd44:	71eb      	strb	r3, [r5, #7]
 800bd46:	6923      	ldr	r3, [r4, #16]
 800bd48:	68a2      	ldr	r2, [r4, #8]
 800bd4a:	7da0      	ldrb	r0, [r4, #22]
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	1b9e      	subs	r6, r3, r6
 800bd50:	4442      	add	r2, r8
 800bd52:	2308      	movs	r3, #8
 800bd54:	f080 0001 	eor.w	r0, r0, #1
 800bd58:	60a2      	str	r2, [r4, #8]
 800bd5a:	6126      	str	r6, [r4, #16]
 800bd5c:	7563      	strb	r3, [r4, #21]
 800bd5e:	b002      	add	sp, #8
 800bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd64:	2108      	movs	r1, #8
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 fdcc 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800bd6c:	b350      	cbz	r0, 800bdc4 <ucdr_serialize_uint64_t+0x11c>
 800bd6e:	7d23      	ldrb	r3, [r4, #20]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d02d      	beq.n	800bdd0 <ucdr_serialize_uint64_t+0x128>
 800bd74:	68a3      	ldr	r3, [r4, #8]
 800bd76:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	68a3      	ldr	r3, [r4, #8]
 800bd7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd82:	705a      	strb	r2, [r3, #1]
 800bd84:	68a3      	ldr	r3, [r4, #8]
 800bd86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd8a:	709a      	strb	r2, [r3, #2]
 800bd8c:	68a3      	ldr	r3, [r4, #8]
 800bd8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd92:	70da      	strb	r2, [r3, #3]
 800bd94:	68a3      	ldr	r3, [r4, #8]
 800bd96:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bd9a:	711a      	strb	r2, [r3, #4]
 800bd9c:	68a3      	ldr	r3, [r4, #8]
 800bd9e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bda2:	715a      	strb	r2, [r3, #5]
 800bda4:	68a3      	ldr	r3, [r4, #8]
 800bda6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bdaa:	719a      	strb	r2, [r3, #6]
 800bdac:	68a3      	ldr	r3, [r4, #8]
 800bdae:	f89d 2000 	ldrb.w	r2, [sp]
 800bdb2:	71da      	strb	r2, [r3, #7]
 800bdb4:	68a2      	ldr	r2, [r4, #8]
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	3208      	adds	r2, #8
 800bdba:	3308      	adds	r3, #8
 800bdbc:	2108      	movs	r1, #8
 800bdbe:	60a2      	str	r2, [r4, #8]
 800bdc0:	6123      	str	r3, [r4, #16]
 800bdc2:	7561      	strb	r1, [r4, #21]
 800bdc4:	7da0      	ldrb	r0, [r4, #22]
 800bdc6:	f080 0001 	eor.w	r0, r0, #1
 800bdca:	b002      	add	sp, #8
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	466b      	mov	r3, sp
 800bdd2:	cb03      	ldmia	r3!, {r0, r1}
 800bdd4:	68a3      	ldr	r3, [r4, #8]
 800bdd6:	6018      	str	r0, [r3, #0]
 800bdd8:	6059      	str	r1, [r3, #4]
 800bdda:	e7eb      	b.n	800bdb4 <ucdr_serialize_uint64_t+0x10c>
 800bddc:	68a2      	ldr	r2, [r4, #8]
 800bdde:	6923      	ldr	r3, [r4, #16]
 800bde0:	7da0      	ldrb	r0, [r4, #22]
 800bde2:	7567      	strb	r7, [r4, #21]
 800bde4:	1b92      	subs	r2, r2, r6
 800bde6:	1b9b      	subs	r3, r3, r6
 800bde8:	f080 0001 	eor.w	r0, r0, #1
 800bdec:	60a2      	str	r2, [r4, #8]
 800bdee:	6123      	str	r3, [r4, #16]
 800bdf0:	b002      	add	sp, #8
 800bdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	68a3      	ldr	r3, [r4, #8]
 800be00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be04:	701a      	strb	r2, [r3, #0]
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800be0c:	701a      	strb	r2, [r3, #0]
 800be0e:	68a3      	ldr	r3, [r4, #8]
 800be10:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be14:	701a      	strb	r2, [r3, #0]
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800be1c:	701a      	strb	r2, [r3, #0]
 800be1e:	68a3      	ldr	r3, [r4, #8]
 800be20:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	f89d 2000 	ldrb.w	r2, [sp]
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	e78a      	b.n	800bd46 <ucdr_serialize_uint64_t+0x9e>
 800be30:	4628      	mov	r0, r5
 800be32:	466d      	mov	r5, sp
 800be34:	4629      	mov	r1, r5
 800be36:	4632      	mov	r2, r6
 800be38:	f00e fcab 	bl	801a792 <memcpy>
 800be3c:	68a0      	ldr	r0, [r4, #8]
 800be3e:	4642      	mov	r2, r8
 800be40:	19a9      	adds	r1, r5, r6
 800be42:	f00e fca6 	bl	801a792 <memcpy>
 800be46:	e77e      	b.n	800bd46 <ucdr_serialize_uint64_t+0x9e>

0800be48 <ucdr_serialize_int16_t>:
 800be48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	460b      	mov	r3, r1
 800be50:	2102      	movs	r1, #2
 800be52:	4604      	mov	r4, r0
 800be54:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be58:	f000 fda8 	bl	800c9ac <ucdr_buffer_alignment>
 800be5c:	4601      	mov	r1, r0
 800be5e:	4620      	mov	r0, r4
 800be60:	7d67      	ldrb	r7, [r4, #21]
 800be62:	f000 fde7 	bl	800ca34 <ucdr_advance_buffer>
 800be66:	2102      	movs	r1, #2
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 fd3f 	bl	800c8ec <ucdr_check_buffer_available_for>
 800be6e:	bb78      	cbnz	r0, 800bed0 <ucdr_serialize_int16_t+0x88>
 800be70:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be74:	42ab      	cmp	r3, r5
 800be76:	d926      	bls.n	800bec6 <ucdr_serialize_int16_t+0x7e>
 800be78:	1b5e      	subs	r6, r3, r5
 800be7a:	60a3      	str	r3, [r4, #8]
 800be7c:	6923      	ldr	r3, [r4, #16]
 800be7e:	f1c6 0802 	rsb	r8, r6, #2
 800be82:	4433      	add	r3, r6
 800be84:	6123      	str	r3, [r4, #16]
 800be86:	4641      	mov	r1, r8
 800be88:	4620      	mov	r0, r4
 800be8a:	f000 fd3b 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800be8e:	2800      	cmp	r0, #0
 800be90:	d03b      	beq.n	800bf0a <ucdr_serialize_int16_t+0xc2>
 800be92:	7d23      	ldrb	r3, [r4, #20]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d04a      	beq.n	800bf2e <ucdr_serialize_int16_t+0xe6>
 800be98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be9c:	702b      	strb	r3, [r5, #0]
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	d040      	beq.n	800bf24 <ucdr_serialize_int16_t+0xdc>
 800bea2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bea6:	706b      	strb	r3, [r5, #1]
 800bea8:	6923      	ldr	r3, [r4, #16]
 800beaa:	68a2      	ldr	r2, [r4, #8]
 800beac:	7da0      	ldrb	r0, [r4, #22]
 800beae:	3302      	adds	r3, #2
 800beb0:	1b9e      	subs	r6, r3, r6
 800beb2:	4442      	add	r2, r8
 800beb4:	2302      	movs	r3, #2
 800beb6:	f080 0001 	eor.w	r0, r0, #1
 800beba:	60a2      	str	r2, [r4, #8]
 800bebc:	6126      	str	r6, [r4, #16]
 800bebe:	7563      	strb	r3, [r4, #21]
 800bec0:	b002      	add	sp, #8
 800bec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec6:	2102      	movs	r1, #2
 800bec8:	4620      	mov	r0, r4
 800beca:	f000 fd1b 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800bece:	b190      	cbz	r0, 800bef6 <ucdr_serialize_int16_t+0xae>
 800bed0:	7d23      	ldrb	r3, [r4, #20]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	d014      	beq.n	800bf02 <ucdr_serialize_int16_t+0xba>
 800bed8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bedc:	701a      	strb	r2, [r3, #0]
 800bede:	68a3      	ldr	r3, [r4, #8]
 800bee0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bee4:	705a      	strb	r2, [r3, #1]
 800bee6:	68a2      	ldr	r2, [r4, #8]
 800bee8:	6923      	ldr	r3, [r4, #16]
 800beea:	3202      	adds	r2, #2
 800beec:	3302      	adds	r3, #2
 800beee:	2102      	movs	r1, #2
 800bef0:	60a2      	str	r2, [r4, #8]
 800bef2:	6123      	str	r3, [r4, #16]
 800bef4:	7561      	strb	r1, [r4, #21]
 800bef6:	7da0      	ldrb	r0, [r4, #22]
 800bef8:	f080 0001 	eor.w	r0, r0, #1
 800befc:	b002      	add	sp, #8
 800befe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bf06:	801a      	strh	r2, [r3, #0]
 800bf08:	e7ed      	b.n	800bee6 <ucdr_serialize_int16_t+0x9e>
 800bf0a:	68a2      	ldr	r2, [r4, #8]
 800bf0c:	6923      	ldr	r3, [r4, #16]
 800bf0e:	7da0      	ldrb	r0, [r4, #22]
 800bf10:	7567      	strb	r7, [r4, #21]
 800bf12:	1b92      	subs	r2, r2, r6
 800bf14:	1b9b      	subs	r3, r3, r6
 800bf16:	f080 0001 	eor.w	r0, r0, #1
 800bf1a:	60a2      	str	r2, [r4, #8]
 800bf1c:	6123      	str	r3, [r4, #16]
 800bf1e:	b002      	add	sp, #8
 800bf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf2a:	701a      	strb	r2, [r3, #0]
 800bf2c:	e7bc      	b.n	800bea8 <ucdr_serialize_int16_t+0x60>
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f10d 0506 	add.w	r5, sp, #6
 800bf34:	4629      	mov	r1, r5
 800bf36:	4632      	mov	r2, r6
 800bf38:	f00e fc2b 	bl	801a792 <memcpy>
 800bf3c:	68a0      	ldr	r0, [r4, #8]
 800bf3e:	4642      	mov	r2, r8
 800bf40:	19a9      	adds	r1, r5, r6
 800bf42:	f00e fc26 	bl	801a792 <memcpy>
 800bf46:	e7af      	b.n	800bea8 <ucdr_serialize_int16_t+0x60>

0800bf48 <ucdr_deserialize_int16_t>:
 800bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	460d      	mov	r5, r1
 800bf4e:	2102      	movs	r1, #2
 800bf50:	4604      	mov	r4, r0
 800bf52:	f000 fd2b 	bl	800c9ac <ucdr_buffer_alignment>
 800bf56:	4601      	mov	r1, r0
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf5e:	f000 fd69 	bl	800ca34 <ucdr_advance_buffer>
 800bf62:	2102      	movs	r1, #2
 800bf64:	4620      	mov	r0, r4
 800bf66:	f000 fcc1 	bl	800c8ec <ucdr_check_buffer_available_for>
 800bf6a:	bb60      	cbnz	r0, 800bfc6 <ucdr_deserialize_int16_t+0x7e>
 800bf6c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bf70:	42be      	cmp	r6, r7
 800bf72:	d923      	bls.n	800bfbc <ucdr_deserialize_int16_t+0x74>
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	60a6      	str	r6, [r4, #8]
 800bf78:	1bf6      	subs	r6, r6, r7
 800bf7a:	4433      	add	r3, r6
 800bf7c:	f1c6 0902 	rsb	r9, r6, #2
 800bf80:	6123      	str	r3, [r4, #16]
 800bf82:	4649      	mov	r1, r9
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 fcbd 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d034      	beq.n	800bff8 <ucdr_deserialize_int16_t+0xb0>
 800bf8e:	7d23      	ldrb	r3, [r4, #20]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d042      	beq.n	800c01a <ucdr_deserialize_int16_t+0xd2>
 800bf94:	787b      	ldrb	r3, [r7, #1]
 800bf96:	702b      	strb	r3, [r5, #0]
 800bf98:	2e00      	cmp	r6, #0
 800bf9a:	d03a      	beq.n	800c012 <ucdr_deserialize_int16_t+0xca>
 800bf9c:	783b      	ldrb	r3, [r7, #0]
 800bf9e:	706b      	strb	r3, [r5, #1]
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	68a2      	ldr	r2, [r4, #8]
 800bfa4:	7da0      	ldrb	r0, [r4, #22]
 800bfa6:	2102      	movs	r1, #2
 800bfa8:	3302      	adds	r3, #2
 800bfaa:	444a      	add	r2, r9
 800bfac:	1b9b      	subs	r3, r3, r6
 800bfae:	7561      	strb	r1, [r4, #21]
 800bfb0:	60a2      	str	r2, [r4, #8]
 800bfb2:	6123      	str	r3, [r4, #16]
 800bfb4:	f080 0001 	eor.w	r0, r0, #1
 800bfb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfbc:	2102      	movs	r1, #2
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 fca0 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800bfc4:	b180      	cbz	r0, 800bfe8 <ucdr_deserialize_int16_t+0xa0>
 800bfc6:	7d23      	ldrb	r3, [r4, #20]
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	68a3      	ldr	r3, [r4, #8]
 800bfcc:	d011      	beq.n	800bff2 <ucdr_deserialize_int16_t+0xaa>
 800bfce:	785b      	ldrb	r3, [r3, #1]
 800bfd0:	702b      	strb	r3, [r5, #0]
 800bfd2:	68a3      	ldr	r3, [r4, #8]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	706b      	strb	r3, [r5, #1]
 800bfd8:	68a2      	ldr	r2, [r4, #8]
 800bfda:	6923      	ldr	r3, [r4, #16]
 800bfdc:	3202      	adds	r2, #2
 800bfde:	3302      	adds	r3, #2
 800bfe0:	2102      	movs	r1, #2
 800bfe2:	60a2      	str	r2, [r4, #8]
 800bfe4:	6123      	str	r3, [r4, #16]
 800bfe6:	7561      	strb	r1, [r4, #21]
 800bfe8:	7da0      	ldrb	r0, [r4, #22]
 800bfea:	f080 0001 	eor.w	r0, r0, #1
 800bfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	802b      	strh	r3, [r5, #0]
 800bff6:	e7ef      	b.n	800bfd8 <ucdr_deserialize_int16_t+0x90>
 800bff8:	68a2      	ldr	r2, [r4, #8]
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	7da0      	ldrb	r0, [r4, #22]
 800bffe:	f884 8015 	strb.w	r8, [r4, #21]
 800c002:	1b92      	subs	r2, r2, r6
 800c004:	1b9b      	subs	r3, r3, r6
 800c006:	60a2      	str	r2, [r4, #8]
 800c008:	6123      	str	r3, [r4, #16]
 800c00a:	f080 0001 	eor.w	r0, r0, #1
 800c00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c012:	68a3      	ldr	r3, [r4, #8]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	706b      	strb	r3, [r5, #1]
 800c018:	e7c2      	b.n	800bfa0 <ucdr_deserialize_int16_t+0x58>
 800c01a:	4639      	mov	r1, r7
 800c01c:	4632      	mov	r2, r6
 800c01e:	4628      	mov	r0, r5
 800c020:	f00e fbb7 	bl	801a792 <memcpy>
 800c024:	68a1      	ldr	r1, [r4, #8]
 800c026:	464a      	mov	r2, r9
 800c028:	19a8      	adds	r0, r5, r6
 800c02a:	f00e fbb2 	bl	801a792 <memcpy>
 800c02e:	e7b7      	b.n	800bfa0 <ucdr_deserialize_int16_t+0x58>

0800c030 <ucdr_serialize_int32_t>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	b082      	sub	sp, #8
 800c036:	4604      	mov	r4, r0
 800c038:	9101      	str	r1, [sp, #4]
 800c03a:	2104      	movs	r1, #4
 800c03c:	f000 fcb6 	bl	800c9ac <ucdr_buffer_alignment>
 800c040:	4601      	mov	r1, r0
 800c042:	4620      	mov	r0, r4
 800c044:	7d67      	ldrb	r7, [r4, #21]
 800c046:	f000 fcf5 	bl	800ca34 <ucdr_advance_buffer>
 800c04a:	2104      	movs	r1, #4
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fc4d 	bl	800c8ec <ucdr_check_buffer_available_for>
 800c052:	2800      	cmp	r0, #0
 800c054:	d139      	bne.n	800c0ca <ucdr_serialize_int32_t+0x9a>
 800c056:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c05a:	42ab      	cmp	r3, r5
 800c05c:	d930      	bls.n	800c0c0 <ucdr_serialize_int32_t+0x90>
 800c05e:	1b5e      	subs	r6, r3, r5
 800c060:	60a3      	str	r3, [r4, #8]
 800c062:	6923      	ldr	r3, [r4, #16]
 800c064:	f1c6 0804 	rsb	r8, r6, #4
 800c068:	4433      	add	r3, r6
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	4641      	mov	r1, r8
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fc48 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c074:	2800      	cmp	r0, #0
 800c076:	d04c      	beq.n	800c112 <ucdr_serialize_int32_t+0xe2>
 800c078:	7d23      	ldrb	r3, [r4, #20]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d063      	beq.n	800c146 <ucdr_serialize_int32_t+0x116>
 800c07e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c082:	702b      	strb	r3, [r5, #0]
 800c084:	2e00      	cmp	r6, #0
 800c086:	d051      	beq.n	800c12c <ucdr_serialize_int32_t+0xfc>
 800c088:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c08c:	706b      	strb	r3, [r5, #1]
 800c08e:	2e01      	cmp	r6, #1
 800c090:	d050      	beq.n	800c134 <ucdr_serialize_int32_t+0x104>
 800c092:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c096:	70ab      	strb	r3, [r5, #2]
 800c098:	2e02      	cmp	r6, #2
 800c09a:	d04f      	beq.n	800c13c <ucdr_serialize_int32_t+0x10c>
 800c09c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0a0:	70eb      	strb	r3, [r5, #3]
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	68a2      	ldr	r2, [r4, #8]
 800c0a6:	7da0      	ldrb	r0, [r4, #22]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	1b9e      	subs	r6, r3, r6
 800c0ac:	4442      	add	r2, r8
 800c0ae:	2304      	movs	r3, #4
 800c0b0:	f080 0001 	eor.w	r0, r0, #1
 800c0b4:	60a2      	str	r2, [r4, #8]
 800c0b6:	6126      	str	r6, [r4, #16]
 800c0b8:	7563      	strb	r3, [r4, #21]
 800c0ba:	b002      	add	sp, #8
 800c0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c0:	2104      	movs	r1, #4
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 fc1e 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c0c8:	b1d0      	cbz	r0, 800c100 <ucdr_serialize_int32_t+0xd0>
 800c0ca:	7d23      	ldrb	r3, [r4, #20]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	68a3      	ldr	r3, [r4, #8]
 800c0d0:	d01c      	beq.n	800c10c <ucdr_serialize_int32_t+0xdc>
 800c0d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c0d6:	701a      	strb	r2, [r3, #0]
 800c0d8:	68a3      	ldr	r3, [r4, #8]
 800c0da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0de:	705a      	strb	r2, [r3, #1]
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c0e6:	709a      	strb	r2, [r3, #2]
 800c0e8:	68a3      	ldr	r3, [r4, #8]
 800c0ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c0ee:	70da      	strb	r2, [r3, #3]
 800c0f0:	68a2      	ldr	r2, [r4, #8]
 800c0f2:	6923      	ldr	r3, [r4, #16]
 800c0f4:	3204      	adds	r2, #4
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	2104      	movs	r1, #4
 800c0fa:	60a2      	str	r2, [r4, #8]
 800c0fc:	6123      	str	r3, [r4, #16]
 800c0fe:	7561      	strb	r1, [r4, #21]
 800c100:	7da0      	ldrb	r0, [r4, #22]
 800c102:	f080 0001 	eor.w	r0, r0, #1
 800c106:	b002      	add	sp, #8
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	9a01      	ldr	r2, [sp, #4]
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	e7ee      	b.n	800c0f0 <ucdr_serialize_int32_t+0xc0>
 800c112:	68a2      	ldr	r2, [r4, #8]
 800c114:	6923      	ldr	r3, [r4, #16]
 800c116:	7da0      	ldrb	r0, [r4, #22]
 800c118:	7567      	strb	r7, [r4, #21]
 800c11a:	1b92      	subs	r2, r2, r6
 800c11c:	1b9b      	subs	r3, r3, r6
 800c11e:	f080 0001 	eor.w	r0, r0, #1
 800c122:	60a2      	str	r2, [r4, #8]
 800c124:	6123      	str	r3, [r4, #16]
 800c126:	b002      	add	sp, #8
 800c128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c12c:	68a3      	ldr	r3, [r4, #8]
 800c12e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c132:	701a      	strb	r2, [r3, #0]
 800c134:	68a3      	ldr	r3, [r4, #8]
 800c136:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	68a3      	ldr	r3, [r4, #8]
 800c13e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c142:	701a      	strb	r2, [r3, #0]
 800c144:	e7ad      	b.n	800c0a2 <ucdr_serialize_int32_t+0x72>
 800c146:	4628      	mov	r0, r5
 800c148:	ad01      	add	r5, sp, #4
 800c14a:	4629      	mov	r1, r5
 800c14c:	4632      	mov	r2, r6
 800c14e:	f00e fb20 	bl	801a792 <memcpy>
 800c152:	68a0      	ldr	r0, [r4, #8]
 800c154:	4642      	mov	r2, r8
 800c156:	19a9      	adds	r1, r5, r6
 800c158:	f00e fb1b 	bl	801a792 <memcpy>
 800c15c:	e7a1      	b.n	800c0a2 <ucdr_serialize_int32_t+0x72>
 800c15e:	bf00      	nop

0800c160 <ucdr_deserialize_int32_t>:
 800c160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c164:	460d      	mov	r5, r1
 800c166:	2104      	movs	r1, #4
 800c168:	4604      	mov	r4, r0
 800c16a:	f000 fc1f 	bl	800c9ac <ucdr_buffer_alignment>
 800c16e:	4601      	mov	r1, r0
 800c170:	4620      	mov	r0, r4
 800c172:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c176:	f000 fc5d 	bl	800ca34 <ucdr_advance_buffer>
 800c17a:	2104      	movs	r1, #4
 800c17c:	4620      	mov	r0, r4
 800c17e:	f000 fbb5 	bl	800c8ec <ucdr_check_buffer_available_for>
 800c182:	2800      	cmp	r0, #0
 800c184:	d138      	bne.n	800c1f8 <ucdr_deserialize_int32_t+0x98>
 800c186:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c18a:	42b7      	cmp	r7, r6
 800c18c:	d92f      	bls.n	800c1ee <ucdr_deserialize_int32_t+0x8e>
 800c18e:	6923      	ldr	r3, [r4, #16]
 800c190:	60a7      	str	r7, [r4, #8]
 800c192:	1bbf      	subs	r7, r7, r6
 800c194:	443b      	add	r3, r7
 800c196:	f1c7 0904 	rsb	r9, r7, #4
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	4649      	mov	r1, r9
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f000 fbb0 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d046      	beq.n	800c236 <ucdr_deserialize_int32_t+0xd6>
 800c1a8:	7d23      	ldrb	r3, [r4, #20]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d05c      	beq.n	800c268 <ucdr_deserialize_int32_t+0x108>
 800c1ae:	78f3      	ldrb	r3, [r6, #3]
 800c1b0:	702b      	strb	r3, [r5, #0]
 800c1b2:	2f00      	cmp	r7, #0
 800c1b4:	d04c      	beq.n	800c250 <ucdr_deserialize_int32_t+0xf0>
 800c1b6:	78b3      	ldrb	r3, [r6, #2]
 800c1b8:	706b      	strb	r3, [r5, #1]
 800c1ba:	2f01      	cmp	r7, #1
 800c1bc:	f105 0302 	add.w	r3, r5, #2
 800c1c0:	d04a      	beq.n	800c258 <ucdr_deserialize_int32_t+0xf8>
 800c1c2:	7873      	ldrb	r3, [r6, #1]
 800c1c4:	70ab      	strb	r3, [r5, #2]
 800c1c6:	2f02      	cmp	r7, #2
 800c1c8:	f105 0303 	add.w	r3, r5, #3
 800c1cc:	d048      	beq.n	800c260 <ucdr_deserialize_int32_t+0x100>
 800c1ce:	7833      	ldrb	r3, [r6, #0]
 800c1d0:	70eb      	strb	r3, [r5, #3]
 800c1d2:	6923      	ldr	r3, [r4, #16]
 800c1d4:	68a2      	ldr	r2, [r4, #8]
 800c1d6:	7da0      	ldrb	r0, [r4, #22]
 800c1d8:	2104      	movs	r1, #4
 800c1da:	3304      	adds	r3, #4
 800c1dc:	444a      	add	r2, r9
 800c1de:	1bdb      	subs	r3, r3, r7
 800c1e0:	7561      	strb	r1, [r4, #21]
 800c1e2:	60a2      	str	r2, [r4, #8]
 800c1e4:	6123      	str	r3, [r4, #16]
 800c1e6:	f080 0001 	eor.w	r0, r0, #1
 800c1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ee:	2104      	movs	r1, #4
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f000 fb87 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c1f6:	b1b0      	cbz	r0, 800c226 <ucdr_deserialize_int32_t+0xc6>
 800c1f8:	7d23      	ldrb	r3, [r4, #20]
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	68a3      	ldr	r3, [r4, #8]
 800c1fe:	d017      	beq.n	800c230 <ucdr_deserialize_int32_t+0xd0>
 800c200:	78db      	ldrb	r3, [r3, #3]
 800c202:	702b      	strb	r3, [r5, #0]
 800c204:	68a3      	ldr	r3, [r4, #8]
 800c206:	789b      	ldrb	r3, [r3, #2]
 800c208:	706b      	strb	r3, [r5, #1]
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	785b      	ldrb	r3, [r3, #1]
 800c20e:	70ab      	strb	r3, [r5, #2]
 800c210:	68a3      	ldr	r3, [r4, #8]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	70eb      	strb	r3, [r5, #3]
 800c216:	68a2      	ldr	r2, [r4, #8]
 800c218:	6923      	ldr	r3, [r4, #16]
 800c21a:	3204      	adds	r2, #4
 800c21c:	3304      	adds	r3, #4
 800c21e:	2104      	movs	r1, #4
 800c220:	60a2      	str	r2, [r4, #8]
 800c222:	6123      	str	r3, [r4, #16]
 800c224:	7561      	strb	r1, [r4, #21]
 800c226:	7da0      	ldrb	r0, [r4, #22]
 800c228:	f080 0001 	eor.w	r0, r0, #1
 800c22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	602b      	str	r3, [r5, #0]
 800c234:	e7ef      	b.n	800c216 <ucdr_deserialize_int32_t+0xb6>
 800c236:	68a2      	ldr	r2, [r4, #8]
 800c238:	6923      	ldr	r3, [r4, #16]
 800c23a:	7da0      	ldrb	r0, [r4, #22]
 800c23c:	f884 8015 	strb.w	r8, [r4, #21]
 800c240:	1bd2      	subs	r2, r2, r7
 800c242:	1bdb      	subs	r3, r3, r7
 800c244:	60a2      	str	r2, [r4, #8]
 800c246:	6123      	str	r3, [r4, #16]
 800c248:	f080 0001 	eor.w	r0, r0, #1
 800c24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c250:	68a3      	ldr	r3, [r4, #8]
 800c252:	789b      	ldrb	r3, [r3, #2]
 800c254:	706b      	strb	r3, [r5, #1]
 800c256:	1cab      	adds	r3, r5, #2
 800c258:	68a2      	ldr	r2, [r4, #8]
 800c25a:	7852      	ldrb	r2, [r2, #1]
 800c25c:	f803 2b01 	strb.w	r2, [r3], #1
 800c260:	68a2      	ldr	r2, [r4, #8]
 800c262:	7812      	ldrb	r2, [r2, #0]
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	e7b4      	b.n	800c1d2 <ucdr_deserialize_int32_t+0x72>
 800c268:	4631      	mov	r1, r6
 800c26a:	463a      	mov	r2, r7
 800c26c:	4628      	mov	r0, r5
 800c26e:	f00e fa90 	bl	801a792 <memcpy>
 800c272:	68a1      	ldr	r1, [r4, #8]
 800c274:	464a      	mov	r2, r9
 800c276:	19e8      	adds	r0, r5, r7
 800c278:	f00e fa8b 	bl	801a792 <memcpy>
 800c27c:	e7a9      	b.n	800c1d2 <ucdr_deserialize_int32_t+0x72>
 800c27e:	bf00      	nop

0800c280 <ucdr_serialize_double>:
 800c280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c284:	2108      	movs	r1, #8
 800c286:	b082      	sub	sp, #8
 800c288:	4604      	mov	r4, r0
 800c28a:	ed8d 0b00 	vstr	d0, [sp]
 800c28e:	f000 fb8d 	bl	800c9ac <ucdr_buffer_alignment>
 800c292:	4601      	mov	r1, r0
 800c294:	4620      	mov	r0, r4
 800c296:	7d67      	ldrb	r7, [r4, #21]
 800c298:	f000 fbcc 	bl	800ca34 <ucdr_advance_buffer>
 800c29c:	2108      	movs	r1, #8
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f000 fb24 	bl	800c8ec <ucdr_check_buffer_available_for>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d14e      	bne.n	800c346 <ucdr_serialize_double+0xc6>
 800c2a8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c2ac:	42ab      	cmp	r3, r5
 800c2ae:	d945      	bls.n	800c33c <ucdr_serialize_double+0xbc>
 800c2b0:	1b5e      	subs	r6, r3, r5
 800c2b2:	60a3      	str	r3, [r4, #8]
 800c2b4:	6923      	ldr	r3, [r4, #16]
 800c2b6:	f1c6 0808 	rsb	r8, r6, #8
 800c2ba:	4433      	add	r3, r6
 800c2bc:	6123      	str	r3, [r4, #16]
 800c2be:	4641      	mov	r1, r8
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fb1f 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d074      	beq.n	800c3b4 <ucdr_serialize_double+0x134>
 800c2ca:	7d23      	ldrb	r3, [r4, #20]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	f000 809b 	beq.w	800c408 <ucdr_serialize_double+0x188>
 800c2d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c2d6:	702b      	strb	r3, [r5, #0]
 800c2d8:	2e00      	cmp	r6, #0
 800c2da:	d078      	beq.n	800c3ce <ucdr_serialize_double+0x14e>
 800c2dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c2e0:	706b      	strb	r3, [r5, #1]
 800c2e2:	2e01      	cmp	r6, #1
 800c2e4:	d077      	beq.n	800c3d6 <ucdr_serialize_double+0x156>
 800c2e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c2ea:	70ab      	strb	r3, [r5, #2]
 800c2ec:	2e02      	cmp	r6, #2
 800c2ee:	d076      	beq.n	800c3de <ucdr_serialize_double+0x15e>
 800c2f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c2f4:	70eb      	strb	r3, [r5, #3]
 800c2f6:	2e03      	cmp	r6, #3
 800c2f8:	d075      	beq.n	800c3e6 <ucdr_serialize_double+0x166>
 800c2fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c2fe:	712b      	strb	r3, [r5, #4]
 800c300:	2e04      	cmp	r6, #4
 800c302:	d074      	beq.n	800c3ee <ucdr_serialize_double+0x16e>
 800c304:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c308:	716b      	strb	r3, [r5, #5]
 800c30a:	2e05      	cmp	r6, #5
 800c30c:	d073      	beq.n	800c3f6 <ucdr_serialize_double+0x176>
 800c30e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c312:	71ab      	strb	r3, [r5, #6]
 800c314:	2e06      	cmp	r6, #6
 800c316:	d072      	beq.n	800c3fe <ucdr_serialize_double+0x17e>
 800c318:	f89d 3000 	ldrb.w	r3, [sp]
 800c31c:	71eb      	strb	r3, [r5, #7]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	68a2      	ldr	r2, [r4, #8]
 800c322:	7da0      	ldrb	r0, [r4, #22]
 800c324:	3308      	adds	r3, #8
 800c326:	1b9e      	subs	r6, r3, r6
 800c328:	4442      	add	r2, r8
 800c32a:	2308      	movs	r3, #8
 800c32c:	f080 0001 	eor.w	r0, r0, #1
 800c330:	60a2      	str	r2, [r4, #8]
 800c332:	6126      	str	r6, [r4, #16]
 800c334:	7563      	strb	r3, [r4, #21]
 800c336:	b002      	add	sp, #8
 800c338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c33c:	2108      	movs	r1, #8
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 fae0 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c344:	b350      	cbz	r0, 800c39c <ucdr_serialize_double+0x11c>
 800c346:	7d23      	ldrb	r3, [r4, #20]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d02d      	beq.n	800c3a8 <ucdr_serialize_double+0x128>
 800c34c:	68a3      	ldr	r3, [r4, #8]
 800c34e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c352:	701a      	strb	r2, [r3, #0]
 800c354:	68a3      	ldr	r3, [r4, #8]
 800c356:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c35a:	705a      	strb	r2, [r3, #1]
 800c35c:	68a3      	ldr	r3, [r4, #8]
 800c35e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c362:	709a      	strb	r2, [r3, #2]
 800c364:	68a3      	ldr	r3, [r4, #8]
 800c366:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c36a:	70da      	strb	r2, [r3, #3]
 800c36c:	68a3      	ldr	r3, [r4, #8]
 800c36e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c372:	711a      	strb	r2, [r3, #4]
 800c374:	68a3      	ldr	r3, [r4, #8]
 800c376:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c37a:	715a      	strb	r2, [r3, #5]
 800c37c:	68a3      	ldr	r3, [r4, #8]
 800c37e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c382:	719a      	strb	r2, [r3, #6]
 800c384:	68a3      	ldr	r3, [r4, #8]
 800c386:	f89d 2000 	ldrb.w	r2, [sp]
 800c38a:	71da      	strb	r2, [r3, #7]
 800c38c:	68a2      	ldr	r2, [r4, #8]
 800c38e:	6923      	ldr	r3, [r4, #16]
 800c390:	3208      	adds	r2, #8
 800c392:	3308      	adds	r3, #8
 800c394:	2108      	movs	r1, #8
 800c396:	60a2      	str	r2, [r4, #8]
 800c398:	6123      	str	r3, [r4, #16]
 800c39a:	7561      	strb	r1, [r4, #21]
 800c39c:	7da0      	ldrb	r0, [r4, #22]
 800c39e:	f080 0001 	eor.w	r0, r0, #1
 800c3a2:	b002      	add	sp, #8
 800c3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a8:	466b      	mov	r3, sp
 800c3aa:	cb03      	ldmia	r3!, {r0, r1}
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	6018      	str	r0, [r3, #0]
 800c3b0:	6059      	str	r1, [r3, #4]
 800c3b2:	e7eb      	b.n	800c38c <ucdr_serialize_double+0x10c>
 800c3b4:	68a2      	ldr	r2, [r4, #8]
 800c3b6:	6923      	ldr	r3, [r4, #16]
 800c3b8:	7da0      	ldrb	r0, [r4, #22]
 800c3ba:	7567      	strb	r7, [r4, #21]
 800c3bc:	1b92      	subs	r2, r2, r6
 800c3be:	1b9b      	subs	r3, r3, r6
 800c3c0:	f080 0001 	eor.w	r0, r0, #1
 800c3c4:	60a2      	str	r2, [r4, #8]
 800c3c6:	6123      	str	r3, [r4, #16]
 800c3c8:	b002      	add	sp, #8
 800c3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ce:	68a3      	ldr	r3, [r4, #8]
 800c3d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	68a3      	ldr	r3, [r4, #8]
 800c3d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	68a3      	ldr	r3, [r4, #8]
 800c3e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	68a3      	ldr	r3, [r4, #8]
 800c3e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	68a3      	ldr	r3, [r4, #8]
 800c400:	f89d 2000 	ldrb.w	r2, [sp]
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	e78a      	b.n	800c31e <ucdr_serialize_double+0x9e>
 800c408:	4628      	mov	r0, r5
 800c40a:	466d      	mov	r5, sp
 800c40c:	4629      	mov	r1, r5
 800c40e:	4632      	mov	r2, r6
 800c410:	f00e f9bf 	bl	801a792 <memcpy>
 800c414:	68a0      	ldr	r0, [r4, #8]
 800c416:	4642      	mov	r2, r8
 800c418:	19a9      	adds	r1, r5, r6
 800c41a:	f00e f9ba 	bl	801a792 <memcpy>
 800c41e:	e77e      	b.n	800c31e <ucdr_serialize_double+0x9e>

0800c420 <ucdr_serialize_endian_double>:
 800c420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c424:	460e      	mov	r6, r1
 800c426:	b083      	sub	sp, #12
 800c428:	2108      	movs	r1, #8
 800c42a:	4604      	mov	r4, r0
 800c42c:	ed8d 0b00 	vstr	d0, [sp]
 800c430:	f000 fabc 	bl	800c9ac <ucdr_buffer_alignment>
 800c434:	4601      	mov	r1, r0
 800c436:	4620      	mov	r0, r4
 800c438:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c43c:	f000 fafa 	bl	800ca34 <ucdr_advance_buffer>
 800c440:	2108      	movs	r1, #8
 800c442:	4620      	mov	r0, r4
 800c444:	f000 fa52 	bl	800c8ec <ucdr_check_buffer_available_for>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d14d      	bne.n	800c4e8 <ucdr_serialize_endian_double+0xc8>
 800c44c:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800c450:	42bd      	cmp	r5, r7
 800c452:	d944      	bls.n	800c4de <ucdr_serialize_endian_double+0xbe>
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	60a5      	str	r5, [r4, #8]
 800c458:	1bed      	subs	r5, r5, r7
 800c45a:	442b      	add	r3, r5
 800c45c:	f1c5 0908 	rsb	r9, r5, #8
 800c460:	6123      	str	r3, [r4, #16]
 800c462:	4649      	mov	r1, r9
 800c464:	4620      	mov	r0, r4
 800c466:	f000 fa4d 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d072      	beq.n	800c554 <ucdr_serialize_endian_double+0x134>
 800c46e:	2e01      	cmp	r6, #1
 800c470:	f000 809b 	beq.w	800c5aa <ucdr_serialize_endian_double+0x18a>
 800c474:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c478:	703b      	strb	r3, [r7, #0]
 800c47a:	2d00      	cmp	r5, #0
 800c47c:	d078      	beq.n	800c570 <ucdr_serialize_endian_double+0x150>
 800c47e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c482:	707b      	strb	r3, [r7, #1]
 800c484:	2d01      	cmp	r5, #1
 800c486:	d077      	beq.n	800c578 <ucdr_serialize_endian_double+0x158>
 800c488:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c48c:	70bb      	strb	r3, [r7, #2]
 800c48e:	2d02      	cmp	r5, #2
 800c490:	d076      	beq.n	800c580 <ucdr_serialize_endian_double+0x160>
 800c492:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c496:	70fb      	strb	r3, [r7, #3]
 800c498:	2d03      	cmp	r5, #3
 800c49a:	d075      	beq.n	800c588 <ucdr_serialize_endian_double+0x168>
 800c49c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c4a0:	713b      	strb	r3, [r7, #4]
 800c4a2:	2d04      	cmp	r5, #4
 800c4a4:	d074      	beq.n	800c590 <ucdr_serialize_endian_double+0x170>
 800c4a6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c4aa:	717b      	strb	r3, [r7, #5]
 800c4ac:	2d05      	cmp	r5, #5
 800c4ae:	d073      	beq.n	800c598 <ucdr_serialize_endian_double+0x178>
 800c4b0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c4b4:	71bb      	strb	r3, [r7, #6]
 800c4b6:	2d06      	cmp	r5, #6
 800c4b8:	d072      	beq.n	800c5a0 <ucdr_serialize_endian_double+0x180>
 800c4ba:	f89d 3000 	ldrb.w	r3, [sp]
 800c4be:	71fb      	strb	r3, [r7, #7]
 800c4c0:	6923      	ldr	r3, [r4, #16]
 800c4c2:	68a2      	ldr	r2, [r4, #8]
 800c4c4:	7da0      	ldrb	r0, [r4, #22]
 800c4c6:	3308      	adds	r3, #8
 800c4c8:	1b5d      	subs	r5, r3, r5
 800c4ca:	444a      	add	r2, r9
 800c4cc:	2308      	movs	r3, #8
 800c4ce:	f080 0001 	eor.w	r0, r0, #1
 800c4d2:	60a2      	str	r2, [r4, #8]
 800c4d4:	6125      	str	r5, [r4, #16]
 800c4d6:	7563      	strb	r3, [r4, #21]
 800c4d8:	b003      	add	sp, #12
 800c4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4de:	2108      	movs	r1, #8
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 fa0f 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c4e6:	b348      	cbz	r0, 800c53c <ucdr_serialize_endian_double+0x11c>
 800c4e8:	2e01      	cmp	r6, #1
 800c4ea:	d02d      	beq.n	800c548 <ucdr_serialize_endian_double+0x128>
 800c4ec:	68a3      	ldr	r3, [r4, #8]
 800c4ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c4f2:	701a      	strb	r2, [r3, #0]
 800c4f4:	68a3      	ldr	r3, [r4, #8]
 800c4f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c4fa:	705a      	strb	r2, [r3, #1]
 800c4fc:	68a3      	ldr	r3, [r4, #8]
 800c4fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c502:	709a      	strb	r2, [r3, #2]
 800c504:	68a3      	ldr	r3, [r4, #8]
 800c506:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c50a:	70da      	strb	r2, [r3, #3]
 800c50c:	68a3      	ldr	r3, [r4, #8]
 800c50e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c512:	711a      	strb	r2, [r3, #4]
 800c514:	68a3      	ldr	r3, [r4, #8]
 800c516:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c51a:	715a      	strb	r2, [r3, #5]
 800c51c:	68a3      	ldr	r3, [r4, #8]
 800c51e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c522:	719a      	strb	r2, [r3, #6]
 800c524:	68a3      	ldr	r3, [r4, #8]
 800c526:	f89d 2000 	ldrb.w	r2, [sp]
 800c52a:	71da      	strb	r2, [r3, #7]
 800c52c:	68a2      	ldr	r2, [r4, #8]
 800c52e:	6923      	ldr	r3, [r4, #16]
 800c530:	3208      	adds	r2, #8
 800c532:	3308      	adds	r3, #8
 800c534:	2108      	movs	r1, #8
 800c536:	60a2      	str	r2, [r4, #8]
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	7561      	strb	r1, [r4, #21]
 800c53c:	7da0      	ldrb	r0, [r4, #22]
 800c53e:	f080 0001 	eor.w	r0, r0, #1
 800c542:	b003      	add	sp, #12
 800c544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c548:	466b      	mov	r3, sp
 800c54a:	cb03      	ldmia	r3!, {r0, r1}
 800c54c:	68a3      	ldr	r3, [r4, #8]
 800c54e:	6018      	str	r0, [r3, #0]
 800c550:	6059      	str	r1, [r3, #4]
 800c552:	e7eb      	b.n	800c52c <ucdr_serialize_endian_double+0x10c>
 800c554:	68a2      	ldr	r2, [r4, #8]
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	7da0      	ldrb	r0, [r4, #22]
 800c55a:	f884 8015 	strb.w	r8, [r4, #21]
 800c55e:	1b52      	subs	r2, r2, r5
 800c560:	1b5b      	subs	r3, r3, r5
 800c562:	f080 0001 	eor.w	r0, r0, #1
 800c566:	60a2      	str	r2, [r4, #8]
 800c568:	6123      	str	r3, [r4, #16]
 800c56a:	b003      	add	sp, #12
 800c56c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c570:	68a3      	ldr	r3, [r4, #8]
 800c572:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c576:	701a      	strb	r2, [r3, #0]
 800c578:	68a3      	ldr	r3, [r4, #8]
 800c57a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	68a3      	ldr	r3, [r4, #8]
 800c582:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c586:	701a      	strb	r2, [r3, #0]
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	68a3      	ldr	r3, [r4, #8]
 800c592:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c596:	701a      	strb	r2, [r3, #0]
 800c598:	68a3      	ldr	r3, [r4, #8]
 800c59a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	68a3      	ldr	r3, [r4, #8]
 800c5a2:	f89d 2000 	ldrb.w	r2, [sp]
 800c5a6:	701a      	strb	r2, [r3, #0]
 800c5a8:	e78a      	b.n	800c4c0 <ucdr_serialize_endian_double+0xa0>
 800c5aa:	466e      	mov	r6, sp
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	462a      	mov	r2, r5
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f00e f8ee 	bl	801a792 <memcpy>
 800c5b6:	68a0      	ldr	r0, [r4, #8]
 800c5b8:	464a      	mov	r2, r9
 800c5ba:	1971      	adds	r1, r6, r5
 800c5bc:	f00e f8e9 	bl	801a792 <memcpy>
 800c5c0:	e77e      	b.n	800c4c0 <ucdr_serialize_endian_double+0xa0>
 800c5c2:	bf00      	nop

0800c5c4 <ucdr_deserialize_double>:
 800c5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	2108      	movs	r1, #8
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	f000 f9ed 	bl	800c9ac <ucdr_buffer_alignment>
 800c5d2:	4601      	mov	r1, r0
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c5da:	f000 fa2b 	bl	800ca34 <ucdr_advance_buffer>
 800c5de:	2108      	movs	r1, #8
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 f983 	bl	800c8ec <ucdr_check_buffer_available_for>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d151      	bne.n	800c68e <ucdr_deserialize_double+0xca>
 800c5ea:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c5ee:	42be      	cmp	r6, r7
 800c5f0:	d948      	bls.n	800c684 <ucdr_deserialize_double+0xc0>
 800c5f2:	6923      	ldr	r3, [r4, #16]
 800c5f4:	60a6      	str	r6, [r4, #8]
 800c5f6:	1bf6      	subs	r6, r6, r7
 800c5f8:	4433      	add	r3, r6
 800c5fa:	f1c6 0808 	rsb	r8, r6, #8
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	4641      	mov	r1, r8
 800c602:	4620      	mov	r0, r4
 800c604:	f000 f97e 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c608:	2800      	cmp	r0, #0
 800c60a:	d06d      	beq.n	800c6e8 <ucdr_deserialize_double+0x124>
 800c60c:	7d23      	ldrb	r3, [r4, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	f000 8093 	beq.w	800c73a <ucdr_deserialize_double+0x176>
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	702b      	strb	r3, [r5, #0]
 800c618:	2e00      	cmp	r6, #0
 800c61a:	d072      	beq.n	800c702 <ucdr_deserialize_double+0x13e>
 800c61c:	79bb      	ldrb	r3, [r7, #6]
 800c61e:	706b      	strb	r3, [r5, #1]
 800c620:	2e01      	cmp	r6, #1
 800c622:	f105 0302 	add.w	r3, r5, #2
 800c626:	d070      	beq.n	800c70a <ucdr_deserialize_double+0x146>
 800c628:	797b      	ldrb	r3, [r7, #5]
 800c62a:	70ab      	strb	r3, [r5, #2]
 800c62c:	2e02      	cmp	r6, #2
 800c62e:	f105 0303 	add.w	r3, r5, #3
 800c632:	d06e      	beq.n	800c712 <ucdr_deserialize_double+0x14e>
 800c634:	793b      	ldrb	r3, [r7, #4]
 800c636:	70eb      	strb	r3, [r5, #3]
 800c638:	2e03      	cmp	r6, #3
 800c63a:	f105 0304 	add.w	r3, r5, #4
 800c63e:	d06c      	beq.n	800c71a <ucdr_deserialize_double+0x156>
 800c640:	78fb      	ldrb	r3, [r7, #3]
 800c642:	712b      	strb	r3, [r5, #4]
 800c644:	2e04      	cmp	r6, #4
 800c646:	f105 0305 	add.w	r3, r5, #5
 800c64a:	d06a      	beq.n	800c722 <ucdr_deserialize_double+0x15e>
 800c64c:	78bb      	ldrb	r3, [r7, #2]
 800c64e:	716b      	strb	r3, [r5, #5]
 800c650:	2e05      	cmp	r6, #5
 800c652:	f105 0306 	add.w	r3, r5, #6
 800c656:	d068      	beq.n	800c72a <ucdr_deserialize_double+0x166>
 800c658:	787b      	ldrb	r3, [r7, #1]
 800c65a:	71ab      	strb	r3, [r5, #6]
 800c65c:	2e06      	cmp	r6, #6
 800c65e:	f105 0307 	add.w	r3, r5, #7
 800c662:	d066      	beq.n	800c732 <ucdr_deserialize_double+0x16e>
 800c664:	783b      	ldrb	r3, [r7, #0]
 800c666:	71eb      	strb	r3, [r5, #7]
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	68a2      	ldr	r2, [r4, #8]
 800c66c:	7da0      	ldrb	r0, [r4, #22]
 800c66e:	3308      	adds	r3, #8
 800c670:	1b9e      	subs	r6, r3, r6
 800c672:	2308      	movs	r3, #8
 800c674:	4442      	add	r2, r8
 800c676:	7563      	strb	r3, [r4, #21]
 800c678:	60a2      	str	r2, [r4, #8]
 800c67a:	6126      	str	r6, [r4, #16]
 800c67c:	f080 0001 	eor.w	r0, r0, #1
 800c680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c684:	2108      	movs	r1, #8
 800c686:	4620      	mov	r0, r4
 800c688:	f000 f93c 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c68c:	b310      	cbz	r0, 800c6d4 <ucdr_deserialize_double+0x110>
 800c68e:	7d23      	ldrb	r3, [r4, #20]
 800c690:	2b01      	cmp	r3, #1
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	d023      	beq.n	800c6de <ucdr_deserialize_double+0x11a>
 800c696:	79db      	ldrb	r3, [r3, #7]
 800c698:	702b      	strb	r3, [r5, #0]
 800c69a:	68a3      	ldr	r3, [r4, #8]
 800c69c:	799b      	ldrb	r3, [r3, #6]
 800c69e:	706b      	strb	r3, [r5, #1]
 800c6a0:	68a3      	ldr	r3, [r4, #8]
 800c6a2:	795b      	ldrb	r3, [r3, #5]
 800c6a4:	70ab      	strb	r3, [r5, #2]
 800c6a6:	68a3      	ldr	r3, [r4, #8]
 800c6a8:	791b      	ldrb	r3, [r3, #4]
 800c6aa:	70eb      	strb	r3, [r5, #3]
 800c6ac:	68a3      	ldr	r3, [r4, #8]
 800c6ae:	78db      	ldrb	r3, [r3, #3]
 800c6b0:	712b      	strb	r3, [r5, #4]
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	789b      	ldrb	r3, [r3, #2]
 800c6b6:	716b      	strb	r3, [r5, #5]
 800c6b8:	68a3      	ldr	r3, [r4, #8]
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	71ab      	strb	r3, [r5, #6]
 800c6be:	68a3      	ldr	r3, [r4, #8]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	71eb      	strb	r3, [r5, #7]
 800c6c4:	68a2      	ldr	r2, [r4, #8]
 800c6c6:	6923      	ldr	r3, [r4, #16]
 800c6c8:	3208      	adds	r2, #8
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	2108      	movs	r1, #8
 800c6ce:	60a2      	str	r2, [r4, #8]
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	7561      	strb	r1, [r4, #21]
 800c6d4:	7da0      	ldrb	r0, [r4, #22]
 800c6d6:	f080 0001 	eor.w	r0, r0, #1
 800c6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	606b      	str	r3, [r5, #4]
 800c6e4:	602a      	str	r2, [r5, #0]
 800c6e6:	e7ed      	b.n	800c6c4 <ucdr_deserialize_double+0x100>
 800c6e8:	68a2      	ldr	r2, [r4, #8]
 800c6ea:	6923      	ldr	r3, [r4, #16]
 800c6ec:	7da0      	ldrb	r0, [r4, #22]
 800c6ee:	f884 9015 	strb.w	r9, [r4, #21]
 800c6f2:	1b92      	subs	r2, r2, r6
 800c6f4:	1b9b      	subs	r3, r3, r6
 800c6f6:	60a2      	str	r2, [r4, #8]
 800c6f8:	6123      	str	r3, [r4, #16]
 800c6fa:	f080 0001 	eor.w	r0, r0, #1
 800c6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c702:	68a3      	ldr	r3, [r4, #8]
 800c704:	799b      	ldrb	r3, [r3, #6]
 800c706:	706b      	strb	r3, [r5, #1]
 800c708:	1cab      	adds	r3, r5, #2
 800c70a:	68a2      	ldr	r2, [r4, #8]
 800c70c:	7952      	ldrb	r2, [r2, #5]
 800c70e:	f803 2b01 	strb.w	r2, [r3], #1
 800c712:	68a2      	ldr	r2, [r4, #8]
 800c714:	7912      	ldrb	r2, [r2, #4]
 800c716:	f803 2b01 	strb.w	r2, [r3], #1
 800c71a:	68a2      	ldr	r2, [r4, #8]
 800c71c:	78d2      	ldrb	r2, [r2, #3]
 800c71e:	f803 2b01 	strb.w	r2, [r3], #1
 800c722:	68a2      	ldr	r2, [r4, #8]
 800c724:	7892      	ldrb	r2, [r2, #2]
 800c726:	f803 2b01 	strb.w	r2, [r3], #1
 800c72a:	68a2      	ldr	r2, [r4, #8]
 800c72c:	7852      	ldrb	r2, [r2, #1]
 800c72e:	f803 2b01 	strb.w	r2, [r3], #1
 800c732:	68a2      	ldr	r2, [r4, #8]
 800c734:	7812      	ldrb	r2, [r2, #0]
 800c736:	701a      	strb	r2, [r3, #0]
 800c738:	e796      	b.n	800c668 <ucdr_deserialize_double+0xa4>
 800c73a:	4639      	mov	r1, r7
 800c73c:	4632      	mov	r2, r6
 800c73e:	4628      	mov	r0, r5
 800c740:	f00e f827 	bl	801a792 <memcpy>
 800c744:	68a1      	ldr	r1, [r4, #8]
 800c746:	4642      	mov	r2, r8
 800c748:	19a8      	adds	r0, r5, r6
 800c74a:	f00e f822 	bl	801a792 <memcpy>
 800c74e:	e78b      	b.n	800c668 <ucdr_deserialize_double+0xa4>

0800c750 <ucdr_deserialize_endian_double>:
 800c750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c754:	460f      	mov	r7, r1
 800c756:	2108      	movs	r1, #8
 800c758:	4604      	mov	r4, r0
 800c75a:	4615      	mov	r5, r2
 800c75c:	f000 f926 	bl	800c9ac <ucdr_buffer_alignment>
 800c760:	4601      	mov	r1, r0
 800c762:	4620      	mov	r0, r4
 800c764:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c768:	f000 f964 	bl	800ca34 <ucdr_advance_buffer>
 800c76c:	2108      	movs	r1, #8
 800c76e:	4620      	mov	r0, r4
 800c770:	f000 f8bc 	bl	800c8ec <ucdr_check_buffer_available_for>
 800c774:	2800      	cmp	r0, #0
 800c776:	d159      	bne.n	800c82c <ucdr_deserialize_endian_double+0xdc>
 800c778:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800c77c:	4546      	cmp	r6, r8
 800c77e:	d950      	bls.n	800c822 <ucdr_deserialize_endian_double+0xd2>
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	60a6      	str	r6, [r4, #8]
 800c784:	eba6 0608 	sub.w	r6, r6, r8
 800c788:	4433      	add	r3, r6
 800c78a:	f1c6 0a08 	rsb	sl, r6, #8
 800c78e:	6123      	str	r3, [r4, #16]
 800c790:	4651      	mov	r1, sl
 800c792:	4620      	mov	r0, r4
 800c794:	f000 f8b6 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d073      	beq.n	800c884 <ucdr_deserialize_endian_double+0x134>
 800c79c:	2f01      	cmp	r7, #1
 800c79e:	f000 809a 	beq.w	800c8d6 <ucdr_deserialize_endian_double+0x186>
 800c7a2:	f898 3007 	ldrb.w	r3, [r8, #7]
 800c7a6:	702b      	strb	r3, [r5, #0]
 800c7a8:	2e00      	cmp	r6, #0
 800c7aa:	d078      	beq.n	800c89e <ucdr_deserialize_endian_double+0x14e>
 800c7ac:	f898 3006 	ldrb.w	r3, [r8, #6]
 800c7b0:	706b      	strb	r3, [r5, #1]
 800c7b2:	2e01      	cmp	r6, #1
 800c7b4:	f105 0302 	add.w	r3, r5, #2
 800c7b8:	d075      	beq.n	800c8a6 <ucdr_deserialize_endian_double+0x156>
 800c7ba:	f898 3005 	ldrb.w	r3, [r8, #5]
 800c7be:	70ab      	strb	r3, [r5, #2]
 800c7c0:	2e02      	cmp	r6, #2
 800c7c2:	f105 0303 	add.w	r3, r5, #3
 800c7c6:	d072      	beq.n	800c8ae <ucdr_deserialize_endian_double+0x15e>
 800c7c8:	f898 3004 	ldrb.w	r3, [r8, #4]
 800c7cc:	70eb      	strb	r3, [r5, #3]
 800c7ce:	2e03      	cmp	r6, #3
 800c7d0:	f105 0304 	add.w	r3, r5, #4
 800c7d4:	d06f      	beq.n	800c8b6 <ucdr_deserialize_endian_double+0x166>
 800c7d6:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c7da:	712b      	strb	r3, [r5, #4]
 800c7dc:	2e04      	cmp	r6, #4
 800c7de:	f105 0305 	add.w	r3, r5, #5
 800c7e2:	d06c      	beq.n	800c8be <ucdr_deserialize_endian_double+0x16e>
 800c7e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c7e8:	716b      	strb	r3, [r5, #5]
 800c7ea:	2e05      	cmp	r6, #5
 800c7ec:	f105 0306 	add.w	r3, r5, #6
 800c7f0:	d069      	beq.n	800c8c6 <ucdr_deserialize_endian_double+0x176>
 800c7f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c7f6:	71ab      	strb	r3, [r5, #6]
 800c7f8:	2e06      	cmp	r6, #6
 800c7fa:	f105 0307 	add.w	r3, r5, #7
 800c7fe:	d066      	beq.n	800c8ce <ucdr_deserialize_endian_double+0x17e>
 800c800:	f898 3000 	ldrb.w	r3, [r8]
 800c804:	71eb      	strb	r3, [r5, #7]
 800c806:	6923      	ldr	r3, [r4, #16]
 800c808:	68a2      	ldr	r2, [r4, #8]
 800c80a:	7da0      	ldrb	r0, [r4, #22]
 800c80c:	3308      	adds	r3, #8
 800c80e:	1b9e      	subs	r6, r3, r6
 800c810:	2308      	movs	r3, #8
 800c812:	4452      	add	r2, sl
 800c814:	7563      	strb	r3, [r4, #21]
 800c816:	60a2      	str	r2, [r4, #8]
 800c818:	6126      	str	r6, [r4, #16]
 800c81a:	f080 0001 	eor.w	r0, r0, #1
 800c81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c822:	2108      	movs	r1, #8
 800c824:	4620      	mov	r0, r4
 800c826:	f000 f86d 	bl	800c904 <ucdr_check_final_buffer_behavior>
 800c82a:	b308      	cbz	r0, 800c870 <ucdr_deserialize_endian_double+0x120>
 800c82c:	2f01      	cmp	r7, #1
 800c82e:	68a3      	ldr	r3, [r4, #8]
 800c830:	d023      	beq.n	800c87a <ucdr_deserialize_endian_double+0x12a>
 800c832:	79db      	ldrb	r3, [r3, #7]
 800c834:	702b      	strb	r3, [r5, #0]
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	799b      	ldrb	r3, [r3, #6]
 800c83a:	706b      	strb	r3, [r5, #1]
 800c83c:	68a3      	ldr	r3, [r4, #8]
 800c83e:	795b      	ldrb	r3, [r3, #5]
 800c840:	70ab      	strb	r3, [r5, #2]
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	791b      	ldrb	r3, [r3, #4]
 800c846:	70eb      	strb	r3, [r5, #3]
 800c848:	68a3      	ldr	r3, [r4, #8]
 800c84a:	78db      	ldrb	r3, [r3, #3]
 800c84c:	712b      	strb	r3, [r5, #4]
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	789b      	ldrb	r3, [r3, #2]
 800c852:	716b      	strb	r3, [r5, #5]
 800c854:	68a3      	ldr	r3, [r4, #8]
 800c856:	785b      	ldrb	r3, [r3, #1]
 800c858:	71ab      	strb	r3, [r5, #6]
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	71eb      	strb	r3, [r5, #7]
 800c860:	68a2      	ldr	r2, [r4, #8]
 800c862:	6923      	ldr	r3, [r4, #16]
 800c864:	3208      	adds	r2, #8
 800c866:	3308      	adds	r3, #8
 800c868:	2108      	movs	r1, #8
 800c86a:	60a2      	str	r2, [r4, #8]
 800c86c:	6123      	str	r3, [r4, #16]
 800c86e:	7561      	strb	r1, [r4, #21]
 800c870:	7da0      	ldrb	r0, [r4, #22]
 800c872:	f080 0001 	eor.w	r0, r0, #1
 800c876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	606b      	str	r3, [r5, #4]
 800c880:	602a      	str	r2, [r5, #0]
 800c882:	e7ed      	b.n	800c860 <ucdr_deserialize_endian_double+0x110>
 800c884:	68a2      	ldr	r2, [r4, #8]
 800c886:	6923      	ldr	r3, [r4, #16]
 800c888:	7da0      	ldrb	r0, [r4, #22]
 800c88a:	f884 9015 	strb.w	r9, [r4, #21]
 800c88e:	1b92      	subs	r2, r2, r6
 800c890:	1b9b      	subs	r3, r3, r6
 800c892:	60a2      	str	r2, [r4, #8]
 800c894:	6123      	str	r3, [r4, #16]
 800c896:	f080 0001 	eor.w	r0, r0, #1
 800c89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	799b      	ldrb	r3, [r3, #6]
 800c8a2:	706b      	strb	r3, [r5, #1]
 800c8a4:	1cab      	adds	r3, r5, #2
 800c8a6:	68a2      	ldr	r2, [r4, #8]
 800c8a8:	7952      	ldrb	r2, [r2, #5]
 800c8aa:	f803 2b01 	strb.w	r2, [r3], #1
 800c8ae:	68a2      	ldr	r2, [r4, #8]
 800c8b0:	7912      	ldrb	r2, [r2, #4]
 800c8b2:	f803 2b01 	strb.w	r2, [r3], #1
 800c8b6:	68a2      	ldr	r2, [r4, #8]
 800c8b8:	78d2      	ldrb	r2, [r2, #3]
 800c8ba:	f803 2b01 	strb.w	r2, [r3], #1
 800c8be:	68a2      	ldr	r2, [r4, #8]
 800c8c0:	7892      	ldrb	r2, [r2, #2]
 800c8c2:	f803 2b01 	strb.w	r2, [r3], #1
 800c8c6:	68a2      	ldr	r2, [r4, #8]
 800c8c8:	7852      	ldrb	r2, [r2, #1]
 800c8ca:	f803 2b01 	strb.w	r2, [r3], #1
 800c8ce:	68a2      	ldr	r2, [r4, #8]
 800c8d0:	7812      	ldrb	r2, [r2, #0]
 800c8d2:	701a      	strb	r2, [r3, #0]
 800c8d4:	e797      	b.n	800c806 <ucdr_deserialize_endian_double+0xb6>
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	4632      	mov	r2, r6
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f00d ff59 	bl	801a792 <memcpy>
 800c8e0:	68a1      	ldr	r1, [r4, #8]
 800c8e2:	4652      	mov	r2, sl
 800c8e4:	19a8      	adds	r0, r5, r6
 800c8e6:	f00d ff54 	bl	801a792 <memcpy>
 800c8ea:	e78c      	b.n	800c806 <ucdr_deserialize_endian_double+0xb6>

0800c8ec <ucdr_check_buffer_available_for>:
 800c8ec:	7d83      	ldrb	r3, [r0, #22]
 800c8ee:	b93b      	cbnz	r3, 800c900 <ucdr_check_buffer_available_for+0x14>
 800c8f0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c8f4:	4419      	add	r1, r3
 800c8f6:	4288      	cmp	r0, r1
 800c8f8:	bf34      	ite	cc
 800c8fa:	2000      	movcc	r0, #0
 800c8fc:	2001      	movcs	r0, #1
 800c8fe:	4770      	bx	lr
 800c900:	2000      	movs	r0, #0
 800c902:	4770      	bx	lr

0800c904 <ucdr_check_final_buffer_behavior>:
 800c904:	7d83      	ldrb	r3, [r0, #22]
 800c906:	b943      	cbnz	r3, 800c91a <ucdr_check_final_buffer_behavior+0x16>
 800c908:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c90c:	4291      	cmp	r1, r2
 800c90e:	b510      	push	{r4, lr}
 800c910:	4604      	mov	r4, r0
 800c912:	d205      	bcs.n	800c920 <ucdr_check_final_buffer_behavior+0x1c>
 800c914:	2301      	movs	r3, #1
 800c916:	4618      	mov	r0, r3
 800c918:	bd10      	pop	{r4, pc}
 800c91a:	2300      	movs	r3, #0
 800c91c:	4618      	mov	r0, r3
 800c91e:	4770      	bx	lr
 800c920:	6982      	ldr	r2, [r0, #24]
 800c922:	b13a      	cbz	r2, 800c934 <ucdr_check_final_buffer_behavior+0x30>
 800c924:	69c1      	ldr	r1, [r0, #28]
 800c926:	4790      	blx	r2
 800c928:	f080 0301 	eor.w	r3, r0, #1
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	75a0      	strb	r0, [r4, #22]
 800c930:	4618      	mov	r0, r3
 800c932:	bd10      	pop	{r4, pc}
 800c934:	2001      	movs	r0, #1
 800c936:	75a0      	strb	r0, [r4, #22]
 800c938:	e7fa      	b.n	800c930 <ucdr_check_final_buffer_behavior+0x2c>
 800c93a:	bf00      	nop

0800c93c <ucdr_set_on_full_buffer_callback>:
 800c93c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop

0800c944 <ucdr_init_buffer_origin_offset_endian>:
 800c944:	b410      	push	{r4}
 800c946:	9c01      	ldr	r4, [sp, #4]
 800c948:	6001      	str	r1, [r0, #0]
 800c94a:	440a      	add	r2, r1
 800c94c:	6042      	str	r2, [r0, #4]
 800c94e:	190a      	adds	r2, r1, r4
 800c950:	441c      	add	r4, r3
 800c952:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c956:	6082      	str	r2, [r0, #8]
 800c958:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c95c:	7503      	strb	r3, [r0, #20]
 800c95e:	2200      	movs	r2, #0
 800c960:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c968:	7542      	strb	r2, [r0, #21]
 800c96a:	7582      	strb	r2, [r0, #22]
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop

0800c970 <ucdr_init_buffer_origin_offset>:
 800c970:	b510      	push	{r4, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	9c04      	ldr	r4, [sp, #16]
 800c976:	9400      	str	r4, [sp, #0]
 800c978:	2401      	movs	r4, #1
 800c97a:	9401      	str	r4, [sp, #4]
 800c97c:	f7ff ffe2 	bl	800c944 <ucdr_init_buffer_origin_offset_endian>
 800c980:	b002      	add	sp, #8
 800c982:	bd10      	pop	{r4, pc}

0800c984 <ucdr_init_buffer_origin>:
 800c984:	b510      	push	{r4, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	2400      	movs	r4, #0
 800c98a:	9400      	str	r4, [sp, #0]
 800c98c:	f7ff fff0 	bl	800c970 <ucdr_init_buffer_origin_offset>
 800c990:	b002      	add	sp, #8
 800c992:	bd10      	pop	{r4, pc}

0800c994 <ucdr_init_buffer>:
 800c994:	2300      	movs	r3, #0
 800c996:	f7ff bff5 	b.w	800c984 <ucdr_init_buffer_origin>
 800c99a:	bf00      	nop

0800c99c <ucdr_alignment>:
 800c99c:	fbb0 f3f1 	udiv	r3, r0, r1
 800c9a0:	fb03 0011 	mls	r0, r3, r1, r0
 800c9a4:	1a08      	subs	r0, r1, r0
 800c9a6:	3901      	subs	r1, #1
 800c9a8:	4008      	ands	r0, r1
 800c9aa:	4770      	bx	lr

0800c9ac <ucdr_buffer_alignment>:
 800c9ac:	7d43      	ldrb	r3, [r0, #21]
 800c9ae:	428b      	cmp	r3, r1
 800c9b0:	d208      	bcs.n	800c9c4 <ucdr_buffer_alignment+0x18>
 800c9b2:	6900      	ldr	r0, [r0, #16]
 800c9b4:	fbb0 f3f1 	udiv	r3, r0, r1
 800c9b8:	fb01 0013 	mls	r0, r1, r3, r0
 800c9bc:	1a08      	subs	r0, r1, r0
 800c9be:	3901      	subs	r1, #1
 800c9c0:	4008      	ands	r0, r1
 800c9c2:	4770      	bx	lr
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	4770      	bx	lr

0800c9c8 <ucdr_align_to>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	f7ff ffed 	bl	800c9ac <ucdr_buffer_alignment>
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	6921      	ldr	r1, [r4, #16]
 800c9d6:	7565      	strb	r5, [r4, #21]
 800c9d8:	181a      	adds	r2, r3, r0
 800c9da:	6863      	ldr	r3, [r4, #4]
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	4408      	add	r0, r1
 800c9e0:	bf28      	it	cs
 800c9e2:	4613      	movcs	r3, r2
 800c9e4:	6120      	str	r0, [r4, #16]
 800c9e6:	60a3      	str	r3, [r4, #8]
 800c9e8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ea:	bf00      	nop

0800c9ec <ucdr_buffer_length>:
 800c9ec:	6882      	ldr	r2, [r0, #8]
 800c9ee:	6800      	ldr	r0, [r0, #0]
 800c9f0:	1a10      	subs	r0, r2, r0
 800c9f2:	4770      	bx	lr

0800c9f4 <ucdr_buffer_remaining>:
 800c9f4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c9f8:	1a10      	subs	r0, r2, r0
 800c9fa:	4770      	bx	lr

0800c9fc <ucdr_check_final_buffer_behavior_array>:
 800c9fc:	b538      	push	{r3, r4, r5, lr}
 800c9fe:	7d83      	ldrb	r3, [r0, #22]
 800ca00:	b963      	cbnz	r3, 800ca1c <ucdr_check_final_buffer_behavior_array+0x20>
 800ca02:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	4604      	mov	r4, r0
 800ca0a:	460d      	mov	r5, r1
 800ca0c:	d308      	bcc.n	800ca20 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca0e:	b139      	cbz	r1, 800ca20 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca10:	6983      	ldr	r3, [r0, #24]
 800ca12:	b163      	cbz	r3, 800ca2e <ucdr_check_final_buffer_behavior_array+0x32>
 800ca14:	69c1      	ldr	r1, [r0, #28]
 800ca16:	4798      	blx	r3
 800ca18:	75a0      	strb	r0, [r4, #22]
 800ca1a:	b108      	cbz	r0, 800ca20 <ucdr_check_final_buffer_behavior_array+0x24>
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	bd38      	pop	{r3, r4, r5, pc}
 800ca20:	4620      	mov	r0, r4
 800ca22:	f7ff ffe7 	bl	800c9f4 <ucdr_buffer_remaining>
 800ca26:	42a8      	cmp	r0, r5
 800ca28:	bf28      	it	cs
 800ca2a:	4628      	movcs	r0, r5
 800ca2c:	bd38      	pop	{r3, r4, r5, pc}
 800ca2e:	2301      	movs	r3, #1
 800ca30:	7583      	strb	r3, [r0, #22]
 800ca32:	e7f3      	b.n	800ca1c <ucdr_check_final_buffer_behavior_array+0x20>

0800ca34 <ucdr_advance_buffer>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4604      	mov	r4, r0
 800ca38:	460d      	mov	r5, r1
 800ca3a:	f7ff ff57 	bl	800c8ec <ucdr_check_buffer_available_for>
 800ca3e:	b178      	cbz	r0, 800ca60 <ucdr_advance_buffer+0x2c>
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	68a2      	ldr	r2, [r4, #8]
 800ca44:	442b      	add	r3, r5
 800ca46:	6123      	str	r3, [r4, #16]
 800ca48:	2301      	movs	r3, #1
 800ca4a:	442a      	add	r2, r5
 800ca4c:	7563      	strb	r3, [r4, #21]
 800ca4e:	60a2      	str	r2, [r4, #8]
 800ca50:	bd38      	pop	{r3, r4, r5, pc}
 800ca52:	68a2      	ldr	r2, [r4, #8]
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	4402      	add	r2, r0
 800ca58:	4403      	add	r3, r0
 800ca5a:	1a2d      	subs	r5, r5, r0
 800ca5c:	60a2      	str	r2, [r4, #8]
 800ca5e:	6123      	str	r3, [r4, #16]
 800ca60:	4629      	mov	r1, r5
 800ca62:	2201      	movs	r2, #1
 800ca64:	4620      	mov	r0, r4
 800ca66:	f7ff ffc9 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	d1f1      	bne.n	800ca52 <ucdr_advance_buffer+0x1e>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	7563      	strb	r3, [r4, #21]
 800ca72:	bd38      	pop	{r3, r4, r5, pc}

0800ca74 <rcl_get_zero_initialized_init_options>:
 800ca74:	2000      	movs	r0, #0
 800ca76:	4770      	bx	lr

0800ca78 <rcl_init_options_init>:
 800ca78:	b084      	sub	sp, #16
 800ca7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7c:	b097      	sub	sp, #92	@ 0x5c
 800ca7e:	ae1d      	add	r6, sp, #116	@ 0x74
 800ca80:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ca84:	2800      	cmp	r0, #0
 800ca86:	d058      	beq.n	800cb3a <rcl_init_options_init+0xc2>
 800ca88:	6803      	ldr	r3, [r0, #0]
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	b133      	cbz	r3, 800ca9c <rcl_init_options_init+0x24>
 800ca8e:	2464      	movs	r4, #100	@ 0x64
 800ca90:	4620      	mov	r0, r4
 800ca92:	b017      	add	sp, #92	@ 0x5c
 800ca94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ca98:	b004      	add	sp, #16
 800ca9a:	4770      	bx	lr
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f001 f9d1 	bl	800de44 <rcutils_allocator_is_valid>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d049      	beq.n	800cb3a <rcl_init_options_init+0xc2>
 800caa6:	46b4      	mov	ip, r6
 800caa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800caac:	ac11      	add	r4, sp, #68	@ 0x44
 800caae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cab0:	f8dc 3000 	ldr.w	r3, [ip]
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cab8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800caba:	2050      	movs	r0, #80	@ 0x50
 800cabc:	4798      	blx	r3
 800cabe:	4604      	mov	r4, r0
 800cac0:	6028      	str	r0, [r5, #0]
 800cac2:	2800      	cmp	r0, #0
 800cac4:	d03b      	beq.n	800cb3e <rcl_init_options_init+0xc6>
 800cac6:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800caca:	4686      	mov	lr, r0
 800cacc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cad0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cad4:	f8dc 3000 	ldr.w	r3, [ip]
 800cad8:	f8ce 3000 	str.w	r3, [lr]
 800cadc:	a802      	add	r0, sp, #8
 800cade:	f001 fa43 	bl	800df68 <rmw_get_zero_initialized_init_options>
 800cae2:	f10d 0e08 	add.w	lr, sp, #8
 800cae6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800caea:	f104 0c18 	add.w	ip, r4, #24
 800caee:	682f      	ldr	r7, [r5, #0]
 800caf0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800caf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800caf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cafc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cb00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb04:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cb08:	ac20      	add	r4, sp, #128	@ 0x80
 800cb0a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cb0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cb12:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cb16:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cb1a:	f107 0018 	add.w	r0, r7, #24
 800cb1e:	f001 fa51 	bl	800dfc4 <rmw_init_options_init>
 800cb22:	4604      	mov	r4, r0
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d0b3      	beq.n	800ca90 <rcl_init_options_init+0x18>
 800cb28:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cb2a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cb2c:	6828      	ldr	r0, [r5, #0]
 800cb2e:	4798      	blx	r3
 800cb30:	4620      	mov	r0, r4
 800cb32:	f007 fc63 	bl	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 800cb36:	4604      	mov	r4, r0
 800cb38:	e7aa      	b.n	800ca90 <rcl_init_options_init+0x18>
 800cb3a:	240b      	movs	r4, #11
 800cb3c:	e7a8      	b.n	800ca90 <rcl_init_options_init+0x18>
 800cb3e:	240a      	movs	r4, #10
 800cb40:	e7a6      	b.n	800ca90 <rcl_init_options_init+0x18>
 800cb42:	bf00      	nop

0800cb44 <rcl_init_options_fini>:
 800cb44:	b530      	push	{r4, r5, lr}
 800cb46:	b087      	sub	sp, #28
 800cb48:	b1f0      	cbz	r0, 800cb88 <rcl_init_options_fini+0x44>
 800cb4a:	6803      	ldr	r3, [r0, #0]
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	b1db      	cbz	r3, 800cb88 <rcl_init_options_fini+0x44>
 800cb50:	469c      	mov	ip, r3
 800cb52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb56:	f10d 0e04 	add.w	lr, sp, #4
 800cb5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cb5e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb62:	f8ce 3000 	str.w	r3, [lr]
 800cb66:	a801      	add	r0, sp, #4
 800cb68:	f001 f96c 	bl	800de44 <rcutils_allocator_is_valid>
 800cb6c:	b160      	cbz	r0, 800cb88 <rcl_init_options_fini+0x44>
 800cb6e:	6820      	ldr	r0, [r4, #0]
 800cb70:	3018      	adds	r0, #24
 800cb72:	f001 fad7 	bl	800e124 <rmw_init_options_fini>
 800cb76:	4605      	mov	r5, r0
 800cb78:	b950      	cbnz	r0, 800cb90 <rcl_init_options_fini+0x4c>
 800cb7a:	6820      	ldr	r0, [r4, #0]
 800cb7c:	9b02      	ldr	r3, [sp, #8]
 800cb7e:	9905      	ldr	r1, [sp, #20]
 800cb80:	4798      	blx	r3
 800cb82:	4628      	mov	r0, r5
 800cb84:	b007      	add	sp, #28
 800cb86:	bd30      	pop	{r4, r5, pc}
 800cb88:	250b      	movs	r5, #11
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	b007      	add	sp, #28
 800cb8e:	bd30      	pop	{r4, r5, pc}
 800cb90:	f007 fc34 	bl	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 800cb94:	4605      	mov	r5, r0
 800cb96:	e7f8      	b.n	800cb8a <rcl_init_options_fini+0x46>

0800cb98 <rcl_init_options_copy>:
 800cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	b094      	sub	sp, #80	@ 0x50
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d058      	beq.n	800cc54 <rcl_init_options_copy+0xbc>
 800cba2:	4604      	mov	r4, r0
 800cba4:	6800      	ldr	r0, [r0, #0]
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d054      	beq.n	800cc54 <rcl_init_options_copy+0xbc>
 800cbaa:	460e      	mov	r6, r1
 800cbac:	f001 f94a 	bl	800de44 <rcutils_allocator_is_valid>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d04f      	beq.n	800cc54 <rcl_init_options_copy+0xbc>
 800cbb4:	2e00      	cmp	r6, #0
 800cbb6:	d04d      	beq.n	800cc54 <rcl_init_options_copy+0xbc>
 800cbb8:	6833      	ldr	r3, [r6, #0]
 800cbba:	b123      	cbz	r3, 800cbc6 <rcl_init_options_copy+0x2e>
 800cbbc:	2464      	movs	r4, #100	@ 0x64
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	b014      	add	sp, #80	@ 0x50
 800cbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc6:	6827      	ldr	r7, [r4, #0]
 800cbc8:	46bc      	mov	ip, r7
 800cbca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbce:	ad0f      	add	r5, sp, #60	@ 0x3c
 800cbd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbd2:	f8dc 3000 	ldr.w	r3, [ip]
 800cbd6:	f8d7 8000 	ldr.w	r8, [r7]
 800cbda:	602b      	str	r3, [r5, #0]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	2050      	movs	r0, #80	@ 0x50
 800cbe0:	47c0      	blx	r8
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	6030      	str	r0, [r6, #0]
 800cbe6:	b3d0      	cbz	r0, 800cc5e <rcl_init_options_copy+0xc6>
 800cbe8:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800cbec:	4686      	mov	lr, r0
 800cbee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbf2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cbf6:	f8dc 3000 	ldr.w	r3, [ip]
 800cbfa:	f8ce 3000 	str.w	r3, [lr]
 800cbfe:	4668      	mov	r0, sp
 800cc00:	f001 f9b2 	bl	800df68 <rmw_get_zero_initialized_init_options>
 800cc04:	46ee      	mov	lr, sp
 800cc06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc0a:	f105 0c18 	add.w	ip, r5, #24
 800cc0e:	6824      	ldr	r4, [r4, #0]
 800cc10:	6835      	ldr	r5, [r6, #0]
 800cc12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc26:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cc2a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cc2e:	f104 0018 	add.w	r0, r4, #24
 800cc32:	f105 0118 	add.w	r1, r5, #24
 800cc36:	f001 fa2d 	bl	800e094 <rmw_init_options_copy>
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d0be      	beq.n	800cbbe <rcl_init_options_copy+0x26>
 800cc40:	f001 f90e 	bl	800de60 <rcutils_get_error_string>
 800cc44:	f001 f924 	bl	800de90 <rcutils_reset_error>
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f7ff ff7b 	bl	800cb44 <rcl_init_options_fini>
 800cc4e:	b140      	cbz	r0, 800cc62 <rcl_init_options_copy+0xca>
 800cc50:	4604      	mov	r4, r0
 800cc52:	e7b4      	b.n	800cbbe <rcl_init_options_copy+0x26>
 800cc54:	240b      	movs	r4, #11
 800cc56:	4620      	mov	r0, r4
 800cc58:	b014      	add	sp, #80	@ 0x50
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5e:	240a      	movs	r4, #10
 800cc60:	e7ad      	b.n	800cbbe <rcl_init_options_copy+0x26>
 800cc62:	4620      	mov	r0, r4
 800cc64:	b014      	add	sp, #80	@ 0x50
 800cc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6a:	f007 bbc7 	b.w	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 800cc6e:	bf00      	nop

0800cc70 <rcl_init_options_set_domain_id>:
 800cc70:	b120      	cbz	r0, 800cc7c <rcl_init_options_set_domain_id+0xc>
 800cc72:	6803      	ldr	r3, [r0, #0]
 800cc74:	b113      	cbz	r3, 800cc7c <rcl_init_options_set_domain_id+0xc>
 800cc76:	6259      	str	r1, [r3, #36]	@ 0x24
 800cc78:	2000      	movs	r0, #0
 800cc7a:	4770      	bx	lr
 800cc7c:	200b      	movs	r0, #11
 800cc7e:	4770      	bx	lr

0800cc80 <rcl_get_zero_initialized_publisher>:
 800cc80:	4b01      	ldr	r3, [pc, #4]	@ (800cc88 <rcl_get_zero_initialized_publisher+0x8>)
 800cc82:	6818      	ldr	r0, [r3, #0]
 800cc84:	4770      	bx	lr
 800cc86:	bf00      	nop
 800cc88:	0801d4cc 	.word	0x0801d4cc

0800cc8c <rcl_publisher_init>:
 800cc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc90:	b088      	sub	sp, #32
 800cc92:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cc94:	2d00      	cmp	r5, #0
 800cc96:	d069      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800cc98:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800cc9c:	4604      	mov	r4, r0
 800cc9e:	4648      	mov	r0, r9
 800cca0:	460e      	mov	r6, r1
 800cca2:	4690      	mov	r8, r2
 800cca4:	461f      	mov	r7, r3
 800cca6:	f001 f8cd 	bl	800de44 <rcutils_allocator_is_valid>
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	d05e      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccae:	2c00      	cmp	r4, #0
 800ccb0:	d05c      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccb2:	f8d4 a000 	ldr.w	sl, [r4]
 800ccb6:	f1ba 0f00 	cmp.w	sl, #0
 800ccba:	d004      	beq.n	800ccc6 <rcl_publisher_init+0x3a>
 800ccbc:	2764      	movs	r7, #100	@ 0x64
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	b008      	add	sp, #32
 800ccc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f007 fe92 	bl	80149f0 <rcl_node_is_valid>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	d052      	beq.n	800cd76 <rcl_publisher_init+0xea>
 800ccd0:	f1b8 0f00 	cmp.w	r8, #0
 800ccd4:	d04a      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccd6:	2f00      	cmp	r7, #0
 800ccd8:	d048      	beq.n	800cd6c <rcl_publisher_init+0xe0>
 800ccda:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ccde:	aa07      	add	r2, sp, #28
 800cce0:	9205      	str	r2, [sp, #20]
 800cce2:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ccee:	f8cd a01c 	str.w	sl, [sp, #28]
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ccf8:	4630      	mov	r0, r6
 800ccfa:	f007 fecd 	bl	8014a98 <rcl_node_resolve_name>
 800ccfe:	4607      	mov	r7, r0
 800cd00:	2800      	cmp	r0, #0
 800cd02:	d14f      	bne.n	800cda4 <rcl_publisher_init+0x118>
 800cd04:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cd06:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd08:	20c8      	movs	r0, #200	@ 0xc8
 800cd0a:	4798      	blx	r3
 800cd0c:	6020      	str	r0, [r4, #0]
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d04e      	beq.n	800cdb0 <rcl_publisher_init+0x124>
 800cd12:	4630      	mov	r0, r6
 800cd14:	f007 fe8e 	bl	8014a34 <rcl_node_get_rmw_handle>
 800cd18:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	9a07      	ldr	r2, [sp, #28]
 800cd20:	6827      	ldr	r7, [r4, #0]
 800cd22:	462b      	mov	r3, r5
 800cd24:	4641      	mov	r1, r8
 800cd26:	f001 fd25 	bl	800e774 <rmw_create_publisher>
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800cd30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cd34:	b370      	cbz	r0, 800cd94 <rcl_publisher_init+0x108>
 800cd36:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800cd3a:	f001 fdf9 	bl	800e930 <rmw_publisher_get_actual_qos>
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	4607      	mov	r7, r0
 800cd42:	b9d0      	cbnz	r0, 800cd7a <rcl_publisher_init+0xee>
 800cd44:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800cd48:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	2270      	movs	r2, #112	@ 0x70
 800cd50:	4618      	mov	r0, r3
 800cd52:	f00d fd1e 	bl	801a792 <memcpy>
 800cd56:	6832      	ldr	r2, [r6, #0]
 800cd58:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800cd5c:	9807      	ldr	r0, [sp, #28]
 800cd5e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800cd60:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd62:	4798      	blx	r3
 800cd64:	4638      	mov	r0, r7
 800cd66:	b008      	add	sp, #32
 800cd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd6c:	270b      	movs	r7, #11
 800cd6e:	4638      	mov	r0, r7
 800cd70:	b008      	add	sp, #32
 800cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd76:	27c8      	movs	r7, #200	@ 0xc8
 800cd78:	e7a1      	b.n	800ccbe <rcl_publisher_init+0x32>
 800cd7a:	b18b      	cbz	r3, 800cda0 <rcl_publisher_init+0x114>
 800cd7c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cd80:	b142      	cbz	r2, 800cd94 <rcl_publisher_init+0x108>
 800cd82:	4630      	mov	r0, r6
 800cd84:	f007 fe56 	bl	8014a34 <rcl_node_get_rmw_handle>
 800cd88:	6823      	ldr	r3, [r4, #0]
 800cd8a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800cd8e:	f001 fddf 	bl	800e950 <rmw_destroy_publisher>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800cd96:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cd98:	4618      	mov	r0, r3
 800cd9a:	4790      	blx	r2
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	2701      	movs	r7, #1
 800cda2:	e7db      	b.n	800cd5c <rcl_publisher_init+0xd0>
 800cda4:	2867      	cmp	r0, #103	@ 0x67
 800cda6:	d0d9      	beq.n	800cd5c <rcl_publisher_init+0xd0>
 800cda8:	2869      	cmp	r0, #105	@ 0x69
 800cdaa:	d003      	beq.n	800cdb4 <rcl_publisher_init+0x128>
 800cdac:	280a      	cmp	r0, #10
 800cdae:	d1f7      	bne.n	800cda0 <rcl_publisher_init+0x114>
 800cdb0:	270a      	movs	r7, #10
 800cdb2:	e7d3      	b.n	800cd5c <rcl_publisher_init+0xd0>
 800cdb4:	2767      	movs	r7, #103	@ 0x67
 800cdb6:	e7d1      	b.n	800cd5c <rcl_publisher_init+0xd0>

0800cdb8 <rcl_publisher_get_default_options>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4d14      	ldr	r5, [pc, #80]	@ (800ce0c <rcl_publisher_get_default_options+0x54>)
 800cdbc:	4914      	ldr	r1, [pc, #80]	@ (800ce10 <rcl_publisher_get_default_options+0x58>)
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	2250      	movs	r2, #80	@ 0x50
 800cdc4:	4628      	mov	r0, r5
 800cdc6:	f00d fce4 	bl	801a792 <memcpy>
 800cdca:	a802      	add	r0, sp, #8
 800cdcc:	f001 f82c 	bl	800de28 <rcutils_get_default_allocator>
 800cdd0:	f10d 0c08 	add.w	ip, sp, #8
 800cdd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cdd8:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800cddc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cde0:	466e      	mov	r6, sp
 800cde2:	f8dc 3000 	ldr.w	r3, [ip]
 800cde6:	f8ce 3000 	str.w	r3, [lr]
 800cdea:	4630      	mov	r0, r6
 800cdec:	f001 f8cc 	bl	800df88 <rmw_get_default_publisher_options>
 800cdf0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cdf4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cdf8:	e883 0003 	stmia.w	r3, {r0, r1}
 800cdfc:	2270      	movs	r2, #112	@ 0x70
 800cdfe:	4629      	mov	r1, r5
 800ce00:	4620      	mov	r0, r4
 800ce02:	f00d fcc6 	bl	801a792 <memcpy>
 800ce06:	4620      	mov	r0, r4
 800ce08:	b008      	add	sp, #32
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	20006ee8 	.word	0x20006ee8
 800ce10:	0801d4d0 	.word	0x0801d4d0

0800ce14 <rcl_publish>:
 800ce14:	b1f8      	cbz	r0, 800ce56 <rcl_publish+0x42>
 800ce16:	6803      	ldr	r3, [r0, #0]
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	b1b3      	cbz	r3, 800ce4c <rcl_publish+0x38>
 800ce1e:	4616      	mov	r6, r2
 800ce20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce24:	b192      	cbz	r2, 800ce4c <rcl_publish+0x38>
 800ce26:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	f007 fb04 	bl	8014438 <rcl_context_is_valid>
 800ce30:	b160      	cbz	r0, 800ce4c <rcl_publish+0x38>
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce38:	b140      	cbz	r0, 800ce4c <rcl_publish+0x38>
 800ce3a:	b155      	cbz	r5, 800ce52 <rcl_publish+0x3e>
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	4629      	mov	r1, r5
 800ce40:	f001 fc38 	bl	800e6b4 <rmw_publish>
 800ce44:	3800      	subs	r0, #0
 800ce46:	bf18      	it	ne
 800ce48:	2001      	movne	r0, #1
 800ce4a:	bd70      	pop	{r4, r5, r6, pc}
 800ce4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ce50:	bd70      	pop	{r4, r5, r6, pc}
 800ce52:	200b      	movs	r0, #11
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
 800ce56:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ce5a:	4770      	bx	lr

0800ce5c <rcl_publisher_is_valid>:
 800ce5c:	b1a0      	cbz	r0, 800ce88 <rcl_publisher_is_valid+0x2c>
 800ce5e:	6803      	ldr	r3, [r0, #0]
 800ce60:	b510      	push	{r4, lr}
 800ce62:	4604      	mov	r4, r0
 800ce64:	b173      	cbz	r3, 800ce84 <rcl_publisher_is_valid+0x28>
 800ce66:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce6a:	b15a      	cbz	r2, 800ce84 <rcl_publisher_is_valid+0x28>
 800ce6c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ce70:	f007 fae2 	bl	8014438 <rcl_context_is_valid>
 800ce74:	b130      	cbz	r0, 800ce84 <rcl_publisher_is_valid+0x28>
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce7c:	3800      	subs	r0, #0
 800ce7e:	bf18      	it	ne
 800ce80:	2001      	movne	r0, #1
 800ce82:	bd10      	pop	{r4, pc}
 800ce84:	2000      	movs	r0, #0
 800ce86:	bd10      	pop	{r4, pc}
 800ce88:	2000      	movs	r0, #0
 800ce8a:	4770      	bx	lr

0800ce8c <rcl_publisher_is_valid_except_context>:
 800ce8c:	b130      	cbz	r0, 800ce9c <rcl_publisher_is_valid_except_context+0x10>
 800ce8e:	6800      	ldr	r0, [r0, #0]
 800ce90:	b120      	cbz	r0, 800ce9c <rcl_publisher_is_valid_except_context+0x10>
 800ce92:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ce96:	3800      	subs	r0, #0
 800ce98:	bf18      	it	ne
 800ce9a:	2001      	movne	r0, #1
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop

0800cea0 <_rclc_check_for_new_data>:
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d046      	beq.n	800cf32 <_rclc_check_for_new_data+0x92>
 800cea4:	b510      	push	{r4, lr}
 800cea6:	7802      	ldrb	r2, [r0, #0]
 800cea8:	b084      	sub	sp, #16
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2a0a      	cmp	r2, #10
 800ceae:	d842      	bhi.n	800cf36 <_rclc_check_for_new_data+0x96>
 800ceb0:	e8df f002 	tbb	[pc, r2]
 800ceb4:	14181212 	.word	0x14181212
 800ceb8:	06060614 	.word	0x06060614
 800cebc:	2e1a      	.short	0x2e1a
 800cebe:	16          	.byte	0x16
 800cebf:	00          	.byte	0x00
 800cec0:	6a0a      	ldr	r2, [r1, #32]
 800cec2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cec4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cec8:	2000      	movs	r0, #0
 800ceca:	1a12      	subs	r2, r2, r0
 800cecc:	bf18      	it	ne
 800cece:	2201      	movne	r2, #1
 800ced0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ced4:	b004      	add	sp, #16
 800ced6:	bd10      	pop	{r4, pc}
 800ced8:	680a      	ldr	r2, [r1, #0]
 800ceda:	e7f2      	b.n	800cec2 <_rclc_check_for_new_data+0x22>
 800cedc:	698a      	ldr	r2, [r1, #24]
 800cede:	e7f0      	b.n	800cec2 <_rclc_check_for_new_data+0x22>
 800cee0:	688a      	ldr	r2, [r1, #8]
 800cee2:	e7ee      	b.n	800cec2 <_rclc_check_for_new_data+0x22>
 800cee4:	690a      	ldr	r2, [r1, #16]
 800cee6:	e7ec      	b.n	800cec2 <_rclc_check_for_new_data+0x22>
 800cee8:	685c      	ldr	r4, [r3, #4]
 800ceea:	4608      	mov	r0, r1
 800ceec:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800cef0:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800cef4:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cef8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800cf02:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800cf06:	f104 0110 	add.w	r1, r4, #16
 800cf0a:	f009 fc75 	bl	80167f8 <rcl_action_client_wait_set_get_entities_ready>
 800cf0e:	e7e1      	b.n	800ced4 <_rclc_check_for_new_data+0x34>
 800cf10:	685c      	ldr	r4, [r3, #4]
 800cf12:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800cf16:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800cf1a:	e9cd 3200 	strd	r3, r2, [sp]
 800cf1e:	4608      	mov	r0, r1
 800cf20:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800cf24:	f104 0220 	add.w	r2, r4, #32
 800cf28:	f104 0110 	add.w	r1, r4, #16
 800cf2c:	f009 fe7c 	bl	8016c28 <rcl_action_server_wait_set_get_entities_ready>
 800cf30:	e7d0      	b.n	800ced4 <_rclc_check_for_new_data+0x34>
 800cf32:	200b      	movs	r0, #11
 800cf34:	4770      	bx	lr
 800cf36:	2001      	movs	r0, #1
 800cf38:	e7cc      	b.n	800ced4 <_rclc_check_for_new_data+0x34>
 800cf3a:	bf00      	nop

0800cf3c <_rclc_take_new_data>:
 800cf3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf3e:	b09b      	sub	sp, #108	@ 0x6c
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f000 8088 	beq.w	800d056 <_rclc_take_new_data+0x11a>
 800cf46:	7803      	ldrb	r3, [r0, #0]
 800cf48:	4604      	mov	r4, r0
 800cf4a:	2b0a      	cmp	r3, #10
 800cf4c:	f200 8167 	bhi.w	800d21e <_rclc_take_new_data+0x2e2>
 800cf50:	e8df f003 	tbb	[pc, r3]
 800cf54:	44152d2d 	.word	0x44152d2d
 800cf58:	19191944 	.word	0x19191944
 800cf5c:	065a      	.short	0x065a
 800cf5e:	15          	.byte	0x15
 800cf5f:	00          	.byte	0x00
 800cf60:	6840      	ldr	r0, [r0, #4]
 800cf62:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f040 80b2 	bne.w	800d0d0 <_rclc_take_new_data+0x194>
 800cf6c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f040 80e4 	bne.w	800d13e <_rclc_take_new_data+0x202>
 800cf76:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d16f      	bne.n	800d05e <_rclc_take_new_data+0x122>
 800cf7e:	2500      	movs	r5, #0
 800cf80:	4628      	mov	r0, r5
 800cf82:	b01b      	add	sp, #108	@ 0x6c
 800cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf86:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cf88:	6a0b      	ldr	r3, [r1, #32]
 800cf8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d0f5      	beq.n	800cf7e <_rclc_take_new_data+0x42>
 800cf92:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cf96:	f104 0110 	add.w	r1, r4, #16
 800cf9a:	f007 ffd9 	bl	8014f50 <rcl_take_request>
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d0ec      	beq.n	800cf7e <_rclc_take_new_data+0x42>
 800cfa4:	f240 2359 	movw	r3, #601	@ 0x259
 800cfa8:	4298      	cmp	r0, r3
 800cfaa:	d013      	beq.n	800cfd4 <_rclc_take_new_data+0x98>
 800cfac:	e029      	b.n	800d002 <_rclc_take_new_data+0xc6>
 800cfae:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cfb0:	680b      	ldr	r3, [r1, #0]
 800cfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0e1      	beq.n	800cf7e <_rclc_take_new_data+0x42>
 800cfba:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	aa0a      	add	r2, sp, #40	@ 0x28
 800cfc2:	f008 f827 	bl	8015014 <rcl_take>
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d0d9      	beq.n	800cf80 <_rclc_take_new_data+0x44>
 800cfcc:	f240 1391 	movw	r3, #401	@ 0x191
 800cfd0:	4298      	cmp	r0, r3
 800cfd2:	d116      	bne.n	800d002 <_rclc_take_new_data+0xc6>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800cfda:	e7d1      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800cfdc:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800cfde:	698b      	ldr	r3, [r1, #24]
 800cfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d0ca      	beq.n	800cf7e <_rclc_take_new_data+0x42>
 800cfe8:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cfec:	f104 0110 	add.w	r1, r4, #16
 800cff0:	f007 f9b2 	bl	8014358 <rcl_take_response>
 800cff4:	4605      	mov	r5, r0
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d0c1      	beq.n	800cf7e <_rclc_take_new_data+0x42>
 800cffa:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800cffe:	4298      	cmp	r0, r3
 800d000:	d0be      	beq.n	800cf80 <_rclc_take_new_data+0x44>
 800d002:	f000 ff45 	bl	800de90 <rcutils_reset_error>
 800d006:	e7bb      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800d008:	6840      	ldr	r0, [r0, #4]
 800d00a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d17d      	bne.n	800d10e <_rclc_take_new_data+0x1d2>
 800d012:	69c3      	ldr	r3, [r0, #28]
 800d014:	b11b      	cbz	r3, 800d01e <_rclc_take_new_data+0xe2>
 800d016:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d144      	bne.n	800d0a8 <_rclc_take_new_data+0x16c>
 800d01e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d022:	2b00      	cmp	r3, #0
 800d024:	f040 80ac 	bne.w	800d180 <_rclc_take_new_data+0x244>
 800d028:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d0a6      	beq.n	800cf7e <_rclc_take_new_data+0x42>
 800d030:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d032:	a90a      	add	r1, sp, #40	@ 0x28
 800d034:	3010      	adds	r0, #16
 800d036:	f009 fab7 	bl	80165a8 <rcl_action_take_result_response>
 800d03a:	4605      	mov	r5, r0
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d1e0      	bne.n	800d002 <_rclc_take_new_data+0xc6>
 800d040:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d044:	6860      	ldr	r0, [r4, #4]
 800d046:	f009 ff13 	bl	8016e70 <rclc_action_find_handle_by_result_request_sequence_number>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d098      	beq.n	800cf80 <_rclc_take_new_data+0x44>
 800d04e:	2301      	movs	r3, #1
 800d050:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d054:	e794      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800d056:	250b      	movs	r5, #11
 800d058:	4628      	mov	r0, r5
 800d05a:	b01b      	add	sp, #108	@ 0x6c
 800d05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d05e:	ae04      	add	r6, sp, #16
 800d060:	aa0a      	add	r2, sp, #40	@ 0x28
 800d062:	3010      	adds	r0, #16
 800d064:	4631      	mov	r1, r6
 800d066:	f009 fd13 	bl	8016a90 <rcl_action_take_cancel_request>
 800d06a:	4605      	mov	r5, r0
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d1c8      	bne.n	800d002 <_rclc_take_new_data+0xc6>
 800d070:	6860      	ldr	r0, [r4, #4]
 800d072:	a90a      	add	r1, sp, #40	@ 0x28
 800d074:	f009 feba 	bl	8016dec <rclc_action_find_goal_handle_by_uuid>
 800d078:	4607      	mov	r7, r0
 800d07a:	2800      	cmp	r0, #0
 800d07c:	f000 80bb 	beq.w	800d1f6 <_rclc_take_new_data+0x2ba>
 800d080:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d084:	2101      	movs	r1, #1
 800d086:	f009 fe3b 	bl	8016d00 <rcl_action_transition_goal_state>
 800d08a:	2803      	cmp	r0, #3
 800d08c:	4684      	mov	ip, r0
 800d08e:	f040 80a7 	bne.w	800d1e0 <_rclc_take_new_data+0x2a4>
 800d092:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d094:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d09a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d09e:	e884 0003 	stmia.w	r4, {r0, r1}
 800d0a2:	f887 c008 	strb.w	ip, [r7, #8]
 800d0a6:	e76b      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800d0a8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d0aa:	3010      	adds	r0, #16
 800d0ac:	f009 fafc 	bl	80166a8 <rcl_action_take_feedback>
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d1a5      	bne.n	800d002 <_rclc_take_new_data+0xc6>
 800d0b6:	6860      	ldr	r0, [r4, #4]
 800d0b8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d0ba:	f009 fe97 	bl	8016dec <rclc_action_find_goal_handle_by_uuid>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	f000 80a3 	beq.w	800d20c <_rclc_take_new_data+0x2d0>
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	6860      	ldr	r0, [r4, #4]
 800d0ca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d0ce:	e7a6      	b.n	800d01e <_rclc_take_new_data+0xe2>
 800d0d0:	f009 fe66 	bl	8016da0 <rclc_action_take_goal_handle>
 800d0d4:	4606      	mov	r6, r0
 800d0d6:	6860      	ldr	r0, [r4, #4]
 800d0d8:	2e00      	cmp	r6, #0
 800d0da:	f43f af47 	beq.w	800cf6c <_rclc_take_new_data+0x30>
 800d0de:	6070      	str	r0, [r6, #4]
 800d0e0:	69f2      	ldr	r2, [r6, #28]
 800d0e2:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d0e6:	3010      	adds	r0, #16
 800d0e8:	f009 fc1a 	bl	8016920 <rcl_action_take_goal_request>
 800d0ec:	4605      	mov	r5, r0
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	f040 808e 	bne.w	800d210 <_rclc_take_new_data+0x2d4>
 800d0f4:	69f7      	ldr	r7, [r6, #28]
 800d0f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d0f8:	7235      	strb	r5, [r6, #8]
 800d0fa:	f8c6 0009 	str.w	r0, [r6, #9]
 800d0fe:	f8c6 100d 	str.w	r1, [r6, #13]
 800d102:	6860      	ldr	r0, [r4, #4]
 800d104:	f8c6 2011 	str.w	r2, [r6, #17]
 800d108:	f8c6 3015 	str.w	r3, [r6, #21]
 800d10c:	e72e      	b.n	800cf6c <_rclc_take_new_data+0x30>
 800d10e:	aa04      	add	r2, sp, #16
 800d110:	a90a      	add	r1, sp, #40	@ 0x28
 800d112:	3010      	adds	r0, #16
 800d114:	f009 f9d0 	bl	80164b8 <rcl_action_take_goal_response>
 800d118:	4605      	mov	r5, r0
 800d11a:	2800      	cmp	r0, #0
 800d11c:	f47f af71 	bne.w	800d002 <_rclc_take_new_data+0xc6>
 800d120:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d124:	6860      	ldr	r0, [r4, #4]
 800d126:	f009 fe91 	bl	8016e4c <rclc_action_find_handle_by_goal_request_sequence_number>
 800d12a:	b130      	cbz	r0, 800d13a <_rclc_take_new_data+0x1fe>
 800d12c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d130:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d134:	2201      	movs	r2, #1
 800d136:	f880 2020 	strb.w	r2, [r0, #32]
 800d13a:	6860      	ldr	r0, [r4, #4]
 800d13c:	e769      	b.n	800d012 <_rclc_take_new_data+0xd6>
 800d13e:	aa04      	add	r2, sp, #16
 800d140:	3010      	adds	r0, #16
 800d142:	a90a      	add	r1, sp, #40	@ 0x28
 800d144:	f009 fc64 	bl	8016a10 <rcl_action_take_result_request>
 800d148:	4605      	mov	r5, r0
 800d14a:	2800      	cmp	r0, #0
 800d14c:	f47f af59 	bne.w	800d002 <_rclc_take_new_data+0xc6>
 800d150:	6860      	ldr	r0, [r4, #4]
 800d152:	a904      	add	r1, sp, #16
 800d154:	f009 fe4a 	bl	8016dec <rclc_action_find_goal_handle_by_uuid>
 800d158:	4607      	mov	r7, r0
 800d15a:	b160      	cbz	r0, 800d176 <_rclc_take_new_data+0x23a>
 800d15c:	ad0a      	add	r5, sp, #40	@ 0x28
 800d15e:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d164:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d166:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d16a:	f04f 0c02 	mov.w	ip, #2
 800d16e:	e886 0003 	stmia.w	r6, {r0, r1}
 800d172:	f887 c008 	strb.w	ip, [r7, #8]
 800d176:	6860      	ldr	r0, [r4, #4]
 800d178:	2300      	movs	r3, #0
 800d17a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d17e:	e6fa      	b.n	800cf76 <_rclc_take_new_data+0x3a>
 800d180:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d184:	a90a      	add	r1, sp, #40	@ 0x28
 800d186:	3010      	adds	r0, #16
 800d188:	f009 fa4e 	bl	8016628 <rcl_action_take_cancel_response>
 800d18c:	4605      	mov	r5, r0
 800d18e:	2800      	cmp	r0, #0
 800d190:	f47f af37 	bne.w	800d002 <_rclc_take_new_data+0xc6>
 800d194:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d198:	6860      	ldr	r0, [r4, #4]
 800d19a:	f009 fe7b 	bl	8016e94 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d19e:	4606      	mov	r6, r0
 800d1a0:	6860      	ldr	r0, [r4, #4]
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	f43f af40 	beq.w	800d028 <_rclc_take_new_data+0xec>
 800d1a8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d1aa:	2701      	movs	r7, #1
 800d1ac:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f43f af3a 	beq.w	800d028 <_rclc_take_new_data+0xec>
 800d1b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d1b6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d1ba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d1be:	f009 fe15 	bl	8016dec <rclc_action_find_goal_handle_by_uuid>
 800d1c2:	b138      	cbz	r0, 800d1d4 <_rclc_take_new_data+0x298>
 800d1c4:	6860      	ldr	r0, [r4, #4]
 800d1c6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d1c8:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d1cc:	3501      	adds	r5, #1
 800d1ce:	42ab      	cmp	r3, r5
 800d1d0:	d8f0      	bhi.n	800d1b4 <_rclc_take_new_data+0x278>
 800d1d2:	e729      	b.n	800d028 <_rclc_take_new_data+0xec>
 800d1d4:	6860      	ldr	r0, [r4, #4]
 800d1d6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d1d8:	3501      	adds	r5, #1
 800d1da:	42ab      	cmp	r3, r5
 800d1dc:	d8ea      	bhi.n	800d1b4 <_rclc_take_new_data+0x278>
 800d1de:	e723      	b.n	800d028 <_rclc_take_new_data+0xec>
 800d1e0:	ab06      	add	r3, sp, #24
 800d1e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1e4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d1e8:	2103      	movs	r1, #3
 800d1ea:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d1ee:	6860      	ldr	r0, [r4, #4]
 800d1f0:	f009 fec6 	bl	8016f80 <rclc_action_server_goal_cancel_reject>
 800d1f4:	e6c4      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800d1f6:	ab06      	add	r3, sp, #24
 800d1f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d1fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d1fe:	2102      	movs	r1, #2
 800d200:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d204:	6860      	ldr	r0, [r4, #4]
 800d206:	f009 febb 	bl	8016f80 <rclc_action_server_goal_cancel_reject>
 800d20a:	e6b9      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800d20c:	6860      	ldr	r0, [r4, #4]
 800d20e:	e706      	b.n	800d01e <_rclc_take_new_data+0xe2>
 800d210:	6860      	ldr	r0, [r4, #4]
 800d212:	4631      	mov	r1, r6
 800d214:	f009 fdd4 	bl	8016dc0 <rclc_action_remove_used_goal_handle>
 800d218:	f000 fe3a 	bl	800de90 <rcutils_reset_error>
 800d21c:	e6b0      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800d21e:	2501      	movs	r5, #1
 800d220:	e6ae      	b.n	800cf80 <_rclc_take_new_data+0x44>
 800d222:	bf00      	nop

0800d224 <_rclc_execute.part.0>:
 800d224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d226:	7803      	ldrb	r3, [r0, #0]
 800d228:	b087      	sub	sp, #28
 800d22a:	4604      	mov	r4, r0
 800d22c:	2b0a      	cmp	r3, #10
 800d22e:	f200 8136 	bhi.w	800d49e <_rclc_execute.part.0+0x27a>
 800d232:	e8df f003 	tbb	[pc, r3]
 800d236:	435e      	.short	0x435e
 800d238:	06a1664f 	.word	0x06a1664f
 800d23c:	6c1e0606 	.word	0x6c1e0606
 800d240:	59          	.byte	0x59
 800d241:	00          	.byte	0x00
 800d242:	2b06      	cmp	r3, #6
 800d244:	f000 8122 	beq.w	800d48c <_rclc_execute.part.0+0x268>
 800d248:	2b07      	cmp	r3, #7
 800d24a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d24c:	f040 8118 	bne.w	800d480 <_rclc_execute.part.0+0x25c>
 800d250:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d254:	6880      	ldr	r0, [r0, #8]
 800d256:	4798      	blx	r3
 800d258:	f104 0110 	add.w	r1, r4, #16
 800d25c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d25e:	6860      	ldr	r0, [r4, #4]
 800d260:	f007 feb6 	bl	8014fd0 <rcl_send_response>
 800d264:	2800      	cmp	r0, #0
 800d266:	d033      	beq.n	800d2d0 <_rclc_execute.part.0+0xac>
 800d268:	9005      	str	r0, [sp, #20]
 800d26a:	f000 fe11 	bl	800de90 <rcutils_reset_error>
 800d26e:	9805      	ldr	r0, [sp, #20]
 800d270:	e02e      	b.n	800d2d0 <_rclc_execute.part.0+0xac>
 800d272:	6840      	ldr	r0, [r0, #4]
 800d274:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 8086 	beq.w	800d38a <_rclc_execute.part.0+0x166>
 800d27e:	2600      	movs	r6, #0
 800d280:	2701      	movs	r7, #1
 800d282:	e004      	b.n	800d28e <_rclc_execute.part.0+0x6a>
 800d284:	f009 fd66 	bl	8016d54 <rclc_action_send_result_request>
 800d288:	b998      	cbnz	r0, 800d2b2 <_rclc_execute.part.0+0x8e>
 800d28a:	722f      	strb	r7, [r5, #8]
 800d28c:	6860      	ldr	r0, [r4, #4]
 800d28e:	f009 fe13 	bl	8016eb8 <rclc_action_find_first_handle_with_goal_response>
 800d292:	4605      	mov	r5, r0
 800d294:	2800      	cmp	r0, #0
 800d296:	d077      	beq.n	800d388 <_rclc_execute.part.0+0x164>
 800d298:	6863      	ldr	r3, [r4, #4]
 800d29a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d2a2:	f885 6020 	strb.w	r6, [r5, #32]
 800d2a6:	4798      	blx	r3
 800d2a8:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e8      	bne.n	800d284 <_rclc_execute.part.0+0x60>
 800d2b2:	6860      	ldr	r0, [r4, #4]
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	f009 fd83 	bl	8016dc0 <rclc_action_remove_used_goal_handle>
 800d2ba:	e7e7      	b.n	800d28c <_rclc_execute.part.0+0x68>
 800d2bc:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d2c0:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d2c4:	2d00      	cmp	r5, #0
 800d2c6:	f000 80c9 	beq.w	800d45c <_rclc_execute.part.0+0x238>
 800d2ca:	6880      	ldr	r0, [r0, #8]
 800d2cc:	4798      	blx	r3
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	b007      	add	sp, #28
 800d2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d4:	6840      	ldr	r0, [r0, #4]
 800d2d6:	f008 f9ad 	bl	8015634 <rcl_timer_call>
 800d2da:	f240 3321 	movw	r3, #801	@ 0x321
 800d2de:	4298      	cmp	r0, r3
 800d2e0:	d004      	beq.n	800d2ec <_rclc_execute.part.0+0xc8>
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d0f4      	beq.n	800d2d0 <_rclc_execute.part.0+0xac>
 800d2e6:	e7bf      	b.n	800d268 <_rclc_execute.part.0+0x44>
 800d2e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d2ea:	4798      	blx	r3
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	b007      	add	sp, #28
 800d2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f2:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d2f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d2f8:	b925      	cbnz	r5, 800d304 <_rclc_execute.part.0+0xe0>
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	4798      	blx	r3
 800d2fe:	4628      	mov	r0, r5
 800d300:	e7e6      	b.n	800d2d0 <_rclc_execute.part.0+0xac>
 800d302:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d304:	68a0      	ldr	r0, [r4, #8]
 800d306:	4798      	blx	r3
 800d308:	2000      	movs	r0, #0
 800d30a:	b007      	add	sp, #28
 800d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d30e:	6840      	ldr	r0, [r0, #4]
 800d310:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d314:	bb3b      	cbnz	r3, 800d366 <_rclc_execute.part.0+0x142>
 800d316:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d07b      	beq.n	800d416 <_rclc_execute.part.0+0x1f2>
 800d31e:	f640 0634 	movw	r6, #2100	@ 0x834
 800d322:	2701      	movs	r7, #1
 800d324:	e007      	b.n	800d336 <_rclc_execute.part.0+0x112>
 800d326:	4628      	mov	r0, r5
 800d328:	f009 fdde 	bl	8016ee8 <rclc_action_server_response_goal_request>
 800d32c:	6860      	ldr	r0, [r4, #4]
 800d32e:	4629      	mov	r1, r5
 800d330:	f009 fd46 	bl	8016dc0 <rclc_action_remove_used_goal_handle>
 800d334:	6860      	ldr	r0, [r4, #4]
 800d336:	2100      	movs	r1, #0
 800d338:	f009 fd70 	bl	8016e1c <rclc_action_find_first_handle_by_status>
 800d33c:	4605      	mov	r5, r0
 800d33e:	2800      	cmp	r0, #0
 800d340:	d066      	beq.n	800d410 <_rclc_execute.part.0+0x1ec>
 800d342:	6863      	ldr	r3, [r4, #4]
 800d344:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d346:	699b      	ldr	r3, [r3, #24]
 800d348:	4798      	blx	r3
 800d34a:	42b0      	cmp	r0, r6
 800d34c:	f04f 0100 	mov.w	r1, #0
 800d350:	d1e9      	bne.n	800d326 <_rclc_execute.part.0+0x102>
 800d352:	2101      	movs	r1, #1
 800d354:	4628      	mov	r0, r5
 800d356:	f009 fdc7 	bl	8016ee8 <rclc_action_server_response_goal_request>
 800d35a:	722f      	strb	r7, [r5, #8]
 800d35c:	e7ea      	b.n	800d334 <_rclc_execute.part.0+0x110>
 800d35e:	6848      	ldr	r0, [r1, #4]
 800d360:	f009 fd2e 	bl	8016dc0 <rclc_action_remove_used_goal_handle>
 800d364:	6860      	ldr	r0, [r4, #4]
 800d366:	f009 fd65 	bl	8016e34 <rclc_action_find_first_terminated_handle>
 800d36a:	4601      	mov	r1, r0
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d1f6      	bne.n	800d35e <_rclc_execute.part.0+0x13a>
 800d370:	6860      	ldr	r0, [r4, #4]
 800d372:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d376:	e7ce      	b.n	800d316 <_rclc_execute.part.0+0xf2>
 800d378:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d37a:	6880      	ldr	r0, [r0, #8]
 800d37c:	f104 0110 	add.w	r1, r4, #16
 800d380:	4798      	blx	r3
 800d382:	2000      	movs	r0, #0
 800d384:	b007      	add	sp, #28
 800d386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d388:	6860      	ldr	r0, [r4, #4]
 800d38a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d38e:	b18b      	cbz	r3, 800d3b4 <_rclc_execute.part.0+0x190>
 800d390:	68c5      	ldr	r5, [r0, #12]
 800d392:	b32d      	cbz	r5, 800d3e0 <_rclc_execute.part.0+0x1bc>
 800d394:	2600      	movs	r6, #0
 800d396:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d39a:	b143      	cbz	r3, 800d3ae <_rclc_execute.part.0+0x18a>
 800d39c:	69c3      	ldr	r3, [r0, #28]
 800d39e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d3a2:	b123      	cbz	r3, 800d3ae <_rclc_execute.part.0+0x18a>
 800d3a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d3a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	4798      	blx	r3
 800d3ac:	6860      	ldr	r0, [r4, #4]
 800d3ae:	682d      	ldr	r5, [r5, #0]
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	d1f0      	bne.n	800d396 <_rclc_execute.part.0+0x172>
 800d3b4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d3b8:	b193      	cbz	r3, 800d3e0 <_rclc_execute.part.0+0x1bc>
 800d3ba:	68c5      	ldr	r5, [r0, #12]
 800d3bc:	b185      	cbz	r5, 800d3e0 <_rclc_execute.part.0+0x1bc>
 800d3be:	2600      	movs	r6, #0
 800d3c0:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d3c4:	b14b      	cbz	r3, 800d3da <_rclc_execute.part.0+0x1b6>
 800d3c6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d3c8:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d3cc:	b12b      	cbz	r3, 800d3da <_rclc_execute.part.0+0x1b6>
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d3d4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3d6:	4798      	blx	r3
 800d3d8:	6860      	ldr	r0, [r4, #4]
 800d3da:	682d      	ldr	r5, [r5, #0]
 800d3dc:	2d00      	cmp	r5, #0
 800d3de:	d1ef      	bne.n	800d3c0 <_rclc_execute.part.0+0x19c>
 800d3e0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d081      	beq.n	800d2ec <_rclc_execute.part.0+0xc8>
 800d3e8:	2700      	movs	r7, #0
 800d3ea:	e00b      	b.n	800d404 <_rclc_execute.part.0+0x1e0>
 800d3ec:	6863      	ldr	r3, [r4, #4]
 800d3ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d3f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d3f2:	6a1e      	ldr	r6, [r3, #32]
 800d3f4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d3f8:	47b0      	blx	r6
 800d3fa:	6860      	ldr	r0, [r4, #4]
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	f009 fcdf 	bl	8016dc0 <rclc_action_remove_used_goal_handle>
 800d402:	6860      	ldr	r0, [r4, #4]
 800d404:	f009 fd64 	bl	8016ed0 <rclc_action_find_first_handle_with_result_response>
 800d408:	4605      	mov	r5, r0
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d1ee      	bne.n	800d3ec <_rclc_execute.part.0+0x1c8>
 800d40e:	e76d      	b.n	800d2ec <_rclc_execute.part.0+0xc8>
 800d410:	6860      	ldr	r0, [r4, #4]
 800d412:	f880 5020 	strb.w	r5, [r0, #32]
 800d416:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f43f af66 	beq.w	800d2ec <_rclc_execute.part.0+0xc8>
 800d420:	68c5      	ldr	r5, [r0, #12]
 800d422:	b1b5      	cbz	r5, 800d452 <_rclc_execute.part.0+0x22e>
 800d424:	2602      	movs	r6, #2
 800d426:	e001      	b.n	800d42c <_rclc_execute.part.0+0x208>
 800d428:	682d      	ldr	r5, [r5, #0]
 800d42a:	b195      	cbz	r5, 800d452 <_rclc_execute.part.0+0x22e>
 800d42c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d430:	2b03      	cmp	r3, #3
 800d432:	d1f9      	bne.n	800d428 <_rclc_execute.part.0+0x204>
 800d434:	69c3      	ldr	r3, [r0, #28]
 800d436:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d438:	4628      	mov	r0, r5
 800d43a:	4798      	blx	r3
 800d43c:	4603      	mov	r3, r0
 800d43e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d442:	4628      	mov	r0, r5
 800d444:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d448:	b163      	cbz	r3, 800d464 <_rclc_execute.part.0+0x240>
 800d44a:	f009 fd6d 	bl	8016f28 <rclc_action_server_goal_cancel_accept>
 800d44e:	6860      	ldr	r0, [r4, #4]
 800d450:	e7ea      	b.n	800d428 <_rclc_execute.part.0+0x204>
 800d452:	2300      	movs	r3, #0
 800d454:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d458:	4618      	mov	r0, r3
 800d45a:	e739      	b.n	800d2d0 <_rclc_execute.part.0+0xac>
 800d45c:	4628      	mov	r0, r5
 800d45e:	4798      	blx	r3
 800d460:	4628      	mov	r0, r5
 800d462:	e735      	b.n	800d2d0 <_rclc_execute.part.0+0xac>
 800d464:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d466:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d46a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d46e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d472:	6860      	ldr	r0, [r4, #4]
 800d474:	2101      	movs	r1, #1
 800d476:	f009 fd83 	bl	8016f80 <rclc_action_server_goal_cancel_reject>
 800d47a:	722e      	strb	r6, [r5, #8]
 800d47c:	6860      	ldr	r0, [r4, #4]
 800d47e:	e7d3      	b.n	800d428 <_rclc_execute.part.0+0x204>
 800d480:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d482:	6880      	ldr	r0, [r0, #8]
 800d484:	4798      	blx	r3
 800d486:	f104 0110 	add.w	r1, r4, #16
 800d48a:	e6e7      	b.n	800d25c <_rclc_execute.part.0+0x38>
 800d48c:	f100 0110 	add.w	r1, r0, #16
 800d490:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d492:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d494:	6880      	ldr	r0, [r0, #8]
 800d496:	9105      	str	r1, [sp, #20]
 800d498:	4798      	blx	r3
 800d49a:	9905      	ldr	r1, [sp, #20]
 800d49c:	e6de      	b.n	800d25c <_rclc_execute.part.0+0x38>
 800d49e:	2001      	movs	r0, #1
 800d4a0:	e716      	b.n	800d2d0 <_rclc_execute.part.0+0xac>
 800d4a2:	bf00      	nop

0800d4a4 <rclc_executor_trigger_any>:
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d03f      	beq.n	800d528 <rclc_executor_trigger_any+0x84>
 800d4a8:	2900      	cmp	r1, #0
 800d4aa:	d03e      	beq.n	800d52a <rclc_executor_trigger_any+0x86>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	d037      	beq.n	800d528 <rclc_executor_trigger_any+0x84>
 800d4b8:	b430      	push	{r4, r5}
 800d4ba:	f893 c000 	ldrb.w	ip, [r3]
 800d4be:	f1bc 0f08 	cmp.w	ip, #8
 800d4c2:	d11e      	bne.n	800d502 <rclc_executor_trigger_any+0x5e>
 800d4c4:	685c      	ldr	r4, [r3, #4]
 800d4c6:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d4c8:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d4cc:	d105      	bne.n	800d4da <rclc_executor_trigger_any+0x36>
 800d4ce:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d4d2:	b910      	cbnz	r0, 800d4da <rclc_executor_trigger_any+0x36>
 800d4d4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d4d8:	b128      	cbz	r0, 800d4e6 <rclc_executor_trigger_any+0x42>
 800d4da:	bc30      	pop	{r4, r5}
 800d4dc:	4770      	bx	lr
 800d4de:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	d1f9      	bne.n	800d4da <rclc_executor_trigger_any+0x36>
 800d4e6:	3201      	adds	r2, #1
 800d4e8:	4291      	cmp	r1, r2
 800d4ea:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d4ee:	d018      	beq.n	800d522 <rclc_executor_trigger_any+0x7e>
 800d4f0:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d0f0      	beq.n	800d4da <rclc_executor_trigger_any+0x36>
 800d4f8:	f893 c000 	ldrb.w	ip, [r3]
 800d4fc:	f1bc 0f08 	cmp.w	ip, #8
 800d500:	d0e0      	beq.n	800d4c4 <rclc_executor_trigger_any+0x20>
 800d502:	f1bc 0f09 	cmp.w	ip, #9
 800d506:	d1ea      	bne.n	800d4de <rclc_executor_trigger_any+0x3a>
 800d508:	685c      	ldr	r4, [r3, #4]
 800d50a:	6a25      	ldr	r5, [r4, #32]
 800d50c:	2d00      	cmp	r5, #0
 800d50e:	d1e4      	bne.n	800d4da <rclc_executor_trigger_any+0x36>
 800d510:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d514:	2800      	cmp	r0, #0
 800d516:	d1e0      	bne.n	800d4da <rclc_executor_trigger_any+0x36>
 800d518:	3201      	adds	r2, #1
 800d51a:	4291      	cmp	r1, r2
 800d51c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d520:	d1e6      	bne.n	800d4f0 <rclc_executor_trigger_any+0x4c>
 800d522:	2000      	movs	r0, #0
 800d524:	bc30      	pop	{r4, r5}
 800d526:	4770      	bx	lr
 800d528:	4770      	bx	lr
 800d52a:	4608      	mov	r0, r1
 800d52c:	4770      	bx	lr
 800d52e:	bf00      	nop

0800d530 <rclc_executor_get_zero_initialized_executor>:
 800d530:	b510      	push	{r4, lr}
 800d532:	4903      	ldr	r1, [pc, #12]	@ (800d540 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d534:	4604      	mov	r4, r0
 800d536:	2288      	movs	r2, #136	@ 0x88
 800d538:	f00d f92b 	bl	801a792 <memcpy>
 800d53c:	4620      	mov	r0, r4
 800d53e:	bd10      	pop	{r4, pc}
 800d540:	0801d520 	.word	0x0801d520
 800d544:	00000000 	.word	0x00000000

0800d548 <rclc_executor_init>:
 800d548:	2800      	cmp	r0, #0
 800d54a:	d05f      	beq.n	800d60c <rclc_executor_init+0xc4>
 800d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d550:	460c      	mov	r4, r1
 800d552:	b0b0      	sub	sp, #192	@ 0xc0
 800d554:	2900      	cmp	r1, #0
 800d556:	d051      	beq.n	800d5fc <rclc_executor_init+0xb4>
 800d558:	4605      	mov	r5, r0
 800d55a:	4618      	mov	r0, r3
 800d55c:	4616      	mov	r6, r2
 800d55e:	461f      	mov	r7, r3
 800d560:	f000 fc70 	bl	800de44 <rcutils_allocator_is_valid>
 800d564:	2800      	cmp	r0, #0
 800d566:	d049      	beq.n	800d5fc <rclc_executor_init+0xb4>
 800d568:	2e00      	cmp	r6, #0
 800d56a:	d047      	beq.n	800d5fc <rclc_executor_init+0xb4>
 800d56c:	492c      	ldr	r1, [pc, #176]	@ (800d620 <rclc_executor_init+0xd8>)
 800d56e:	2288      	movs	r2, #136	@ 0x88
 800d570:	a80e      	add	r0, sp, #56	@ 0x38
 800d572:	f00d f90e 	bl	801a792 <memcpy>
 800d576:	a90e      	add	r1, sp, #56	@ 0x38
 800d578:	2288      	movs	r2, #136	@ 0x88
 800d57a:	4628      	mov	r0, r5
 800d57c:	f00d f909 	bl	801a792 <memcpy>
 800d580:	602c      	str	r4, [r5, #0]
 800d582:	4668      	mov	r0, sp
 800d584:	60ae      	str	r6, [r5, #8]
 800d586:	466c      	mov	r4, sp
 800d588:	f008 f9c6 	bl	8015918 <rcl_get_zero_initialized_wait_set>
 800d58c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d58e:	f105 0c14 	add.w	ip, r5, #20
 800d592:	f8d7 8000 	ldr.w	r8, [r7]
 800d596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d59a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d59c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5a6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d618 <rclc_executor_init+0xd0>
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	f8cc 3000 	str.w	r3, [ip]
 800d5b0:	6939      	ldr	r1, [r7, #16]
 800d5b2:	612f      	str	r7, [r5, #16]
 800d5b4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d5b8:	01b0      	lsls	r0, r6, #6
 800d5ba:	47c0      	blx	r8
 800d5bc:	6068      	str	r0, [r5, #4]
 800d5be:	b338      	cbz	r0, 800d610 <rclc_executor_init+0xc8>
 800d5c0:	2400      	movs	r4, #0
 800d5c2:	e000      	b.n	800d5c6 <rclc_executor_init+0x7e>
 800d5c4:	6868      	ldr	r0, [r5, #4]
 800d5c6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	3401      	adds	r4, #1
 800d5ce:	f000 faa3 	bl	800db18 <rclc_executor_handle_init>
 800d5d2:	42a6      	cmp	r6, r4
 800d5d4:	d1f6      	bne.n	800d5c4 <rclc_executor_init+0x7c>
 800d5d6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d5da:	f000 fa93 	bl	800db04 <rclc_executor_handle_counters_zero_init>
 800d5de:	4a11      	ldr	r2, [pc, #68]	@ (800d624 <rclc_executor_init+0xdc>)
 800d5e0:	686b      	ldr	r3, [r5, #4]
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d5e8:	b163      	cbz	r3, 800d604 <rclc_executor_init+0xbc>
 800d5ea:	692b      	ldr	r3, [r5, #16]
 800d5ec:	b153      	cbz	r3, 800d604 <rclc_executor_init+0xbc>
 800d5ee:	68ab      	ldr	r3, [r5, #8]
 800d5f0:	b143      	cbz	r3, 800d604 <rclc_executor_init+0xbc>
 800d5f2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d5f6:	b030      	add	sp, #192	@ 0xc0
 800d5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5fc:	200b      	movs	r0, #11
 800d5fe:	b030      	add	sp, #192	@ 0xc0
 800d600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d604:	4618      	mov	r0, r3
 800d606:	b030      	add	sp, #192	@ 0xc0
 800d608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60c:	200b      	movs	r0, #11
 800d60e:	4770      	bx	lr
 800d610:	200a      	movs	r0, #10
 800d612:	e7f4      	b.n	800d5fe <rclc_executor_init+0xb6>
 800d614:	f3af 8000 	nop.w
 800d618:	3b9aca00 	.word	0x3b9aca00
 800d61c:	00000000 	.word	0x00000000
 800d620:	0801d520 	.word	0x0801d520
 800d624:	0800d4a5 	.word	0x0800d4a5

0800d628 <rclc_executor_add_timer>:
 800d628:	b300      	cbz	r0, 800d66c <rclc_executor_add_timer+0x44>
 800d62a:	b1f9      	cbz	r1, 800d66c <rclc_executor_add_timer+0x44>
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d632:	4293      	cmp	r3, r2
 800d634:	4604      	mov	r4, r0
 800d636:	d301      	bcc.n	800d63c <rclc_executor_add_timer+0x14>
 800d638:	2001      	movs	r0, #1
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
 800d63c:	6840      	ldr	r0, [r0, #4]
 800d63e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d642:	019d      	lsls	r5, r3, #6
 800d644:	6051      	str	r1, [r2, #4]
 800d646:	2102      	movs	r1, #2
 800d648:	5341      	strh	r1, [r0, r5]
 800d64a:	3301      	adds	r3, #1
 800d64c:	2000      	movs	r0, #0
 800d64e:	2101      	movs	r1, #1
 800d650:	f104 0514 	add.w	r5, r4, #20
 800d654:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d656:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d658:	4628      	mov	r0, r5
 800d65a:	60e3      	str	r3, [r4, #12]
 800d65c:	f008 f970 	bl	8015940 <rcl_wait_set_is_valid>
 800d660:	b930      	cbnz	r0, 800d670 <rclc_executor_add_timer+0x48>
 800d662:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d664:	3301      	adds	r3, #1
 800d666:	2000      	movs	r0, #0
 800d668:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d66a:	bd38      	pop	{r3, r4, r5, pc}
 800d66c:	200b      	movs	r0, #11
 800d66e:	4770      	bx	lr
 800d670:	4628      	mov	r0, r5
 800d672:	f008 f96b 	bl	801594c <rcl_wait_set_fini>
 800d676:	2800      	cmp	r0, #0
 800d678:	d0f3      	beq.n	800d662 <rclc_executor_add_timer+0x3a>
 800d67a:	bd38      	pop	{r3, r4, r5, pc}

0800d67c <rclc_executor_add_service>:
 800d67c:	b370      	cbz	r0, 800d6dc <rclc_executor_add_service+0x60>
 800d67e:	b369      	cbz	r1, 800d6dc <rclc_executor_add_service+0x60>
 800d680:	b362      	cbz	r2, 800d6dc <rclc_executor_add_service+0x60>
 800d682:	b35b      	cbz	r3, 800d6dc <rclc_executor_add_service+0x60>
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4604      	mov	r4, r0
 800d688:	9804      	ldr	r0, [sp, #16]
 800d68a:	b378      	cbz	r0, 800d6ec <rclc_executor_add_service+0x70>
 800d68c:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800d690:	42a8      	cmp	r0, r5
 800d692:	d301      	bcc.n	800d698 <rclc_executor_add_service+0x1c>
 800d694:	2001      	movs	r0, #1
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	6865      	ldr	r5, [r4, #4]
 800d69a:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800d69e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d6a2:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800d6a6:	9b04      	ldr	r3, [sp, #16]
 800d6a8:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d6ac:	2305      	movs	r3, #5
 800d6ae:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d6b2:	3001      	adds	r0, #1
 800d6b4:	f825 300e 	strh.w	r3, [r5, lr]
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f104 0514 	add.w	r5, r4, #20
 800d6c0:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800d6c4:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800d6c8:	60e0      	str	r0, [r4, #12]
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	f008 f938 	bl	8015940 <rcl_wait_set_is_valid>
 800d6d0:	b930      	cbnz	r0, 800d6e0 <rclc_executor_add_service+0x64>
 800d6d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	6563      	str	r3, [r4, #84]	@ 0x54
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	200b      	movs	r0, #11
 800d6de:	4770      	bx	lr
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	f008 f933 	bl	801594c <rcl_wait_set_fini>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d0f3      	beq.n	800d6d2 <rclc_executor_add_service+0x56>
 800d6ea:	e7d4      	b.n	800d696 <rclc_executor_add_service+0x1a>
 800d6ec:	200b      	movs	r0, #11
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}

0800d6f0 <rclc_executor_prepare>:
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d044      	beq.n	800d77e <rclc_executor_prepare+0x8e>
 800d6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6f6:	f100 0514 	add.w	r5, r0, #20
 800d6fa:	b09b      	sub	sp, #108	@ 0x6c
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	4628      	mov	r0, r5
 800d700:	f008 f91e 	bl	8015940 <rcl_wait_set_is_valid>
 800d704:	b110      	cbz	r0, 800d70c <rclc_executor_prepare+0x1c>
 800d706:	2000      	movs	r0, #0
 800d708:	b01b      	add	sp, #108	@ 0x6c
 800d70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d70c:	4628      	mov	r0, r5
 800d70e:	f008 f91d 	bl	801594c <rcl_wait_set_fini>
 800d712:	2800      	cmp	r0, #0
 800d714:	d130      	bne.n	800d778 <rclc_executor_prepare+0x88>
 800d716:	a80c      	add	r0, sp, #48	@ 0x30
 800d718:	f008 f8fe 	bl	8015918 <rcl_get_zero_initialized_wait_set>
 800d71c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d720:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d724:	46ae      	mov	lr, r5
 800d726:	6927      	ldr	r7, [r4, #16]
 800d728:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d72c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d730:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d734:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d738:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d73c:	f8dc 3000 	ldr.w	r3, [ip]
 800d740:	f8ce 3000 	str.w	r3, [lr]
 800d744:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d746:	ae04      	add	r6, sp, #16
 800d748:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	6822      	ldr	r2, [r4, #0]
 800d74e:	6033      	str	r3, [r6, #0]
 800d750:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d752:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d754:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d758:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d75c:	e9cd 2100 	strd	r2, r1, [sp]
 800d760:	4628      	mov	r0, r5
 800d762:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d764:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d766:	f008 fbef 	bl	8015f48 <rcl_wait_set_init>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d0cc      	beq.n	800d708 <rclc_executor_prepare+0x18>
 800d76e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d770:	f000 fb8e 	bl	800de90 <rcutils_reset_error>
 800d774:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d776:	e7c7      	b.n	800d708 <rclc_executor_prepare+0x18>
 800d778:	f000 fb8a 	bl	800de90 <rcutils_reset_error>
 800d77c:	e7cb      	b.n	800d716 <rclc_executor_prepare+0x26>
 800d77e:	200b      	movs	r0, #11
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop

0800d784 <rclc_executor_spin_some.part.0>:
 800d784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d788:	f100 0614 	add.w	r6, r0, #20
 800d78c:	b083      	sub	sp, #12
 800d78e:	4691      	mov	r9, r2
 800d790:	4698      	mov	r8, r3
 800d792:	4605      	mov	r5, r0
 800d794:	f7ff ffac 	bl	800d6f0 <rclc_executor_prepare>
 800d798:	4630      	mov	r0, r6
 800d79a:	f008 f9a3 	bl	8015ae4 <rcl_wait_set_clear>
 800d79e:	4607      	mov	r7, r0
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	f040 80ed 	bne.w	800d980 <rclc_executor_spin_some.part.0+0x1fc>
 800d7a6:	68ab      	ldr	r3, [r5, #8]
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	b303      	cbz	r3, 800d7ee <rclc_executor_spin_some.part.0+0x6a>
 800d7ac:	6869      	ldr	r1, [r5, #4]
 800d7ae:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d7b2:	01a2      	lsls	r2, r4, #6
 800d7b4:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d7b8:	b1cb      	cbz	r3, 800d7ee <rclc_executor_spin_some.part.0+0x6a>
 800d7ba:	5c8b      	ldrb	r3, [r1, r2]
 800d7bc:	2b0a      	cmp	r3, #10
 800d7be:	f200 80d8 	bhi.w	800d972 <rclc_executor_spin_some.part.0+0x1ee>
 800d7c2:	e8df f003 	tbb	[pc, r3]
 800d7c6:	9c9c      	.short	0x9c9c
 800d7c8:	068c8ca7 	.word	0x068c8ca7
 800d7cc:	bdc90606 	.word	0xbdc90606
 800d7d0:	b2          	.byte	0xb2
 800d7d1:	00          	.byte	0x00
 800d7d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d7d6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f008 fcca 	bl	8016174 <rcl_wait_set_add_service>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	f040 8086 	bne.w	800d8f2 <rclc_executor_spin_some.part.0+0x16e>
 800d7e6:	68ab      	ldr	r3, [r5, #8]
 800d7e8:	3401      	adds	r4, #1
 800d7ea:	429c      	cmp	r4, r3
 800d7ec:	d3de      	bcc.n	800d7ac <rclc_executor_spin_some.part.0+0x28>
 800d7ee:	4643      	mov	r3, r8
 800d7f0:	464a      	mov	r2, r9
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	f008 fcec 	bl	80161d0 <rcl_wait>
 800d7f8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f000 80c7 	beq.w	800d990 <rclc_executor_spin_some.part.0+0x20c>
 800d802:	2b01      	cmp	r3, #1
 800d804:	f040 80b5 	bne.w	800d972 <rclc_executor_spin_some.part.0+0x1ee>
 800d808:	68ab      	ldr	r3, [r5, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 8159 	beq.w	800dac2 <rclc_executor_spin_some.part.0+0x33e>
 800d810:	2400      	movs	r4, #0
 800d812:	46a0      	mov	r8, r4
 800d814:	f240 1991 	movw	r9, #401	@ 0x191
 800d818:	e00a      	b.n	800d830 <rclc_executor_spin_some.part.0+0xac>
 800d81a:	f7ff fb41 	bl	800cea0 <_rclc_check_for_new_data>
 800d81e:	4604      	mov	r4, r0
 800d820:	b110      	cbz	r0, 800d828 <rclc_executor_spin_some.part.0+0xa4>
 800d822:	4548      	cmp	r0, r9
 800d824:	f040 80b2 	bne.w	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d828:	68ab      	ldr	r3, [r5, #8]
 800d82a:	4598      	cmp	r8, r3
 800d82c:	f080 8126 	bcs.w	800da7c <rclc_executor_spin_some.part.0+0x2f8>
 800d830:	686a      	ldr	r2, [r5, #4]
 800d832:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d836:	4631      	mov	r1, r6
 800d838:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d83c:	f108 0801 	add.w	r8, r8, #1
 800d840:	f1bc 0f00 	cmp.w	ip, #0
 800d844:	d1e9      	bne.n	800d81a <rclc_executor_spin_some.part.0+0x96>
 800d846:	4619      	mov	r1, r3
 800d848:	4610      	mov	r0, r2
 800d84a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d84e:	4798      	blx	r3
 800d850:	2800      	cmp	r0, #0
 800d852:	f000 809b 	beq.w	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d856:	68ab      	ldr	r3, [r5, #8]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f000 8097 	beq.w	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d85e:	f04f 0800 	mov.w	r8, #0
 800d862:	f240 1991 	movw	r9, #401	@ 0x191
 800d866:	e009      	b.n	800d87c <rclc_executor_spin_some.part.0+0xf8>
 800d868:	f7ff fb68 	bl	800cf3c <_rclc_take_new_data>
 800d86c:	4604      	mov	r4, r0
 800d86e:	b110      	cbz	r0, 800d876 <rclc_executor_spin_some.part.0+0xf2>
 800d870:	4548      	cmp	r0, r9
 800d872:	f040 808b 	bne.w	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d876:	68ab      	ldr	r3, [r5, #8]
 800d878:	4598      	cmp	r8, r3
 800d87a:	d209      	bcs.n	800d890 <rclc_executor_spin_some.part.0+0x10c>
 800d87c:	6868      	ldr	r0, [r5, #4]
 800d87e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d882:	4631      	mov	r1, r6
 800d884:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d888:	f108 0801 	add.w	r8, r8, #1
 800d88c:	2a00      	cmp	r2, #0
 800d88e:	d1eb      	bne.n	800d868 <rclc_executor_spin_some.part.0+0xe4>
 800d890:	2600      	movs	r6, #0
 800d892:	b97b      	cbnz	r3, 800d8b4 <rclc_executor_spin_some.part.0+0x130>
 800d894:	e07a      	b.n	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d896:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d89a:	2a08      	cmp	r2, #8
 800d89c:	f000 80fd 	beq.w	800da9a <rclc_executor_spin_some.part.0+0x316>
 800d8a0:	2a09      	cmp	r2, #9
 800d8a2:	f000 80ef 	beq.w	800da84 <rclc_executor_spin_some.part.0+0x300>
 800d8a6:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d8aa:	b98a      	cbnz	r2, 800d8d0 <rclc_executor_spin_some.part.0+0x14c>
 800d8ac:	3601      	adds	r6, #1
 800d8ae:	429e      	cmp	r6, r3
 800d8b0:	d262      	bcs.n	800d978 <rclc_executor_spin_some.part.0+0x1f4>
 800d8b2:	2400      	movs	r4, #0
 800d8b4:	686a      	ldr	r2, [r5, #4]
 800d8b6:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d8ba:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d8be:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d8c2:	2900      	cmp	r1, #0
 800d8c4:	d062      	beq.n	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d8c6:	7841      	ldrb	r1, [r0, #1]
 800d8c8:	2900      	cmp	r1, #0
 800d8ca:	d0e4      	beq.n	800d896 <rclc_executor_spin_some.part.0+0x112>
 800d8cc:	2901      	cmp	r1, #1
 800d8ce:	d1ed      	bne.n	800d8ac <rclc_executor_spin_some.part.0+0x128>
 800d8d0:	f7ff fca8 	bl	800d224 <_rclc_execute.part.0>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	f040 80b6 	bne.w	800da46 <rclc_executor_spin_some.part.0+0x2c2>
 800d8da:	68ab      	ldr	r3, [r5, #8]
 800d8dc:	e7e6      	b.n	800d8ac <rclc_executor_spin_some.part.0+0x128>
 800d8de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d8e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f008 fc18 	bl	801611c <rcl_wait_set_add_client>
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	f43f af7a 	beq.w	800d7e6 <rclc_executor_spin_some.part.0+0x62>
 800d8f2:	9001      	str	r0, [sp, #4]
 800d8f4:	f000 facc 	bl	800de90 <rcutils_reset_error>
 800d8f8:	9801      	ldr	r0, [sp, #4]
 800d8fa:	4607      	mov	r7, r0
 800d8fc:	e03c      	b.n	800d978 <rclc_executor_spin_some.part.0+0x1f4>
 800d8fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d902:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d906:	4630      	mov	r0, r6
 800d908:	f008 f8c0 	bl	8015a8c <rcl_wait_set_add_subscription>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f43f af6a 	beq.w	800d7e6 <rclc_executor_spin_some.part.0+0x62>
 800d912:	e7ee      	b.n	800d8f2 <rclc_executor_spin_some.part.0+0x16e>
 800d914:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d918:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d91c:	4630      	mov	r0, r6
 800d91e:	f008 fbcd 	bl	80160bc <rcl_wait_set_add_timer>
 800d922:	2800      	cmp	r0, #0
 800d924:	f43f af5f 	beq.w	800d7e6 <rclc_executor_spin_some.part.0+0x62>
 800d928:	e7e3      	b.n	800d8f2 <rclc_executor_spin_some.part.0+0x16e>
 800d92a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d92e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d932:	4630      	mov	r0, r6
 800d934:	f008 fb96 	bl	8016064 <rcl_wait_set_add_guard_condition>
 800d938:	2800      	cmp	r0, #0
 800d93a:	f43f af54 	beq.w	800d7e6 <rclc_executor_spin_some.part.0+0x62>
 800d93e:	e7d8      	b.n	800d8f2 <rclc_executor_spin_some.part.0+0x16e>
 800d940:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d944:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d948:	3110      	adds	r1, #16
 800d94a:	4630      	mov	r0, r6
 800d94c:	f009 f918 	bl	8016b80 <rcl_action_wait_set_add_action_server>
 800d950:	2800      	cmp	r0, #0
 800d952:	f43f af48 	beq.w	800d7e6 <rclc_executor_spin_some.part.0+0x62>
 800d956:	e7cc      	b.n	800d8f2 <rclc_executor_spin_some.part.0+0x16e>
 800d958:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d95c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d960:	3110      	adds	r1, #16
 800d962:	2300      	movs	r3, #0
 800d964:	4630      	mov	r0, r6
 800d966:	f008 fee3 	bl	8016730 <rcl_action_wait_set_add_action_client>
 800d96a:	2800      	cmp	r0, #0
 800d96c:	f43f af3b 	beq.w	800d7e6 <rclc_executor_spin_some.part.0+0x62>
 800d970:	e7bf      	b.n	800d8f2 <rclc_executor_spin_some.part.0+0x16e>
 800d972:	f000 fa8d 	bl	800de90 <rcutils_reset_error>
 800d976:	2701      	movs	r7, #1
 800d978:	4638      	mov	r0, r7
 800d97a:	b003      	add	sp, #12
 800d97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d980:	f000 fa86 	bl	800de90 <rcutils_reset_error>
 800d984:	4638      	mov	r0, r7
 800d986:	b003      	add	sp, #12
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98c:	4627      	mov	r7, r4
 800d98e:	e7f3      	b.n	800d978 <rclc_executor_spin_some.part.0+0x1f4>
 800d990:	68ab      	ldr	r3, [r5, #8]
 800d992:	2b00      	cmp	r3, #0
 800d994:	f000 8092 	beq.w	800dabc <rclc_executor_spin_some.part.0+0x338>
 800d998:	2400      	movs	r4, #0
 800d99a:	46a0      	mov	r8, r4
 800d99c:	f240 1991 	movw	r9, #401	@ 0x191
 800d9a0:	e008      	b.n	800d9b4 <rclc_executor_spin_some.part.0+0x230>
 800d9a2:	f7ff fa7d 	bl	800cea0 <_rclc_check_for_new_data>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	b108      	cbz	r0, 800d9ae <rclc_executor_spin_some.part.0+0x22a>
 800d9aa:	4548      	cmp	r0, r9
 800d9ac:	d1ee      	bne.n	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d9ae:	68ab      	ldr	r3, [r5, #8]
 800d9b0:	4598      	cmp	r8, r3
 800d9b2:	d265      	bcs.n	800da80 <rclc_executor_spin_some.part.0+0x2fc>
 800d9b4:	686a      	ldr	r2, [r5, #4]
 800d9b6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d9ba:	4631      	mov	r1, r6
 800d9bc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d9c0:	f108 0801 	add.w	r8, r8, #1
 800d9c4:	f1bc 0f00 	cmp.w	ip, #0
 800d9c8:	d1eb      	bne.n	800d9a2 <rclc_executor_spin_some.part.0+0x21e>
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4610      	mov	r0, r2
 800d9ce:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d9d2:	4798      	blx	r3
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d0d9      	beq.n	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d9d8:	68ab      	ldr	r3, [r5, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d0d6      	beq.n	800d98c <rclc_executor_spin_some.part.0+0x208>
 800d9de:	f04f 0800 	mov.w	r8, #0
 800d9e2:	f240 1991 	movw	r9, #401	@ 0x191
 800d9e6:	f240 2a59 	movw	sl, #601	@ 0x259
 800d9ea:	e00e      	b.n	800da0a <rclc_executor_spin_some.part.0+0x286>
 800d9ec:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d9f0:	2b08      	cmp	r3, #8
 800d9f2:	d033      	beq.n	800da5c <rclc_executor_spin_some.part.0+0x2d8>
 800d9f4:	2b09      	cmp	r3, #9
 800d9f6:	d028      	beq.n	800da4a <rclc_executor_spin_some.part.0+0x2c6>
 800d9f8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800d9fc:	b9fb      	cbnz	r3, 800da3e <rclc_executor_spin_some.part.0+0x2ba>
 800d9fe:	68ab      	ldr	r3, [r5, #8]
 800da00:	f108 0801 	add.w	r8, r8, #1
 800da04:	4598      	cmp	r8, r3
 800da06:	d2b7      	bcs.n	800d978 <rclc_executor_spin_some.part.0+0x1f4>
 800da08:	2400      	movs	r4, #0
 800da0a:	6868      	ldr	r0, [r5, #4]
 800da0c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800da10:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800da14:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d0b7      	beq.n	800d98c <rclc_executor_spin_some.part.0+0x208>
 800da1c:	4631      	mov	r1, r6
 800da1e:	f7ff fa8d 	bl	800cf3c <_rclc_take_new_data>
 800da22:	b118      	cbz	r0, 800da2c <rclc_executor_spin_some.part.0+0x2a8>
 800da24:	4548      	cmp	r0, r9
 800da26:	d001      	beq.n	800da2c <rclc_executor_spin_some.part.0+0x2a8>
 800da28:	4550      	cmp	r0, sl
 800da2a:	d10c      	bne.n	800da46 <rclc_executor_spin_some.part.0+0x2c2>
 800da2c:	686b      	ldr	r3, [r5, #4]
 800da2e:	eb13 000b 	adds.w	r0, r3, fp
 800da32:	d021      	beq.n	800da78 <rclc_executor_spin_some.part.0+0x2f4>
 800da34:	7842      	ldrb	r2, [r0, #1]
 800da36:	2a00      	cmp	r2, #0
 800da38:	d0d8      	beq.n	800d9ec <rclc_executor_spin_some.part.0+0x268>
 800da3a:	2a01      	cmp	r2, #1
 800da3c:	d1df      	bne.n	800d9fe <rclc_executor_spin_some.part.0+0x27a>
 800da3e:	f7ff fbf1 	bl	800d224 <_rclc_execute.part.0>
 800da42:	2800      	cmp	r0, #0
 800da44:	d0db      	beq.n	800d9fe <rclc_executor_spin_some.part.0+0x27a>
 800da46:	4607      	mov	r7, r0
 800da48:	e796      	b.n	800d978 <rclc_executor_spin_some.part.0+0x1f4>
 800da4a:	6843      	ldr	r3, [r0, #4]
 800da4c:	6a1a      	ldr	r2, [r3, #32]
 800da4e:	2a00      	cmp	r2, #0
 800da50:	d1f5      	bne.n	800da3e <rclc_executor_spin_some.part.0+0x2ba>
 800da52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800da56:	2b00      	cmp	r3, #0
 800da58:	d0d1      	beq.n	800d9fe <rclc_executor_spin_some.part.0+0x27a>
 800da5a:	e7f0      	b.n	800da3e <rclc_executor_spin_some.part.0+0x2ba>
 800da5c:	6843      	ldr	r3, [r0, #4]
 800da5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da60:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800da64:	d1eb      	bne.n	800da3e <rclc_executor_spin_some.part.0+0x2ba>
 800da66:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800da6a:	2a00      	cmp	r2, #0
 800da6c:	d1e7      	bne.n	800da3e <rclc_executor_spin_some.part.0+0x2ba>
 800da6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da72:	2b00      	cmp	r3, #0
 800da74:	d0c3      	beq.n	800d9fe <rclc_executor_spin_some.part.0+0x27a>
 800da76:	e7e2      	b.n	800da3e <rclc_executor_spin_some.part.0+0x2ba>
 800da78:	270b      	movs	r7, #11
 800da7a:	e77d      	b.n	800d978 <rclc_executor_spin_some.part.0+0x1f4>
 800da7c:	686a      	ldr	r2, [r5, #4]
 800da7e:	e6e2      	b.n	800d846 <rclc_executor_spin_some.part.0+0xc2>
 800da80:	686a      	ldr	r2, [r5, #4]
 800da82:	e7a2      	b.n	800d9ca <rclc_executor_spin_some.part.0+0x246>
 800da84:	6842      	ldr	r2, [r0, #4]
 800da86:	6a11      	ldr	r1, [r2, #32]
 800da88:	2900      	cmp	r1, #0
 800da8a:	f47f af21 	bne.w	800d8d0 <rclc_executor_spin_some.part.0+0x14c>
 800da8e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800da92:	2a00      	cmp	r2, #0
 800da94:	f43f af0a 	beq.w	800d8ac <rclc_executor_spin_some.part.0+0x128>
 800da98:	e71a      	b.n	800d8d0 <rclc_executor_spin_some.part.0+0x14c>
 800da9a:	6842      	ldr	r2, [r0, #4]
 800da9c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800da9e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800daa2:	f47f af15 	bne.w	800d8d0 <rclc_executor_spin_some.part.0+0x14c>
 800daa6:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800daaa:	2900      	cmp	r1, #0
 800daac:	f47f af10 	bne.w	800d8d0 <rclc_executor_spin_some.part.0+0x14c>
 800dab0:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800dab4:	2a00      	cmp	r2, #0
 800dab6:	f43f aef9 	beq.w	800d8ac <rclc_executor_spin_some.part.0+0x128>
 800daba:	e709      	b.n	800d8d0 <rclc_executor_spin_some.part.0+0x14c>
 800dabc:	686a      	ldr	r2, [r5, #4]
 800dabe:	461c      	mov	r4, r3
 800dac0:	e783      	b.n	800d9ca <rclc_executor_spin_some.part.0+0x246>
 800dac2:	686a      	ldr	r2, [r5, #4]
 800dac4:	461c      	mov	r4, r3
 800dac6:	e6be      	b.n	800d846 <rclc_executor_spin_some.part.0+0xc2>

0800dac8 <rclc_executor_spin>:
 800dac8:	b1d0      	cbz	r0, 800db00 <rclc_executor_spin+0x38>
 800daca:	b510      	push	{r4, lr}
 800dacc:	4604      	mov	r4, r0
 800dace:	b082      	sub	sp, #8
 800dad0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800dad4:	6820      	ldr	r0, [r4, #0]
 800dad6:	e9cd 2300 	strd	r2, r3, [sp]
 800dada:	f006 fcad 	bl	8014438 <rcl_context_is_valid>
 800dade:	4601      	mov	r1, r0
 800dae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dae4:	4620      	mov	r0, r4
 800dae6:	b131      	cbz	r1, 800daf6 <rclc_executor_spin+0x2e>
 800dae8:	f7ff fe4c 	bl	800d784 <rclc_executor_spin_some.part.0>
 800daec:	f030 0302 	bics.w	r3, r0, #2
 800daf0:	d0ee      	beq.n	800dad0 <rclc_executor_spin+0x8>
 800daf2:	b002      	add	sp, #8
 800daf4:	bd10      	pop	{r4, pc}
 800daf6:	f000 f9cb 	bl	800de90 <rcutils_reset_error>
 800dafa:	2001      	movs	r0, #1
 800dafc:	b002      	add	sp, #8
 800dafe:	bd10      	pop	{r4, pc}
 800db00:	200b      	movs	r0, #11
 800db02:	4770      	bx	lr

0800db04 <rclc_executor_handle_counters_zero_init>:
 800db04:	b130      	cbz	r0, 800db14 <rclc_executor_handle_counters_zero_init+0x10>
 800db06:	b508      	push	{r3, lr}
 800db08:	2220      	movs	r2, #32
 800db0a:	2100      	movs	r1, #0
 800db0c:	f00c fd78 	bl	801a600 <memset>
 800db10:	2000      	movs	r0, #0
 800db12:	bd08      	pop	{r3, pc}
 800db14:	200b      	movs	r0, #11
 800db16:	4770      	bx	lr

0800db18 <rclc_executor_handle_init>:
 800db18:	b168      	cbz	r0, 800db36 <rclc_executor_handle_init+0x1e>
 800db1a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800db40 <rclc_executor_handle_init+0x28>
 800db1e:	2300      	movs	r3, #0
 800db20:	220b      	movs	r2, #11
 800db22:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800db26:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800db2a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800db2e:	8002      	strh	r2, [r0, #0]
 800db30:	8703      	strh	r3, [r0, #56]	@ 0x38
 800db32:	4618      	mov	r0, r3
 800db34:	4770      	bx	lr
 800db36:	200b      	movs	r0, #11
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	f3af 8000 	nop.w
	...

0800db48 <rclc_support_init_with_options>:
 800db48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db4c:	b083      	sub	sp, #12
 800db4e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800db50:	b340      	cbz	r0, 800dba4 <rclc_support_init_with_options+0x5c>
 800db52:	461d      	mov	r5, r3
 800db54:	b333      	cbz	r3, 800dba4 <rclc_support_init_with_options+0x5c>
 800db56:	b32e      	cbz	r6, 800dba4 <rclc_support_init_with_options+0x5c>
 800db58:	46e9      	mov	r9, sp
 800db5a:	4604      	mov	r4, r0
 800db5c:	4648      	mov	r0, r9
 800db5e:	460f      	mov	r7, r1
 800db60:	4690      	mov	r8, r2
 800db62:	f006 fc5f 	bl	8014424 <rcl_get_zero_initialized_context>
 800db66:	e899 0003 	ldmia.w	r9, {r0, r1}
 800db6a:	462a      	mov	r2, r5
 800db6c:	e884 0003 	stmia.w	r4, {r0, r1}
 800db70:	4623      	mov	r3, r4
 800db72:	4641      	mov	r1, r8
 800db74:	4638      	mov	r0, r7
 800db76:	f006 fcc5 	bl	8014504 <rcl_init>
 800db7a:	4605      	mov	r5, r0
 800db7c:	b960      	cbnz	r0, 800db98 <rclc_support_init_with_options+0x50>
 800db7e:	60a6      	str	r6, [r4, #8]
 800db80:	4632      	mov	r2, r6
 800db82:	f104 010c 	add.w	r1, r4, #12
 800db86:	2003      	movs	r0, #3
 800db88:	f007 fac4 	bl	8015114 <rcl_clock_init>
 800db8c:	4605      	mov	r5, r0
 800db8e:	b918      	cbnz	r0, 800db98 <rclc_support_init_with_options+0x50>
 800db90:	4628      	mov	r0, r5
 800db92:	b003      	add	sp, #12
 800db94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db98:	f000 f97a 	bl	800de90 <rcutils_reset_error>
 800db9c:	4628      	mov	r0, r5
 800db9e:	b003      	add	sp, #12
 800dba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dba4:	250b      	movs	r5, #11
 800dba6:	4628      	mov	r0, r5
 800dba8:	b003      	add	sp, #12
 800dbaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbae:	bf00      	nop

0800dbb0 <rclc_node_init_default>:
 800dbb0:	b3b8      	cbz	r0, 800dc22 <rclc_node_init_default+0x72>
 800dbb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbb6:	460d      	mov	r5, r1
 800dbb8:	b0a1      	sub	sp, #132	@ 0x84
 800dbba:	b329      	cbz	r1, 800dc08 <rclc_node_init_default+0x58>
 800dbbc:	4616      	mov	r6, r2
 800dbbe:	b31a      	cbz	r2, 800dc08 <rclc_node_init_default+0x58>
 800dbc0:	461f      	mov	r7, r3
 800dbc2:	b30b      	cbz	r3, 800dc08 <rclc_node_init_default+0x58>
 800dbc4:	f10d 0810 	add.w	r8, sp, #16
 800dbc8:	4604      	mov	r4, r0
 800dbca:	4640      	mov	r0, r8
 800dbcc:	f006 fdc0 	bl	8014750 <rcl_get_zero_initialized_node>
 800dbd0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dbd4:	f10d 0918 	add.w	r9, sp, #24
 800dbd8:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbdc:	4648      	mov	r0, r9
 800dbde:	f006 ff2f 	bl	8014a40 <rcl_node_get_default_options>
 800dbe2:	4640      	mov	r0, r8
 800dbe4:	f006 fdb4 	bl	8014750 <rcl_get_zero_initialized_node>
 800dbe8:	f8cd 9000 	str.w	r9, [sp]
 800dbec:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dbf0:	463b      	mov	r3, r7
 800dbf2:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbf6:	4632      	mov	r2, r6
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f006 fdb2 	bl	8014764 <rcl_node_init>
 800dc00:	b930      	cbnz	r0, 800dc10 <rclc_node_init_default+0x60>
 800dc02:	b021      	add	sp, #132	@ 0x84
 800dc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc08:	200b      	movs	r0, #11
 800dc0a:	b021      	add	sp, #132	@ 0x84
 800dc0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc10:	9003      	str	r0, [sp, #12]
 800dc12:	f000 f93d 	bl	800de90 <rcutils_reset_error>
 800dc16:	f000 f93b 	bl	800de90 <rcutils_reset_error>
 800dc1a:	9803      	ldr	r0, [sp, #12]
 800dc1c:	b021      	add	sp, #132	@ 0x84
 800dc1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc22:	200b      	movs	r0, #11
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop

0800dc28 <rclc_publisher_init_default>:
 800dc28:	b368      	cbz	r0, 800dc86 <rclc_publisher_init_default+0x5e>
 800dc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc2e:	460d      	mov	r5, r1
 800dc30:	b0a0      	sub	sp, #128	@ 0x80
 800dc32:	b321      	cbz	r1, 800dc7e <rclc_publisher_init_default+0x56>
 800dc34:	4616      	mov	r6, r2
 800dc36:	b312      	cbz	r2, 800dc7e <rclc_publisher_init_default+0x56>
 800dc38:	461f      	mov	r7, r3
 800dc3a:	b303      	cbz	r3, 800dc7e <rclc_publisher_init_default+0x56>
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	f7ff f81f 	bl	800cc80 <rcl_get_zero_initialized_publisher>
 800dc42:	f10d 0810 	add.w	r8, sp, #16
 800dc46:	6020      	str	r0, [r4, #0]
 800dc48:	4640      	mov	r0, r8
 800dc4a:	f7ff f8b5 	bl	800cdb8 <rcl_publisher_get_default_options>
 800dc4e:	490f      	ldr	r1, [pc, #60]	@ (800dc8c <rclc_publisher_init_default+0x64>)
 800dc50:	2250      	movs	r2, #80	@ 0x50
 800dc52:	4640      	mov	r0, r8
 800dc54:	f00c fd9d 	bl	801a792 <memcpy>
 800dc58:	f8cd 8000 	str.w	r8, [sp]
 800dc5c:	463b      	mov	r3, r7
 800dc5e:	4632      	mov	r2, r6
 800dc60:	4629      	mov	r1, r5
 800dc62:	4620      	mov	r0, r4
 800dc64:	f7ff f812 	bl	800cc8c <rcl_publisher_init>
 800dc68:	b910      	cbnz	r0, 800dc70 <rclc_publisher_init_default+0x48>
 800dc6a:	b020      	add	sp, #128	@ 0x80
 800dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc70:	9003      	str	r0, [sp, #12]
 800dc72:	f000 f90d 	bl	800de90 <rcutils_reset_error>
 800dc76:	9803      	ldr	r0, [sp, #12]
 800dc78:	b020      	add	sp, #128	@ 0x80
 800dc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc7e:	200b      	movs	r0, #11
 800dc80:	b020      	add	sp, #128	@ 0x80
 800dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc86:	200b      	movs	r0, #11
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	0801d5a8 	.word	0x0801d5a8

0800dc90 <rclc_publisher_init_best_effort>:
 800dc90:	b368      	cbz	r0, 800dcee <rclc_publisher_init_best_effort+0x5e>
 800dc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc96:	460d      	mov	r5, r1
 800dc98:	b0a0      	sub	sp, #128	@ 0x80
 800dc9a:	b321      	cbz	r1, 800dce6 <rclc_publisher_init_best_effort+0x56>
 800dc9c:	4616      	mov	r6, r2
 800dc9e:	b312      	cbz	r2, 800dce6 <rclc_publisher_init_best_effort+0x56>
 800dca0:	461f      	mov	r7, r3
 800dca2:	b303      	cbz	r3, 800dce6 <rclc_publisher_init_best_effort+0x56>
 800dca4:	4604      	mov	r4, r0
 800dca6:	f7fe ffeb 	bl	800cc80 <rcl_get_zero_initialized_publisher>
 800dcaa:	f10d 0810 	add.w	r8, sp, #16
 800dcae:	6020      	str	r0, [r4, #0]
 800dcb0:	4640      	mov	r0, r8
 800dcb2:	f7ff f881 	bl	800cdb8 <rcl_publisher_get_default_options>
 800dcb6:	490f      	ldr	r1, [pc, #60]	@ (800dcf4 <rclc_publisher_init_best_effort+0x64>)
 800dcb8:	2250      	movs	r2, #80	@ 0x50
 800dcba:	4640      	mov	r0, r8
 800dcbc:	f00c fd69 	bl	801a792 <memcpy>
 800dcc0:	f8cd 8000 	str.w	r8, [sp]
 800dcc4:	463b      	mov	r3, r7
 800dcc6:	4632      	mov	r2, r6
 800dcc8:	4629      	mov	r1, r5
 800dcca:	4620      	mov	r0, r4
 800dccc:	f7fe ffde 	bl	800cc8c <rcl_publisher_init>
 800dcd0:	b910      	cbnz	r0, 800dcd8 <rclc_publisher_init_best_effort+0x48>
 800dcd2:	b020      	add	sp, #128	@ 0x80
 800dcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd8:	9003      	str	r0, [sp, #12]
 800dcda:	f000 f8d9 	bl	800de90 <rcutils_reset_error>
 800dcde:	9803      	ldr	r0, [sp, #12]
 800dce0:	b020      	add	sp, #128	@ 0x80
 800dce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dce6:	200b      	movs	r0, #11
 800dce8:	b020      	add	sp, #128	@ 0x80
 800dcea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcee:	200b      	movs	r0, #11
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	0801d5f8 	.word	0x0801d5f8

0800dcf8 <rclc_service_init_default>:
 800dcf8:	b368      	cbz	r0, 800dd56 <rclc_service_init_default+0x5e>
 800dcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfe:	460d      	mov	r5, r1
 800dd00:	b09e      	sub	sp, #120	@ 0x78
 800dd02:	b321      	cbz	r1, 800dd4e <rclc_service_init_default+0x56>
 800dd04:	4616      	mov	r6, r2
 800dd06:	b312      	cbz	r2, 800dd4e <rclc_service_init_default+0x56>
 800dd08:	461f      	mov	r7, r3
 800dd0a:	b303      	cbz	r3, 800dd4e <rclc_service_init_default+0x56>
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	f007 f867 	bl	8014de0 <rcl_get_zero_initialized_service>
 800dd12:	f10d 0810 	add.w	r8, sp, #16
 800dd16:	6020      	str	r0, [r4, #0]
 800dd18:	4640      	mov	r0, r8
 800dd1a:	f007 f8ef 	bl	8014efc <rcl_service_get_default_options>
 800dd1e:	490f      	ldr	r1, [pc, #60]	@ (800dd5c <rclc_service_init_default+0x64>)
 800dd20:	2250      	movs	r2, #80	@ 0x50
 800dd22:	4640      	mov	r0, r8
 800dd24:	f00c fd35 	bl	801a792 <memcpy>
 800dd28:	f8cd 8000 	str.w	r8, [sp]
 800dd2c:	463b      	mov	r3, r7
 800dd2e:	4632      	mov	r2, r6
 800dd30:	4629      	mov	r1, r5
 800dd32:	4620      	mov	r0, r4
 800dd34:	f007 f85a 	bl	8014dec <rcl_service_init>
 800dd38:	b910      	cbnz	r0, 800dd40 <rclc_service_init_default+0x48>
 800dd3a:	b01e      	add	sp, #120	@ 0x78
 800dd3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd40:	9003      	str	r0, [sp, #12]
 800dd42:	f000 f8a5 	bl	800de90 <rcutils_reset_error>
 800dd46:	9803      	ldr	r0, [sp, #12]
 800dd48:	b01e      	add	sp, #120	@ 0x78
 800dd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd4e:	200b      	movs	r0, #11
 800dd50:	b01e      	add	sp, #120	@ 0x78
 800dd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd56:	200b      	movs	r0, #11
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	0801d648 	.word	0x0801d648

0800dd60 <rclc_timer_init_default>:
 800dd60:	b360      	cbz	r0, 800ddbc <rclc_timer_init_default+0x5c>
 800dd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd66:	460e      	mov	r6, r1
 800dd68:	b08a      	sub	sp, #40	@ 0x28
 800dd6a:	b319      	cbz	r1, 800ddb4 <rclc_timer_init_default+0x54>
 800dd6c:	4690      	mov	r8, r2
 800dd6e:	461f      	mov	r7, r3
 800dd70:	4605      	mov	r5, r0
 800dd72:	f007 fbad 	bl	80154d0 <rcl_get_zero_initialized_timer>
 800dd76:	68b4      	ldr	r4, [r6, #8]
 800dd78:	6028      	str	r0, [r5, #0]
 800dd7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd7c:	f10d 0c0c 	add.w	ip, sp, #12
 800dd80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	f8cc 3000 	str.w	r3, [ip]
 800dd8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd8c:	9302      	str	r3, [sp, #8]
 800dd8e:	e9cd 8700 	strd	r8, r7, [sp]
 800dd92:	4628      	mov	r0, r5
 800dd94:	4632      	mov	r2, r6
 800dd96:	f106 010c 	add.w	r1, r6, #12
 800dd9a:	f007 fba1 	bl	80154e0 <rcl_timer_init>
 800dd9e:	b910      	cbnz	r0, 800dda6 <rclc_timer_init_default+0x46>
 800dda0:	b00a      	add	sp, #40	@ 0x28
 800dda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda6:	9009      	str	r0, [sp, #36]	@ 0x24
 800dda8:	f000 f872 	bl	800de90 <rcutils_reset_error>
 800ddac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ddae:	b00a      	add	sp, #40	@ 0x28
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb4:	200b      	movs	r0, #11
 800ddb6:	b00a      	add	sp, #40	@ 0x28
 800ddb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddbc:	200b      	movs	r0, #11
 800ddbe:	4770      	bx	lr

0800ddc0 <__default_zero_allocate>:
 800ddc0:	f00b bed6 	b.w	8019b70 <calloc>

0800ddc4 <__default_reallocate>:
 800ddc4:	f00c b874 	b.w	8019eb0 <realloc>

0800ddc8 <__default_deallocate>:
 800ddc8:	f00b bf50 	b.w	8019c6c <free>

0800ddcc <__default_allocate>:
 800ddcc:	f00b bf46 	b.w	8019c5c <malloc>

0800ddd0 <rcutils_get_zero_initialized_allocator>:
 800ddd0:	b510      	push	{r4, lr}
 800ddd2:	4c05      	ldr	r4, [pc, #20]	@ (800dde8 <rcutils_get_zero_initialized_allocator+0x18>)
 800ddd4:	4686      	mov	lr, r0
 800ddd6:	4684      	mov	ip, r0
 800ddd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	f8cc 3000 	str.w	r3, [ip]
 800dde4:	4670      	mov	r0, lr
 800dde6:	bd10      	pop	{r4, pc}
 800dde8:	0801d698 	.word	0x0801d698

0800ddec <rcutils_set_default_allocator>:
 800ddec:	b1a8      	cbz	r0, 800de1a <rcutils_set_default_allocator+0x2e>
 800ddee:	6802      	ldr	r2, [r0, #0]
 800ddf0:	b1a2      	cbz	r2, 800de1c <rcutils_set_default_allocator+0x30>
 800ddf2:	6841      	ldr	r1, [r0, #4]
 800ddf4:	b1a1      	cbz	r1, 800de20 <rcutils_set_default_allocator+0x34>
 800ddf6:	b410      	push	{r4}
 800ddf8:	68c4      	ldr	r4, [r0, #12]
 800ddfa:	b164      	cbz	r4, 800de16 <rcutils_set_default_allocator+0x2a>
 800ddfc:	6880      	ldr	r0, [r0, #8]
 800ddfe:	b138      	cbz	r0, 800de10 <rcutils_set_default_allocator+0x24>
 800de00:	4b08      	ldr	r3, [pc, #32]	@ (800de24 <rcutils_set_default_allocator+0x38>)
 800de02:	601a      	str	r2, [r3, #0]
 800de04:	2200      	movs	r2, #0
 800de06:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800de0a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800de0e:	2001      	movs	r0, #1
 800de10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	4620      	mov	r0, r4
 800de18:	e7fa      	b.n	800de10 <rcutils_set_default_allocator+0x24>
 800de1a:	4770      	bx	lr
 800de1c:	4610      	mov	r0, r2
 800de1e:	4770      	bx	lr
 800de20:	4608      	mov	r0, r1
 800de22:	4770      	bx	lr
 800de24:	20000514 	.word	0x20000514

0800de28 <rcutils_get_default_allocator>:
 800de28:	b510      	push	{r4, lr}
 800de2a:	4c05      	ldr	r4, [pc, #20]	@ (800de40 <rcutils_get_default_allocator+0x18>)
 800de2c:	4686      	mov	lr, r0
 800de2e:	4684      	mov	ip, r0
 800de30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	f8cc 3000 	str.w	r3, [ip]
 800de3c:	4670      	mov	r0, lr
 800de3e:	bd10      	pop	{r4, pc}
 800de40:	20000514 	.word	0x20000514

0800de44 <rcutils_allocator_is_valid>:
 800de44:	b158      	cbz	r0, 800de5e <rcutils_allocator_is_valid+0x1a>
 800de46:	6803      	ldr	r3, [r0, #0]
 800de48:	b143      	cbz	r3, 800de5c <rcutils_allocator_is_valid+0x18>
 800de4a:	6843      	ldr	r3, [r0, #4]
 800de4c:	b133      	cbz	r3, 800de5c <rcutils_allocator_is_valid+0x18>
 800de4e:	68c3      	ldr	r3, [r0, #12]
 800de50:	b123      	cbz	r3, 800de5c <rcutils_allocator_is_valid+0x18>
 800de52:	6880      	ldr	r0, [r0, #8]
 800de54:	3800      	subs	r0, #0
 800de56:	bf18      	it	ne
 800de58:	2001      	movne	r0, #1
 800de5a:	4770      	bx	lr
 800de5c:	4618      	mov	r0, r3
 800de5e:	4770      	bx	lr

0800de60 <rcutils_get_error_string>:
 800de60:	4b06      	ldr	r3, [pc, #24]	@ (800de7c <rcutils_get_error_string+0x1c>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	b13b      	cbz	r3, 800de76 <rcutils_get_error_string+0x16>
 800de66:	4b06      	ldr	r3, [pc, #24]	@ (800de80 <rcutils_get_error_string+0x20>)
 800de68:	781a      	ldrb	r2, [r3, #0]
 800de6a:	b90a      	cbnz	r2, 800de70 <rcutils_get_error_string+0x10>
 800de6c:	2201      	movs	r2, #1
 800de6e:	701a      	strb	r2, [r3, #0]
 800de70:	4b04      	ldr	r3, [pc, #16]	@ (800de84 <rcutils_get_error_string+0x24>)
 800de72:	7818      	ldrb	r0, [r3, #0]
 800de74:	4770      	bx	lr
 800de76:	4b04      	ldr	r3, [pc, #16]	@ (800de88 <rcutils_get_error_string+0x28>)
 800de78:	7818      	ldrb	r0, [r3, #0]
 800de7a:	4770      	bx	lr
 800de7c:	20006f58 	.word	0x20006f58
 800de80:	20006f71 	.word	0x20006f71
 800de84:	20006f70 	.word	0x20006f70
 800de88:	0801d3ac 	.word	0x0801d3ac
 800de8c:	00000000 	.word	0x00000000

0800de90 <rcutils_reset_error>:
 800de90:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800deb0 <rcutils_reset_error+0x20>
 800de94:	4a08      	ldr	r2, [pc, #32]	@ (800deb8 <rcutils_reset_error+0x28>)
 800de96:	4809      	ldr	r0, [pc, #36]	@ (800debc <rcutils_reset_error+0x2c>)
 800de98:	4909      	ldr	r1, [pc, #36]	@ (800dec0 <rcutils_reset_error+0x30>)
 800de9a:	2300      	movs	r3, #0
 800de9c:	8013      	strh	r3, [r2, #0]
 800de9e:	ed82 7b02 	vstr	d7, [r2, #8]
 800dea2:	4a08      	ldr	r2, [pc, #32]	@ (800dec4 <rcutils_reset_error+0x34>)
 800dea4:	7003      	strb	r3, [r0, #0]
 800dea6:	700b      	strb	r3, [r1, #0]
 800dea8:	7013      	strb	r3, [r2, #0]
 800deaa:	4770      	bx	lr
 800deac:	f3af 8000 	nop.w
	...
 800deb8:	20006f60 	.word	0x20006f60
 800debc:	20006f71 	.word	0x20006f71
 800dec0:	20006f70 	.word	0x20006f70
 800dec4:	20006f58 	.word	0x20006f58

0800dec8 <rcutils_system_time_now>:
 800dec8:	b308      	cbz	r0, 800df0e <rcutils_system_time_now+0x46>
 800deca:	b570      	push	{r4, r5, r6, lr}
 800decc:	b084      	sub	sp, #16
 800dece:	4604      	mov	r4, r0
 800ded0:	4669      	mov	r1, sp
 800ded2:	2001      	movs	r0, #1
 800ded4:	f7f4 fb8c 	bl	80025f0 <clock_gettime>
 800ded8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800dedc:	2d00      	cmp	r5, #0
 800dede:	db13      	blt.n	800df08 <rcutils_system_time_now+0x40>
 800dee0:	9902      	ldr	r1, [sp, #8]
 800dee2:	2900      	cmp	r1, #0
 800dee4:	db0d      	blt.n	800df02 <rcutils_system_time_now+0x3a>
 800dee6:	4e0b      	ldr	r6, [pc, #44]	@ (800df14 <rcutils_system_time_now+0x4c>)
 800dee8:	fba3 3206 	umull	r3, r2, r3, r6
 800deec:	185b      	adds	r3, r3, r1
 800deee:	fb06 2205 	mla	r2, r6, r5, r2
 800def2:	f04f 0000 	mov.w	r0, #0
 800def6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800defa:	e9c4 3200 	strd	r3, r2, [r4]
 800defe:	b004      	add	sp, #16
 800df00:	bd70      	pop	{r4, r5, r6, pc}
 800df02:	ea53 0205 	orrs.w	r2, r3, r5
 800df06:	d1ee      	bne.n	800dee6 <rcutils_system_time_now+0x1e>
 800df08:	2002      	movs	r0, #2
 800df0a:	b004      	add	sp, #16
 800df0c:	bd70      	pop	{r4, r5, r6, pc}
 800df0e:	200b      	movs	r0, #11
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	3b9aca00 	.word	0x3b9aca00

0800df18 <rcutils_steady_time_now>:
 800df18:	b308      	cbz	r0, 800df5e <rcutils_steady_time_now+0x46>
 800df1a:	b570      	push	{r4, r5, r6, lr}
 800df1c:	b084      	sub	sp, #16
 800df1e:	4604      	mov	r4, r0
 800df20:	4669      	mov	r1, sp
 800df22:	2000      	movs	r0, #0
 800df24:	f7f4 fb64 	bl	80025f0 <clock_gettime>
 800df28:	e9dd 3500 	ldrd	r3, r5, [sp]
 800df2c:	2d00      	cmp	r5, #0
 800df2e:	db13      	blt.n	800df58 <rcutils_steady_time_now+0x40>
 800df30:	9902      	ldr	r1, [sp, #8]
 800df32:	2900      	cmp	r1, #0
 800df34:	db0d      	blt.n	800df52 <rcutils_steady_time_now+0x3a>
 800df36:	4e0b      	ldr	r6, [pc, #44]	@ (800df64 <rcutils_steady_time_now+0x4c>)
 800df38:	fba3 3206 	umull	r3, r2, r3, r6
 800df3c:	185b      	adds	r3, r3, r1
 800df3e:	fb06 2205 	mla	r2, r6, r5, r2
 800df42:	f04f 0000 	mov.w	r0, #0
 800df46:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800df4a:	e9c4 3200 	strd	r3, r2, [r4]
 800df4e:	b004      	add	sp, #16
 800df50:	bd70      	pop	{r4, r5, r6, pc}
 800df52:	ea53 0205 	orrs.w	r2, r3, r5
 800df56:	d1ee      	bne.n	800df36 <rcutils_steady_time_now+0x1e>
 800df58:	2002      	movs	r0, #2
 800df5a:	b004      	add	sp, #16
 800df5c:	bd70      	pop	{r4, r5, r6, pc}
 800df5e:	200b      	movs	r0, #11
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	3b9aca00 	.word	0x3b9aca00

0800df68 <rmw_get_zero_initialized_init_options>:
 800df68:	b510      	push	{r4, lr}
 800df6a:	2238      	movs	r2, #56	@ 0x38
 800df6c:	4604      	mov	r4, r0
 800df6e:	2100      	movs	r1, #0
 800df70:	f00c fb46 	bl	801a600 <memset>
 800df74:	f104 0010 	add.w	r0, r4, #16
 800df78:	f000 f80a 	bl	800df90 <rmw_get_default_security_options>
 800df7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800df80:	60e3      	str	r3, [r4, #12]
 800df82:	4620      	mov	r0, r4
 800df84:	bd10      	pop	{r4, pc}
 800df86:	bf00      	nop

0800df88 <rmw_get_default_publisher_options>:
 800df88:	2200      	movs	r2, #0
 800df8a:	6002      	str	r2, [r0, #0]
 800df8c:	7102      	strb	r2, [r0, #4]
 800df8e:	4770      	bx	lr

0800df90 <rmw_get_default_security_options>:
 800df90:	2200      	movs	r2, #0
 800df92:	7002      	strb	r2, [r0, #0]
 800df94:	6042      	str	r2, [r0, #4]
 800df96:	4770      	bx	lr

0800df98 <rmw_uros_set_custom_transport>:
 800df98:	b470      	push	{r4, r5, r6}
 800df9a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800df9e:	b162      	cbz	r2, 800dfba <rmw_uros_set_custom_transport+0x22>
 800dfa0:	b15b      	cbz	r3, 800dfba <rmw_uros_set_custom_transport+0x22>
 800dfa2:	b155      	cbz	r5, 800dfba <rmw_uros_set_custom_transport+0x22>
 800dfa4:	b14e      	cbz	r6, 800dfba <rmw_uros_set_custom_transport+0x22>
 800dfa6:	4c06      	ldr	r4, [pc, #24]	@ (800dfc0 <rmw_uros_set_custom_transport+0x28>)
 800dfa8:	7020      	strb	r0, [r4, #0]
 800dfaa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dfae:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dfb2:	6166      	str	r6, [r4, #20]
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	bc70      	pop	{r4, r5, r6}
 800dfb8:	4770      	bx	lr
 800dfba:	200b      	movs	r0, #11
 800dfbc:	bc70      	pop	{r4, r5, r6}
 800dfbe:	4770      	bx	lr
 800dfc0:	20006f74 	.word	0x20006f74

0800dfc4 <rmw_init_options_init>:
 800dfc4:	b084      	sub	sp, #16
 800dfc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc8:	b083      	sub	sp, #12
 800dfca:	ad09      	add	r5, sp, #36	@ 0x24
 800dfcc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800dfd0:	b130      	cbz	r0, 800dfe0 <rmw_init_options_init+0x1c>
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f7ff ff35 	bl	800de44 <rcutils_allocator_is_valid>
 800dfda:	b108      	cbz	r0, 800dfe0 <rmw_init_options_init+0x1c>
 800dfdc:	68a6      	ldr	r6, [r4, #8]
 800dfde:	b12e      	cbz	r6, 800dfec <rmw_init_options_init+0x28>
 800dfe0:	200b      	movs	r0, #11
 800dfe2:	b003      	add	sp, #12
 800dfe4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dfe8:	b004      	add	sp, #16
 800dfea:	4770      	bx	lr
 800dfec:	2200      	movs	r2, #0
 800dfee:	2300      	movs	r3, #0
 800dff0:	e9c4 2300 	strd	r2, r3, [r4]
 800dff4:	4b22      	ldr	r3, [pc, #136]	@ (800e080 <rmw_init_options_init+0xbc>)
 800dff6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800e090 <rmw_init_options_init+0xcc>
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	60a3      	str	r3, [r4, #8]
 800dffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e000:	f104 0c20 	add.w	ip, r4, #32
 800e004:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e008:	466f      	mov	r7, sp
 800e00a:	682b      	ldr	r3, [r5, #0]
 800e00c:	f8cc 3000 	str.w	r3, [ip]
 800e010:	4638      	mov	r0, r7
 800e012:	f8c4 e01c 	str.w	lr, [r4, #28]
 800e016:	60e6      	str	r6, [r4, #12]
 800e018:	f7ff ffba 	bl	800df90 <rmw_get_default_security_options>
 800e01c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e020:	f104 0310 	add.w	r3, r4, #16
 800e024:	e883 0003 	stmia.w	r3, {r0, r1}
 800e028:	2203      	movs	r2, #3
 800e02a:	4816      	ldr	r0, [pc, #88]	@ (800e084 <rmw_init_options_init+0xc0>)
 800e02c:	4916      	ldr	r1, [pc, #88]	@ (800e088 <rmw_init_options_init+0xc4>)
 800e02e:	7626      	strb	r6, [r4, #24]
 800e030:	f000 ffbc 	bl	800efac <rmw_uxrce_init_init_options_impl_memory>
 800e034:	4813      	ldr	r0, [pc, #76]	@ (800e084 <rmw_init_options_init+0xc0>)
 800e036:	f009 fdd7 	bl	8017be8 <get_memory>
 800e03a:	b1f0      	cbz	r0, 800e07a <rmw_init_options_init+0xb6>
 800e03c:	4a13      	ldr	r2, [pc, #76]	@ (800e08c <rmw_init_options_init+0xc8>)
 800e03e:	6883      	ldr	r3, [r0, #8]
 800e040:	6851      	ldr	r1, [r2, #4]
 800e042:	7810      	ldrb	r0, [r2, #0]
 800e044:	6363      	str	r3, [r4, #52]	@ 0x34
 800e046:	7418      	strb	r0, [r3, #16]
 800e048:	6159      	str	r1, [r3, #20]
 800e04a:	68d1      	ldr	r1, [r2, #12]
 800e04c:	61d9      	str	r1, [r3, #28]
 800e04e:	6911      	ldr	r1, [r2, #16]
 800e050:	6219      	str	r1, [r3, #32]
 800e052:	6951      	ldr	r1, [r2, #20]
 800e054:	6892      	ldr	r2, [r2, #8]
 800e056:	619a      	str	r2, [r3, #24]
 800e058:	6259      	str	r1, [r3, #36]	@ 0x24
 800e05a:	f004 ffc3 	bl	8012fe4 <uxr_nanos>
 800e05e:	f00b febb 	bl	8019dd8 <srand>
 800e062:	f00b fee7 	bl	8019e34 <rand>
 800e066:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e068:	6298      	str	r0, [r3, #40]	@ 0x28
 800e06a:	2800      	cmp	r0, #0
 800e06c:	d0f9      	beq.n	800e062 <rmw_init_options_init+0x9e>
 800e06e:	2000      	movs	r0, #0
 800e070:	b003      	add	sp, #12
 800e072:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e076:	b004      	add	sp, #16
 800e078:	4770      	bx	lr
 800e07a:	2001      	movs	r0, #1
 800e07c:	e7b1      	b.n	800dfe2 <rmw_init_options_init+0x1e>
 800e07e:	bf00      	nop
 800e080:	0801e200 	.word	0x0801e200
 800e084:	2000bcec 	.word	0x2000bcec
 800e088:	200073f8 	.word	0x200073f8
 800e08c:	20006f74 	.word	0x20006f74
 800e090:	0801d6ac 	.word	0x0801d6ac

0800e094 <rmw_init_options_copy>:
 800e094:	b570      	push	{r4, r5, r6, lr}
 800e096:	b158      	cbz	r0, 800e0b0 <rmw_init_options_copy+0x1c>
 800e098:	460d      	mov	r5, r1
 800e09a:	b149      	cbz	r1, 800e0b0 <rmw_init_options_copy+0x1c>
 800e09c:	4604      	mov	r4, r0
 800e09e:	6880      	ldr	r0, [r0, #8]
 800e0a0:	b120      	cbz	r0, 800e0ac <rmw_init_options_copy+0x18>
 800e0a2:	4b1e      	ldr	r3, [pc, #120]	@ (800e11c <rmw_init_options_copy+0x88>)
 800e0a4:	6819      	ldr	r1, [r3, #0]
 800e0a6:	f7f2 f8bb 	bl	8000220 <strcmp>
 800e0aa:	bb90      	cbnz	r0, 800e112 <rmw_init_options_copy+0x7e>
 800e0ac:	68ab      	ldr	r3, [r5, #8]
 800e0ae:	b113      	cbz	r3, 800e0b6 <rmw_init_options_copy+0x22>
 800e0b0:	250b      	movs	r5, #11
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	bd70      	pop	{r4, r5, r6, pc}
 800e0b6:	4623      	mov	r3, r4
 800e0b8:	462a      	mov	r2, r5
 800e0ba:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800e0be:	f8d3 c000 	ldr.w	ip, [r3]
 800e0c2:	6858      	ldr	r0, [r3, #4]
 800e0c4:	6899      	ldr	r1, [r3, #8]
 800e0c6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e0ca:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e0ce:	3310      	adds	r3, #16
 800e0d0:	42b3      	cmp	r3, r6
 800e0d2:	f8c2 c000 	str.w	ip, [r2]
 800e0d6:	6050      	str	r0, [r2, #4]
 800e0d8:	6091      	str	r1, [r2, #8]
 800e0da:	f102 0210 	add.w	r2, r2, #16
 800e0de:	d1ee      	bne.n	800e0be <rmw_init_options_copy+0x2a>
 800e0e0:	6819      	ldr	r1, [r3, #0]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	480e      	ldr	r0, [pc, #56]	@ (800e120 <rmw_init_options_copy+0x8c>)
 800e0e6:	6053      	str	r3, [r2, #4]
 800e0e8:	6011      	str	r1, [r2, #0]
 800e0ea:	f009 fd7d 	bl	8017be8 <get_memory>
 800e0ee:	b198      	cbz	r0, 800e118 <rmw_init_options_copy+0x84>
 800e0f0:	6883      	ldr	r3, [r0, #8]
 800e0f2:	636b      	str	r3, [r5, #52]	@ 0x34
 800e0f4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e0f6:	f102 0c10 	add.w	ip, r2, #16
 800e0fa:	f103 0410 	add.w	r4, r3, #16
 800e0fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e104:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e108:	2500      	movs	r5, #0
 800e10a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e10e:	4628      	mov	r0, r5
 800e110:	bd70      	pop	{r4, r5, r6, pc}
 800e112:	250c      	movs	r5, #12
 800e114:	4628      	mov	r0, r5
 800e116:	bd70      	pop	{r4, r5, r6, pc}
 800e118:	2501      	movs	r5, #1
 800e11a:	e7ca      	b.n	800e0b2 <rmw_init_options_copy+0x1e>
 800e11c:	0801e200 	.word	0x0801e200
 800e120:	2000bcec 	.word	0x2000bcec

0800e124 <rmw_init_options_fini>:
 800e124:	2800      	cmp	r0, #0
 800e126:	d03d      	beq.n	800e1a4 <rmw_init_options_fini+0x80>
 800e128:	b510      	push	{r4, lr}
 800e12a:	4604      	mov	r4, r0
 800e12c:	b08e      	sub	sp, #56	@ 0x38
 800e12e:	3020      	adds	r0, #32
 800e130:	f7ff fe88 	bl	800de44 <rcutils_allocator_is_valid>
 800e134:	b360      	cbz	r0, 800e190 <rmw_init_options_fini+0x6c>
 800e136:	68a0      	ldr	r0, [r4, #8]
 800e138:	b120      	cbz	r0, 800e144 <rmw_init_options_fini+0x20>
 800e13a:	4b1c      	ldr	r3, [pc, #112]	@ (800e1ac <rmw_init_options_fini+0x88>)
 800e13c:	6819      	ldr	r1, [r3, #0]
 800e13e:	f7f2 f86f 	bl	8000220 <strcmp>
 800e142:	bb68      	cbnz	r0, 800e1a0 <rmw_init_options_fini+0x7c>
 800e144:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b0 <rmw_init_options_fini+0x8c>)
 800e146:	6819      	ldr	r1, [r3, #0]
 800e148:	b331      	cbz	r1, 800e198 <rmw_init_options_fini+0x74>
 800e14a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e14c:	e001      	b.n	800e152 <rmw_init_options_fini+0x2e>
 800e14e:	6849      	ldr	r1, [r1, #4]
 800e150:	b311      	cbz	r1, 800e198 <rmw_init_options_fini+0x74>
 800e152:	688b      	ldr	r3, [r1, #8]
 800e154:	429a      	cmp	r2, r3
 800e156:	d1fa      	bne.n	800e14e <rmw_init_options_fini+0x2a>
 800e158:	4815      	ldr	r0, [pc, #84]	@ (800e1b0 <rmw_init_options_fini+0x8c>)
 800e15a:	f009 fd55 	bl	8017c08 <put_memory>
 800e15e:	4668      	mov	r0, sp
 800e160:	f7ff ff02 	bl	800df68 <rmw_get_zero_initialized_init_options>
 800e164:	46ee      	mov	lr, sp
 800e166:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e16a:	46a4      	mov	ip, r4
 800e16c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e170:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e174:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e178:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e17c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e180:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e184:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e188:	2300      	movs	r3, #0
 800e18a:	4618      	mov	r0, r3
 800e18c:	b00e      	add	sp, #56	@ 0x38
 800e18e:	bd10      	pop	{r4, pc}
 800e190:	230b      	movs	r3, #11
 800e192:	4618      	mov	r0, r3
 800e194:	b00e      	add	sp, #56	@ 0x38
 800e196:	bd10      	pop	{r4, pc}
 800e198:	2301      	movs	r3, #1
 800e19a:	4618      	mov	r0, r3
 800e19c:	b00e      	add	sp, #56	@ 0x38
 800e19e:	bd10      	pop	{r4, pc}
 800e1a0:	230c      	movs	r3, #12
 800e1a2:	e7f2      	b.n	800e18a <rmw_init_options_fini+0x66>
 800e1a4:	230b      	movs	r3, #11
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	0801e200 	.word	0x0801e200
 800e1b0:	2000bcec 	.word	0x2000bcec

0800e1b4 <rmw_init>:
 800e1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1b8:	b083      	sub	sp, #12
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f000 80d3 	beq.w	800e366 <rmw_init+0x1b2>
 800e1c0:	460e      	mov	r6, r1
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	f000 80cf 	beq.w	800e366 <rmw_init+0x1b2>
 800e1c8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e1ca:	4605      	mov	r5, r0
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f000 80ca 	beq.w	800e366 <rmw_init+0x1b2>
 800e1d2:	4b78      	ldr	r3, [pc, #480]	@ (800e3b4 <rmw_init+0x200>)
 800e1d4:	6880      	ldr	r0, [r0, #8]
 800e1d6:	681f      	ldr	r7, [r3, #0]
 800e1d8:	b128      	cbz	r0, 800e1e6 <rmw_init+0x32>
 800e1da:	4639      	mov	r1, r7
 800e1dc:	f7f2 f820 	bl	8000220 <strcmp>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	f040 80ca 	bne.w	800e37a <rmw_init+0x1c6>
 800e1e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1ea:	4c73      	ldr	r4, [pc, #460]	@ (800e3b8 <rmw_init+0x204>)
 800e1ec:	4973      	ldr	r1, [pc, #460]	@ (800e3bc <rmw_init+0x208>)
 800e1ee:	4874      	ldr	r0, [pc, #464]	@ (800e3c0 <rmw_init+0x20c>)
 800e1f0:	60b7      	str	r7, [r6, #8]
 800e1f2:	e9c6 2300 	strd	r2, r3, [r6]
 800e1f6:	68eb      	ldr	r3, [r5, #12]
 800e1f8:	64b3      	str	r3, [r6, #72]	@ 0x48
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f000 fe76 	bl	800eeec <rmw_uxrce_init_session_memory>
 800e200:	4620      	mov	r0, r4
 800e202:	4970      	ldr	r1, [pc, #448]	@ (800e3c4 <rmw_init+0x210>)
 800e204:	2204      	movs	r2, #4
 800e206:	f000 feb1 	bl	800ef6c <rmw_uxrce_init_static_input_buffer_memory>
 800e20a:	f04f 0800 	mov.w	r8, #0
 800e20e:	486c      	ldr	r0, [pc, #432]	@ (800e3c0 <rmw_init+0x20c>)
 800e210:	f884 800d 	strb.w	r8, [r4, #13]
 800e214:	f009 fce8 	bl	8017be8 <get_memory>
 800e218:	2800      	cmp	r0, #0
 800e21a:	f000 80a9 	beq.w	800e370 <rmw_init+0x1bc>
 800e21e:	6884      	ldr	r4, [r0, #8]
 800e220:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800e222:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800e224:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e228:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e22c:	9101      	str	r1, [sp, #4]
 800e22e:	6a00      	ldr	r0, [r0, #32]
 800e230:	9000      	str	r0, [sp, #0]
 800e232:	f104 0910 	add.w	r9, r4, #16
 800e236:	4661      	mov	r1, ip
 800e238:	4648      	mov	r0, r9
 800e23a:	f002 fe09 	bl	8010e50 <uxr_set_custom_transport_callbacks>
 800e23e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e246:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800e24a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800e24e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800e252:	495d      	ldr	r1, [pc, #372]	@ (800e3c8 <rmw_init+0x214>)
 800e254:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800e258:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800e25c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e260:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e264:	4859      	ldr	r0, [pc, #356]	@ (800e3cc <rmw_init+0x218>)
 800e266:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e26a:	2201      	movs	r2, #1
 800e26c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800e26e:	f000 fe1d 	bl	800eeac <rmw_uxrce_init_node_memory>
 800e272:	4957      	ldr	r1, [pc, #348]	@ (800e3d0 <rmw_init+0x21c>)
 800e274:	4857      	ldr	r0, [pc, #348]	@ (800e3d4 <rmw_init+0x220>)
 800e276:	2205      	movs	r2, #5
 800e278:	f000 fdf8 	bl	800ee6c <rmw_uxrce_init_subscription_memory>
 800e27c:	4956      	ldr	r1, [pc, #344]	@ (800e3d8 <rmw_init+0x224>)
 800e27e:	4857      	ldr	r0, [pc, #348]	@ (800e3dc <rmw_init+0x228>)
 800e280:	220a      	movs	r2, #10
 800e282:	f000 fdd3 	bl	800ee2c <rmw_uxrce_init_publisher_memory>
 800e286:	4956      	ldr	r1, [pc, #344]	@ (800e3e0 <rmw_init+0x22c>)
 800e288:	4856      	ldr	r0, [pc, #344]	@ (800e3e4 <rmw_init+0x230>)
 800e28a:	2203      	movs	r2, #3
 800e28c:	f000 fd8e 	bl	800edac <rmw_uxrce_init_service_memory>
 800e290:	4955      	ldr	r1, [pc, #340]	@ (800e3e8 <rmw_init+0x234>)
 800e292:	4856      	ldr	r0, [pc, #344]	@ (800e3ec <rmw_init+0x238>)
 800e294:	2203      	movs	r2, #3
 800e296:	f000 fda9 	bl	800edec <rmw_uxrce_init_client_memory>
 800e29a:	4955      	ldr	r1, [pc, #340]	@ (800e3f0 <rmw_init+0x23c>)
 800e29c:	4855      	ldr	r0, [pc, #340]	@ (800e3f4 <rmw_init+0x240>)
 800e29e:	220f      	movs	r2, #15
 800e2a0:	f000 fe44 	bl	800ef2c <rmw_uxrce_init_topic_memory>
 800e2a4:	4954      	ldr	r1, [pc, #336]	@ (800e3f8 <rmw_init+0x244>)
 800e2a6:	4855      	ldr	r0, [pc, #340]	@ (800e3fc <rmw_init+0x248>)
 800e2a8:	2203      	movs	r2, #3
 800e2aa:	f000 fe7f 	bl	800efac <rmw_uxrce_init_init_options_impl_memory>
 800e2ae:	4954      	ldr	r1, [pc, #336]	@ (800e400 <rmw_init+0x24c>)
 800e2b0:	4854      	ldr	r0, [pc, #336]	@ (800e404 <rmw_init+0x250>)
 800e2b2:	2204      	movs	r2, #4
 800e2b4:	f000 fe9a 	bl	800efec <rmw_uxrce_init_wait_set_memory>
 800e2b8:	4953      	ldr	r1, [pc, #332]	@ (800e408 <rmw_init+0x254>)
 800e2ba:	4854      	ldr	r0, [pc, #336]	@ (800e40c <rmw_init+0x258>)
 800e2bc:	2204      	movs	r2, #4
 800e2be:	f000 feb5 	bl	800f02c <rmw_uxrce_init_guard_condition_memory>
 800e2c2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e2c4:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800e2c6:	4642      	mov	r2, r8
 800e2c8:	f000 fd2a 	bl	800ed20 <rmw_uxrce_transport_init>
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d158      	bne.n	800e384 <rmw_init+0x1d0>
 800e2d2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e2d4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e2d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e2da:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e2de:	4628      	mov	r0, r5
 800e2e0:	f002 ffea 	bl	80112b8 <uxr_init_session>
 800e2e4:	494a      	ldr	r1, [pc, #296]	@ (800e410 <rmw_init+0x25c>)
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	f003 f809 	bl	8011300 <uxr_set_topic_callback>
 800e2ee:	4949      	ldr	r1, [pc, #292]	@ (800e414 <rmw_init+0x260>)
 800e2f0:	463a      	mov	r2, r7
 800e2f2:	4628      	mov	r0, r5
 800e2f4:	f003 f800 	bl	80112f8 <uxr_set_status_callback>
 800e2f8:	4947      	ldr	r1, [pc, #284]	@ (800e418 <rmw_init+0x264>)
 800e2fa:	463a      	mov	r2, r7
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f003 f803 	bl	8011308 <uxr_set_request_callback>
 800e302:	4946      	ldr	r1, [pc, #280]	@ (800e41c <rmw_init+0x268>)
 800e304:	463a      	mov	r2, r7
 800e306:	4628      	mov	r0, r5
 800e308:	f003 f802 	bl	8011310 <uxr_set_reply_callback>
 800e30c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e310:	2304      	movs	r3, #4
 800e312:	0092      	lsls	r2, r2, #2
 800e314:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e318:	4628      	mov	r0, r5
 800e31a:	f003 f837 	bl	801138c <uxr_create_input_reliable_stream>
 800e31e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e322:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e326:	0092      	lsls	r2, r2, #2
 800e328:	2304      	movs	r3, #4
 800e32a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e32e:	4628      	mov	r0, r5
 800e330:	f003 f804 	bl	801133c <uxr_create_output_reliable_stream>
 800e334:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e338:	4628      	mov	r0, r5
 800e33a:	f003 f821 	bl	8011380 <uxr_create_input_best_effort_stream>
 800e33e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e342:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e346:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e34a:	3114      	adds	r1, #20
 800e34c:	4628      	mov	r0, r5
 800e34e:	f002 ffe3 	bl	8011318 <uxr_create_output_best_effort_stream>
 800e352:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e356:	4628      	mov	r0, r5
 800e358:	f003 fdd6 	bl	8011f08 <uxr_create_session>
 800e35c:	b1f8      	cbz	r0, 800e39e <rmw_init+0x1ea>
 800e35e:	4638      	mov	r0, r7
 800e360:	b003      	add	sp, #12
 800e362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e366:	270b      	movs	r7, #11
 800e368:	4638      	mov	r0, r7
 800e36a:	b003      	add	sp, #12
 800e36c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e370:	2701      	movs	r7, #1
 800e372:	4638      	mov	r0, r7
 800e374:	b003      	add	sp, #12
 800e376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e37a:	270c      	movs	r7, #12
 800e37c:	4638      	mov	r0, r7
 800e37e:	b003      	add	sp, #12
 800e380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e384:	4648      	mov	r0, r9
 800e386:	f002 fda5 	bl	8010ed4 <uxr_close_custom_transport>
 800e38a:	480d      	ldr	r0, [pc, #52]	@ (800e3c0 <rmw_init+0x20c>)
 800e38c:	4621      	mov	r1, r4
 800e38e:	f009 fc3b 	bl	8017c08 <put_memory>
 800e392:	4638      	mov	r0, r7
 800e394:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800e398:	b003      	add	sp, #12
 800e39a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e39e:	4648      	mov	r0, r9
 800e3a0:	f002 fd98 	bl	8010ed4 <uxr_close_custom_transport>
 800e3a4:	4806      	ldr	r0, [pc, #24]	@ (800e3c0 <rmw_init+0x20c>)
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	f009 fc2e 	bl	8017c08 <put_memory>
 800e3ac:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800e3ae:	2701      	movs	r7, #1
 800e3b0:	e7d5      	b.n	800e35e <rmw_init+0x1aa>
 800e3b2:	bf00      	nop
 800e3b4:	0801e200 	.word	0x0801e200
 800e3b8:	2000bd3c 	.word	0x2000bd3c
 800e3bc:	20007fe8 	.word	0x20007fe8
 800e3c0:	2000bd2c 	.word	0x2000bd2c
 800e3c4:	20009590 	.word	0x20009590
 800e3c8:	2000747c 	.word	0x2000747c
 800e3cc:	2000bcfc 	.word	0x2000bcfc
 800e3d0:	2000b690 	.word	0x2000b690
 800e3d4:	2000bd4c 	.word	0x2000bd4c
 800e3d8:	20007520 	.word	0x20007520
 800e3dc:	2000bd0c 	.word	0x2000bd0c
 800e3e0:	20007d90 	.word	0x20007d90
 800e3e4:	2000bd1c 	.word	0x2000bd1c
 800e3e8:	20007120 	.word	0x20007120
 800e3ec:	2000710c 	.word	0x2000710c
 800e3f0:	2000bac8 	.word	0x2000bac8
 800e3f4:	2000bd5c 	.word	0x2000bd5c
 800e3f8:	200073f8 	.word	0x200073f8
 800e3fc:	2000bcec 	.word	0x2000bcec
 800e400:	2000bc6c 	.word	0x2000bc6c
 800e404:	2000bd6c 	.word	0x2000bd6c
 800e408:	20007378 	.word	0x20007378
 800e40c:	2000bcdc 	.word	0x2000bcdc
 800e410:	08017a21 	.word	0x08017a21
 800e414:	08017a19 	.word	0x08017a19
 800e418:	08017ab9 	.word	0x08017ab9
 800e41c:	08017b55 	.word	0x08017b55

0800e420 <rmw_context_fini>:
 800e420:	4b17      	ldr	r3, [pc, #92]	@ (800e480 <rmw_context_fini+0x60>)
 800e422:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	681c      	ldr	r4, [r3, #0]
 800e428:	4605      	mov	r5, r0
 800e42a:	b334      	cbz	r4, 800e47a <rmw_context_fini+0x5a>
 800e42c:	2600      	movs	r6, #0
 800e42e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e432:	6902      	ldr	r2, [r0, #16]
 800e434:	428a      	cmp	r2, r1
 800e436:	d018      	beq.n	800e46a <rmw_context_fini+0x4a>
 800e438:	2c00      	cmp	r4, #0
 800e43a:	d1f8      	bne.n	800e42e <rmw_context_fini+0xe>
 800e43c:	b189      	cbz	r1, 800e462 <rmw_context_fini+0x42>
 800e43e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800e442:	789b      	ldrb	r3, [r3, #2]
 800e444:	2b01      	cmp	r3, #1
 800e446:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800e44a:	bf14      	ite	ne
 800e44c:	210a      	movne	r1, #10
 800e44e:	2100      	moveq	r1, #0
 800e450:	f003 fd32 	bl	8011eb8 <uxr_delete_session_retries>
 800e454:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e456:	f000 fe09 	bl	800f06c <rmw_uxrce_fini_session_memory>
 800e45a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e45c:	3010      	adds	r0, #16
 800e45e:	f002 fd39 	bl	8010ed4 <uxr_close_custom_transport>
 800e462:	2300      	movs	r3, #0
 800e464:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800e466:	4630      	mov	r0, r6
 800e468:	bd70      	pop	{r4, r5, r6, pc}
 800e46a:	3018      	adds	r0, #24
 800e46c:	f000 f89c 	bl	800e5a8 <rmw_destroy_node>
 800e470:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e472:	4606      	mov	r6, r0
 800e474:	2c00      	cmp	r4, #0
 800e476:	d1da      	bne.n	800e42e <rmw_context_fini+0xe>
 800e478:	e7e0      	b.n	800e43c <rmw_context_fini+0x1c>
 800e47a:	4626      	mov	r6, r4
 800e47c:	e7de      	b.n	800e43c <rmw_context_fini+0x1c>
 800e47e:	bf00      	nop
 800e480:	2000bcfc 	.word	0x2000bcfc

0800e484 <create_node>:
 800e484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e488:	b083      	sub	sp, #12
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d05f      	beq.n	800e54e <create_node+0xca>
 800e48e:	4606      	mov	r6, r0
 800e490:	4835      	ldr	r0, [pc, #212]	@ (800e568 <create_node+0xe4>)
 800e492:	460f      	mov	r7, r1
 800e494:	4690      	mov	r8, r2
 800e496:	461d      	mov	r5, r3
 800e498:	f009 fba6 	bl	8017be8 <get_memory>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d056      	beq.n	800e54e <create_node+0xca>
 800e4a0:	6884      	ldr	r4, [r0, #8]
 800e4a2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e4a4:	6123      	str	r3, [r4, #16]
 800e4a6:	f009 fc07 	bl	8017cb8 <rmw_get_implementation_identifier>
 800e4aa:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e4ae:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e4b2:	f8c4 9020 	str.w	r9, [r4, #32]
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7f1 febc 	bl	8000234 <strlen>
 800e4bc:	1c42      	adds	r2, r0, #1
 800e4be:	2a3c      	cmp	r2, #60	@ 0x3c
 800e4c0:	f104 0518 	add.w	r5, r4, #24
 800e4c4:	d840      	bhi.n	800e548 <create_node+0xc4>
 800e4c6:	4648      	mov	r0, r9
 800e4c8:	4631      	mov	r1, r6
 800e4ca:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e4ce:	f00c f960 	bl	801a792 <memcpy>
 800e4d2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e4d6:	4638      	mov	r0, r7
 800e4d8:	f7f1 feac 	bl	8000234 <strlen>
 800e4dc:	1c42      	adds	r2, r0, #1
 800e4de:	2a3c      	cmp	r2, #60	@ 0x3c
 800e4e0:	d832      	bhi.n	800e548 <create_node+0xc4>
 800e4e2:	4639      	mov	r1, r7
 800e4e4:	4648      	mov	r0, r9
 800e4e6:	f00c f954 	bl	801a792 <memcpy>
 800e4ea:	6923      	ldr	r3, [r4, #16]
 800e4ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e4f0:	2101      	movs	r1, #1
 800e4f2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e4f6:	1842      	adds	r2, r0, r1
 800e4f8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e4fc:	f002 fcee 	bl	8010edc <uxr_object_id>
 800e500:	6160      	str	r0, [r4, #20]
 800e502:	783b      	ldrb	r3, [r7, #0]
 800e504:	2b2f      	cmp	r3, #47	@ 0x2f
 800e506:	d127      	bne.n	800e558 <create_node+0xd4>
 800e508:	787b      	ldrb	r3, [r7, #1]
 800e50a:	bb2b      	cbnz	r3, 800e558 <create_node+0xd4>
 800e50c:	4a17      	ldr	r2, [pc, #92]	@ (800e56c <create_node+0xe8>)
 800e50e:	4818      	ldr	r0, [pc, #96]	@ (800e570 <create_node+0xec>)
 800e510:	4633      	mov	r3, r6
 800e512:	213c      	movs	r1, #60	@ 0x3c
 800e514:	f00b ff06 	bl	801a324 <sniprintf>
 800e518:	6920      	ldr	r0, [r4, #16]
 800e51a:	4915      	ldr	r1, [pc, #84]	@ (800e570 <create_node+0xec>)
 800e51c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e520:	9100      	str	r1, [sp, #0]
 800e522:	2106      	movs	r1, #6
 800e524:	9101      	str	r1, [sp, #4]
 800e526:	6811      	ldr	r1, [r2, #0]
 800e528:	6962      	ldr	r2, [r4, #20]
 800e52a:	fa1f f388 	uxth.w	r3, r8
 800e52e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e532:	f002 fac9 	bl	8010ac8 <uxr_buffer_create_participant_bin>
 800e536:	4602      	mov	r2, r0
 800e538:	6920      	ldr	r0, [r4, #16]
 800e53a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e53e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e542:	f000 ff0b 	bl	800f35c <run_xrce_session>
 800e546:	b918      	cbnz	r0, 800e550 <create_node+0xcc>
 800e548:	4628      	mov	r0, r5
 800e54a:	f000 fd95 	bl	800f078 <rmw_uxrce_fini_node_memory>
 800e54e:	2500      	movs	r5, #0
 800e550:	4628      	mov	r0, r5
 800e552:	b003      	add	sp, #12
 800e554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e558:	4a06      	ldr	r2, [pc, #24]	@ (800e574 <create_node+0xf0>)
 800e55a:	9600      	str	r6, [sp, #0]
 800e55c:	463b      	mov	r3, r7
 800e55e:	213c      	movs	r1, #60	@ 0x3c
 800e560:	4803      	ldr	r0, [pc, #12]	@ (800e570 <create_node+0xec>)
 800e562:	f00b fedf 	bl	801a324 <sniprintf>
 800e566:	e7d7      	b.n	800e518 <create_node+0x94>
 800e568:	2000bcfc 	.word	0x2000bcfc
 800e56c:	0801d6c8 	.word	0x0801d6c8
 800e570:	20006f90 	.word	0x20006f90
 800e574:	0801d6b0 	.word	0x0801d6b0

0800e578 <rmw_create_node>:
 800e578:	b199      	cbz	r1, 800e5a2 <rmw_create_node+0x2a>
 800e57a:	780b      	ldrb	r3, [r1, #0]
 800e57c:	468c      	mov	ip, r1
 800e57e:	b183      	cbz	r3, 800e5a2 <rmw_create_node+0x2a>
 800e580:	b410      	push	{r4}
 800e582:	4614      	mov	r4, r2
 800e584:	b14a      	cbz	r2, 800e59a <rmw_create_node+0x22>
 800e586:	7813      	ldrb	r3, [r2, #0]
 800e588:	b13b      	cbz	r3, 800e59a <rmw_create_node+0x22>
 800e58a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e58c:	4603      	mov	r3, r0
 800e58e:	4621      	mov	r1, r4
 800e590:	4660      	mov	r0, ip
 800e592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e596:	f7ff bf75 	b.w	800e484 <create_node>
 800e59a:	2000      	movs	r0, #0
 800e59c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop

0800e5a8 <rmw_destroy_node>:
 800e5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5aa:	b328      	cbz	r0, 800e5f8 <rmw_destroy_node+0x50>
 800e5ac:	4607      	mov	r7, r0
 800e5ae:	6800      	ldr	r0, [r0, #0]
 800e5b0:	b120      	cbz	r0, 800e5bc <rmw_destroy_node+0x14>
 800e5b2:	4b36      	ldr	r3, [pc, #216]	@ (800e68c <rmw_destroy_node+0xe4>)
 800e5b4:	6819      	ldr	r1, [r3, #0]
 800e5b6:	f7f1 fe33 	bl	8000220 <strcmp>
 800e5ba:	b9e8      	cbnz	r0, 800e5f8 <rmw_destroy_node+0x50>
 800e5bc:	687d      	ldr	r5, [r7, #4]
 800e5be:	b1dd      	cbz	r5, 800e5f8 <rmw_destroy_node+0x50>
 800e5c0:	4b33      	ldr	r3, [pc, #204]	@ (800e690 <rmw_destroy_node+0xe8>)
 800e5c2:	681c      	ldr	r4, [r3, #0]
 800e5c4:	2c00      	cmp	r4, #0
 800e5c6:	d05f      	beq.n	800e688 <rmw_destroy_node+0xe0>
 800e5c8:	2600      	movs	r6, #0
 800e5ca:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e5ce:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e5d2:	429d      	cmp	r5, r3
 800e5d4:	d013      	beq.n	800e5fe <rmw_destroy_node+0x56>
 800e5d6:	2c00      	cmp	r4, #0
 800e5d8:	d1f7      	bne.n	800e5ca <rmw_destroy_node+0x22>
 800e5da:	4b2e      	ldr	r3, [pc, #184]	@ (800e694 <rmw_destroy_node+0xec>)
 800e5dc:	681c      	ldr	r4, [r3, #0]
 800e5de:	b1c4      	cbz	r4, 800e612 <rmw_destroy_node+0x6a>
 800e5e0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e5e4:	6a0b      	ldr	r3, [r1, #32]
 800e5e6:	429d      	cmp	r5, r3
 800e5e8:	d1f9      	bne.n	800e5de <rmw_destroy_node+0x36>
 800e5ea:	317c      	adds	r1, #124	@ 0x7c
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f000 fb37 	bl	800ec60 <rmw_destroy_subscription>
 800e5f2:	2801      	cmp	r0, #1
 800e5f4:	4606      	mov	r6, r0
 800e5f6:	d1f2      	bne.n	800e5de <rmw_destroy_node+0x36>
 800e5f8:	2601      	movs	r6, #1
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5fe:	3184      	adds	r1, #132	@ 0x84
 800e600:	4638      	mov	r0, r7
 800e602:	f000 f9a5 	bl	800e950 <rmw_destroy_publisher>
 800e606:	2801      	cmp	r0, #1
 800e608:	4606      	mov	r6, r0
 800e60a:	d0f5      	beq.n	800e5f8 <rmw_destroy_node+0x50>
 800e60c:	2c00      	cmp	r4, #0
 800e60e:	d1dc      	bne.n	800e5ca <rmw_destroy_node+0x22>
 800e610:	e7e3      	b.n	800e5da <rmw_destroy_node+0x32>
 800e612:	4b21      	ldr	r3, [pc, #132]	@ (800e698 <rmw_destroy_node+0xf0>)
 800e614:	681c      	ldr	r4, [r3, #0]
 800e616:	b16c      	cbz	r4, 800e634 <rmw_destroy_node+0x8c>
 800e618:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e61c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e61e:	429d      	cmp	r5, r3
 800e620:	d1f9      	bne.n	800e616 <rmw_destroy_node+0x6e>
 800e622:	317c      	adds	r1, #124	@ 0x7c
 800e624:	4638      	mov	r0, r7
 800e626:	f000 fab7 	bl	800eb98 <rmw_destroy_service>
 800e62a:	2801      	cmp	r0, #1
 800e62c:	4606      	mov	r6, r0
 800e62e:	d0e3      	beq.n	800e5f8 <rmw_destroy_node+0x50>
 800e630:	2c00      	cmp	r4, #0
 800e632:	d1f1      	bne.n	800e618 <rmw_destroy_node+0x70>
 800e634:	4b19      	ldr	r3, [pc, #100]	@ (800e69c <rmw_destroy_node+0xf4>)
 800e636:	681c      	ldr	r4, [r3, #0]
 800e638:	b16c      	cbz	r4, 800e656 <rmw_destroy_node+0xae>
 800e63a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e63e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e640:	429d      	cmp	r5, r3
 800e642:	d1f9      	bne.n	800e638 <rmw_destroy_node+0x90>
 800e644:	317c      	adds	r1, #124	@ 0x7c
 800e646:	4638      	mov	r0, r7
 800e648:	f009 faf2 	bl	8017c30 <rmw_destroy_client>
 800e64c:	2801      	cmp	r0, #1
 800e64e:	4606      	mov	r6, r0
 800e650:	d0d2      	beq.n	800e5f8 <rmw_destroy_node+0x50>
 800e652:	2c00      	cmp	r4, #0
 800e654:	d1f1      	bne.n	800e63a <rmw_destroy_node+0x92>
 800e656:	6928      	ldr	r0, [r5, #16]
 800e658:	696a      	ldr	r2, [r5, #20]
 800e65a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e65e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e662:	6819      	ldr	r1, [r3, #0]
 800e664:	f002 f9e4 	bl	8010a30 <uxr_buffer_delete_entity>
 800e668:	4602      	mov	r2, r0
 800e66a:	6928      	ldr	r0, [r5, #16]
 800e66c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e670:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e674:	f000 fe72 	bl	800f35c <run_xrce_session>
 800e678:	2800      	cmp	r0, #0
 800e67a:	bf08      	it	eq
 800e67c:	2602      	moveq	r6, #2
 800e67e:	4638      	mov	r0, r7
 800e680:	f000 fcfa 	bl	800f078 <rmw_uxrce_fini_node_memory>
 800e684:	4630      	mov	r0, r6
 800e686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e688:	4626      	mov	r6, r4
 800e68a:	e7a6      	b.n	800e5da <rmw_destroy_node+0x32>
 800e68c:	0801e200 	.word	0x0801e200
 800e690:	2000bd0c 	.word	0x2000bd0c
 800e694:	2000bd4c 	.word	0x2000bd4c
 800e698:	2000bd1c 	.word	0x2000bd1c
 800e69c:	2000710c 	.word	0x2000710c

0800e6a0 <rmw_node_get_graph_guard_condition>:
 800e6a0:	6843      	ldr	r3, [r0, #4]
 800e6a2:	6918      	ldr	r0, [r3, #16]
 800e6a4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop

0800e6ac <flush_session>:
 800e6ac:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e6ae:	f003 ba65 	b.w	8011b7c <uxr_run_session_until_confirm_delivery>
 800e6b2:	bf00      	nop

0800e6b4 <rmw_publish>:
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d053      	beq.n	800e760 <rmw_publish+0xac>
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	b08e      	sub	sp, #56	@ 0x38
 800e6be:	2900      	cmp	r1, #0
 800e6c0:	d04b      	beq.n	800e75a <rmw_publish+0xa6>
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	6800      	ldr	r0, [r0, #0]
 800e6c6:	f000 ff63 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800e6ca:	2800      	cmp	r0, #0
 800e6cc:	d045      	beq.n	800e75a <rmw_publish+0xa6>
 800e6ce:	6866      	ldr	r6, [r4, #4]
 800e6d0:	2e00      	cmp	r6, #0
 800e6d2:	d042      	beq.n	800e75a <rmw_publish+0xa6>
 800e6d4:	69b4      	ldr	r4, [r6, #24]
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	6923      	ldr	r3, [r4, #16]
 800e6da:	4798      	blx	r3
 800e6dc:	69f3      	ldr	r3, [r6, #28]
 800e6de:	9005      	str	r0, [sp, #20]
 800e6e0:	b113      	cbz	r3, 800e6e8 <rmw_publish+0x34>
 800e6e2:	a805      	add	r0, sp, #20
 800e6e4:	4798      	blx	r3
 800e6e6:	9805      	ldr	r0, [sp, #20]
 800e6e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	9000      	str	r0, [sp, #0]
 800e6f0:	6972      	ldr	r2, [r6, #20]
 800e6f2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e6f4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e6f8:	ab06      	add	r3, sp, #24
 800e6fa:	f004 fd13 	bl	8013124 <uxr_prepare_output_stream>
 800e6fe:	b1d8      	cbz	r0, 800e738 <rmw_publish+0x84>
 800e700:	68a3      	ldr	r3, [r4, #8]
 800e702:	a906      	add	r1, sp, #24
 800e704:	4628      	mov	r0, r5
 800e706:	4798      	blx	r3
 800e708:	6a33      	ldr	r3, [r6, #32]
 800e70a:	4604      	mov	r4, r0
 800e70c:	b10b      	cbz	r3, 800e712 <rmw_publish+0x5e>
 800e70e:	a806      	add	r0, sp, #24
 800e710:	4798      	blx	r3
 800e712:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e716:	2b01      	cmp	r3, #1
 800e718:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e71c:	d022      	beq.n	800e764 <rmw_publish+0xb0>
 800e71e:	6918      	ldr	r0, [r3, #16]
 800e720:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e722:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e726:	f003 fa29 	bl	8011b7c <uxr_run_session_until_confirm_delivery>
 800e72a:	4020      	ands	r0, r4
 800e72c:	b2c4      	uxtb	r4, r0
 800e72e:	f084 0001 	eor.w	r0, r4, #1
 800e732:	b2c0      	uxtb	r0, r0
 800e734:	b00e      	add	sp, #56	@ 0x38
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e73c:	6918      	ldr	r0, [r3, #16]
 800e73e:	9b05      	ldr	r3, [sp, #20]
 800e740:	9300      	str	r3, [sp, #0]
 800e742:	4b0b      	ldr	r3, [pc, #44]	@ (800e770 <rmw_publish+0xbc>)
 800e744:	9301      	str	r3, [sp, #4]
 800e746:	9602      	str	r6, [sp, #8]
 800e748:	6972      	ldr	r2, [r6, #20]
 800e74a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e74c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e750:	ab06      	add	r3, sp, #24
 800e752:	f004 fd17 	bl	8013184 <uxr_prepare_output_stream_fragmented>
 800e756:	2800      	cmp	r0, #0
 800e758:	d1d2      	bne.n	800e700 <rmw_publish+0x4c>
 800e75a:	2001      	movs	r0, #1
 800e75c:	b00e      	add	sp, #56	@ 0x38
 800e75e:	bd70      	pop	{r4, r5, r6, pc}
 800e760:	2001      	movs	r0, #1
 800e762:	4770      	bx	lr
 800e764:	6918      	ldr	r0, [r3, #16]
 800e766:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e76a:	f002 fe47 	bl	80113fc <uxr_flash_output_streams>
 800e76e:	e7de      	b.n	800e72e <rmw_publish+0x7a>
 800e770:	0800e6ad 	.word	0x0800e6ad

0800e774 <rmw_create_publisher>:
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	b087      	sub	sp, #28
 800e77a:	2800      	cmp	r0, #0
 800e77c:	f000 80cc 	beq.w	800e918 <rmw_create_publisher+0x1a4>
 800e780:	460e      	mov	r6, r1
 800e782:	2900      	cmp	r1, #0
 800e784:	f000 80c8 	beq.w	800e918 <rmw_create_publisher+0x1a4>
 800e788:	4604      	mov	r4, r0
 800e78a:	6800      	ldr	r0, [r0, #0]
 800e78c:	4615      	mov	r5, r2
 800e78e:	4698      	mov	r8, r3
 800e790:	f000 fefe 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800e794:	2800      	cmp	r0, #0
 800e796:	f000 80bf 	beq.w	800e918 <rmw_create_publisher+0x1a4>
 800e79a:	2d00      	cmp	r5, #0
 800e79c:	f000 80bc 	beq.w	800e918 <rmw_create_publisher+0x1a4>
 800e7a0:	782b      	ldrb	r3, [r5, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f000 80b8 	beq.w	800e918 <rmw_create_publisher+0x1a4>
 800e7a8:	f1b8 0f00 	cmp.w	r8, #0
 800e7ac:	f000 80b4 	beq.w	800e918 <rmw_create_publisher+0x1a4>
 800e7b0:	485c      	ldr	r0, [pc, #368]	@ (800e924 <rmw_create_publisher+0x1b0>)
 800e7b2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e7b6:	f009 fa17 	bl	8017be8 <get_memory>
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	f000 80ac 	beq.w	800e918 <rmw_create_publisher+0x1a4>
 800e7c0:	6884      	ldr	r4, [r0, #8]
 800e7c2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e7c6:	f009 fa77 	bl	8017cb8 <rmw_get_implementation_identifier>
 800e7ca:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e7ce:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e7d2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	f7f1 fd2c 	bl	8000234 <strlen>
 800e7dc:	3001      	adds	r0, #1
 800e7de:	283c      	cmp	r0, #60	@ 0x3c
 800e7e0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e7e4:	f200 8091 	bhi.w	800e90a <rmw_create_publisher+0x196>
 800e7e8:	4a4f      	ldr	r2, [pc, #316]	@ (800e928 <rmw_create_publisher+0x1b4>)
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	213c      	movs	r1, #60	@ 0x3c
 800e7ee:	4650      	mov	r0, sl
 800e7f0:	f00b fd98 	bl	801a324 <sniprintf>
 800e7f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e7f8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e7fa:	4641      	mov	r1, r8
 800e7fc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e800:	2250      	movs	r2, #80	@ 0x50
 800e802:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e806:	f00b ffc4 	bl	801a792 <memcpy>
 800e80a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e80e:	4947      	ldr	r1, [pc, #284]	@ (800e92c <rmw_create_publisher+0x1b8>)
 800e810:	2b02      	cmp	r3, #2
 800e812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e816:	bf0c      	ite	eq
 800e818:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e81c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e820:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e822:	2300      	movs	r3, #0
 800e824:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e828:	4630      	mov	r0, r6
 800e82a:	f000 febf 	bl	800f5ac <get_message_typesupport_handle>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d06b      	beq.n	800e90a <rmw_create_publisher+0x196>
 800e832:	6842      	ldr	r2, [r0, #4]
 800e834:	61a2      	str	r2, [r4, #24]
 800e836:	2a00      	cmp	r2, #0
 800e838:	d067      	beq.n	800e90a <rmw_create_publisher+0x196>
 800e83a:	4629      	mov	r1, r5
 800e83c:	4643      	mov	r3, r8
 800e83e:	4648      	mov	r0, r9
 800e840:	f009 fa40 	bl	8017cc4 <create_topic>
 800e844:	6260      	str	r0, [r4, #36]	@ 0x24
 800e846:	2800      	cmp	r0, #0
 800e848:	d063      	beq.n	800e912 <rmw_create_publisher+0x19e>
 800e84a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e84e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e852:	2103      	movs	r1, #3
 800e854:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e858:	1c42      	adds	r2, r0, #1
 800e85a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e85e:	f002 fb3d 	bl	8010edc <uxr_object_id>
 800e862:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e866:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e86a:	6120      	str	r0, [r4, #16]
 800e86c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e870:	6910      	ldr	r0, [r2, #16]
 800e872:	2506      	movs	r5, #6
 800e874:	9500      	str	r5, [sp, #0]
 800e876:	6819      	ldr	r1, [r3, #0]
 800e878:	6922      	ldr	r2, [r4, #16]
 800e87a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e87e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e882:	f002 f989 	bl	8010b98 <uxr_buffer_create_publisher_bin>
 800e886:	4602      	mov	r2, r0
 800e888:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e88c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e890:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e894:	f000 fd62 	bl	800f35c <run_xrce_session>
 800e898:	b3b8      	cbz	r0, 800e90a <rmw_create_publisher+0x196>
 800e89a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e89e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8a2:	2105      	movs	r1, #5
 800e8a4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e8a8:	1c42      	adds	r2, r0, #1
 800e8aa:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e8ae:	f002 fb15 	bl	8010edc <uxr_object_id>
 800e8b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e8b6:	6160      	str	r0, [r4, #20]
 800e8b8:	691e      	ldr	r6, [r3, #16]
 800e8ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8be:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e8c2:	f10d 0a10 	add.w	sl, sp, #16
 800e8c6:	4641      	mov	r1, r8
 800e8c8:	4650      	mov	r0, sl
 800e8ca:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e8ce:	f000 fd61 	bl	800f394 <convert_qos_profile>
 800e8d2:	9503      	str	r5, [sp, #12]
 800e8d4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e8d8:	9001      	str	r0, [sp, #4]
 800e8da:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e8de:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e8e8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e8ec:	f8d8 1000 	ldr.w	r1, [r8]
 800e8f0:	4630      	mov	r0, r6
 800e8f2:	f002 f981 	bl	8010bf8 <uxr_buffer_create_datawriter_bin>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e8fc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e900:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e904:	f000 fd2a 	bl	800f35c <run_xrce_session>
 800e908:	b938      	cbnz	r0, 800e91a <rmw_create_publisher+0x1a6>
 800e90a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e90c:	b108      	cbz	r0, 800e912 <rmw_create_publisher+0x19e>
 800e90e:	f000 fc23 	bl	800f158 <rmw_uxrce_fini_topic_memory>
 800e912:	4638      	mov	r0, r7
 800e914:	f000 fbc8 	bl	800f0a8 <rmw_uxrce_fini_publisher_memory>
 800e918:	2700      	movs	r7, #0
 800e91a:	4638      	mov	r0, r7
 800e91c:	b007      	add	sp, #28
 800e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e922:	bf00      	nop
 800e924:	2000bd0c 	.word	0x2000bd0c
 800e928:	0801d6c8 	.word	0x0801d6c8
 800e92c:	0801cce8 	.word	0x0801cce8

0800e930 <rmw_publisher_get_actual_qos>:
 800e930:	b150      	cbz	r0, 800e948 <rmw_publisher_get_actual_qos+0x18>
 800e932:	b508      	push	{r3, lr}
 800e934:	460b      	mov	r3, r1
 800e936:	b149      	cbz	r1, 800e94c <rmw_publisher_get_actual_qos+0x1c>
 800e938:	6841      	ldr	r1, [r0, #4]
 800e93a:	2250      	movs	r2, #80	@ 0x50
 800e93c:	3128      	adds	r1, #40	@ 0x28
 800e93e:	4618      	mov	r0, r3
 800e940:	f00b ff27 	bl	801a792 <memcpy>
 800e944:	2000      	movs	r0, #0
 800e946:	bd08      	pop	{r3, pc}
 800e948:	200b      	movs	r0, #11
 800e94a:	4770      	bx	lr
 800e94c:	200b      	movs	r0, #11
 800e94e:	bd08      	pop	{r3, pc}

0800e950 <rmw_destroy_publisher>:
 800e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e952:	b128      	cbz	r0, 800e960 <rmw_destroy_publisher+0x10>
 800e954:	4604      	mov	r4, r0
 800e956:	6800      	ldr	r0, [r0, #0]
 800e958:	460d      	mov	r5, r1
 800e95a:	f000 fe19 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800e95e:	b910      	cbnz	r0, 800e966 <rmw_destroy_publisher+0x16>
 800e960:	2401      	movs	r4, #1
 800e962:	4620      	mov	r0, r4
 800e964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e966:	6863      	ldr	r3, [r4, #4]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d0f9      	beq.n	800e960 <rmw_destroy_publisher+0x10>
 800e96c:	2d00      	cmp	r5, #0
 800e96e:	d0f7      	beq.n	800e960 <rmw_destroy_publisher+0x10>
 800e970:	6828      	ldr	r0, [r5, #0]
 800e972:	f000 fe0d 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800e976:	2800      	cmp	r0, #0
 800e978:	d0f2      	beq.n	800e960 <rmw_destroy_publisher+0x10>
 800e97a:	686c      	ldr	r4, [r5, #4]
 800e97c:	2c00      	cmp	r4, #0
 800e97e:	d0ef      	beq.n	800e960 <rmw_destroy_publisher+0x10>
 800e980:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e982:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e986:	f009 f9ed 	bl	8017d64 <destroy_topic>
 800e98a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e98e:	6962      	ldr	r2, [r4, #20]
 800e990:	6918      	ldr	r0, [r3, #16]
 800e992:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e996:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e99a:	6819      	ldr	r1, [r3, #0]
 800e99c:	f002 f848 	bl	8010a30 <uxr_buffer_delete_entity>
 800e9a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e9a4:	6922      	ldr	r2, [r4, #16]
 800e9a6:	691b      	ldr	r3, [r3, #16]
 800e9a8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	6809      	ldr	r1, [r1, #0]
 800e9b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e9b4:	f002 f83c 	bl	8010a30 <uxr_buffer_delete_entity>
 800e9b8:	693e      	ldr	r6, [r7, #16]
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e9c0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f000 fcc8 	bl	800f35c <run_xrce_session>
 800e9cc:	693e      	ldr	r6, [r7, #16]
 800e9ce:	4622      	mov	r2, r4
 800e9d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800e9d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800e9d8:	4604      	mov	r4, r0
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f000 fcbe 	bl	800f35c <run_xrce_session>
 800e9e0:	b12c      	cbz	r4, 800e9ee <rmw_destroy_publisher+0x9e>
 800e9e2:	b120      	cbz	r0, 800e9ee <rmw_destroy_publisher+0x9e>
 800e9e4:	2400      	movs	r4, #0
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f000 fb5e 	bl	800f0a8 <rmw_uxrce_fini_publisher_memory>
 800e9ec:	e7b9      	b.n	800e962 <rmw_destroy_publisher+0x12>
 800e9ee:	2402      	movs	r4, #2
 800e9f0:	e7f9      	b.n	800e9e6 <rmw_destroy_publisher+0x96>
 800e9f2:	bf00      	nop

0800e9f4 <rmw_create_service>:
 800e9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f8:	b091      	sub	sp, #68	@ 0x44
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f000 80ba 	beq.w	800eb74 <rmw_create_service+0x180>
 800ea00:	4689      	mov	r9, r1
 800ea02:	2900      	cmp	r1, #0
 800ea04:	f000 80b6 	beq.w	800eb74 <rmw_create_service+0x180>
 800ea08:	4606      	mov	r6, r0
 800ea0a:	6800      	ldr	r0, [r0, #0]
 800ea0c:	4614      	mov	r4, r2
 800ea0e:	461d      	mov	r5, r3
 800ea10:	f000 fdbe 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	f000 80ad 	beq.w	800eb74 <rmw_create_service+0x180>
 800ea1a:	2c00      	cmp	r4, #0
 800ea1c:	f000 80aa 	beq.w	800eb74 <rmw_create_service+0x180>
 800ea20:	7823      	ldrb	r3, [r4, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f000 80a6 	beq.w	800eb74 <rmw_create_service+0x180>
 800ea28:	2d00      	cmp	r5, #0
 800ea2a:	f000 80a3 	beq.w	800eb74 <rmw_create_service+0x180>
 800ea2e:	4854      	ldr	r0, [pc, #336]	@ (800eb80 <rmw_create_service+0x18c>)
 800ea30:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800ea34:	f009 f8d8 	bl	8017be8 <get_memory>
 800ea38:	4606      	mov	r6, r0
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	f000 809b 	beq.w	800eb76 <rmw_create_service+0x182>
 800ea40:	6887      	ldr	r7, [r0, #8]
 800ea42:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800ea46:	f009 f937 	bl	8017cb8 <rmw_get_implementation_identifier>
 800ea4a:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800ea4e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800ea50:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800ea54:	4620      	mov	r0, r4
 800ea56:	f7f1 fbed 	bl	8000234 <strlen>
 800ea5a:	1c42      	adds	r2, r0, #1
 800ea5c:	2a3c      	cmp	r2, #60	@ 0x3c
 800ea5e:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800ea62:	f200 8084 	bhi.w	800eb6e <rmw_create_service+0x17a>
 800ea66:	4621      	mov	r1, r4
 800ea68:	4650      	mov	r0, sl
 800ea6a:	f00b fe92 	bl	801a792 <memcpy>
 800ea6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea72:	4629      	mov	r1, r5
 800ea74:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800ea78:	677b      	str	r3, [r7, #116]	@ 0x74
 800ea7a:	2250      	movs	r2, #80	@ 0x50
 800ea7c:	f107 0020 	add.w	r0, r7, #32
 800ea80:	f00b fe87 	bl	801a792 <memcpy>
 800ea84:	493f      	ldr	r1, [pc, #252]	@ (800eb84 <rmw_create_service+0x190>)
 800ea86:	4648      	mov	r0, r9
 800ea88:	f000 fd9c 	bl	800f5c4 <get_service_typesupport_handle>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d06e      	beq.n	800eb6e <rmw_create_service+0x17a>
 800ea90:	6843      	ldr	r3, [r0, #4]
 800ea92:	617b      	str	r3, [r7, #20]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d06a      	beq.n	800eb6e <rmw_create_service+0x17a>
 800ea98:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ea9c:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800eb8c <rmw_create_service+0x198>
 800eaa0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800eb90 <rmw_create_service+0x19c>
 800eaa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaa8:	2108      	movs	r1, #8
 800eaaa:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800eaae:	1c42      	adds	r2, r0, #1
 800eab0:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800eab4:	f002 fa12 	bl	8010edc <uxr_object_id>
 800eab8:	2364      	movs	r3, #100	@ 0x64
 800eaba:	6138      	str	r0, [r7, #16]
 800eabc:	4652      	mov	r2, sl
 800eabe:	6978      	ldr	r0, [r7, #20]
 800eac0:	4649      	mov	r1, r9
 800eac2:	f000 fcb3 	bl	800f42c <generate_service_types>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d051      	beq.n	800eb6e <rmw_create_service+0x17a>
 800eaca:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800eb94 <rmw_create_service+0x1a0>
 800eace:	4a2e      	ldr	r2, [pc, #184]	@ (800eb88 <rmw_create_service+0x194>)
 800ead0:	233c      	movs	r3, #60	@ 0x3c
 800ead2:	4659      	mov	r1, fp
 800ead4:	4620      	mov	r0, r4
 800ead6:	f000 fc77 	bl	800f3c8 <generate_service_topics>
 800eada:	2800      	cmp	r0, #0
 800eadc:	d047      	beq.n	800eb6e <rmw_create_service+0x17a>
 800eade:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eae2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800eae6:	a80c      	add	r0, sp, #48	@ 0x30
 800eae8:	4629      	mov	r1, r5
 800eaea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eaee:	f000 fc51 	bl	800f394 <convert_qos_profile>
 800eaf2:	4a25      	ldr	r2, [pc, #148]	@ (800eb88 <rmw_create_service+0x194>)
 800eaf4:	9400      	str	r4, [sp, #0]
 800eaf6:	e9cd b203 	strd	fp, r2, [sp, #12]
 800eafa:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800eafe:	a80c      	add	r0, sp, #48	@ 0x30
 800eb00:	c803      	ldmia	r0, {r0, r1}
 800eb02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb04:	9005      	str	r0, [sp, #20]
 800eb06:	9a08      	ldr	r2, [sp, #32]
 800eb08:	f8ad 1018 	strh.w	r1, [sp, #24]
 800eb0c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800eb10:	2306      	movs	r3, #6
 800eb12:	9307      	str	r3, [sp, #28]
 800eb14:	6811      	ldr	r1, [r2, #0]
 800eb16:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800eb1a:	693a      	ldr	r2, [r7, #16]
 800eb1c:	f002 f8e2 	bl	8010ce4 <uxr_buffer_create_replier_bin>
 800eb20:	4602      	mov	r2, r0
 800eb22:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eb26:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb2e:	f000 fc15 	bl	800f35c <run_xrce_session>
 800eb32:	b1e0      	cbz	r0, 800eb6e <rmw_create_service+0x17a>
 800eb34:	7a2b      	ldrb	r3, [r5, #8]
 800eb36:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	2b02      	cmp	r3, #2
 800eb3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800eb42:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800eb46:	bf0c      	ite	eq
 800eb48:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800eb4c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800eb50:	673a      	str	r2, [r7, #112]	@ 0x70
 800eb52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb54:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800eb58:	ab0e      	add	r3, sp, #56	@ 0x38
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	6811      	ldr	r1, [r2, #0]
 800eb5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb60:	693a      	ldr	r2, [r7, #16]
 800eb62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb66:	f002 f9e9 	bl	8010f3c <uxr_buffer_request_data>
 800eb6a:	8338      	strh	r0, [r7, #24]
 800eb6c:	e003      	b.n	800eb76 <rmw_create_service+0x182>
 800eb6e:	4630      	mov	r0, r6
 800eb70:	f000 fac6 	bl	800f100 <rmw_uxrce_fini_service_memory>
 800eb74:	2600      	movs	r6, #0
 800eb76:	4630      	mov	r0, r6
 800eb78:	b011      	add	sp, #68	@ 0x44
 800eb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7e:	bf00      	nop
 800eb80:	2000bd1c 	.word	0x2000bd1c
 800eb84:	0801cce8 	.word	0x0801cce8
 800eb88:	2000706c 	.word	0x2000706c
 800eb8c:	200070a8 	.word	0x200070a8
 800eb90:	20007008 	.word	0x20007008
 800eb94:	20006fcc 	.word	0x20006fcc

0800eb98 <rmw_destroy_service>:
 800eb98:	b570      	push	{r4, r5, r6, lr}
 800eb9a:	b128      	cbz	r0, 800eba8 <rmw_destroy_service+0x10>
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	6800      	ldr	r0, [r0, #0]
 800eba0:	460d      	mov	r5, r1
 800eba2:	f000 fcf5 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800eba6:	b910      	cbnz	r0, 800ebae <rmw_destroy_service+0x16>
 800eba8:	2401      	movs	r4, #1
 800ebaa:	4620      	mov	r0, r4
 800ebac:	bd70      	pop	{r4, r5, r6, pc}
 800ebae:	6863      	ldr	r3, [r4, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d0f9      	beq.n	800eba8 <rmw_destroy_service+0x10>
 800ebb4:	2d00      	cmp	r5, #0
 800ebb6:	d0f7      	beq.n	800eba8 <rmw_destroy_service+0x10>
 800ebb8:	6828      	ldr	r0, [r5, #0]
 800ebba:	f000 fce9 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	d0f2      	beq.n	800eba8 <rmw_destroy_service+0x10>
 800ebc2:	686e      	ldr	r6, [r5, #4]
 800ebc4:	2e00      	cmp	r6, #0
 800ebc6:	d0ef      	beq.n	800eba8 <rmw_destroy_service+0x10>
 800ebc8:	6864      	ldr	r4, [r4, #4]
 800ebca:	6932      	ldr	r2, [r6, #16]
 800ebcc:	6920      	ldr	r0, [r4, #16]
 800ebce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebd6:	6819      	ldr	r1, [r3, #0]
 800ebd8:	f002 f9ea 	bl	8010fb0 <uxr_buffer_cancel_data>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	6920      	ldr	r0, [r4, #16]
 800ebe0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ebe4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ebe8:	f000 fbb8 	bl	800f35c <run_xrce_session>
 800ebec:	6920      	ldr	r0, [r4, #16]
 800ebee:	6932      	ldr	r2, [r6, #16]
 800ebf0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ebf4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebf8:	6819      	ldr	r1, [r3, #0]
 800ebfa:	f001 ff19 	bl	8010a30 <uxr_buffer_delete_entity>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	6920      	ldr	r0, [r4, #16]
 800ec02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec0a:	f000 fba7 	bl	800f35c <run_xrce_session>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	4628      	mov	r0, r5
 800ec12:	bf14      	ite	ne
 800ec14:	2400      	movne	r4, #0
 800ec16:	2402      	moveq	r4, #2
 800ec18:	f000 fa72 	bl	800f100 <rmw_uxrce_fini_service_memory>
 800ec1c:	e7c5      	b.n	800ebaa <rmw_destroy_service+0x12>
 800ec1e:	bf00      	nop

0800ec20 <rmw_service_response_publisher_get_actual_qos>:
 800ec20:	b150      	cbz	r0, 800ec38 <rmw_service_response_publisher_get_actual_qos+0x18>
 800ec22:	b508      	push	{r3, lr}
 800ec24:	460b      	mov	r3, r1
 800ec26:	b149      	cbz	r1, 800ec3c <rmw_service_response_publisher_get_actual_qos+0x1c>
 800ec28:	6841      	ldr	r1, [r0, #4]
 800ec2a:	2250      	movs	r2, #80	@ 0x50
 800ec2c:	3120      	adds	r1, #32
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f00b fdaf 	bl	801a792 <memcpy>
 800ec34:	2000      	movs	r0, #0
 800ec36:	bd08      	pop	{r3, pc}
 800ec38:	200b      	movs	r0, #11
 800ec3a:	4770      	bx	lr
 800ec3c:	200b      	movs	r0, #11
 800ec3e:	bd08      	pop	{r3, pc}

0800ec40 <rmw_service_request_subscription_get_actual_qos>:
 800ec40:	b150      	cbz	r0, 800ec58 <rmw_service_request_subscription_get_actual_qos+0x18>
 800ec42:	b508      	push	{r3, lr}
 800ec44:	460b      	mov	r3, r1
 800ec46:	b149      	cbz	r1, 800ec5c <rmw_service_request_subscription_get_actual_qos+0x1c>
 800ec48:	6841      	ldr	r1, [r0, #4]
 800ec4a:	2250      	movs	r2, #80	@ 0x50
 800ec4c:	3120      	adds	r1, #32
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f00b fd9f 	bl	801a792 <memcpy>
 800ec54:	2000      	movs	r0, #0
 800ec56:	bd08      	pop	{r3, pc}
 800ec58:	200b      	movs	r0, #11
 800ec5a:	4770      	bx	lr
 800ec5c:	200b      	movs	r0, #11
 800ec5e:	bd08      	pop	{r3, pc}

0800ec60 <rmw_destroy_subscription>:
 800ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec62:	b128      	cbz	r0, 800ec70 <rmw_destroy_subscription+0x10>
 800ec64:	4604      	mov	r4, r0
 800ec66:	6800      	ldr	r0, [r0, #0]
 800ec68:	460d      	mov	r5, r1
 800ec6a:	f000 fc91 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800ec6e:	b910      	cbnz	r0, 800ec76 <rmw_destroy_subscription+0x16>
 800ec70:	2401      	movs	r4, #1
 800ec72:	4620      	mov	r0, r4
 800ec74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec76:	6863      	ldr	r3, [r4, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0f9      	beq.n	800ec70 <rmw_destroy_subscription+0x10>
 800ec7c:	2d00      	cmp	r5, #0
 800ec7e:	d0f7      	beq.n	800ec70 <rmw_destroy_subscription+0x10>
 800ec80:	6828      	ldr	r0, [r5, #0]
 800ec82:	f000 fc85 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 800ec86:	2800      	cmp	r0, #0
 800ec88:	d0f2      	beq.n	800ec70 <rmw_destroy_subscription+0x10>
 800ec8a:	686c      	ldr	r4, [r5, #4]
 800ec8c:	2c00      	cmp	r4, #0
 800ec8e:	d0ef      	beq.n	800ec70 <rmw_destroy_subscription+0x10>
 800ec90:	6a26      	ldr	r6, [r4, #32]
 800ec92:	6962      	ldr	r2, [r4, #20]
 800ec94:	6930      	ldr	r0, [r6, #16]
 800ec96:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec9e:	6819      	ldr	r1, [r3, #0]
 800eca0:	f002 f986 	bl	8010fb0 <uxr_buffer_cancel_data>
 800eca4:	4602      	mov	r2, r0
 800eca6:	6930      	ldr	r0, [r6, #16]
 800eca8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ecac:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ecb0:	f000 fb54 	bl	800f35c <run_xrce_session>
 800ecb4:	69e0      	ldr	r0, [r4, #28]
 800ecb6:	f009 f855 	bl	8017d64 <destroy_topic>
 800ecba:	6a23      	ldr	r3, [r4, #32]
 800ecbc:	6962      	ldr	r2, [r4, #20]
 800ecbe:	6918      	ldr	r0, [r3, #16]
 800ecc0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecc8:	6819      	ldr	r1, [r3, #0]
 800ecca:	f001 feb1 	bl	8010a30 <uxr_buffer_delete_entity>
 800ecce:	6a23      	ldr	r3, [r4, #32]
 800ecd0:	6922      	ldr	r2, [r4, #16]
 800ecd2:	691b      	ldr	r3, [r3, #16]
 800ecd4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ecd8:	4604      	mov	r4, r0
 800ecda:	6809      	ldr	r1, [r1, #0]
 800ecdc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ece0:	f001 fea6 	bl	8010a30 <uxr_buffer_delete_entity>
 800ece4:	6937      	ldr	r7, [r6, #16]
 800ece6:	4622      	mov	r2, r4
 800ece8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ecec:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	f000 fb32 	bl	800f35c <run_xrce_session>
 800ecf8:	6936      	ldr	r6, [r6, #16]
 800ecfa:	4622      	mov	r2, r4
 800ecfc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ed00:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ed04:	4604      	mov	r4, r0
 800ed06:	4630      	mov	r0, r6
 800ed08:	f000 fb28 	bl	800f35c <run_xrce_session>
 800ed0c:	b12c      	cbz	r4, 800ed1a <rmw_destroy_subscription+0xba>
 800ed0e:	b120      	cbz	r0, 800ed1a <rmw_destroy_subscription+0xba>
 800ed10:	2400      	movs	r4, #0
 800ed12:	4628      	mov	r0, r5
 800ed14:	f000 f9de 	bl	800f0d4 <rmw_uxrce_fini_subscription_memory>
 800ed18:	e7ab      	b.n	800ec72 <rmw_destroy_subscription+0x12>
 800ed1a:	2402      	movs	r4, #2
 800ed1c:	e7f9      	b.n	800ed12 <rmw_destroy_subscription+0xb2>
 800ed1e:	bf00      	nop

0800ed20 <rmw_uxrce_transport_init>:
 800ed20:	b508      	push	{r3, lr}
 800ed22:	b108      	cbz	r0, 800ed28 <rmw_uxrce_transport_init+0x8>
 800ed24:	f100 0210 	add.w	r2, r0, #16
 800ed28:	b139      	cbz	r1, 800ed3a <rmw_uxrce_transport_init+0x1a>
 800ed2a:	6949      	ldr	r1, [r1, #20]
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	f002 f89d 	bl	8010e6c <uxr_init_custom_transport>
 800ed32:	f080 0001 	eor.w	r0, r0, #1
 800ed36:	b2c0      	uxtb	r0, r0
 800ed38:	bd08      	pop	{r3, pc}
 800ed3a:	4b04      	ldr	r3, [pc, #16]	@ (800ed4c <rmw_uxrce_transport_init+0x2c>)
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	6859      	ldr	r1, [r3, #4]
 800ed40:	f002 f894 	bl	8010e6c <uxr_init_custom_transport>
 800ed44:	f080 0001 	eor.w	r0, r0, #1
 800ed48:	b2c0      	uxtb	r0, r0
 800ed4a:	bd08      	pop	{r3, pc}
 800ed4c:	20006f74 	.word	0x20006f74

0800ed50 <rmw_uros_epoch_millis>:
 800ed50:	4b05      	ldr	r3, [pc, #20]	@ (800ed68 <rmw_uros_epoch_millis+0x18>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	b123      	cbz	r3, 800ed60 <rmw_uros_epoch_millis+0x10>
 800ed56:	6898      	ldr	r0, [r3, #8]
 800ed58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed5c:	f002 bb32 	b.w	80113c4 <uxr_epoch_millis>
 800ed60:	2000      	movs	r0, #0
 800ed62:	2100      	movs	r1, #0
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	2000bd2c 	.word	0x2000bd2c

0800ed6c <rmw_uros_epoch_nanos>:
 800ed6c:	4b05      	ldr	r3, [pc, #20]	@ (800ed84 <rmw_uros_epoch_nanos+0x18>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	b123      	cbz	r3, 800ed7c <rmw_uros_epoch_nanos+0x10>
 800ed72:	6898      	ldr	r0, [r3, #8]
 800ed74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed78:	f002 bb36 	b.w	80113e8 <uxr_epoch_nanos>
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	2100      	movs	r1, #0
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	2000bd2c 	.word	0x2000bd2c

0800ed88 <rmw_uros_sync_session>:
 800ed88:	b508      	push	{r3, lr}
 800ed8a:	4b07      	ldr	r3, [pc, #28]	@ (800eda8 <rmw_uros_sync_session+0x20>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	b14b      	cbz	r3, 800eda4 <rmw_uros_sync_session+0x1c>
 800ed90:	4601      	mov	r1, r0
 800ed92:	6898      	ldr	r0, [r3, #8]
 800ed94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed98:	f002 ff6a 	bl	8011c70 <uxr_sync_session>
 800ed9c:	f080 0001 	eor.w	r0, r0, #1
 800eda0:	b2c0      	uxtb	r0, r0
 800eda2:	bd08      	pop	{r3, pc}
 800eda4:	2001      	movs	r0, #1
 800eda6:	bd08      	pop	{r3, pc}
 800eda8:	2000bd2c 	.word	0x2000bd2c

0800edac <rmw_uxrce_init_service_memory>:
 800edac:	b1e2      	cbz	r2, 800ede8 <rmw_uxrce_init_service_memory+0x3c>
 800edae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb2:	7b05      	ldrb	r5, [r0, #12]
 800edb4:	4606      	mov	r6, r0
 800edb6:	b9ad      	cbnz	r5, 800ede4 <rmw_uxrce_init_service_memory+0x38>
 800edb8:	23c8      	movs	r3, #200	@ 0xc8
 800edba:	e9c0 5500 	strd	r5, r5, [r0]
 800edbe:	6083      	str	r3, [r0, #8]
 800edc0:	f240 1301 	movw	r3, #257	@ 0x101
 800edc4:	4617      	mov	r7, r2
 800edc6:	8183      	strh	r3, [r0, #12]
 800edc8:	460c      	mov	r4, r1
 800edca:	46a8      	mov	r8, r5
 800edcc:	4621      	mov	r1, r4
 800edce:	4630      	mov	r0, r6
 800edd0:	3501      	adds	r5, #1
 800edd2:	f008 ff19 	bl	8017c08 <put_memory>
 800edd6:	42af      	cmp	r7, r5
 800edd8:	60a4      	str	r4, [r4, #8]
 800edda:	f884 800c 	strb.w	r8, [r4, #12]
 800edde:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ede2:	d1f3      	bne.n	800edcc <rmw_uxrce_init_service_memory+0x20>
 800ede4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop

0800edec <rmw_uxrce_init_client_memory>:
 800edec:	b1e2      	cbz	r2, 800ee28 <rmw_uxrce_init_client_memory+0x3c>
 800edee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf2:	7b05      	ldrb	r5, [r0, #12]
 800edf4:	4606      	mov	r6, r0
 800edf6:	b9ad      	cbnz	r5, 800ee24 <rmw_uxrce_init_client_memory+0x38>
 800edf8:	23c8      	movs	r3, #200	@ 0xc8
 800edfa:	e9c0 5500 	strd	r5, r5, [r0]
 800edfe:	6083      	str	r3, [r0, #8]
 800ee00:	f240 1301 	movw	r3, #257	@ 0x101
 800ee04:	4617      	mov	r7, r2
 800ee06:	8183      	strh	r3, [r0, #12]
 800ee08:	460c      	mov	r4, r1
 800ee0a:	46a8      	mov	r8, r5
 800ee0c:	4621      	mov	r1, r4
 800ee0e:	4630      	mov	r0, r6
 800ee10:	3501      	adds	r5, #1
 800ee12:	f008 fef9 	bl	8017c08 <put_memory>
 800ee16:	42af      	cmp	r7, r5
 800ee18:	60a4      	str	r4, [r4, #8]
 800ee1a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee1e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ee22:	d1f3      	bne.n	800ee0c <rmw_uxrce_init_client_memory+0x20>
 800ee24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop

0800ee2c <rmw_uxrce_init_publisher_memory>:
 800ee2c:	b1e2      	cbz	r2, 800ee68 <rmw_uxrce_init_publisher_memory+0x3c>
 800ee2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee32:	7b05      	ldrb	r5, [r0, #12]
 800ee34:	4606      	mov	r6, r0
 800ee36:	b9ad      	cbnz	r5, 800ee64 <rmw_uxrce_init_publisher_memory+0x38>
 800ee38:	23d8      	movs	r3, #216	@ 0xd8
 800ee3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee3e:	6083      	str	r3, [r0, #8]
 800ee40:	f240 1301 	movw	r3, #257	@ 0x101
 800ee44:	4617      	mov	r7, r2
 800ee46:	8183      	strh	r3, [r0, #12]
 800ee48:	460c      	mov	r4, r1
 800ee4a:	46a8      	mov	r8, r5
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	4630      	mov	r0, r6
 800ee50:	3501      	adds	r5, #1
 800ee52:	f008 fed9 	bl	8017c08 <put_memory>
 800ee56:	42af      	cmp	r7, r5
 800ee58:	60a4      	str	r4, [r4, #8]
 800ee5a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee5e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee62:	d1f3      	bne.n	800ee4c <rmw_uxrce_init_publisher_memory+0x20>
 800ee64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop

0800ee6c <rmw_uxrce_init_subscription_memory>:
 800ee6c:	b1e2      	cbz	r2, 800eea8 <rmw_uxrce_init_subscription_memory+0x3c>
 800ee6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee72:	7b05      	ldrb	r5, [r0, #12]
 800ee74:	4606      	mov	r6, r0
 800ee76:	b9ad      	cbnz	r5, 800eea4 <rmw_uxrce_init_subscription_memory+0x38>
 800ee78:	23d8      	movs	r3, #216	@ 0xd8
 800ee7a:	e9c0 5500 	strd	r5, r5, [r0]
 800ee7e:	6083      	str	r3, [r0, #8]
 800ee80:	f240 1301 	movw	r3, #257	@ 0x101
 800ee84:	4617      	mov	r7, r2
 800ee86:	8183      	strh	r3, [r0, #12]
 800ee88:	460c      	mov	r4, r1
 800ee8a:	46a8      	mov	r8, r5
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4630      	mov	r0, r6
 800ee90:	3501      	adds	r5, #1
 800ee92:	f008 feb9 	bl	8017c08 <put_memory>
 800ee96:	42af      	cmp	r7, r5
 800ee98:	60a4      	str	r4, [r4, #8]
 800ee9a:	f884 800c 	strb.w	r8, [r4, #12]
 800ee9e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eea2:	d1f3      	bne.n	800ee8c <rmw_uxrce_init_subscription_memory+0x20>
 800eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop

0800eeac <rmw_uxrce_init_node_memory>:
 800eeac:	b1e2      	cbz	r2, 800eee8 <rmw_uxrce_init_node_memory+0x3c>
 800eeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb2:	7b05      	ldrb	r5, [r0, #12]
 800eeb4:	4606      	mov	r6, r0
 800eeb6:	b9ad      	cbnz	r5, 800eee4 <rmw_uxrce_init_node_memory+0x38>
 800eeb8:	23a4      	movs	r3, #164	@ 0xa4
 800eeba:	e9c0 5500 	strd	r5, r5, [r0]
 800eebe:	6083      	str	r3, [r0, #8]
 800eec0:	f240 1301 	movw	r3, #257	@ 0x101
 800eec4:	4617      	mov	r7, r2
 800eec6:	8183      	strh	r3, [r0, #12]
 800eec8:	460c      	mov	r4, r1
 800eeca:	46a8      	mov	r8, r5
 800eecc:	4621      	mov	r1, r4
 800eece:	4630      	mov	r0, r6
 800eed0:	3501      	adds	r5, #1
 800eed2:	f008 fe99 	bl	8017c08 <put_memory>
 800eed6:	42af      	cmp	r7, r5
 800eed8:	60a4      	str	r4, [r4, #8]
 800eeda:	f884 800c 	strb.w	r8, [r4, #12]
 800eede:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800eee2:	d1f3      	bne.n	800eecc <rmw_uxrce_init_node_memory+0x20>
 800eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop

0800eeec <rmw_uxrce_init_session_memory>:
 800eeec:	b1ea      	cbz	r2, 800ef2a <rmw_uxrce_init_session_memory+0x3e>
 800eeee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef2:	7b05      	ldrb	r5, [r0, #12]
 800eef4:	4606      	mov	r6, r0
 800eef6:	b9b5      	cbnz	r5, 800ef26 <rmw_uxrce_init_session_memory+0x3a>
 800eef8:	e9c0 5500 	strd	r5, r5, [r0]
 800eefc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ef00:	f240 1301 	movw	r3, #257	@ 0x101
 800ef04:	4617      	mov	r7, r2
 800ef06:	f8c0 8008 	str.w	r8, [r0, #8]
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	8183      	strh	r3, [r0, #12]
 800ef0e:	46a9      	mov	r9, r5
 800ef10:	4621      	mov	r1, r4
 800ef12:	4630      	mov	r0, r6
 800ef14:	3501      	adds	r5, #1
 800ef16:	f008 fe77 	bl	8017c08 <put_memory>
 800ef1a:	42af      	cmp	r7, r5
 800ef1c:	60a4      	str	r4, [r4, #8]
 800ef1e:	f884 900c 	strb.w	r9, [r4, #12]
 800ef22:	4444      	add	r4, r8
 800ef24:	d1f4      	bne.n	800ef10 <rmw_uxrce_init_session_memory+0x24>
 800ef26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2a:	4770      	bx	lr

0800ef2c <rmw_uxrce_init_topic_memory>:
 800ef2c:	b1e2      	cbz	r2, 800ef68 <rmw_uxrce_init_topic_memory+0x3c>
 800ef2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef32:	7b05      	ldrb	r5, [r0, #12]
 800ef34:	4606      	mov	r6, r0
 800ef36:	b9ad      	cbnz	r5, 800ef64 <rmw_uxrce_init_topic_memory+0x38>
 800ef38:	231c      	movs	r3, #28
 800ef3a:	e9c0 5500 	strd	r5, r5, [r0]
 800ef3e:	6083      	str	r3, [r0, #8]
 800ef40:	f240 1301 	movw	r3, #257	@ 0x101
 800ef44:	4617      	mov	r7, r2
 800ef46:	8183      	strh	r3, [r0, #12]
 800ef48:	460c      	mov	r4, r1
 800ef4a:	46a8      	mov	r8, r5
 800ef4c:	4621      	mov	r1, r4
 800ef4e:	4630      	mov	r0, r6
 800ef50:	3501      	adds	r5, #1
 800ef52:	f008 fe59 	bl	8017c08 <put_memory>
 800ef56:	42af      	cmp	r7, r5
 800ef58:	60a4      	str	r4, [r4, #8]
 800ef5a:	f884 800c 	strb.w	r8, [r4, #12]
 800ef5e:	f104 041c 	add.w	r4, r4, #28
 800ef62:	d1f3      	bne.n	800ef4c <rmw_uxrce_init_topic_memory+0x20>
 800ef64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop

0800ef6c <rmw_uxrce_init_static_input_buffer_memory>:
 800ef6c:	b1ea      	cbz	r2, 800efaa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ef6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	7b05      	ldrb	r5, [r0, #12]
 800ef74:	4606      	mov	r6, r0
 800ef76:	b9b5      	cbnz	r5, 800efa6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ef78:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ef7c:	e9c0 5500 	strd	r5, r5, [r0]
 800ef80:	6083      	str	r3, [r0, #8]
 800ef82:	f240 1301 	movw	r3, #257	@ 0x101
 800ef86:	4617      	mov	r7, r2
 800ef88:	8183      	strh	r3, [r0, #12]
 800ef8a:	460c      	mov	r4, r1
 800ef8c:	46a8      	mov	r8, r5
 800ef8e:	4621      	mov	r1, r4
 800ef90:	4630      	mov	r0, r6
 800ef92:	3501      	adds	r5, #1
 800ef94:	f008 fe38 	bl	8017c08 <put_memory>
 800ef98:	42af      	cmp	r7, r5
 800ef9a:	60a4      	str	r4, [r4, #8]
 800ef9c:	f884 800c 	strb.w	r8, [r4, #12]
 800efa0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800efa4:	d1f3      	bne.n	800ef8e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800efa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efaa:	4770      	bx	lr

0800efac <rmw_uxrce_init_init_options_impl_memory>:
 800efac:	b1e2      	cbz	r2, 800efe8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800efae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb2:	7b05      	ldrb	r5, [r0, #12]
 800efb4:	4606      	mov	r6, r0
 800efb6:	b9ad      	cbnz	r5, 800efe4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800efb8:	232c      	movs	r3, #44	@ 0x2c
 800efba:	e9c0 5500 	strd	r5, r5, [r0]
 800efbe:	6083      	str	r3, [r0, #8]
 800efc0:	f240 1301 	movw	r3, #257	@ 0x101
 800efc4:	4617      	mov	r7, r2
 800efc6:	8183      	strh	r3, [r0, #12]
 800efc8:	460c      	mov	r4, r1
 800efca:	46a8      	mov	r8, r5
 800efcc:	4621      	mov	r1, r4
 800efce:	4630      	mov	r0, r6
 800efd0:	3501      	adds	r5, #1
 800efd2:	f008 fe19 	bl	8017c08 <put_memory>
 800efd6:	42af      	cmp	r7, r5
 800efd8:	60a4      	str	r4, [r4, #8]
 800efda:	f884 800c 	strb.w	r8, [r4, #12]
 800efde:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800efe2:	d1f3      	bne.n	800efcc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop

0800efec <rmw_uxrce_init_wait_set_memory>:
 800efec:	b1e2      	cbz	r2, 800f028 <rmw_uxrce_init_wait_set_memory+0x3c>
 800efee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff2:	7b05      	ldrb	r5, [r0, #12]
 800eff4:	4606      	mov	r6, r0
 800eff6:	b9ad      	cbnz	r5, 800f024 <rmw_uxrce_init_wait_set_memory+0x38>
 800eff8:	231c      	movs	r3, #28
 800effa:	e9c0 5500 	strd	r5, r5, [r0]
 800effe:	6083      	str	r3, [r0, #8]
 800f000:	f240 1301 	movw	r3, #257	@ 0x101
 800f004:	4617      	mov	r7, r2
 800f006:	8183      	strh	r3, [r0, #12]
 800f008:	460c      	mov	r4, r1
 800f00a:	46a8      	mov	r8, r5
 800f00c:	4621      	mov	r1, r4
 800f00e:	4630      	mov	r0, r6
 800f010:	3501      	adds	r5, #1
 800f012:	f008 fdf9 	bl	8017c08 <put_memory>
 800f016:	42af      	cmp	r7, r5
 800f018:	60a4      	str	r4, [r4, #8]
 800f01a:	f884 800c 	strb.w	r8, [r4, #12]
 800f01e:	f104 041c 	add.w	r4, r4, #28
 800f022:	d1f3      	bne.n	800f00c <rmw_uxrce_init_wait_set_memory+0x20>
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	4770      	bx	lr
 800f02a:	bf00      	nop

0800f02c <rmw_uxrce_init_guard_condition_memory>:
 800f02c:	b1e2      	cbz	r2, 800f068 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f032:	7b05      	ldrb	r5, [r0, #12]
 800f034:	4606      	mov	r6, r0
 800f036:	b9ad      	cbnz	r5, 800f064 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f038:	2320      	movs	r3, #32
 800f03a:	e9c0 5500 	strd	r5, r5, [r0]
 800f03e:	6083      	str	r3, [r0, #8]
 800f040:	f240 1301 	movw	r3, #257	@ 0x101
 800f044:	4617      	mov	r7, r2
 800f046:	8183      	strh	r3, [r0, #12]
 800f048:	460c      	mov	r4, r1
 800f04a:	46a8      	mov	r8, r5
 800f04c:	4621      	mov	r1, r4
 800f04e:	4630      	mov	r0, r6
 800f050:	3501      	adds	r5, #1
 800f052:	f008 fdd9 	bl	8017c08 <put_memory>
 800f056:	42af      	cmp	r7, r5
 800f058:	60a4      	str	r4, [r4, #8]
 800f05a:	f884 800c 	strb.w	r8, [r4, #12]
 800f05e:	f104 0420 	add.w	r4, r4, #32
 800f062:	d1f3      	bne.n	800f04c <rmw_uxrce_init_guard_condition_memory+0x20>
 800f064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop

0800f06c <rmw_uxrce_fini_session_memory>:
 800f06c:	4601      	mov	r1, r0
 800f06e:	4801      	ldr	r0, [pc, #4]	@ (800f074 <rmw_uxrce_fini_session_memory+0x8>)
 800f070:	f008 bdca 	b.w	8017c08 <put_memory>
 800f074:	2000bd2c 	.word	0x2000bd2c

0800f078 <rmw_uxrce_fini_node_memory>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4604      	mov	r4, r0
 800f07c:	6800      	ldr	r0, [r0, #0]
 800f07e:	b128      	cbz	r0, 800f08c <rmw_uxrce_fini_node_memory+0x14>
 800f080:	4b07      	ldr	r3, [pc, #28]	@ (800f0a0 <rmw_uxrce_fini_node_memory+0x28>)
 800f082:	6819      	ldr	r1, [r3, #0]
 800f084:	f7f1 f8cc 	bl	8000220 <strcmp>
 800f088:	b940      	cbnz	r0, 800f09c <rmw_uxrce_fini_node_memory+0x24>
 800f08a:	6020      	str	r0, [r4, #0]
 800f08c:	6861      	ldr	r1, [r4, #4]
 800f08e:	b129      	cbz	r1, 800f09c <rmw_uxrce_fini_node_memory+0x24>
 800f090:	2500      	movs	r5, #0
 800f092:	4804      	ldr	r0, [pc, #16]	@ (800f0a4 <rmw_uxrce_fini_node_memory+0x2c>)
 800f094:	610d      	str	r5, [r1, #16]
 800f096:	f008 fdb7 	bl	8017c08 <put_memory>
 800f09a:	6065      	str	r5, [r4, #4]
 800f09c:	bd38      	pop	{r3, r4, r5, pc}
 800f09e:	bf00      	nop
 800f0a0:	0801e200 	.word	0x0801e200
 800f0a4:	2000bcfc 	.word	0x2000bcfc

0800f0a8 <rmw_uxrce_fini_publisher_memory>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	6800      	ldr	r0, [r0, #0]
 800f0ae:	b128      	cbz	r0, 800f0bc <rmw_uxrce_fini_publisher_memory+0x14>
 800f0b0:	4b06      	ldr	r3, [pc, #24]	@ (800f0cc <rmw_uxrce_fini_publisher_memory+0x24>)
 800f0b2:	6819      	ldr	r1, [r3, #0]
 800f0b4:	f7f1 f8b4 	bl	8000220 <strcmp>
 800f0b8:	b938      	cbnz	r0, 800f0ca <rmw_uxrce_fini_publisher_memory+0x22>
 800f0ba:	6020      	str	r0, [r4, #0]
 800f0bc:	6861      	ldr	r1, [r4, #4]
 800f0be:	b121      	cbz	r1, 800f0ca <rmw_uxrce_fini_publisher_memory+0x22>
 800f0c0:	4803      	ldr	r0, [pc, #12]	@ (800f0d0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f0c2:	f008 fda1 	bl	8017c08 <put_memory>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	6063      	str	r3, [r4, #4]
 800f0ca:	bd10      	pop	{r4, pc}
 800f0cc:	0801e200 	.word	0x0801e200
 800f0d0:	2000bd0c 	.word	0x2000bd0c

0800f0d4 <rmw_uxrce_fini_subscription_memory>:
 800f0d4:	b510      	push	{r4, lr}
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	6800      	ldr	r0, [r0, #0]
 800f0da:	b128      	cbz	r0, 800f0e8 <rmw_uxrce_fini_subscription_memory+0x14>
 800f0dc:	4b06      	ldr	r3, [pc, #24]	@ (800f0f8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f0de:	6819      	ldr	r1, [r3, #0]
 800f0e0:	f7f1 f89e 	bl	8000220 <strcmp>
 800f0e4:	b938      	cbnz	r0, 800f0f6 <rmw_uxrce_fini_subscription_memory+0x22>
 800f0e6:	6020      	str	r0, [r4, #0]
 800f0e8:	6861      	ldr	r1, [r4, #4]
 800f0ea:	b121      	cbz	r1, 800f0f6 <rmw_uxrce_fini_subscription_memory+0x22>
 800f0ec:	4803      	ldr	r0, [pc, #12]	@ (800f0fc <rmw_uxrce_fini_subscription_memory+0x28>)
 800f0ee:	f008 fd8b 	bl	8017c08 <put_memory>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	6063      	str	r3, [r4, #4]
 800f0f6:	bd10      	pop	{r4, pc}
 800f0f8:	0801e200 	.word	0x0801e200
 800f0fc:	2000bd4c 	.word	0x2000bd4c

0800f100 <rmw_uxrce_fini_service_memory>:
 800f100:	b510      	push	{r4, lr}
 800f102:	4604      	mov	r4, r0
 800f104:	6800      	ldr	r0, [r0, #0]
 800f106:	b128      	cbz	r0, 800f114 <rmw_uxrce_fini_service_memory+0x14>
 800f108:	4b06      	ldr	r3, [pc, #24]	@ (800f124 <rmw_uxrce_fini_service_memory+0x24>)
 800f10a:	6819      	ldr	r1, [r3, #0]
 800f10c:	f7f1 f888 	bl	8000220 <strcmp>
 800f110:	b938      	cbnz	r0, 800f122 <rmw_uxrce_fini_service_memory+0x22>
 800f112:	6020      	str	r0, [r4, #0]
 800f114:	6861      	ldr	r1, [r4, #4]
 800f116:	b121      	cbz	r1, 800f122 <rmw_uxrce_fini_service_memory+0x22>
 800f118:	4803      	ldr	r0, [pc, #12]	@ (800f128 <rmw_uxrce_fini_service_memory+0x28>)
 800f11a:	f008 fd75 	bl	8017c08 <put_memory>
 800f11e:	2300      	movs	r3, #0
 800f120:	6063      	str	r3, [r4, #4]
 800f122:	bd10      	pop	{r4, pc}
 800f124:	0801e200 	.word	0x0801e200
 800f128:	2000bd1c 	.word	0x2000bd1c

0800f12c <rmw_uxrce_fini_client_memory>:
 800f12c:	b510      	push	{r4, lr}
 800f12e:	4604      	mov	r4, r0
 800f130:	6800      	ldr	r0, [r0, #0]
 800f132:	b128      	cbz	r0, 800f140 <rmw_uxrce_fini_client_memory+0x14>
 800f134:	4b06      	ldr	r3, [pc, #24]	@ (800f150 <rmw_uxrce_fini_client_memory+0x24>)
 800f136:	6819      	ldr	r1, [r3, #0]
 800f138:	f7f1 f872 	bl	8000220 <strcmp>
 800f13c:	b938      	cbnz	r0, 800f14e <rmw_uxrce_fini_client_memory+0x22>
 800f13e:	6020      	str	r0, [r4, #0]
 800f140:	6861      	ldr	r1, [r4, #4]
 800f142:	b121      	cbz	r1, 800f14e <rmw_uxrce_fini_client_memory+0x22>
 800f144:	4803      	ldr	r0, [pc, #12]	@ (800f154 <rmw_uxrce_fini_client_memory+0x28>)
 800f146:	f008 fd5f 	bl	8017c08 <put_memory>
 800f14a:	2300      	movs	r3, #0
 800f14c:	6063      	str	r3, [r4, #4]
 800f14e:	bd10      	pop	{r4, pc}
 800f150:	0801e200 	.word	0x0801e200
 800f154:	2000710c 	.word	0x2000710c

0800f158 <rmw_uxrce_fini_topic_memory>:
 800f158:	b510      	push	{r4, lr}
 800f15a:	4604      	mov	r4, r0
 800f15c:	4621      	mov	r1, r4
 800f15e:	4803      	ldr	r0, [pc, #12]	@ (800f16c <rmw_uxrce_fini_topic_memory+0x14>)
 800f160:	f008 fd52 	bl	8017c08 <put_memory>
 800f164:	2300      	movs	r3, #0
 800f166:	61a3      	str	r3, [r4, #24]
 800f168:	bd10      	pop	{r4, pc}
 800f16a:	bf00      	nop
 800f16c:	2000bd5c 	.word	0x2000bd5c

0800f170 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f170:	b082      	sub	sp, #8
 800f172:	b530      	push	{r4, r5, lr}
 800f174:	4925      	ldr	r1, [pc, #148]	@ (800f20c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f176:	680d      	ldr	r5, [r1, #0]
 800f178:	ac03      	add	r4, sp, #12
 800f17a:	e884 000c 	stmia.w	r4, {r2, r3}
 800f17e:	461c      	mov	r4, r3
 800f180:	2d00      	cmp	r5, #0
 800f182:	d041      	beq.n	800f208 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f184:	462b      	mov	r3, r5
 800f186:	2100      	movs	r1, #0
 800f188:	689a      	ldr	r2, [r3, #8]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f190:	4290      	cmp	r0, r2
 800f192:	bf08      	it	eq
 800f194:	3101      	addeq	r1, #1
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1f6      	bne.n	800f188 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f19a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d029      	beq.n	800f1f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f1a2:	d907      	bls.n	800f1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	d005      	beq.n	800f1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ae:	4608      	mov	r0, r1
 800f1b0:	b002      	add	sp, #8
 800f1b2:	4770      	bx	lr
 800f1b4:	b314      	cbz	r4, 800f1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1b6:	428c      	cmp	r4, r1
 800f1b8:	d820      	bhi.n	800f1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1ba:	2d00      	cmp	r5, #0
 800f1bc:	d0f4      	beq.n	800f1a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f1be:	2100      	movs	r1, #0
 800f1c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f1c4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f1c8:	e002      	b.n	800f1d0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800f1ca:	686d      	ldr	r5, [r5, #4]
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	d0ec      	beq.n	800f1aa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f1d0:	68ab      	ldr	r3, [r5, #8]
 800f1d2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800f1d6:	4290      	cmp	r0, r2
 800f1d8:	d1f7      	bne.n	800f1ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1da:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800f1de:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f1e2:	4562      	cmp	r2, ip
 800f1e4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f1e8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f1ec:	daed      	bge.n	800f1ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1ee:	4694      	mov	ip, r2
 800f1f0:	461c      	mov	r4, r3
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	e7e9      	b.n	800f1ca <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1f6:	b10c      	cbz	r4, 800f1fc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1f8:	428c      	cmp	r4, r1
 800f1fa:	d9d5      	bls.n	800f1a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f200:	4802      	ldr	r0, [pc, #8]	@ (800f20c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f202:	b002      	add	sp, #8
 800f204:	f008 bcf0 	b.w	8017be8 <get_memory>
 800f208:	4629      	mov	r1, r5
 800f20a:	e7c6      	b.n	800f19a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f20c:	2000bd3c 	.word	0x2000bd3c

0800f210 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f210:	4b11      	ldr	r3, [pc, #68]	@ (800f258 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	b530      	push	{r4, r5, lr}
 800f216:	b1e3      	cbz	r3, 800f252 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f218:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f21c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f220:	2400      	movs	r4, #0
 800f222:	e001      	b.n	800f228 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	b193      	cbz	r3, 800f24e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f228:	689a      	ldr	r2, [r3, #8]
 800f22a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f22e:	4288      	cmp	r0, r1
 800f230:	d1f8      	bne.n	800f224 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f232:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f236:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f23a:	4571      	cmp	r1, lr
 800f23c:	eb72 050c 	sbcs.w	r5, r2, ip
 800f240:	daf0      	bge.n	800f224 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f242:	461c      	mov	r4, r3
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	468e      	mov	lr, r1
 800f248:	4694      	mov	ip, r2
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1ec      	bne.n	800f228 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f24e:	4620      	mov	r0, r4
 800f250:	bd30      	pop	{r4, r5, pc}
 800f252:	461c      	mov	r4, r3
 800f254:	4620      	mov	r0, r4
 800f256:	bd30      	pop	{r4, r5, pc}
 800f258:	2000bd3c 	.word	0x2000bd3c
 800f25c:	00000000 	.word	0x00000000

0800f260 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	4b3c      	ldr	r3, [pc, #240]	@ (800f358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f266:	ed2d 8b06 	vpush	{d8-d10}
 800f26a:	681f      	ldr	r7, [r3, #0]
 800f26c:	b08d      	sub	sp, #52	@ 0x34
 800f26e:	f7ff fd7d 	bl	800ed6c <rmw_uros_epoch_nanos>
 800f272:	2f00      	cmp	r7, #0
 800f274:	d05d      	beq.n	800f332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f276:	46b8      	mov	r8, r7
 800f278:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800f340 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f27c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f280:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f284:	2b04      	cmp	r3, #4
 800f286:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800f348 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f28a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800f350 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f28e:	4681      	mov	r9, r0
 800f290:	468a      	mov	sl, r1
 800f292:	ac04      	add	r4, sp, #16
 800f294:	d03f      	beq.n	800f316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f296:	2b05      	cmp	r3, #5
 800f298:	d044      	beq.n	800f324 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d03b      	beq.n	800f316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f29e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f2a2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f2a6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f2aa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f2ae:	ab08      	add	r3, sp, #32
 800f2b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f2b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2ba:	f008 f9e1 	bl	8017680 <rmw_time_equal>
 800f2be:	b118      	cbz	r0, 800f2c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f2c0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f2c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f2c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2cc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f2d0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f2d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f2d8:	f008 fa26 	bl	8017728 <rmw_time_total_nsec>
 800f2dc:	1830      	adds	r0, r6, r0
 800f2de:	eb47 0101 	adc.w	r1, r7, r1
 800f2e2:	4548      	cmp	r0, r9
 800f2e4:	eb71 030a 	sbcs.w	r3, r1, sl
 800f2e8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f2ec:	db05      	blt.n	800f2fa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f2ee:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f2f2:	4591      	cmp	r9, r2
 800f2f4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f2f8:	da03      	bge.n	800f302 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f2fa:	4817      	ldr	r0, [pc, #92]	@ (800f358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f2fc:	4641      	mov	r1, r8
 800f2fe:	f008 fc83 	bl	8017c08 <put_memory>
 800f302:	f1bb 0f00 	cmp.w	fp, #0
 800f306:	d014      	beq.n	800f332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f308:	46d8      	mov	r8, fp
 800f30a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f30e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f312:	2b04      	cmp	r3, #4
 800f314:	d1bf      	bne.n	800f296 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f316:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f31a:	3340      	adds	r3, #64	@ 0x40
 800f31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f31e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f322:	e7c0      	b.n	800f2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f324:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f328:	3348      	adds	r3, #72	@ 0x48
 800f32a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f32c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f330:	e7b9      	b.n	800f2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f332:	b00d      	add	sp, #52	@ 0x34
 800f334:	ecbd 8b06 	vpop	{d8-d10}
 800f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33c:	f3af 8000 	nop.w
	...
 800f348:	00000001 	.word	0x00000001
 800f34c:	00000000 	.word	0x00000000
 800f350:	0000001e 	.word	0x0000001e
 800f354:	00000000 	.word	0x00000000
 800f358:	2000bd3c 	.word	0x2000bd3c

0800f35c <run_xrce_session>:
 800f35c:	b510      	push	{r4, lr}
 800f35e:	788c      	ldrb	r4, [r1, #2]
 800f360:	b086      	sub	sp, #24
 800f362:	2c01      	cmp	r4, #1
 800f364:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f368:	d00c      	beq.n	800f384 <run_xrce_session+0x28>
 800f36a:	4619      	mov	r1, r3
 800f36c:	2301      	movs	r3, #1
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	f10d 020e 	add.w	r2, sp, #14
 800f374:	f10d 0317 	add.w	r3, sp, #23
 800f378:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f37c:	f002 fc24 	bl	8011bc8 <uxr_run_session_until_all_status>
 800f380:	b006      	add	sp, #24
 800f382:	bd10      	pop	{r4, pc}
 800f384:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f388:	f002 f838 	bl	80113fc <uxr_flash_output_streams>
 800f38c:	4620      	mov	r0, r4
 800f38e:	b006      	add	sp, #24
 800f390:	bd10      	pop	{r4, pc}
 800f392:	bf00      	nop

0800f394 <convert_qos_profile>:
 800f394:	7a4a      	ldrb	r2, [r1, #9]
 800f396:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f39a:	2a02      	cmp	r2, #2
 800f39c:	bf18      	it	ne
 800f39e:	2200      	movne	r2, #0
 800f3a0:	7002      	strb	r2, [r0, #0]
 800f3a2:	780a      	ldrb	r2, [r1, #0]
 800f3a4:	8889      	ldrh	r1, [r1, #4]
 800f3a6:	8081      	strh	r1, [r0, #4]
 800f3a8:	f1ac 0c02 	sub.w	ip, ip, #2
 800f3ac:	f1a2 0202 	sub.w	r2, r2, #2
 800f3b0:	fabc fc8c 	clz	ip, ip
 800f3b4:	fab2 f282 	clz	r2, r2
 800f3b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f3bc:	0952      	lsrs	r2, r2, #5
 800f3be:	f880 c001 	strb.w	ip, [r0, #1]
 800f3c2:	7082      	strb	r2, [r0, #2]
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <generate_service_topics>:
 800f3c8:	b570      	push	{r4, r5, r6, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	461c      	mov	r4, r3
 800f3ce:	4b12      	ldr	r3, [pc, #72]	@ (800f418 <generate_service_topics+0x50>)
 800f3d0:	9301      	str	r3, [sp, #4]
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	4b11      	ldr	r3, [pc, #68]	@ (800f41c <generate_service_topics+0x54>)
 800f3d6:	9000      	str	r0, [sp, #0]
 800f3d8:	4616      	mov	r6, r2
 800f3da:	4608      	mov	r0, r1
 800f3dc:	4a10      	ldr	r2, [pc, #64]	@ (800f420 <generate_service_topics+0x58>)
 800f3de:	4621      	mov	r1, r4
 800f3e0:	f00a ffa0 	bl	801a324 <sniprintf>
 800f3e4:	4b0f      	ldr	r3, [pc, #60]	@ (800f424 <generate_service_topics+0x5c>)
 800f3e6:	9301      	str	r3, [sp, #4]
 800f3e8:	4601      	mov	r1, r0
 800f3ea:	9500      	str	r5, [sp, #0]
 800f3ec:	4b0e      	ldr	r3, [pc, #56]	@ (800f428 <generate_service_topics+0x60>)
 800f3ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f420 <generate_service_topics+0x58>)
 800f3f0:	460d      	mov	r5, r1
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	4621      	mov	r1, r4
 800f3f6:	f00a ff95 	bl	801a324 <sniprintf>
 800f3fa:	2d00      	cmp	r5, #0
 800f3fc:	db01      	blt.n	800f402 <generate_service_topics+0x3a>
 800f3fe:	42ac      	cmp	r4, r5
 800f400:	dc02      	bgt.n	800f408 <generate_service_topics+0x40>
 800f402:	2000      	movs	r0, #0
 800f404:	b002      	add	sp, #8
 800f406:	bd70      	pop	{r4, r5, r6, pc}
 800f408:	2800      	cmp	r0, #0
 800f40a:	dbfa      	blt.n	800f402 <generate_service_topics+0x3a>
 800f40c:	4284      	cmp	r4, r0
 800f40e:	bfd4      	ite	le
 800f410:	2000      	movle	r0, #0
 800f412:	2001      	movgt	r0, #1
 800f414:	b002      	add	sp, #8
 800f416:	bd70      	pop	{r4, r5, r6, pc}
 800f418:	0801d6ec 	.word	0x0801d6ec
 800f41c:	0801d6e8 	.word	0x0801d6e8
 800f420:	0801d6c4 	.word	0x0801d6c4
 800f424:	0801d6e0 	.word	0x0801d6e0
 800f428:	0801d6dc 	.word	0x0801d6dc

0800f42c <generate_service_types>:
 800f42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f430:	4605      	mov	r5, r0
 800f432:	b086      	sub	sp, #24
 800f434:	6880      	ldr	r0, [r0, #8]
 800f436:	460c      	mov	r4, r1
 800f438:	4617      	mov	r7, r2
 800f43a:	461e      	mov	r6, r3
 800f43c:	4780      	blx	r0
 800f43e:	68eb      	ldr	r3, [r5, #12]
 800f440:	4680      	mov	r8, r0
 800f442:	4798      	blx	r3
 800f444:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f448:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800f44c:	2300      	movs	r3, #0
 800f44e:	7023      	strb	r3, [r4, #0]
 800f450:	6813      	ldr	r3, [r2, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d042      	beq.n	800f4dc <generate_service_types+0xb0>
 800f456:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800f4f0 <generate_service_types+0xc4>
 800f45a:	4641      	mov	r1, r8
 800f45c:	4620      	mov	r0, r4
 800f45e:	4c22      	ldr	r4, [pc, #136]	@ (800f4e8 <generate_service_types+0xbc>)
 800f460:	9405      	str	r4, [sp, #20]
 800f462:	6852      	ldr	r2, [r2, #4]
 800f464:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800f4f8 <generate_service_types+0xcc>
 800f468:	9204      	str	r2, [sp, #16]
 800f46a:	9100      	str	r1, [sp, #0]
 800f46c:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800f470:	4a1e      	ldr	r2, [pc, #120]	@ (800f4ec <generate_service_types+0xc0>)
 800f472:	f8cd a004 	str.w	sl, [sp, #4]
 800f476:	4631      	mov	r1, r6
 800f478:	f00a ff54 	bl	801a324 <sniprintf>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	db1f      	blt.n	800f4c0 <generate_service_types+0x94>
 800f480:	2300      	movs	r3, #0
 800f482:	703b      	strb	r3, [r7, #0]
 800f484:	f8d9 3000 	ldr.w	r3, [r9]
 800f488:	42b0      	cmp	r0, r6
 800f48a:	bfac      	ite	ge
 800f48c:	2500      	movge	r5, #0
 800f48e:	2501      	movlt	r5, #1
 800f490:	b1eb      	cbz	r3, 800f4ce <generate_service_types+0xa2>
 800f492:	4a17      	ldr	r2, [pc, #92]	@ (800f4f0 <generate_service_types+0xc4>)
 800f494:	9405      	str	r4, [sp, #20]
 800f496:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f49a:	9200      	str	r2, [sp, #0]
 800f49c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800f4a0:	e9cd a401 	strd	sl, r4, [sp, #4]
 800f4a4:	4a11      	ldr	r2, [pc, #68]	@ (800f4ec <generate_service_types+0xc0>)
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	4631      	mov	r1, r6
 800f4aa:	f00a ff3b 	bl	801a324 <sniprintf>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	db10      	blt.n	800f4d4 <generate_service_types+0xa8>
 800f4b2:	42b0      	cmp	r0, r6
 800f4b4:	bfb4      	ite	lt
 800f4b6:	4628      	movlt	r0, r5
 800f4b8:	2000      	movge	r0, #0
 800f4ba:	b006      	add	sp, #24
 800f4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	703b      	strb	r3, [r7, #0]
 800f4c4:	f8d9 3000 	ldr.w	r3, [r9]
 800f4c8:	2500      	movs	r5, #0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1e1      	bne.n	800f492 <generate_service_types+0x66>
 800f4ce:	4b09      	ldr	r3, [pc, #36]	@ (800f4f4 <generate_service_types+0xc8>)
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	e7df      	b.n	800f494 <generate_service_types+0x68>
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	b006      	add	sp, #24
 800f4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4dc:	4b05      	ldr	r3, [pc, #20]	@ (800f4f4 <generate_service_types+0xc8>)
 800f4de:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800f4f0 <generate_service_types+0xc4>
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	e7ba      	b.n	800f45c <generate_service_types+0x30>
 800f4e6:	bf00      	nop
 800f4e8:	0801d6cc 	.word	0x0801d6cc
 800f4ec:	0801d6bc 	.word	0x0801d6bc
 800f4f0:	0801d6b8 	.word	0x0801d6b8
 800f4f4:	0801e2d4 	.word	0x0801e2d4
 800f4f8:	0801d6d0 	.word	0x0801d6d0

0800f4fc <generate_type_name>:
 800f4fc:	b530      	push	{r4, r5, lr}
 800f4fe:	2300      	movs	r3, #0
 800f500:	700b      	strb	r3, [r1, #0]
 800f502:	6803      	ldr	r3, [r0, #0]
 800f504:	b087      	sub	sp, #28
 800f506:	4614      	mov	r4, r2
 800f508:	b1d3      	cbz	r3, 800f540 <generate_type_name+0x44>
 800f50a:	4a0f      	ldr	r2, [pc, #60]	@ (800f548 <generate_type_name+0x4c>)
 800f50c:	4615      	mov	r5, r2
 800f50e:	9203      	str	r2, [sp, #12]
 800f510:	9500      	str	r5, [sp, #0]
 800f512:	6842      	ldr	r2, [r0, #4]
 800f514:	480d      	ldr	r0, [pc, #52]	@ (800f54c <generate_type_name+0x50>)
 800f516:	9001      	str	r0, [sp, #4]
 800f518:	4608      	mov	r0, r1
 800f51a:	490d      	ldr	r1, [pc, #52]	@ (800f550 <generate_type_name+0x54>)
 800f51c:	9204      	str	r2, [sp, #16]
 800f51e:	9105      	str	r1, [sp, #20]
 800f520:	9102      	str	r1, [sp, #8]
 800f522:	4a0c      	ldr	r2, [pc, #48]	@ (800f554 <generate_type_name+0x58>)
 800f524:	4621      	mov	r1, r4
 800f526:	f00a fefd 	bl	801a324 <sniprintf>
 800f52a:	2800      	cmp	r0, #0
 800f52c:	db05      	blt.n	800f53a <generate_type_name+0x3e>
 800f52e:	4284      	cmp	r4, r0
 800f530:	bfd4      	ite	le
 800f532:	2000      	movle	r0, #0
 800f534:	2001      	movgt	r0, #1
 800f536:	b007      	add	sp, #28
 800f538:	bd30      	pop	{r4, r5, pc}
 800f53a:	2000      	movs	r0, #0
 800f53c:	b007      	add	sp, #28
 800f53e:	bd30      	pop	{r4, r5, pc}
 800f540:	4b05      	ldr	r3, [pc, #20]	@ (800f558 <generate_type_name+0x5c>)
 800f542:	4a01      	ldr	r2, [pc, #4]	@ (800f548 <generate_type_name+0x4c>)
 800f544:	461d      	mov	r5, r3
 800f546:	e7e2      	b.n	800f50e <generate_type_name+0x12>
 800f548:	0801d6b8 	.word	0x0801d6b8
 800f54c:	0801d6d0 	.word	0x0801d6d0
 800f550:	0801d6cc 	.word	0x0801d6cc
 800f554:	0801d6bc 	.word	0x0801d6bc
 800f558:	0801e2d4 	.word	0x0801e2d4

0800f55c <generate_topic_name>:
 800f55c:	b510      	push	{r4, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	4614      	mov	r4, r2
 800f562:	9000      	str	r0, [sp, #0]
 800f564:	4b08      	ldr	r3, [pc, #32]	@ (800f588 <generate_topic_name+0x2c>)
 800f566:	4a09      	ldr	r2, [pc, #36]	@ (800f58c <generate_topic_name+0x30>)
 800f568:	4608      	mov	r0, r1
 800f56a:	4621      	mov	r1, r4
 800f56c:	f00a feda 	bl	801a324 <sniprintf>
 800f570:	2800      	cmp	r0, #0
 800f572:	db05      	blt.n	800f580 <generate_topic_name+0x24>
 800f574:	4284      	cmp	r4, r0
 800f576:	bfd4      	ite	le
 800f578:	2000      	movle	r0, #0
 800f57a:	2001      	movgt	r0, #1
 800f57c:	b002      	add	sp, #8
 800f57e:	bd10      	pop	{r4, pc}
 800f580:	2000      	movs	r0, #0
 800f582:	b002      	add	sp, #8
 800f584:	bd10      	pop	{r4, pc}
 800f586:	bf00      	nop
 800f588:	0801d6f4 	.word	0x0801d6f4
 800f58c:	0801d6d4 	.word	0x0801d6d4

0800f590 <is_uxrce_rmw_identifier_valid>:
 800f590:	b510      	push	{r4, lr}
 800f592:	4604      	mov	r4, r0
 800f594:	b140      	cbz	r0, 800f5a8 <is_uxrce_rmw_identifier_valid+0x18>
 800f596:	f008 fb8f 	bl	8017cb8 <rmw_get_implementation_identifier>
 800f59a:	4601      	mov	r1, r0
 800f59c:	4620      	mov	r0, r4
 800f59e:	f7f0 fe3f 	bl	8000220 <strcmp>
 800f5a2:	fab0 f080 	clz	r0, r0
 800f5a6:	0940      	lsrs	r0, r0, #5
 800f5a8:	bd10      	pop	{r4, pc}
 800f5aa:	bf00      	nop

0800f5ac <get_message_typesupport_handle>:
 800f5ac:	6883      	ldr	r3, [r0, #8]
 800f5ae:	4718      	bx	r3

0800f5b0 <get_message_typesupport_handle_function>:
 800f5b0:	b510      	push	{r4, lr}
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	6800      	ldr	r0, [r0, #0]
 800f5b6:	f7f0 fe33 	bl	8000220 <strcmp>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	bf0c      	ite	eq
 800f5be:	4620      	moveq	r0, r4
 800f5c0:	2000      	movne	r0, #0
 800f5c2:	bd10      	pop	{r4, pc}

0800f5c4 <get_service_typesupport_handle>:
 800f5c4:	6883      	ldr	r3, [r0, #8]
 800f5c6:	4718      	bx	r3

0800f5c8 <get_service_typesupport_handle_function>:
 800f5c8:	b510      	push	{r4, lr}
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	6800      	ldr	r0, [r0, #0]
 800f5ce:	f7f0 fe27 	bl	8000220 <strcmp>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	bf0c      	ite	eq
 800f5d6:	4620      	moveq	r0, r4
 800f5d8:	2000      	movne	r0, #0
 800f5da:	bd10      	pop	{r4, pc}

0800f5dc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e0:	6805      	ldr	r5, [r0, #0]
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	4628      	mov	r0, r5
 800f5e6:	460e      	mov	r6, r1
 800f5e8:	f7f0 fe1a 	bl	8000220 <strcmp>
 800f5ec:	b1c8      	cbz	r0, 800f622 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f5ee:	4b11      	ldr	r3, [pc, #68]	@ (800f634 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	429d      	cmp	r5, r3
 800f5f4:	d112      	bne.n	800f61c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f5f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f5fa:	f8d8 4000 	ldr.w	r4, [r8]
 800f5fe:	b16c      	cbz	r4, 800f61c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f600:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f604:	2700      	movs	r7, #0
 800f606:	3d04      	subs	r5, #4
 800f608:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f60c:	4631      	mov	r1, r6
 800f60e:	f7f0 fe07 	bl	8000220 <strcmp>
 800f612:	00bb      	lsls	r3, r7, #2
 800f614:	b140      	cbz	r0, 800f628 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f616:	3701      	adds	r7, #1
 800f618:	42bc      	cmp	r4, r7
 800f61a:	d1f5      	bne.n	800f608 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f61c:	2000      	movs	r0, #0
 800f61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f622:	4620      	mov	r0, r4
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f630:	58d3      	ldr	r3, [r2, r3]
 800f632:	4718      	bx	r3
 800f634:	20000528 	.word	0x20000528

0800f638 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f63c:	6805      	ldr	r5, [r0, #0]
 800f63e:	4604      	mov	r4, r0
 800f640:	4628      	mov	r0, r5
 800f642:	460e      	mov	r6, r1
 800f644:	f7f0 fdec 	bl	8000220 <strcmp>
 800f648:	b1c8      	cbz	r0, 800f67e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f64a:	4b11      	ldr	r3, [pc, #68]	@ (800f690 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	429d      	cmp	r5, r3
 800f650:	d112      	bne.n	800f678 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f652:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f656:	f8d8 4000 	ldr.w	r4, [r8]
 800f65a:	b16c      	cbz	r4, 800f678 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f65c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f660:	2700      	movs	r7, #0
 800f662:	3d04      	subs	r5, #4
 800f664:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f668:	4631      	mov	r1, r6
 800f66a:	f7f0 fdd9 	bl	8000220 <strcmp>
 800f66e:	00bb      	lsls	r3, r7, #2
 800f670:	b140      	cbz	r0, 800f684 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f672:	3701      	adds	r7, #1
 800f674:	42bc      	cmp	r4, r7
 800f676:	d1f5      	bne.n	800f664 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f678:	2000      	movs	r0, #0
 800f67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f67e:	4620      	mov	r0, r4
 800f680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f684:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f68c:	58d3      	ldr	r3, [r2, r3]
 800f68e:	4718      	bx	r3
 800f690:	20000528 	.word	0x20000528

0800f694 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f694:	4b04      	ldr	r3, [pc, #16]	@ (800f6a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	b10a      	cbz	r2, 800f69e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800f69a:	4803      	ldr	r0, [pc, #12]	@ (800f6a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f69c:	4770      	bx	lr
 800f69e:	4a03      	ldr	r2, [pc, #12]	@ (800f6ac <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800f6a0:	4801      	ldr	r0, [pc, #4]	@ (800f6a8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800f6a2:	6812      	ldr	r2, [r2, #0]
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	4770      	bx	lr
 800f6a8:	20000538 	.word	0x20000538
 800f6ac:	20000528 	.word	0x20000528

0800f6b0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f6b0:	4a02      	ldr	r2, [pc, #8]	@ (800f6bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800f6b2:	4b03      	ldr	r3, [pc, #12]	@ (800f6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800f6b4:	6812      	ldr	r2, [r2, #0]
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	20000528 	.word	0x20000528
 800f6c0:	20000538 	.word	0x20000538

0800f6c4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800f6c4:	2009      	movs	r0, #9
 800f6c6:	4770      	bx	lr

0800f6c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800f6c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop

0800f6d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800f6d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6d8:	e9c2 0100 	strd	r0, r1, [r2]
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop

0800f6e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800f6e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f6e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f6e8:	e9c1 2300 	strd	r2, r3, [r1]
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop

0800f6f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800f6f0:	f008 bec2 	b.w	8018478 <sensor_msgs__msg__Imu__init>

0800f6f4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800f6f4:	f008 bf16 	b.w	8018524 <sensor_msgs__msg__Imu__fini>

0800f6f8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800f6f8:	2009      	movs	r0, #9
 800f6fa:	4770      	bx	lr

0800f6fc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800f6fc:	2009      	movs	r0, #9
 800f6fe:	4770      	bx	lr

0800f700 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800f700:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop

0800f708 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800f708:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f70c:	4770      	bx	lr
 800f70e:	bf00      	nop

0800f710 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800f710:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop

0800f718 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800f718:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop

0800f720 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800f720:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop

0800f728 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800f728:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f730:	e9c2 0100 	strd	r0, r1, [r2]
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop

0800f738 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800f738:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f73c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f740:	e9c1 2300 	strd	r2, r3, [r1]
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop

0800f748 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800f748:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f750:	e9c2 0100 	strd	r0, r1, [r2]
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop

0800f758 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800f758:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f75c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f760:	e9c1 2300 	strd	r2, r3, [r1]
 800f764:	4770      	bx	lr
 800f766:	bf00      	nop

0800f768 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f768:	b510      	push	{r4, lr}
 800f76a:	f000 fa2b 	bl	800fbc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f76e:	4c0b      	ldr	r4, [pc, #44]	@ (800f79c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800f770:	60e0      	str	r0, [r4, #12]
 800f772:	f000 fd4b 	bl	801020c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f776:	64a0      	str	r0, [r4, #72]	@ 0x48
 800f778:	f7fb fa26 	bl	800abc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f77c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800f780:	f7fb fa22 	bl	800abc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f784:	4b06      	ldr	r3, [pc, #24]	@ (800f7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f786:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	b10a      	cbz	r2, 800f792 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800f78e:	4804      	ldr	r0, [pc, #16]	@ (800f7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f790:	bd10      	pop	{r4, pc}
 800f792:	4a04      	ldr	r2, [pc, #16]	@ (800f7a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800f794:	4802      	ldr	r0, [pc, #8]	@ (800f7a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800f796:	6812      	ldr	r2, [r2, #0]
 800f798:	601a      	str	r2, [r3, #0]
 800f79a:	bd10      	pop	{r4, pc}
 800f79c:	20000544 	.word	0x20000544
 800f7a0:	200006e8 	.word	0x200006e8
 800f7a4:	2000052c 	.word	0x2000052c

0800f7a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800f7a8:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f7ac:	4680      	mov	r8, r0
 800f7ae:	460f      	mov	r7, r1
 800f7b0:	f000 fb4c 	bl	800fe4c <get_serialized_size_std_msgs__msg__Header>
 800f7b4:	183c      	adds	r4, r7, r0
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	f108 0018 	add.w	r0, r8, #24
 800f7bc:	f000 fd34 	bl	8010228 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800f7c0:	4404      	add	r4, r0
 800f7c2:	2108      	movs	r1, #8
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f7fd f8e9 	bl	800c99c <ucdr_alignment>
 800f7ca:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f7ce:	4425      	add	r5, r4
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 800f7d6:	f7fb fa6b 	bl	800acb0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f7da:	4405      	add	r5, r0
 800f7dc:	2108      	movs	r1, #8
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f7fd f8dc 	bl	800c99c <ucdr_alignment>
 800f7e4:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f7e8:	4425      	add	r5, r4
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 800f7f0:	f7fb fa5e 	bl	800acb0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800f7f4:	4405      	add	r5, r0
 800f7f6:	2108      	movs	r1, #8
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f7fd f8cf 	bl	800c99c <ucdr_alignment>
 800f7fe:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f802:	4438      	add	r0, r7
 800f804:	4428      	add	r0, r5
 800f806:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800f80a:	bf00      	nop

0800f80c <get_serialized_size_sensor_msgs__msg__Imu>:
 800f80c:	b108      	cbz	r0, 800f812 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800f80e:	f7ff bfcb 	b.w	800f7a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f812:	4770      	bx	lr

0800f814 <_Imu__get_serialized_size>:
 800f814:	b110      	cbz	r0, 800f81c <_Imu__get_serialized_size+0x8>
 800f816:	2100      	movs	r1, #0
 800f818:	f7ff bfc6 	b.w	800f7a8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop

0800f820 <_Imu__cdr_deserialize>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	460c      	mov	r4, r1
 800f824:	b399      	cbz	r1, 800f88e <_Imu__cdr_deserialize+0x6e>
 800f826:	4605      	mov	r5, r0
 800f828:	f000 fb92 	bl	800ff50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f82c:	6843      	ldr	r3, [r0, #4]
 800f82e:	4621      	mov	r1, r4
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	4628      	mov	r0, r5
 800f834:	4798      	blx	r3
 800f836:	f000 fdab 	bl	8010390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f83a:	6843      	ldr	r3, [r0, #4]
 800f83c:	f104 0118 	add.w	r1, r4, #24
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	4628      	mov	r0, r5
 800f844:	4798      	blx	r3
 800f846:	2209      	movs	r2, #9
 800f848:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f84c:	4628      	mov	r0, r5
 800f84e:	f000 ffbf 	bl	80107d0 <ucdr_deserialize_array_double>
 800f852:	f7fb fab9 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f856:	6843      	ldr	r3, [r0, #4]
 800f858:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	4628      	mov	r0, r5
 800f860:	4798      	blx	r3
 800f862:	2209      	movs	r2, #9
 800f864:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f868:	4628      	mov	r0, r5
 800f86a:	f000 ffb1 	bl	80107d0 <ucdr_deserialize_array_double>
 800f86e:	f7fb faab 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f872:	6843      	ldr	r3, [r0, #4]
 800f874:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	4628      	mov	r0, r5
 800f87c:	4798      	blx	r3
 800f87e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f882:	4628      	mov	r0, r5
 800f884:	2209      	movs	r2, #9
 800f886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f88a:	f000 bfa1 	b.w	80107d0 <ucdr_deserialize_array_double>
 800f88e:	4608      	mov	r0, r1
 800f890:	bd38      	pop	{r3, r4, r5, pc}
 800f892:	bf00      	nop

0800f894 <_Imu__cdr_serialize>:
 800f894:	2800      	cmp	r0, #0
 800f896:	d035      	beq.n	800f904 <_Imu__cdr_serialize+0x70>
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	460d      	mov	r5, r1
 800f89c:	4604      	mov	r4, r0
 800f89e:	f000 fb57 	bl	800ff50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800f8a2:	6843      	ldr	r3, [r0, #4]
 800f8a4:	4629      	mov	r1, r5
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	4798      	blx	r3
 800f8ac:	f000 fd70 	bl	8010390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800f8b0:	6843      	ldr	r3, [r0, #4]
 800f8b2:	4629      	mov	r1, r5
 800f8b4:	689b      	ldr	r3, [r3, #8]
 800f8b6:	f104 0018 	add.w	r0, r4, #24
 800f8ba:	4798      	blx	r3
 800f8bc:	2209      	movs	r2, #9
 800f8be:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800f8c2:	4628      	mov	r0, r5
 800f8c4:	f000 fedc 	bl	8010680 <ucdr_serialize_array_double>
 800f8c8:	f7fb fa7e 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f8cc:	6843      	ldr	r3, [r0, #4]
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800f8d6:	4798      	blx	r3
 800f8d8:	2209      	movs	r2, #9
 800f8da:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800f8de:	4628      	mov	r0, r5
 800f8e0:	f000 fece 	bl	8010680 <ucdr_serialize_array_double>
 800f8e4:	f7fb fa70 	bl	800adc8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800f8e8:	6843      	ldr	r3, [r0, #4]
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	689b      	ldr	r3, [r3, #8]
 800f8ee:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800f8f2:	4798      	blx	r3
 800f8f4:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	2209      	movs	r2, #9
 800f8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f900:	f000 bebe 	b.w	8010680 <ucdr_serialize_array_double>
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop

0800f908 <max_serialized_size_sensor_msgs__msg__Imu>:
 800f908:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800f90c:	2301      	movs	r3, #1
 800f90e:	7003      	strb	r3, [r0, #0]
 800f910:	4680      	mov	r8, r0
 800f912:	460f      	mov	r7, r1
 800f914:	f000 fb12 	bl	800ff3c <max_serialized_size_std_msgs__msg__Header>
 800f918:	183c      	adds	r4, r7, r0
 800f91a:	4621      	mov	r1, r4
 800f91c:	4640      	mov	r0, r8
 800f91e:	f000 fd15 	bl	801034c <max_serialized_size_geometry_msgs__msg__Quaternion>
 800f922:	4404      	add	r4, r0
 800f924:	2108      	movs	r1, #8
 800f926:	4620      	mov	r0, r4
 800f928:	f7fd f838 	bl	800c99c <ucdr_alignment>
 800f92c:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800f930:	4425      	add	r5, r4
 800f932:	4629      	mov	r1, r5
 800f934:	4640      	mov	r0, r8
 800f936:	f7fb fa2b 	bl	800ad90 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f93a:	4405      	add	r5, r0
 800f93c:	2108      	movs	r1, #8
 800f93e:	4628      	mov	r0, r5
 800f940:	f7fd f82c 	bl	800c99c <ucdr_alignment>
 800f944:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800f948:	4425      	add	r5, r4
 800f94a:	4629      	mov	r1, r5
 800f94c:	4640      	mov	r0, r8
 800f94e:	f7fb fa1f 	bl	800ad90 <max_serialized_size_geometry_msgs__msg__Vector3>
 800f952:	4405      	add	r5, r0
 800f954:	2108      	movs	r1, #8
 800f956:	4628      	mov	r0, r5
 800f958:	f7fd f820 	bl	800c99c <ucdr_alignment>
 800f95c:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 800f960:	4438      	add	r0, r7
 800f962:	4428      	add	r0, r5
 800f964:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}

0800f968 <_Imu__max_serialized_size>:
 800f968:	b500      	push	{lr}
 800f96a:	b083      	sub	sp, #12
 800f96c:	2100      	movs	r1, #0
 800f96e:	f10d 0007 	add.w	r0, sp, #7
 800f972:	f7ff ffc9 	bl	800f908 <max_serialized_size_sensor_msgs__msg__Imu>
 800f976:	b003      	add	sp, #12
 800f978:	f85d fb04 	ldr.w	pc, [sp], #4

0800f97c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800f97c:	4800      	ldr	r0, [pc, #0]	@ (800f980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800f97e:	4770      	bx	lr
 800f980:	200006f4 	.word	0x200006f4

0800f984 <std_msgs__msg__Float64MultiArray__Sequence__init.part.0>:
 800f984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f988:	b086      	sub	sp, #24
 800f98a:	4682      	mov	sl, r0
 800f98c:	460e      	mov	r6, r1
 800f98e:	a801      	add	r0, sp, #4
 800f990:	f7fe fa4a 	bl	800de28 <rcutils_get_default_allocator>
 800f994:	2e00      	cmp	r6, #0
 800f996:	d03d      	beq.n	800fa14 <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x90>
 800f998:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 800f99c:	211c      	movs	r1, #28
 800f99e:	4642      	mov	r2, r8
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	4798      	blx	r3
 800f9a4:	4607      	mov	r7, r0
 800f9a6:	b390      	cbz	r0, 800fa0e <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x8a>
 800f9a8:	4605      	mov	r5, r0
 800f9aa:	2400      	movs	r4, #0
 800f9ac:	e007      	b.n	800f9be <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x3a>
 800f9ae:	f008 fd37 	bl	8018420 <rosidl_runtime_c__double__Sequence__init>
 800f9b2:	b170      	cbz	r0, 800f9d2 <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x4e>
 800f9b4:	3401      	adds	r4, #1
 800f9b6:	42a6      	cmp	r6, r4
 800f9b8:	f105 051c 	add.w	r5, r5, #28
 800f9bc:	d02b      	beq.n	800fa16 <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x92>
 800f9be:	4628      	mov	r0, r5
 800f9c0:	f000 f892 	bl	800fae8 <std_msgs__msg__MultiArrayLayout__init>
 800f9c4:	f105 0910 	add.w	r9, r5, #16
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	4648      	mov	r0, r9
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1ed      	bne.n	800f9ae <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x2a>
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	f000 f89a 	bl	800fb0c <std_msgs__msg__MultiArrayLayout__fini>
 800f9d8:	4648      	mov	r0, r9
 800f9da:	f008 fd39 	bl	8018450 <rosidl_runtime_c__double__Sequence__fini>
 800f9de:	42a6      	cmp	r6, r4
 800f9e0:	d919      	bls.n	800fa16 <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x92>
 800f9e2:	b17c      	cbz	r4, 800fa04 <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x80>
 800f9e4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800f9e8:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f9ec:	3c1c      	subs	r4, #28
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 f88c 	bl	800fb0c <std_msgs__msg__MultiArrayLayout__fini>
 800f9f4:	f104 0010 	add.w	r0, r4, #16
 800f9f8:	f008 fd2a 	bl	8018450 <rosidl_runtime_c__double__Sequence__fini>
 800f9fc:	42bc      	cmp	r4, r7
 800f9fe:	f1a4 041c 	sub.w	r4, r4, #28
 800fa02:	d1f4      	bne.n	800f9ee <std_msgs__msg__Float64MultiArray__Sequence__init.part.0+0x6a>
 800fa04:	4638      	mov	r0, r7
 800fa06:	9b02      	ldr	r3, [sp, #8]
 800fa08:	4641      	mov	r1, r8
 800fa0a:	4798      	blx	r3
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	b006      	add	sp, #24
 800fa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa14:	4637      	mov	r7, r6
 800fa16:	2001      	movs	r0, #1
 800fa18:	e9ca 7600 	strd	r7, r6, [sl]
 800fa1c:	f8ca 6008 	str.w	r6, [sl, #8]
 800fa20:	b006      	add	sp, #24
 800fa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa26:	bf00      	nop

0800fa28 <std_msgs__msg__Float64MultiArray__init>:
 800fa28:	b570      	push	{r4, r5, r6, lr}
 800fa2a:	4605      	mov	r5, r0
 800fa2c:	b1b0      	cbz	r0, 800fa5c <std_msgs__msg__Float64MultiArray__init+0x34>
 800fa2e:	f000 f85b 	bl	800fae8 <std_msgs__msg__MultiArrayLayout__init>
 800fa32:	4604      	mov	r4, r0
 800fa34:	b148      	cbz	r0, 800fa4a <std_msgs__msg__Float64MultiArray__init+0x22>
 800fa36:	f105 0610 	add.w	r6, r5, #16
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f008 fcef 	bl	8018420 <rosidl_runtime_c__double__Sequence__init>
 800fa42:	4604      	mov	r4, r0
 800fa44:	b168      	cbz	r0, 800fa62 <std_msgs__msg__Float64MultiArray__init+0x3a>
 800fa46:	4620      	mov	r0, r4
 800fa48:	bd70      	pop	{r4, r5, r6, pc}
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f000 f85e 	bl	800fb0c <std_msgs__msg__MultiArrayLayout__fini>
 800fa50:	f105 0010 	add.w	r0, r5, #16
 800fa54:	f008 fcfc 	bl	8018450 <rosidl_runtime_c__double__Sequence__fini>
 800fa58:	4620      	mov	r0, r4
 800fa5a:	bd70      	pop	{r4, r5, r6, pc}
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	4620      	mov	r0, r4
 800fa60:	bd70      	pop	{r4, r5, r6, pc}
 800fa62:	4628      	mov	r0, r5
 800fa64:	f000 f852 	bl	800fb0c <std_msgs__msg__MultiArrayLayout__fini>
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f008 fcf1 	bl	8018450 <rosidl_runtime_c__double__Sequence__fini>
 800fa6e:	e7ea      	b.n	800fa46 <std_msgs__msg__Float64MultiArray__init+0x1e>

0800fa70 <std_msgs__msg__Float64MultiArray__fini>:
 800fa70:	b148      	cbz	r0, 800fa86 <std_msgs__msg__Float64MultiArray__fini+0x16>
 800fa72:	b510      	push	{r4, lr}
 800fa74:	4604      	mov	r4, r0
 800fa76:	f000 f849 	bl	800fb0c <std_msgs__msg__MultiArrayLayout__fini>
 800fa7a:	f104 0010 	add.w	r0, r4, #16
 800fa7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa82:	f008 bce5 	b.w	8018450 <rosidl_runtime_c__double__Sequence__fini>
 800fa86:	4770      	bx	lr

0800fa88 <std_msgs__msg__Float64MultiArray__Sequence__init>:
 800fa88:	b108      	cbz	r0, 800fa8e <std_msgs__msg__Float64MultiArray__Sequence__init+0x6>
 800fa8a:	f7ff bf7b 	b.w	800f984 <std_msgs__msg__Float64MultiArray__Sequence__init.part.0>
 800fa8e:	4770      	bx	lr

0800fa90 <std_msgs__msg__Float64MultiArray__Sequence__fini>:
 800fa90:	b348      	cbz	r0, 800fae6 <std_msgs__msg__Float64MultiArray__Sequence__fini+0x56>
 800fa92:	b570      	push	{r4, r5, r6, lr}
 800fa94:	4606      	mov	r6, r0
 800fa96:	b086      	sub	sp, #24
 800fa98:	a801      	add	r0, sp, #4
 800fa9a:	f7fe f9c5 	bl	800de28 <rcutils_get_default_allocator>
 800fa9e:	6832      	ldr	r2, [r6, #0]
 800faa0:	b1da      	cbz	r2, 800fada <std_msgs__msg__Float64MultiArray__Sequence__fini+0x4a>
 800faa2:	68b1      	ldr	r1, [r6, #8]
 800faa4:	b189      	cbz	r1, 800faca <std_msgs__msg__Float64MultiArray__Sequence__fini+0x3a>
 800faa6:	2500      	movs	r5, #0
 800faa8:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800faac:	eb12 0483 	adds.w	r4, r2, r3, lsl #2
 800fab0:	4620      	mov	r0, r4
 800fab2:	d014      	beq.n	800fade <std_msgs__msg__Float64MultiArray__Sequence__fini+0x4e>
 800fab4:	f000 f82a 	bl	800fb0c <std_msgs__msg__MultiArrayLayout__fini>
 800fab8:	f104 0010 	add.w	r0, r4, #16
 800fabc:	f008 fcc8 	bl	8018450 <rosidl_runtime_c__double__Sequence__fini>
 800fac0:	68b1      	ldr	r1, [r6, #8]
 800fac2:	6832      	ldr	r2, [r6, #0]
 800fac4:	3501      	adds	r5, #1
 800fac6:	428d      	cmp	r5, r1
 800fac8:	d3ee      	bcc.n	800faa8 <std_msgs__msg__Float64MultiArray__Sequence__fini+0x18>
 800faca:	9b02      	ldr	r3, [sp, #8]
 800facc:	9905      	ldr	r1, [sp, #20]
 800face:	4610      	mov	r0, r2
 800fad0:	4798      	blx	r3
 800fad2:	2300      	movs	r3, #0
 800fad4:	e9c6 3300 	strd	r3, r3, [r6]
 800fad8:	60b3      	str	r3, [r6, #8]
 800fada:	b006      	add	sp, #24
 800fadc:	bd70      	pop	{r4, r5, r6, pc}
 800fade:	3501      	adds	r5, #1
 800fae0:	428d      	cmp	r5, r1
 800fae2:	d3e1      	bcc.n	800faa8 <std_msgs__msg__Float64MultiArray__Sequence__fini+0x18>
 800fae4:	e7f1      	b.n	800faca <std_msgs__msg__Float64MultiArray__Sequence__fini+0x3a>
 800fae6:	4770      	bx	lr

0800fae8 <std_msgs__msg__MultiArrayLayout__init>:
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4604      	mov	r4, r0
 800faec:	b130      	cbz	r0, 800fafc <std_msgs__msg__MultiArrayLayout__init+0x14>
 800faee:	2100      	movs	r1, #0
 800faf0:	f008 fdc0 	bl	8018674 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800faf4:	4605      	mov	r5, r0
 800faf6:	b120      	cbz	r0, 800fb02 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 800faf8:	4628      	mov	r0, r5
 800fafa:	bd38      	pop	{r3, r4, r5, pc}
 800fafc:	4605      	mov	r5, r0
 800fafe:	4628      	mov	r0, r5
 800fb00:	bd38      	pop	{r3, r4, r5, pc}
 800fb02:	4620      	mov	r0, r4
 800fb04:	f008 fdba 	bl	801867c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800fb08:	4628      	mov	r0, r5
 800fb0a:	bd38      	pop	{r3, r4, r5, pc}

0800fb0c <std_msgs__msg__MultiArrayLayout__fini>:
 800fb0c:	b108      	cbz	r0, 800fb12 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 800fb0e:	f008 bdb5 	b.w	801867c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800fb12:	4770      	bx	lr

0800fb14 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_init_function>:
 800fb14:	f008 bd1a 	b.w	801854c <std_msgs__msg__Bool__init>

0800fb18 <std_msgs__msg__Bool__rosidl_typesupport_introspection_c__Bool_fini_function>:
 800fb18:	f008 bd1c 	b.w	8018554 <std_msgs__msg__Bool__fini>

0800fb1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800fb1c:	4b04      	ldr	r3, [pc, #16]	@ (800fb30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	b10a      	cbz	r2, 800fb26 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0xa>
 800fb22:	4803      	ldr	r0, [pc, #12]	@ (800fb30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800fb24:	4770      	bx	lr
 800fb26:	4a03      	ldr	r2, [pc, #12]	@ (800fb34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x18>)
 800fb28:	4801      	ldr	r0, [pc, #4]	@ (800fb30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Bool+0x14>)
 800fb2a:	6812      	ldr	r2, [r2, #0]
 800fb2c:	601a      	str	r2, [r3, #0]
 800fb2e:	4770      	bx	lr
 800fb30:	20000758 	.word	0x20000758
 800fb34:	2000052c 	.word	0x2000052c

0800fb38 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 800fb38:	6840      	ldr	r0, [r0, #4]
 800fb3a:	4770      	bx	lr

0800fb3c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 800fb3c:	6800      	ldr	r0, [r0, #0]
 800fb3e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800fb42:	4770      	bx	lr

0800fb44 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 800fb44:	6803      	ldr	r3, [r0, #0]
 800fb46:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fb4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb4e:	e9c2 0100 	strd	r0, r1, [r2]
 800fb52:	4770      	bx	lr

0800fb54 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 800fb54:	6803      	ldr	r3, [r0, #0]
 800fb56:	ed92 7b00 	vldr	d7, [r2]
 800fb5a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fb5e:	ed81 7b00 	vstr	d7, [r1]
 800fb62:	4770      	bx	lr

0800fb64 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 800fb64:	f7ff bf60 	b.w	800fa28 <std_msgs__msg__Float64MultiArray__init>

0800fb68 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 800fb68:	f7ff bf82 	b.w	800fa70 <std_msgs__msg__Float64MultiArray__fini>

0800fb6c <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	4604      	mov	r4, r0
 800fb72:	9101      	str	r1, [sp, #4]
 800fb74:	f008 fc6c 	bl	8018450 <rosidl_runtime_c__double__Sequence__fini>
 800fb78:	9901      	ldr	r1, [sp, #4]
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	b002      	add	sp, #8
 800fb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb82:	f008 bc4d 	b.w	8018420 <rosidl_runtime_c__double__Sequence__init>
 800fb86:	bf00      	nop

0800fb88 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 800fb88:	6800      	ldr	r0, [r0, #0]
 800fb8a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800fb8e:	4770      	bx	lr

0800fb90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800fb90:	b508      	push	{r3, lr}
 800fb92:	f000 f871 	bl	800fc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800fb96:	4b06      	ldr	r3, [pc, #24]	@ (800fbb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800fb98:	4906      	ldr	r1, [pc, #24]	@ (800fbb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	60c8      	str	r0, [r1, #12]
 800fb9e:	b10a      	cbz	r2, 800fba4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 800fba0:	4803      	ldr	r0, [pc, #12]	@ (800fbb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800fba2:	bd08      	pop	{r3, pc}
 800fba4:	4a04      	ldr	r2, [pc, #16]	@ (800fbb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 800fba6:	4802      	ldr	r0, [pc, #8]	@ (800fbb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800fba8:	6812      	ldr	r2, [r2, #0]
 800fbaa:	601a      	str	r2, [r3, #0]
 800fbac:	bd08      	pop	{r3, pc}
 800fbae:	bf00      	nop
 800fbb0:	200007dc 	.word	0x200007dc
 800fbb4:	20000764 	.word	0x20000764
 800fbb8:	2000052c 	.word	0x2000052c

0800fbbc <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800fbbc:	f008 bccc 	b.w	8018558 <std_msgs__msg__Header__init>

0800fbc0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800fbc0:	f008 bcee 	b.w	80185a0 <std_msgs__msg__Header__fini>

0800fbc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800fbc4:	b508      	push	{r3, lr}
 800fbc6:	f000 fa71 	bl	80100ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fbca:	4b06      	ldr	r3, [pc, #24]	@ (800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fbcc:	4906      	ldr	r1, [pc, #24]	@ (800fbe8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	60c8      	str	r0, [r1, #12]
 800fbd2:	b10a      	cbz	r2, 800fbd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800fbd4:	4803      	ldr	r0, [pc, #12]	@ (800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fbd6:	bd08      	pop	{r3, pc}
 800fbd8:	4a04      	ldr	r2, [pc, #16]	@ (800fbec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800fbda:	4802      	ldr	r0, [pc, #8]	@ (800fbe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800fbdc:	6812      	ldr	r2, [r2, #0]
 800fbde:	601a      	str	r2, [r3, #0]
 800fbe0:	bd08      	pop	{r3, pc}
 800fbe2:	bf00      	nop
 800fbe4:	20000860 	.word	0x20000860
 800fbe8:	200007e8 	.word	0x200007e8
 800fbec:	2000052c 	.word	0x2000052c

0800fbf0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800fbf0:	6840      	ldr	r0, [r0, #4]
 800fbf2:	4770      	bx	lr

0800fbf4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800fbf4:	6800      	ldr	r0, [r0, #0]
 800fbf6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800fbfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800fbfe:	4770      	bx	lr

0800fc00 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800fc00:	6803      	ldr	r3, [r0, #0]
 800fc02:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800fc06:	b500      	push	{lr}
 800fc08:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800fc0c:	4694      	mov	ip, r2
 800fc0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc16:	f8de 3000 	ldr.w	r3, [lr]
 800fc1a:	f8cc 3000 	str.w	r3, [ip]
 800fc1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc22:	bf00      	nop

0800fc24 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800fc24:	6803      	ldr	r3, [r0, #0]
 800fc26:	b500      	push	{lr}
 800fc28:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800fc2c:	4696      	mov	lr, r2
 800fc2e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800fc32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc3a:	f8de 3000 	ldr.w	r3, [lr]
 800fc3e:	f8cc 3000 	str.w	r3, [ip]
 800fc42:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc46:	bf00      	nop

0800fc48 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800fc48:	f7ff bf4e 	b.w	800fae8 <std_msgs__msg__MultiArrayLayout__init>

0800fc4c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800fc4c:	f7ff bf5e 	b.w	800fb0c <std_msgs__msg__MultiArrayLayout__fini>

0800fc50 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800fc50:	b510      	push	{r4, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	4604      	mov	r4, r0
 800fc56:	9101      	str	r1, [sp, #4]
 800fc58:	f008 fd10 	bl	801867c <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800fc5c:	9901      	ldr	r1, [sp, #4]
 800fc5e:	4620      	mov	r0, r4
 800fc60:	b002      	add	sp, #8
 800fc62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc66:	f008 bd05 	b.w	8018674 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800fc6a:	bf00      	nop

0800fc6c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800fc6c:	6800      	ldr	r0, [r0, #0]
 800fc6e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800fc72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800fc76:	4770      	bx	lr

0800fc78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800fc78:	b508      	push	{r3, lr}
 800fc7a:	f008 fd2b 	bl	80186d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800fc7e:	4b06      	ldr	r3, [pc, #24]	@ (800fc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800fc80:	4906      	ldr	r1, [pc, #24]	@ (800fc9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	60c8      	str	r0, [r1, #12]
 800fc86:	b10a      	cbz	r2, 800fc8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800fc88:	4803      	ldr	r0, [pc, #12]	@ (800fc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800fc8a:	bd08      	pop	{r3, pc}
 800fc8c:	4a04      	ldr	r2, [pc, #16]	@ (800fca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800fc8e:	4802      	ldr	r0, [pc, #8]	@ (800fc98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800fc90:	6812      	ldr	r2, [r2, #0]
 800fc92:	601a      	str	r2, [r3, #0]
 800fc94:	bd08      	pop	{r3, pc}
 800fc96:	bf00      	nop
 800fc98:	200008e4 	.word	0x200008e4
 800fc9c:	2000086c 	.word	0x2000086c
 800fca0:	2000052c 	.word	0x2000052c

0800fca4 <_Bool__max_serialized_size>:
 800fca4:	b508      	push	{r3, lr}
 800fca6:	2101      	movs	r1, #1
 800fca8:	2000      	movs	r0, #0
 800fcaa:	f7fc fe77 	bl	800c99c <ucdr_alignment>
 800fcae:	3001      	adds	r0, #1
 800fcb0:	bd08      	pop	{r3, pc}
 800fcb2:	bf00      	nop

0800fcb4 <_Bool__cdr_deserialize>:
 800fcb4:	b109      	cbz	r1, 800fcba <_Bool__cdr_deserialize+0x6>
 800fcb6:	f7fb bb73 	b.w	800b3a0 <ucdr_deserialize_bool>
 800fcba:	4608      	mov	r0, r1
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop

0800fcc0 <get_serialized_size_std_msgs__msg__Bool>:
 800fcc0:	b138      	cbz	r0, 800fcd2 <get_serialized_size_std_msgs__msg__Bool+0x12>
 800fcc2:	b508      	push	{r3, lr}
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	2101      	movs	r1, #1
 800fcca:	f7fc fe67 	bl	800c99c <ucdr_alignment>
 800fcce:	3001      	adds	r0, #1
 800fcd0:	bd08      	pop	{r3, pc}
 800fcd2:	4770      	bx	lr

0800fcd4 <_Bool__cdr_serialize>:
 800fcd4:	460a      	mov	r2, r1
 800fcd6:	b118      	cbz	r0, 800fce0 <_Bool__cdr_serialize+0xc>
 800fcd8:	7801      	ldrb	r1, [r0, #0]
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7fb bb4a 	b.w	800b374 <ucdr_serialize_bool>
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop

0800fce4 <_Bool__get_serialized_size>:
 800fce4:	b130      	cbz	r0, 800fcf4 <_Bool__get_serialized_size+0x10>
 800fce6:	b508      	push	{r3, lr}
 800fce8:	2101      	movs	r1, #1
 800fcea:	2000      	movs	r0, #0
 800fcec:	f7fc fe56 	bl	800c99c <ucdr_alignment>
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	bd08      	pop	{r3, pc}
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop

0800fcf8 <max_serialized_size_std_msgs__msg__Bool>:
 800fcf8:	b508      	push	{r3, lr}
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	2101      	movs	r1, #1
 800fcfe:	7001      	strb	r1, [r0, #0]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fc fe4b 	bl	800c99c <ucdr_alignment>
 800fd06:	3001      	adds	r0, #1
 800fd08:	bd08      	pop	{r3, pc}
 800fd0a:	bf00      	nop

0800fd0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool>:
 800fd0c:	4800      	ldr	r0, [pc, #0]	@ (800fd10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Bool+0x4>)
 800fd0e:	4770      	bx	lr
 800fd10:	200008f0 	.word	0x200008f0

0800fd14 <_Float64MultiArray__max_serialized_size>:
 800fd14:	b500      	push	{lr}
 800fd16:	b083      	sub	sp, #12
 800fd18:	2301      	movs	r3, #1
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	f10d 0007 	add.w	r0, sp, #7
 800fd20:	f88d 3007 	strb.w	r3, [sp, #7]
 800fd24:	f000 f9b0 	bl	8010088 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800fd28:	b003      	add	sp, #12
 800fd2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd2e:	bf00      	nop

0800fd30 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd32:	4604      	mov	r4, r0
 800fd34:	b160      	cbz	r0, 800fd50 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800fd36:	460d      	mov	r5, r1
 800fd38:	f000 f94a 	bl	800ffd0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800fd3c:	182e      	adds	r6, r5, r0
 800fd3e:	4630      	mov	r0, r6
 800fd40:	2104      	movs	r1, #4
 800fd42:	6967      	ldr	r7, [r4, #20]
 800fd44:	f7fc fe2a 	bl	800c99c <ucdr_alignment>
 800fd48:	1d03      	adds	r3, r0, #4
 800fd4a:	441e      	add	r6, r3
 800fd4c:	b90f      	cbnz	r7, 800fd52 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800fd4e:	1b70      	subs	r0, r6, r5
 800fd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd52:	4630      	mov	r0, r6
 800fd54:	2108      	movs	r1, #8
 800fd56:	f7fc fe21 	bl	800c99c <ucdr_alignment>
 800fd5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800fd5e:	181e      	adds	r6, r3, r0
 800fd60:	1b70      	subs	r0, r6, r5
 800fd62:	e7f5      	b.n	800fd50 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800fd64 <_Float64MultiArray__cdr_deserialize>:
 800fd64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd66:	460c      	mov	r4, r1
 800fd68:	b083      	sub	sp, #12
 800fd6a:	b1d1      	cbz	r1, 800fda2 <_Float64MultiArray__cdr_deserialize+0x3e>
 800fd6c:	4606      	mov	r6, r0
 800fd6e:	f000 f995 	bl	801009c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800fd72:	6843      	ldr	r3, [r0, #4]
 800fd74:	4621      	mov	r1, r4
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	4630      	mov	r0, r6
 800fd7a:	4798      	blx	r3
 800fd7c:	69a7      	ldr	r7, [r4, #24]
 800fd7e:	6921      	ldr	r1, [r4, #16]
 800fd80:	ab01      	add	r3, sp, #4
 800fd82:	463a      	mov	r2, r7
 800fd84:	4630      	mov	r0, r6
 800fd86:	f000 fe39 	bl	80109fc <ucdr_deserialize_sequence_double>
 800fd8a:	9b01      	ldr	r3, [sp, #4]
 800fd8c:	4605      	mov	r5, r0
 800fd8e:	b920      	cbnz	r0, 800fd9a <_Float64MultiArray__cdr_deserialize+0x36>
 800fd90:	429f      	cmp	r7, r3
 800fd92:	d30a      	bcc.n	800fdaa <_Float64MultiArray__cdr_deserialize+0x46>
 800fd94:	4628      	mov	r0, r5
 800fd96:	b003      	add	sp, #12
 800fd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	6163      	str	r3, [r4, #20]
 800fd9e:	b003      	add	sp, #12
 800fda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fda2:	460d      	mov	r5, r1
 800fda4:	4628      	mov	r0, r5
 800fda6:	b003      	add	sp, #12
 800fda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdaa:	2301      	movs	r3, #1
 800fdac:	75b0      	strb	r0, [r6, #22]
 800fdae:	7573      	strb	r3, [r6, #21]
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	6165      	str	r5, [r4, #20]
 800fdb4:	2108      	movs	r1, #8
 800fdb6:	f7fc fe07 	bl	800c9c8 <ucdr_align_to>
 800fdba:	9901      	ldr	r1, [sp, #4]
 800fdbc:	4630      	mov	r0, r6
 800fdbe:	00c9      	lsls	r1, r1, #3
 800fdc0:	f7fc fe38 	bl	800ca34 <ucdr_advance_buffer>
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	b003      	add	sp, #12
 800fdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdca:	bf00      	nop

0800fdcc <_Float64MultiArray__cdr_serialize>:
 800fdcc:	b180      	cbz	r0, 800fdf0 <_Float64MultiArray__cdr_serialize+0x24>
 800fdce:	b538      	push	{r3, r4, r5, lr}
 800fdd0:	460d      	mov	r5, r1
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	f000 f962 	bl	801009c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800fdd8:	6843      	ldr	r3, [r0, #4]
 800fdda:	4629      	mov	r1, r5
 800fddc:	689b      	ldr	r3, [r3, #8]
 800fdde:	4620      	mov	r0, r4
 800fde0:	4798      	blx	r3
 800fde2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800fde6:	4628      	mov	r0, r5
 800fde8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdec:	f000 bdf4 	b.w	80109d8 <ucdr_serialize_sequence_double>
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop

0800fdf4 <_Float64MultiArray__get_serialized_size>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	b150      	cbz	r0, 800fe10 <_Float64MultiArray__get_serialized_size+0x1c>
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	f000 f8e8 	bl	800ffd0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800fe00:	2104      	movs	r1, #4
 800fe02:	6966      	ldr	r6, [r4, #20]
 800fe04:	4605      	mov	r5, r0
 800fe06:	f7fc fdc9 	bl	800c99c <ucdr_alignment>
 800fe0a:	4428      	add	r0, r5
 800fe0c:	1d04      	adds	r4, r0, #4
 800fe0e:	b90e      	cbnz	r6, 800fe14 <_Float64MultiArray__get_serialized_size+0x20>
 800fe10:	4620      	mov	r0, r4
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	4620      	mov	r0, r4
 800fe16:	2108      	movs	r1, #8
 800fe18:	f7fc fdc0 	bl	800c99c <ucdr_alignment>
 800fe1c:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800fe20:	4404      	add	r4, r0
 800fe22:	4620      	mov	r0, r4
 800fe24:	bd70      	pop	{r4, r5, r6, pc}
 800fe26:	bf00      	nop

0800fe28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800fe28:	4800      	ldr	r0, [pc, #0]	@ (800fe2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800fe2a:	4770      	bx	lr
 800fe2c:	20000918 	.word	0x20000918

0800fe30 <_Header__max_serialized_size>:
 800fe30:	b500      	push	{lr}
 800fe32:	b083      	sub	sp, #12
 800fe34:	2301      	movs	r3, #1
 800fe36:	2100      	movs	r1, #0
 800fe38:	f10d 0007 	add.w	r0, sp, #7
 800fe3c:	f88d 3007 	strb.w	r3, [sp, #7]
 800fe40:	f000 f992 	bl	8010168 <max_serialized_size_builtin_interfaces__msg__Time>
 800fe44:	b003      	add	sp, #12
 800fe46:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe4a:	bf00      	nop

0800fe4c <get_serialized_size_std_msgs__msg__Header>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	4605      	mov	r5, r0
 800fe50:	b168      	cbz	r0, 800fe6e <get_serialized_size_std_msgs__msg__Header+0x22>
 800fe52:	460c      	mov	r4, r1
 800fe54:	f000 f938 	bl	80100c8 <get_serialized_size_builtin_interfaces__msg__Time>
 800fe58:	1826      	adds	r6, r4, r0
 800fe5a:	2104      	movs	r1, #4
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	f7fc fd9d 	bl	800c99c <ucdr_alignment>
 800fe62:	68e9      	ldr	r1, [r5, #12]
 800fe64:	f1c4 0405 	rsb	r4, r4, #5
 800fe68:	440c      	add	r4, r1
 800fe6a:	4404      	add	r4, r0
 800fe6c:	19a0      	adds	r0, r4, r6
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}

0800fe70 <_Header__cdr_deserialize>:
 800fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe72:	460c      	mov	r4, r1
 800fe74:	b083      	sub	sp, #12
 800fe76:	b1e1      	cbz	r1, 800feb2 <_Header__cdr_deserialize+0x42>
 800fe78:	4606      	mov	r6, r0
 800fe7a:	f000 f989 	bl	8010190 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fe7e:	6843      	ldr	r3, [r0, #4]
 800fe80:	4621      	mov	r1, r4
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	4630      	mov	r0, r6
 800fe86:	4798      	blx	r3
 800fe88:	6927      	ldr	r7, [r4, #16]
 800fe8a:	68a1      	ldr	r1, [r4, #8]
 800fe8c:	ab01      	add	r3, sp, #4
 800fe8e:	463a      	mov	r2, r7
 800fe90:	4630      	mov	r0, r6
 800fe92:	f000 fd5b 	bl	801094c <ucdr_deserialize_sequence_char>
 800fe96:	9b01      	ldr	r3, [sp, #4]
 800fe98:	4605      	mov	r5, r0
 800fe9a:	b920      	cbnz	r0, 800fea6 <_Header__cdr_deserialize+0x36>
 800fe9c:	429f      	cmp	r7, r3
 800fe9e:	d30c      	bcc.n	800feba <_Header__cdr_deserialize+0x4a>
 800fea0:	4628      	mov	r0, r5
 800fea2:	b003      	add	sp, #12
 800fea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fea6:	b103      	cbz	r3, 800feaa <_Header__cdr_deserialize+0x3a>
 800fea8:	3b01      	subs	r3, #1
 800feaa:	4628      	mov	r0, r5
 800feac:	60e3      	str	r3, [r4, #12]
 800feae:	b003      	add	sp, #12
 800feb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feb2:	460d      	mov	r5, r1
 800feb4:	4628      	mov	r0, r5
 800feb6:	b003      	add	sp, #12
 800feb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feba:	2101      	movs	r1, #1
 800febc:	75b0      	strb	r0, [r6, #22]
 800febe:	7571      	strb	r1, [r6, #21]
 800fec0:	4630      	mov	r0, r6
 800fec2:	60e5      	str	r5, [r4, #12]
 800fec4:	f7fc fd80 	bl	800c9c8 <ucdr_align_to>
 800fec8:	4630      	mov	r0, r6
 800feca:	9901      	ldr	r1, [sp, #4]
 800fecc:	f7fc fdb2 	bl	800ca34 <ucdr_advance_buffer>
 800fed0:	4628      	mov	r0, r5
 800fed2:	b003      	add	sp, #12
 800fed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed6:	bf00      	nop

0800fed8 <_Header__cdr_serialize>:
 800fed8:	b1f8      	cbz	r0, 800ff1a <_Header__cdr_serialize+0x42>
 800feda:	b570      	push	{r4, r5, r6, lr}
 800fedc:	4604      	mov	r4, r0
 800fede:	460d      	mov	r5, r1
 800fee0:	f000 f956 	bl	8010190 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fee4:	6843      	ldr	r3, [r0, #4]
 800fee6:	4629      	mov	r1, r5
 800fee8:	689b      	ldr	r3, [r3, #8]
 800feea:	4620      	mov	r0, r4
 800feec:	4798      	blx	r3
 800feee:	68a6      	ldr	r6, [r4, #8]
 800fef0:	b156      	cbz	r6, 800ff08 <_Header__cdr_serialize+0x30>
 800fef2:	4630      	mov	r0, r6
 800fef4:	f7f0 f99e 	bl	8000234 <strlen>
 800fef8:	4631      	mov	r1, r6
 800fefa:	60e0      	str	r0, [r4, #12]
 800fefc:	1c42      	adds	r2, r0, #1
 800fefe:	4628      	mov	r0, r5
 800ff00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff04:	f000 bd10 	b.w	8010928 <ucdr_serialize_sequence_char>
 800ff08:	4630      	mov	r0, r6
 800ff0a:	60e0      	str	r0, [r4, #12]
 800ff0c:	4632      	mov	r2, r6
 800ff0e:	4631      	mov	r1, r6
 800ff10:	4628      	mov	r0, r5
 800ff12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff16:	f000 bd07 	b.w	8010928 <ucdr_serialize_sequence_char>
 800ff1a:	4770      	bx	lr

0800ff1c <_Header__get_serialized_size>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	4604      	mov	r4, r0
 800ff20:	b150      	cbz	r0, 800ff38 <_Header__get_serialized_size+0x1c>
 800ff22:	2100      	movs	r1, #0
 800ff24:	f000 f8d0 	bl	80100c8 <get_serialized_size_builtin_interfaces__msg__Time>
 800ff28:	2104      	movs	r1, #4
 800ff2a:	4605      	mov	r5, r0
 800ff2c:	f7fc fd36 	bl	800c99c <ucdr_alignment>
 800ff30:	68e2      	ldr	r2, [r4, #12]
 800ff32:	3205      	adds	r2, #5
 800ff34:	1953      	adds	r3, r2, r5
 800ff36:	4418      	add	r0, r3
 800ff38:	bd38      	pop	{r3, r4, r5, pc}
 800ff3a:	bf00      	nop

0800ff3c <max_serialized_size_std_msgs__msg__Header>:
 800ff3c:	b510      	push	{r4, lr}
 800ff3e:	2301      	movs	r3, #1
 800ff40:	4604      	mov	r4, r0
 800ff42:	7003      	strb	r3, [r0, #0]
 800ff44:	f000 f910 	bl	8010168 <max_serialized_size_builtin_interfaces__msg__Time>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	7023      	strb	r3, [r4, #0]
 800ff4c:	bd10      	pop	{r4, pc}
 800ff4e:	bf00      	nop

0800ff50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800ff50:	4800      	ldr	r0, [pc, #0]	@ (800ff54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800ff52:	4770      	bx	lr
 800ff54:	20000940 	.word	0x20000940

0800ff58 <_MultiArrayLayout__max_serialized_size>:
 800ff58:	b508      	push	{r3, lr}
 800ff5a:	2104      	movs	r1, #4
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f7fc fd1d 	bl	800c99c <ucdr_alignment>
 800ff62:	3004      	adds	r0, #4
 800ff64:	bd08      	pop	{r3, pc}
 800ff66:	bf00      	nop

0800ff68 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800ff68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff6c:	4689      	mov	r9, r1
 800ff6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ff72:	4607      	mov	r7, r0
 800ff74:	2104      	movs	r1, #4
 800ff76:	4648      	mov	r0, r9
 800ff78:	f7fc fd10 	bl	800c99c <ucdr_alignment>
 800ff7c:	f109 0304 	add.w	r3, r9, #4
 800ff80:	18c6      	adds	r6, r0, r3
 800ff82:	f1b8 0f00 	cmp.w	r8, #0
 800ff86:	d018      	beq.n	800ffba <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800ff88:	2500      	movs	r5, #0
 800ff8a:	f008 fc41 	bl	8018810 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ff8e:	683a      	ldr	r2, [r7, #0]
 800ff90:	6843      	ldr	r3, [r0, #4]
 800ff92:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800ff96:	4631      	mov	r1, r6
 800ff98:	695b      	ldr	r3, [r3, #20]
 800ff9a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800ff9e:	4798      	blx	r3
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	2c04      	cmp	r4, #4
 800ffa4:	4621      	mov	r1, r4
 800ffa6:	4630      	mov	r0, r6
 800ffa8:	bf28      	it	cs
 800ffaa:	2104      	movcs	r1, #4
 800ffac:	f7fc fcf6 	bl	800c99c <ucdr_alignment>
 800ffb0:	3501      	adds	r5, #1
 800ffb2:	4404      	add	r4, r0
 800ffb4:	45a8      	cmp	r8, r5
 800ffb6:	4426      	add	r6, r4
 800ffb8:	d1e7      	bne.n	800ff8a <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800ffba:	2104      	movs	r1, #4
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	f7fc fced 	bl	800c99c <ucdr_alignment>
 800ffc2:	f1c9 0904 	rsb	r9, r9, #4
 800ffc6:	444e      	add	r6, r9
 800ffc8:	4430      	add	r0, r6
 800ffca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffce:	bf00      	nop

0800ffd0 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800ffd0:	b108      	cbz	r0, 800ffd6 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800ffd2:	f7ff bfc9 	b.w	800ff68 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ffd6:	4770      	bx	lr

0800ffd8 <_MultiArrayLayout__get_serialized_size>:
 800ffd8:	b110      	cbz	r0, 800ffe0 <_MultiArrayLayout__get_serialized_size+0x8>
 800ffda:	2100      	movs	r1, #0
 800ffdc:	f7ff bfc4 	b.w	800ff68 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop

0800ffe4 <_MultiArrayLayout__cdr_deserialize>:
 800ffe4:	b349      	cbz	r1, 801003a <_MultiArrayLayout__cdr_deserialize+0x56>
 800ffe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffe8:	460e      	mov	r6, r1
 800ffea:	b083      	sub	sp, #12
 800ffec:	a901      	add	r1, sp, #4
 800ffee:	4607      	mov	r7, r0
 800fff0:	f7fb fd34 	bl	800ba5c <ucdr_deserialize_uint32_t>
 800fff4:	9b01      	ldr	r3, [sp, #4]
 800fff6:	68b2      	ldr	r2, [r6, #8]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d31b      	bcc.n	8010034 <_MultiArrayLayout__cdr_deserialize+0x50>
 800fffc:	6073      	str	r3, [r6, #4]
 800fffe:	b18b      	cbz	r3, 8010024 <_MultiArrayLayout__cdr_deserialize+0x40>
 8010000:	2400      	movs	r4, #0
 8010002:	4625      	mov	r5, r4
 8010004:	e002      	b.n	801000c <_MultiArrayLayout__cdr_deserialize+0x28>
 8010006:	9b01      	ldr	r3, [sp, #4]
 8010008:	429d      	cmp	r5, r3
 801000a:	d20b      	bcs.n	8010024 <_MultiArrayLayout__cdr_deserialize+0x40>
 801000c:	f008 fc00 	bl	8018810 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010010:	6831      	ldr	r1, [r6, #0]
 8010012:	6843      	ldr	r3, [r0, #4]
 8010014:	4421      	add	r1, r4
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	4638      	mov	r0, r7
 801001a:	4798      	blx	r3
 801001c:	3501      	adds	r5, #1
 801001e:	3414      	adds	r4, #20
 8010020:	2800      	cmp	r0, #0
 8010022:	d1f0      	bne.n	8010006 <_MultiArrayLayout__cdr_deserialize+0x22>
 8010024:	f106 010c 	add.w	r1, r6, #12
 8010028:	4638      	mov	r0, r7
 801002a:	b003      	add	sp, #12
 801002c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010030:	f7fb bd14 	b.w	800ba5c <ucdr_deserialize_uint32_t>
 8010034:	2000      	movs	r0, #0
 8010036:	b003      	add	sp, #12
 8010038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801003a:	2000      	movs	r0, #0
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop

08010040 <_MultiArrayLayout__cdr_serialize>:
 8010040:	b308      	cbz	r0, 8010086 <_MultiArrayLayout__cdr_serialize+0x46>
 8010042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010044:	6847      	ldr	r7, [r0, #4]
 8010046:	460e      	mov	r6, r1
 8010048:	4605      	mov	r5, r0
 801004a:	4608      	mov	r0, r1
 801004c:	4639      	mov	r1, r7
 801004e:	f7fb fbd5 	bl	800b7fc <ucdr_serialize_uint32_t>
 8010052:	b190      	cbz	r0, 801007a <_MultiArrayLayout__cdr_serialize+0x3a>
 8010054:	b18f      	cbz	r7, 801007a <_MultiArrayLayout__cdr_serialize+0x3a>
 8010056:	2400      	movs	r4, #0
 8010058:	e001      	b.n	801005e <_MultiArrayLayout__cdr_serialize+0x1e>
 801005a:	42a7      	cmp	r7, r4
 801005c:	d00d      	beq.n	801007a <_MultiArrayLayout__cdr_serialize+0x3a>
 801005e:	f008 fbd7 	bl	8018810 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010062:	682a      	ldr	r2, [r5, #0]
 8010064:	6843      	ldr	r3, [r0, #4]
 8010066:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	4631      	mov	r1, r6
 801006e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8010072:	3401      	adds	r4, #1
 8010074:	4798      	blx	r3
 8010076:	2800      	cmp	r0, #0
 8010078:	d1ef      	bne.n	801005a <_MultiArrayLayout__cdr_serialize+0x1a>
 801007a:	68e9      	ldr	r1, [r5, #12]
 801007c:	4630      	mov	r0, r6
 801007e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010082:	f7fb bbbb 	b.w	800b7fc <ucdr_serialize_uint32_t>
 8010086:	4770      	bx	lr

08010088 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010088:	b508      	push	{r3, lr}
 801008a:	4603      	mov	r3, r0
 801008c:	2200      	movs	r2, #0
 801008e:	4608      	mov	r0, r1
 8010090:	701a      	strb	r2, [r3, #0]
 8010092:	2104      	movs	r1, #4
 8010094:	f7fc fc82 	bl	800c99c <ucdr_alignment>
 8010098:	3004      	adds	r0, #4
 801009a:	bd08      	pop	{r3, pc}

0801009c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 801009c:	4800      	ldr	r0, [pc, #0]	@ (80100a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 801009e:	4770      	bx	lr
 80100a0:	20000968 	.word	0x20000968

080100a4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80100a4:	f008 bbb8 	b.w	8018818 <builtin_interfaces__msg__Time__init>

080100a8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80100a8:	f008 bbba 	b.w	8018820 <builtin_interfaces__msg__Time__fini>

080100ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80100ac:	4b04      	ldr	r3, [pc, #16]	@ (80100c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	b10a      	cbz	r2, 80100b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80100b2:	4803      	ldr	r0, [pc, #12]	@ (80100c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80100b4:	4770      	bx	lr
 80100b6:	4a03      	ldr	r2, [pc, #12]	@ (80100c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80100b8:	4801      	ldr	r0, [pc, #4]	@ (80100c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80100ba:	6812      	ldr	r2, [r2, #0]
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	4770      	bx	lr
 80100c0:	20000a08 	.word	0x20000a08
 80100c4:	2000052c 	.word	0x2000052c

080100c8 <get_serialized_size_builtin_interfaces__msg__Time>:
 80100c8:	b180      	cbz	r0, 80100ec <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80100ca:	b538      	push	{r3, r4, r5, lr}
 80100cc:	460d      	mov	r5, r1
 80100ce:	4628      	mov	r0, r5
 80100d0:	2104      	movs	r1, #4
 80100d2:	f7fc fc63 	bl	800c99c <ucdr_alignment>
 80100d6:	1d2b      	adds	r3, r5, #4
 80100d8:	181c      	adds	r4, r3, r0
 80100da:	2104      	movs	r1, #4
 80100dc:	4620      	mov	r0, r4
 80100de:	f7fc fc5d 	bl	800c99c <ucdr_alignment>
 80100e2:	f1c5 0504 	rsb	r5, r5, #4
 80100e6:	4428      	add	r0, r5
 80100e8:	4420      	add	r0, r4
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop

080100f0 <_Time__cdr_deserialize>:
 80100f0:	b538      	push	{r3, r4, r5, lr}
 80100f2:	460c      	mov	r4, r1
 80100f4:	b141      	cbz	r1, 8010108 <_Time__cdr_deserialize+0x18>
 80100f6:	4605      	mov	r5, r0
 80100f8:	f7fc f832 	bl	800c160 <ucdr_deserialize_int32_t>
 80100fc:	1d21      	adds	r1, r4, #4
 80100fe:	4628      	mov	r0, r5
 8010100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010104:	f7fb bcaa 	b.w	800ba5c <ucdr_deserialize_uint32_t>
 8010108:	4608      	mov	r0, r1
 801010a:	bd38      	pop	{r3, r4, r5, pc}

0801010c <_Time__cdr_serialize>:
 801010c:	b160      	cbz	r0, 8010128 <_Time__cdr_serialize+0x1c>
 801010e:	b538      	push	{r3, r4, r5, lr}
 8010110:	460d      	mov	r5, r1
 8010112:	4604      	mov	r4, r0
 8010114:	6801      	ldr	r1, [r0, #0]
 8010116:	4628      	mov	r0, r5
 8010118:	f7fb ff8a 	bl	800c030 <ucdr_serialize_int32_t>
 801011c:	6861      	ldr	r1, [r4, #4]
 801011e:	4628      	mov	r0, r5
 8010120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010124:	f7fb bb6a 	b.w	800b7fc <ucdr_serialize_uint32_t>
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop

0801012c <_Time__get_serialized_size>:
 801012c:	b160      	cbz	r0, 8010148 <_Time__get_serialized_size+0x1c>
 801012e:	b510      	push	{r4, lr}
 8010130:	2104      	movs	r1, #4
 8010132:	2000      	movs	r0, #0
 8010134:	f7fc fc32 	bl	800c99c <ucdr_alignment>
 8010138:	1d04      	adds	r4, r0, #4
 801013a:	2104      	movs	r1, #4
 801013c:	4620      	mov	r0, r4
 801013e:	f7fc fc2d 	bl	800c99c <ucdr_alignment>
 8010142:	3004      	adds	r0, #4
 8010144:	4420      	add	r0, r4
 8010146:	bd10      	pop	{r4, pc}
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop

0801014c <_Time__max_serialized_size>:
 801014c:	b510      	push	{r4, lr}
 801014e:	2104      	movs	r1, #4
 8010150:	2000      	movs	r0, #0
 8010152:	f7fc fc23 	bl	800c99c <ucdr_alignment>
 8010156:	1d04      	adds	r4, r0, #4
 8010158:	2104      	movs	r1, #4
 801015a:	4620      	mov	r0, r4
 801015c:	f7fc fc1e 	bl	800c99c <ucdr_alignment>
 8010160:	3004      	adds	r0, #4
 8010162:	4420      	add	r0, r4
 8010164:	bd10      	pop	{r4, pc}
 8010166:	bf00      	nop

08010168 <max_serialized_size_builtin_interfaces__msg__Time>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	460c      	mov	r4, r1
 801016c:	2301      	movs	r3, #1
 801016e:	7003      	strb	r3, [r0, #0]
 8010170:	2104      	movs	r1, #4
 8010172:	4620      	mov	r0, r4
 8010174:	f7fc fc12 	bl	800c99c <ucdr_alignment>
 8010178:	1d25      	adds	r5, r4, #4
 801017a:	4405      	add	r5, r0
 801017c:	2104      	movs	r1, #4
 801017e:	4628      	mov	r0, r5
 8010180:	f7fc fc0c 	bl	800c99c <ucdr_alignment>
 8010184:	f1c4 0404 	rsb	r4, r4, #4
 8010188:	4420      	add	r0, r4
 801018a:	4428      	add	r0, r5
 801018c:	bd38      	pop	{r3, r4, r5, pc}
 801018e:	bf00      	nop

08010190 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010190:	4800      	ldr	r0, [pc, #0]	@ (8010194 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010192:	4770      	bx	lr
 8010194:	20000a14 	.word	0x20000a14

08010198 <geometry_msgs__msg__Twist__init>:
 8010198:	b570      	push	{r4, r5, r6, lr}
 801019a:	4605      	mov	r5, r0
 801019c:	b1a8      	cbz	r0, 80101ca <geometry_msgs__msg__Twist__init+0x32>
 801019e:	f000 f82b 	bl	80101f8 <geometry_msgs__msg__Vector3__init>
 80101a2:	4604      	mov	r4, r0
 80101a4:	b140      	cbz	r0, 80101b8 <geometry_msgs__msg__Twist__init+0x20>
 80101a6:	f105 0618 	add.w	r6, r5, #24
 80101aa:	4630      	mov	r0, r6
 80101ac:	f000 f824 	bl	80101f8 <geometry_msgs__msg__Vector3__init>
 80101b0:	4604      	mov	r4, r0
 80101b2:	b168      	cbz	r0, 80101d0 <geometry_msgs__msg__Twist__init+0x38>
 80101b4:	4620      	mov	r0, r4
 80101b6:	bd70      	pop	{r4, r5, r6, pc}
 80101b8:	4628      	mov	r0, r5
 80101ba:	f000 f821 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80101be:	f105 0018 	add.w	r0, r5, #24
 80101c2:	f000 f81d 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80101c6:	4620      	mov	r0, r4
 80101c8:	bd70      	pop	{r4, r5, r6, pc}
 80101ca:	4604      	mov	r4, r0
 80101cc:	4620      	mov	r0, r4
 80101ce:	bd70      	pop	{r4, r5, r6, pc}
 80101d0:	4628      	mov	r0, r5
 80101d2:	f000 f815 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80101d6:	4630      	mov	r0, r6
 80101d8:	f000 f812 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80101dc:	e7ea      	b.n	80101b4 <geometry_msgs__msg__Twist__init+0x1c>
 80101de:	bf00      	nop

080101e0 <geometry_msgs__msg__Twist__fini>:
 80101e0:	b148      	cbz	r0, 80101f6 <geometry_msgs__msg__Twist__fini+0x16>
 80101e2:	b510      	push	{r4, lr}
 80101e4:	4604      	mov	r4, r0
 80101e6:	f000 f80b 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80101ea:	f104 0018 	add.w	r0, r4, #24
 80101ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101f2:	f000 b805 	b.w	8010200 <geometry_msgs__msg__Vector3__fini>
 80101f6:	4770      	bx	lr

080101f8 <geometry_msgs__msg__Vector3__init>:
 80101f8:	3800      	subs	r0, #0
 80101fa:	bf18      	it	ne
 80101fc:	2001      	movne	r0, #1
 80101fe:	4770      	bx	lr

08010200 <geometry_msgs__msg__Vector3__fini>:
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop

08010204 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8010204:	f008 bb10 	b.w	8018828 <geometry_msgs__msg__Quaternion__init>

08010208 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8010208:	f008 bb22 	b.w	8018850 <geometry_msgs__msg__Quaternion__fini>

0801020c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801020c:	4b04      	ldr	r3, [pc, #16]	@ (8010220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	b10a      	cbz	r2, 8010216 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8010212:	4803      	ldr	r0, [pc, #12]	@ (8010220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8010214:	4770      	bx	lr
 8010216:	4a03      	ldr	r2, [pc, #12]	@ (8010224 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8010218:	4801      	ldr	r0, [pc, #4]	@ (8010220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801021a:	6812      	ldr	r2, [r2, #0]
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	4770      	bx	lr
 8010220:	20000b2c 	.word	0x20000b2c
 8010224:	2000052c 	.word	0x2000052c

08010228 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8010228:	b1f0      	cbz	r0, 8010268 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 801022a:	b570      	push	{r4, r5, r6, lr}
 801022c:	460d      	mov	r5, r1
 801022e:	4628      	mov	r0, r5
 8010230:	2108      	movs	r1, #8
 8010232:	f7fc fbb3 	bl	800c99c <ucdr_alignment>
 8010236:	f105 0308 	add.w	r3, r5, #8
 801023a:	181e      	adds	r6, r3, r0
 801023c:	2108      	movs	r1, #8
 801023e:	4630      	mov	r0, r6
 8010240:	f7fc fbac 	bl	800c99c <ucdr_alignment>
 8010244:	f100 0408 	add.w	r4, r0, #8
 8010248:	4434      	add	r4, r6
 801024a:	2108      	movs	r1, #8
 801024c:	4620      	mov	r0, r4
 801024e:	f7fc fba5 	bl	800c99c <ucdr_alignment>
 8010252:	3008      	adds	r0, #8
 8010254:	4404      	add	r4, r0
 8010256:	2108      	movs	r1, #8
 8010258:	4620      	mov	r0, r4
 801025a:	f7fc fb9f 	bl	800c99c <ucdr_alignment>
 801025e:	f1c5 0508 	rsb	r5, r5, #8
 8010262:	4428      	add	r0, r5
 8010264:	4420      	add	r0, r4
 8010266:	bd70      	pop	{r4, r5, r6, pc}
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop

0801026c <_Quaternion__cdr_deserialize>:
 801026c:	b538      	push	{r3, r4, r5, lr}
 801026e:	460c      	mov	r4, r1
 8010270:	b199      	cbz	r1, 801029a <_Quaternion__cdr_deserialize+0x2e>
 8010272:	4605      	mov	r5, r0
 8010274:	f7fc f9a6 	bl	800c5c4 <ucdr_deserialize_double>
 8010278:	f104 0108 	add.w	r1, r4, #8
 801027c:	4628      	mov	r0, r5
 801027e:	f7fc f9a1 	bl	800c5c4 <ucdr_deserialize_double>
 8010282:	f104 0110 	add.w	r1, r4, #16
 8010286:	4628      	mov	r0, r5
 8010288:	f7fc f99c 	bl	800c5c4 <ucdr_deserialize_double>
 801028c:	f104 0118 	add.w	r1, r4, #24
 8010290:	4628      	mov	r0, r5
 8010292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010296:	f7fc b995 	b.w	800c5c4 <ucdr_deserialize_double>
 801029a:	4608      	mov	r0, r1
 801029c:	bd38      	pop	{r3, r4, r5, pc}
 801029e:	bf00      	nop

080102a0 <_Quaternion__cdr_serialize>:
 80102a0:	b1c0      	cbz	r0, 80102d4 <_Quaternion__cdr_serialize+0x34>
 80102a2:	b538      	push	{r3, r4, r5, lr}
 80102a4:	ed90 0b00 	vldr	d0, [r0]
 80102a8:	460d      	mov	r5, r1
 80102aa:	4604      	mov	r4, r0
 80102ac:	4608      	mov	r0, r1
 80102ae:	f7fb ffe7 	bl	800c280 <ucdr_serialize_double>
 80102b2:	ed94 0b02 	vldr	d0, [r4, #8]
 80102b6:	4628      	mov	r0, r5
 80102b8:	f7fb ffe2 	bl	800c280 <ucdr_serialize_double>
 80102bc:	ed94 0b04 	vldr	d0, [r4, #16]
 80102c0:	4628      	mov	r0, r5
 80102c2:	f7fb ffdd 	bl	800c280 <ucdr_serialize_double>
 80102c6:	ed94 0b06 	vldr	d0, [r4, #24]
 80102ca:	4628      	mov	r0, r5
 80102cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102d0:	f7fb bfd6 	b.w	800c280 <ucdr_serialize_double>
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop

080102d8 <_Quaternion__get_serialized_size>:
 80102d8:	b1d0      	cbz	r0, 8010310 <_Quaternion__get_serialized_size+0x38>
 80102da:	b538      	push	{r3, r4, r5, lr}
 80102dc:	2108      	movs	r1, #8
 80102de:	2000      	movs	r0, #0
 80102e0:	f7fc fb5c 	bl	800c99c <ucdr_alignment>
 80102e4:	f100 0508 	add.w	r5, r0, #8
 80102e8:	2108      	movs	r1, #8
 80102ea:	4628      	mov	r0, r5
 80102ec:	f7fc fb56 	bl	800c99c <ucdr_alignment>
 80102f0:	f100 0408 	add.w	r4, r0, #8
 80102f4:	442c      	add	r4, r5
 80102f6:	2108      	movs	r1, #8
 80102f8:	4620      	mov	r0, r4
 80102fa:	f7fc fb4f 	bl	800c99c <ucdr_alignment>
 80102fe:	3008      	adds	r0, #8
 8010300:	4404      	add	r4, r0
 8010302:	2108      	movs	r1, #8
 8010304:	4620      	mov	r0, r4
 8010306:	f7fc fb49 	bl	800c99c <ucdr_alignment>
 801030a:	3008      	adds	r0, #8
 801030c:	4420      	add	r0, r4
 801030e:	bd38      	pop	{r3, r4, r5, pc}
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop

08010314 <_Quaternion__max_serialized_size>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	2108      	movs	r1, #8
 8010318:	2000      	movs	r0, #0
 801031a:	f7fc fb3f 	bl	800c99c <ucdr_alignment>
 801031e:	f100 0508 	add.w	r5, r0, #8
 8010322:	2108      	movs	r1, #8
 8010324:	4628      	mov	r0, r5
 8010326:	f7fc fb39 	bl	800c99c <ucdr_alignment>
 801032a:	f100 0408 	add.w	r4, r0, #8
 801032e:	442c      	add	r4, r5
 8010330:	2108      	movs	r1, #8
 8010332:	4620      	mov	r0, r4
 8010334:	f7fc fb32 	bl	800c99c <ucdr_alignment>
 8010338:	3008      	adds	r0, #8
 801033a:	4404      	add	r4, r0
 801033c:	2108      	movs	r1, #8
 801033e:	4620      	mov	r0, r4
 8010340:	f7fc fb2c 	bl	800c99c <ucdr_alignment>
 8010344:	3008      	adds	r0, #8
 8010346:	4420      	add	r0, r4
 8010348:	bd38      	pop	{r3, r4, r5, pc}
 801034a:	bf00      	nop

0801034c <max_serialized_size_geometry_msgs__msg__Quaternion>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	2301      	movs	r3, #1
 8010350:	460c      	mov	r4, r1
 8010352:	7003      	strb	r3, [r0, #0]
 8010354:	2108      	movs	r1, #8
 8010356:	4620      	mov	r0, r4
 8010358:	f7fc fb20 	bl	800c99c <ucdr_alignment>
 801035c:	f104 0508 	add.w	r5, r4, #8
 8010360:	1946      	adds	r6, r0, r5
 8010362:	2108      	movs	r1, #8
 8010364:	4630      	mov	r0, r6
 8010366:	f7fc fb19 	bl	800c99c <ucdr_alignment>
 801036a:	f100 0508 	add.w	r5, r0, #8
 801036e:	4435      	add	r5, r6
 8010370:	2108      	movs	r1, #8
 8010372:	4628      	mov	r0, r5
 8010374:	f7fc fb12 	bl	800c99c <ucdr_alignment>
 8010378:	3008      	adds	r0, #8
 801037a:	4405      	add	r5, r0
 801037c:	2108      	movs	r1, #8
 801037e:	4628      	mov	r0, r5
 8010380:	f7fc fb0c 	bl	800c99c <ucdr_alignment>
 8010384:	f1c4 0408 	rsb	r4, r4, #8
 8010388:	4420      	add	r0, r4
 801038a:	4428      	add	r0, r5
 801038c:	bd70      	pop	{r4, r5, r6, pc}
 801038e:	bf00      	nop

08010390 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8010390:	4800      	ldr	r0, [pc, #0]	@ (8010394 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8010392:	4770      	bx	lr
 8010394:	20000b38 	.word	0x20000b38

08010398 <imu_custom_msg__srv__Calibrate_Request__init>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4604      	mov	r4, r0
 801039c:	b130      	cbz	r0, 80103ac <imu_custom_msg__srv__Calibrate_Request__init+0x14>
 801039e:	2100      	movs	r1, #0
 80103a0:	f7ff fb72 	bl	800fa88 <std_msgs__msg__Float64MultiArray__Sequence__init>
 80103a4:	4605      	mov	r5, r0
 80103a6:	b120      	cbz	r0, 80103b2 <imu_custom_msg__srv__Calibrate_Request__init+0x1a>
 80103a8:	4628      	mov	r0, r5
 80103aa:	bd38      	pop	{r3, r4, r5, pc}
 80103ac:	4605      	mov	r5, r0
 80103ae:	4628      	mov	r0, r5
 80103b0:	bd38      	pop	{r3, r4, r5, pc}
 80103b2:	4620      	mov	r0, r4
 80103b4:	f7ff fb6c 	bl	800fa90 <std_msgs__msg__Float64MultiArray__Sequence__fini>
 80103b8:	4628      	mov	r0, r5
 80103ba:	bd38      	pop	{r3, r4, r5, pc}

080103bc <imu_custom_msg__srv__Calibrate_Request__fini>:
 80103bc:	b108      	cbz	r0, 80103c2 <imu_custom_msg__srv__Calibrate_Request__fini+0x6>
 80103be:	f7ff bb67 	b.w	800fa90 <std_msgs__msg__Float64MultiArray__Sequence__fini>
 80103c2:	4770      	bx	lr

080103c4 <imu_custom_msg__srv__Calibrate_Response__init>:
 80103c4:	b538      	push	{r3, r4, r5, lr}
 80103c6:	4604      	mov	r4, r0
 80103c8:	b128      	cbz	r0, 80103d6 <imu_custom_msg__srv__Calibrate_Response__init+0x12>
 80103ca:	f008 f8bf 	bl	801854c <std_msgs__msg__Bool__init>
 80103ce:	4605      	mov	r5, r0
 80103d0:	b120      	cbz	r0, 80103dc <imu_custom_msg__srv__Calibrate_Response__init+0x18>
 80103d2:	4628      	mov	r0, r5
 80103d4:	bd38      	pop	{r3, r4, r5, pc}
 80103d6:	4605      	mov	r5, r0
 80103d8:	4628      	mov	r0, r5
 80103da:	bd38      	pop	{r3, r4, r5, pc}
 80103dc:	4620      	mov	r0, r4
 80103de:	f008 f8b9 	bl	8018554 <std_msgs__msg__Bool__fini>
 80103e2:	4628      	mov	r0, r5
 80103e4:	bd38      	pop	{r3, r4, r5, pc}
 80103e6:	bf00      	nop

080103e8 <imu_custom_msg__srv__Calibrate_Response__fini>:
 80103e8:	b108      	cbz	r0, 80103ee <imu_custom_msg__srv__Calibrate_Response__fini+0x6>
 80103ea:	f008 b8b3 	b.w	8018554 <std_msgs__msg__Bool__fini>
 80103ee:	4770      	bx	lr

080103f0 <imu_custom_msg__srv__GetStatus_Request__init>:
 80103f0:	3800      	subs	r0, #0
 80103f2:	bf18      	it	ne
 80103f4:	2001      	movne	r0, #1
 80103f6:	4770      	bx	lr

080103f8 <imu_custom_msg__srv__GetStatus_Request__fini>:
 80103f8:	4770      	bx	lr
 80103fa:	bf00      	nop

080103fc <imu_custom_msg__srv__GetStatus_Response__init>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4604      	mov	r4, r0
 8010400:	b128      	cbz	r0, 801040e <imu_custom_msg__srv__GetStatus_Response__init+0x12>
 8010402:	f008 f8a3 	bl	801854c <std_msgs__msg__Bool__init>
 8010406:	4605      	mov	r5, r0
 8010408:	b120      	cbz	r0, 8010414 <imu_custom_msg__srv__GetStatus_Response__init+0x18>
 801040a:	4628      	mov	r0, r5
 801040c:	bd38      	pop	{r3, r4, r5, pc}
 801040e:	4605      	mov	r5, r0
 8010410:	4628      	mov	r0, r5
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	4620      	mov	r0, r4
 8010416:	f008 f89d 	bl	8018554 <std_msgs__msg__Bool__fini>
 801041a:	4628      	mov	r0, r5
 801041c:	bd38      	pop	{r3, r4, r5, pc}
 801041e:	bf00      	nop

08010420 <imu_custom_msg__srv__GetStatus_Response__fini>:
 8010420:	b108      	cbz	r0, 8010426 <imu_custom_msg__srv__GetStatus_Response__fini+0x6>
 8010422:	f008 b897 	b.w	8018554 <std_msgs__msg__Bool__fini>
 8010426:	4770      	bx	lr

08010428 <ucdr_serialize_endian_array_char>:
 8010428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801042c:	4619      	mov	r1, r3
 801042e:	461f      	mov	r7, r3
 8010430:	4605      	mov	r5, r0
 8010432:	4690      	mov	r8, r2
 8010434:	f7fc fa5a 	bl	800c8ec <ucdr_check_buffer_available_for>
 8010438:	b9e0      	cbnz	r0, 8010474 <ucdr_serialize_endian_array_char+0x4c>
 801043a:	463e      	mov	r6, r7
 801043c:	e009      	b.n	8010452 <ucdr_serialize_endian_array_char+0x2a>
 801043e:	68a8      	ldr	r0, [r5, #8]
 8010440:	f00a f9a7 	bl	801a792 <memcpy>
 8010444:	68ab      	ldr	r3, [r5, #8]
 8010446:	6928      	ldr	r0, [r5, #16]
 8010448:	4423      	add	r3, r4
 801044a:	4420      	add	r0, r4
 801044c:	1b36      	subs	r6, r6, r4
 801044e:	60ab      	str	r3, [r5, #8]
 8010450:	6128      	str	r0, [r5, #16]
 8010452:	4631      	mov	r1, r6
 8010454:	2201      	movs	r2, #1
 8010456:	4628      	mov	r0, r5
 8010458:	f7fc fad0 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 801045c:	1bb9      	subs	r1, r7, r6
 801045e:	4441      	add	r1, r8
 8010460:	4604      	mov	r4, r0
 8010462:	4602      	mov	r2, r0
 8010464:	2800      	cmp	r0, #0
 8010466:	d1ea      	bne.n	801043e <ucdr_serialize_endian_array_char+0x16>
 8010468:	2301      	movs	r3, #1
 801046a:	7da8      	ldrb	r0, [r5, #22]
 801046c:	756b      	strb	r3, [r5, #21]
 801046e:	4058      	eors	r0, r3
 8010470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010474:	463a      	mov	r2, r7
 8010476:	68a8      	ldr	r0, [r5, #8]
 8010478:	4641      	mov	r1, r8
 801047a:	f00a f98a 	bl	801a792 <memcpy>
 801047e:	68aa      	ldr	r2, [r5, #8]
 8010480:	692b      	ldr	r3, [r5, #16]
 8010482:	443a      	add	r2, r7
 8010484:	443b      	add	r3, r7
 8010486:	60aa      	str	r2, [r5, #8]
 8010488:	612b      	str	r3, [r5, #16]
 801048a:	e7ed      	b.n	8010468 <ucdr_serialize_endian_array_char+0x40>

0801048c <ucdr_deserialize_endian_array_char>:
 801048c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010490:	4619      	mov	r1, r3
 8010492:	461f      	mov	r7, r3
 8010494:	4605      	mov	r5, r0
 8010496:	4690      	mov	r8, r2
 8010498:	f7fc fa28 	bl	800c8ec <ucdr_check_buffer_available_for>
 801049c:	b9e0      	cbnz	r0, 80104d8 <ucdr_deserialize_endian_array_char+0x4c>
 801049e:	463e      	mov	r6, r7
 80104a0:	e009      	b.n	80104b6 <ucdr_deserialize_endian_array_char+0x2a>
 80104a2:	68a9      	ldr	r1, [r5, #8]
 80104a4:	f00a f975 	bl	801a792 <memcpy>
 80104a8:	68ab      	ldr	r3, [r5, #8]
 80104aa:	6928      	ldr	r0, [r5, #16]
 80104ac:	4423      	add	r3, r4
 80104ae:	4420      	add	r0, r4
 80104b0:	1b36      	subs	r6, r6, r4
 80104b2:	60ab      	str	r3, [r5, #8]
 80104b4:	6128      	str	r0, [r5, #16]
 80104b6:	2201      	movs	r2, #1
 80104b8:	4631      	mov	r1, r6
 80104ba:	4628      	mov	r0, r5
 80104bc:	f7fc fa9e 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 80104c0:	4604      	mov	r4, r0
 80104c2:	1bb8      	subs	r0, r7, r6
 80104c4:	4440      	add	r0, r8
 80104c6:	4622      	mov	r2, r4
 80104c8:	2c00      	cmp	r4, #0
 80104ca:	d1ea      	bne.n	80104a2 <ucdr_deserialize_endian_array_char+0x16>
 80104cc:	2301      	movs	r3, #1
 80104ce:	7da8      	ldrb	r0, [r5, #22]
 80104d0:	756b      	strb	r3, [r5, #21]
 80104d2:	4058      	eors	r0, r3
 80104d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d8:	463a      	mov	r2, r7
 80104da:	68a9      	ldr	r1, [r5, #8]
 80104dc:	4640      	mov	r0, r8
 80104de:	f00a f958 	bl	801a792 <memcpy>
 80104e2:	68aa      	ldr	r2, [r5, #8]
 80104e4:	692b      	ldr	r3, [r5, #16]
 80104e6:	443a      	add	r2, r7
 80104e8:	443b      	add	r3, r7
 80104ea:	60aa      	str	r2, [r5, #8]
 80104ec:	612b      	str	r3, [r5, #16]
 80104ee:	e7ed      	b.n	80104cc <ucdr_deserialize_endian_array_char+0x40>

080104f0 <ucdr_serialize_array_uint8_t>:
 80104f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f4:	4688      	mov	r8, r1
 80104f6:	4611      	mov	r1, r2
 80104f8:	4617      	mov	r7, r2
 80104fa:	4605      	mov	r5, r0
 80104fc:	f7fc f9f6 	bl	800c8ec <ucdr_check_buffer_available_for>
 8010500:	b9e0      	cbnz	r0, 801053c <ucdr_serialize_array_uint8_t+0x4c>
 8010502:	463e      	mov	r6, r7
 8010504:	e009      	b.n	801051a <ucdr_serialize_array_uint8_t+0x2a>
 8010506:	68a8      	ldr	r0, [r5, #8]
 8010508:	f00a f943 	bl	801a792 <memcpy>
 801050c:	68aa      	ldr	r2, [r5, #8]
 801050e:	692b      	ldr	r3, [r5, #16]
 8010510:	4422      	add	r2, r4
 8010512:	4423      	add	r3, r4
 8010514:	1b36      	subs	r6, r6, r4
 8010516:	60aa      	str	r2, [r5, #8]
 8010518:	612b      	str	r3, [r5, #16]
 801051a:	4631      	mov	r1, r6
 801051c:	2201      	movs	r2, #1
 801051e:	4628      	mov	r0, r5
 8010520:	f7fc fa6c 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 8010524:	1bb9      	subs	r1, r7, r6
 8010526:	4441      	add	r1, r8
 8010528:	4604      	mov	r4, r0
 801052a:	4602      	mov	r2, r0
 801052c:	2800      	cmp	r0, #0
 801052e:	d1ea      	bne.n	8010506 <ucdr_serialize_array_uint8_t+0x16>
 8010530:	2301      	movs	r3, #1
 8010532:	7da8      	ldrb	r0, [r5, #22]
 8010534:	756b      	strb	r3, [r5, #21]
 8010536:	4058      	eors	r0, r3
 8010538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801053c:	463a      	mov	r2, r7
 801053e:	68a8      	ldr	r0, [r5, #8]
 8010540:	4641      	mov	r1, r8
 8010542:	f00a f926 	bl	801a792 <memcpy>
 8010546:	68aa      	ldr	r2, [r5, #8]
 8010548:	692b      	ldr	r3, [r5, #16]
 801054a:	443a      	add	r2, r7
 801054c:	443b      	add	r3, r7
 801054e:	60aa      	str	r2, [r5, #8]
 8010550:	612b      	str	r3, [r5, #16]
 8010552:	e7ed      	b.n	8010530 <ucdr_serialize_array_uint8_t+0x40>

08010554 <ucdr_serialize_endian_array_uint8_t>:
 8010554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010558:	4619      	mov	r1, r3
 801055a:	461f      	mov	r7, r3
 801055c:	4605      	mov	r5, r0
 801055e:	4690      	mov	r8, r2
 8010560:	f7fc f9c4 	bl	800c8ec <ucdr_check_buffer_available_for>
 8010564:	b9e0      	cbnz	r0, 80105a0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010566:	463e      	mov	r6, r7
 8010568:	e009      	b.n	801057e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801056a:	68a8      	ldr	r0, [r5, #8]
 801056c:	f00a f911 	bl	801a792 <memcpy>
 8010570:	68ab      	ldr	r3, [r5, #8]
 8010572:	6928      	ldr	r0, [r5, #16]
 8010574:	4423      	add	r3, r4
 8010576:	4420      	add	r0, r4
 8010578:	1b36      	subs	r6, r6, r4
 801057a:	60ab      	str	r3, [r5, #8]
 801057c:	6128      	str	r0, [r5, #16]
 801057e:	4631      	mov	r1, r6
 8010580:	2201      	movs	r2, #1
 8010582:	4628      	mov	r0, r5
 8010584:	f7fc fa3a 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 8010588:	1bb9      	subs	r1, r7, r6
 801058a:	4441      	add	r1, r8
 801058c:	4604      	mov	r4, r0
 801058e:	4602      	mov	r2, r0
 8010590:	2800      	cmp	r0, #0
 8010592:	d1ea      	bne.n	801056a <ucdr_serialize_endian_array_uint8_t+0x16>
 8010594:	2301      	movs	r3, #1
 8010596:	7da8      	ldrb	r0, [r5, #22]
 8010598:	756b      	strb	r3, [r5, #21]
 801059a:	4058      	eors	r0, r3
 801059c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a0:	463a      	mov	r2, r7
 80105a2:	68a8      	ldr	r0, [r5, #8]
 80105a4:	4641      	mov	r1, r8
 80105a6:	f00a f8f4 	bl	801a792 <memcpy>
 80105aa:	68aa      	ldr	r2, [r5, #8]
 80105ac:	692b      	ldr	r3, [r5, #16]
 80105ae:	443a      	add	r2, r7
 80105b0:	443b      	add	r3, r7
 80105b2:	60aa      	str	r2, [r5, #8]
 80105b4:	612b      	str	r3, [r5, #16]
 80105b6:	e7ed      	b.n	8010594 <ucdr_serialize_endian_array_uint8_t+0x40>

080105b8 <ucdr_deserialize_array_uint8_t>:
 80105b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105bc:	4688      	mov	r8, r1
 80105be:	4611      	mov	r1, r2
 80105c0:	4617      	mov	r7, r2
 80105c2:	4605      	mov	r5, r0
 80105c4:	f7fc f992 	bl	800c8ec <ucdr_check_buffer_available_for>
 80105c8:	b9e0      	cbnz	r0, 8010604 <ucdr_deserialize_array_uint8_t+0x4c>
 80105ca:	463e      	mov	r6, r7
 80105cc:	e009      	b.n	80105e2 <ucdr_deserialize_array_uint8_t+0x2a>
 80105ce:	68a9      	ldr	r1, [r5, #8]
 80105d0:	f00a f8df 	bl	801a792 <memcpy>
 80105d4:	68aa      	ldr	r2, [r5, #8]
 80105d6:	692b      	ldr	r3, [r5, #16]
 80105d8:	4422      	add	r2, r4
 80105da:	4423      	add	r3, r4
 80105dc:	1b36      	subs	r6, r6, r4
 80105de:	60aa      	str	r2, [r5, #8]
 80105e0:	612b      	str	r3, [r5, #16]
 80105e2:	2201      	movs	r2, #1
 80105e4:	4631      	mov	r1, r6
 80105e6:	4628      	mov	r0, r5
 80105e8:	f7fc fa08 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 80105ec:	4604      	mov	r4, r0
 80105ee:	1bb8      	subs	r0, r7, r6
 80105f0:	4440      	add	r0, r8
 80105f2:	4622      	mov	r2, r4
 80105f4:	2c00      	cmp	r4, #0
 80105f6:	d1ea      	bne.n	80105ce <ucdr_deserialize_array_uint8_t+0x16>
 80105f8:	2301      	movs	r3, #1
 80105fa:	7da8      	ldrb	r0, [r5, #22]
 80105fc:	756b      	strb	r3, [r5, #21]
 80105fe:	4058      	eors	r0, r3
 8010600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010604:	463a      	mov	r2, r7
 8010606:	68a9      	ldr	r1, [r5, #8]
 8010608:	4640      	mov	r0, r8
 801060a:	f00a f8c2 	bl	801a792 <memcpy>
 801060e:	68aa      	ldr	r2, [r5, #8]
 8010610:	692b      	ldr	r3, [r5, #16]
 8010612:	443a      	add	r2, r7
 8010614:	443b      	add	r3, r7
 8010616:	60aa      	str	r2, [r5, #8]
 8010618:	612b      	str	r3, [r5, #16]
 801061a:	e7ed      	b.n	80105f8 <ucdr_deserialize_array_uint8_t+0x40>

0801061c <ucdr_deserialize_endian_array_uint8_t>:
 801061c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010620:	4619      	mov	r1, r3
 8010622:	461f      	mov	r7, r3
 8010624:	4605      	mov	r5, r0
 8010626:	4690      	mov	r8, r2
 8010628:	f7fc f960 	bl	800c8ec <ucdr_check_buffer_available_for>
 801062c:	b9e0      	cbnz	r0, 8010668 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801062e:	463e      	mov	r6, r7
 8010630:	e009      	b.n	8010646 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010632:	68a9      	ldr	r1, [r5, #8]
 8010634:	f00a f8ad 	bl	801a792 <memcpy>
 8010638:	68ab      	ldr	r3, [r5, #8]
 801063a:	6928      	ldr	r0, [r5, #16]
 801063c:	4423      	add	r3, r4
 801063e:	4420      	add	r0, r4
 8010640:	1b36      	subs	r6, r6, r4
 8010642:	60ab      	str	r3, [r5, #8]
 8010644:	6128      	str	r0, [r5, #16]
 8010646:	2201      	movs	r2, #1
 8010648:	4631      	mov	r1, r6
 801064a:	4628      	mov	r0, r5
 801064c:	f7fc f9d6 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 8010650:	4604      	mov	r4, r0
 8010652:	1bb8      	subs	r0, r7, r6
 8010654:	4440      	add	r0, r8
 8010656:	4622      	mov	r2, r4
 8010658:	2c00      	cmp	r4, #0
 801065a:	d1ea      	bne.n	8010632 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801065c:	2301      	movs	r3, #1
 801065e:	7da8      	ldrb	r0, [r5, #22]
 8010660:	756b      	strb	r3, [r5, #21]
 8010662:	4058      	eors	r0, r3
 8010664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010668:	463a      	mov	r2, r7
 801066a:	68a9      	ldr	r1, [r5, #8]
 801066c:	4640      	mov	r0, r8
 801066e:	f00a f890 	bl	801a792 <memcpy>
 8010672:	68aa      	ldr	r2, [r5, #8]
 8010674:	692b      	ldr	r3, [r5, #16]
 8010676:	443a      	add	r2, r7
 8010678:	443b      	add	r3, r7
 801067a:	60aa      	str	r2, [r5, #8]
 801067c:	612b      	str	r3, [r5, #16]
 801067e:	e7ed      	b.n	801065c <ucdr_deserialize_endian_array_uint8_t+0x40>

08010680 <ucdr_serialize_array_double>:
 8010680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010684:	460e      	mov	r6, r1
 8010686:	2108      	movs	r1, #8
 8010688:	4604      	mov	r4, r0
 801068a:	4617      	mov	r7, r2
 801068c:	f7fc f98e 	bl	800c9ac <ucdr_buffer_alignment>
 8010690:	4601      	mov	r1, r0
 8010692:	4620      	mov	r0, r4
 8010694:	7d65      	ldrb	r5, [r4, #21]
 8010696:	f7fc f9cd 	bl	800ca34 <ucdr_advance_buffer>
 801069a:	7d21      	ldrb	r1, [r4, #20]
 801069c:	7565      	strb	r5, [r4, #21]
 801069e:	2901      	cmp	r1, #1
 80106a0:	d010      	beq.n	80106c4 <ucdr_serialize_array_double+0x44>
 80106a2:	b157      	cbz	r7, 80106ba <ucdr_serialize_array_double+0x3a>
 80106a4:	2500      	movs	r5, #0
 80106a6:	e000      	b.n	80106aa <ucdr_serialize_array_double+0x2a>
 80106a8:	7d21      	ldrb	r1, [r4, #20]
 80106aa:	ecb6 0b02 	vldmia	r6!, {d0}
 80106ae:	4620      	mov	r0, r4
 80106b0:	3501      	adds	r5, #1
 80106b2:	f7fb feb5 	bl	800c420 <ucdr_serialize_endian_double>
 80106b6:	42af      	cmp	r7, r5
 80106b8:	d1f6      	bne.n	80106a8 <ucdr_serialize_array_double+0x28>
 80106ba:	7da0      	ldrb	r0, [r4, #22]
 80106bc:	f080 0001 	eor.w	r0, r0, #1
 80106c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c4:	00ff      	lsls	r7, r7, #3
 80106c6:	4639      	mov	r1, r7
 80106c8:	4620      	mov	r0, r4
 80106ca:	f7fc f90f 	bl	800c8ec <ucdr_check_buffer_available_for>
 80106ce:	b9f8      	cbnz	r0, 8010710 <ucdr_serialize_array_double+0x90>
 80106d0:	46b8      	mov	r8, r7
 80106d2:	e00a      	b.n	80106ea <ucdr_serialize_array_double+0x6a>
 80106d4:	68a0      	ldr	r0, [r4, #8]
 80106d6:	f00a f85c 	bl	801a792 <memcpy>
 80106da:	68a2      	ldr	r2, [r4, #8]
 80106dc:	6923      	ldr	r3, [r4, #16]
 80106de:	442a      	add	r2, r5
 80106e0:	442b      	add	r3, r5
 80106e2:	eba8 0805 	sub.w	r8, r8, r5
 80106e6:	60a2      	str	r2, [r4, #8]
 80106e8:	6123      	str	r3, [r4, #16]
 80106ea:	4641      	mov	r1, r8
 80106ec:	2208      	movs	r2, #8
 80106ee:	4620      	mov	r0, r4
 80106f0:	f7fc f984 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 80106f4:	eba7 0108 	sub.w	r1, r7, r8
 80106f8:	4431      	add	r1, r6
 80106fa:	4605      	mov	r5, r0
 80106fc:	4602      	mov	r2, r0
 80106fe:	2800      	cmp	r0, #0
 8010700:	d1e8      	bne.n	80106d4 <ucdr_serialize_array_double+0x54>
 8010702:	7da0      	ldrb	r0, [r4, #22]
 8010704:	2308      	movs	r3, #8
 8010706:	7563      	strb	r3, [r4, #21]
 8010708:	f080 0001 	eor.w	r0, r0, #1
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	463a      	mov	r2, r7
 8010712:	68a0      	ldr	r0, [r4, #8]
 8010714:	4631      	mov	r1, r6
 8010716:	f00a f83c 	bl	801a792 <memcpy>
 801071a:	68a2      	ldr	r2, [r4, #8]
 801071c:	6923      	ldr	r3, [r4, #16]
 801071e:	443a      	add	r2, r7
 8010720:	441f      	add	r7, r3
 8010722:	60a2      	str	r2, [r4, #8]
 8010724:	6127      	str	r7, [r4, #16]
 8010726:	e7ec      	b.n	8010702 <ucdr_serialize_array_double+0x82>

08010728 <ucdr_serialize_endian_array_double>:
 8010728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801072c:	4688      	mov	r8, r1
 801072e:	2108      	movs	r1, #8
 8010730:	4604      	mov	r4, r0
 8010732:	4616      	mov	r6, r2
 8010734:	461f      	mov	r7, r3
 8010736:	f7fc f939 	bl	800c9ac <ucdr_buffer_alignment>
 801073a:	4601      	mov	r1, r0
 801073c:	4620      	mov	r0, r4
 801073e:	7d65      	ldrb	r5, [r4, #21]
 8010740:	f7fc f978 	bl	800ca34 <ucdr_advance_buffer>
 8010744:	f1b8 0f01 	cmp.w	r8, #1
 8010748:	7565      	strb	r5, [r4, #21]
 801074a:	d00f      	beq.n	801076c <ucdr_serialize_endian_array_double+0x44>
 801074c:	2500      	movs	r5, #0
 801074e:	b147      	cbz	r7, 8010762 <ucdr_serialize_endian_array_double+0x3a>
 8010750:	ecb6 0b02 	vldmia	r6!, {d0}
 8010754:	4641      	mov	r1, r8
 8010756:	4620      	mov	r0, r4
 8010758:	3501      	adds	r5, #1
 801075a:	f7fb fe61 	bl	800c420 <ucdr_serialize_endian_double>
 801075e:	42af      	cmp	r7, r5
 8010760:	d1f6      	bne.n	8010750 <ucdr_serialize_endian_array_double+0x28>
 8010762:	7da0      	ldrb	r0, [r4, #22]
 8010764:	f080 0001 	eor.w	r0, r0, #1
 8010768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076c:	00ff      	lsls	r7, r7, #3
 801076e:	4639      	mov	r1, r7
 8010770:	4620      	mov	r0, r4
 8010772:	f7fc f8bb 	bl	800c8ec <ucdr_check_buffer_available_for>
 8010776:	b9f8      	cbnz	r0, 80107b8 <ucdr_serialize_endian_array_double+0x90>
 8010778:	46b8      	mov	r8, r7
 801077a:	e00a      	b.n	8010792 <ucdr_serialize_endian_array_double+0x6a>
 801077c:	68a0      	ldr	r0, [r4, #8]
 801077e:	f00a f808 	bl	801a792 <memcpy>
 8010782:	68a2      	ldr	r2, [r4, #8]
 8010784:	6923      	ldr	r3, [r4, #16]
 8010786:	442a      	add	r2, r5
 8010788:	442b      	add	r3, r5
 801078a:	eba8 0805 	sub.w	r8, r8, r5
 801078e:	60a2      	str	r2, [r4, #8]
 8010790:	6123      	str	r3, [r4, #16]
 8010792:	4641      	mov	r1, r8
 8010794:	2208      	movs	r2, #8
 8010796:	4620      	mov	r0, r4
 8010798:	f7fc f930 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 801079c:	eba7 0108 	sub.w	r1, r7, r8
 80107a0:	4431      	add	r1, r6
 80107a2:	4605      	mov	r5, r0
 80107a4:	4602      	mov	r2, r0
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d1e8      	bne.n	801077c <ucdr_serialize_endian_array_double+0x54>
 80107aa:	7da0      	ldrb	r0, [r4, #22]
 80107ac:	2308      	movs	r3, #8
 80107ae:	7563      	strb	r3, [r4, #21]
 80107b0:	f080 0001 	eor.w	r0, r0, #1
 80107b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b8:	463a      	mov	r2, r7
 80107ba:	68a0      	ldr	r0, [r4, #8]
 80107bc:	4631      	mov	r1, r6
 80107be:	f009 ffe8 	bl	801a792 <memcpy>
 80107c2:	68a2      	ldr	r2, [r4, #8]
 80107c4:	6923      	ldr	r3, [r4, #16]
 80107c6:	443a      	add	r2, r7
 80107c8:	441f      	add	r7, r3
 80107ca:	60a2      	str	r2, [r4, #8]
 80107cc:	6127      	str	r7, [r4, #16]
 80107ce:	e7ec      	b.n	80107aa <ucdr_serialize_endian_array_double+0x82>

080107d0 <ucdr_deserialize_array_double>:
 80107d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d4:	460e      	mov	r6, r1
 80107d6:	2108      	movs	r1, #8
 80107d8:	4604      	mov	r4, r0
 80107da:	4617      	mov	r7, r2
 80107dc:	f7fc f8e6 	bl	800c9ac <ucdr_buffer_alignment>
 80107e0:	4601      	mov	r1, r0
 80107e2:	4620      	mov	r0, r4
 80107e4:	7d65      	ldrb	r5, [r4, #21]
 80107e6:	f7fc f925 	bl	800ca34 <ucdr_advance_buffer>
 80107ea:	7d21      	ldrb	r1, [r4, #20]
 80107ec:	7565      	strb	r5, [r4, #21]
 80107ee:	2901      	cmp	r1, #1
 80107f0:	d011      	beq.n	8010816 <ucdr_deserialize_array_double+0x46>
 80107f2:	b15f      	cbz	r7, 801080c <ucdr_deserialize_array_double+0x3c>
 80107f4:	2500      	movs	r5, #0
 80107f6:	e000      	b.n	80107fa <ucdr_deserialize_array_double+0x2a>
 80107f8:	7d21      	ldrb	r1, [r4, #20]
 80107fa:	4632      	mov	r2, r6
 80107fc:	4620      	mov	r0, r4
 80107fe:	3501      	adds	r5, #1
 8010800:	f7fb ffa6 	bl	800c750 <ucdr_deserialize_endian_double>
 8010804:	42af      	cmp	r7, r5
 8010806:	f106 0608 	add.w	r6, r6, #8
 801080a:	d1f5      	bne.n	80107f8 <ucdr_deserialize_array_double+0x28>
 801080c:	7da0      	ldrb	r0, [r4, #22]
 801080e:	f080 0001 	eor.w	r0, r0, #1
 8010812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010816:	00ff      	lsls	r7, r7, #3
 8010818:	4639      	mov	r1, r7
 801081a:	4620      	mov	r0, r4
 801081c:	f7fc f866 	bl	800c8ec <ucdr_check_buffer_available_for>
 8010820:	b9f8      	cbnz	r0, 8010862 <ucdr_deserialize_array_double+0x92>
 8010822:	46b8      	mov	r8, r7
 8010824:	e00a      	b.n	801083c <ucdr_deserialize_array_double+0x6c>
 8010826:	68a1      	ldr	r1, [r4, #8]
 8010828:	f009 ffb3 	bl	801a792 <memcpy>
 801082c:	68a2      	ldr	r2, [r4, #8]
 801082e:	6923      	ldr	r3, [r4, #16]
 8010830:	442a      	add	r2, r5
 8010832:	442b      	add	r3, r5
 8010834:	eba8 0805 	sub.w	r8, r8, r5
 8010838:	60a2      	str	r2, [r4, #8]
 801083a:	6123      	str	r3, [r4, #16]
 801083c:	2208      	movs	r2, #8
 801083e:	4641      	mov	r1, r8
 8010840:	4620      	mov	r0, r4
 8010842:	f7fc f8db 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 8010846:	4605      	mov	r5, r0
 8010848:	eba7 0008 	sub.w	r0, r7, r8
 801084c:	4430      	add	r0, r6
 801084e:	462a      	mov	r2, r5
 8010850:	2d00      	cmp	r5, #0
 8010852:	d1e8      	bne.n	8010826 <ucdr_deserialize_array_double+0x56>
 8010854:	7da0      	ldrb	r0, [r4, #22]
 8010856:	2308      	movs	r3, #8
 8010858:	7563      	strb	r3, [r4, #21]
 801085a:	f080 0001 	eor.w	r0, r0, #1
 801085e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010862:	463a      	mov	r2, r7
 8010864:	68a1      	ldr	r1, [r4, #8]
 8010866:	4630      	mov	r0, r6
 8010868:	f009 ff93 	bl	801a792 <memcpy>
 801086c:	68a2      	ldr	r2, [r4, #8]
 801086e:	6923      	ldr	r3, [r4, #16]
 8010870:	443a      	add	r2, r7
 8010872:	441f      	add	r7, r3
 8010874:	60a2      	str	r2, [r4, #8]
 8010876:	6127      	str	r7, [r4, #16]
 8010878:	e7ec      	b.n	8010854 <ucdr_deserialize_array_double+0x84>
 801087a:	bf00      	nop

0801087c <ucdr_deserialize_endian_array_double>:
 801087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010880:	4688      	mov	r8, r1
 8010882:	2108      	movs	r1, #8
 8010884:	4605      	mov	r5, r0
 8010886:	4614      	mov	r4, r2
 8010888:	461f      	mov	r7, r3
 801088a:	f7fc f88f 	bl	800c9ac <ucdr_buffer_alignment>
 801088e:	4601      	mov	r1, r0
 8010890:	4628      	mov	r0, r5
 8010892:	7d6e      	ldrb	r6, [r5, #21]
 8010894:	f7fc f8ce 	bl	800ca34 <ucdr_advance_buffer>
 8010898:	f1b8 0f01 	cmp.w	r8, #1
 801089c:	756e      	strb	r6, [r5, #21]
 801089e:	d010      	beq.n	80108c2 <ucdr_deserialize_endian_array_double+0x46>
 80108a0:	2600      	movs	r6, #0
 80108a2:	b14f      	cbz	r7, 80108b8 <ucdr_deserialize_endian_array_double+0x3c>
 80108a4:	4622      	mov	r2, r4
 80108a6:	4641      	mov	r1, r8
 80108a8:	4628      	mov	r0, r5
 80108aa:	3601      	adds	r6, #1
 80108ac:	f7fb ff50 	bl	800c750 <ucdr_deserialize_endian_double>
 80108b0:	42b7      	cmp	r7, r6
 80108b2:	f104 0408 	add.w	r4, r4, #8
 80108b6:	d1f5      	bne.n	80108a4 <ucdr_deserialize_endian_array_double+0x28>
 80108b8:	7da8      	ldrb	r0, [r5, #22]
 80108ba:	f080 0001 	eor.w	r0, r0, #1
 80108be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c2:	00ff      	lsls	r7, r7, #3
 80108c4:	4639      	mov	r1, r7
 80108c6:	4628      	mov	r0, r5
 80108c8:	f7fc f810 	bl	800c8ec <ucdr_check_buffer_available_for>
 80108cc:	b9f8      	cbnz	r0, 801090e <ucdr_deserialize_endian_array_double+0x92>
 80108ce:	46b8      	mov	r8, r7
 80108d0:	e00a      	b.n	80108e8 <ucdr_deserialize_endian_array_double+0x6c>
 80108d2:	68a9      	ldr	r1, [r5, #8]
 80108d4:	f009 ff5d 	bl	801a792 <memcpy>
 80108d8:	68aa      	ldr	r2, [r5, #8]
 80108da:	692b      	ldr	r3, [r5, #16]
 80108dc:	4432      	add	r2, r6
 80108de:	4433      	add	r3, r6
 80108e0:	eba8 0806 	sub.w	r8, r8, r6
 80108e4:	60aa      	str	r2, [r5, #8]
 80108e6:	612b      	str	r3, [r5, #16]
 80108e8:	2208      	movs	r2, #8
 80108ea:	4641      	mov	r1, r8
 80108ec:	4628      	mov	r0, r5
 80108ee:	f7fc f885 	bl	800c9fc <ucdr_check_final_buffer_behavior_array>
 80108f2:	4606      	mov	r6, r0
 80108f4:	eba7 0008 	sub.w	r0, r7, r8
 80108f8:	4420      	add	r0, r4
 80108fa:	4632      	mov	r2, r6
 80108fc:	2e00      	cmp	r6, #0
 80108fe:	d1e8      	bne.n	80108d2 <ucdr_deserialize_endian_array_double+0x56>
 8010900:	7da8      	ldrb	r0, [r5, #22]
 8010902:	2308      	movs	r3, #8
 8010904:	756b      	strb	r3, [r5, #21]
 8010906:	f080 0001 	eor.w	r0, r0, #1
 801090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801090e:	463a      	mov	r2, r7
 8010910:	68a9      	ldr	r1, [r5, #8]
 8010912:	4620      	mov	r0, r4
 8010914:	f009 ff3d 	bl	801a792 <memcpy>
 8010918:	68aa      	ldr	r2, [r5, #8]
 801091a:	692b      	ldr	r3, [r5, #16]
 801091c:	443a      	add	r2, r7
 801091e:	441f      	add	r7, r3
 8010920:	60aa      	str	r2, [r5, #8]
 8010922:	612f      	str	r7, [r5, #16]
 8010924:	e7ec      	b.n	8010900 <ucdr_deserialize_endian_array_double+0x84>
 8010926:	bf00      	nop

08010928 <ucdr_serialize_sequence_char>:
 8010928:	b570      	push	{r4, r5, r6, lr}
 801092a:	4615      	mov	r5, r2
 801092c:	460e      	mov	r6, r1
 801092e:	7d01      	ldrb	r1, [r0, #20]
 8010930:	4604      	mov	r4, r0
 8010932:	f7fa fffb 	bl	800b92c <ucdr_serialize_endian_uint32_t>
 8010936:	b90d      	cbnz	r5, 801093c <ucdr_serialize_sequence_char+0x14>
 8010938:	2001      	movs	r0, #1
 801093a:	bd70      	pop	{r4, r5, r6, pc}
 801093c:	7d21      	ldrb	r1, [r4, #20]
 801093e:	462b      	mov	r3, r5
 8010940:	4632      	mov	r2, r6
 8010942:	4620      	mov	r0, r4
 8010944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010948:	f7ff bd6e 	b.w	8010428 <ucdr_serialize_endian_array_char>

0801094c <ucdr_deserialize_sequence_char>:
 801094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010950:	461d      	mov	r5, r3
 8010952:	4616      	mov	r6, r2
 8010954:	460f      	mov	r7, r1
 8010956:	461a      	mov	r2, r3
 8010958:	7d01      	ldrb	r1, [r0, #20]
 801095a:	4604      	mov	r4, r0
 801095c:	f7fb f90e 	bl	800bb7c <ucdr_deserialize_endian_uint32_t>
 8010960:	682b      	ldr	r3, [r5, #0]
 8010962:	429e      	cmp	r6, r3
 8010964:	bf3c      	itt	cc
 8010966:	2201      	movcc	r2, #1
 8010968:	75a2      	strbcc	r2, [r4, #22]
 801096a:	b913      	cbnz	r3, 8010972 <ucdr_deserialize_sequence_char+0x26>
 801096c:	2001      	movs	r0, #1
 801096e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010972:	7d21      	ldrb	r1, [r4, #20]
 8010974:	463a      	mov	r2, r7
 8010976:	4620      	mov	r0, r4
 8010978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801097c:	f7ff bd86 	b.w	801048c <ucdr_deserialize_endian_array_char>

08010980 <ucdr_serialize_sequence_uint8_t>:
 8010980:	b570      	push	{r4, r5, r6, lr}
 8010982:	4615      	mov	r5, r2
 8010984:	460e      	mov	r6, r1
 8010986:	7d01      	ldrb	r1, [r0, #20]
 8010988:	4604      	mov	r4, r0
 801098a:	f7fa ffcf 	bl	800b92c <ucdr_serialize_endian_uint32_t>
 801098e:	b90d      	cbnz	r5, 8010994 <ucdr_serialize_sequence_uint8_t+0x14>
 8010990:	2001      	movs	r0, #1
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	7d21      	ldrb	r1, [r4, #20]
 8010996:	462b      	mov	r3, r5
 8010998:	4632      	mov	r2, r6
 801099a:	4620      	mov	r0, r4
 801099c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109a0:	f7ff bdd8 	b.w	8010554 <ucdr_serialize_endian_array_uint8_t>

080109a4 <ucdr_deserialize_sequence_uint8_t>:
 80109a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a8:	461d      	mov	r5, r3
 80109aa:	4616      	mov	r6, r2
 80109ac:	460f      	mov	r7, r1
 80109ae:	461a      	mov	r2, r3
 80109b0:	7d01      	ldrb	r1, [r0, #20]
 80109b2:	4604      	mov	r4, r0
 80109b4:	f7fb f8e2 	bl	800bb7c <ucdr_deserialize_endian_uint32_t>
 80109b8:	682b      	ldr	r3, [r5, #0]
 80109ba:	429e      	cmp	r6, r3
 80109bc:	bf3c      	itt	cc
 80109be:	2201      	movcc	r2, #1
 80109c0:	75a2      	strbcc	r2, [r4, #22]
 80109c2:	b913      	cbnz	r3, 80109ca <ucdr_deserialize_sequence_uint8_t+0x26>
 80109c4:	2001      	movs	r0, #1
 80109c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ca:	7d21      	ldrb	r1, [r4, #20]
 80109cc:	463a      	mov	r2, r7
 80109ce:	4620      	mov	r0, r4
 80109d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109d4:	f7ff be22 	b.w	801061c <ucdr_deserialize_endian_array_uint8_t>

080109d8 <ucdr_serialize_sequence_double>:
 80109d8:	b570      	push	{r4, r5, r6, lr}
 80109da:	4615      	mov	r5, r2
 80109dc:	460e      	mov	r6, r1
 80109de:	7d01      	ldrb	r1, [r0, #20]
 80109e0:	4604      	mov	r4, r0
 80109e2:	f7fa ffa3 	bl	800b92c <ucdr_serialize_endian_uint32_t>
 80109e6:	b90d      	cbnz	r5, 80109ec <ucdr_serialize_sequence_double+0x14>
 80109e8:	2001      	movs	r0, #1
 80109ea:	bd70      	pop	{r4, r5, r6, pc}
 80109ec:	7d21      	ldrb	r1, [r4, #20]
 80109ee:	462b      	mov	r3, r5
 80109f0:	4632      	mov	r2, r6
 80109f2:	4620      	mov	r0, r4
 80109f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109f8:	f7ff be96 	b.w	8010728 <ucdr_serialize_endian_array_double>

080109fc <ucdr_deserialize_sequence_double>:
 80109fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a00:	461d      	mov	r5, r3
 8010a02:	4616      	mov	r6, r2
 8010a04:	460f      	mov	r7, r1
 8010a06:	461a      	mov	r2, r3
 8010a08:	7d01      	ldrb	r1, [r0, #20]
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	f7fb f8b6 	bl	800bb7c <ucdr_deserialize_endian_uint32_t>
 8010a10:	682b      	ldr	r3, [r5, #0]
 8010a12:	429e      	cmp	r6, r3
 8010a14:	bf3c      	itt	cc
 8010a16:	2201      	movcc	r2, #1
 8010a18:	75a2      	strbcc	r2, [r4, #22]
 8010a1a:	b913      	cbnz	r3, 8010a22 <ucdr_deserialize_sequence_double+0x26>
 8010a1c:	2001      	movs	r0, #1
 8010a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a22:	7d21      	ldrb	r1, [r4, #20]
 8010a24:	463a      	mov	r2, r7
 8010a26:	4620      	mov	r0, r4
 8010a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2c:	f7ff bf26 	b.w	801087c <ucdr_deserialize_endian_array_double>

08010a30 <uxr_buffer_delete_entity>:
 8010a30:	b510      	push	{r4, lr}
 8010a32:	2300      	movs	r3, #0
 8010a34:	b08e      	sub	sp, #56	@ 0x38
 8010a36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	2204      	movs	r2, #4
 8010a40:	ab06      	add	r3, sp, #24
 8010a42:	4604      	mov	r4, r0
 8010a44:	9103      	str	r1, [sp, #12]
 8010a46:	f001 fb3d 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8010a4a:	b918      	cbnz	r0, 8010a54 <uxr_buffer_delete_entity+0x24>
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	4620      	mov	r0, r4
 8010a50:	b00e      	add	sp, #56	@ 0x38
 8010a52:	bd10      	pop	{r4, pc}
 8010a54:	9902      	ldr	r1, [sp, #8]
 8010a56:	aa05      	add	r2, sp, #20
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f001 fc69 	bl	8012330 <uxr_init_base_object_request>
 8010a5e:	a905      	add	r1, sp, #20
 8010a60:	4604      	mov	r4, r0
 8010a62:	a806      	add	r0, sp, #24
 8010a64:	f003 fa94 	bl	8013f90 <uxr_serialize_DELETE_Payload>
 8010a68:	4620      	mov	r0, r4
 8010a6a:	b00e      	add	sp, #56	@ 0x38
 8010a6c:	bd10      	pop	{r4, pc}
 8010a6e:	bf00      	nop

08010a70 <uxr_common_create_entity>:
 8010a70:	b510      	push	{r4, lr}
 8010a72:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010a76:	b08c      	sub	sp, #48	@ 0x30
 8010a78:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010a7c:	f1bc 0f01 	cmp.w	ip, #1
 8010a80:	bf0c      	ite	eq
 8010a82:	f003 0201 	andeq.w	r2, r3, #1
 8010a86:	2200      	movne	r2, #0
 8010a88:	330e      	adds	r3, #14
 8010a8a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010a8e:	9101      	str	r1, [sp, #4]
 8010a90:	441a      	add	r2, r3
 8010a92:	2301      	movs	r3, #1
 8010a94:	9300      	str	r3, [sp, #0]
 8010a96:	9903      	ldr	r1, [sp, #12]
 8010a98:	ab04      	add	r3, sp, #16
 8010a9a:	b292      	uxth	r2, r2
 8010a9c:	4604      	mov	r4, r0
 8010a9e:	f001 fb11 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8010aa2:	b918      	cbnz	r0, 8010aac <uxr_common_create_entity+0x3c>
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	b00c      	add	sp, #48	@ 0x30
 8010aaa:	bd10      	pop	{r4, pc}
 8010aac:	9902      	ldr	r1, [sp, #8]
 8010aae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	f001 fc3d 	bl	8012330 <uxr_init_base_object_request>
 8010ab6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010ab8:	4604      	mov	r4, r0
 8010aba:	a804      	add	r0, sp, #16
 8010abc:	f003 f9c4 	bl	8013e48 <uxr_serialize_CREATE_Payload>
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	b00c      	add	sp, #48	@ 0x30
 8010ac4:	bd10      	pop	{r4, pc}
 8010ac6:	bf00      	nop

08010ac8 <uxr_buffer_create_participant_bin>:
 8010ac8:	b570      	push	{r4, r5, r6, lr}
 8010aca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010ace:	ac11      	add	r4, sp, #68	@ 0x44
 8010ad0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010ada:	7223      	strb	r3, [r4, #8]
 8010adc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010ade:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	4605      	mov	r5, r0
 8010ae8:	7122      	strb	r2, [r4, #4]
 8010aea:	f88d 1014 	strb.w	r1, [sp, #20]
 8010aee:	b1cb      	cbz	r3, 8010b24 <uxr_buffer_create_participant_bin+0x5c>
 8010af0:	f88d 201c 	strb.w	r2, [sp, #28]
 8010af4:	9308      	str	r3, [sp, #32]
 8010af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010afa:	a915      	add	r1, sp, #84	@ 0x54
 8010afc:	a809      	add	r0, sp, #36	@ 0x24
 8010afe:	f7fb ff49 	bl	800c994 <ucdr_init_buffer>
 8010b02:	a905      	add	r1, sp, #20
 8010b04:	a809      	add	r0, sp, #36	@ 0x24
 8010b06:	f002 fe39 	bl	801377c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010b0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b0c:	9600      	str	r6, [sp, #0]
 8010b0e:	9401      	str	r4, [sp, #4]
 8010b10:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b14:	60e3      	str	r3, [r4, #12]
 8010b16:	4628      	mov	r0, r5
 8010b18:	b29b      	uxth	r3, r3
 8010b1a:	f7ff ffa9 	bl	8010a70 <uxr_common_create_entity>
 8010b1e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010b22:	bd70      	pop	{r4, r5, r6, pc}
 8010b24:	f88d 301c 	strb.w	r3, [sp, #28]
 8010b28:	e7e5      	b.n	8010af6 <uxr_buffer_create_participant_bin+0x2e>
 8010b2a:	bf00      	nop

08010b2c <uxr_buffer_create_topic_bin>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010b32:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010b36:	9105      	str	r1, [sp, #20]
 8010b38:	4605      	mov	r5, r0
 8010b3a:	a997      	add	r1, sp, #604	@ 0x25c
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	2302      	movs	r3, #2
 8010b40:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010b44:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010b48:	f000 f9ea 	bl	8010f20 <uxr_object_id_to_raw>
 8010b4c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010b4e:	9306      	str	r3, [sp, #24]
 8010b50:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010b52:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b54:	2303      	movs	r3, #3
 8010b56:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b60:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010b64:	a917      	add	r1, sp, #92	@ 0x5c
 8010b66:	2300      	movs	r3, #0
 8010b68:	a80b      	add	r0, sp, #44	@ 0x2c
 8010b6a:	f88d 301c 	strb.w	r3, [sp, #28]
 8010b6e:	f7fb ff11 	bl	800c994 <ucdr_init_buffer>
 8010b72:	a906      	add	r1, sp, #24
 8010b74:	a80b      	add	r0, sp, #44	@ 0x2c
 8010b76:	f002 fe23 	bl	80137c0 <uxr_serialize_OBJK_Topic_Binary>
 8010b7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b7c:	9316      	str	r3, [sp, #88]	@ 0x58
 8010b7e:	ac13      	add	r4, sp, #76	@ 0x4c
 8010b80:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010b84:	9600      	str	r6, [sp, #0]
 8010b86:	9401      	str	r4, [sp, #4]
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f7ff ff70 	bl	8010a70 <uxr_common_create_entity>
 8010b90:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010b94:	bd70      	pop	{r4, r5, r6, pc}
 8010b96:	bf00      	nop

08010b98 <uxr_buffer_create_publisher_bin>:
 8010b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b9a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010b9e:	4605      	mov	r5, r0
 8010ba0:	9105      	str	r1, [sp, #20]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	2603      	movs	r6, #3
 8010ba6:	a992      	add	r1, sp, #584	@ 0x248
 8010ba8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010bac:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010bb0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010bb4:	f000 f9b4 	bl	8010f20 <uxr_object_id_to_raw>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bbe:	a912      	add	r1, sp, #72	@ 0x48
 8010bc0:	a806      	add	r0, sp, #24
 8010bc2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010bc6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010bca:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010bce:	f7fb fee1 	bl	800c994 <ucdr_init_buffer>
 8010bd2:	a993      	add	r1, sp, #588	@ 0x24c
 8010bd4:	a806      	add	r0, sp, #24
 8010bd6:	f002 fea7 	bl	8013928 <uxr_serialize_OBJK_Publisher_Binary>
 8010bda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bdc:	9311      	str	r3, [sp, #68]	@ 0x44
 8010bde:	ac0e      	add	r4, sp, #56	@ 0x38
 8010be0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010be4:	9700      	str	r7, [sp, #0]
 8010be6:	9401      	str	r4, [sp, #4]
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	4628      	mov	r0, r5
 8010bec:	f7ff ff40 	bl	8010a70 <uxr_common_create_entity>
 8010bf0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bf6:	bf00      	nop

08010bf8 <uxr_buffer_create_datawriter_bin>:
 8010bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bfc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010c00:	ac1d      	add	r4, sp, #116	@ 0x74
 8010c02:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010c06:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010c0a:	9105      	str	r1, [sp, #20]
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	a9a1      	add	r1, sp, #644	@ 0x284
 8010c10:	4618      	mov	r0, r3
 8010c12:	2305      	movs	r3, #5
 8010c14:	7123      	strb	r3, [r4, #4]
 8010c16:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010c1a:	2703      	movs	r7, #3
 8010c1c:	f000 f980 	bl	8010f20 <uxr_object_id_to_raw>
 8010c20:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010c22:	7227      	strb	r7, [r4, #8]
 8010c24:	a90e      	add	r1, sp, #56	@ 0x38
 8010c26:	f000 f97b 	bl	8010f20 <uxr_object_id_to_raw>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010c30:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010c34:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010c38:	3d00      	subs	r5, #0
 8010c3a:	bf18      	it	ne
 8010c3c:	2501      	movne	r5, #1
 8010c3e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010c42:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010c46:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010c4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010c4e:	2301      	movs	r3, #1
 8010c50:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010c54:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010c58:	bb8a      	cbnz	r2, 8010cbe <uxr_buffer_create_datawriter_bin+0xc6>
 8010c5a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010c5e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010c62:	f04f 0c13 	mov.w	ip, #19
 8010c66:	250b      	movs	r5, #11
 8010c68:	2221      	movs	r2, #33	@ 0x21
 8010c6a:	2111      	movs	r1, #17
 8010c6c:	2009      	movs	r0, #9
 8010c6e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010c72:	b923      	cbnz	r3, 8010c7e <uxr_buffer_create_datawriter_bin+0x86>
 8010c74:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010c78:	4672      	mov	r2, lr
 8010c7a:	4661      	mov	r1, ip
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	d025      	beq.n	8010cd2 <uxr_buffer_create_datawriter_bin+0xda>
 8010c86:	2b03      	cmp	r3, #3
 8010c88:	d029      	beq.n	8010cde <uxr_buffer_create_datawriter_bin+0xe6>
 8010c8a:	b32b      	cbz	r3, 8010cd8 <uxr_buffer_create_datawriter_bin+0xe0>
 8010c8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c90:	a921      	add	r1, sp, #132	@ 0x84
 8010c92:	a806      	add	r0, sp, #24
 8010c94:	f7fb fe7e 	bl	800c994 <ucdr_init_buffer>
 8010c98:	a90e      	add	r1, sp, #56	@ 0x38
 8010c9a:	a806      	add	r0, sp, #24
 8010c9c:	f002 feba 	bl	8013a14 <uxr_serialize_OBJK_DataWriter_Binary>
 8010ca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ca2:	f8cd 8000 	str.w	r8, [sp]
 8010ca6:	9401      	str	r4, [sp, #4]
 8010ca8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010cac:	60e3      	str	r3, [r4, #12]
 8010cae:	4630      	mov	r0, r6
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	f7ff fedd 	bl	8010a70 <uxr_common_create_entity>
 8010cb6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010cc2:	f04f 0c12 	mov.w	ip, #18
 8010cc6:	250a      	movs	r5, #10
 8010cc8:	2220      	movs	r2, #32
 8010cca:	2110      	movs	r1, #16
 8010ccc:	2008      	movs	r0, #8
 8010cce:	2702      	movs	r7, #2
 8010cd0:	e7cd      	b.n	8010c6e <uxr_buffer_create_datawriter_bin+0x76>
 8010cd2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010cd6:	e7d9      	b.n	8010c8c <uxr_buffer_create_datawriter_bin+0x94>
 8010cd8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010cdc:	e7d6      	b.n	8010c8c <uxr_buffer_create_datawriter_bin+0x94>
 8010cde:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010ce2:	e7d3      	b.n	8010c8c <uxr_buffer_create_datawriter_bin+0x94>

08010ce4 <uxr_buffer_create_replier_bin>:
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8010cea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010cee:	9105      	str	r1, [sp, #20]
 8010cf0:	4605      	mov	r5, r0
 8010cf2:	a999      	add	r1, sp, #612	@ 0x264
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	2308      	movs	r3, #8
 8010cf8:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 8010cfc:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 8010d00:	f000 f90e 	bl	8010f20 <uxr_object_id_to_raw>
 8010d04:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 8010d06:	9306      	str	r3, [sp, #24]
 8010d08:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 8010d0a:	9307      	str	r3, [sp, #28]
 8010d0c:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 8010d0e:	9308      	str	r3, [sp, #32]
 8010d10:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8010d12:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d14:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010d16:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d18:	2301      	movs	r3, #1
 8010d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d1e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8010d22:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010d26:	a919      	add	r1, sp, #100	@ 0x64
 8010d28:	2303      	movs	r3, #3
 8010d2a:	a80d      	add	r0, sp, #52	@ 0x34
 8010d2c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8010d30:	f7fb fe30 	bl	800c994 <ucdr_init_buffer>
 8010d34:	a906      	add	r1, sp, #24
 8010d36:	a80d      	add	r0, sp, #52	@ 0x34
 8010d38:	f002 fe98 	bl	8013a6c <uxr_serialize_OBJK_Replier_Binary>
 8010d3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010d3e:	9318      	str	r3, [sp, #96]	@ 0x60
 8010d40:	ac15      	add	r4, sp, #84	@ 0x54
 8010d42:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010d46:	9600      	str	r6, [sp, #0]
 8010d48:	9401      	str	r4, [sp, #4]
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	f7ff fe8f 	bl	8010a70 <uxr_common_create_entity>
 8010d52:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 8010d56:	bd70      	pop	{r4, r5, r6, pc}

08010d58 <get_custom_error>:
 8010d58:	4b01      	ldr	r3, [pc, #4]	@ (8010d60 <get_custom_error+0x8>)
 8010d5a:	7818      	ldrb	r0, [r3, #0]
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	2000bd7c 	.word	0x2000bd7c

08010d64 <recv_custom_msg>:
 8010d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d68:	4693      	mov	fp, r2
 8010d6a:	b089      	sub	sp, #36	@ 0x24
 8010d6c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010d70:	9305      	str	r3, [sp, #20]
 8010d72:	468a      	mov	sl, r1
 8010d74:	2100      	movs	r1, #0
 8010d76:	4604      	mov	r4, r0
 8010d78:	f88d 101e 	strb.w	r1, [sp, #30]
 8010d7c:	b322      	cbz	r2, 8010dc8 <recv_custom_msg+0x64>
 8010d7e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010d82:	f10d 081f 	add.w	r8, sp, #31
 8010d86:	af05      	add	r7, sp, #20
 8010d88:	f10d 061e 	add.w	r6, sp, #30
 8010d8c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010d90:	e002      	b.n	8010d98 <recv_custom_msg+0x34>
 8010d92:	9b05      	ldr	r3, [sp, #20]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	dd0f      	ble.n	8010db8 <recv_custom_msg+0x54>
 8010d98:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010d9c:	4623      	mov	r3, r4
 8010d9e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010da2:	e9cd 5600 	strd	r5, r6, [sp]
 8010da6:	4622      	mov	r2, r4
 8010da8:	4648      	mov	r0, r9
 8010daa:	f001 fcef 	bl	801278c <uxr_read_framed_msg>
 8010dae:	2800      	cmp	r0, #0
 8010db0:	d0ef      	beq.n	8010d92 <recv_custom_msg+0x2e>
 8010db2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010db6:	b1b3      	cbz	r3, 8010de6 <recv_custom_msg+0x82>
 8010db8:	4b0f      	ldr	r3, [pc, #60]	@ (8010df8 <recv_custom_msg+0x94>)
 8010dba:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010dbe:	701a      	strb	r2, [r3, #0]
 8010dc0:	2000      	movs	r0, #0
 8010dc2:	b009      	add	sp, #36	@ 0x24
 8010dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc8:	f10d 021f 	add.w	r2, sp, #31
 8010dcc:	9200      	str	r2, [sp, #0]
 8010dce:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010dd6:	4601      	mov	r1, r0
 8010dd8:	47a8      	blx	r5
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d0ec      	beq.n	8010db8 <recv_custom_msg+0x54>
 8010dde:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d1e8      	bne.n	8010db8 <recv_custom_msg+0x54>
 8010de6:	f8cb 0000 	str.w	r0, [fp]
 8010dea:	2001      	movs	r0, #1
 8010dec:	f8ca 4000 	str.w	r4, [sl]
 8010df0:	b009      	add	sp, #36	@ 0x24
 8010df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df6:	bf00      	nop
 8010df8:	2000bd7c 	.word	0x2000bd7c

08010dfc <send_custom_msg>:
 8010dfc:	b530      	push	{r4, r5, lr}
 8010dfe:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8010e02:	b087      	sub	sp, #28
 8010e04:	4615      	mov	r5, r2
 8010e06:	b974      	cbnz	r4, 8010e26 <send_custom_msg+0x2a>
 8010e08:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010e0c:	f10d 0317 	add.w	r3, sp, #23
 8010e10:	47a0      	blx	r4
 8010e12:	b108      	cbz	r0, 8010e18 <send_custom_msg+0x1c>
 8010e14:	42a8      	cmp	r0, r5
 8010e16:	d015      	beq.n	8010e44 <send_custom_msg+0x48>
 8010e18:	4b0c      	ldr	r3, [pc, #48]	@ (8010e4c <send_custom_msg+0x50>)
 8010e1a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010e1e:	701a      	strb	r2, [r3, #0]
 8010e20:	2000      	movs	r0, #0
 8010e22:	b007      	add	sp, #28
 8010e24:	bd30      	pop	{r4, r5, pc}
 8010e26:	460b      	mov	r3, r1
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f10d 0117 	add.w	r1, sp, #23
 8010e2e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010e32:	4602      	mov	r2, r0
 8010e34:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010e38:	9500      	str	r5, [sp, #0]
 8010e3a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010e3e:	f001 faad 	bl	801239c <uxr_write_framed_msg>
 8010e42:	e7e6      	b.n	8010e12 <send_custom_msg+0x16>
 8010e44:	2001      	movs	r0, #1
 8010e46:	b007      	add	sp, #28
 8010e48:	bd30      	pop	{r4, r5, pc}
 8010e4a:	bf00      	nop
 8010e4c:	2000bd7c 	.word	0x2000bd7c

08010e50 <uxr_set_custom_transport_callbacks>:
 8010e50:	b410      	push	{r4}
 8010e52:	9c01      	ldr	r4, [sp, #4]
 8010e54:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010e58:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010e5c:	9b02      	ldr	r3, [sp, #8]
 8010e5e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e66:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010e6a:	4770      	bx	lr

08010e6c <uxr_init_custom_transport>:
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010e72:	b303      	cbz	r3, 8010eb6 <uxr_init_custom_transport+0x4a>
 8010e74:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010e78:	4604      	mov	r4, r0
 8010e7a:	b1e2      	cbz	r2, 8010eb6 <uxr_init_custom_transport+0x4a>
 8010e7c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010e80:	b1ca      	cbz	r2, 8010eb6 <uxr_init_custom_transport+0x4a>
 8010e82:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010e86:	b1b2      	cbz	r2, 8010eb6 <uxr_init_custom_transport+0x4a>
 8010e88:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010e8c:	4798      	blx	r3
 8010e8e:	4605      	mov	r5, r0
 8010e90:	b188      	cbz	r0, 8010eb6 <uxr_init_custom_transport+0x4a>
 8010e92:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010e96:	b98b      	cbnz	r3, 8010ebc <uxr_init_custom_transport+0x50>
 8010e98:	490b      	ldr	r1, [pc, #44]	@ (8010ec8 <uxr_init_custom_transport+0x5c>)
 8010e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8010ecc <uxr_init_custom_transport+0x60>)
 8010e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8010ed0 <uxr_init_custom_transport+0x64>)
 8010e9e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010ea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010ea6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010eaa:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010eae:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	bd38      	pop	{r3, r4, r5, pc}
 8010eb6:	2500      	movs	r5, #0
 8010eb8:	4628      	mov	r0, r5
 8010eba:	bd38      	pop	{r3, r4, r5, pc}
 8010ebc:	2100      	movs	r1, #0
 8010ebe:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010ec2:	f001 fa65 	bl	8012390 <uxr_init_framing_io>
 8010ec6:	e7e7      	b.n	8010e98 <uxr_init_custom_transport+0x2c>
 8010ec8:	08010dfd 	.word	0x08010dfd
 8010ecc:	08010d65 	.word	0x08010d65
 8010ed0:	08010d59 	.word	0x08010d59

08010ed4 <uxr_close_custom_transport>:
 8010ed4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010ed8:	4718      	bx	r3
 8010eda:	bf00      	nop

08010edc <uxr_object_id>:
 8010edc:	b082      	sub	sp, #8
 8010ede:	2300      	movs	r3, #0
 8010ee0:	f88d 1006 	strb.w	r1, [sp, #6]
 8010ee4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010ee8:	f360 030f 	bfi	r3, r0, #0, #16
 8010eec:	f362 431f 	bfi	r3, r2, #16, #16
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	b002      	add	sp, #8
 8010ef4:	4770      	bx	lr
 8010ef6:	bf00      	nop

08010ef8 <uxr_object_id_from_raw>:
 8010ef8:	7843      	ldrb	r3, [r0, #1]
 8010efa:	7801      	ldrb	r1, [r0, #0]
 8010efc:	b082      	sub	sp, #8
 8010efe:	f003 020f 	and.w	r2, r3, #15
 8010f02:	f88d 2006 	strb.w	r2, [sp, #6]
 8010f06:	091b      	lsrs	r3, r3, #4
 8010f08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010f0c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010f10:	2000      	movs	r0, #0
 8010f12:	f363 000f 	bfi	r0, r3, #0, #16
 8010f16:	f362 401f 	bfi	r0, r2, #16, #16
 8010f1a:	b002      	add	sp, #8
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop

08010f20 <uxr_object_id_to_raw>:
 8010f20:	4602      	mov	r2, r0
 8010f22:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010f26:	b082      	sub	sp, #8
 8010f28:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010f2c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010f30:	f881 c000 	strb.w	ip, [r1]
 8010f34:	7048      	strb	r0, [r1, #1]
 8010f36:	b002      	add	sp, #8
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop

08010f3c <uxr_buffer_request_data>:
 8010f3c:	b530      	push	{r4, r5, lr}
 8010f3e:	b095      	sub	sp, #84	@ 0x54
 8010f40:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010f44:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010f46:	9303      	str	r3, [sp, #12]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	2d00      	cmp	r5, #0
 8010f4c:	bf14      	ite	ne
 8010f4e:	2101      	movne	r1, #1
 8010f50:	4611      	moveq	r1, r2
 8010f52:	4604      	mov	r4, r0
 8010f54:	f88d 301c 	strb.w	r3, [sp, #28]
 8010f58:	f88d 201d 	strb.w	r2, [sp, #29]
 8010f5c:	f88d 201e 	strb.w	r2, [sp, #30]
 8010f60:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010f64:	d021      	beq.n	8010faa <uxr_buffer_request_data+0x6e>
 8010f66:	682a      	ldr	r2, [r5, #0]
 8010f68:	686b      	ldr	r3, [r5, #4]
 8010f6a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010f6e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010f72:	2210      	movs	r2, #16
 8010f74:	2308      	movs	r3, #8
 8010f76:	2100      	movs	r1, #0
 8010f78:	e9cd 3100 	strd	r3, r1, [sp]
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	9905      	ldr	r1, [sp, #20]
 8010f80:	ab0c      	add	r3, sp, #48	@ 0x30
 8010f82:	f001 f89f 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8010f86:	b918      	cbnz	r0, 8010f90 <uxr_buffer_request_data+0x54>
 8010f88:	4604      	mov	r4, r0
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	b015      	add	sp, #84	@ 0x54
 8010f8e:	bd30      	pop	{r4, r5, pc}
 8010f90:	9904      	ldr	r1, [sp, #16]
 8010f92:	aa06      	add	r2, sp, #24
 8010f94:	4620      	mov	r0, r4
 8010f96:	f001 f9cb 	bl	8012330 <uxr_init_base_object_request>
 8010f9a:	a906      	add	r1, sp, #24
 8010f9c:	4604      	mov	r4, r0
 8010f9e:	a80c      	add	r0, sp, #48	@ 0x30
 8010fa0:	f003 f8a0 	bl	80140e4 <uxr_serialize_READ_DATA_Payload>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	b015      	add	sp, #84	@ 0x54
 8010fa8:	bd30      	pop	{r4, r5, pc}
 8010faa:	2208      	movs	r2, #8
 8010fac:	e7e2      	b.n	8010f74 <uxr_buffer_request_data+0x38>
 8010fae:	bf00      	nop

08010fb0 <uxr_buffer_cancel_data>:
 8010fb0:	b510      	push	{r4, lr}
 8010fb2:	b094      	sub	sp, #80	@ 0x50
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	9202      	str	r2, [sp, #8]
 8010fb8:	9205      	str	r2, [sp, #20]
 8010fba:	9301      	str	r3, [sp, #4]
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010fc2:	f88d 301e 	strb.w	r3, [sp, #30]
 8010fc6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8010fca:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010fce:	2308      	movs	r3, #8
 8010fd0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	2210      	movs	r2, #16
 8010fd8:	ab0c      	add	r3, sp, #48	@ 0x30
 8010fda:	4604      	mov	r4, r0
 8010fdc:	9103      	str	r1, [sp, #12]
 8010fde:	f001 f871 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8010fe2:	b918      	cbnz	r0, 8010fec <uxr_buffer_cancel_data+0x3c>
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	b014      	add	sp, #80	@ 0x50
 8010fea:	bd10      	pop	{r4, pc}
 8010fec:	9905      	ldr	r1, [sp, #20]
 8010fee:	aa06      	add	r2, sp, #24
 8010ff0:	4620      	mov	r0, r4
 8010ff2:	f001 f99d 	bl	8012330 <uxr_init_base_object_request>
 8010ff6:	a906      	add	r1, sp, #24
 8010ff8:	4604      	mov	r4, r0
 8010ffa:	a80c      	add	r0, sp, #48	@ 0x30
 8010ffc:	f003 f872 	bl	80140e4 <uxr_serialize_READ_DATA_Payload>
 8011000:	4620      	mov	r0, r4
 8011002:	b014      	add	sp, #80	@ 0x50
 8011004:	bd10      	pop	{r4, pc}
 8011006:	bf00      	nop

08011008 <read_submessage_format>:
 8011008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801100c:	b095      	sub	sp, #84	@ 0x54
 801100e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8011012:	b113      	cbz	r3, 801101a <read_submessage_format+0x12>
 8011014:	b015      	add	sp, #84	@ 0x54
 8011016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801101a:	460c      	mov	r4, r1
 801101c:	4615      	mov	r5, r2
 801101e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011022:	4607      	mov	r7, r0
 8011024:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011026:	9004      	str	r0, [sp, #16]
 8011028:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801102a:	9005      	str	r0, [sp, #20]
 801102c:	1a52      	subs	r2, r2, r1
 801102e:	a80c      	add	r0, sp, #48	@ 0x30
 8011030:	4699      	mov	r9, r3
 8011032:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8011036:	f7fb fcad 	bl	800c994 <ucdr_init_buffer>
 801103a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801103e:	a80c      	add	r0, sp, #48	@ 0x30
 8011040:	f7fb fc7c 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 8011044:	69e2      	ldr	r2, [r4, #28]
 8011046:	b19a      	cbz	r2, 8011070 <read_submessage_format+0x68>
 8011048:	f1b8 0f07 	cmp.w	r8, #7
 801104c:	f882 9014 	strb.w	r9, [r2, #20]
 8011050:	d040      	beq.n	80110d4 <read_submessage_format+0xcc>
 8011052:	f1b8 0f08 	cmp.w	r8, #8
 8011056:	d02e      	beq.n	80110b6 <read_submessage_format+0xae>
 8011058:	f1b8 0f06 	cmp.w	r8, #6
 801105c:	d011      	beq.n	8011082 <read_submessage_format+0x7a>
 801105e:	2301      	movs	r3, #1
 8011060:	7513      	strb	r3, [r2, #20]
 8011062:	4629      	mov	r1, r5
 8011064:	4620      	mov	r0, r4
 8011066:	f7fb fce5 	bl	800ca34 <ucdr_advance_buffer>
 801106a:	b015      	add	sp, #84	@ 0x54
 801106c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011070:	f1b8 0f07 	cmp.w	r8, #7
 8011074:	d02e      	beq.n	80110d4 <read_submessage_format+0xcc>
 8011076:	f1b8 0f08 	cmp.w	r8, #8
 801107a:	d01c      	beq.n	80110b6 <read_submessage_format+0xae>
 801107c:	f1b8 0f06 	cmp.w	r8, #6
 8011080:	d1ef      	bne.n	8011062 <read_submessage_format+0x5a>
 8011082:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011086:	f1b8 0f00 	cmp.w	r8, #0
 801108a:	d011      	beq.n	80110b0 <read_submessage_format+0xa8>
 801108c:	ab0c      	add	r3, sp, #48	@ 0x30
 801108e:	e9cd 3500 	strd	r3, r5, [sp]
 8011092:	2306      	movs	r3, #6
 8011094:	f88d 3016 	strb.w	r3, [sp, #22]
 8011098:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801109c:	9302      	str	r3, [sp, #8]
 801109e:	4632      	mov	r2, r6
 80110a0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80110a4:	4638      	mov	r0, r7
 80110a6:	47c0      	blx	r8
 80110a8:	2301      	movs	r3, #1
 80110aa:	69e2      	ldr	r2, [r4, #28]
 80110ac:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80110b0:	2a00      	cmp	r2, #0
 80110b2:	d1d4      	bne.n	801105e <read_submessage_format+0x56>
 80110b4:	e7d5      	b.n	8011062 <read_submessage_format+0x5a>
 80110b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d0f8      	beq.n	80110b0 <read_submessage_format+0xa8>
 80110be:	a906      	add	r1, sp, #24
 80110c0:	a80c      	add	r0, sp, #48	@ 0x30
 80110c2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80110c6:	f003 f8e1 	bl	801428c <uxr_deserialize_SampleIdentity>
 80110ca:	b9a0      	cbnz	r0, 80110f6 <read_submessage_format+0xee>
 80110cc:	69e2      	ldr	r2, [r4, #28]
 80110ce:	2a00      	cmp	r2, #0
 80110d0:	d1c5      	bne.n	801105e <read_submessage_format+0x56>
 80110d2:	e7c6      	b.n	8011062 <read_submessage_format+0x5a>
 80110d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110d8:	b13b      	cbz	r3, 80110ea <read_submessage_format+0xe2>
 80110da:	a906      	add	r1, sp, #24
 80110dc:	a80c      	add	r0, sp, #48	@ 0x30
 80110de:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80110e2:	f002 fd99 	bl	8013c18 <uxr_deserialize_BaseObjectRequest>
 80110e6:	bb60      	cbnz	r0, 8011142 <read_submessage_format+0x13a>
 80110e8:	69e2      	ldr	r2, [r4, #28]
 80110ea:	68a3      	ldr	r3, [r4, #8]
 80110ec:	442b      	add	r3, r5
 80110ee:	60a3      	str	r3, [r4, #8]
 80110f0:	2a00      	cmp	r2, #0
 80110f2:	d1b4      	bne.n	801105e <read_submessage_format+0x56>
 80110f4:	e7b5      	b.n	8011062 <read_submessage_format+0x5a>
 80110f6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80110fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80110fc:	1a52      	subs	r2, r2, r1
 80110fe:	eba8 0803 	sub.w	r8, r8, r3
 8011102:	a80c      	add	r0, sp, #48	@ 0x30
 8011104:	f7fb fc46 	bl	800c994 <ucdr_init_buffer>
 8011108:	44a8      	add	r8, r5
 801110a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801110e:	a80c      	add	r0, sp, #48	@ 0x30
 8011110:	f7fb fc14 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 8011114:	fa1f f888 	uxth.w	r8, r8
 8011118:	ab0c      	add	r3, sp, #48	@ 0x30
 801111a:	9300      	str	r3, [sp, #0]
 801111c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011120:	2108      	movs	r1, #8
 8011122:	f88d 1016 	strb.w	r1, [sp, #22]
 8011126:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801112a:	9102      	str	r1, [sp, #8]
 801112c:	ab06      	add	r3, sp, #24
 801112e:	4632      	mov	r2, r6
 8011130:	9905      	ldr	r1, [sp, #20]
 8011132:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011136:	4638      	mov	r0, r7
 8011138:	47b0      	blx	r6
 801113a:	2301      	movs	r3, #1
 801113c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011140:	e7c4      	b.n	80110cc <read_submessage_format+0xc4>
 8011142:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011146:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011148:	1a52      	subs	r2, r2, r1
 801114a:	a80c      	add	r0, sp, #48	@ 0x30
 801114c:	eba8 0803 	sub.w	r8, r8, r3
 8011150:	f7fb fc20 	bl	800c994 <ucdr_init_buffer>
 8011154:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011158:	a80c      	add	r0, sp, #48	@ 0x30
 801115a:	f7fb fbef 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 801115e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011160:	9300      	str	r3, [sp, #0]
 8011162:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011166:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801116a:	44a8      	add	r8, r5
 801116c:	fa1f f888 	uxth.w	r8, r8
 8011170:	f8cd 8004 	str.w	r8, [sp, #4]
 8011174:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011178:	2107      	movs	r1, #7
 801117a:	f88d 1016 	strb.w	r1, [sp, #22]
 801117e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8011182:	9102      	str	r1, [sp, #8]
 8011184:	4632      	mov	r2, r6
 8011186:	b29b      	uxth	r3, r3
 8011188:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801118c:	9905      	ldr	r1, [sp, #20]
 801118e:	4638      	mov	r0, r7
 8011190:	47b0      	blx	r6
 8011192:	2301      	movs	r3, #1
 8011194:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011198:	e7a6      	b.n	80110e8 <read_submessage_format+0xe0>
 801119a:	bf00      	nop

0801119c <on_get_fragmentation_info>:
 801119c:	b500      	push	{lr}
 801119e:	b08b      	sub	sp, #44	@ 0x2c
 80111a0:	4601      	mov	r1, r0
 80111a2:	2204      	movs	r2, #4
 80111a4:	a802      	add	r0, sp, #8
 80111a6:	f7fb fbf5 	bl	800c994 <ucdr_init_buffer>
 80111aa:	f10d 0305 	add.w	r3, sp, #5
 80111ae:	f10d 0206 	add.w	r2, sp, #6
 80111b2:	a901      	add	r1, sp, #4
 80111b4:	a802      	add	r0, sp, #8
 80111b6:	f001 fecf 	bl	8012f58 <uxr_read_submessage_header>
 80111ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80111be:	2b0d      	cmp	r3, #13
 80111c0:	d003      	beq.n	80111ca <on_get_fragmentation_info+0x2e>
 80111c2:	2000      	movs	r0, #0
 80111c4:	b00b      	add	sp, #44	@ 0x2c
 80111c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80111ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80111ce:	f013 0f02 	tst.w	r3, #2
 80111d2:	bf14      	ite	ne
 80111d4:	2002      	movne	r0, #2
 80111d6:	2001      	moveq	r0, #1
 80111d8:	b00b      	add	sp, #44	@ 0x2c
 80111da:	f85d fb04 	ldr.w	pc, [sp], #4
 80111de:	bf00      	nop

080111e0 <read_submessage_get_info>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	2500      	movs	r5, #0
 80111e4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80111e8:	4604      	mov	r4, r0
 80111ea:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80111ee:	460e      	mov	r6, r1
 80111f0:	a810      	add	r0, sp, #64	@ 0x40
 80111f2:	4629      	mov	r1, r5
 80111f4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80111f8:	f009 fa02 	bl	801a600 <memset>
 80111fc:	a903      	add	r1, sp, #12
 80111fe:	4630      	mov	r0, r6
 8011200:	f002 feb2 	bl	8013f68 <uxr_deserialize_GET_INFO_Payload>
 8011204:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011208:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801120c:	4620      	mov	r0, r4
 801120e:	f001 f887 	bl	8012320 <uxr_session_header_offset>
 8011212:	462b      	mov	r3, r5
 8011214:	9000      	str	r0, [sp, #0]
 8011216:	220c      	movs	r2, #12
 8011218:	a905      	add	r1, sp, #20
 801121a:	a808      	add	r0, sp, #32
 801121c:	f7fb fba8 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8011220:	a910      	add	r1, sp, #64	@ 0x40
 8011222:	a808      	add	r0, sp, #32
 8011224:	f002 ff12 	bl	801404c <uxr_serialize_INFO_Payload>
 8011228:	9b08      	ldr	r3, [sp, #32]
 801122a:	462a      	mov	r2, r5
 801122c:	4629      	mov	r1, r5
 801122e:	4620      	mov	r0, r4
 8011230:	f001 f820 	bl	8012274 <uxr_stamp_session_header>
 8011234:	a808      	add	r0, sp, #32
 8011236:	f7fb fbd9 	bl	800c9ec <ucdr_buffer_length>
 801123a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801123c:	4602      	mov	r2, r0
 801123e:	a905      	add	r1, sp, #20
 8011240:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011244:	47a0      	blx	r4
 8011246:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801124a:	bd70      	pop	{r4, r5, r6, pc}

0801124c <write_submessage_acknack.isra.0>:
 801124c:	b570      	push	{r4, r5, r6, lr}
 801124e:	b092      	sub	sp, #72	@ 0x48
 8011250:	4605      	mov	r5, r0
 8011252:	460e      	mov	r6, r1
 8011254:	4614      	mov	r4, r2
 8011256:	f001 f863 	bl	8012320 <uxr_session_header_offset>
 801125a:	a905      	add	r1, sp, #20
 801125c:	9000      	str	r0, [sp, #0]
 801125e:	2300      	movs	r3, #0
 8011260:	a80a      	add	r0, sp, #40	@ 0x28
 8011262:	2211      	movs	r2, #17
 8011264:	f7fb fb84 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8011268:	2218      	movs	r2, #24
 801126a:	fb02 5404 	mla	r4, r2, r4, r5
 801126e:	2300      	movs	r3, #0
 8011270:	2205      	movs	r2, #5
 8011272:	3450      	adds	r4, #80	@ 0x50
 8011274:	210a      	movs	r1, #10
 8011276:	a80a      	add	r0, sp, #40	@ 0x28
 8011278:	f001 fe54 	bl	8012f24 <uxr_buffer_submessage_header>
 801127c:	a903      	add	r1, sp, #12
 801127e:	4620      	mov	r0, r4
 8011280:	f007 fca2 	bl	8018bc8 <uxr_compute_acknack>
 8011284:	ba40      	rev16	r0, r0
 8011286:	f8ad 000e 	strh.w	r0, [sp, #14]
 801128a:	a903      	add	r1, sp, #12
 801128c:	a80a      	add	r0, sp, #40	@ 0x28
 801128e:	f88d 6010 	strb.w	r6, [sp, #16]
 8011292:	f002 ff4b 	bl	801412c <uxr_serialize_ACKNACK_Payload>
 8011296:	2200      	movs	r2, #0
 8011298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801129a:	4611      	mov	r1, r2
 801129c:	4628      	mov	r0, r5
 801129e:	f000 ffe9 	bl	8012274 <uxr_stamp_session_header>
 80112a2:	a80a      	add	r0, sp, #40	@ 0x28
 80112a4:	f7fb fba2 	bl	800c9ec <ucdr_buffer_length>
 80112a8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80112aa:	4602      	mov	r2, r0
 80112ac:	a905      	add	r1, sp, #20
 80112ae:	e9d3 0400 	ldrd	r0, r4, [r3]
 80112b2:	47a0      	blx	r4
 80112b4:	b012      	add	sp, #72	@ 0x48
 80112b6:	bd70      	pop	{r4, r5, r6, pc}

080112b8 <uxr_init_session>:
 80112b8:	b510      	push	{r4, lr}
 80112ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80112f0 <uxr_init_session+0x38>
 80112be:	2300      	movs	r3, #0
 80112c0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80112c4:	4604      	mov	r4, r0
 80112c6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80112ca:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80112ce:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80112d2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80112d6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80112da:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80112de:	2181      	movs	r1, #129	@ 0x81
 80112e0:	f000 ff34 	bl	801214c <uxr_init_session_info>
 80112e4:	f104 0008 	add.w	r0, r4, #8
 80112e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112ec:	f001 bd36 	b.w	8012d5c <uxr_init_stream_storage>
	...

080112f8 <uxr_set_status_callback>:
 80112f8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop

08011300 <uxr_set_topic_callback>:
 8011300:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop

08011308 <uxr_set_request_callback>:
 8011308:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop

08011310 <uxr_set_reply_callback>:
 8011310:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8011314:	4770      	bx	lr
 8011316:	bf00      	nop

08011318 <uxr_create_output_best_effort_stream>:
 8011318:	b510      	push	{r4, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	e9cd 2100 	strd	r2, r1, [sp]
 8011320:	4604      	mov	r4, r0
 8011322:	f000 fffd 	bl	8012320 <uxr_session_header_offset>
 8011326:	e9dd 2100 	ldrd	r2, r1, [sp]
 801132a:	4603      	mov	r3, r0
 801132c:	f104 0008 	add.w	r0, r4, #8
 8011330:	b004      	add	sp, #16
 8011332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011336:	f001 bd5b 	b.w	8012df0 <uxr_add_output_best_effort_buffer>
 801133a:	bf00      	nop

0801133c <uxr_create_output_reliable_stream>:
 801133c:	b510      	push	{r4, lr}
 801133e:	b088      	sub	sp, #32
 8011340:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011344:	4604      	mov	r4, r0
 8011346:	9303      	str	r3, [sp, #12]
 8011348:	f000 ffea 	bl	8012320 <uxr_session_header_offset>
 801134c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011350:	9000      	str	r0, [sp, #0]
 8011352:	9905      	ldr	r1, [sp, #20]
 8011354:	f104 0008 	add.w	r0, r4, #8
 8011358:	f001 fd5e 	bl	8012e18 <uxr_add_output_reliable_buffer>
 801135c:	2200      	movs	r2, #0
 801135e:	b2c3      	uxtb	r3, r0
 8011360:	f363 0207 	bfi	r2, r3, #0, #8
 8011364:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011368:	f363 220f 	bfi	r2, r3, #8, #8
 801136c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011370:	f363 4217 	bfi	r2, r3, #16, #8
 8011374:	0e03      	lsrs	r3, r0, #24
 8011376:	f363 621f 	bfi	r2, r3, #24, #8
 801137a:	4610      	mov	r0, r2
 801137c:	b008      	add	sp, #32
 801137e:	bd10      	pop	{r4, pc}

08011380 <uxr_create_input_best_effort_stream>:
 8011380:	b082      	sub	sp, #8
 8011382:	3008      	adds	r0, #8
 8011384:	b002      	add	sp, #8
 8011386:	f001 bd61 	b.w	8012e4c <uxr_add_input_best_effort_buffer>
 801138a:	bf00      	nop

0801138c <uxr_create_input_reliable_stream>:
 801138c:	b510      	push	{r4, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	4c0b      	ldr	r4, [pc, #44]	@ (80113c0 <uxr_create_input_reliable_stream+0x34>)
 8011392:	9400      	str	r4, [sp, #0]
 8011394:	3008      	adds	r0, #8
 8011396:	f001 fd6f 	bl	8012e78 <uxr_add_input_reliable_buffer>
 801139a:	2200      	movs	r2, #0
 801139c:	b2c3      	uxtb	r3, r0
 801139e:	f363 0207 	bfi	r2, r3, #0, #8
 80113a2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80113a6:	f363 220f 	bfi	r2, r3, #8, #8
 80113aa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80113ae:	f363 4217 	bfi	r2, r3, #16, #8
 80113b2:	0e03      	lsrs	r3, r0, #24
 80113b4:	f363 621f 	bfi	r2, r3, #24, #8
 80113b8:	4610      	mov	r0, r2
 80113ba:	b004      	add	sp, #16
 80113bc:	bd10      	pop	{r4, pc}
 80113be:	bf00      	nop
 80113c0:	0801119d 	.word	0x0801119d

080113c4 <uxr_epoch_millis>:
 80113c4:	b510      	push	{r4, lr}
 80113c6:	4604      	mov	r4, r0
 80113c8:	f001 fe0c 	bl	8012fe4 <uxr_nanos>
 80113cc:	e9d4 3426 	ldrd	r3, r4, [r4, #152]	@ 0x98
 80113d0:	1ac0      	subs	r0, r0, r3
 80113d2:	4a04      	ldr	r2, [pc, #16]	@ (80113e4 <uxr_epoch_millis+0x20>)
 80113d4:	f04f 0300 	mov.w	r3, #0
 80113d8:	eb61 0104 	sbc.w	r1, r1, r4
 80113dc:	f7ef fc44 	bl	8000c68 <__aeabi_ldivmod>
 80113e0:	bd10      	pop	{r4, pc}
 80113e2:	bf00      	nop
 80113e4:	000f4240 	.word	0x000f4240

080113e8 <uxr_epoch_nanos>:
 80113e8:	b510      	push	{r4, lr}
 80113ea:	4604      	mov	r4, r0
 80113ec:	f001 fdfa 	bl	8012fe4 <uxr_nanos>
 80113f0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80113f4:	1ac0      	subs	r0, r0, r3
 80113f6:	eb61 0102 	sbc.w	r1, r1, r2
 80113fa:	bd10      	pop	{r4, pc}

080113fc <uxr_flash_output_streams>:
 80113fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011400:	7e03      	ldrb	r3, [r0, #24]
 8011402:	b084      	sub	sp, #16
 8011404:	4604      	mov	r4, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d035      	beq.n	8011476 <uxr_flash_output_streams+0x7a>
 801140a:	f04f 0900 	mov.w	r9, #0
 801140e:	4648      	mov	r0, r9
 8011410:	f10d 0802 	add.w	r8, sp, #2
 8011414:	af03      	add	r7, sp, #12
 8011416:	ae02      	add	r6, sp, #8
 8011418:	e006      	b.n	8011428 <uxr_flash_output_streams+0x2c>
 801141a:	7e23      	ldrb	r3, [r4, #24]
 801141c:	f109 0901 	add.w	r9, r9, #1
 8011420:	fa5f f089 	uxtb.w	r0, r9
 8011424:	4283      	cmp	r3, r0
 8011426:	d926      	bls.n	8011476 <uxr_flash_output_streams+0x7a>
 8011428:	2201      	movs	r2, #1
 801142a:	4611      	mov	r1, r2
 801142c:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8011430:	f001 fc40 	bl	8012cb4 <uxr_stream_id>
 8011434:	3508      	adds	r5, #8
 8011436:	4684      	mov	ip, r0
 8011438:	4643      	mov	r3, r8
 801143a:	463a      	mov	r2, r7
 801143c:	4631      	mov	r1, r6
 801143e:	4628      	mov	r0, r5
 8011440:	f8cd c004 	str.w	ip, [sp, #4]
 8011444:	f007 fc46 	bl	8018cd4 <uxr_prepare_best_effort_buffer_to_send>
 8011448:	2800      	cmp	r0, #0
 801144a:	d0e6      	beq.n	801141a <uxr_flash_output_streams+0x1e>
 801144c:	9b02      	ldr	r3, [sp, #8]
 801144e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011452:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011456:	4620      	mov	r0, r4
 8011458:	f000 ff0c 	bl	8012274 <uxr_stamp_session_header>
 801145c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801145e:	9a03      	ldr	r2, [sp, #12]
 8011460:	685d      	ldr	r5, [r3, #4]
 8011462:	6818      	ldr	r0, [r3, #0]
 8011464:	9902      	ldr	r1, [sp, #8]
 8011466:	47a8      	blx	r5
 8011468:	f109 0901 	add.w	r9, r9, #1
 801146c:	7e23      	ldrb	r3, [r4, #24]
 801146e:	fa5f f089 	uxtb.w	r0, r9
 8011472:	4283      	cmp	r3, r0
 8011474:	d8d8      	bhi.n	8011428 <uxr_flash_output_streams+0x2c>
 8011476:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801147a:	b38b      	cbz	r3, 80114e0 <uxr_flash_output_streams+0xe4>
 801147c:	f04f 0900 	mov.w	r9, #0
 8011480:	f10d 0802 	add.w	r8, sp, #2
 8011484:	af03      	add	r7, sp, #12
 8011486:	ae02      	add	r6, sp, #8
 8011488:	4648      	mov	r0, r9
 801148a:	2201      	movs	r2, #1
 801148c:	2102      	movs	r1, #2
 801148e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011492:	f001 fc0f 	bl	8012cb4 <uxr_stream_id>
 8011496:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801149a:	3520      	adds	r5, #32
 801149c:	9001      	str	r0, [sp, #4]
 801149e:	e00d      	b.n	80114bc <uxr_flash_output_streams+0xc0>
 80114a0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80114a4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80114a8:	9b02      	ldr	r3, [sp, #8]
 80114aa:	f000 fee3 	bl	8012274 <uxr_stamp_session_header>
 80114ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80114b0:	9a03      	ldr	r2, [sp, #12]
 80114b2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80114b6:	9902      	ldr	r1, [sp, #8]
 80114b8:	6818      	ldr	r0, [r3, #0]
 80114ba:	47d0      	blx	sl
 80114bc:	4643      	mov	r3, r8
 80114be:	463a      	mov	r2, r7
 80114c0:	4631      	mov	r1, r6
 80114c2:	4628      	mov	r0, r5
 80114c4:	f007 fe24 	bl	8019110 <uxr_prepare_next_reliable_buffer_to_send>
 80114c8:	4603      	mov	r3, r0
 80114ca:	4620      	mov	r0, r4
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1e7      	bne.n	80114a0 <uxr_flash_output_streams+0xa4>
 80114d0:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80114d4:	f109 0901 	add.w	r9, r9, #1
 80114d8:	fa5f f089 	uxtb.w	r0, r9
 80114dc:	4283      	cmp	r3, r0
 80114de:	d8d4      	bhi.n	801148a <uxr_flash_output_streams+0x8e>
 80114e0:	b004      	add	sp, #16
 80114e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e6:	bf00      	nop

080114e8 <read_submessage_info>:
 80114e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ec:	460d      	mov	r5, r1
 80114ee:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80114f2:	4669      	mov	r1, sp
 80114f4:	4607      	mov	r7, r0
 80114f6:	4628      	mov	r0, r5
 80114f8:	f002 fc44 	bl	8013d84 <uxr_deserialize_BaseObjectReply>
 80114fc:	a902      	add	r1, sp, #8
 80114fe:	4604      	mov	r4, r0
 8011500:	4628      	mov	r0, r5
 8011502:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011506:	f7f9 ff4b 	bl	800b3a0 <ucdr_deserialize_bool>
 801150a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801150e:	4004      	ands	r4, r0
 8011510:	b2e4      	uxtb	r4, r4
 8011512:	b95b      	cbnz	r3, 801152c <read_submessage_info+0x44>
 8011514:	a987      	add	r1, sp, #540	@ 0x21c
 8011516:	4628      	mov	r0, r5
 8011518:	f7f9 ff42 	bl	800b3a0 <ucdr_deserialize_bool>
 801151c:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011520:	4606      	mov	r6, r0
 8011522:	b94b      	cbnz	r3, 8011538 <read_submessage_info+0x50>
 8011524:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152c:	a903      	add	r1, sp, #12
 801152e:	4628      	mov	r0, r5
 8011530:	f002 fad0 	bl	8013ad4 <uxr_deserialize_ObjectVariant>
 8011534:	4004      	ands	r4, r0
 8011536:	e7ed      	b.n	8011514 <read_submessage_info+0x2c>
 8011538:	a988      	add	r1, sp, #544	@ 0x220
 801153a:	4628      	mov	r0, r5
 801153c:	f7f9 ff5e 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8011540:	4234      	tst	r4, r6
 8011542:	d0ef      	beq.n	8011524 <read_submessage_info+0x3c>
 8011544:	2800      	cmp	r0, #0
 8011546:	d0ed      	beq.n	8011524 <read_submessage_info+0x3c>
 8011548:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801154c:	2b0d      	cmp	r3, #13
 801154e:	d1e9      	bne.n	8011524 <read_submessage_info+0x3c>
 8011550:	a98a      	add	r1, sp, #552	@ 0x228
 8011552:	4628      	mov	r0, r5
 8011554:	f7fa fcf8 	bl	800bf48 <ucdr_deserialize_int16_t>
 8011558:	b140      	cbz	r0, 801156c <read_submessage_info+0x84>
 801155a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801155e:	2b00      	cmp	r3, #0
 8011560:	dd07      	ble.n	8011572 <read_submessage_info+0x8a>
 8011562:	f1b8 0f00 	cmp.w	r8, #0
 8011566:	bf14      	ite	ne
 8011568:	2001      	movne	r0, #1
 801156a:	2002      	moveq	r0, #2
 801156c:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011570:	e7d8      	b.n	8011524 <read_submessage_info+0x3c>
 8011572:	2000      	movs	r0, #0
 8011574:	e7fa      	b.n	801156c <read_submessage_info+0x84>
 8011576:	bf00      	nop

08011578 <read_submessage_list>:
 8011578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801157c:	b097      	sub	sp, #92	@ 0x5c
 801157e:	4ec1      	ldr	r6, [pc, #772]	@ (8011884 <read_submessage_list+0x30c>)
 8011580:	9209      	str	r2, [sp, #36]	@ 0x24
 8011582:	4604      	mov	r4, r0
 8011584:	460d      	mov	r5, r1
 8011586:	f04f 0801 	mov.w	r8, #1
 801158a:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801158e:	aa0c      	add	r2, sp, #48	@ 0x30
 8011590:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011594:	4628      	mov	r0, r5
 8011596:	f001 fcdf 	bl	8012f58 <uxr_read_submessage_header>
 801159a:	2800      	cmp	r0, #0
 801159c:	f000 813e 	beq.w	801181c <read_submessage_list+0x2a4>
 80115a0:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80115a4:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80115a8:	3b02      	subs	r3, #2
 80115aa:	2b0d      	cmp	r3, #13
 80115ac:	d8ed      	bhi.n	801158a <read_submessage_list+0x12>
 80115ae:	a101      	add	r1, pc, #4	@ (adr r1, 80115b4 <read_submessage_list+0x3c>)
 80115b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115b4:	08011813 	.word	0x08011813
 80115b8:	0801158b 	.word	0x0801158b
 80115bc:	08011803 	.word	0x08011803
 80115c0:	080117a1 	.word	0x080117a1
 80115c4:	08011797 	.word	0x08011797
 80115c8:	0801158b 	.word	0x0801158b
 80115cc:	0801158b 	.word	0x0801158b
 80115d0:	080116f7 	.word	0x080116f7
 80115d4:	08011687 	.word	0x08011687
 80115d8:	08011647 	.word	0x08011647
 80115dc:	0801158b 	.word	0x0801158b
 80115e0:	0801158b 	.word	0x0801158b
 80115e4:	0801158b 	.word	0x0801158b
 80115e8:	080115ed 	.word	0x080115ed
 80115ec:	a910      	add	r1, sp, #64	@ 0x40
 80115ee:	4628      	mov	r0, r5
 80115f0:	f002 fdfa 	bl	80141e8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80115f4:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80115f8:	f1b9 0f00 	cmp.w	r9, #0
 80115fc:	f000 8116 	beq.w	801182c <read_submessage_list+0x2b4>
 8011600:	f001 fcf0 	bl	8012fe4 <uxr_nanos>
 8011604:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011606:	4602      	mov	r2, r0
 8011608:	460b      	mov	r3, r1
 801160a:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801160c:	2100      	movs	r1, #0
 801160e:	468c      	mov	ip, r1
 8011610:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011614:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011618:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801161a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801161c:	468c      	mov	ip, r1
 801161e:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011622:	46e2      	mov	sl, ip
 8011624:	46bc      	mov	ip, r7
 8011626:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 801162a:	fbc0 7106 	smlal	r7, r1, r0, r6
 801162e:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8011632:	e9cd 7100 	strd	r7, r1, [sp]
 8011636:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801163a:	9106      	str	r1, [sp, #24]
 801163c:	4620      	mov	r0, r4
 801163e:	47c8      	blx	r9
 8011640:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011644:	e7a1      	b.n	801158a <read_submessage_list+0x12>
 8011646:	a910      	add	r1, sp, #64	@ 0x40
 8011648:	4628      	mov	r0, r5
 801164a:	f002 fdad 	bl	80141a8 <uxr_deserialize_HEARTBEAT_Payload>
 801164e:	2100      	movs	r1, #0
 8011650:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011654:	f001 fb58 	bl	8012d08 <uxr_stream_id_from_raw>
 8011658:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801165c:	900f      	str	r0, [sp, #60]	@ 0x3c
 801165e:	4639      	mov	r1, r7
 8011660:	f104 0008 	add.w	r0, r4, #8
 8011664:	f001 fc3e 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8011668:	2800      	cmp	r0, #0
 801166a:	d08e      	beq.n	801158a <read_submessage_list+0x12>
 801166c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011670:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011674:	f007 fa9c 	bl	8018bb0 <uxr_process_heartbeat>
 8011678:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 801167c:	463a      	mov	r2, r7
 801167e:	4620      	mov	r0, r4
 8011680:	f7ff fde4 	bl	801124c <write_submessage_acknack.isra.0>
 8011684:	e781      	b.n	801158a <read_submessage_list+0x12>
 8011686:	a910      	add	r1, sp, #64	@ 0x40
 8011688:	4628      	mov	r0, r5
 801168a:	f002 fd65 	bl	8014158 <uxr_deserialize_ACKNACK_Payload>
 801168e:	2100      	movs	r1, #0
 8011690:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011694:	f001 fb38 	bl	8012d08 <uxr_stream_id_from_raw>
 8011698:	900d      	str	r0, [sp, #52]	@ 0x34
 801169a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801169e:	f104 0008 	add.w	r0, r4, #8
 80116a2:	f001 fc0b 	bl	8012ebc <uxr_get_output_reliable_stream>
 80116a6:	4607      	mov	r7, r0
 80116a8:	2800      	cmp	r0, #0
 80116aa:	f43f af6e 	beq.w	801158a <read_submessage_list+0x12>
 80116ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80116b2:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80116b6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80116ba:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80116be:	b289      	uxth	r1, r1
 80116c0:	f007 fdd0 	bl	8019264 <uxr_process_acknack>
 80116c4:	4638      	mov	r0, r7
 80116c6:	f007 fd8d 	bl	80191e4 <uxr_begin_output_nack_buffer_it>
 80116ca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80116ce:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80116d2:	e006      	b.n	80116e2 <read_submessage_list+0x16a>
 80116d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80116d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80116d8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80116dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80116de:	6818      	ldr	r0, [r3, #0]
 80116e0:	47c8      	blx	r9
 80116e2:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80116e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80116e8:	4651      	mov	r1, sl
 80116ea:	4638      	mov	r0, r7
 80116ec:	f007 fd7c 	bl	80191e8 <uxr_next_reliable_nack_buffer_to_send>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	d1ef      	bne.n	80116d4 <read_submessage_list+0x15c>
 80116f4:	e749      	b.n	801158a <read_submessage_list+0x12>
 80116f6:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80116fa:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80116fe:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011702:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8011706:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801170a:	4651      	mov	r1, sl
 801170c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011710:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011714:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011718:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 801171c:	4628      	mov	r0, r5
 801171e:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011722:	f002 fa79 	bl	8013c18 <uxr_deserialize_BaseObjectRequest>
 8011726:	4650      	mov	r0, sl
 8011728:	a90f      	add	r1, sp, #60	@ 0x3c
 801172a:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801172e:	f000 fe1d 	bl	801236c <uxr_parse_base_object_request>
 8011732:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011736:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011738:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801173c:	9110      	str	r1, [sp, #64]	@ 0x40
 801173e:	3f04      	subs	r7, #4
 8011740:	f009 090e 	and.w	r9, r9, #14
 8011744:	b2bf      	uxth	r7, r7
 8011746:	f1bb 0f00 	cmp.w	fp, #0
 801174a:	d006      	beq.n	801175a <read_submessage_list+0x1e2>
 801174c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011750:	9300      	str	r3, [sp, #0]
 8011752:	4652      	mov	r2, sl
 8011754:	2300      	movs	r3, #0
 8011756:	4620      	mov	r0, r4
 8011758:	47d8      	blx	fp
 801175a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801175c:	b16a      	cbz	r2, 801177a <read_submessage_list+0x202>
 801175e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011760:	2100      	movs	r1, #0
 8011762:	3802      	subs	r0, #2
 8011764:	e002      	b.n	801176c <read_submessage_list+0x1f4>
 8011766:	3101      	adds	r1, #1
 8011768:	4291      	cmp	r1, r2
 801176a:	d006      	beq.n	801177a <read_submessage_list+0x202>
 801176c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011770:	4553      	cmp	r3, sl
 8011772:	d1f8      	bne.n	8011766 <read_submessage_list+0x1ee>
 8011774:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011776:	2200      	movs	r2, #0
 8011778:	545a      	strb	r2, [r3, r1]
 801177a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801177e:	9102      	str	r1, [sp, #8]
 8011780:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011782:	9101      	str	r1, [sp, #4]
 8011784:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011786:	9100      	str	r1, [sp, #0]
 8011788:	464b      	mov	r3, r9
 801178a:	463a      	mov	r2, r7
 801178c:	4629      	mov	r1, r5
 801178e:	4620      	mov	r0, r4
 8011790:	f7ff fc3a 	bl	8011008 <read_submessage_format>
 8011794:	e6f9      	b.n	801158a <read_submessage_list+0x12>
 8011796:	4629      	mov	r1, r5
 8011798:	4620      	mov	r0, r4
 801179a:	f7ff fea5 	bl	80114e8 <read_submessage_info>
 801179e:	e6f4      	b.n	801158a <read_submessage_list+0x12>
 80117a0:	2a00      	cmp	r2, #0
 80117a2:	d03e      	beq.n	8011822 <read_submessage_list+0x2aa>
 80117a4:	a910      	add	r1, sp, #64	@ 0x40
 80117a6:	4628      	mov	r0, r5
 80117a8:	f002 fc32 	bl	8014010 <uxr_deserialize_STATUS_Payload>
 80117ac:	a90e      	add	r1, sp, #56	@ 0x38
 80117ae:	aa0d      	add	r2, sp, #52	@ 0x34
 80117b0:	a810      	add	r0, sp, #64	@ 0x40
 80117b2:	f000 fddb 	bl	801236c <uxr_parse_base_object_request>
 80117b6:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80117ba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80117bc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80117c0:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80117c4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80117c6:	f1ba 0f00 	cmp.w	sl, #0
 80117ca:	d006      	beq.n	80117da <read_submessage_list+0x262>
 80117cc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80117d0:	9300      	str	r3, [sp, #0]
 80117d2:	463a      	mov	r2, r7
 80117d4:	464b      	mov	r3, r9
 80117d6:	4620      	mov	r0, r4
 80117d8:	47d0      	blx	sl
 80117da:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80117dc:	2a00      	cmp	r2, #0
 80117de:	f43f aed4 	beq.w	801158a <read_submessage_list+0x12>
 80117e2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80117e4:	2100      	movs	r1, #0
 80117e6:	3802      	subs	r0, #2
 80117e8:	e003      	b.n	80117f2 <read_submessage_list+0x27a>
 80117ea:	3101      	adds	r1, #1
 80117ec:	4291      	cmp	r1, r2
 80117ee:	f43f aecc 	beq.w	801158a <read_submessage_list+0x12>
 80117f2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80117f6:	42bb      	cmp	r3, r7
 80117f8:	d1f7      	bne.n	80117ea <read_submessage_list+0x272>
 80117fa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80117fc:	f803 9001 	strb.w	r9, [r3, r1]
 8011800:	e6c3      	b.n	801158a <read_submessage_list+0x12>
 8011802:	2a00      	cmp	r2, #0
 8011804:	f47f aec1 	bne.w	801158a <read_submessage_list+0x12>
 8011808:	4629      	mov	r1, r5
 801180a:	4620      	mov	r0, r4
 801180c:	f000 fcf4 	bl	80121f8 <uxr_read_create_session_status>
 8011810:	e6bb      	b.n	801158a <read_submessage_list+0x12>
 8011812:	4629      	mov	r1, r5
 8011814:	4620      	mov	r0, r4
 8011816:	f7ff fce3 	bl	80111e0 <read_submessage_get_info>
 801181a:	e6b6      	b.n	801158a <read_submessage_list+0x12>
 801181c:	b017      	add	sp, #92	@ 0x5c
 801181e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011822:	4629      	mov	r1, r5
 8011824:	4620      	mov	r0, r4
 8011826:	f000 fcf3 	bl	8012210 <uxr_read_delete_session_status>
 801182a:	e6ae      	b.n	801158a <read_submessage_list+0x12>
 801182c:	f001 fbda 	bl	8012fe4 <uxr_nanos>
 8011830:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011832:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011834:	464f      	mov	r7, r9
 8011836:	fbc3 2706 	smlal	r2, r7, r3, r6
 801183a:	1812      	adds	r2, r2, r0
 801183c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801183e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011840:	eb47 0101 	adc.w	r1, r7, r1
 8011844:	464f      	mov	r7, r9
 8011846:	fbc3 0706 	smlal	r0, r7, r3, r6
 801184a:	463b      	mov	r3, r7
 801184c:	4684      	mov	ip, r0
 801184e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8011852:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011856:	eb1c 0c00 	adds.w	ip, ip, r0
 801185a:	464f      	mov	r7, r9
 801185c:	eb43 0307 	adc.w	r3, r3, r7
 8011860:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011864:	eb61 0303 	sbc.w	r3, r1, r3
 8011868:	0fda      	lsrs	r2, r3, #31
 801186a:	eb12 020c 	adds.w	r2, r2, ip
 801186e:	f143 0300 	adc.w	r3, r3, #0
 8011872:	0852      	lsrs	r2, r2, #1
 8011874:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011878:	105b      	asrs	r3, r3, #1
 801187a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 801187e:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011882:	e6dd      	b.n	8011640 <read_submessage_list+0xc8>
 8011884:	3b9aca00 	.word	0x3b9aca00

08011888 <listen_message_reliably>:
 8011888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188c:	1e0b      	subs	r3, r1, #0
 801188e:	b09d      	sub	sp, #116	@ 0x74
 8011890:	bfb8      	it	lt
 8011892:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011896:	4680      	mov	r8, r0
 8011898:	9305      	str	r3, [sp, #20]
 801189a:	f001 fb89 	bl	8012fb0 <uxr_millis>
 801189e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80118a2:	4681      	mov	r9, r0
 80118a4:	2a00      	cmp	r2, #0
 80118a6:	f000 80a1 	beq.w	80119ec <listen_message_reliably+0x164>
 80118aa:	2600      	movs	r6, #0
 80118ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80118b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80118b4:	9303      	str	r3, [sp, #12]
 80118b6:	4630      	mov	r0, r6
 80118b8:	460f      	mov	r7, r1
 80118ba:	e00f      	b.n	80118dc <listen_message_reliably+0x54>
 80118bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80118c0:	9903      	ldr	r1, [sp, #12]
 80118c2:	455a      	cmp	r2, fp
 80118c4:	f106 0601 	add.w	r6, r6, #1
 80118c8:	eb73 0101 	sbcs.w	r1, r3, r1
 80118cc:	b2f0      	uxtb	r0, r6
 80118ce:	da01      	bge.n	80118d4 <listen_message_reliably+0x4c>
 80118d0:	4693      	mov	fp, r2
 80118d2:	9303      	str	r3, [sp, #12]
 80118d4:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80118d8:	4283      	cmp	r3, r0
 80118da:	d960      	bls.n	801199e <listen_message_reliably+0x116>
 80118dc:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80118e0:	2102      	movs	r1, #2
 80118e2:	2201      	movs	r2, #1
 80118e4:	f001 f9e6 	bl	8012cb4 <uxr_stream_id>
 80118e8:	00e4      	lsls	r4, r4, #3
 80118ea:	f104 0520 	add.w	r5, r4, #32
 80118ee:	4445      	add	r5, r8
 80118f0:	4601      	mov	r1, r0
 80118f2:	463b      	mov	r3, r7
 80118f4:	464a      	mov	r2, r9
 80118f6:	4628      	mov	r0, r5
 80118f8:	9109      	str	r1, [sp, #36]	@ 0x24
 80118fa:	f007 fc49 	bl	8019190 <uxr_update_output_stream_heartbeat_timestamp>
 80118fe:	eb08 0304 	add.w	r3, r8, r4
 8011902:	2800      	cmp	r0, #0
 8011904:	d0da      	beq.n	80118bc <listen_message_reliably+0x34>
 8011906:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801190a:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801190e:	9304      	str	r3, [sp, #16]
 8011910:	4640      	mov	r0, r8
 8011912:	f000 fd05 	bl	8012320 <uxr_session_header_offset>
 8011916:	3501      	adds	r5, #1
 8011918:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801191c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011920:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011924:	2300      	movs	r3, #0
 8011926:	2211      	movs	r2, #17
 8011928:	9000      	str	r0, [sp, #0]
 801192a:	a90c      	add	r1, sp, #48	@ 0x30
 801192c:	4650      	mov	r0, sl
 801192e:	f7fb f81f 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8011932:	2300      	movs	r3, #0
 8011934:	2205      	movs	r2, #5
 8011936:	210b      	movs	r1, #11
 8011938:	4650      	mov	r0, sl
 801193a:	f001 faf3 	bl	8012f24 <uxr_buffer_submessage_header>
 801193e:	8968      	ldrh	r0, [r5, #10]
 8011940:	2101      	movs	r1, #1
 8011942:	f007 fce7 	bl	8019314 <uxr_seq_num_add>
 8011946:	892b      	ldrh	r3, [r5, #8]
 8011948:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801194c:	4602      	mov	r2, r0
 801194e:	9b04      	ldr	r3, [sp, #16]
 8011950:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011954:	a90a      	add	r1, sp, #40	@ 0x28
 8011956:	4650      	mov	r0, sl
 8011958:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801195c:	f002 fc10 	bl	8014180 <uxr_serialize_HEARTBEAT_Payload>
 8011960:	2200      	movs	r2, #0
 8011962:	4611      	mov	r1, r2
 8011964:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011966:	4640      	mov	r0, r8
 8011968:	f000 fc84 	bl	8012274 <uxr_stamp_session_header>
 801196c:	4650      	mov	r0, sl
 801196e:	f7fb f83d 	bl	800c9ec <ucdr_buffer_length>
 8011972:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011976:	4602      	mov	r2, r0
 8011978:	a90c      	add	r1, sp, #48	@ 0x30
 801197a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801197e:	4444      	add	r4, r8
 8011980:	47a8      	blx	r5
 8011982:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011986:	9903      	ldr	r1, [sp, #12]
 8011988:	455a      	cmp	r2, fp
 801198a:	f106 0601 	add.w	r6, r6, #1
 801198e:	eb73 0101 	sbcs.w	r1, r3, r1
 8011992:	b2f0      	uxtb	r0, r6
 8011994:	db9c      	blt.n	80118d0 <listen_message_reliably+0x48>
 8011996:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801199a:	4283      	cmp	r3, r0
 801199c:	d89e      	bhi.n	80118dc <listen_message_reliably+0x54>
 801199e:	9a03      	ldr	r2, [sp, #12]
 80119a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80119a4:	429a      	cmp	r2, r3
 80119a6:	bf08      	it	eq
 80119a8:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80119ac:	d01e      	beq.n	80119ec <listen_message_reliably+0x164>
 80119ae:	ebab 0309 	sub.w	r3, fp, r9
 80119b2:	9905      	ldr	r1, [sp, #20]
 80119b4:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	bf08      	it	eq
 80119bc:	2301      	moveq	r3, #1
 80119be:	4299      	cmp	r1, r3
 80119c0:	bfa8      	it	ge
 80119c2:	4619      	movge	r1, r3
 80119c4:	6894      	ldr	r4, [r2, #8]
 80119c6:	6810      	ldr	r0, [r2, #0]
 80119c8:	4689      	mov	r9, r1
 80119ca:	460b      	mov	r3, r1
 80119cc:	aa08      	add	r2, sp, #32
 80119ce:	a907      	add	r1, sp, #28
 80119d0:	47a0      	blx	r4
 80119d2:	b968      	cbnz	r0, 80119f0 <listen_message_reliably+0x168>
 80119d4:	9b05      	ldr	r3, [sp, #20]
 80119d6:	eba3 0309 	sub.w	r3, r3, r9
 80119da:	2b00      	cmp	r3, #0
 80119dc:	9305      	str	r3, [sp, #20]
 80119de:	f73f af5c 	bgt.w	801189a <listen_message_reliably+0x12>
 80119e2:	4604      	mov	r4, r0
 80119e4:	4620      	mov	r0, r4
 80119e6:	b01d      	add	sp, #116	@ 0x74
 80119e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ec:	9b05      	ldr	r3, [sp, #20]
 80119ee:	e7e0      	b.n	80119b2 <listen_message_reliably+0x12a>
 80119f0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80119f4:	4604      	mov	r4, r0
 80119f6:	a80c      	add	r0, sp, #48	@ 0x30
 80119f8:	f7fa ffcc 	bl	800c994 <ucdr_init_buffer>
 80119fc:	2500      	movs	r5, #0
 80119fe:	f10d 031a 	add.w	r3, sp, #26
 8011a02:	aa06      	add	r2, sp, #24
 8011a04:	a90c      	add	r1, sp, #48	@ 0x30
 8011a06:	4640      	mov	r0, r8
 8011a08:	f88d 5018 	strb.w	r5, [sp, #24]
 8011a0c:	f000 fc46 	bl	801229c <uxr_read_session_header>
 8011a10:	b918      	cbnz	r0, 8011a1a <listen_message_reliably+0x192>
 8011a12:	4620      	mov	r0, r4
 8011a14:	b01d      	add	sp, #116	@ 0x74
 8011a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a1a:	4629      	mov	r1, r5
 8011a1c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011a20:	f001 f972 	bl	8012d08 <uxr_stream_id_from_raw>
 8011a24:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011a28:	2d01      	cmp	r5, #1
 8011a2a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011a2e:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011a32:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011a36:	d04b      	beq.n	8011ad0 <listen_message_reliably+0x248>
 8011a38:	2d02      	cmp	r5, #2
 8011a3a:	d00f      	beq.n	8011a5c <listen_message_reliably+0x1d4>
 8011a3c:	2d00      	cmp	r5, #0
 8011a3e:	d1e8      	bne.n	8011a12 <listen_message_reliably+0x18a>
 8011a40:	4629      	mov	r1, r5
 8011a42:	4628      	mov	r0, r5
 8011a44:	f001 f960 	bl	8012d08 <uxr_stream_id_from_raw>
 8011a48:	a90c      	add	r1, sp, #48	@ 0x30
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	4640      	mov	r0, r8
 8011a4e:	920a      	str	r2, [sp, #40]	@ 0x28
 8011a50:	f7ff fd92 	bl	8011578 <read_submessage_list>
 8011a54:	4620      	mov	r0, r4
 8011a56:	b01d      	add	sp, #116	@ 0x74
 8011a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a5c:	4631      	mov	r1, r6
 8011a5e:	f108 0008 	add.w	r0, r8, #8
 8011a62:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011a66:	f001 fa3d 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8011a6a:	4607      	mov	r7, r0
 8011a6c:	b338      	cbz	r0, 8011abe <listen_message_reliably+0x236>
 8011a6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a70:	9203      	str	r2, [sp, #12]
 8011a72:	a80c      	add	r0, sp, #48	@ 0x30
 8011a74:	f7fa ffbe 	bl	800c9f4 <ucdr_buffer_remaining>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	f10d 0019 	add.w	r0, sp, #25
 8011a7e:	9000      	str	r0, [sp, #0]
 8011a80:	9a03      	ldr	r2, [sp, #12]
 8011a82:	4651      	mov	r1, sl
 8011a84:	4638      	mov	r0, r7
 8011a86:	f006 ff99 	bl	80189bc <uxr_receive_reliable_message>
 8011a8a:	b1c0      	cbz	r0, 8011abe <listen_message_reliably+0x236>
 8011a8c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011a90:	b393      	cbz	r3, 8011af8 <listen_message_reliably+0x270>
 8011a92:	ad14      	add	r5, sp, #80	@ 0x50
 8011a94:	f04f 0a02 	mov.w	sl, #2
 8011a98:	e00a      	b.n	8011ab0 <listen_message_reliably+0x228>
 8011a9a:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011a9e:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011aa2:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	4640      	mov	r0, r8
 8011aac:	f7ff fd64 	bl	8011578 <read_submessage_list>
 8011ab0:	2204      	movs	r2, #4
 8011ab2:	4629      	mov	r1, r5
 8011ab4:	4638      	mov	r0, r7
 8011ab6:	f007 f801 	bl	8018abc <uxr_next_input_reliable_buffer_available>
 8011aba:	2800      	cmp	r0, #0
 8011abc:	d1ed      	bne.n	8011a9a <listen_message_reliably+0x212>
 8011abe:	4640      	mov	r0, r8
 8011ac0:	4632      	mov	r2, r6
 8011ac2:	4649      	mov	r1, r9
 8011ac4:	f7ff fbc2 	bl	801124c <write_submessage_acknack.isra.0>
 8011ac8:	4620      	mov	r0, r4
 8011aca:	b01d      	add	sp, #116	@ 0x74
 8011acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad0:	4631      	mov	r1, r6
 8011ad2:	f108 0008 	add.w	r0, r8, #8
 8011ad6:	f001 f9fb 	bl	8012ed0 <uxr_get_input_best_effort_stream>
 8011ada:	2800      	cmp	r0, #0
 8011adc:	d099      	beq.n	8011a12 <listen_message_reliably+0x18a>
 8011ade:	4651      	mov	r1, sl
 8011ae0:	f006 fed8 	bl	8018894 <uxr_receive_best_effort_message>
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d094      	beq.n	8011a12 <listen_message_reliably+0x18a>
 8011ae8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011aec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011aee:	a90c      	add	r1, sp, #48	@ 0x30
 8011af0:	4640      	mov	r0, r8
 8011af2:	f7ff fd41 	bl	8011578 <read_submessage_list>
 8011af6:	e78c      	b.n	8011a12 <listen_message_reliably+0x18a>
 8011af8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011afc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011afe:	a90c      	add	r1, sp, #48	@ 0x30
 8011b00:	4640      	mov	r0, r8
 8011b02:	f7ff fd39 	bl	8011578 <read_submessage_list>
 8011b06:	e7c4      	b.n	8011a92 <listen_message_reliably+0x20a>

08011b08 <uxr_run_session_timeout>:
 8011b08:	b570      	push	{r4, r5, r6, lr}
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	460d      	mov	r5, r1
 8011b0e:	f001 fa4f 	bl	8012fb0 <uxr_millis>
 8011b12:	4606      	mov	r6, r0
 8011b14:	4620      	mov	r0, r4
 8011b16:	f7ff fc71 	bl	80113fc <uxr_flash_output_streams>
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f7ff feb3 	bl	8011888 <listen_message_reliably>
 8011b22:	f001 fa45 	bl	8012fb0 <uxr_millis>
 8011b26:	1b83      	subs	r3, r0, r6
 8011b28:	1ae9      	subs	r1, r5, r3
 8011b2a:	2900      	cmp	r1, #0
 8011b2c:	dcf6      	bgt.n	8011b1c <uxr_run_session_timeout+0x14>
 8011b2e:	f104 0008 	add.w	r0, r4, #8
 8011b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b36:	f001 b9df 	b.w	8012ef8 <uxr_output_streams_confirmed>
 8011b3a:	bf00      	nop

08011b3c <uxr_run_session_until_data>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	4604      	mov	r4, r0
 8011b40:	460d      	mov	r5, r1
 8011b42:	f001 fa35 	bl	8012fb0 <uxr_millis>
 8011b46:	4606      	mov	r6, r0
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f7ff fc57 	bl	80113fc <uxr_flash_output_streams>
 8011b4e:	2300      	movs	r3, #0
 8011b50:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011b54:	4629      	mov	r1, r5
 8011b56:	e005      	b.n	8011b64 <uxr_run_session_until_data+0x28>
 8011b58:	f001 fa2a 	bl	8012fb0 <uxr_millis>
 8011b5c:	1b83      	subs	r3, r0, r6
 8011b5e:	1ae9      	subs	r1, r5, r3
 8011b60:	2900      	cmp	r1, #0
 8011b62:	dd07      	ble.n	8011b74 <uxr_run_session_until_data+0x38>
 8011b64:	4620      	mov	r0, r4
 8011b66:	f7ff fe8f 	bl	8011888 <listen_message_reliably>
 8011b6a:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d0f2      	beq.n	8011b58 <uxr_run_session_until_data+0x1c>
 8011b72:	bd70      	pop	{r4, r5, r6, pc}
 8011b74:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011b78:	bd70      	pop	{r4, r5, r6, pc}
 8011b7a:	bf00      	nop

08011b7c <uxr_run_session_until_confirm_delivery>:
 8011b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b80:	4606      	mov	r6, r0
 8011b82:	460d      	mov	r5, r1
 8011b84:	f001 fa14 	bl	8012fb0 <uxr_millis>
 8011b88:	4607      	mov	r7, r0
 8011b8a:	4630      	mov	r0, r6
 8011b8c:	f7ff fc36 	bl	80113fc <uxr_flash_output_streams>
 8011b90:	2d00      	cmp	r5, #0
 8011b92:	f106 0808 	add.w	r8, r6, #8
 8011b96:	bfa8      	it	ge
 8011b98:	462c      	movge	r4, r5
 8011b9a:	da07      	bge.n	8011bac <uxr_run_session_until_confirm_delivery+0x30>
 8011b9c:	e00e      	b.n	8011bbc <uxr_run_session_until_confirm_delivery+0x40>
 8011b9e:	f7ff fe73 	bl	8011888 <listen_message_reliably>
 8011ba2:	f001 fa05 	bl	8012fb0 <uxr_millis>
 8011ba6:	1bc3      	subs	r3, r0, r7
 8011ba8:	1aec      	subs	r4, r5, r3
 8011baa:	d407      	bmi.n	8011bbc <uxr_run_session_until_confirm_delivery+0x40>
 8011bac:	4640      	mov	r0, r8
 8011bae:	f001 f9a3 	bl	8012ef8 <uxr_output_streams_confirmed>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	4630      	mov	r0, r6
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d0f0      	beq.n	8011b9e <uxr_run_session_until_confirm_delivery+0x22>
 8011bbc:	4640      	mov	r0, r8
 8011bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc2:	f001 b999 	b.w	8012ef8 <uxr_output_streams_confirmed>
 8011bc6:	bf00      	nop

08011bc8 <uxr_run_session_until_all_status>:
 8011bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bcc:	9c08      	ldr	r4, [sp, #32]
 8011bce:	4606      	mov	r6, r0
 8011bd0:	460f      	mov	r7, r1
 8011bd2:	4691      	mov	r9, r2
 8011bd4:	461d      	mov	r5, r3
 8011bd6:	f7ff fc11 	bl	80113fc <uxr_flash_output_streams>
 8011bda:	b124      	cbz	r4, 8011be6 <uxr_run_session_until_all_status+0x1e>
 8011bdc:	4622      	mov	r2, r4
 8011bde:	21ff      	movs	r1, #255	@ 0xff
 8011be0:	4628      	mov	r0, r5
 8011be2:	f008 fd0d 	bl	801a600 <memset>
 8011be6:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011bea:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011bec:	f001 f9e0 	bl	8012fb0 <uxr_millis>
 8011bf0:	3d01      	subs	r5, #1
 8011bf2:	f1a9 0902 	sub.w	r9, r9, #2
 8011bf6:	4680      	mov	r8, r0
 8011bf8:	4639      	mov	r1, r7
 8011bfa:	4630      	mov	r0, r6
 8011bfc:	f7ff fe44 	bl	8011888 <listen_message_reliably>
 8011c00:	f001 f9d6 	bl	8012fb0 <uxr_millis>
 8011c04:	eba0 0008 	sub.w	r0, r0, r8
 8011c08:	1a39      	subs	r1, r7, r0
 8011c0a:	b344      	cbz	r4, 8011c5e <uxr_run_session_until_all_status+0x96>
 8011c0c:	4628      	mov	r0, r5
 8011c0e:	46ac      	mov	ip, r5
 8011c10:	2301      	movs	r3, #1
 8011c12:	e002      	b.n	8011c1a <uxr_run_session_until_all_status+0x52>
 8011c14:	42a3      	cmp	r3, r4
 8011c16:	d20d      	bcs.n	8011c34 <uxr_run_session_until_all_status+0x6c>
 8011c18:	3301      	adds	r3, #1
 8011c1a:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011c1e:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8011c22:	d1f7      	bne.n	8011c14 <uxr_run_session_until_all_status+0x4c>
 8011c24:	42a3      	cmp	r3, r4
 8011c26:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011c2a:	d213      	bcs.n	8011c54 <uxr_run_session_until_all_status+0x8c>
 8011c2c:	2a00      	cmp	r2, #0
 8011c2e:	d0f3      	beq.n	8011c18 <uxr_run_session_until_all_status+0x50>
 8011c30:	2900      	cmp	r1, #0
 8011c32:	dce2      	bgt.n	8011bfa <uxr_run_session_until_all_status+0x32>
 8011c34:	2300      	movs	r3, #0
 8011c36:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011c38:	442c      	add	r4, r5
 8011c3a:	e001      	b.n	8011c40 <uxr_run_session_until_all_status+0x78>
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d812      	bhi.n	8011c66 <uxr_run_session_until_all_status+0x9e>
 8011c40:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011c44:	4284      	cmp	r4, r0
 8011c46:	d1f9      	bne.n	8011c3c <uxr_run_session_until_all_status+0x74>
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	bf8c      	ite	hi
 8011c4c:	2000      	movhi	r0, #0
 8011c4e:	2001      	movls	r0, #1
 8011c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c54:	2900      	cmp	r1, #0
 8011c56:	dded      	ble.n	8011c34 <uxr_run_session_until_all_status+0x6c>
 8011c58:	2a00      	cmp	r2, #0
 8011c5a:	d1ce      	bne.n	8011bfa <uxr_run_session_until_all_status+0x32>
 8011c5c:	e7ea      	b.n	8011c34 <uxr_run_session_until_all_status+0x6c>
 8011c5e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011c60:	2001      	movs	r0, #1
 8011c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c66:	2000      	movs	r0, #0
 8011c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6c:	0000      	movs	r0, r0
	...

08011c70 <uxr_sync_session>:
 8011c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c72:	b093      	sub	sp, #76	@ 0x4c
 8011c74:	4604      	mov	r4, r0
 8011c76:	460d      	mov	r5, r1
 8011c78:	f000 fb52 	bl	8012320 <uxr_session_header_offset>
 8011c7c:	2214      	movs	r2, #20
 8011c7e:	eb0d 0102 	add.w	r1, sp, r2
 8011c82:	9000      	str	r0, [sp, #0]
 8011c84:	2300      	movs	r3, #0
 8011c86:	a80a      	add	r0, sp, #40	@ 0x28
 8011c88:	f7fa fe72 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	2208      	movs	r2, #8
 8011c90:	210e      	movs	r1, #14
 8011c92:	a80a      	add	r0, sp, #40	@ 0x28
 8011c94:	f001 f946 	bl	8012f24 <uxr_buffer_submessage_header>
 8011c98:	f001 f9a4 	bl	8012fe4 <uxr_nanos>
 8011c9c:	a31c      	add	r3, pc, #112	@ (adr r3, 8011d10 <uxr_sync_session+0xa0>)
 8011c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca2:	460e      	mov	r6, r1
 8011ca4:	4607      	mov	r7, r0
 8011ca6:	f7ee ffdf 	bl	8000c68 <__aeabi_ldivmod>
 8011caa:	4631      	mov	r1, r6
 8011cac:	9003      	str	r0, [sp, #12]
 8011cae:	a318      	add	r3, pc, #96	@ (adr r3, 8011d10 <uxr_sync_session+0xa0>)
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	f7ee ffd7 	bl	8000c68 <__aeabi_ldivmod>
 8011cba:	a903      	add	r1, sp, #12
 8011cbc:	a80a      	add	r0, sp, #40	@ 0x28
 8011cbe:	9204      	str	r2, [sp, #16]
 8011cc0:	f002 fa84 	bl	80141cc <uxr_serialize_TIMESTAMP_Payload>
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f000 fad2 	bl	8012274 <uxr_stamp_session_header>
 8011cd0:	a80a      	add	r0, sp, #40	@ 0x28
 8011cd2:	f7fa fe8b 	bl	800c9ec <ucdr_buffer_length>
 8011cd6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011cd8:	4602      	mov	r2, r0
 8011cda:	a905      	add	r1, sp, #20
 8011cdc:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011ce0:	47b0      	blx	r6
 8011ce2:	f001 f965 	bl	8012fb0 <uxr_millis>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	4606      	mov	r6, r0
 8011cea:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011cee:	4629      	mov	r1, r5
 8011cf0:	e000      	b.n	8011cf4 <uxr_sync_session+0x84>
 8011cf2:	b950      	cbnz	r0, 8011d0a <uxr_sync_session+0x9a>
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f7ff fdc7 	bl	8011888 <listen_message_reliably>
 8011cfa:	f001 f959 	bl	8012fb0 <uxr_millis>
 8011cfe:	1b83      	subs	r3, r0, r6
 8011d00:	1ae9      	subs	r1, r5, r3
 8011d02:	2900      	cmp	r1, #0
 8011d04:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8011d08:	dcf3      	bgt.n	8011cf2 <uxr_sync_session+0x82>
 8011d0a:	b013      	add	sp, #76	@ 0x4c
 8011d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	3b9aca00 	.word	0x3b9aca00
 8011d14:	00000000 	.word	0x00000000

08011d18 <wait_session_status>:
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	4604      	mov	r4, r0
 8011d1e:	b09d      	sub	sp, #116	@ 0x74
 8011d20:	20ff      	movs	r0, #255	@ 0xff
 8011d22:	7160      	strb	r0, [r4, #5]
 8011d24:	9303      	str	r3, [sp, #12]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 80b6 	beq.w	8011e98 <wait_session_status+0x180>
 8011d2c:	468a      	mov	sl, r1
 8011d2e:	4691      	mov	r9, r2
 8011d30:	f04f 0b00 	mov.w	fp, #0
 8011d34:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011d36:	464a      	mov	r2, r9
 8011d38:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011d3c:	4651      	mov	r1, sl
 8011d3e:	47a8      	blx	r5
 8011d40:	f001 f936 	bl	8012fb0 <uxr_millis>
 8011d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011d48:	4605      	mov	r5, r0
 8011d4a:	e009      	b.n	8011d60 <wait_session_status+0x48>
 8011d4c:	f001 f930 	bl	8012fb0 <uxr_millis>
 8011d50:	1b40      	subs	r0, r0, r5
 8011d52:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	dd40      	ble.n	8011ddc <wait_session_status+0xc4>
 8011d5a:	7960      	ldrb	r0, [r4, #5]
 8011d5c:	28ff      	cmp	r0, #255	@ 0xff
 8011d5e:	d145      	bne.n	8011dec <wait_session_status+0xd4>
 8011d60:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011d62:	a908      	add	r1, sp, #32
 8011d64:	6896      	ldr	r6, [r2, #8]
 8011d66:	6810      	ldr	r0, [r2, #0]
 8011d68:	aa09      	add	r2, sp, #36	@ 0x24
 8011d6a:	47b0      	blx	r6
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d0ed      	beq.n	8011d4c <wait_session_status+0x34>
 8011d70:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011d74:	a80c      	add	r0, sp, #48	@ 0x30
 8011d76:	f7fa fe0d 	bl	800c994 <ucdr_init_buffer>
 8011d7a:	2600      	movs	r6, #0
 8011d7c:	f10d 031e 	add.w	r3, sp, #30
 8011d80:	aa07      	add	r2, sp, #28
 8011d82:	a90c      	add	r1, sp, #48	@ 0x30
 8011d84:	4620      	mov	r0, r4
 8011d86:	f88d 601c 	strb.w	r6, [sp, #28]
 8011d8a:	f000 fa87 	bl	801229c <uxr_read_session_header>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d0dc      	beq.n	8011d4c <wait_session_status+0x34>
 8011d92:	4631      	mov	r1, r6
 8011d94:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011d98:	f000 ffb6 	bl	8012d08 <uxr_stream_id_from_raw>
 8011d9c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011da0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011da4:	9302      	str	r3, [sp, #8]
 8011da6:	2f01      	cmp	r7, #1
 8011da8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011dac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011db0:	d05c      	beq.n	8011e6c <wait_session_status+0x154>
 8011db2:	2f02      	cmp	r7, #2
 8011db4:	d020      	beq.n	8011df8 <wait_session_status+0xe0>
 8011db6:	2f00      	cmp	r7, #0
 8011db8:	d1c8      	bne.n	8011d4c <wait_session_status+0x34>
 8011dba:	4639      	mov	r1, r7
 8011dbc:	4638      	mov	r0, r7
 8011dbe:	f000 ffa3 	bl	8012d08 <uxr_stream_id_from_raw>
 8011dc2:	a90c      	add	r1, sp, #48	@ 0x30
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f7ff fbd5 	bl	8011578 <read_submessage_list>
 8011dce:	f001 f8ef 	bl	8012fb0 <uxr_millis>
 8011dd2:	1b40      	subs	r0, r0, r5
 8011dd4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	dcbe      	bgt.n	8011d5a <wait_session_status+0x42>
 8011ddc:	9b03      	ldr	r3, [sp, #12]
 8011dde:	7960      	ldrb	r0, [r4, #5]
 8011de0:	f10b 0b01 	add.w	fp, fp, #1
 8011de4:	455b      	cmp	r3, fp
 8011de6:	d001      	beq.n	8011dec <wait_session_status+0xd4>
 8011de8:	28ff      	cmp	r0, #255	@ 0xff
 8011dea:	d0a3      	beq.n	8011d34 <wait_session_status+0x1c>
 8011dec:	38ff      	subs	r0, #255	@ 0xff
 8011dee:	bf18      	it	ne
 8011df0:	2001      	movne	r0, #1
 8011df2:	b01d      	add	sp, #116	@ 0x74
 8011df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011dfc:	9304      	str	r3, [sp, #16]
 8011dfe:	4631      	mov	r1, r6
 8011e00:	f104 0008 	add.w	r0, r4, #8
 8011e04:	f001 f86e 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8011e08:	4680      	mov	r8, r0
 8011e0a:	b348      	cbz	r0, 8011e60 <wait_session_status+0x148>
 8011e0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e0e:	9205      	str	r2, [sp, #20]
 8011e10:	a80c      	add	r0, sp, #48	@ 0x30
 8011e12:	f7fa fdef 	bl	800c9f4 <ucdr_buffer_remaining>
 8011e16:	4603      	mov	r3, r0
 8011e18:	f10d 001d 	add.w	r0, sp, #29
 8011e1c:	9000      	str	r0, [sp, #0]
 8011e1e:	9a05      	ldr	r2, [sp, #20]
 8011e20:	9902      	ldr	r1, [sp, #8]
 8011e22:	4640      	mov	r0, r8
 8011e24:	f006 fdca 	bl	80189bc <uxr_receive_reliable_message>
 8011e28:	b1d0      	cbz	r0, 8011e60 <wait_session_status+0x148>
 8011e2a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d03a      	beq.n	8011ea8 <wait_session_status+0x190>
 8011e32:	9f04      	ldr	r7, [sp, #16]
 8011e34:	e00a      	b.n	8011e4c <wait_session_status+0x134>
 8011e36:	f04f 0302 	mov.w	r3, #2
 8011e3a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8011e3e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011e42:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011e46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e48:	f7ff fb96 	bl	8011578 <read_submessage_list>
 8011e4c:	a914      	add	r1, sp, #80	@ 0x50
 8011e4e:	2204      	movs	r2, #4
 8011e50:	4640      	mov	r0, r8
 8011e52:	f006 fe33 	bl	8018abc <uxr_next_input_reliable_buffer_available>
 8011e56:	4603      	mov	r3, r0
 8011e58:	a914      	add	r1, sp, #80	@ 0x50
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d1ea      	bne.n	8011e36 <wait_session_status+0x11e>
 8011e60:	9904      	ldr	r1, [sp, #16]
 8011e62:	4632      	mov	r2, r6
 8011e64:	4620      	mov	r0, r4
 8011e66:	f7ff f9f1 	bl	801124c <write_submessage_acknack.isra.0>
 8011e6a:	e76f      	b.n	8011d4c <wait_session_status+0x34>
 8011e6c:	4631      	mov	r1, r6
 8011e6e:	f104 0008 	add.w	r0, r4, #8
 8011e72:	f001 f82d 	bl	8012ed0 <uxr_get_input_best_effort_stream>
 8011e76:	2800      	cmp	r0, #0
 8011e78:	f43f af68 	beq.w	8011d4c <wait_session_status+0x34>
 8011e7c:	9902      	ldr	r1, [sp, #8]
 8011e7e:	f006 fd09 	bl	8018894 <uxr_receive_best_effort_message>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	f43f af62 	beq.w	8011d4c <wait_session_status+0x34>
 8011e88:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011e8c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e8e:	a90c      	add	r1, sp, #48	@ 0x30
 8011e90:	4620      	mov	r0, r4
 8011e92:	f7ff fb71 	bl	8011578 <read_submessage_list>
 8011e96:	e759      	b.n	8011d4c <wait_session_status+0x34>
 8011e98:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011e9a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011e9e:	47a0      	blx	r4
 8011ea0:	2001      	movs	r0, #1
 8011ea2:	b01d      	add	sp, #116	@ 0x74
 8011ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ea8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011eac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011eae:	a90c      	add	r1, sp, #48	@ 0x30
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f7ff fb61 	bl	8011578 <read_submessage_list>
 8011eb6:	e7bc      	b.n	8011e32 <wait_session_status+0x11a>

08011eb8 <uxr_delete_session_retries>:
 8011eb8:	b530      	push	{r4, r5, lr}
 8011eba:	b08f      	sub	sp, #60	@ 0x3c
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	460d      	mov	r5, r1
 8011ec0:	f000 fa2e 	bl	8012320 <uxr_session_header_offset>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	2210      	movs	r2, #16
 8011ec8:	9000      	str	r0, [sp, #0]
 8011eca:	a902      	add	r1, sp, #8
 8011ecc:	a806      	add	r0, sp, #24
 8011ece:	f7fa fd4f 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8011ed2:	a906      	add	r1, sp, #24
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	f000 f973 	bl	80121c0 <uxr_buffer_delete_session>
 8011eda:	2200      	movs	r2, #0
 8011edc:	4611      	mov	r1, r2
 8011ede:	9b06      	ldr	r3, [sp, #24]
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f000 f9c7 	bl	8012274 <uxr_stamp_session_header>
 8011ee6:	a806      	add	r0, sp, #24
 8011ee8:	f7fa fd80 	bl	800c9ec <ucdr_buffer_length>
 8011eec:	462b      	mov	r3, r5
 8011eee:	4602      	mov	r2, r0
 8011ef0:	a902      	add	r1, sp, #8
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	f7ff ff10 	bl	8011d18 <wait_session_status>
 8011ef8:	b118      	cbz	r0, 8011f02 <uxr_delete_session_retries+0x4a>
 8011efa:	7960      	ldrb	r0, [r4, #5]
 8011efc:	fab0 f080 	clz	r0, r0
 8011f00:	0940      	lsrs	r0, r0, #5
 8011f02:	b00f      	add	sp, #60	@ 0x3c
 8011f04:	bd30      	pop	{r4, r5, pc}
 8011f06:	bf00      	nop

08011f08 <uxr_create_session>:
 8011f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0c:	f100 0b08 	add.w	fp, r0, #8
 8011f10:	b0ab      	sub	sp, #172	@ 0xac
 8011f12:	4604      	mov	r4, r0
 8011f14:	4658      	mov	r0, fp
 8011f16:	f000 ff2b 	bl	8012d70 <uxr_reset_stream_storage>
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	f000 fa00 	bl	8012320 <uxr_session_header_offset>
 8011f20:	2300      	movs	r3, #0
 8011f22:	9000      	str	r0, [sp, #0]
 8011f24:	221c      	movs	r2, #28
 8011f26:	a90b      	add	r1, sp, #44	@ 0x2c
 8011f28:	a812      	add	r0, sp, #72	@ 0x48
 8011f2a:	f7fa fd21 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8011f2e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f30:	8a1a      	ldrh	r2, [r3, #16]
 8011f32:	3a04      	subs	r2, #4
 8011f34:	b292      	uxth	r2, r2
 8011f36:	a912      	add	r1, sp, #72	@ 0x48
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 f917 	bl	801216c <uxr_buffer_create_session>
 8011f3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011f40:	4620      	mov	r0, r4
 8011f42:	f000 f983 	bl	801224c <uxr_stamp_create_session_header>
 8011f46:	a812      	add	r0, sp, #72	@ 0x48
 8011f48:	f7fa fd50 	bl	800c9ec <ucdr_buffer_length>
 8011f4c:	23ff      	movs	r3, #255	@ 0xff
 8011f4e:	7163      	strb	r3, [r4, #5]
 8011f50:	230a      	movs	r3, #10
 8011f52:	46da      	mov	sl, fp
 8011f54:	9303      	str	r3, [sp, #12]
 8011f56:	4683      	mov	fp, r0
 8011f58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f5a:	465a      	mov	r2, fp
 8011f5c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011f60:	a90b      	add	r1, sp, #44	@ 0x2c
 8011f62:	47a8      	blx	r5
 8011f64:	f001 f824 	bl	8012fb0 <uxr_millis>
 8011f68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	e009      	b.n	8011f84 <uxr_create_session+0x7c>
 8011f70:	f001 f81e 	bl	8012fb0 <uxr_millis>
 8011f74:	1b40      	subs	r0, r0, r5
 8011f76:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	7962      	ldrb	r2, [r4, #5]
 8011f7e:	dd38      	ble.n	8011ff2 <uxr_create_session+0xea>
 8011f80:	2aff      	cmp	r2, #255	@ 0xff
 8011f82:	d13c      	bne.n	8011ffe <uxr_create_session+0xf6>
 8011f84:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011f86:	a907      	add	r1, sp, #28
 8011f88:	6896      	ldr	r6, [r2, #8]
 8011f8a:	6810      	ldr	r0, [r2, #0]
 8011f8c:	aa08      	add	r2, sp, #32
 8011f8e:	47b0      	blx	r6
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d0ed      	beq.n	8011f70 <uxr_create_session+0x68>
 8011f94:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011f98:	a81a      	add	r0, sp, #104	@ 0x68
 8011f9a:	f7fa fcfb 	bl	800c994 <ucdr_init_buffer>
 8011f9e:	2600      	movs	r6, #0
 8011fa0:	f10d 031a 	add.w	r3, sp, #26
 8011fa4:	aa06      	add	r2, sp, #24
 8011fa6:	a91a      	add	r1, sp, #104	@ 0x68
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f88d 6018 	strb.w	r6, [sp, #24]
 8011fae:	f000 f975 	bl	801229c <uxr_read_session_header>
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	d0dc      	beq.n	8011f70 <uxr_create_session+0x68>
 8011fb6:	4631      	mov	r1, r6
 8011fb8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011fbc:	f000 fea4 	bl	8012d08 <uxr_stream_id_from_raw>
 8011fc0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011fc4:	2e01      	cmp	r6, #1
 8011fc6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011fca:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011fce:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011fd2:	d053      	beq.n	801207c <uxr_create_session+0x174>
 8011fd4:	2e02      	cmp	r6, #2
 8011fd6:	d018      	beq.n	801200a <uxr_create_session+0x102>
 8011fd8:	2e00      	cmp	r6, #0
 8011fda:	d1c9      	bne.n	8011f70 <uxr_create_session+0x68>
 8011fdc:	4631      	mov	r1, r6
 8011fde:	4630      	mov	r0, r6
 8011fe0:	f000 fe92 	bl	8012d08 <uxr_stream_id_from_raw>
 8011fe4:	a91a      	add	r1, sp, #104	@ 0x68
 8011fe6:	4602      	mov	r2, r0
 8011fe8:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fea:	4620      	mov	r0, r4
 8011fec:	f7ff fac4 	bl	8011578 <read_submessage_list>
 8011ff0:	e7be      	b.n	8011f70 <uxr_create_session+0x68>
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	3b01      	subs	r3, #1
 8011ff6:	9303      	str	r3, [sp, #12]
 8011ff8:	d001      	beq.n	8011ffe <uxr_create_session+0xf6>
 8011ffa:	2aff      	cmp	r2, #255	@ 0xff
 8011ffc:	d0ac      	beq.n	8011f58 <uxr_create_session+0x50>
 8011ffe:	2a00      	cmp	r2, #0
 8012000:	d051      	beq.n	80120a6 <uxr_create_session+0x19e>
 8012002:	2000      	movs	r0, #0
 8012004:	b02b      	add	sp, #172	@ 0xac
 8012006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801200e:	9304      	str	r3, [sp, #16]
 8012010:	4639      	mov	r1, r7
 8012012:	4650      	mov	r0, sl
 8012014:	f000 ff66 	bl	8012ee4 <uxr_get_input_reliable_stream>
 8012018:	4680      	mov	r8, r0
 801201a:	b348      	cbz	r0, 8012070 <uxr_create_session+0x168>
 801201c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801201e:	9205      	str	r2, [sp, #20]
 8012020:	a81a      	add	r0, sp, #104	@ 0x68
 8012022:	f7fa fce7 	bl	800c9f4 <ucdr_buffer_remaining>
 8012026:	4603      	mov	r3, r0
 8012028:	f10d 0019 	add.w	r0, sp, #25
 801202c:	9000      	str	r0, [sp, #0]
 801202e:	9a05      	ldr	r2, [sp, #20]
 8012030:	4649      	mov	r1, r9
 8012032:	4640      	mov	r0, r8
 8012034:	f006 fcc2 	bl	80189bc <uxr_receive_reliable_message>
 8012038:	b1d0      	cbz	r0, 8012070 <uxr_create_session+0x168>
 801203a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d038      	beq.n	80120b4 <uxr_create_session+0x1ac>
 8012042:	9e04      	ldr	r6, [sp, #16]
 8012044:	e00a      	b.n	801205c <uxr_create_session+0x154>
 8012046:	f04f 0302 	mov.w	r3, #2
 801204a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801204e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012052:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012058:	f7ff fa8e 	bl	8011578 <read_submessage_list>
 801205c:	a922      	add	r1, sp, #136	@ 0x88
 801205e:	2204      	movs	r2, #4
 8012060:	4640      	mov	r0, r8
 8012062:	f006 fd2b 	bl	8018abc <uxr_next_input_reliable_buffer_available>
 8012066:	4603      	mov	r3, r0
 8012068:	a922      	add	r1, sp, #136	@ 0x88
 801206a:	4620      	mov	r0, r4
 801206c:	2b00      	cmp	r3, #0
 801206e:	d1ea      	bne.n	8012046 <uxr_create_session+0x13e>
 8012070:	9904      	ldr	r1, [sp, #16]
 8012072:	463a      	mov	r2, r7
 8012074:	4620      	mov	r0, r4
 8012076:	f7ff f8e9 	bl	801124c <write_submessage_acknack.isra.0>
 801207a:	e779      	b.n	8011f70 <uxr_create_session+0x68>
 801207c:	4639      	mov	r1, r7
 801207e:	4650      	mov	r0, sl
 8012080:	f000 ff26 	bl	8012ed0 <uxr_get_input_best_effort_stream>
 8012084:	2800      	cmp	r0, #0
 8012086:	f43f af73 	beq.w	8011f70 <uxr_create_session+0x68>
 801208a:	4649      	mov	r1, r9
 801208c:	f006 fc02 	bl	8018894 <uxr_receive_best_effort_message>
 8012090:	2800      	cmp	r0, #0
 8012092:	f43f af6d 	beq.w	8011f70 <uxr_create_session+0x68>
 8012096:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801209a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801209c:	a91a      	add	r1, sp, #104	@ 0x68
 801209e:	4620      	mov	r0, r4
 80120a0:	f7ff fa6a 	bl	8011578 <read_submessage_list>
 80120a4:	e764      	b.n	8011f70 <uxr_create_session+0x68>
 80120a6:	4650      	mov	r0, sl
 80120a8:	f000 fe62 	bl	8012d70 <uxr_reset_stream_storage>
 80120ac:	2001      	movs	r0, #1
 80120ae:	b02b      	add	sp, #172	@ 0xac
 80120b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80120b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120ba:	a91a      	add	r1, sp, #104	@ 0x68
 80120bc:	4620      	mov	r0, r4
 80120be:	f7ff fa5b 	bl	8011578 <read_submessage_list>
 80120c2:	e7be      	b.n	8012042 <uxr_create_session+0x13a>

080120c4 <uxr_prepare_stream_to_write_submessage>:
 80120c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120c8:	b082      	sub	sp, #8
 80120ca:	4682      	mov	sl, r0
 80120cc:	4610      	mov	r0, r2
 80120ce:	4615      	mov	r5, r2
 80120d0:	461e      	mov	r6, r3
 80120d2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80120d6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80120da:	9101      	str	r1, [sp, #4]
 80120dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80120e0:	f000 ff60 	bl	8012fa4 <uxr_submessage_padding>
 80120e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80120e8:	f105 0904 	add.w	r9, r5, #4
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	4481      	add	r9, r0
 80120f0:	d01d      	beq.n	801212e <uxr_prepare_stream_to_write_submessage+0x6a>
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	d116      	bne.n	8012124 <uxr_prepare_stream_to_write_submessage+0x60>
 80120f6:	4621      	mov	r1, r4
 80120f8:	f10a 0008 	add.w	r0, sl, #8
 80120fc:	f000 fede 	bl	8012ebc <uxr_get_output_reliable_stream>
 8012100:	4604      	mov	r4, r0
 8012102:	b158      	cbz	r0, 801211c <uxr_prepare_stream_to_write_submessage+0x58>
 8012104:	4649      	mov	r1, r9
 8012106:	4632      	mov	r2, r6
 8012108:	f006 fe94 	bl	8018e34 <uxr_prepare_reliable_buffer_to_write>
 801210c:	4604      	mov	r4, r0
 801210e:	b12c      	cbz	r4, 801211c <uxr_prepare_stream_to_write_submessage+0x58>
 8012110:	4643      	mov	r3, r8
 8012112:	b2aa      	uxth	r2, r5
 8012114:	4639      	mov	r1, r7
 8012116:	4630      	mov	r0, r6
 8012118:	f000 ff04 	bl	8012f24 <uxr_buffer_submessage_header>
 801211c:	4620      	mov	r0, r4
 801211e:	b002      	add	sp, #8
 8012120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012124:	2400      	movs	r4, #0
 8012126:	4620      	mov	r0, r4
 8012128:	b002      	add	sp, #8
 801212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801212e:	4621      	mov	r1, r4
 8012130:	f10a 0008 	add.w	r0, sl, #8
 8012134:	f000 feba 	bl	8012eac <uxr_get_output_best_effort_stream>
 8012138:	4604      	mov	r4, r0
 801213a:	2800      	cmp	r0, #0
 801213c:	d0ee      	beq.n	801211c <uxr_prepare_stream_to_write_submessage+0x58>
 801213e:	4649      	mov	r1, r9
 8012140:	4632      	mov	r2, r6
 8012142:	f006 fda7 	bl	8018c94 <uxr_prepare_best_effort_buffer_to_write>
 8012146:	4604      	mov	r4, r0
 8012148:	e7e1      	b.n	801210e <uxr_prepare_stream_to_write_submessage+0x4a>
 801214a:	bf00      	nop

0801214c <uxr_init_session_info>:
 801214c:	0e13      	lsrs	r3, r2, #24
 801214e:	7043      	strb	r3, [r0, #1]
 8012150:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012154:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012158:	7001      	strb	r1, [r0, #0]
 801215a:	70c3      	strb	r3, [r0, #3]
 801215c:	2109      	movs	r1, #9
 801215e:	23ff      	movs	r3, #255	@ 0xff
 8012160:	f880 c002 	strb.w	ip, [r0, #2]
 8012164:	7102      	strb	r2, [r0, #4]
 8012166:	80c1      	strh	r1, [r0, #6]
 8012168:	7143      	strb	r3, [r0, #5]
 801216a:	4770      	bx	lr

0801216c <uxr_buffer_create_session>:
 801216c:	b530      	push	{r4, r5, lr}
 801216e:	b089      	sub	sp, #36	@ 0x24
 8012170:	2300      	movs	r3, #0
 8012172:	4d12      	ldr	r5, [pc, #72]	@ (80121bc <uxr_buffer_create_session+0x50>)
 8012174:	9307      	str	r3, [sp, #28]
 8012176:	f8ad 201c 	strh.w	r2, [sp, #28]
 801217a:	2201      	movs	r2, #1
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	80c2      	strh	r2, [r0, #6]
 8012180:	f88d 2004 	strb.w	r2, [sp, #4]
 8012184:	682a      	ldr	r2, [r5, #0]
 8012186:	9200      	str	r2, [sp, #0]
 8012188:	88aa      	ldrh	r2, [r5, #4]
 801218a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801218e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012192:	9202      	str	r2, [sp, #8]
 8012194:	460c      	mov	r4, r1
 8012196:	7802      	ldrb	r2, [r0, #0]
 8012198:	9303      	str	r3, [sp, #12]
 801219a:	4619      	mov	r1, r3
 801219c:	f88d 200c 	strb.w	r2, [sp, #12]
 80121a0:	4620      	mov	r0, r4
 80121a2:	2210      	movs	r2, #16
 80121a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80121a8:	9306      	str	r3, [sp, #24]
 80121aa:	f000 febb 	bl	8012f24 <uxr_buffer_submessage_header>
 80121ae:	4669      	mov	r1, sp
 80121b0:	4620      	mov	r0, r4
 80121b2:	f001 fe47 	bl	8013e44 <uxr_serialize_CREATE_CLIENT_Payload>
 80121b6:	b009      	add	sp, #36	@ 0x24
 80121b8:	bd30      	pop	{r4, r5, pc}
 80121ba:	bf00      	nop
 80121bc:	0801cb70 	.word	0x0801cb70

080121c0 <uxr_buffer_delete_session>:
 80121c0:	b510      	push	{r4, lr}
 80121c2:	4b0c      	ldr	r3, [pc, #48]	@ (80121f4 <uxr_buffer_delete_session+0x34>)
 80121c4:	b082      	sub	sp, #8
 80121c6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80121ca:	f8ad c006 	strh.w	ip, [sp, #6]
 80121ce:	460c      	mov	r4, r1
 80121d0:	2202      	movs	r2, #2
 80121d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80121d6:	80c2      	strh	r2, [r0, #6]
 80121d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80121dc:	2204      	movs	r2, #4
 80121de:	2300      	movs	r3, #0
 80121e0:	2103      	movs	r1, #3
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 fe9e 	bl	8012f24 <uxr_buffer_submessage_header>
 80121e8:	a901      	add	r1, sp, #4
 80121ea:	4620      	mov	r0, r4
 80121ec:	f001 fed0 	bl	8013f90 <uxr_serialize_DELETE_Payload>
 80121f0:	b002      	add	sp, #8
 80121f2:	bd10      	pop	{r4, pc}
 80121f4:	0801cb70 	.word	0x0801cb70

080121f8 <uxr_read_create_session_status>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	b088      	sub	sp, #32
 80121fc:	4604      	mov	r4, r0
 80121fe:	4608      	mov	r0, r1
 8012200:	a901      	add	r1, sp, #4
 8012202:	f001 fed5 	bl	8013fb0 <uxr_deserialize_STATUS_AGENT_Payload>
 8012206:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801220a:	7163      	strb	r3, [r4, #5]
 801220c:	b008      	add	sp, #32
 801220e:	bd10      	pop	{r4, pc}

08012210 <uxr_read_delete_session_status>:
 8012210:	b510      	push	{r4, lr}
 8012212:	4604      	mov	r4, r0
 8012214:	b084      	sub	sp, #16
 8012216:	4608      	mov	r0, r1
 8012218:	a902      	add	r1, sp, #8
 801221a:	f001 fef9 	bl	8014010 <uxr_deserialize_STATUS_Payload>
 801221e:	88e3      	ldrh	r3, [r4, #6]
 8012220:	2b02      	cmp	r3, #2
 8012222:	d001      	beq.n	8012228 <uxr_read_delete_session_status+0x18>
 8012224:	b004      	add	sp, #16
 8012226:	bd10      	pop	{r4, pc}
 8012228:	f10d 000a 	add.w	r0, sp, #10
 801222c:	f7fe fe64 	bl	8010ef8 <uxr_object_id_from_raw>
 8012230:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012234:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012238:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801223c:	b29b      	uxth	r3, r3
 801223e:	2b02      	cmp	r3, #2
 8012240:	bf04      	itt	eq
 8012242:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012246:	7163      	strbeq	r3, [r4, #5]
 8012248:	b004      	add	sp, #16
 801224a:	bd10      	pop	{r4, pc}

0801224c <uxr_stamp_create_session_header>:
 801224c:	b510      	push	{r4, lr}
 801224e:	2208      	movs	r2, #8
 8012250:	b08a      	sub	sp, #40	@ 0x28
 8012252:	4604      	mov	r4, r0
 8012254:	eb0d 0002 	add.w	r0, sp, r2
 8012258:	f7fa fb9c 	bl	800c994 <ucdr_init_buffer>
 801225c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012260:	9400      	str	r4, [sp, #0]
 8012262:	2300      	movs	r3, #0
 8012264:	461a      	mov	r2, r3
 8012266:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801226a:	a802      	add	r0, sp, #8
 801226c:	f001 f854 	bl	8013318 <uxr_serialize_message_header>
 8012270:	b00a      	add	sp, #40	@ 0x28
 8012272:	bd10      	pop	{r4, pc}

08012274 <uxr_stamp_session_header>:
 8012274:	b530      	push	{r4, r5, lr}
 8012276:	b08d      	sub	sp, #52	@ 0x34
 8012278:	4604      	mov	r4, r0
 801227a:	460d      	mov	r5, r1
 801227c:	9203      	str	r2, [sp, #12]
 801227e:	4619      	mov	r1, r3
 8012280:	a804      	add	r0, sp, #16
 8012282:	2208      	movs	r2, #8
 8012284:	f7fa fb86 	bl	800c994 <ucdr_init_buffer>
 8012288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801228c:	9b03      	ldr	r3, [sp, #12]
 801228e:	9400      	str	r4, [sp, #0]
 8012290:	462a      	mov	r2, r5
 8012292:	a804      	add	r0, sp, #16
 8012294:	f001 f840 	bl	8013318 <uxr_serialize_message_header>
 8012298:	b00d      	add	sp, #52	@ 0x34
 801229a:	bd30      	pop	{r4, r5, pc}

0801229c <uxr_read_session_header>:
 801229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122a0:	4607      	mov	r7, r0
 80122a2:	b084      	sub	sp, #16
 80122a4:	4608      	mov	r0, r1
 80122a6:	460c      	mov	r4, r1
 80122a8:	4615      	mov	r5, r2
 80122aa:	461e      	mov	r6, r3
 80122ac:	f7fa fba2 	bl	800c9f4 <ucdr_buffer_remaining>
 80122b0:	2808      	cmp	r0, #8
 80122b2:	d803      	bhi.n	80122bc <uxr_read_session_header+0x20>
 80122b4:	2000      	movs	r0, #0
 80122b6:	b004      	add	sp, #16
 80122b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122bc:	f10d 080c 	add.w	r8, sp, #12
 80122c0:	4633      	mov	r3, r6
 80122c2:	462a      	mov	r2, r5
 80122c4:	f8cd 8000 	str.w	r8, [sp]
 80122c8:	4620      	mov	r0, r4
 80122ca:	f10d 010b 	add.w	r1, sp, #11
 80122ce:	f001 f841 	bl	8013354 <uxr_deserialize_message_header>
 80122d2:	783a      	ldrb	r2, [r7, #0]
 80122d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80122d8:	4293      	cmp	r3, r2
 80122da:	d1eb      	bne.n	80122b4 <uxr_read_session_header+0x18>
 80122dc:	061b      	lsls	r3, r3, #24
 80122de:	d41c      	bmi.n	801231a <uxr_read_session_header+0x7e>
 80122e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80122e4:	787b      	ldrb	r3, [r7, #1]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d003      	beq.n	80122f2 <uxr_read_session_header+0x56>
 80122ea:	2001      	movs	r0, #1
 80122ec:	f080 0001 	eor.w	r0, r0, #1
 80122f0:	e7e1      	b.n	80122b6 <uxr_read_session_header+0x1a>
 80122f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80122f6:	78bb      	ldrb	r3, [r7, #2]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	f107 0102 	add.w	r1, r7, #2
 80122fe:	d1f4      	bne.n	80122ea <uxr_read_session_header+0x4e>
 8012300:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012304:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012308:	429a      	cmp	r2, r3
 801230a:	d1ee      	bne.n	80122ea <uxr_read_session_header+0x4e>
 801230c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012310:	784b      	ldrb	r3, [r1, #1]
 8012312:	429a      	cmp	r2, r3
 8012314:	d1e9      	bne.n	80122ea <uxr_read_session_header+0x4e>
 8012316:	2000      	movs	r0, #0
 8012318:	e7e8      	b.n	80122ec <uxr_read_session_header+0x50>
 801231a:	2001      	movs	r0, #1
 801231c:	e7cb      	b.n	80122b6 <uxr_read_session_header+0x1a>
 801231e:	bf00      	nop

08012320 <uxr_session_header_offset>:
 8012320:	f990 3000 	ldrsb.w	r3, [r0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	bfac      	ite	ge
 8012328:	2008      	movge	r0, #8
 801232a:	2004      	movlt	r0, #4
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop

08012330 <uxr_init_base_object_request>:
 8012330:	b510      	push	{r4, lr}
 8012332:	88c3      	ldrh	r3, [r0, #6]
 8012334:	b082      	sub	sp, #8
 8012336:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801233a:	9101      	str	r1, [sp, #4]
 801233c:	f1a3 010a 	sub.w	r1, r3, #10
 8012340:	b289      	uxth	r1, r1
 8012342:	42a1      	cmp	r1, r4
 8012344:	d80e      	bhi.n	8012364 <uxr_init_base_object_request+0x34>
 8012346:	3301      	adds	r3, #1
 8012348:	b29c      	uxth	r4, r3
 801234a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801234e:	b2db      	uxtb	r3, r3
 8012350:	80c4      	strh	r4, [r0, #6]
 8012352:	9801      	ldr	r0, [sp, #4]
 8012354:	7011      	strb	r1, [r2, #0]
 8012356:	7053      	strb	r3, [r2, #1]
 8012358:	1c91      	adds	r1, r2, #2
 801235a:	f7fe fde1 	bl	8010f20 <uxr_object_id_to_raw>
 801235e:	4620      	mov	r0, r4
 8012360:	b002      	add	sp, #8
 8012362:	bd10      	pop	{r4, pc}
 8012364:	230a      	movs	r3, #10
 8012366:	2100      	movs	r1, #0
 8012368:	461c      	mov	r4, r3
 801236a:	e7f1      	b.n	8012350 <uxr_init_base_object_request+0x20>

0801236c <uxr_parse_base_object_request>:
 801236c:	b570      	push	{r4, r5, r6, lr}
 801236e:	4604      	mov	r4, r0
 8012370:	3002      	adds	r0, #2
 8012372:	460d      	mov	r5, r1
 8012374:	4616      	mov	r6, r2
 8012376:	f7fe fdbf 	bl	8010ef8 <uxr_object_id_from_raw>
 801237a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801237e:	8028      	strh	r0, [r5, #0]
 8012380:	806b      	strh	r3, [r5, #2]
 8012382:	7822      	ldrb	r2, [r4, #0]
 8012384:	7863      	ldrb	r3, [r4, #1]
 8012386:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801238a:	8033      	strh	r3, [r6, #0]
 801238c:	bd70      	pop	{r4, r5, r6, pc}
 801238e:	bf00      	nop

08012390 <uxr_init_framing_io>:
 8012390:	2300      	movs	r3, #0
 8012392:	7041      	strb	r1, [r0, #1]
 8012394:	7003      	strb	r3, [r0, #0]
 8012396:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop

0801239c <uxr_write_framed_msg>:
 801239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a0:	4617      	mov	r7, r2
 80123a2:	7842      	ldrb	r2, [r0, #1]
 80123a4:	b083      	sub	sp, #12
 80123a6:	460e      	mov	r6, r1
 80123a8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80123ac:	469a      	mov	sl, r3
 80123ae:	2901      	cmp	r1, #1
 80123b0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80123b4:	4604      	mov	r4, r0
 80123b6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80123ba:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80123be:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80123c2:	f240 8137 	bls.w	8012634 <uxr_write_framed_msg+0x298>
 80123c6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80123ca:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80123ce:	2901      	cmp	r1, #1
 80123d0:	f04f 0202 	mov.w	r2, #2
 80123d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123d8:	f240 808f 	bls.w	80124fa <uxr_write_framed_msg+0x15e>
 80123dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123de:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80123e2:	b2dd      	uxtb	r5, r3
 80123e4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80123e8:	2203      	movs	r2, #3
 80123ea:	2901      	cmp	r1, #1
 80123ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123f0:	f240 809a 	bls.w	8012528 <uxr_write_framed_msg+0x18c>
 80123f4:	18a1      	adds	r1, r4, r2
 80123f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123f8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80123fc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012400:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012404:	3201      	adds	r2, #1
 8012406:	2801      	cmp	r0, #1
 8012408:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801240c:	f240 80a0 	bls.w	8012550 <uxr_write_framed_msg+0x1b4>
 8012410:	18a0      	adds	r0, r4, r2
 8012412:	3201      	adds	r2, #1
 8012414:	b2d2      	uxtb	r2, r2
 8012416:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801241a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801241e:	2b00      	cmp	r3, #0
 8012420:	f000 80a9 	beq.w	8012576 <uxr_write_framed_msg+0x1da>
 8012424:	f04f 0900 	mov.w	r9, #0
 8012428:	46c8      	mov	r8, r9
 801242a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801242e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012432:	2901      	cmp	r1, #1
 8012434:	f240 80c3 	bls.w	80125be <uxr_write_framed_msg+0x222>
 8012438:	2a29      	cmp	r2, #41	@ 0x29
 801243a:	f200 809f 	bhi.w	801257c <uxr_write_framed_msg+0x1e0>
 801243e:	18a1      	adds	r1, r4, r2
 8012440:	3201      	adds	r2, #1
 8012442:	b2d2      	uxtb	r2, r2
 8012444:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012448:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801244c:	ea89 0303 	eor.w	r3, r9, r3
 8012450:	498c      	ldr	r1, [pc, #560]	@ (8012684 <uxr_write_framed_msg+0x2e8>)
 8012452:	b2db      	uxtb	r3, r3
 8012454:	f108 0801 	add.w	r8, r8, #1
 8012458:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801245c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012460:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012462:	4543      	cmp	r3, r8
 8012464:	d8e1      	bhi.n	801242a <uxr_write_framed_msg+0x8e>
 8012466:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801246a:	fa5f f889 	uxtb.w	r8, r9
 801246e:	9301      	str	r3, [sp, #4]
 8012470:	f04f 0900 	mov.w	r9, #0
 8012474:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8012478:	fa5f f18a 	uxtb.w	r1, sl
 801247c:	2901      	cmp	r1, #1
 801247e:	d921      	bls.n	80124c4 <uxr_write_framed_msg+0x128>
 8012480:	2a29      	cmp	r2, #41	@ 0x29
 8012482:	f240 80af 	bls.w	80125e4 <uxr_write_framed_msg+0x248>
 8012486:	2500      	movs	r5, #0
 8012488:	e000      	b.n	801248c <uxr_write_framed_msg+0xf0>
 801248a:	b160      	cbz	r0, 80124a6 <uxr_write_framed_msg+0x10a>
 801248c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012490:	1b52      	subs	r2, r2, r5
 8012492:	465b      	mov	r3, fp
 8012494:	4421      	add	r1, r4
 8012496:	4638      	mov	r0, r7
 8012498:	47b0      	blx	r6
 801249a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801249e:	4405      	add	r5, r0
 80124a0:	4295      	cmp	r5, r2
 80124a2:	d3f2      	bcc.n	801248a <uxr_write_framed_msg+0xee>
 80124a4:	d003      	beq.n	80124ae <uxr_write_framed_msg+0x112>
 80124a6:	2000      	movs	r0, #0
 80124a8:	b003      	add	sp, #12
 80124aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ae:	fa5f f18a 	uxtb.w	r1, sl
 80124b2:	f04f 0300 	mov.w	r3, #0
 80124b6:	2901      	cmp	r1, #1
 80124b8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80124bc:	f04f 0200 	mov.w	r2, #0
 80124c0:	f200 8090 	bhi.w	80125e4 <uxr_write_framed_msg+0x248>
 80124c4:	1c51      	adds	r1, r2, #1
 80124c6:	b2c9      	uxtb	r1, r1
 80124c8:	2929      	cmp	r1, #41	@ 0x29
 80124ca:	d8dc      	bhi.n	8012486 <uxr_write_framed_msg+0xea>
 80124cc:	18a5      	adds	r5, r4, r2
 80124ce:	4421      	add	r1, r4
 80124d0:	3202      	adds	r2, #2
 80124d2:	f088 0820 	eor.w	r8, r8, #32
 80124d6:	4648      	mov	r0, r9
 80124d8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80124dc:	b2d2      	uxtb	r2, r2
 80124de:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80124e2:	f04f 0901 	mov.w	r9, #1
 80124e6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80124ea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80124ee:	2800      	cmp	r0, #0
 80124f0:	f040 8085 	bne.w	80125fe <uxr_write_framed_msg+0x262>
 80124f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80124f8:	e7bc      	b.n	8012474 <uxr_write_framed_msg+0xd8>
 80124fa:	4611      	mov	r1, r2
 80124fc:	f04f 0c03 	mov.w	ip, #3
 8012500:	2204      	movs	r2, #4
 8012502:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012504:	4421      	add	r1, r4
 8012506:	b2dd      	uxtb	r5, r3
 8012508:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801250c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012510:	44a4      	add	ip, r4
 8012512:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012516:	f080 0020 	eor.w	r0, r0, #32
 801251a:	2901      	cmp	r1, #1
 801251c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012520:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012524:	f63f af66 	bhi.w	80123f4 <uxr_write_framed_msg+0x58>
 8012528:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801252a:	18a0      	adds	r0, r4, r2
 801252c:	f085 0520 	eor.w	r5, r5, #32
 8012530:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012534:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012538:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801253c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012540:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012544:	3202      	adds	r2, #2
 8012546:	2801      	cmp	r0, #1
 8012548:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801254c:	f63f af60 	bhi.w	8012410 <uxr_write_framed_msg+0x74>
 8012550:	1c50      	adds	r0, r2, #1
 8012552:	18a5      	adds	r5, r4, r2
 8012554:	fa54 f080 	uxtab	r0, r4, r0
 8012558:	3202      	adds	r2, #2
 801255a:	f081 0120 	eor.w	r1, r1, #32
 801255e:	b2d2      	uxtb	r2, r2
 8012560:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012564:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012568:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801256c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012570:	2b00      	cmp	r3, #0
 8012572:	f47f af57 	bne.w	8012424 <uxr_write_framed_msg+0x88>
 8012576:	9301      	str	r3, [sp, #4]
 8012578:	4698      	mov	r8, r3
 801257a:	e779      	b.n	8012470 <uxr_write_framed_msg+0xd4>
 801257c:	2500      	movs	r5, #0
 801257e:	e001      	b.n	8012584 <uxr_write_framed_msg+0x1e8>
 8012580:	2800      	cmp	r0, #0
 8012582:	d090      	beq.n	80124a6 <uxr_write_framed_msg+0x10a>
 8012584:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012588:	1b52      	subs	r2, r2, r5
 801258a:	465b      	mov	r3, fp
 801258c:	4421      	add	r1, r4
 801258e:	4638      	mov	r0, r7
 8012590:	47b0      	blx	r6
 8012592:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012596:	4405      	add	r5, r0
 8012598:	4295      	cmp	r5, r2
 801259a:	d3f1      	bcc.n	8012580 <uxr_write_framed_msg+0x1e4>
 801259c:	d183      	bne.n	80124a6 <uxr_write_framed_msg+0x10a>
 801259e:	f04f 0300 	mov.w	r3, #0
 80125a2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80125a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125a8:	4543      	cmp	r3, r8
 80125aa:	d964      	bls.n	8012676 <uxr_write_framed_msg+0x2da>
 80125ac:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80125b0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80125b4:	2901      	cmp	r1, #1
 80125b6:	f04f 0200 	mov.w	r2, #0
 80125ba:	f63f af3d 	bhi.w	8012438 <uxr_write_framed_msg+0x9c>
 80125be:	1c51      	adds	r1, r2, #1
 80125c0:	b2c9      	uxtb	r1, r1
 80125c2:	2929      	cmp	r1, #41	@ 0x29
 80125c4:	d8da      	bhi.n	801257c <uxr_write_framed_msg+0x1e0>
 80125c6:	18a0      	adds	r0, r4, r2
 80125c8:	4421      	add	r1, r4
 80125ca:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80125ce:	3202      	adds	r2, #2
 80125d0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80125d4:	b2d2      	uxtb	r2, r2
 80125d6:	f083 0020 	eor.w	r0, r3, #32
 80125da:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80125de:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80125e2:	e733      	b.n	801244c <uxr_write_framed_msg+0xb0>
 80125e4:	18a1      	adds	r1, r4, r2
 80125e6:	3201      	adds	r2, #1
 80125e8:	4648      	mov	r0, r9
 80125ea:	b2d2      	uxtb	r2, r2
 80125ec:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80125f0:	f04f 0901 	mov.w	r9, #1
 80125f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80125f8:	2800      	cmp	r0, #0
 80125fa:	f43f af7b 	beq.w	80124f4 <uxr_write_framed_msg+0x158>
 80125fe:	2500      	movs	r5, #0
 8012600:	e002      	b.n	8012608 <uxr_write_framed_msg+0x26c>
 8012602:	2800      	cmp	r0, #0
 8012604:	f43f af4f 	beq.w	80124a6 <uxr_write_framed_msg+0x10a>
 8012608:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801260c:	1b52      	subs	r2, r2, r5
 801260e:	465b      	mov	r3, fp
 8012610:	4421      	add	r1, r4
 8012612:	4638      	mov	r0, r7
 8012614:	47b0      	blx	r6
 8012616:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801261a:	4405      	add	r5, r0
 801261c:	4295      	cmp	r5, r2
 801261e:	d3f0      	bcc.n	8012602 <uxr_write_framed_msg+0x266>
 8012620:	f47f af41 	bne.w	80124a6 <uxr_write_framed_msg+0x10a>
 8012624:	2300      	movs	r3, #0
 8012626:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801262a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801262c:	b298      	uxth	r0, r3
 801262e:	b003      	add	sp, #12
 8012630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012634:	217d      	movs	r1, #125	@ 0x7d
 8012636:	f082 0220 	eor.w	r2, r2, #32
 801263a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801263e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012642:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012646:	2901      	cmp	r1, #1
 8012648:	f04f 0203 	mov.w	r2, #3
 801264c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012650:	d804      	bhi.n	801265c <uxr_write_framed_msg+0x2c0>
 8012652:	4611      	mov	r1, r2
 8012654:	f04f 0c04 	mov.w	ip, #4
 8012658:	2205      	movs	r2, #5
 801265a:	e752      	b.n	8012502 <uxr_write_framed_msg+0x166>
 801265c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801265e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012662:	b2dd      	uxtb	r5, r3
 8012664:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012668:	2204      	movs	r2, #4
 801266a:	2901      	cmp	r1, #1
 801266c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012670:	f63f aec0 	bhi.w	80123f4 <uxr_write_framed_msg+0x58>
 8012674:	e758      	b.n	8012528 <uxr_write_framed_msg+0x18c>
 8012676:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801267a:	fa5f f889 	uxtb.w	r8, r9
 801267e:	9301      	str	r3, [sp, #4]
 8012680:	2200      	movs	r2, #0
 8012682:	e6f5      	b.n	8012470 <uxr_write_framed_msg+0xd4>
 8012684:	0801da4c 	.word	0x0801da4c

08012688 <uxr_framing_read_transport>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	4604      	mov	r4, r0
 801268e:	b083      	sub	sp, #12
 8012690:	461f      	mov	r7, r3
 8012692:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8012696:	4689      	mov	r9, r1
 8012698:	4692      	mov	sl, r2
 801269a:	f000 fc89 	bl	8012fb0 <uxr_millis>
 801269e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80126a2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80126a6:	42b3      	cmp	r3, r6
 80126a8:	4680      	mov	r8, r0
 80126aa:	d061      	beq.n	8012770 <uxr_framing_read_transport+0xe8>
 80126ac:	d81c      	bhi.n	80126e8 <uxr_framing_read_transport+0x60>
 80126ae:	1e75      	subs	r5, r6, #1
 80126b0:	1aed      	subs	r5, r5, r3
 80126b2:	b2ed      	uxtb	r5, r5
 80126b4:	2600      	movs	r6, #0
 80126b6:	455d      	cmp	r5, fp
 80126b8:	d81f      	bhi.n	80126fa <uxr_framing_read_transport+0x72>
 80126ba:	19ab      	adds	r3, r5, r6
 80126bc:	455b      	cmp	r3, fp
 80126be:	bf84      	itt	hi
 80126c0:	ebab 0605 	subhi.w	r6, fp, r5
 80126c4:	b2f6      	uxtbhi	r6, r6
 80126c6:	b9ed      	cbnz	r5, 8012704 <uxr_framing_read_transport+0x7c>
 80126c8:	f04f 0b00 	mov.w	fp, #0
 80126cc:	f000 fc70 	bl	8012fb0 <uxr_millis>
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	eba0 0808 	sub.w	r8, r0, r8
 80126d6:	eba3 0308 	sub.w	r3, r3, r8
 80126da:	4658      	mov	r0, fp
 80126dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80126e0:	603b      	str	r3, [r7, #0]
 80126e2:	b003      	add	sp, #12
 80126e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126e8:	2e00      	cmp	r6, #0
 80126ea:	d049      	beq.n	8012780 <uxr_framing_read_transport+0xf8>
 80126ec:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80126f0:	b2ed      	uxtb	r5, r5
 80126f2:	3e01      	subs	r6, #1
 80126f4:	455d      	cmp	r5, fp
 80126f6:	b2f6      	uxtb	r6, r6
 80126f8:	d9df      	bls.n	80126ba <uxr_framing_read_transport+0x32>
 80126fa:	fa5f f58b 	uxtb.w	r5, fp
 80126fe:	2600      	movs	r6, #0
 8012700:	2d00      	cmp	r5, #0
 8012702:	d0e1      	beq.n	80126c8 <uxr_framing_read_transport+0x40>
 8012704:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012708:	3102      	adds	r1, #2
 801270a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	4421      	add	r1, r4
 8012712:	462a      	mov	r2, r5
 8012714:	4650      	mov	r0, sl
 8012716:	47c8      	blx	r9
 8012718:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801271c:	4a1a      	ldr	r2, [pc, #104]	@ (8012788 <uxr_framing_read_transport+0x100>)
 801271e:	4403      	add	r3, r0
 8012720:	0859      	lsrs	r1, r3, #1
 8012722:	fba2 2101 	umull	r2, r1, r2, r1
 8012726:	0889      	lsrs	r1, r1, #2
 8012728:	222a      	movs	r2, #42	@ 0x2a
 801272a:	fb02 3111 	mls	r1, r2, r1, r3
 801272e:	4683      	mov	fp, r0
 8012730:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012734:	2800      	cmp	r0, #0
 8012736:	d0c7      	beq.n	80126c8 <uxr_framing_read_transport+0x40>
 8012738:	42a8      	cmp	r0, r5
 801273a:	d1c7      	bne.n	80126cc <uxr_framing_read_transport+0x44>
 801273c:	2e00      	cmp	r6, #0
 801273e:	d0c5      	beq.n	80126cc <uxr_framing_read_transport+0x44>
 8012740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	3102      	adds	r1, #2
 8012746:	4632      	mov	r2, r6
 8012748:	4421      	add	r1, r4
 801274a:	2300      	movs	r3, #0
 801274c:	4650      	mov	r0, sl
 801274e:	47c8      	blx	r9
 8012750:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012754:	4a0c      	ldr	r2, [pc, #48]	@ (8012788 <uxr_framing_read_transport+0x100>)
 8012756:	180b      	adds	r3, r1, r0
 8012758:	0859      	lsrs	r1, r3, #1
 801275a:	fba2 1201 	umull	r1, r2, r2, r1
 801275e:	0892      	lsrs	r2, r2, #2
 8012760:	212a      	movs	r1, #42	@ 0x2a
 8012762:	fb01 3312 	mls	r3, r1, r2, r3
 8012766:	eb00 0b05 	add.w	fp, r0, r5
 801276a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801276e:	e7ad      	b.n	80126cc <uxr_framing_read_transport+0x44>
 8012770:	2600      	movs	r6, #0
 8012772:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012776:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012778:	d9bf      	bls.n	80126fa <uxr_framing_read_transport+0x72>
 801277a:	2102      	movs	r1, #2
 801277c:	2529      	movs	r5, #41	@ 0x29
 801277e:	e7c4      	b.n	801270a <uxr_framing_read_transport+0x82>
 8012780:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012784:	b2ed      	uxtb	r5, r5
 8012786:	e796      	b.n	80126b6 <uxr_framing_read_transport+0x2e>
 8012788:	30c30c31 	.word	0x30c30c31

0801278c <uxr_read_framed_msg>:
 801278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012790:	461e      	mov	r6, r3
 8012792:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012796:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801279a:	429d      	cmp	r5, r3
 801279c:	b083      	sub	sp, #12
 801279e:	4604      	mov	r4, r0
 80127a0:	4688      	mov	r8, r1
 80127a2:	4691      	mov	r9, r2
 80127a4:	f000 8188 	beq.w	8012ab8 <uxr_read_framed_msg+0x32c>
 80127a8:	7823      	ldrb	r3, [r4, #0]
 80127aa:	4dc1      	ldr	r5, [pc, #772]	@ (8012ab0 <uxr_read_framed_msg+0x324>)
 80127ac:	4fc1      	ldr	r7, [pc, #772]	@ (8012ab4 <uxr_read_framed_msg+0x328>)
 80127ae:	2b07      	cmp	r3, #7
 80127b0:	d8fd      	bhi.n	80127ae <uxr_read_framed_msg+0x22>
 80127b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80127b6:	0115      	.short	0x0115
 80127b8:	00d600f6 	.word	0x00d600f6
 80127bc:	009000b9 	.word	0x009000b9
 80127c0:	0030004d 	.word	0x0030004d
 80127c4:	0008      	.short	0x0008
 80127c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80127ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80127ce:	4299      	cmp	r1, r3
 80127d0:	f000 814a 	beq.w	8012a68 <uxr_read_framed_msg+0x2dc>
 80127d4:	18e2      	adds	r2, r4, r3
 80127d6:	7892      	ldrb	r2, [r2, #2]
 80127d8:	2a7d      	cmp	r2, #125	@ 0x7d
 80127da:	f000 8199 	beq.w	8012b10 <uxr_read_framed_msg+0x384>
 80127de:	3301      	adds	r3, #1
 80127e0:	0858      	lsrs	r0, r3, #1
 80127e2:	fba5 1000 	umull	r1, r0, r5, r0
 80127e6:	0880      	lsrs	r0, r0, #2
 80127e8:	212a      	movs	r1, #42	@ 0x2a
 80127ea:	fb01 3310 	mls	r3, r1, r0, r3
 80127ee:	2a7e      	cmp	r2, #126	@ 0x7e
 80127f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80127f4:	f000 8252 	beq.w	8012c9c <uxr_read_framed_msg+0x510>
 80127f8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80127fa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80127fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012800:	b29b      	uxth	r3, r3
 8012802:	2200      	movs	r2, #0
 8012804:	4299      	cmp	r1, r3
 8012806:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012808:	7022      	strb	r2, [r4, #0]
 801280a:	f000 8179 	beq.w	8012b00 <uxr_read_framed_msg+0x374>
 801280e:	2000      	movs	r0, #0
 8012810:	b003      	add	sp, #12
 8012812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012816:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801281a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801281e:	4299      	cmp	r1, r3
 8012820:	f000 8131 	beq.w	8012a86 <uxr_read_framed_msg+0x2fa>
 8012824:	18e2      	adds	r2, r4, r3
 8012826:	7890      	ldrb	r0, [r2, #2]
 8012828:	287d      	cmp	r0, #125	@ 0x7d
 801282a:	f000 8190 	beq.w	8012b4e <uxr_read_framed_msg+0x3c2>
 801282e:	3301      	adds	r3, #1
 8012830:	085a      	lsrs	r2, r3, #1
 8012832:	fba5 1202 	umull	r1, r2, r5, r2
 8012836:	0892      	lsrs	r2, r2, #2
 8012838:	212a      	movs	r1, #42	@ 0x2a
 801283a:	fb01 3312 	mls	r3, r1, r2, r3
 801283e:	287e      	cmp	r0, #126	@ 0x7e
 8012840:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012844:	f000 821a 	beq.w	8012c7c <uxr_read_framed_msg+0x4f0>
 8012848:	2307      	movs	r3, #7
 801284a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801284c:	7023      	strb	r3, [r4, #0]
 801284e:	e7ae      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012850:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012852:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012856:	459e      	cmp	lr, r3
 8012858:	d938      	bls.n	80128cc <uxr_read_framed_msg+0x140>
 801285a:	ee07 8a90 	vmov	s15, r8
 801285e:	212a      	movs	r1, #42	@ 0x2a
 8012860:	e020      	b.n	80128a4 <uxr_read_framed_msg+0x118>
 8012862:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012866:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801286a:	f000 80d4 	beq.w	8012a16 <uxr_read_framed_msg+0x28a>
 801286e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012872:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012876:	f000 8219 	beq.w	8012cac <uxr_read_framed_msg+0x520>
 801287a:	f806 c003 	strb.w	ip, [r6, r3]
 801287e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012882:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012884:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012888:	ea8a 000c 	eor.w	r0, sl, ip
 801288c:	b2c0      	uxtb	r0, r0
 801288e:	3301      	adds	r3, #1
 8012890:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012894:	b29b      	uxth	r3, r3
 8012896:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801289a:	4573      	cmp	r3, lr
 801289c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801289e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80128a0:	f080 8120 	bcs.w	8012ae4 <uxr_read_framed_msg+0x358>
 80128a4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80128a8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80128ac:	f100 0c01 	add.w	ip, r0, #1
 80128b0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80128b4:	fba5 8202 	umull	r8, r2, r5, r2
 80128b8:	0892      	lsrs	r2, r2, #2
 80128ba:	4582      	cmp	sl, r0
 80128bc:	eb04 0b00 	add.w	fp, r4, r0
 80128c0:	fb01 c212 	mls	r2, r1, r2, ip
 80128c4:	d1cd      	bne.n	8012862 <uxr_read_framed_msg+0xd6>
 80128c6:	ee17 8a90 	vmov	r8, s15
 80128ca:	459e      	cmp	lr, r3
 80128cc:	f040 8111 	bne.w	8012af2 <uxr_read_framed_msg+0x366>
 80128d0:	2306      	movs	r3, #6
 80128d2:	7023      	strb	r3, [r4, #0]
 80128d4:	e76b      	b.n	80127ae <uxr_read_framed_msg+0x22>
 80128d6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80128da:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80128de:	4298      	cmp	r0, r3
 80128e0:	f000 80c2 	beq.w	8012a68 <uxr_read_framed_msg+0x2dc>
 80128e4:	18e2      	adds	r2, r4, r3
 80128e6:	7891      	ldrb	r1, [r2, #2]
 80128e8:	297d      	cmp	r1, #125	@ 0x7d
 80128ea:	f000 814c 	beq.w	8012b86 <uxr_read_framed_msg+0x3fa>
 80128ee:	3301      	adds	r3, #1
 80128f0:	085a      	lsrs	r2, r3, #1
 80128f2:	fba5 0202 	umull	r0, r2, r5, r2
 80128f6:	0892      	lsrs	r2, r2, #2
 80128f8:	202a      	movs	r0, #42	@ 0x2a
 80128fa:	fb00 3312 	mls	r3, r0, r2, r3
 80128fe:	297e      	cmp	r1, #126	@ 0x7e
 8012900:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012904:	f000 81ca 	beq.w	8012c9c <uxr_read_framed_msg+0x510>
 8012908:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801290a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801290e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012910:	b29b      	uxth	r3, r3
 8012912:	2000      	movs	r0, #0
 8012914:	428b      	cmp	r3, r1
 8012916:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012918:	8660      	strh	r0, [r4, #50]	@ 0x32
 801291a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801291c:	f240 80df 	bls.w	8012ade <uxr_read_framed_msg+0x352>
 8012920:	7020      	strb	r0, [r4, #0]
 8012922:	b003      	add	sp, #12
 8012924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012928:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801292c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012930:	4299      	cmp	r1, r3
 8012932:	f000 80a8 	beq.w	8012a86 <uxr_read_framed_msg+0x2fa>
 8012936:	18e2      	adds	r2, r4, r3
 8012938:	7890      	ldrb	r0, [r2, #2]
 801293a:	287d      	cmp	r0, #125	@ 0x7d
 801293c:	f000 8164 	beq.w	8012c08 <uxr_read_framed_msg+0x47c>
 8012940:	3301      	adds	r3, #1
 8012942:	085a      	lsrs	r2, r3, #1
 8012944:	fba5 1202 	umull	r1, r2, r5, r2
 8012948:	0892      	lsrs	r2, r2, #2
 801294a:	212a      	movs	r1, #42	@ 0x2a
 801294c:	fb01 3312 	mls	r3, r1, r2, r3
 8012950:	287e      	cmp	r0, #126	@ 0x7e
 8012952:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012956:	f000 8191 	beq.w	8012c7c <uxr_read_framed_msg+0x4f0>
 801295a:	2304      	movs	r3, #4
 801295c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801295e:	7023      	strb	r3, [r4, #0]
 8012960:	e725      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012962:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012966:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801296a:	4290      	cmp	r0, r2
 801296c:	f000 80b3 	beq.w	8012ad6 <uxr_read_framed_msg+0x34a>
 8012970:	18a3      	adds	r3, r4, r2
 8012972:	7899      	ldrb	r1, [r3, #2]
 8012974:	297d      	cmp	r1, #125	@ 0x7d
 8012976:	f000 8164 	beq.w	8012c42 <uxr_read_framed_msg+0x4b6>
 801297a:	3201      	adds	r2, #1
 801297c:	0850      	lsrs	r0, r2, #1
 801297e:	fba5 3000 	umull	r3, r0, r5, r0
 8012982:	0880      	lsrs	r0, r0, #2
 8012984:	232a      	movs	r3, #42	@ 0x2a
 8012986:	fb03 2210 	mls	r2, r3, r0, r2
 801298a:	297e      	cmp	r1, #126	@ 0x7e
 801298c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012990:	f000 8188 	beq.w	8012ca4 <uxr_read_framed_msg+0x518>
 8012994:	7863      	ldrb	r3, [r4, #1]
 8012996:	428b      	cmp	r3, r1
 8012998:	bf0c      	ite	eq
 801299a:	2303      	moveq	r3, #3
 801299c:	2300      	movne	r3, #0
 801299e:	7023      	strb	r3, [r4, #0]
 80129a0:	e705      	b.n	80127ae <uxr_read_framed_msg+0x22>
 80129a2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80129a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80129aa:	2200      	movs	r2, #0
 80129ac:	4299      	cmp	r1, r3
 80129ae:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80129b2:	d06c      	beq.n	8012a8e <uxr_read_framed_msg+0x302>
 80129b4:	18e2      	adds	r2, r4, r3
 80129b6:	7890      	ldrb	r0, [r2, #2]
 80129b8:	287d      	cmp	r0, #125	@ 0x7d
 80129ba:	f000 8101 	beq.w	8012bc0 <uxr_read_framed_msg+0x434>
 80129be:	3301      	adds	r3, #1
 80129c0:	085a      	lsrs	r2, r3, #1
 80129c2:	fba5 1202 	umull	r1, r2, r5, r2
 80129c6:	0892      	lsrs	r2, r2, #2
 80129c8:	212a      	movs	r1, #42	@ 0x2a
 80129ca:	fb01 3312 	mls	r3, r1, r2, r3
 80129ce:	287e      	cmp	r0, #126	@ 0x7e
 80129d0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80129d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80129d8:	d059      	beq.n	8012a8e <uxr_read_framed_msg+0x302>
 80129da:	2302      	movs	r3, #2
 80129dc:	7023      	strb	r3, [r4, #0]
 80129de:	e6e6      	b.n	80127ae <uxr_read_framed_msg+0x22>
 80129e0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80129e4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80129e8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80129ec:	1c51      	adds	r1, r2, #1
 80129ee:	084b      	lsrs	r3, r1, #1
 80129f0:	fba5 c303 	umull	ip, r3, r5, r3
 80129f4:	089b      	lsrs	r3, r3, #2
 80129f6:	fb0e 1313 	mls	r3, lr, r3, r1
 80129fa:	4592      	cmp	sl, r2
 80129fc:	eb04 0002 	add.w	r0, r4, r2
 8012a00:	b2da      	uxtb	r2, r3
 8012a02:	f43f af04 	beq.w	801280e <uxr_read_framed_msg+0x82>
 8012a06:	7883      	ldrb	r3, [r0, #2]
 8012a08:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012a0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a0e:	d1ed      	bne.n	80129ec <uxr_read_framed_msg+0x260>
 8012a10:	2301      	movs	r3, #1
 8012a12:	7023      	strb	r3, [r4, #0]
 8012a14:	e6cb      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012a16:	f100 0c01 	add.w	ip, r0, #1
 8012a1a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012a1e:	fba5 8202 	umull	r8, r2, r5, r2
 8012a22:	0892      	lsrs	r2, r2, #2
 8012a24:	fb01 c212 	mls	r2, r1, r2, ip
 8012a28:	eb04 0c02 	add.w	ip, r4, r2
 8012a2c:	b2d2      	uxtb	r2, r2
 8012a2e:	4592      	cmp	sl, r2
 8012a30:	f100 0002 	add.w	r0, r0, #2
 8012a34:	f43f af47 	beq.w	80128c6 <uxr_read_framed_msg+0x13a>
 8012a38:	0842      	lsrs	r2, r0, #1
 8012a3a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012a3e:	fba5 8202 	umull	r8, r2, r5, r2
 8012a42:	0892      	lsrs	r2, r2, #2
 8012a44:	fb01 0012 	mls	r0, r1, r2, r0
 8012a48:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012a4c:	f08a 0c20 	eor.w	ip, sl, #32
 8012a50:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012a54:	f47f af11 	bne.w	801287a <uxr_read_framed_msg+0xee>
 8012a58:	459e      	cmp	lr, r3
 8012a5a:	ee17 8a90 	vmov	r8, s15
 8012a5e:	f43f af37 	beq.w	80128d0 <uxr_read_framed_msg+0x144>
 8012a62:	2301      	movs	r3, #1
 8012a64:	7023      	strb	r3, [r4, #0]
 8012a66:	e6a2      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a6a:	9300      	str	r3, [sp, #0]
 8012a6c:	2301      	movs	r3, #1
 8012a6e:	9301      	str	r3, [sp, #4]
 8012a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a72:	464a      	mov	r2, r9
 8012a74:	4641      	mov	r1, r8
 8012a76:	4620      	mov	r0, r4
 8012a78:	f7ff fe06 	bl	8012688 <uxr_framing_read_transport>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	f43f aec6 	beq.w	801280e <uxr_read_framed_msg+0x82>
 8012a82:	7823      	ldrb	r3, [r4, #0]
 8012a84:	e693      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012a86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	e7ef      	b.n	8012a6e <uxr_read_framed_msg+0x2e2>
 8012a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a90:	9300      	str	r3, [sp, #0]
 8012a92:	2304      	movs	r3, #4
 8012a94:	9301      	str	r3, [sp, #4]
 8012a96:	464a      	mov	r2, r9
 8012a98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a9a:	4641      	mov	r1, r8
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f7ff fdf3 	bl	8012688 <uxr_framing_read_transport>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d1ed      	bne.n	8012a82 <uxr_read_framed_msg+0x2f6>
 8012aa6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012aaa:	2b7e      	cmp	r3, #126	@ 0x7e
 8012aac:	d0e9      	beq.n	8012a82 <uxr_read_framed_msg+0x2f6>
 8012aae:	e6ae      	b.n	801280e <uxr_read_framed_msg+0x82>
 8012ab0:	30c30c31 	.word	0x30c30c31
 8012ab4:	0801da4c 	.word	0x0801da4c
 8012ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012aba:	9300      	str	r3, [sp, #0]
 8012abc:	2305      	movs	r3, #5
 8012abe:	9301      	str	r3, [sp, #4]
 8012ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ac2:	f7ff fde1 	bl	8012688 <uxr_framing_read_transport>
 8012ac6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012aca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	f43f ae9d 	beq.w	801280e <uxr_read_framed_msg+0x82>
 8012ad4:	e668      	b.n	80127a8 <uxr_read_framed_msg+0x1c>
 8012ad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ad8:	9300      	str	r3, [sp, #0]
 8012ada:	2303      	movs	r3, #3
 8012adc:	e7c7      	b.n	8012a6e <uxr_read_framed_msg+0x2e2>
 8012ade:	2305      	movs	r3, #5
 8012ae0:	7023      	strb	r3, [r4, #0]
 8012ae2:	e664      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012ae4:	ee17 8a90 	vmov	r8, s15
 8012ae8:	f43f aef2 	beq.w	80128d0 <uxr_read_framed_msg+0x144>
 8012aec:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012af0:	d08e      	beq.n	8012a10 <uxr_read_framed_msg+0x284>
 8012af2:	ebae 0303 	sub.w	r3, lr, r3
 8012af6:	3302      	adds	r3, #2
 8012af8:	9301      	str	r3, [sp, #4]
 8012afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	e7b7      	b.n	8012a70 <uxr_read_framed_msg+0x2e4>
 8012b00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b02:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012b06:	7013      	strb	r3, [r2, #0]
 8012b08:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012b0a:	b003      	add	sp, #12
 8012b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b10:	f103 0c01 	add.w	ip, r3, #1
 8012b14:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012b18:	fba5 0202 	umull	r0, r2, r5, r2
 8012b1c:	0892      	lsrs	r2, r2, #2
 8012b1e:	202a      	movs	r0, #42	@ 0x2a
 8012b20:	fb00 c212 	mls	r2, r0, r2, ip
 8012b24:	fa5f fc82 	uxtb.w	ip, r2
 8012b28:	4561      	cmp	r1, ip
 8012b2a:	d09d      	beq.n	8012a68 <uxr_read_framed_msg+0x2dc>
 8012b2c:	3302      	adds	r3, #2
 8012b2e:	4422      	add	r2, r4
 8012b30:	0859      	lsrs	r1, r3, #1
 8012b32:	7892      	ldrb	r2, [r2, #2]
 8012b34:	fba5 c101 	umull	ip, r1, r5, r1
 8012b38:	0889      	lsrs	r1, r1, #2
 8012b3a:	fb00 3311 	mls	r3, r0, r1, r3
 8012b3e:	2a7e      	cmp	r2, #126	@ 0x7e
 8012b40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b44:	f000 80aa 	beq.w	8012c9c <uxr_read_framed_msg+0x510>
 8012b48:	f082 0220 	eor.w	r2, r2, #32
 8012b4c:	e654      	b.n	80127f8 <uxr_read_framed_msg+0x6c>
 8012b4e:	1c58      	adds	r0, r3, #1
 8012b50:	0842      	lsrs	r2, r0, #1
 8012b52:	fba5 c202 	umull	ip, r2, r5, r2
 8012b56:	0892      	lsrs	r2, r2, #2
 8012b58:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012b5c:	fb0c 0212 	mls	r2, ip, r2, r0
 8012b60:	b2d0      	uxtb	r0, r2
 8012b62:	4281      	cmp	r1, r0
 8012b64:	d08f      	beq.n	8012a86 <uxr_read_framed_msg+0x2fa>
 8012b66:	4422      	add	r2, r4
 8012b68:	3302      	adds	r3, #2
 8012b6a:	7890      	ldrb	r0, [r2, #2]
 8012b6c:	085a      	lsrs	r2, r3, #1
 8012b6e:	fba5 1202 	umull	r1, r2, r5, r2
 8012b72:	0892      	lsrs	r2, r2, #2
 8012b74:	fb0c 3312 	mls	r3, ip, r2, r3
 8012b78:	287e      	cmp	r0, #126	@ 0x7e
 8012b7a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b7e:	d07d      	beq.n	8012c7c <uxr_read_framed_msg+0x4f0>
 8012b80:	f080 0020 	eor.w	r0, r0, #32
 8012b84:	e660      	b.n	8012848 <uxr_read_framed_msg+0xbc>
 8012b86:	1c59      	adds	r1, r3, #1
 8012b88:	084a      	lsrs	r2, r1, #1
 8012b8a:	fba5 c202 	umull	ip, r2, r5, r2
 8012b8e:	0892      	lsrs	r2, r2, #2
 8012b90:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012b94:	fb0c 1212 	mls	r2, ip, r2, r1
 8012b98:	b2d1      	uxtb	r1, r2
 8012b9a:	4288      	cmp	r0, r1
 8012b9c:	f43f af64 	beq.w	8012a68 <uxr_read_framed_msg+0x2dc>
 8012ba0:	4422      	add	r2, r4
 8012ba2:	3302      	adds	r3, #2
 8012ba4:	7891      	ldrb	r1, [r2, #2]
 8012ba6:	085a      	lsrs	r2, r3, #1
 8012ba8:	fba5 0202 	umull	r0, r2, r5, r2
 8012bac:	0892      	lsrs	r2, r2, #2
 8012bae:	fb0c 3312 	mls	r3, ip, r2, r3
 8012bb2:	297e      	cmp	r1, #126	@ 0x7e
 8012bb4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012bb8:	d070      	beq.n	8012c9c <uxr_read_framed_msg+0x510>
 8012bba:	f081 0120 	eor.w	r1, r1, #32
 8012bbe:	e6a3      	b.n	8012908 <uxr_read_framed_msg+0x17c>
 8012bc0:	f103 0c01 	add.w	ip, r3, #1
 8012bc4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012bc8:	fba5 0202 	umull	r0, r2, r5, r2
 8012bcc:	0892      	lsrs	r2, r2, #2
 8012bce:	202a      	movs	r0, #42	@ 0x2a
 8012bd0:	fb00 c212 	mls	r2, r0, r2, ip
 8012bd4:	fa5f fc82 	uxtb.w	ip, r2
 8012bd8:	4561      	cmp	r1, ip
 8012bda:	f43f af58 	beq.w	8012a8e <uxr_read_framed_msg+0x302>
 8012bde:	4422      	add	r2, r4
 8012be0:	3302      	adds	r3, #2
 8012be2:	7891      	ldrb	r1, [r2, #2]
 8012be4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012be8:	085a      	lsrs	r2, r3, #1
 8012bea:	fba5 c202 	umull	ip, r2, r5, r2
 8012bee:	0892      	lsrs	r2, r2, #2
 8012bf0:	fb00 3312 	mls	r3, r0, r2, r3
 8012bf4:	297e      	cmp	r1, #126	@ 0x7e
 8012bf6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012bfa:	f43f af48 	beq.w	8012a8e <uxr_read_framed_msg+0x302>
 8012bfe:	f081 0120 	eor.w	r1, r1, #32
 8012c02:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012c06:	e6e8      	b.n	80129da <uxr_read_framed_msg+0x24e>
 8012c08:	1c58      	adds	r0, r3, #1
 8012c0a:	0842      	lsrs	r2, r0, #1
 8012c0c:	fba5 c202 	umull	ip, r2, r5, r2
 8012c10:	0892      	lsrs	r2, r2, #2
 8012c12:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012c16:	fb0c 0212 	mls	r2, ip, r2, r0
 8012c1a:	b2d0      	uxtb	r0, r2
 8012c1c:	4281      	cmp	r1, r0
 8012c1e:	f43f af32 	beq.w	8012a86 <uxr_read_framed_msg+0x2fa>
 8012c22:	4422      	add	r2, r4
 8012c24:	3302      	adds	r3, #2
 8012c26:	7890      	ldrb	r0, [r2, #2]
 8012c28:	085a      	lsrs	r2, r3, #1
 8012c2a:	fba5 1202 	umull	r1, r2, r5, r2
 8012c2e:	0892      	lsrs	r2, r2, #2
 8012c30:	fb0c 3312 	mls	r3, ip, r2, r3
 8012c34:	287e      	cmp	r0, #126	@ 0x7e
 8012c36:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c3a:	d01f      	beq.n	8012c7c <uxr_read_framed_msg+0x4f0>
 8012c3c:	f080 0020 	eor.w	r0, r0, #32
 8012c40:	e68b      	b.n	801295a <uxr_read_framed_msg+0x1ce>
 8012c42:	1c51      	adds	r1, r2, #1
 8012c44:	084b      	lsrs	r3, r1, #1
 8012c46:	fba5 c303 	umull	ip, r3, r5, r3
 8012c4a:	089b      	lsrs	r3, r3, #2
 8012c4c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012c50:	fb0c 1313 	mls	r3, ip, r3, r1
 8012c54:	b2d9      	uxtb	r1, r3
 8012c56:	4288      	cmp	r0, r1
 8012c58:	f43f af3d 	beq.w	8012ad6 <uxr_read_framed_msg+0x34a>
 8012c5c:	3202      	adds	r2, #2
 8012c5e:	4423      	add	r3, r4
 8012c60:	0850      	lsrs	r0, r2, #1
 8012c62:	789b      	ldrb	r3, [r3, #2]
 8012c64:	fba5 1000 	umull	r1, r0, r5, r0
 8012c68:	0880      	lsrs	r0, r0, #2
 8012c6a:	fb0c 2210 	mls	r2, ip, r0, r2
 8012c6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012c70:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012c74:	d016      	beq.n	8012ca4 <uxr_read_framed_msg+0x518>
 8012c76:	f083 0120 	eor.w	r1, r3, #32
 8012c7a:	e68b      	b.n	8012994 <uxr_read_framed_msg+0x208>
 8012c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	2302      	movs	r3, #2
 8012c82:	9301      	str	r3, [sp, #4]
 8012c84:	464a      	mov	r2, r9
 8012c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c88:	4641      	mov	r1, r8
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f7ff fcfc 	bl	8012688 <uxr_framing_read_transport>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	f47f aef6 	bne.w	8012a82 <uxr_read_framed_msg+0x2f6>
 8012c96:	2301      	movs	r3, #1
 8012c98:	7023      	strb	r3, [r4, #0]
 8012c9a:	e588      	b.n	80127ae <uxr_read_framed_msg+0x22>
 8012c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e7ee      	b.n	8012c82 <uxr_read_framed_msg+0x4f6>
 8012ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ca6:	9300      	str	r3, [sp, #0]
 8012ca8:	2303      	movs	r3, #3
 8012caa:	e7ea      	b.n	8012c82 <uxr_read_framed_msg+0x4f6>
 8012cac:	ee17 8a90 	vmov	r8, s15
 8012cb0:	e6ae      	b.n	8012a10 <uxr_read_framed_msg+0x284>
 8012cb2:	bf00      	nop

08012cb4 <uxr_stream_id>:
 8012cb4:	2901      	cmp	r1, #1
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	d01d      	beq.n	8012cf6 <uxr_stream_id+0x42>
 8012cba:	2902      	cmp	r1, #2
 8012cbc:	f04f 0c00 	mov.w	ip, #0
 8012cc0:	d01e      	beq.n	8012d00 <uxr_stream_id+0x4c>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	f36c 0307 	bfi	r3, ip, #0, #8
 8012cc8:	f360 230f 	bfi	r3, r0, #8, #8
 8012ccc:	f361 4317 	bfi	r3, r1, #16, #8
 8012cd0:	f362 631f 	bfi	r3, r2, #24, #8
 8012cd4:	b2da      	uxtb	r2, r3
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	f362 0007 	bfi	r0, r2, #0, #8
 8012cdc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012ce0:	f362 200f 	bfi	r0, r2, #8, #8
 8012ce4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012ce8:	f362 4017 	bfi	r0, r2, #16, #8
 8012cec:	0e1b      	lsrs	r3, r3, #24
 8012cee:	f363 601f 	bfi	r0, r3, #24, #8
 8012cf2:	b002      	add	sp, #8
 8012cf4:	4770      	bx	lr
 8012cf6:	f100 0c01 	add.w	ip, r0, #1
 8012cfa:	fa5f fc8c 	uxtb.w	ip, ip
 8012cfe:	e7e0      	b.n	8012cc2 <uxr_stream_id+0xe>
 8012d00:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012d04:	e7dd      	b.n	8012cc2 <uxr_stream_id+0xe>
 8012d06:	bf00      	nop

08012d08 <uxr_stream_id_from_raw>:
 8012d08:	b082      	sub	sp, #8
 8012d0a:	b130      	cbz	r0, 8012d1a <uxr_stream_id_from_raw+0x12>
 8012d0c:	0603      	lsls	r3, r0, #24
 8012d0e:	d420      	bmi.n	8012d52 <uxr_stream_id_from_raw+0x4a>
 8012d10:	1e42      	subs	r2, r0, #1
 8012d12:	b2d2      	uxtb	r2, r2
 8012d14:	f04f 0c01 	mov.w	ip, #1
 8012d18:	e001      	b.n	8012d1e <uxr_stream_id_from_raw+0x16>
 8012d1a:	4684      	mov	ip, r0
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	2300      	movs	r3, #0
 8012d20:	f360 0307 	bfi	r3, r0, #0, #8
 8012d24:	f362 230f 	bfi	r3, r2, #8, #8
 8012d28:	f36c 4317 	bfi	r3, ip, #16, #8
 8012d2c:	f361 631f 	bfi	r3, r1, #24, #8
 8012d30:	b2da      	uxtb	r2, r3
 8012d32:	2000      	movs	r0, #0
 8012d34:	f362 0007 	bfi	r0, r2, #0, #8
 8012d38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012d3c:	f362 200f 	bfi	r0, r2, #8, #8
 8012d40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012d44:	f362 4017 	bfi	r0, r2, #16, #8
 8012d48:	0e1b      	lsrs	r3, r3, #24
 8012d4a:	f363 601f 	bfi	r0, r3, #24, #8
 8012d4e:	b002      	add	sp, #8
 8012d50:	4770      	bx	lr
 8012d52:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012d56:	f04f 0c02 	mov.w	ip, #2
 8012d5a:	e7e0      	b.n	8012d1e <uxr_stream_id_from_raw+0x16>

08012d5c <uxr_init_stream_storage>:
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	7403      	strb	r3, [r0, #16]
 8012d60:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012d64:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012d68:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012d6c:	4770      	bx	lr
 8012d6e:	bf00      	nop

08012d70 <uxr_reset_stream_storage>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	7c03      	ldrb	r3, [r0, #16]
 8012d74:	4604      	mov	r4, r0
 8012d76:	b153      	cbz	r3, 8012d8e <uxr_reset_stream_storage+0x1e>
 8012d78:	4606      	mov	r6, r0
 8012d7a:	2500      	movs	r5, #0
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f005 ff83 	bl	8018c88 <uxr_reset_output_best_effort_stream>
 8012d82:	7c23      	ldrb	r3, [r4, #16]
 8012d84:	3501      	adds	r5, #1
 8012d86:	42ab      	cmp	r3, r5
 8012d88:	f106 0610 	add.w	r6, r6, #16
 8012d8c:	d8f6      	bhi.n	8012d7c <uxr_reset_stream_storage+0xc>
 8012d8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012d92:	b163      	cbz	r3, 8012dae <uxr_reset_stream_storage+0x3e>
 8012d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d98:	2500      	movs	r5, #0
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	f005 fd76 	bl	801888c <uxr_reset_input_best_effort_stream>
 8012da0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012da4:	3501      	adds	r5, #1
 8012da6:	42ab      	cmp	r3, r5
 8012da8:	f106 0602 	add.w	r6, r6, #2
 8012dac:	d8f5      	bhi.n	8012d9a <uxr_reset_stream_storage+0x2a>
 8012dae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012db2:	b163      	cbz	r3, 8012dce <uxr_reset_stream_storage+0x5e>
 8012db4:	f104 0618 	add.w	r6, r4, #24
 8012db8:	2500      	movs	r5, #0
 8012dba:	4630      	mov	r0, r6
 8012dbc:	f006 f810 	bl	8018de0 <uxr_reset_output_reliable_stream>
 8012dc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012dc4:	3501      	adds	r5, #1
 8012dc6:	42ab      	cmp	r3, r5
 8012dc8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012dcc:	d8f5      	bhi.n	8012dba <uxr_reset_stream_storage+0x4a>
 8012dce:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012dd2:	b163      	cbz	r3, 8012dee <uxr_reset_stream_storage+0x7e>
 8012dd4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012dd8:	2500      	movs	r5, #0
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f005 fdca 	bl	8018974 <uxr_reset_input_reliable_stream>
 8012de0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012de4:	3501      	adds	r5, #1
 8012de6:	42ab      	cmp	r3, r5
 8012de8:	f106 0618 	add.w	r6, r6, #24
 8012dec:	d8f5      	bhi.n	8012dda <uxr_reset_stream_storage+0x6a>
 8012dee:	bd70      	pop	{r4, r5, r6, pc}

08012df0 <uxr_add_output_best_effort_buffer>:
 8012df0:	b510      	push	{r4, lr}
 8012df2:	7c04      	ldrb	r4, [r0, #16]
 8012df4:	f104 0c01 	add.w	ip, r4, #1
 8012df8:	b082      	sub	sp, #8
 8012dfa:	f880 c010 	strb.w	ip, [r0, #16]
 8012dfe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012e02:	f005 ff37 	bl	8018c74 <uxr_init_output_best_effort_stream>
 8012e06:	2201      	movs	r2, #1
 8012e08:	4611      	mov	r1, r2
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	b002      	add	sp, #8
 8012e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e12:	f7ff bf4f 	b.w	8012cb4 <uxr_stream_id>
 8012e16:	bf00      	nop

08012e18 <uxr_add_output_reliable_buffer>:
 8012e18:	b510      	push	{r4, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	4684      	mov	ip, r0
 8012e1e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012e22:	9000      	str	r0, [sp, #0]
 8012e24:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012e28:	2028      	movs	r0, #40	@ 0x28
 8012e2a:	fb00 c004 	mla	r0, r0, r4, ip
 8012e2e:	f104 0e01 	add.w	lr, r4, #1
 8012e32:	3018      	adds	r0, #24
 8012e34:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012e38:	f005 ff9a 	bl	8018d70 <uxr_init_output_reliable_stream>
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	2102      	movs	r1, #2
 8012e40:	4620      	mov	r0, r4
 8012e42:	b004      	add	sp, #16
 8012e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e48:	f7ff bf34 	b.w	8012cb4 <uxr_stream_id>

08012e4c <uxr_add_input_best_effort_buffer>:
 8012e4c:	b510      	push	{r4, lr}
 8012e4e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012e52:	4603      	mov	r3, r0
 8012e54:	1c62      	adds	r2, r4, #1
 8012e56:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e64:	f005 fd0e 	bl	8018884 <uxr_init_input_best_effort_stream>
 8012e68:	2200      	movs	r2, #0
 8012e6a:	2101      	movs	r1, #1
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	b002      	add	sp, #8
 8012e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e74:	f7ff bf1e 	b.w	8012cb4 <uxr_stream_id>

08012e78 <uxr_add_input_reliable_buffer>:
 8012e78:	b510      	push	{r4, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	4684      	mov	ip, r0
 8012e7e:	9806      	ldr	r0, [sp, #24]
 8012e80:	9000      	str	r0, [sp, #0]
 8012e82:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012e86:	2018      	movs	r0, #24
 8012e88:	fb00 c004 	mla	r0, r0, r4, ip
 8012e8c:	f104 0e01 	add.w	lr, r4, #1
 8012e90:	3048      	adds	r0, #72	@ 0x48
 8012e92:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8012e96:	f005 fd41 	bl	801891c <uxr_init_input_reliable_stream>
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	2102      	movs	r1, #2
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	b004      	add	sp, #16
 8012ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ea6:	f7ff bf05 	b.w	8012cb4 <uxr_stream_id>
 8012eaa:	bf00      	nop

08012eac <uxr_get_output_best_effort_stream>:
 8012eac:	7c03      	ldrb	r3, [r0, #16]
 8012eae:	428b      	cmp	r3, r1
 8012eb0:	bf8c      	ite	hi
 8012eb2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012eb6:	2000      	movls	r0, #0
 8012eb8:	4770      	bx	lr
 8012eba:	bf00      	nop

08012ebc <uxr_get_output_reliable_stream>:
 8012ebc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012ec0:	428b      	cmp	r3, r1
 8012ec2:	bf83      	ittte	hi
 8012ec4:	2328      	movhi	r3, #40	@ 0x28
 8012ec6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012eca:	3018      	addhi	r0, #24
 8012ecc:	2000      	movls	r0, #0
 8012ece:	4770      	bx	lr

08012ed0 <uxr_get_input_best_effort_stream>:
 8012ed0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012ed4:	428b      	cmp	r3, r1
 8012ed6:	bf86      	itte	hi
 8012ed8:	3121      	addhi	r1, #33	@ 0x21
 8012eda:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012ede:	2000      	movls	r0, #0
 8012ee0:	4770      	bx	lr
 8012ee2:	bf00      	nop

08012ee4 <uxr_get_input_reliable_stream>:
 8012ee4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012ee8:	428b      	cmp	r3, r1
 8012eea:	bf83      	ittte	hi
 8012eec:	2318      	movhi	r3, #24
 8012eee:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012ef2:	3048      	addhi	r0, #72	@ 0x48
 8012ef4:	2000      	movls	r0, #0
 8012ef6:	4770      	bx	lr

08012ef8 <uxr_output_streams_confirmed>:
 8012ef8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012efc:	b183      	cbz	r3, 8012f20 <uxr_output_streams_confirmed+0x28>
 8012efe:	b570      	push	{r4, r5, r6, lr}
 8012f00:	4606      	mov	r6, r0
 8012f02:	f100 0518 	add.w	r5, r0, #24
 8012f06:	2400      	movs	r4, #0
 8012f08:	e001      	b.n	8012f0e <uxr_output_streams_confirmed+0x16>
 8012f0a:	3528      	adds	r5, #40	@ 0x28
 8012f0c:	b138      	cbz	r0, 8012f1e <uxr_output_streams_confirmed+0x26>
 8012f0e:	4628      	mov	r0, r5
 8012f10:	f006 f9d6 	bl	80192c0 <uxr_is_output_up_to_date>
 8012f14:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012f18:	3401      	adds	r4, #1
 8012f1a:	42a3      	cmp	r3, r4
 8012f1c:	d8f5      	bhi.n	8012f0a <uxr_output_streams_confirmed+0x12>
 8012f1e:	bd70      	pop	{r4, r5, r6, pc}
 8012f20:	2001      	movs	r0, #1
 8012f22:	4770      	bx	lr

08012f24 <uxr_buffer_submessage_header>:
 8012f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f26:	4604      	mov	r4, r0
 8012f28:	460e      	mov	r6, r1
 8012f2a:	2104      	movs	r1, #4
 8012f2c:	4615      	mov	r5, r2
 8012f2e:	461f      	mov	r7, r3
 8012f30:	f7f9 fd4a 	bl	800c9c8 <ucdr_align_to>
 8012f34:	2301      	movs	r3, #1
 8012f36:	ea47 0203 	orr.w	r2, r7, r3
 8012f3a:	4631      	mov	r1, r6
 8012f3c:	7523      	strb	r3, [r4, #20]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	462b      	mov	r3, r5
 8012f42:	f000 fa27 	bl	8013394 <uxr_serialize_submessage_header>
 8012f46:	4620      	mov	r0, r4
 8012f48:	f7f9 fd54 	bl	800c9f4 <ucdr_buffer_remaining>
 8012f4c:	42a8      	cmp	r0, r5
 8012f4e:	bf34      	ite	cc
 8012f50:	2000      	movcc	r0, #0
 8012f52:	2001      	movcs	r0, #1
 8012f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f56:	bf00      	nop

08012f58 <uxr_read_submessage_header>:
 8012f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5c:	4604      	mov	r4, r0
 8012f5e:	460d      	mov	r5, r1
 8012f60:	2104      	movs	r1, #4
 8012f62:	4616      	mov	r6, r2
 8012f64:	4698      	mov	r8, r3
 8012f66:	f7f9 fd2f 	bl	800c9c8 <ucdr_align_to>
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f7f9 fd42 	bl	800c9f4 <ucdr_buffer_remaining>
 8012f70:	2803      	cmp	r0, #3
 8012f72:	bf8c      	ite	hi
 8012f74:	2701      	movhi	r7, #1
 8012f76:	2700      	movls	r7, #0
 8012f78:	d802      	bhi.n	8012f80 <uxr_read_submessage_header+0x28>
 8012f7a:	4638      	mov	r0, r7
 8012f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f80:	4633      	mov	r3, r6
 8012f82:	4642      	mov	r2, r8
 8012f84:	4620      	mov	r0, r4
 8012f86:	4629      	mov	r1, r5
 8012f88:	f000 fa18 	bl	80133bc <uxr_deserialize_submessage_header>
 8012f8c:	f898 3000 	ldrb.w	r3, [r8]
 8012f90:	f003 0201 	and.w	r2, r3, #1
 8012f94:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012f98:	f888 3000 	strb.w	r3, [r8]
 8012f9c:	7522      	strb	r2, [r4, #20]
 8012f9e:	4638      	mov	r0, r7
 8012fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012fa4 <uxr_submessage_padding>:
 8012fa4:	f010 0003 	ands.w	r0, r0, #3
 8012fa8:	bf18      	it	ne
 8012faa:	f1c0 0004 	rsbne	r0, r0, #4
 8012fae:	4770      	bx	lr

08012fb0 <uxr_millis>:
 8012fb0:	b510      	push	{r4, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	4669      	mov	r1, sp
 8012fb6:	2001      	movs	r0, #1
 8012fb8:	f7ef fb1a 	bl	80025f0 <clock_gettime>
 8012fbc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012fc0:	4906      	ldr	r1, [pc, #24]	@ (8012fdc <uxr_millis+0x2c>)
 8012fc2:	fba0 0301 	umull	r0, r3, r0, r1
 8012fc6:	1900      	adds	r0, r0, r4
 8012fc8:	fb01 3102 	mla	r1, r1, r2, r3
 8012fcc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012fd0:	4a03      	ldr	r2, [pc, #12]	@ (8012fe0 <uxr_millis+0x30>)
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	f7ed fe48 	bl	8000c68 <__aeabi_ldivmod>
 8012fd8:	b004      	add	sp, #16
 8012fda:	bd10      	pop	{r4, pc}
 8012fdc:	3b9aca00 	.word	0x3b9aca00
 8012fe0:	000f4240 	.word	0x000f4240

08012fe4 <uxr_nanos>:
 8012fe4:	b510      	push	{r4, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	4669      	mov	r1, sp
 8012fea:	2001      	movs	r0, #1
 8012fec:	f7ef fb00 	bl	80025f0 <clock_gettime>
 8012ff0:	4a06      	ldr	r2, [pc, #24]	@ (801300c <uxr_nanos+0x28>)
 8012ff2:	9800      	ldr	r0, [sp, #0]
 8012ff4:	9902      	ldr	r1, [sp, #8]
 8012ff6:	9c01      	ldr	r4, [sp, #4]
 8012ff8:	fba0 0302 	umull	r0, r3, r0, r2
 8012ffc:	1840      	adds	r0, r0, r1
 8012ffe:	fb02 3304 	mla	r3, r2, r4, r3
 8013002:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013006:	b004      	add	sp, #16
 8013008:	bd10      	pop	{r4, pc}
 801300a:	bf00      	nop
 801300c:	3b9aca00 	.word	0x3b9aca00

08013010 <on_full_output_buffer_fragmented>:
 8013010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013014:	460c      	mov	r4, r1
 8013016:	b08a      	sub	sp, #40	@ 0x28
 8013018:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801301c:	4606      	mov	r6, r0
 801301e:	f104 0008 	add.w	r0, r4, #8
 8013022:	f7ff ff4b 	bl	8012ebc <uxr_get_output_reliable_stream>
 8013026:	4605      	mov	r5, r0
 8013028:	f006 f954 	bl	80192d4 <get_available_free_slots>
 801302c:	b968      	cbnz	r0, 801304a <on_full_output_buffer_fragmented+0x3a>
 801302e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013032:	4620      	mov	r0, r4
 8013034:	4798      	blx	r3
 8013036:	b918      	cbnz	r0, 8013040 <on_full_output_buffer_fragmented+0x30>
 8013038:	2001      	movs	r0, #1
 801303a:	b00a      	add	sp, #40	@ 0x28
 801303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013040:	4628      	mov	r0, r5
 8013042:	f006 f947 	bl	80192d4 <get_available_free_slots>
 8013046:	2800      	cmp	r0, #0
 8013048:	d0f6      	beq.n	8013038 <on_full_output_buffer_fragmented+0x28>
 801304a:	8929      	ldrh	r1, [r5, #8]
 801304c:	89eb      	ldrh	r3, [r5, #14]
 801304e:	7b28      	ldrb	r0, [r5, #12]
 8013050:	686a      	ldr	r2, [r5, #4]
 8013052:	fbb2 f8f1 	udiv	r8, r2, r1
 8013056:	fbb3 f2f1 	udiv	r2, r3, r1
 801305a:	fb01 3112 	mls	r1, r1, r2, r3
 801305e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013062:	b289      	uxth	r1, r1
 8013064:	fb08 f101 	mul.w	r1, r8, r1
 8013068:	30fc      	adds	r0, #252	@ 0xfc
 801306a:	f1a8 0804 	sub.w	r8, r8, #4
 801306e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013072:	4440      	add	r0, r8
 8013074:	b287      	uxth	r7, r0
 8013076:	1bdb      	subs	r3, r3, r7
 8013078:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801307c:	682b      	ldr	r3, [r5, #0]
 801307e:	3104      	adds	r1, #4
 8013080:	4419      	add	r1, r3
 8013082:	4642      	mov	r2, r8
 8013084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	a802      	add	r0, sp, #8
 801308c:	2300      	movs	r3, #0
 801308e:	f7f9 fc6f 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8013092:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013096:	f102 0308 	add.w	r3, r2, #8
 801309a:	4543      	cmp	r3, r8
 801309c:	d928      	bls.n	80130f0 <on_full_output_buffer_fragmented+0xe0>
 801309e:	463a      	mov	r2, r7
 80130a0:	2300      	movs	r3, #0
 80130a2:	210d      	movs	r1, #13
 80130a4:	a802      	add	r0, sp, #8
 80130a6:	f7ff ff3d 	bl	8012f24 <uxr_buffer_submessage_header>
 80130aa:	8929      	ldrh	r1, [r5, #8]
 80130ac:	89eb      	ldrh	r3, [r5, #14]
 80130ae:	fbb3 f2f1 	udiv	r2, r3, r1
 80130b2:	fb01 3312 	mls	r3, r1, r2, r3
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	686a      	ldr	r2, [r5, #4]
 80130ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80130be:	fb02 f303 	mul.w	r3, r2, r3
 80130c2:	682a      	ldr	r2, [r5, #0]
 80130c4:	f842 8003 	str.w	r8, [r2, r3]
 80130c8:	89e8      	ldrh	r0, [r5, #14]
 80130ca:	2101      	movs	r1, #1
 80130cc:	f006 f922 	bl	8019314 <uxr_seq_num_add>
 80130d0:	9904      	ldr	r1, [sp, #16]
 80130d2:	9a03      	ldr	r2, [sp, #12]
 80130d4:	81e8      	strh	r0, [r5, #14]
 80130d6:	1a52      	subs	r2, r2, r1
 80130d8:	4630      	mov	r0, r6
 80130da:	f7f9 fc5b 	bl	800c994 <ucdr_init_buffer>
 80130de:	4630      	mov	r0, r6
 80130e0:	490f      	ldr	r1, [pc, #60]	@ (8013120 <on_full_output_buffer_fragmented+0x110>)
 80130e2:	4622      	mov	r2, r4
 80130e4:	f7f9 fc2a 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 80130e8:	2000      	movs	r0, #0
 80130ea:	b00a      	add	sp, #40	@ 0x28
 80130ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f0:	b292      	uxth	r2, r2
 80130f2:	2302      	movs	r3, #2
 80130f4:	210d      	movs	r1, #13
 80130f6:	a802      	add	r0, sp, #8
 80130f8:	f7ff ff14 	bl	8012f24 <uxr_buffer_submessage_header>
 80130fc:	8928      	ldrh	r0, [r5, #8]
 80130fe:	89eb      	ldrh	r3, [r5, #14]
 8013100:	fbb3 f1f0 	udiv	r1, r3, r0
 8013104:	fb00 3311 	mls	r3, r0, r1, r3
 8013108:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801310c:	6869      	ldr	r1, [r5, #4]
 801310e:	fbb1 f1f0 	udiv	r1, r1, r0
 8013112:	b29b      	uxth	r3, r3
 8013114:	fb01 f303 	mul.w	r3, r1, r3
 8013118:	6829      	ldr	r1, [r5, #0]
 801311a:	3208      	adds	r2, #8
 801311c:	50ca      	str	r2, [r1, r3]
 801311e:	e7d3      	b.n	80130c8 <on_full_output_buffer_fragmented+0xb8>
 8013120:	08013011 	.word	0x08013011

08013124 <uxr_prepare_output_stream>:
 8013124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013126:	b087      	sub	sp, #28
 8013128:	2707      	movs	r7, #7
 801312a:	9202      	str	r2, [sp, #8]
 801312c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801312e:	9103      	str	r1, [sp, #12]
 8013130:	2500      	movs	r5, #0
 8013132:	3204      	adds	r2, #4
 8013134:	e9cd 7500 	strd	r7, r5, [sp]
 8013138:	461c      	mov	r4, r3
 801313a:	4606      	mov	r6, r0
 801313c:	f7fe ffc2 	bl	80120c4 <uxr_prepare_stream_to_write_submessage>
 8013140:	f080 0201 	eor.w	r2, r0, #1
 8013144:	b2d2      	uxtb	r2, r2
 8013146:	75a2      	strb	r2, [r4, #22]
 8013148:	b112      	cbz	r2, 8013150 <uxr_prepare_output_stream+0x2c>
 801314a:	4628      	mov	r0, r5
 801314c:	b007      	add	sp, #28
 801314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013150:	aa05      	add	r2, sp, #20
 8013152:	9902      	ldr	r1, [sp, #8]
 8013154:	4630      	mov	r0, r6
 8013156:	f7ff f8eb 	bl	8012330 <uxr_init_base_object_request>
 801315a:	a905      	add	r1, sp, #20
 801315c:	4605      	mov	r5, r0
 801315e:	4620      	mov	r0, r4
 8013160:	f000 ffd4 	bl	801410c <uxr_serialize_WRITE_DATA_Payload_Data>
 8013164:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013168:	69a6      	ldr	r6, [r4, #24]
 801316a:	69e7      	ldr	r7, [r4, #28]
 801316c:	1a52      	subs	r2, r2, r1
 801316e:	4620      	mov	r0, r4
 8013170:	f7f9 fc10 	bl	800c994 <ucdr_init_buffer>
 8013174:	4620      	mov	r0, r4
 8013176:	463a      	mov	r2, r7
 8013178:	4631      	mov	r1, r6
 801317a:	f7f9 fbdf 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 801317e:	4628      	mov	r0, r5
 8013180:	b007      	add	sp, #28
 8013182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013184 <uxr_prepare_output_stream_fragmented>:
 8013184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013188:	b091      	sub	sp, #68	@ 0x44
 801318a:	4605      	mov	r5, r0
 801318c:	9105      	str	r1, [sp, #20]
 801318e:	3008      	adds	r0, #8
 8013190:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013194:	461e      	mov	r6, r3
 8013196:	9204      	str	r2, [sp, #16]
 8013198:	f7ff fe90 	bl	8012ebc <uxr_get_output_reliable_stream>
 801319c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80131a0:	2b01      	cmp	r3, #1
 80131a2:	f000 8091 	beq.w	80132c8 <uxr_prepare_output_stream_fragmented+0x144>
 80131a6:	4604      	mov	r4, r0
 80131a8:	2800      	cmp	r0, #0
 80131aa:	f000 808d 	beq.w	80132c8 <uxr_prepare_output_stream_fragmented+0x144>
 80131ae:	f006 f891 	bl	80192d4 <get_available_free_slots>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	f000 8083 	beq.w	80132be <uxr_prepare_output_stream_fragmented+0x13a>
 80131b8:	8922      	ldrh	r2, [r4, #8]
 80131ba:	89e7      	ldrh	r7, [r4, #14]
 80131bc:	fbb7 f9f2 	udiv	r9, r7, r2
 80131c0:	fb02 7919 	mls	r9, r2, r9, r7
 80131c4:	fa1f f989 	uxth.w	r9, r9
 80131c8:	6863      	ldr	r3, [r4, #4]
 80131ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	9203      	str	r2, [sp, #12]
 80131d2:	fb02 f909 	mul.w	r9, r2, r9
 80131d6:	f109 0904 	add.w	r9, r9, #4
 80131da:	4499      	add	r9, r3
 80131dc:	7b23      	ldrb	r3, [r4, #12]
 80131de:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80131e2:	4543      	cmp	r3, r8
 80131e4:	f1a2 0b04 	sub.w	fp, r2, #4
 80131e8:	d37a      	bcc.n	80132e0 <uxr_prepare_output_stream_fragmented+0x15c>
 80131ea:	f1ab 0a04 	sub.w	sl, fp, #4
 80131ee:	ebaa 0a03 	sub.w	sl, sl, r3
 80131f2:	465a      	mov	r2, fp
 80131f4:	2300      	movs	r3, #0
 80131f6:	4649      	mov	r1, r9
 80131f8:	a808      	add	r0, sp, #32
 80131fa:	f8cd 8000 	str.w	r8, [sp]
 80131fe:	f7f9 fbb7 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8013202:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013204:	fa1f fa8a 	uxth.w	sl, sl
 8013208:	4652      	mov	r2, sl
 801320a:	f103 0a08 	add.w	sl, r3, #8
 801320e:	45da      	cmp	sl, fp
 8013210:	bf34      	ite	cc
 8013212:	2302      	movcc	r3, #2
 8013214:	2300      	movcs	r3, #0
 8013216:	210d      	movs	r1, #13
 8013218:	a808      	add	r0, sp, #32
 801321a:	f7ff fe83 	bl	8012f24 <uxr_buffer_submessage_header>
 801321e:	8921      	ldrh	r1, [r4, #8]
 8013220:	fbb7 f2f1 	udiv	r2, r7, r1
 8013224:	fb01 7212 	mls	r2, r1, r2, r7
 8013228:	b292      	uxth	r2, r2
 801322a:	6863      	ldr	r3, [r4, #4]
 801322c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013230:	fb02 f303 	mul.w	r3, r2, r3
 8013234:	6822      	ldr	r2, [r4, #0]
 8013236:	4638      	mov	r0, r7
 8013238:	f842 b003 	str.w	fp, [r2, r3]
 801323c:	2101      	movs	r1, #1
 801323e:	f006 f869 	bl	8019314 <uxr_seq_num_add>
 8013242:	9b03      	ldr	r3, [sp, #12]
 8013244:	f108 0104 	add.w	r1, r8, #4
 8013248:	f1a3 0208 	sub.w	r2, r3, #8
 801324c:	eba2 0208 	sub.w	r2, r2, r8
 8013250:	4449      	add	r1, r9
 8013252:	4607      	mov	r7, r0
 8013254:	4630      	mov	r0, r6
 8013256:	f7f9 fb9d 	bl	800c994 <ucdr_init_buffer>
 801325a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801325c:	81e7      	strh	r7, [r4, #14]
 801325e:	1d1a      	adds	r2, r3, #4
 8013260:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013264:	bf28      	it	cs
 8013266:	2200      	movcs	r2, #0
 8013268:	2300      	movs	r3, #0
 801326a:	b292      	uxth	r2, r2
 801326c:	2107      	movs	r1, #7
 801326e:	4630      	mov	r0, r6
 8013270:	f7ff fe58 	bl	8012f24 <uxr_buffer_submessage_header>
 8013274:	9904      	ldr	r1, [sp, #16]
 8013276:	aa07      	add	r2, sp, #28
 8013278:	4628      	mov	r0, r5
 801327a:	f7ff f859 	bl	8012330 <uxr_init_base_object_request>
 801327e:	4604      	mov	r4, r0
 8013280:	b318      	cbz	r0, 80132ca <uxr_prepare_output_stream_fragmented+0x146>
 8013282:	a907      	add	r1, sp, #28
 8013284:	4630      	mov	r0, r6
 8013286:	f000 ff41 	bl	801410c <uxr_serialize_WRITE_DATA_Payload_Data>
 801328a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801328e:	4630      	mov	r0, r6
 8013290:	1a52      	subs	r2, r2, r1
 8013292:	f7f9 fb7f 	bl	800c994 <ucdr_init_buffer>
 8013296:	9b05      	ldr	r3, [sp, #20]
 8013298:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801329c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801329e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80132a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80132a4:	491b      	ldr	r1, [pc, #108]	@ (8013314 <uxr_prepare_output_stream_fragmented+0x190>)
 80132a6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80132aa:	4630      	mov	r0, r6
 80132ac:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80132b0:	462a      	mov	r2, r5
 80132b2:	f7f9 fb43 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 80132b6:	4620      	mov	r0, r4
 80132b8:	b011      	add	sp, #68	@ 0x44
 80132ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132be:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80132c0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80132c2:	4628      	mov	r0, r5
 80132c4:	4798      	blx	r3
 80132c6:	b920      	cbnz	r0, 80132d2 <uxr_prepare_output_stream_fragmented+0x14e>
 80132c8:	2400      	movs	r4, #0
 80132ca:	4620      	mov	r0, r4
 80132cc:	b011      	add	sp, #68	@ 0x44
 80132ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132d2:	4620      	mov	r0, r4
 80132d4:	f005 fffe 	bl	80192d4 <get_available_free_slots>
 80132d8:	2800      	cmp	r0, #0
 80132da:	f47f af6d 	bne.w	80131b8 <uxr_prepare_output_stream_fragmented+0x34>
 80132de:	e7f3      	b.n	80132c8 <uxr_prepare_output_stream_fragmented+0x144>
 80132e0:	4638      	mov	r0, r7
 80132e2:	2101      	movs	r1, #1
 80132e4:	f006 f816 	bl	8019314 <uxr_seq_num_add>
 80132e8:	8921      	ldrh	r1, [r4, #8]
 80132ea:	fbb0 f2f1 	udiv	r2, r0, r1
 80132ee:	fb01 0912 	mls	r9, r1, r2, r0
 80132f2:	fa1f f289 	uxth.w	r2, r9
 80132f6:	6863      	ldr	r3, [r4, #4]
 80132f8:	fbb3 f9f1 	udiv	r9, r3, r1
 80132fc:	6823      	ldr	r3, [r4, #0]
 80132fe:	fb02 f909 	mul.w	r9, r2, r9
 8013302:	f109 0904 	add.w	r9, r9, #4
 8013306:	4499      	add	r9, r3
 8013308:	4607      	mov	r7, r0
 801330a:	7b23      	ldrb	r3, [r4, #12]
 801330c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013310:	e76b      	b.n	80131ea <uxr_prepare_output_stream_fragmented+0x66>
 8013312:	bf00      	nop
 8013314:	08013011 	.word	0x08013011

08013318 <uxr_serialize_message_header>:
 8013318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801331a:	b083      	sub	sp, #12
 801331c:	4616      	mov	r6, r2
 801331e:	4604      	mov	r4, r0
 8013320:	9301      	str	r3, [sp, #4]
 8013322:	460d      	mov	r5, r1
 8013324:	9f08      	ldr	r7, [sp, #32]
 8013326:	f7f8 f853 	bl	800b3d0 <ucdr_serialize_uint8_t>
 801332a:	4631      	mov	r1, r6
 801332c:	4620      	mov	r0, r4
 801332e:	f7f8 f84f 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013332:	9a01      	ldr	r2, [sp, #4]
 8013334:	2101      	movs	r1, #1
 8013336:	4620      	mov	r0, r4
 8013338:	f7f8 f8f6 	bl	800b528 <ucdr_serialize_endian_uint16_t>
 801333c:	062b      	lsls	r3, r5, #24
 801333e:	d501      	bpl.n	8013344 <uxr_serialize_message_header+0x2c>
 8013340:	b003      	add	sp, #12
 8013342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013344:	2204      	movs	r2, #4
 8013346:	4639      	mov	r1, r7
 8013348:	4620      	mov	r0, r4
 801334a:	b003      	add	sp, #12
 801334c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013350:	f7fd b8ce 	b.w	80104f0 <ucdr_serialize_array_uint8_t>

08013354 <uxr_deserialize_message_header>:
 8013354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013356:	b083      	sub	sp, #12
 8013358:	4616      	mov	r6, r2
 801335a:	4604      	mov	r4, r0
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	460d      	mov	r5, r1
 8013360:	9f08      	ldr	r7, [sp, #32]
 8013362:	f7f8 f84b 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013366:	4631      	mov	r1, r6
 8013368:	4620      	mov	r0, r4
 801336a:	f7f8 f847 	bl	800b3fc <ucdr_deserialize_uint8_t>
 801336e:	9a01      	ldr	r2, [sp, #4]
 8013370:	2101      	movs	r1, #1
 8013372:	4620      	mov	r0, r4
 8013374:	f7f8 f9cc 	bl	800b710 <ucdr_deserialize_endian_uint16_t>
 8013378:	f995 3000 	ldrsb.w	r3, [r5]
 801337c:	2b00      	cmp	r3, #0
 801337e:	da01      	bge.n	8013384 <uxr_deserialize_message_header+0x30>
 8013380:	b003      	add	sp, #12
 8013382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013384:	2204      	movs	r2, #4
 8013386:	4639      	mov	r1, r7
 8013388:	4620      	mov	r0, r4
 801338a:	b003      	add	sp, #12
 801338c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013390:	f7fd b912 	b.w	80105b8 <ucdr_deserialize_array_uint8_t>

08013394 <uxr_serialize_submessage_header>:
 8013394:	b530      	push	{r4, r5, lr}
 8013396:	b083      	sub	sp, #12
 8013398:	4615      	mov	r5, r2
 801339a:	4604      	mov	r4, r0
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	f7f8 f817 	bl	800b3d0 <ucdr_serialize_uint8_t>
 80133a2:	4629      	mov	r1, r5
 80133a4:	4620      	mov	r0, r4
 80133a6:	f7f8 f813 	bl	800b3d0 <ucdr_serialize_uint8_t>
 80133aa:	9a01      	ldr	r2, [sp, #4]
 80133ac:	2101      	movs	r1, #1
 80133ae:	4620      	mov	r0, r4
 80133b0:	b003      	add	sp, #12
 80133b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133b6:	f7f8 b8b7 	b.w	800b528 <ucdr_serialize_endian_uint16_t>
 80133ba:	bf00      	nop

080133bc <uxr_deserialize_submessage_header>:
 80133bc:	b530      	push	{r4, r5, lr}
 80133be:	b083      	sub	sp, #12
 80133c0:	4615      	mov	r5, r2
 80133c2:	4604      	mov	r4, r0
 80133c4:	9301      	str	r3, [sp, #4]
 80133c6:	f7f8 f819 	bl	800b3fc <ucdr_deserialize_uint8_t>
 80133ca:	4629      	mov	r1, r5
 80133cc:	4620      	mov	r0, r4
 80133ce:	f7f8 f815 	bl	800b3fc <ucdr_deserialize_uint8_t>
 80133d2:	9a01      	ldr	r2, [sp, #4]
 80133d4:	2101      	movs	r1, #1
 80133d6:	4620      	mov	r0, r4
 80133d8:	b003      	add	sp, #12
 80133da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133de:	f7f8 b997 	b.w	800b710 <ucdr_deserialize_endian_uint16_t>
 80133e2:	bf00      	nop

080133e4 <uxr_serialize_CLIENT_Representation>:
 80133e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133e8:	2204      	movs	r2, #4
 80133ea:	460e      	mov	r6, r1
 80133ec:	4605      	mov	r5, r0
 80133ee:	f7fd f87f 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 80133f2:	2202      	movs	r2, #2
 80133f4:	4607      	mov	r7, r0
 80133f6:	1d31      	adds	r1, r6, #4
 80133f8:	4628      	mov	r0, r5
 80133fa:	f7fd f879 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 80133fe:	4038      	ands	r0, r7
 8013400:	2202      	movs	r2, #2
 8013402:	1db1      	adds	r1, r6, #6
 8013404:	b2c7      	uxtb	r7, r0
 8013406:	4628      	mov	r0, r5
 8013408:	f7fd f872 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 801340c:	2204      	movs	r2, #4
 801340e:	4007      	ands	r7, r0
 8013410:	f106 0108 	add.w	r1, r6, #8
 8013414:	4628      	mov	r0, r5
 8013416:	f7fd f86b 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 801341a:	7b31      	ldrb	r1, [r6, #12]
 801341c:	4007      	ands	r7, r0
 801341e:	4628      	mov	r0, r5
 8013420:	f7f7 ffd6 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013424:	7b71      	ldrb	r1, [r6, #13]
 8013426:	4007      	ands	r7, r0
 8013428:	4628      	mov	r0, r5
 801342a:	f7f7 ffa3 	bl	800b374 <ucdr_serialize_bool>
 801342e:	7b73      	ldrb	r3, [r6, #13]
 8013430:	ea07 0800 	and.w	r8, r7, r0
 8013434:	b93b      	cbnz	r3, 8013446 <uxr_serialize_CLIENT_Representation+0x62>
 8013436:	8bb1      	ldrh	r1, [r6, #28]
 8013438:	4628      	mov	r0, r5
 801343a:	f7f7 fff5 	bl	800b428 <ucdr_serialize_uint16_t>
 801343e:	ea08 0000 	and.w	r0, r8, r0
 8013442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013446:	6931      	ldr	r1, [r6, #16]
 8013448:	4628      	mov	r0, r5
 801344a:	f7f8 f9d7 	bl	800b7fc <ucdr_serialize_uint32_t>
 801344e:	6933      	ldr	r3, [r6, #16]
 8013450:	b1e3      	cbz	r3, 801348c <uxr_serialize_CLIENT_Representation+0xa8>
 8013452:	b1c0      	cbz	r0, 8013486 <uxr_serialize_CLIENT_Representation+0xa2>
 8013454:	4637      	mov	r7, r6
 8013456:	f04f 0900 	mov.w	r9, #0
 801345a:	e001      	b.n	8013460 <uxr_serialize_CLIENT_Representation+0x7c>
 801345c:	3708      	adds	r7, #8
 801345e:	b194      	cbz	r4, 8013486 <uxr_serialize_CLIENT_Representation+0xa2>
 8013460:	6979      	ldr	r1, [r7, #20]
 8013462:	4628      	mov	r0, r5
 8013464:	f005 f9f6 	bl	8018854 <ucdr_serialize_string>
 8013468:	69b9      	ldr	r1, [r7, #24]
 801346a:	4604      	mov	r4, r0
 801346c:	4628      	mov	r0, r5
 801346e:	f005 f9f1 	bl	8018854 <ucdr_serialize_string>
 8013472:	6933      	ldr	r3, [r6, #16]
 8013474:	f109 0901 	add.w	r9, r9, #1
 8013478:	4004      	ands	r4, r0
 801347a:	4599      	cmp	r9, r3
 801347c:	b2e4      	uxtb	r4, r4
 801347e:	d3ed      	bcc.n	801345c <uxr_serialize_CLIENT_Representation+0x78>
 8013480:	ea08 0804 	and.w	r8, r8, r4
 8013484:	e7d7      	b.n	8013436 <uxr_serialize_CLIENT_Representation+0x52>
 8013486:	f04f 0800 	mov.w	r8, #0
 801348a:	e7d4      	b.n	8013436 <uxr_serialize_CLIENT_Representation+0x52>
 801348c:	ea08 0800 	and.w	r8, r8, r0
 8013490:	e7d1      	b.n	8013436 <uxr_serialize_CLIENT_Representation+0x52>
 8013492:	bf00      	nop

08013494 <uxr_deserialize_CLIENT_Representation>:
 8013494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013498:	2204      	movs	r2, #4
 801349a:	460c      	mov	r4, r1
 801349c:	4605      	mov	r5, r0
 801349e:	f7fd f88b 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 80134a2:	2202      	movs	r2, #2
 80134a4:	4607      	mov	r7, r0
 80134a6:	1d21      	adds	r1, r4, #4
 80134a8:	4628      	mov	r0, r5
 80134aa:	f7fd f885 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 80134ae:	4038      	ands	r0, r7
 80134b0:	2202      	movs	r2, #2
 80134b2:	1da1      	adds	r1, r4, #6
 80134b4:	b2c6      	uxtb	r6, r0
 80134b6:	4628      	mov	r0, r5
 80134b8:	f7fd f87e 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 80134bc:	2204      	movs	r2, #4
 80134be:	4006      	ands	r6, r0
 80134c0:	f104 0108 	add.w	r1, r4, #8
 80134c4:	4628      	mov	r0, r5
 80134c6:	f7fd f877 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 80134ca:	f104 010c 	add.w	r1, r4, #12
 80134ce:	4006      	ands	r6, r0
 80134d0:	4628      	mov	r0, r5
 80134d2:	f7f7 ff93 	bl	800b3fc <ucdr_deserialize_uint8_t>
 80134d6:	f104 010d 	add.w	r1, r4, #13
 80134da:	ea06 0700 	and.w	r7, r6, r0
 80134de:	4628      	mov	r0, r5
 80134e0:	f7f7 ff5e 	bl	800b3a0 <ucdr_deserialize_bool>
 80134e4:	7b63      	ldrb	r3, [r4, #13]
 80134e6:	4007      	ands	r7, r0
 80134e8:	b93b      	cbnz	r3, 80134fa <uxr_deserialize_CLIENT_Representation+0x66>
 80134ea:	f104 011c 	add.w	r1, r4, #28
 80134ee:	4628      	mov	r0, r5
 80134f0:	f7f8 f89a 	bl	800b628 <ucdr_deserialize_uint16_t>
 80134f4:	4038      	ands	r0, r7
 80134f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fa:	f104 0110 	add.w	r1, r4, #16
 80134fe:	4628      	mov	r0, r5
 8013500:	f7f8 faac 	bl	800ba5c <ucdr_deserialize_uint32_t>
 8013504:	6923      	ldr	r3, [r4, #16]
 8013506:	2b01      	cmp	r3, #1
 8013508:	d903      	bls.n	8013512 <uxr_deserialize_CLIENT_Representation+0x7e>
 801350a:	2301      	movs	r3, #1
 801350c:	75ab      	strb	r3, [r5, #22]
 801350e:	2700      	movs	r7, #0
 8013510:	e7eb      	b.n	80134ea <uxr_deserialize_CLIENT_Representation+0x56>
 8013512:	b30b      	cbz	r3, 8013558 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013514:	2800      	cmp	r0, #0
 8013516:	d0fa      	beq.n	801350e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013518:	46a0      	mov	r8, r4
 801351a:	f04f 0900 	mov.w	r9, #0
 801351e:	e001      	b.n	8013524 <uxr_deserialize_CLIENT_Representation+0x90>
 8013520:	2e00      	cmp	r6, #0
 8013522:	d0f4      	beq.n	801350e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013524:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013528:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801352c:	4628      	mov	r0, r5
 801352e:	f005 f9a1 	bl	8018874 <ucdr_deserialize_string>
 8013532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013536:	4606      	mov	r6, r0
 8013538:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801353c:	4628      	mov	r0, r5
 801353e:	f005 f999 	bl	8018874 <ucdr_deserialize_string>
 8013542:	6923      	ldr	r3, [r4, #16]
 8013544:	f109 0901 	add.w	r9, r9, #1
 8013548:	4006      	ands	r6, r0
 801354a:	4599      	cmp	r9, r3
 801354c:	f108 0808 	add.w	r8, r8, #8
 8013550:	b2f6      	uxtb	r6, r6
 8013552:	d3e5      	bcc.n	8013520 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013554:	4037      	ands	r7, r6
 8013556:	e7c8      	b.n	80134ea <uxr_deserialize_CLIENT_Representation+0x56>
 8013558:	4007      	ands	r7, r0
 801355a:	e7c6      	b.n	80134ea <uxr_deserialize_CLIENT_Representation+0x56>

0801355c <uxr_serialize_AGENT_Representation>:
 801355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013560:	2204      	movs	r2, #4
 8013562:	460f      	mov	r7, r1
 8013564:	4605      	mov	r5, r0
 8013566:	f7fc ffc3 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 801356a:	2202      	movs	r2, #2
 801356c:	4604      	mov	r4, r0
 801356e:	1d39      	adds	r1, r7, #4
 8013570:	4628      	mov	r0, r5
 8013572:	f7fc ffbd 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013576:	4020      	ands	r0, r4
 8013578:	2202      	movs	r2, #2
 801357a:	1db9      	adds	r1, r7, #6
 801357c:	b2c4      	uxtb	r4, r0
 801357e:	4628      	mov	r0, r5
 8013580:	f7fc ffb6 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013584:	7a39      	ldrb	r1, [r7, #8]
 8013586:	4004      	ands	r4, r0
 8013588:	4628      	mov	r0, r5
 801358a:	f7f7 fef3 	bl	800b374 <ucdr_serialize_bool>
 801358e:	7a3b      	ldrb	r3, [r7, #8]
 8013590:	ea00 0804 	and.w	r8, r0, r4
 8013594:	b913      	cbnz	r3, 801359c <uxr_serialize_AGENT_Representation+0x40>
 8013596:	4640      	mov	r0, r8
 8013598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801359c:	68f9      	ldr	r1, [r7, #12]
 801359e:	4628      	mov	r0, r5
 80135a0:	f7f8 f92c 	bl	800b7fc <ucdr_serialize_uint32_t>
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	b303      	cbz	r3, 80135ea <uxr_serialize_AGENT_Representation+0x8e>
 80135a8:	b1d0      	cbz	r0, 80135e0 <uxr_serialize_AGENT_Representation+0x84>
 80135aa:	463e      	mov	r6, r7
 80135ac:	f04f 0900 	mov.w	r9, #0
 80135b0:	e001      	b.n	80135b6 <uxr_serialize_AGENT_Representation+0x5a>
 80135b2:	3608      	adds	r6, #8
 80135b4:	b1a4      	cbz	r4, 80135e0 <uxr_serialize_AGENT_Representation+0x84>
 80135b6:	6931      	ldr	r1, [r6, #16]
 80135b8:	4628      	mov	r0, r5
 80135ba:	f005 f94b 	bl	8018854 <ucdr_serialize_string>
 80135be:	6971      	ldr	r1, [r6, #20]
 80135c0:	4604      	mov	r4, r0
 80135c2:	4628      	mov	r0, r5
 80135c4:	f005 f946 	bl	8018854 <ucdr_serialize_string>
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f109 0901 	add.w	r9, r9, #1
 80135ce:	4004      	ands	r4, r0
 80135d0:	4599      	cmp	r9, r3
 80135d2:	b2e4      	uxtb	r4, r4
 80135d4:	d3ed      	bcc.n	80135b2 <uxr_serialize_AGENT_Representation+0x56>
 80135d6:	ea08 0804 	and.w	r8, r8, r4
 80135da:	4640      	mov	r0, r8
 80135dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135e0:	f04f 0800 	mov.w	r8, #0
 80135e4:	4640      	mov	r0, r8
 80135e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ea:	ea08 0800 	and.w	r8, r8, r0
 80135ee:	e7d2      	b.n	8013596 <uxr_serialize_AGENT_Representation+0x3a>

080135f0 <uxr_serialize_DATAWRITER_Representation>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	460d      	mov	r5, r1
 80135f4:	7809      	ldrb	r1, [r1, #0]
 80135f6:	4606      	mov	r6, r0
 80135f8:	f7f7 feea 	bl	800b3d0 <ucdr_serialize_uint8_t>
 80135fc:	4604      	mov	r4, r0
 80135fe:	b130      	cbz	r0, 801360e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013600:	782b      	ldrb	r3, [r5, #0]
 8013602:	2b02      	cmp	r3, #2
 8013604:	d00c      	beq.n	8013620 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013606:	2b03      	cmp	r3, #3
 8013608:	d010      	beq.n	801362c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801360a:	2b01      	cmp	r3, #1
 801360c:	d008      	beq.n	8013620 <uxr_serialize_DATAWRITER_Representation+0x30>
 801360e:	2202      	movs	r2, #2
 8013610:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013614:	4630      	mov	r0, r6
 8013616:	f7fc ff6b 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 801361a:	4020      	ands	r0, r4
 801361c:	b2c0      	uxtb	r0, r0
 801361e:	bd70      	pop	{r4, r5, r6, pc}
 8013620:	6869      	ldr	r1, [r5, #4]
 8013622:	4630      	mov	r0, r6
 8013624:	f005 f916 	bl	8018854 <ucdr_serialize_string>
 8013628:	4604      	mov	r4, r0
 801362a:	e7f0      	b.n	801360e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801362c:	4629      	mov	r1, r5
 801362e:	4630      	mov	r0, r6
 8013630:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013634:	3104      	adds	r1, #4
 8013636:	f7fd f9a3 	bl	8010980 <ucdr_serialize_sequence_uint8_t>
 801363a:	4604      	mov	r4, r0
 801363c:	e7e7      	b.n	801360e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801363e:	bf00      	nop

08013640 <uxr_serialize_ObjectVariant.part.0>:
 8013640:	b570      	push	{r4, r5, r6, lr}
 8013642:	780b      	ldrb	r3, [r1, #0]
 8013644:	3b01      	subs	r3, #1
 8013646:	460c      	mov	r4, r1
 8013648:	4605      	mov	r5, r0
 801364a:	2b0d      	cmp	r3, #13
 801364c:	d854      	bhi.n	80136f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801364e:	e8df f003 	tbb	[pc, r3]
 8013652:	0730      	.short	0x0730
 8013654:	07071b1b 	.word	0x07071b1b
 8013658:	0c530707 	.word	0x0c530707
 801365c:	494e0c0c 	.word	0x494e0c0c
 8013660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013664:	3104      	adds	r1, #4
 8013666:	f7ff bfc3 	b.w	80135f0 <uxr_serialize_DATAWRITER_Representation>
 801366a:	7909      	ldrb	r1, [r1, #4]
 801366c:	f7f7 feb0 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013670:	b1e8      	cbz	r0, 80136ae <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013672:	7923      	ldrb	r3, [r4, #4]
 8013674:	2b01      	cmp	r3, #1
 8013676:	d001      	beq.n	801367c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013678:	2b02      	cmp	r3, #2
 801367a:	d13d      	bne.n	80136f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801367c:	68a1      	ldr	r1, [r4, #8]
 801367e:	4628      	mov	r0, r5
 8013680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013684:	f005 b8e6 	b.w	8018854 <ucdr_serialize_string>
 8013688:	7909      	ldrb	r1, [r1, #4]
 801368a:	f7f7 fea1 	bl	800b3d0 <ucdr_serialize_uint8_t>
 801368e:	4606      	mov	r6, r0
 8013690:	b120      	cbz	r0, 801369c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013692:	7923      	ldrb	r3, [r4, #4]
 8013694:	2b02      	cmp	r3, #2
 8013696:	d039      	beq.n	801370c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013698:	2b03      	cmp	r3, #3
 801369a:	d02f      	beq.n	80136fc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801369c:	2202      	movs	r2, #2
 801369e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80136a2:	4628      	mov	r0, r5
 80136a4:	f7fc ff24 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 80136a8:	4030      	ands	r0, r6
 80136aa:	b2c0      	uxtb	r0, r0
 80136ac:	bd70      	pop	{r4, r5, r6, pc}
 80136ae:	2000      	movs	r0, #0
 80136b0:	bd70      	pop	{r4, r5, r6, pc}
 80136b2:	7909      	ldrb	r1, [r1, #4]
 80136b4:	f7f7 fe8c 	bl	800b3d0 <ucdr_serialize_uint8_t>
 80136b8:	4606      	mov	r6, r0
 80136ba:	b158      	cbz	r0, 80136d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80136bc:	7923      	ldrb	r3, [r4, #4]
 80136be:	2b02      	cmp	r3, #2
 80136c0:	d003      	beq.n	80136ca <uxr_serialize_ObjectVariant.part.0+0x8a>
 80136c2:	2b03      	cmp	r3, #3
 80136c4:	d028      	beq.n	8013718 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80136c6:	2b01      	cmp	r3, #1
 80136c8:	d104      	bne.n	80136d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80136ca:	68a1      	ldr	r1, [r4, #8]
 80136cc:	4628      	mov	r0, r5
 80136ce:	f005 f8c1 	bl	8018854 <ucdr_serialize_string>
 80136d2:	4606      	mov	r6, r0
 80136d4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80136d8:	4628      	mov	r0, r5
 80136da:	f7f8 fbb5 	bl	800be48 <ucdr_serialize_int16_t>
 80136de:	4030      	ands	r0, r6
 80136e0:	b2c0      	uxtb	r0, r0
 80136e2:	bd70      	pop	{r4, r5, r6, pc}
 80136e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136e8:	3104      	adds	r1, #4
 80136ea:	f7ff be7b 	b.w	80133e4 <uxr_serialize_CLIENT_Representation>
 80136ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136f2:	3104      	adds	r1, #4
 80136f4:	f7ff bf32 	b.w	801355c <uxr_serialize_AGENT_Representation>
 80136f8:	2001      	movs	r0, #1
 80136fa:	bd70      	pop	{r4, r5, r6, pc}
 80136fc:	68a2      	ldr	r2, [r4, #8]
 80136fe:	f104 010c 	add.w	r1, r4, #12
 8013702:	4628      	mov	r0, r5
 8013704:	f7fd f93c 	bl	8010980 <ucdr_serialize_sequence_uint8_t>
 8013708:	4606      	mov	r6, r0
 801370a:	e7c7      	b.n	801369c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801370c:	68a1      	ldr	r1, [r4, #8]
 801370e:	4628      	mov	r0, r5
 8013710:	f005 f8a0 	bl	8018854 <ucdr_serialize_string>
 8013714:	4606      	mov	r6, r0
 8013716:	e7c1      	b.n	801369c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013718:	68a2      	ldr	r2, [r4, #8]
 801371a:	f104 010c 	add.w	r1, r4, #12
 801371e:	4628      	mov	r0, r5
 8013720:	f7fd f92e 	bl	8010980 <ucdr_serialize_sequence_uint8_t>
 8013724:	4606      	mov	r6, r0
 8013726:	e7d5      	b.n	80136d4 <uxr_serialize_ObjectVariant.part.0+0x94>

08013728 <uxr_deserialize_DATAWRITER_Representation>:
 8013728:	b570      	push	{r4, r5, r6, lr}
 801372a:	4606      	mov	r6, r0
 801372c:	460d      	mov	r5, r1
 801372e:	f7f7 fe65 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013732:	4604      	mov	r4, r0
 8013734:	b130      	cbz	r0, 8013744 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013736:	782b      	ldrb	r3, [r5, #0]
 8013738:	2b02      	cmp	r3, #2
 801373a:	d00c      	beq.n	8013756 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801373c:	2b03      	cmp	r3, #3
 801373e:	d012      	beq.n	8013766 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013740:	2b01      	cmp	r3, #1
 8013742:	d008      	beq.n	8013756 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013744:	2202      	movs	r2, #2
 8013746:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801374a:	4630      	mov	r0, r6
 801374c:	f7fc ff34 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013750:	4020      	ands	r0, r4
 8013752:	b2c0      	uxtb	r0, r0
 8013754:	bd70      	pop	{r4, r5, r6, pc}
 8013756:	6869      	ldr	r1, [r5, #4]
 8013758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801375c:	4630      	mov	r0, r6
 801375e:	f005 f889 	bl	8018874 <ucdr_deserialize_string>
 8013762:	4604      	mov	r4, r0
 8013764:	e7ee      	b.n	8013744 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013766:	1d2b      	adds	r3, r5, #4
 8013768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801376c:	f105 0108 	add.w	r1, r5, #8
 8013770:	4630      	mov	r0, r6
 8013772:	f7fd f917 	bl	80109a4 <ucdr_deserialize_sequence_uint8_t>
 8013776:	4604      	mov	r4, r0
 8013778:	e7e4      	b.n	8013744 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801377a:	bf00      	nop

0801377c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	460d      	mov	r5, r1
 8013780:	7809      	ldrb	r1, [r1, #0]
 8013782:	4606      	mov	r6, r0
 8013784:	f7f7 fdf6 	bl	800b374 <ucdr_serialize_bool>
 8013788:	782b      	ldrb	r3, [r5, #0]
 801378a:	4604      	mov	r4, r0
 801378c:	b94b      	cbnz	r3, 80137a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801378e:	7a29      	ldrb	r1, [r5, #8]
 8013790:	4630      	mov	r0, r6
 8013792:	f7f7 fdef 	bl	800b374 <ucdr_serialize_bool>
 8013796:	7a2b      	ldrb	r3, [r5, #8]
 8013798:	4004      	ands	r4, r0
 801379a:	b2e4      	uxtb	r4, r4
 801379c:	b943      	cbnz	r3, 80137b0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801379e:	4620      	mov	r0, r4
 80137a0:	bd70      	pop	{r4, r5, r6, pc}
 80137a2:	6869      	ldr	r1, [r5, #4]
 80137a4:	4630      	mov	r0, r6
 80137a6:	f005 f855 	bl	8018854 <ucdr_serialize_string>
 80137aa:	4004      	ands	r4, r0
 80137ac:	b2e4      	uxtb	r4, r4
 80137ae:	e7ee      	b.n	801378e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80137b0:	68e9      	ldr	r1, [r5, #12]
 80137b2:	4630      	mov	r0, r6
 80137b4:	f005 f84e 	bl	8018854 <ucdr_serialize_string>
 80137b8:	4004      	ands	r4, r0
 80137ba:	4620      	mov	r0, r4
 80137bc:	bd70      	pop	{r4, r5, r6, pc}
 80137be:	bf00      	nop

080137c0 <uxr_serialize_OBJK_Topic_Binary>:
 80137c0:	b570      	push	{r4, r5, r6, lr}
 80137c2:	460d      	mov	r5, r1
 80137c4:	6809      	ldr	r1, [r1, #0]
 80137c6:	4606      	mov	r6, r0
 80137c8:	f005 f844 	bl	8018854 <ucdr_serialize_string>
 80137cc:	7929      	ldrb	r1, [r5, #4]
 80137ce:	4604      	mov	r4, r0
 80137d0:	4630      	mov	r0, r6
 80137d2:	f7f7 fdcf 	bl	800b374 <ucdr_serialize_bool>
 80137d6:	792b      	ldrb	r3, [r5, #4]
 80137d8:	4004      	ands	r4, r0
 80137da:	b2e4      	uxtb	r4, r4
 80137dc:	b943      	cbnz	r3, 80137f0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80137de:	7b29      	ldrb	r1, [r5, #12]
 80137e0:	4630      	mov	r0, r6
 80137e2:	f7f7 fdc7 	bl	800b374 <ucdr_serialize_bool>
 80137e6:	7b2b      	ldrb	r3, [r5, #12]
 80137e8:	4004      	ands	r4, r0
 80137ea:	b93b      	cbnz	r3, 80137fc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80137ec:	4620      	mov	r0, r4
 80137ee:	bd70      	pop	{r4, r5, r6, pc}
 80137f0:	68a9      	ldr	r1, [r5, #8]
 80137f2:	4630      	mov	r0, r6
 80137f4:	f005 f82e 	bl	8018854 <ucdr_serialize_string>
 80137f8:	4004      	ands	r4, r0
 80137fa:	e7f0      	b.n	80137de <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80137fc:	6929      	ldr	r1, [r5, #16]
 80137fe:	4630      	mov	r0, r6
 8013800:	f005 f828 	bl	8018854 <ucdr_serialize_string>
 8013804:	4004      	ands	r4, r0
 8013806:	b2e4      	uxtb	r4, r4
 8013808:	4620      	mov	r0, r4
 801380a:	bd70      	pop	{r4, r5, r6, pc}

0801380c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013810:	460c      	mov	r4, r1
 8013812:	7809      	ldrb	r1, [r1, #0]
 8013814:	4606      	mov	r6, r0
 8013816:	f7f7 fdad 	bl	800b374 <ucdr_serialize_bool>
 801381a:	7823      	ldrb	r3, [r4, #0]
 801381c:	4605      	mov	r5, r0
 801381e:	b96b      	cbnz	r3, 801383c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013820:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013824:	4630      	mov	r0, r6
 8013826:	f7f7 fda5 	bl	800b374 <ucdr_serialize_bool>
 801382a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801382e:	4005      	ands	r5, r0
 8013830:	b2ed      	uxtb	r5, r5
 8013832:	2b00      	cmp	r3, #0
 8013834:	d169      	bne.n	801390a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013836:	4628      	mov	r0, r5
 8013838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801383c:	6861      	ldr	r1, [r4, #4]
 801383e:	4630      	mov	r0, r6
 8013840:	f7f7 ffdc 	bl	800b7fc <ucdr_serialize_uint32_t>
 8013844:	6863      	ldr	r3, [r4, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d06b      	beq.n	8013922 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801384a:	2800      	cmp	r0, #0
 801384c:	d067      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801384e:	68a1      	ldr	r1, [r4, #8]
 8013850:	4630      	mov	r0, r6
 8013852:	f004 ffff 	bl	8018854 <ucdr_serialize_string>
 8013856:	6863      	ldr	r3, [r4, #4]
 8013858:	2b01      	cmp	r3, #1
 801385a:	d953      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801385c:	2800      	cmp	r0, #0
 801385e:	d05e      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013860:	68e1      	ldr	r1, [r4, #12]
 8013862:	4630      	mov	r0, r6
 8013864:	f004 fff6 	bl	8018854 <ucdr_serialize_string>
 8013868:	6863      	ldr	r3, [r4, #4]
 801386a:	2b02      	cmp	r3, #2
 801386c:	d94a      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801386e:	2800      	cmp	r0, #0
 8013870:	d055      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013872:	6921      	ldr	r1, [r4, #16]
 8013874:	4630      	mov	r0, r6
 8013876:	f004 ffed 	bl	8018854 <ucdr_serialize_string>
 801387a:	6863      	ldr	r3, [r4, #4]
 801387c:	2b03      	cmp	r3, #3
 801387e:	d941      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013880:	2800      	cmp	r0, #0
 8013882:	d04c      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013884:	6961      	ldr	r1, [r4, #20]
 8013886:	4630      	mov	r0, r6
 8013888:	f004 ffe4 	bl	8018854 <ucdr_serialize_string>
 801388c:	6863      	ldr	r3, [r4, #4]
 801388e:	2b04      	cmp	r3, #4
 8013890:	d938      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013892:	2800      	cmp	r0, #0
 8013894:	d043      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013896:	69a1      	ldr	r1, [r4, #24]
 8013898:	4630      	mov	r0, r6
 801389a:	f004 ffdb 	bl	8018854 <ucdr_serialize_string>
 801389e:	6863      	ldr	r3, [r4, #4]
 80138a0:	2b05      	cmp	r3, #5
 80138a2:	d92f      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138a4:	2800      	cmp	r0, #0
 80138a6:	d03a      	beq.n	801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138a8:	69e1      	ldr	r1, [r4, #28]
 80138aa:	4630      	mov	r0, r6
 80138ac:	f004 ffd2 	bl	8018854 <ucdr_serialize_string>
 80138b0:	6863      	ldr	r3, [r4, #4]
 80138b2:	2b06      	cmp	r3, #6
 80138b4:	d926      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138b6:	b390      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138b8:	6a21      	ldr	r1, [r4, #32]
 80138ba:	4630      	mov	r0, r6
 80138bc:	f004 ffca 	bl	8018854 <ucdr_serialize_string>
 80138c0:	6863      	ldr	r3, [r4, #4]
 80138c2:	2b07      	cmp	r3, #7
 80138c4:	d91e      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138c6:	b350      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80138ca:	4630      	mov	r0, r6
 80138cc:	f004 ffc2 	bl	8018854 <ucdr_serialize_string>
 80138d0:	6863      	ldr	r3, [r4, #4]
 80138d2:	2b08      	cmp	r3, #8
 80138d4:	d916      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138d6:	b310      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138d8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80138da:	4630      	mov	r0, r6
 80138dc:	f004 ffba 	bl	8018854 <ucdr_serialize_string>
 80138e0:	6863      	ldr	r3, [r4, #4]
 80138e2:	2b09      	cmp	r3, #9
 80138e4:	d90e      	bls.n	8013904 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80138e6:	b1d0      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138e8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80138ec:	2709      	movs	r7, #9
 80138ee:	e000      	b.n	80138f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80138f0:	b1a8      	cbz	r0, 801391e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80138f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80138f6:	4630      	mov	r0, r6
 80138f8:	f004 ffac 	bl	8018854 <ucdr_serialize_string>
 80138fc:	6862      	ldr	r2, [r4, #4]
 80138fe:	3701      	adds	r7, #1
 8013900:	4297      	cmp	r7, r2
 8013902:	d3f5      	bcc.n	80138f0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013904:	4005      	ands	r5, r0
 8013906:	b2ed      	uxtb	r5, r5
 8013908:	e78a      	b.n	8013820 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801390a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801390c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013910:	4630      	mov	r0, r6
 8013912:	f7fd f835 	bl	8010980 <ucdr_serialize_sequence_uint8_t>
 8013916:	4005      	ands	r5, r0
 8013918:	4628      	mov	r0, r5
 801391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801391e:	2500      	movs	r5, #0
 8013920:	e77e      	b.n	8013820 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013922:	4028      	ands	r0, r5
 8013924:	b2c5      	uxtb	r5, r0
 8013926:	e77b      	b.n	8013820 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013928 <uxr_serialize_OBJK_Publisher_Binary>:
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	460d      	mov	r5, r1
 801392c:	7809      	ldrb	r1, [r1, #0]
 801392e:	4606      	mov	r6, r0
 8013930:	f7f7 fd20 	bl	800b374 <ucdr_serialize_bool>
 8013934:	782b      	ldrb	r3, [r5, #0]
 8013936:	4604      	mov	r4, r0
 8013938:	b94b      	cbnz	r3, 801394e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801393a:	7a29      	ldrb	r1, [r5, #8]
 801393c:	4630      	mov	r0, r6
 801393e:	f7f7 fd19 	bl	800b374 <ucdr_serialize_bool>
 8013942:	7a2b      	ldrb	r3, [r5, #8]
 8013944:	4004      	ands	r4, r0
 8013946:	b2e4      	uxtb	r4, r4
 8013948:	b943      	cbnz	r3, 801395c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801394a:	4620      	mov	r0, r4
 801394c:	bd70      	pop	{r4, r5, r6, pc}
 801394e:	6869      	ldr	r1, [r5, #4]
 8013950:	4630      	mov	r0, r6
 8013952:	f004 ff7f 	bl	8018854 <ucdr_serialize_string>
 8013956:	4004      	ands	r4, r0
 8013958:	b2e4      	uxtb	r4, r4
 801395a:	e7ee      	b.n	801393a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801395c:	f105 010c 	add.w	r1, r5, #12
 8013960:	4630      	mov	r0, r6
 8013962:	f7ff ff53 	bl	801380c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013966:	4004      	ands	r4, r0
 8013968:	4620      	mov	r0, r4
 801396a:	bd70      	pop	{r4, r5, r6, pc}

0801396c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801396c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013970:	4688      	mov	r8, r1
 8013972:	8809      	ldrh	r1, [r1, #0]
 8013974:	4681      	mov	r9, r0
 8013976:	f7f7 fd57 	bl	800b428 <ucdr_serialize_uint16_t>
 801397a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801397e:	4606      	mov	r6, r0
 8013980:	4648      	mov	r0, r9
 8013982:	f7f7 fcf7 	bl	800b374 <ucdr_serialize_bool>
 8013986:	f898 3002 	ldrb.w	r3, [r8, #2]
 801398a:	4006      	ands	r6, r0
 801398c:	b2f5      	uxtb	r5, r6
 801398e:	b9eb      	cbnz	r3, 80139cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013990:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013994:	4648      	mov	r0, r9
 8013996:	f7f7 fced 	bl	800b374 <ucdr_serialize_bool>
 801399a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801399e:	4005      	ands	r5, r0
 80139a0:	bb7b      	cbnz	r3, 8013a02 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80139a2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80139a6:	4648      	mov	r0, r9
 80139a8:	f7f7 fce4 	bl	800b374 <ucdr_serialize_bool>
 80139ac:	f898 300c 	ldrb.w	r3, [r8, #12]
 80139b0:	4005      	ands	r5, r0
 80139b2:	b9f3      	cbnz	r3, 80139f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80139b4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80139b8:	4648      	mov	r0, r9
 80139ba:	f7f7 fcdb 	bl	800b374 <ucdr_serialize_bool>
 80139be:	f898 3014 	ldrb.w	r3, [r8, #20]
 80139c2:	4005      	ands	r5, r0
 80139c4:	b94b      	cbnz	r3, 80139da <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80139c6:	4628      	mov	r0, r5
 80139c8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80139cc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80139d0:	4648      	mov	r0, r9
 80139d2:	f7f7 fd29 	bl	800b428 <ucdr_serialize_uint16_t>
 80139d6:	4005      	ands	r5, r0
 80139d8:	e7da      	b.n	8013990 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80139da:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80139de:	f108 011c 	add.w	r1, r8, #28
 80139e2:	4648      	mov	r0, r9
 80139e4:	f7fc ffcc 	bl	8010980 <ucdr_serialize_sequence_uint8_t>
 80139e8:	4028      	ands	r0, r5
 80139ea:	b2c5      	uxtb	r5, r0
 80139ec:	4628      	mov	r0, r5
 80139ee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80139f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80139f6:	4648      	mov	r0, r9
 80139f8:	f7f7 ff00 	bl	800b7fc <ucdr_serialize_uint32_t>
 80139fc:	4028      	ands	r0, r5
 80139fe:	b2c5      	uxtb	r5, r0
 8013a00:	e7d8      	b.n	80139b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013a02:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013a06:	4648      	mov	r0, r9
 8013a08:	f7f7 fef8 	bl	800b7fc <ucdr_serialize_uint32_t>
 8013a0c:	4028      	ands	r0, r5
 8013a0e:	b2c5      	uxtb	r5, r0
 8013a10:	e7c7      	b.n	80139a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013a12:	bf00      	nop

08013a14 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a16:	2202      	movs	r2, #2
 8013a18:	460d      	mov	r5, r1
 8013a1a:	4606      	mov	r6, r0
 8013a1c:	f7fc fd68 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013a20:	78a9      	ldrb	r1, [r5, #2]
 8013a22:	4604      	mov	r4, r0
 8013a24:	4630      	mov	r0, r6
 8013a26:	f7f7 fca5 	bl	800b374 <ucdr_serialize_bool>
 8013a2a:	78ab      	ldrb	r3, [r5, #2]
 8013a2c:	4004      	ands	r4, r0
 8013a2e:	b2e4      	uxtb	r4, r4
 8013a30:	b90b      	cbnz	r3, 8013a36 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013a32:	4620      	mov	r0, r4
 8013a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a36:	f105 0108 	add.w	r1, r5, #8
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f7ff ff96 	bl	801396c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013a40:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013a44:	4607      	mov	r7, r0
 8013a46:	4630      	mov	r0, r6
 8013a48:	f7f7 fc94 	bl	800b374 <ucdr_serialize_bool>
 8013a4c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013a50:	4038      	ands	r0, r7
 8013a52:	b2c7      	uxtb	r7, r0
 8013a54:	b913      	cbnz	r3, 8013a5c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013a56:	403c      	ands	r4, r7
 8013a58:	4620      	mov	r0, r4
 8013a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a5c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013a60:	4630      	mov	r0, r6
 8013a62:	f7f8 f921 	bl	800bca8 <ucdr_serialize_uint64_t>
 8013a66:	4007      	ands	r7, r0
 8013a68:	e7f5      	b.n	8013a56 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013a6a:	bf00      	nop

08013a6c <uxr_serialize_OBJK_Replier_Binary>:
 8013a6c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8013a70:	460f      	mov	r7, r1
 8013a72:	6809      	ldr	r1, [r1, #0]
 8013a74:	4680      	mov	r8, r0
 8013a76:	f004 feed 	bl	8018854 <ucdr_serialize_string>
 8013a7a:	6879      	ldr	r1, [r7, #4]
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	4640      	mov	r0, r8
 8013a80:	f004 fee8 	bl	8018854 <ucdr_serialize_string>
 8013a84:	68b9      	ldr	r1, [r7, #8]
 8013a86:	4005      	ands	r5, r0
 8013a88:	4640      	mov	r0, r8
 8013a8a:	f004 fee3 	bl	8018854 <ucdr_serialize_string>
 8013a8e:	b2ec      	uxtb	r4, r5
 8013a90:	4004      	ands	r4, r0
 8013a92:	7b39      	ldrb	r1, [r7, #12]
 8013a94:	4640      	mov	r0, r8
 8013a96:	f7f7 fc6d 	bl	800b374 <ucdr_serialize_bool>
 8013a9a:	7b3b      	ldrb	r3, [r7, #12]
 8013a9c:	4004      	ands	r4, r0
 8013a9e:	b94b      	cbnz	r3, 8013ab4 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8013aa0:	7d39      	ldrb	r1, [r7, #20]
 8013aa2:	4640      	mov	r0, r8
 8013aa4:	f7f7 fc66 	bl	800b374 <ucdr_serialize_bool>
 8013aa8:	7d3b      	ldrb	r3, [r7, #20]
 8013aaa:	4004      	ands	r4, r0
 8013aac:	b943      	cbnz	r3, 8013ac0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8013aae:	4620      	mov	r0, r4
 8013ab0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013ab4:	6939      	ldr	r1, [r7, #16]
 8013ab6:	4640      	mov	r0, r8
 8013ab8:	f004 fecc 	bl	8018854 <ucdr_serialize_string>
 8013abc:	4004      	ands	r4, r0
 8013abe:	e7ef      	b.n	8013aa0 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8013ac0:	69b9      	ldr	r1, [r7, #24]
 8013ac2:	4640      	mov	r0, r8
 8013ac4:	f004 fec6 	bl	8018854 <ucdr_serialize_string>
 8013ac8:	4004      	ands	r4, r0
 8013aca:	b2e4      	uxtb	r4, r4
 8013acc:	4620      	mov	r0, r4
 8013ace:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8013ad2:	bf00      	nop

08013ad4 <uxr_deserialize_ObjectVariant>:
 8013ad4:	b570      	push	{r4, r5, r6, lr}
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	460e      	mov	r6, r1
 8013ada:	f7f7 fc8f 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013ade:	b168      	cbz	r0, 8013afc <uxr_deserialize_ObjectVariant+0x28>
 8013ae0:	7833      	ldrb	r3, [r6, #0]
 8013ae2:	3b01      	subs	r3, #1
 8013ae4:	4604      	mov	r4, r0
 8013ae6:	2b0d      	cmp	r3, #13
 8013ae8:	d809      	bhi.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013aea:	e8df f003 	tbb	[pc, r3]
 8013aee:	0a41      	.short	0x0a41
 8013af0:	0a0a2323 	.word	0x0a0a2323
 8013af4:	10080a0a 	.word	0x10080a0a
 8013af8:	565c1010 	.word	0x565c1010
 8013afc:	2400      	movs	r4, #0
 8013afe:	4620      	mov	r0, r4
 8013b00:	bd70      	pop	{r4, r5, r6, pc}
 8013b02:	1d31      	adds	r1, r6, #4
 8013b04:	4628      	mov	r0, r5
 8013b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b0a:	f7ff be0d 	b.w	8013728 <uxr_deserialize_DATAWRITER_Representation>
 8013b0e:	1d31      	adds	r1, r6, #4
 8013b10:	4628      	mov	r0, r5
 8013b12:	f7f7 fc73 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013b16:	2800      	cmp	r0, #0
 8013b18:	d0f0      	beq.n	8013afc <uxr_deserialize_ObjectVariant+0x28>
 8013b1a:	7933      	ldrb	r3, [r6, #4]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d001      	beq.n	8013b24 <uxr_deserialize_ObjectVariant+0x50>
 8013b20:	2b02      	cmp	r3, #2
 8013b22:	d1ec      	bne.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013b24:	68b1      	ldr	r1, [r6, #8]
 8013b26:	4628      	mov	r0, r5
 8013b28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b30:	f004 bea0 	b.w	8018874 <ucdr_deserialize_string>
 8013b34:	1d31      	adds	r1, r6, #4
 8013b36:	4628      	mov	r0, r5
 8013b38:	f7f7 fc60 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	b170      	cbz	r0, 8013b5e <uxr_deserialize_ObjectVariant+0x8a>
 8013b40:	7933      	ldrb	r3, [r6, #4]
 8013b42:	2b02      	cmp	r3, #2
 8013b44:	d04c      	beq.n	8013be0 <uxr_deserialize_ObjectVariant+0x10c>
 8013b46:	2b03      	cmp	r3, #3
 8013b48:	d109      	bne.n	8013b5e <uxr_deserialize_ObjectVariant+0x8a>
 8013b4a:	f106 0308 	add.w	r3, r6, #8
 8013b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b52:	f106 010c 	add.w	r1, r6, #12
 8013b56:	4628      	mov	r0, r5
 8013b58:	f7fc ff24 	bl	80109a4 <ucdr_deserialize_sequence_uint8_t>
 8013b5c:	4604      	mov	r4, r0
 8013b5e:	2202      	movs	r2, #2
 8013b60:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013b64:	4628      	mov	r0, r5
 8013b66:	f7fc fd27 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013b6a:	4020      	ands	r0, r4
 8013b6c:	b2c4      	uxtb	r4, r0
 8013b6e:	e7c6      	b.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013b70:	1d31      	adds	r1, r6, #4
 8013b72:	4628      	mov	r0, r5
 8013b74:	f7f7 fc42 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013b78:	4604      	mov	r4, r0
 8013b7a:	b130      	cbz	r0, 8013b8a <uxr_deserialize_ObjectVariant+0xb6>
 8013b7c:	7933      	ldrb	r3, [r6, #4]
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d036      	beq.n	8013bf0 <uxr_deserialize_ObjectVariant+0x11c>
 8013b82:	2b03      	cmp	r3, #3
 8013b84:	d03c      	beq.n	8013c00 <uxr_deserialize_ObjectVariant+0x12c>
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d032      	beq.n	8013bf0 <uxr_deserialize_ObjectVariant+0x11c>
 8013b8a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013b8e:	4628      	mov	r0, r5
 8013b90:	f7f8 f9da 	bl	800bf48 <ucdr_deserialize_int16_t>
 8013b94:	4020      	ands	r0, r4
 8013b96:	b2c4      	uxtb	r4, r0
 8013b98:	e7b1      	b.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013b9a:	1d31      	adds	r1, r6, #4
 8013b9c:	4628      	mov	r0, r5
 8013b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ba2:	f7ff bc77 	b.w	8013494 <uxr_deserialize_CLIENT_Representation>
 8013ba6:	2204      	movs	r2, #4
 8013ba8:	18b1      	adds	r1, r6, r2
 8013baa:	4628      	mov	r0, r5
 8013bac:	f7fc fd04 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013bb0:	2202      	movs	r2, #2
 8013bb2:	f106 0108 	add.w	r1, r6, #8
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	4628      	mov	r0, r5
 8013bba:	f7fc fcfd 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013bbe:	2202      	movs	r2, #2
 8013bc0:	4004      	ands	r4, r0
 8013bc2:	f106 010a 	add.w	r1, r6, #10
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	f7fc fcf6 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013bcc:	b2e4      	uxtb	r4, r4
 8013bce:	4603      	mov	r3, r0
 8013bd0:	f106 010c 	add.w	r1, r6, #12
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	401c      	ands	r4, r3
 8013bd8:	f7f7 fbe2 	bl	800b3a0 <ucdr_deserialize_bool>
 8013bdc:	4004      	ands	r4, r0
 8013bde:	e78e      	b.n	8013afe <uxr_deserialize_ObjectVariant+0x2a>
 8013be0:	68b1      	ldr	r1, [r6, #8]
 8013be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013be6:	4628      	mov	r0, r5
 8013be8:	f004 fe44 	bl	8018874 <ucdr_deserialize_string>
 8013bec:	4604      	mov	r4, r0
 8013bee:	e7b6      	b.n	8013b5e <uxr_deserialize_ObjectVariant+0x8a>
 8013bf0:	68b1      	ldr	r1, [r6, #8]
 8013bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f004 fe3c 	bl	8018874 <ucdr_deserialize_string>
 8013bfc:	4604      	mov	r4, r0
 8013bfe:	e7c4      	b.n	8013b8a <uxr_deserialize_ObjectVariant+0xb6>
 8013c00:	f106 0308 	add.w	r3, r6, #8
 8013c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c08:	f106 010c 	add.w	r1, r6, #12
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f7fc fec9 	bl	80109a4 <ucdr_deserialize_sequence_uint8_t>
 8013c12:	4604      	mov	r4, r0
 8013c14:	e7b9      	b.n	8013b8a <uxr_deserialize_ObjectVariant+0xb6>
 8013c16:	bf00      	nop

08013c18 <uxr_deserialize_BaseObjectRequest>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	2202      	movs	r2, #2
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	460e      	mov	r6, r1
 8013c20:	f7fc fcca 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013c24:	2202      	movs	r2, #2
 8013c26:	4604      	mov	r4, r0
 8013c28:	18b1      	adds	r1, r6, r2
 8013c2a:	4628      	mov	r0, r5
 8013c2c:	f7fc fcc4 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013c30:	4020      	ands	r0, r4
 8013c32:	b2c0      	uxtb	r0, r0
 8013c34:	bd70      	pop	{r4, r5, r6, pc}
 8013c36:	bf00      	nop

08013c38 <uxr_serialize_ActivityInfoVariant>:
 8013c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c3c:	460d      	mov	r5, r1
 8013c3e:	7809      	ldrb	r1, [r1, #0]
 8013c40:	4607      	mov	r7, r0
 8013c42:	f7f7 fbc5 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013c46:	4681      	mov	r9, r0
 8013c48:	b138      	cbz	r0, 8013c5a <uxr_serialize_ActivityInfoVariant+0x22>
 8013c4a:	782b      	ldrb	r3, [r5, #0]
 8013c4c:	2b06      	cmp	r3, #6
 8013c4e:	f000 8082 	beq.w	8013d56 <uxr_serialize_ActivityInfoVariant+0x11e>
 8013c52:	2b0d      	cmp	r3, #13
 8013c54:	d016      	beq.n	8013c84 <uxr_serialize_ActivityInfoVariant+0x4c>
 8013c56:	2b05      	cmp	r3, #5
 8013c58:	d002      	beq.n	8013c60 <uxr_serialize_ActivityInfoVariant+0x28>
 8013c5a:	4648      	mov	r0, r9
 8013c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c60:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013c64:	4638      	mov	r0, r7
 8013c66:	f7f8 f8ef 	bl	800be48 <ucdr_serialize_int16_t>
 8013c6a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013c6e:	4681      	mov	r9, r0
 8013c70:	4638      	mov	r0, r7
 8013c72:	f7f8 f819 	bl	800bca8 <ucdr_serialize_uint64_t>
 8013c76:	ea09 0000 	and.w	r0, r9, r0
 8013c7a:	fa5f f980 	uxtb.w	r9, r0
 8013c7e:	4648      	mov	r0, r9
 8013c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c84:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013c88:	4638      	mov	r0, r7
 8013c8a:	f7f8 f8dd 	bl	800be48 <ucdr_serialize_int16_t>
 8013c8e:	68e9      	ldr	r1, [r5, #12]
 8013c90:	4681      	mov	r9, r0
 8013c92:	4638      	mov	r0, r7
 8013c94:	f7f7 fdb2 	bl	800b7fc <ucdr_serialize_uint32_t>
 8013c98:	68eb      	ldr	r3, [r5, #12]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d0eb      	beq.n	8013c76 <uxr_serialize_ActivityInfoVariant+0x3e>
 8013c9e:	b320      	cbz	r0, 8013cea <uxr_serialize_ActivityInfoVariant+0xb2>
 8013ca0:	f105 080c 	add.w	r8, r5, #12
 8013ca4:	2600      	movs	r6, #0
 8013ca6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013caa:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013cae:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8013cb2:	4638      	mov	r0, r7
 8013cb4:	f7f7 fb8c 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013cb8:	2800      	cmp	r0, #0
 8013cba:	d053      	beq.n	8013d64 <uxr_serialize_ActivityInfoVariant+0x12c>
 8013cbc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013cc0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013cc4:	0074      	lsls	r4, r6, #1
 8013cc6:	00c9      	lsls	r1, r1, #3
 8013cc8:	2b03      	cmp	r3, #3
 8013cca:	d854      	bhi.n	8013d76 <uxr_serialize_ActivityInfoVariant+0x13e>
 8013ccc:	e8df f003 	tbb	[pc, r3]
 8013cd0:	02102132 	.word	0x02102132
 8013cd4:	4441      	add	r1, r8
 8013cd6:	4638      	mov	r0, r7
 8013cd8:	6889      	ldr	r1, [r1, #8]
 8013cda:	f004 fdbb 	bl	8018854 <ucdr_serialize_string>
 8013cde:	68ea      	ldr	r2, [r5, #12]
 8013ce0:	3601      	adds	r6, #1
 8013ce2:	4296      	cmp	r6, r2
 8013ce4:	d242      	bcs.n	8013d6c <uxr_serialize_ActivityInfoVariant+0x134>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d1dd      	bne.n	8013ca6 <uxr_serialize_ActivityInfoVariant+0x6e>
 8013cea:	f04f 0900 	mov.w	r9, #0
 8013cee:	e7b4      	b.n	8013c5a <uxr_serialize_ActivityInfoVariant+0x22>
 8013cf0:	3108      	adds	r1, #8
 8013cf2:	4441      	add	r1, r8
 8013cf4:	2210      	movs	r2, #16
 8013cf6:	4638      	mov	r0, r7
 8013cf8:	f7fc fbfa 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013cfc:	4434      	add	r4, r6
 8013cfe:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013d02:	4604      	mov	r4, r0
 8013d04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013d06:	4638      	mov	r0, r7
 8013d08:	f7f7 fd78 	bl	800b7fc <ucdr_serialize_uint32_t>
 8013d0c:	4020      	ands	r0, r4
 8013d0e:	b2c0      	uxtb	r0, r0
 8013d10:	e7e5      	b.n	8013cde <uxr_serialize_ActivityInfoVariant+0xa6>
 8013d12:	3108      	adds	r1, #8
 8013d14:	4441      	add	r1, r8
 8013d16:	2204      	movs	r2, #4
 8013d18:	4638      	mov	r0, r7
 8013d1a:	f7fc fbe9 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013d1e:	4434      	add	r4, r6
 8013d20:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013d24:	4604      	mov	r4, r0
 8013d26:	8b19      	ldrh	r1, [r3, #24]
 8013d28:	4638      	mov	r0, r7
 8013d2a:	f7f7 fb7d 	bl	800b428 <ucdr_serialize_uint16_t>
 8013d2e:	4020      	ands	r0, r4
 8013d30:	b2c0      	uxtb	r0, r0
 8013d32:	e7d4      	b.n	8013cde <uxr_serialize_ActivityInfoVariant+0xa6>
 8013d34:	3108      	adds	r1, #8
 8013d36:	4441      	add	r1, r8
 8013d38:	2202      	movs	r2, #2
 8013d3a:	4638      	mov	r0, r7
 8013d3c:	f7fc fbd8 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013d40:	4434      	add	r4, r6
 8013d42:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013d46:	4604      	mov	r4, r0
 8013d48:	7d99      	ldrb	r1, [r3, #22]
 8013d4a:	4638      	mov	r0, r7
 8013d4c:	f7f7 fb40 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013d50:	4020      	ands	r0, r4
 8013d52:	b2c0      	uxtb	r0, r0
 8013d54:	e7c3      	b.n	8013cde <uxr_serialize_ActivityInfoVariant+0xa6>
 8013d56:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013d5a:	4638      	mov	r0, r7
 8013d5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d60:	f7f8 b872 	b.w	800be48 <ucdr_serialize_int16_t>
 8013d64:	68ea      	ldr	r2, [r5, #12]
 8013d66:	3601      	adds	r6, #1
 8013d68:	42b2      	cmp	r2, r6
 8013d6a:	d8be      	bhi.n	8013cea <uxr_serialize_ActivityInfoVariant+0xb2>
 8013d6c:	ea09 0900 	and.w	r9, r9, r0
 8013d70:	fa5f f989 	uxtb.w	r9, r9
 8013d74:	e771      	b.n	8013c5a <uxr_serialize_ActivityInfoVariant+0x22>
 8013d76:	68eb      	ldr	r3, [r5, #12]
 8013d78:	3601      	adds	r6, #1
 8013d7a:	429e      	cmp	r6, r3
 8013d7c:	f10a 0a18 	add.w	sl, sl, #24
 8013d80:	d395      	bcc.n	8013cae <uxr_serialize_ActivityInfoVariant+0x76>
 8013d82:	e76a      	b.n	8013c5a <uxr_serialize_ActivityInfoVariant+0x22>

08013d84 <uxr_deserialize_BaseObjectReply>:
 8013d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d88:	2202      	movs	r2, #2
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	460f      	mov	r7, r1
 8013d8e:	f7fc fc13 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013d92:	2202      	movs	r2, #2
 8013d94:	18b9      	adds	r1, r7, r2
 8013d96:	4605      	mov	r5, r0
 8013d98:	4630      	mov	r0, r6
 8013d9a:	f7fc fc0d 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013d9e:	1d39      	adds	r1, r7, #4
 8013da0:	4680      	mov	r8, r0
 8013da2:	4630      	mov	r0, r6
 8013da4:	f7f7 fb2a 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013da8:	1d79      	adds	r1, r7, #5
 8013daa:	4604      	mov	r4, r0
 8013dac:	4630      	mov	r0, r6
 8013dae:	f7f7 fb25 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013db2:	ea05 0508 	and.w	r5, r5, r8
 8013db6:	402c      	ands	r4, r5
 8013db8:	4020      	ands	r0, r4
 8013dba:	b2c0      	uxtb	r0, r0
 8013dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013dc0 <uxr_serialize_ReadSpecification>:
 8013dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc4:	460e      	mov	r6, r1
 8013dc6:	7809      	ldrb	r1, [r1, #0]
 8013dc8:	4607      	mov	r7, r0
 8013dca:	f7f7 fb01 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013dce:	7871      	ldrb	r1, [r6, #1]
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	4638      	mov	r0, r7
 8013dd4:	f7f7 fafc 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013dd8:	78b1      	ldrb	r1, [r6, #2]
 8013dda:	4004      	ands	r4, r0
 8013ddc:	4638      	mov	r0, r7
 8013dde:	f7f7 fac9 	bl	800b374 <ucdr_serialize_bool>
 8013de2:	78b3      	ldrb	r3, [r6, #2]
 8013de4:	b2e4      	uxtb	r4, r4
 8013de6:	4004      	ands	r4, r0
 8013de8:	b94b      	cbnz	r3, 8013dfe <uxr_serialize_ReadSpecification+0x3e>
 8013dea:	7a31      	ldrb	r1, [r6, #8]
 8013dec:	4638      	mov	r0, r7
 8013dee:	f7f7 fac1 	bl	800b374 <ucdr_serialize_bool>
 8013df2:	7a33      	ldrb	r3, [r6, #8]
 8013df4:	4004      	ands	r4, r0
 8013df6:	b943      	cbnz	r3, 8013e0a <uxr_serialize_ReadSpecification+0x4a>
 8013df8:	4620      	mov	r0, r4
 8013dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dfe:	6871      	ldr	r1, [r6, #4]
 8013e00:	4638      	mov	r0, r7
 8013e02:	f004 fd27 	bl	8018854 <ucdr_serialize_string>
 8013e06:	4004      	ands	r4, r0
 8013e08:	e7ef      	b.n	8013dea <uxr_serialize_ReadSpecification+0x2a>
 8013e0a:	8971      	ldrh	r1, [r6, #10]
 8013e0c:	4638      	mov	r0, r7
 8013e0e:	f7f7 fb0b 	bl	800b428 <ucdr_serialize_uint16_t>
 8013e12:	89b1      	ldrh	r1, [r6, #12]
 8013e14:	4605      	mov	r5, r0
 8013e16:	4638      	mov	r0, r7
 8013e18:	f7f7 fb06 	bl	800b428 <ucdr_serialize_uint16_t>
 8013e1c:	89f1      	ldrh	r1, [r6, #14]
 8013e1e:	4005      	ands	r5, r0
 8013e20:	4638      	mov	r0, r7
 8013e22:	f7f7 fb01 	bl	800b428 <ucdr_serialize_uint16_t>
 8013e26:	8a31      	ldrh	r1, [r6, #16]
 8013e28:	4680      	mov	r8, r0
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	f7f7 fafc 	bl	800b428 <ucdr_serialize_uint16_t>
 8013e30:	b2ed      	uxtb	r5, r5
 8013e32:	4025      	ands	r5, r4
 8013e34:	ea08 0505 	and.w	r5, r8, r5
 8013e38:	ea00 0405 	and.w	r4, r0, r5
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e42:	bf00      	nop

08013e44 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013e44:	f7ff bace 	b.w	80133e4 <uxr_serialize_CLIENT_Representation>

08013e48 <uxr_serialize_CREATE_Payload>:
 8013e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e4a:	2202      	movs	r2, #2
 8013e4c:	4607      	mov	r7, r0
 8013e4e:	460e      	mov	r6, r1
 8013e50:	f7fc fb4e 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013e54:	2202      	movs	r2, #2
 8013e56:	18b1      	adds	r1, r6, r2
 8013e58:	4605      	mov	r5, r0
 8013e5a:	4638      	mov	r0, r7
 8013e5c:	f7fc fb48 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013e60:	7931      	ldrb	r1, [r6, #4]
 8013e62:	4604      	mov	r4, r0
 8013e64:	4638      	mov	r0, r7
 8013e66:	f7f7 fab3 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013e6a:	b170      	cbz	r0, 8013e8a <uxr_serialize_CREATE_Payload+0x42>
 8013e6c:	7933      	ldrb	r3, [r6, #4]
 8013e6e:	402c      	ands	r4, r5
 8013e70:	3b01      	subs	r3, #1
 8013e72:	b2e4      	uxtb	r4, r4
 8013e74:	2b0d      	cmp	r3, #13
 8013e76:	d809      	bhi.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013e78:	e8df f003 	tbb	[pc, r3]
 8013e7c:	23230a4c 	.word	0x23230a4c
 8013e80:	0a0a0a0a 	.word	0x0a0a0a0a
 8013e84:	12121208 	.word	0x12121208
 8013e88:	3e45      	.short	0x3e45
 8013e8a:	2400      	movs	r4, #0
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e90:	f106 0108 	add.w	r1, r6, #8
 8013e94:	4638      	mov	r0, r7
 8013e96:	f7ff fbab 	bl	80135f0 <uxr_serialize_DATAWRITER_Representation>
 8013e9a:	4004      	ands	r4, r0
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea0:	7a31      	ldrb	r1, [r6, #8]
 8013ea2:	4638      	mov	r0, r7
 8013ea4:	f7f7 fa94 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d0ee      	beq.n	8013e8a <uxr_serialize_CREATE_Payload+0x42>
 8013eac:	7a33      	ldrb	r3, [r6, #8]
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d001      	beq.n	8013eb6 <uxr_serialize_CREATE_Payload+0x6e>
 8013eb2:	2b02      	cmp	r3, #2
 8013eb4:	d1ea      	bne.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013eb6:	68f1      	ldr	r1, [r6, #12]
 8013eb8:	4638      	mov	r0, r7
 8013eba:	f004 fccb 	bl	8018854 <ucdr_serialize_string>
 8013ebe:	4004      	ands	r4, r0
 8013ec0:	e7e4      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013ec2:	7a31      	ldrb	r1, [r6, #8]
 8013ec4:	4638      	mov	r0, r7
 8013ec6:	f7f7 fa83 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013eca:	4605      	mov	r5, r0
 8013ecc:	b158      	cbz	r0, 8013ee6 <uxr_serialize_CREATE_Payload+0x9e>
 8013ece:	7a33      	ldrb	r3, [r6, #8]
 8013ed0:	2b02      	cmp	r3, #2
 8013ed2:	d034      	beq.n	8013f3e <uxr_serialize_CREATE_Payload+0xf6>
 8013ed4:	2b03      	cmp	r3, #3
 8013ed6:	d106      	bne.n	8013ee6 <uxr_serialize_CREATE_Payload+0x9e>
 8013ed8:	68f2      	ldr	r2, [r6, #12]
 8013eda:	f106 0110 	add.w	r1, r6, #16
 8013ede:	4638      	mov	r0, r7
 8013ee0:	f7fc fd4e 	bl	8010980 <ucdr_serialize_sequence_uint8_t>
 8013ee4:	4605      	mov	r5, r0
 8013ee6:	2202      	movs	r2, #2
 8013ee8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013eec:	4638      	mov	r0, r7
 8013eee:	f7fc faff 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013ef2:	4028      	ands	r0, r5
 8013ef4:	4004      	ands	r4, r0
 8013ef6:	e7c9      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013ef8:	f106 0108 	add.w	r1, r6, #8
 8013efc:	4638      	mov	r0, r7
 8013efe:	f7ff fa71 	bl	80133e4 <uxr_serialize_CLIENT_Representation>
 8013f02:	4004      	ands	r4, r0
 8013f04:	e7c2      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013f06:	f106 0108 	add.w	r1, r6, #8
 8013f0a:	4638      	mov	r0, r7
 8013f0c:	f7ff fb26 	bl	801355c <uxr_serialize_AGENT_Representation>
 8013f10:	4004      	ands	r4, r0
 8013f12:	e7bb      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013f14:	7a31      	ldrb	r1, [r6, #8]
 8013f16:	4638      	mov	r0, r7
 8013f18:	f7f7 fa5a 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8013f1c:	4605      	mov	r5, r0
 8013f1e:	b130      	cbz	r0, 8013f2e <uxr_serialize_CREATE_Payload+0xe6>
 8013f20:	7a33      	ldrb	r3, [r6, #8]
 8013f22:	2b02      	cmp	r3, #2
 8013f24:	d011      	beq.n	8013f4a <uxr_serialize_CREATE_Payload+0x102>
 8013f26:	2b03      	cmp	r3, #3
 8013f28:	d015      	beq.n	8013f56 <uxr_serialize_CREATE_Payload+0x10e>
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d00d      	beq.n	8013f4a <uxr_serialize_CREATE_Payload+0x102>
 8013f2e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013f32:	4638      	mov	r0, r7
 8013f34:	f7f7 ff88 	bl	800be48 <ucdr_serialize_int16_t>
 8013f38:	4028      	ands	r0, r5
 8013f3a:	4004      	ands	r4, r0
 8013f3c:	e7a6      	b.n	8013e8c <uxr_serialize_CREATE_Payload+0x44>
 8013f3e:	68f1      	ldr	r1, [r6, #12]
 8013f40:	4638      	mov	r0, r7
 8013f42:	f004 fc87 	bl	8018854 <ucdr_serialize_string>
 8013f46:	4605      	mov	r5, r0
 8013f48:	e7cd      	b.n	8013ee6 <uxr_serialize_CREATE_Payload+0x9e>
 8013f4a:	68f1      	ldr	r1, [r6, #12]
 8013f4c:	4638      	mov	r0, r7
 8013f4e:	f004 fc81 	bl	8018854 <ucdr_serialize_string>
 8013f52:	4605      	mov	r5, r0
 8013f54:	e7eb      	b.n	8013f2e <uxr_serialize_CREATE_Payload+0xe6>
 8013f56:	68f2      	ldr	r2, [r6, #12]
 8013f58:	f106 0110 	add.w	r1, r6, #16
 8013f5c:	4638      	mov	r0, r7
 8013f5e:	f7fc fd0f 	bl	8010980 <ucdr_serialize_sequence_uint8_t>
 8013f62:	4605      	mov	r5, r0
 8013f64:	e7e3      	b.n	8013f2e <uxr_serialize_CREATE_Payload+0xe6>
 8013f66:	bf00      	nop

08013f68 <uxr_deserialize_GET_INFO_Payload>:
 8013f68:	b570      	push	{r4, r5, r6, lr}
 8013f6a:	2202      	movs	r2, #2
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	460e      	mov	r6, r1
 8013f70:	f7fc fb22 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013f74:	2202      	movs	r2, #2
 8013f76:	18b1      	adds	r1, r6, r2
 8013f78:	4604      	mov	r4, r0
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	f7fc fb1c 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013f80:	1d31      	adds	r1, r6, #4
 8013f82:	4004      	ands	r4, r0
 8013f84:	4628      	mov	r0, r5
 8013f86:	f7f7 fd69 	bl	800ba5c <ucdr_deserialize_uint32_t>
 8013f8a:	b2e4      	uxtb	r4, r4
 8013f8c:	4020      	ands	r0, r4
 8013f8e:	bd70      	pop	{r4, r5, r6, pc}

08013f90 <uxr_serialize_DELETE_Payload>:
 8013f90:	b570      	push	{r4, r5, r6, lr}
 8013f92:	2202      	movs	r2, #2
 8013f94:	4605      	mov	r5, r0
 8013f96:	460e      	mov	r6, r1
 8013f98:	f7fc faaa 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013f9c:	2202      	movs	r2, #2
 8013f9e:	4604      	mov	r4, r0
 8013fa0:	18b1      	adds	r1, r6, r2
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	f7fc faa4 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8013fa8:	4020      	ands	r0, r4
 8013faa:	b2c0      	uxtb	r0, r0
 8013fac:	bd70      	pop	{r4, r5, r6, pc}
 8013fae:	bf00      	nop

08013fb0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb4:	4605      	mov	r5, r0
 8013fb6:	460e      	mov	r6, r1
 8013fb8:	f7f7 fa20 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013fbc:	1c71      	adds	r1, r6, #1
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	f7f7 fa1b 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8013fc6:	2204      	movs	r2, #4
 8013fc8:	18b1      	adds	r1, r6, r2
 8013fca:	4680      	mov	r8, r0
 8013fcc:	4628      	mov	r0, r5
 8013fce:	f7fc faf3 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013fd2:	f106 0108 	add.w	r1, r6, #8
 8013fd6:	4607      	mov	r7, r0
 8013fd8:	2202      	movs	r2, #2
 8013fda:	4628      	mov	r0, r5
 8013fdc:	f7fc faec 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013fe0:	ea04 0308 	and.w	r3, r4, r8
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	ea03 0407 	and.w	r4, r3, r7
 8013fea:	2202      	movs	r2, #2
 8013fec:	4607      	mov	r7, r0
 8013fee:	f106 010a 	add.w	r1, r6, #10
 8013ff2:	4628      	mov	r0, r5
 8013ff4:	f7fc fae0 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8013ff8:	f106 010c 	add.w	r1, r6, #12
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	4628      	mov	r0, r5
 8014000:	461d      	mov	r5, r3
 8014002:	f7f7 f9cd 	bl	800b3a0 <ucdr_deserialize_bool>
 8014006:	403c      	ands	r4, r7
 8014008:	4025      	ands	r5, r4
 801400a:	4028      	ands	r0, r5
 801400c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014010 <uxr_deserialize_STATUS_Payload>:
 8014010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014014:	2202      	movs	r2, #2
 8014016:	4606      	mov	r6, r0
 8014018:	460f      	mov	r7, r1
 801401a:	f7fc facd 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 801401e:	2202      	movs	r2, #2
 8014020:	18b9      	adds	r1, r7, r2
 8014022:	4605      	mov	r5, r0
 8014024:	4630      	mov	r0, r6
 8014026:	f7fc fac7 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 801402a:	1d39      	adds	r1, r7, #4
 801402c:	4680      	mov	r8, r0
 801402e:	4630      	mov	r0, r6
 8014030:	f7f7 f9e4 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8014034:	1d79      	adds	r1, r7, #5
 8014036:	4604      	mov	r4, r0
 8014038:	4630      	mov	r0, r6
 801403a:	f7f7 f9df 	bl	800b3fc <ucdr_deserialize_uint8_t>
 801403e:	ea05 0508 	and.w	r5, r5, r8
 8014042:	402c      	ands	r4, r5
 8014044:	4020      	ands	r0, r4
 8014046:	b2c0      	uxtb	r0, r0
 8014048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801404c <uxr_serialize_INFO_Payload>:
 801404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014050:	2202      	movs	r2, #2
 8014052:	460c      	mov	r4, r1
 8014054:	4605      	mov	r5, r0
 8014056:	f7fc fa4b 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 801405a:	2202      	movs	r2, #2
 801405c:	18a1      	adds	r1, r4, r2
 801405e:	4680      	mov	r8, r0
 8014060:	4628      	mov	r0, r5
 8014062:	f7fc fa45 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8014066:	7921      	ldrb	r1, [r4, #4]
 8014068:	4607      	mov	r7, r0
 801406a:	4628      	mov	r0, r5
 801406c:	f7f7 f9b0 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8014070:	7961      	ldrb	r1, [r4, #5]
 8014072:	4606      	mov	r6, r0
 8014074:	4628      	mov	r0, r5
 8014076:	f7f7 f9ab 	bl	800b3d0 <ucdr_serialize_uint8_t>
 801407a:	ea08 0807 	and.w	r8, r8, r7
 801407e:	ea06 0608 	and.w	r6, r6, r8
 8014082:	4006      	ands	r6, r0
 8014084:	7a21      	ldrb	r1, [r4, #8]
 8014086:	4628      	mov	r0, r5
 8014088:	f7f7 f974 	bl	800b374 <ucdr_serialize_bool>
 801408c:	7a23      	ldrb	r3, [r4, #8]
 801408e:	b2f7      	uxtb	r7, r6
 8014090:	4606      	mov	r6, r0
 8014092:	b96b      	cbnz	r3, 80140b0 <uxr_serialize_INFO_Payload+0x64>
 8014094:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014098:	4628      	mov	r0, r5
 801409a:	f7f7 f96b 	bl	800b374 <ucdr_serialize_bool>
 801409e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80140a2:	4030      	ands	r0, r6
 80140a4:	b2c6      	uxtb	r6, r0
 80140a6:	b983      	cbnz	r3, 80140ca <uxr_serialize_INFO_Payload+0x7e>
 80140a8:	ea06 0007 	and.w	r0, r6, r7
 80140ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b0:	7b21      	ldrb	r1, [r4, #12]
 80140b2:	4628      	mov	r0, r5
 80140b4:	f7f7 f98c 	bl	800b3d0 <ucdr_serialize_uint8_t>
 80140b8:	b188      	cbz	r0, 80140de <uxr_serialize_INFO_Payload+0x92>
 80140ba:	f104 010c 	add.w	r1, r4, #12
 80140be:	4628      	mov	r0, r5
 80140c0:	f7ff fabe 	bl	8013640 <uxr_serialize_ObjectVariant.part.0>
 80140c4:	4030      	ands	r0, r6
 80140c6:	b2c6      	uxtb	r6, r0
 80140c8:	e7e4      	b.n	8014094 <uxr_serialize_INFO_Payload+0x48>
 80140ca:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80140ce:	4628      	mov	r0, r5
 80140d0:	f7ff fdb2 	bl	8013c38 <uxr_serialize_ActivityInfoVariant>
 80140d4:	4006      	ands	r6, r0
 80140d6:	ea06 0007 	and.w	r0, r6, r7
 80140da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140de:	4606      	mov	r6, r0
 80140e0:	e7d8      	b.n	8014094 <uxr_serialize_INFO_Payload+0x48>
 80140e2:	bf00      	nop

080140e4 <uxr_serialize_READ_DATA_Payload>:
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	2202      	movs	r2, #2
 80140e8:	4605      	mov	r5, r0
 80140ea:	460e      	mov	r6, r1
 80140ec:	f7fc fa00 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 80140f0:	2202      	movs	r2, #2
 80140f2:	18b1      	adds	r1, r6, r2
 80140f4:	4604      	mov	r4, r0
 80140f6:	4628      	mov	r0, r5
 80140f8:	f7fc f9fa 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 80140fc:	1d31      	adds	r1, r6, #4
 80140fe:	4004      	ands	r4, r0
 8014100:	4628      	mov	r0, r5
 8014102:	f7ff fe5d 	bl	8013dc0 <uxr_serialize_ReadSpecification>
 8014106:	b2e4      	uxtb	r4, r4
 8014108:	4020      	ands	r0, r4
 801410a:	bd70      	pop	{r4, r5, r6, pc}

0801410c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801410c:	b570      	push	{r4, r5, r6, lr}
 801410e:	2202      	movs	r2, #2
 8014110:	4605      	mov	r5, r0
 8014112:	460e      	mov	r6, r1
 8014114:	f7fc f9ec 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8014118:	2202      	movs	r2, #2
 801411a:	4604      	mov	r4, r0
 801411c:	18b1      	adds	r1, r6, r2
 801411e:	4628      	mov	r0, r5
 8014120:	f7fc f9e6 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8014124:	4020      	ands	r0, r4
 8014126:	b2c0      	uxtb	r0, r0
 8014128:	bd70      	pop	{r4, r5, r6, pc}
 801412a:	bf00      	nop

0801412c <uxr_serialize_ACKNACK_Payload>:
 801412c:	b570      	push	{r4, r5, r6, lr}
 801412e:	460c      	mov	r4, r1
 8014130:	460e      	mov	r6, r1
 8014132:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014136:	4605      	mov	r5, r0
 8014138:	f7f7 f976 	bl	800b428 <ucdr_serialize_uint16_t>
 801413c:	2202      	movs	r2, #2
 801413e:	4621      	mov	r1, r4
 8014140:	4604      	mov	r4, r0
 8014142:	4628      	mov	r0, r5
 8014144:	f7fc f9d4 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 8014148:	7931      	ldrb	r1, [r6, #4]
 801414a:	4004      	ands	r4, r0
 801414c:	4628      	mov	r0, r5
 801414e:	f7f7 f93f 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8014152:	b2e4      	uxtb	r4, r4
 8014154:	4020      	ands	r0, r4
 8014156:	bd70      	pop	{r4, r5, r6, pc}

08014158 <uxr_deserialize_ACKNACK_Payload>:
 8014158:	b570      	push	{r4, r5, r6, lr}
 801415a:	4605      	mov	r5, r0
 801415c:	460e      	mov	r6, r1
 801415e:	f7f7 fa63 	bl	800b628 <ucdr_deserialize_uint16_t>
 8014162:	2202      	movs	r2, #2
 8014164:	18b1      	adds	r1, r6, r2
 8014166:	4604      	mov	r4, r0
 8014168:	4628      	mov	r0, r5
 801416a:	f7fc fa25 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 801416e:	1d31      	adds	r1, r6, #4
 8014170:	4004      	ands	r4, r0
 8014172:	4628      	mov	r0, r5
 8014174:	f7f7 f942 	bl	800b3fc <ucdr_deserialize_uint8_t>
 8014178:	b2e4      	uxtb	r4, r4
 801417a:	4020      	ands	r0, r4
 801417c:	bd70      	pop	{r4, r5, r6, pc}
 801417e:	bf00      	nop

08014180 <uxr_serialize_HEARTBEAT_Payload>:
 8014180:	b570      	push	{r4, r5, r6, lr}
 8014182:	460d      	mov	r5, r1
 8014184:	8809      	ldrh	r1, [r1, #0]
 8014186:	4606      	mov	r6, r0
 8014188:	f7f7 f94e 	bl	800b428 <ucdr_serialize_uint16_t>
 801418c:	8869      	ldrh	r1, [r5, #2]
 801418e:	4604      	mov	r4, r0
 8014190:	4630      	mov	r0, r6
 8014192:	f7f7 f949 	bl	800b428 <ucdr_serialize_uint16_t>
 8014196:	7929      	ldrb	r1, [r5, #4]
 8014198:	4004      	ands	r4, r0
 801419a:	4630      	mov	r0, r6
 801419c:	f7f7 f918 	bl	800b3d0 <ucdr_serialize_uint8_t>
 80141a0:	b2e4      	uxtb	r4, r4
 80141a2:	4020      	ands	r0, r4
 80141a4:	bd70      	pop	{r4, r5, r6, pc}
 80141a6:	bf00      	nop

080141a8 <uxr_deserialize_HEARTBEAT_Payload>:
 80141a8:	b570      	push	{r4, r5, r6, lr}
 80141aa:	4605      	mov	r5, r0
 80141ac:	460e      	mov	r6, r1
 80141ae:	f7f7 fa3b 	bl	800b628 <ucdr_deserialize_uint16_t>
 80141b2:	1cb1      	adds	r1, r6, #2
 80141b4:	4604      	mov	r4, r0
 80141b6:	4628      	mov	r0, r5
 80141b8:	f7f7 fa36 	bl	800b628 <ucdr_deserialize_uint16_t>
 80141bc:	1d31      	adds	r1, r6, #4
 80141be:	4004      	ands	r4, r0
 80141c0:	4628      	mov	r0, r5
 80141c2:	f7f7 f91b 	bl	800b3fc <ucdr_deserialize_uint8_t>
 80141c6:	b2e4      	uxtb	r4, r4
 80141c8:	4020      	ands	r0, r4
 80141ca:	bd70      	pop	{r4, r5, r6, pc}

080141cc <uxr_serialize_TIMESTAMP_Payload>:
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	460d      	mov	r5, r1
 80141d0:	6809      	ldr	r1, [r1, #0]
 80141d2:	4606      	mov	r6, r0
 80141d4:	f7f7 ff2c 	bl	800c030 <ucdr_serialize_int32_t>
 80141d8:	6869      	ldr	r1, [r5, #4]
 80141da:	4604      	mov	r4, r0
 80141dc:	4630      	mov	r0, r6
 80141de:	f7f7 fb0d 	bl	800b7fc <ucdr_serialize_uint32_t>
 80141e2:	4020      	ands	r0, r4
 80141e4:	b2c0      	uxtb	r0, r0
 80141e6:	bd70      	pop	{r4, r5, r6, pc}

080141e8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80141e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ec:	4605      	mov	r5, r0
 80141ee:	460e      	mov	r6, r1
 80141f0:	f7f7 ffb6 	bl	800c160 <ucdr_deserialize_int32_t>
 80141f4:	1d31      	adds	r1, r6, #4
 80141f6:	4607      	mov	r7, r0
 80141f8:	4628      	mov	r0, r5
 80141fa:	f7f7 fc2f 	bl	800ba5c <ucdr_deserialize_uint32_t>
 80141fe:	f106 0108 	add.w	r1, r6, #8
 8014202:	4680      	mov	r8, r0
 8014204:	4628      	mov	r0, r5
 8014206:	f7f7 ffab 	bl	800c160 <ucdr_deserialize_int32_t>
 801420a:	f106 010c 	add.w	r1, r6, #12
 801420e:	4604      	mov	r4, r0
 8014210:	4628      	mov	r0, r5
 8014212:	f7f7 fc23 	bl	800ba5c <ucdr_deserialize_uint32_t>
 8014216:	ea07 0708 	and.w	r7, r7, r8
 801421a:	403c      	ands	r4, r7
 801421c:	f106 0110 	add.w	r1, r6, #16
 8014220:	4004      	ands	r4, r0
 8014222:	4628      	mov	r0, r5
 8014224:	f7f7 ff9c 	bl	800c160 <ucdr_deserialize_int32_t>
 8014228:	f106 0114 	add.w	r1, r6, #20
 801422c:	4607      	mov	r7, r0
 801422e:	4628      	mov	r0, r5
 8014230:	f7f7 fc14 	bl	800ba5c <ucdr_deserialize_uint32_t>
 8014234:	b2e4      	uxtb	r4, r4
 8014236:	403c      	ands	r4, r7
 8014238:	4020      	ands	r0, r4
 801423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801423e:	bf00      	nop

08014240 <uxr_serialize_SampleIdentity>:
 8014240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014244:	220c      	movs	r2, #12
 8014246:	4604      	mov	r4, r0
 8014248:	460d      	mov	r5, r1
 801424a:	f7fc f951 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 801424e:	2203      	movs	r2, #3
 8014250:	f105 010c 	add.w	r1, r5, #12
 8014254:	4607      	mov	r7, r0
 8014256:	4620      	mov	r0, r4
 8014258:	f7fc f94a 	bl	80104f0 <ucdr_serialize_array_uint8_t>
 801425c:	7be9      	ldrb	r1, [r5, #15]
 801425e:	4680      	mov	r8, r0
 8014260:	4620      	mov	r0, r4
 8014262:	f7f7 f8b5 	bl	800b3d0 <ucdr_serialize_uint8_t>
 8014266:	6929      	ldr	r1, [r5, #16]
 8014268:	4606      	mov	r6, r0
 801426a:	4620      	mov	r0, r4
 801426c:	f7f7 fee0 	bl	800c030 <ucdr_serialize_int32_t>
 8014270:	6969      	ldr	r1, [r5, #20]
 8014272:	4603      	mov	r3, r0
 8014274:	4620      	mov	r0, r4
 8014276:	ea07 0708 	and.w	r7, r7, r8
 801427a:	461c      	mov	r4, r3
 801427c:	f7f7 fabe 	bl	800b7fc <ucdr_serialize_uint32_t>
 8014280:	403e      	ands	r6, r7
 8014282:	4034      	ands	r4, r6
 8014284:	4020      	ands	r0, r4
 8014286:	b2c0      	uxtb	r0, r0
 8014288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801428c <uxr_deserialize_SampleIdentity>:
 801428c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014290:	220c      	movs	r2, #12
 8014292:	4604      	mov	r4, r0
 8014294:	460d      	mov	r5, r1
 8014296:	f7fc f98f 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 801429a:	2203      	movs	r2, #3
 801429c:	f105 010c 	add.w	r1, r5, #12
 80142a0:	4607      	mov	r7, r0
 80142a2:	4620      	mov	r0, r4
 80142a4:	f7fc f988 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 80142a8:	f105 010f 	add.w	r1, r5, #15
 80142ac:	4680      	mov	r8, r0
 80142ae:	4620      	mov	r0, r4
 80142b0:	f7f7 f8a4 	bl	800b3fc <ucdr_deserialize_uint8_t>
 80142b4:	f105 0110 	add.w	r1, r5, #16
 80142b8:	4606      	mov	r6, r0
 80142ba:	4620      	mov	r0, r4
 80142bc:	f7f7 ff50 	bl	800c160 <ucdr_deserialize_int32_t>
 80142c0:	f105 0114 	add.w	r1, r5, #20
 80142c4:	4603      	mov	r3, r0
 80142c6:	4620      	mov	r0, r4
 80142c8:	ea07 0708 	and.w	r7, r7, r8
 80142cc:	461c      	mov	r4, r3
 80142ce:	f7f7 fbc5 	bl	800ba5c <ucdr_deserialize_uint32_t>
 80142d2:	403e      	ands	r6, r7
 80142d4:	4034      	ands	r4, r6
 80142d6:	4020      	ands	r0, r4
 80142d8:	b2c0      	uxtb	r0, r0
 80142da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142de:	bf00      	nop

080142e0 <rcl_client_get_rmw_handle>:
 80142e0:	b118      	cbz	r0, 80142ea <rcl_client_get_rmw_handle+0xa>
 80142e2:	6800      	ldr	r0, [r0, #0]
 80142e4:	b108      	cbz	r0, 80142ea <rcl_client_get_rmw_handle+0xa>
 80142e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80142ea:	4770      	bx	lr

080142ec <rcl_send_request>:
 80142ec:	b570      	push	{r4, r5, r6, lr}
 80142ee:	b082      	sub	sp, #8
 80142f0:	b1e8      	cbz	r0, 801432e <rcl_send_request+0x42>
 80142f2:	4604      	mov	r4, r0
 80142f4:	6800      	ldr	r0, [r0, #0]
 80142f6:	b1d0      	cbz	r0, 801432e <rcl_send_request+0x42>
 80142f8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80142fc:	b1bb      	cbz	r3, 801432e <rcl_send_request+0x42>
 80142fe:	460e      	mov	r6, r1
 8014300:	b1d1      	cbz	r1, 8014338 <rcl_send_request+0x4c>
 8014302:	4615      	mov	r5, r2
 8014304:	b1c2      	cbz	r2, 8014338 <rcl_send_request+0x4c>
 8014306:	2105      	movs	r1, #5
 8014308:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801430c:	f002 fe58 	bl	8016fc0 <__atomic_load_8>
 8014310:	6823      	ldr	r3, [r4, #0]
 8014312:	e9c5 0100 	strd	r0, r1, [r5]
 8014316:	462a      	mov	r2, r5
 8014318:	4631      	mov	r1, r6
 801431a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801431e:	f003 fd43 	bl	8017da8 <rmw_send_request>
 8014322:	4606      	mov	r6, r0
 8014324:	b160      	cbz	r0, 8014340 <rcl_send_request+0x54>
 8014326:	2601      	movs	r6, #1
 8014328:	4630      	mov	r0, r6
 801432a:	b002      	add	sp, #8
 801432c:	bd70      	pop	{r4, r5, r6, pc}
 801432e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014332:	4630      	mov	r0, r6
 8014334:	b002      	add	sp, #8
 8014336:	bd70      	pop	{r4, r5, r6, pc}
 8014338:	260b      	movs	r6, #11
 801433a:	4630      	mov	r0, r6
 801433c:	b002      	add	sp, #8
 801433e:	bd70      	pop	{r4, r5, r6, pc}
 8014340:	6820      	ldr	r0, [r4, #0]
 8014342:	2105      	movs	r1, #5
 8014344:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014348:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801434c:	9100      	str	r1, [sp, #0]
 801434e:	f002 fea3 	bl	8017098 <__atomic_exchange_8>
 8014352:	4630      	mov	r0, r6
 8014354:	b002      	add	sp, #8
 8014356:	bd70      	pop	{r4, r5, r6, pc}

08014358 <rcl_take_response>:
 8014358:	b570      	push	{r4, r5, r6, lr}
 801435a:	468e      	mov	lr, r1
 801435c:	460c      	mov	r4, r1
 801435e:	4616      	mov	r6, r2
 8014360:	4605      	mov	r5, r0
 8014362:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014366:	b08c      	sub	sp, #48	@ 0x30
 8014368:	f10d 0c18 	add.w	ip, sp, #24
 801436c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014370:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014374:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014378:	b35d      	cbz	r5, 80143d2 <rcl_take_response+0x7a>
 801437a:	682b      	ldr	r3, [r5, #0]
 801437c:	b34b      	cbz	r3, 80143d2 <rcl_take_response+0x7a>
 801437e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014382:	b330      	cbz	r0, 80143d2 <rcl_take_response+0x7a>
 8014384:	b346      	cbz	r6, 80143d8 <rcl_take_response+0x80>
 8014386:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80143e0 <rcl_take_response+0x88>
 801438a:	2300      	movs	r3, #0
 801438c:	f88d 3007 	strb.w	r3, [sp, #7]
 8014390:	4632      	mov	r2, r6
 8014392:	f10d 0307 	add.w	r3, sp, #7
 8014396:	a902      	add	r1, sp, #8
 8014398:	ed8d 7b02 	vstr	d7, [sp, #8]
 801439c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80143a0:	f003 fe0a 	bl	8017fb8 <rmw_take_response>
 80143a4:	4605      	mov	r5, r0
 80143a6:	b9c8      	cbnz	r0, 80143dc <rcl_take_response+0x84>
 80143a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80143ac:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80143b0:	2a00      	cmp	r2, #0
 80143b2:	bf08      	it	eq
 80143b4:	461d      	moveq	r5, r3
 80143b6:	f10d 0e18 	add.w	lr, sp, #24
 80143ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143be:	46a4      	mov	ip, r4
 80143c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80143c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80143c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80143cc:	4628      	mov	r0, r5
 80143ce:	b00c      	add	sp, #48	@ 0x30
 80143d0:	bd70      	pop	{r4, r5, r6, pc}
 80143d2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80143d6:	e7ee      	b.n	80143b6 <rcl_take_response+0x5e>
 80143d8:	250b      	movs	r5, #11
 80143da:	e7ec      	b.n	80143b6 <rcl_take_response+0x5e>
 80143dc:	2501      	movs	r5, #1
 80143de:	e7ea      	b.n	80143b6 <rcl_take_response+0x5e>
	...

080143e8 <rcl_client_is_valid>:
 80143e8:	b130      	cbz	r0, 80143f8 <rcl_client_is_valid+0x10>
 80143ea:	6800      	ldr	r0, [r0, #0]
 80143ec:	b120      	cbz	r0, 80143f8 <rcl_client_is_valid+0x10>
 80143ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80143f2:	3800      	subs	r0, #0
 80143f4:	bf18      	it	ne
 80143f6:	2001      	movne	r0, #1
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop

080143fc <rcl_convert_rmw_ret_to_rcl_ret>:
 80143fc:	280b      	cmp	r0, #11
 80143fe:	dc0d      	bgt.n	801441c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014400:	2800      	cmp	r0, #0
 8014402:	db09      	blt.n	8014418 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014404:	280b      	cmp	r0, #11
 8014406:	d807      	bhi.n	8014418 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014408:	e8df f000 	tbb	[pc, r0]
 801440c:	07060607 	.word	0x07060607
 8014410:	06060606 	.word	0x06060606
 8014414:	07070606 	.word	0x07070606
 8014418:	2001      	movs	r0, #1
 801441a:	4770      	bx	lr
 801441c:	28cb      	cmp	r0, #203	@ 0xcb
 801441e:	bf18      	it	ne
 8014420:	2001      	movne	r0, #1
 8014422:	4770      	bx	lr

08014424 <rcl_get_zero_initialized_context>:
 8014424:	4a03      	ldr	r2, [pc, #12]	@ (8014434 <rcl_get_zero_initialized_context+0x10>)
 8014426:	4603      	mov	r3, r0
 8014428:	e892 0003 	ldmia.w	r2, {r0, r1}
 801442c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014430:	4618      	mov	r0, r3
 8014432:	4770      	bx	lr
 8014434:	0801dc4c 	.word	0x0801dc4c

08014438 <rcl_context_is_valid>:
 8014438:	b118      	cbz	r0, 8014442 <rcl_context_is_valid+0xa>
 801443a:	6840      	ldr	r0, [r0, #4]
 801443c:	3800      	subs	r0, #0
 801443e:	bf18      	it	ne
 8014440:	2001      	movne	r0, #1
 8014442:	4770      	bx	lr

08014444 <__cleanup_context>:
 8014444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014448:	4606      	mov	r6, r0
 801444a:	6800      	ldr	r0, [r0, #0]
 801444c:	2300      	movs	r3, #0
 801444e:	6073      	str	r3, [r6, #4]
 8014450:	2800      	cmp	r0, #0
 8014452:	d049      	beq.n	80144e8 <__cleanup_context+0xa4>
 8014454:	6947      	ldr	r7, [r0, #20]
 8014456:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801445a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801445e:	b137      	cbz	r7, 801446e <__cleanup_context+0x2a>
 8014460:	3014      	adds	r0, #20
 8014462:	f7f8 fb6f 	bl	800cb44 <rcl_init_options_fini>
 8014466:	4607      	mov	r7, r0
 8014468:	2800      	cmp	r0, #0
 801446a:	d144      	bne.n	80144f6 <__cleanup_context+0xb2>
 801446c:	6830      	ldr	r0, [r6, #0]
 801446e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014470:	b143      	cbz	r3, 8014484 <__cleanup_context+0x40>
 8014472:	3028      	adds	r0, #40	@ 0x28
 8014474:	f7f9 ffd4 	bl	800e420 <rmw_context_fini>
 8014478:	b118      	cbz	r0, 8014482 <__cleanup_context+0x3e>
 801447a:	2f00      	cmp	r7, #0
 801447c:	d03e      	beq.n	80144fc <__cleanup_context+0xb8>
 801447e:	f7f9 fd07 	bl	800de90 <rcutils_reset_error>
 8014482:	6830      	ldr	r0, [r6, #0]
 8014484:	6a03      	ldr	r3, [r0, #32]
 8014486:	b1db      	cbz	r3, 80144c0 <__cleanup_context+0x7c>
 8014488:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801448c:	2a01      	cmp	r2, #1
 801448e:	f17c 0100 	sbcs.w	r1, ip, #0
 8014492:	db11      	blt.n	80144b8 <__cleanup_context+0x74>
 8014494:	2400      	movs	r4, #0
 8014496:	4625      	mov	r5, r4
 8014498:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801449c:	4649      	mov	r1, r9
 801449e:	b1b8      	cbz	r0, 80144d0 <__cleanup_context+0x8c>
 80144a0:	47c0      	blx	r8
 80144a2:	6833      	ldr	r3, [r6, #0]
 80144a4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80144a8:	3401      	adds	r4, #1
 80144aa:	f145 0500 	adc.w	r5, r5, #0
 80144ae:	4294      	cmp	r4, r2
 80144b0:	eb75 010c 	sbcs.w	r1, r5, ip
 80144b4:	6a1b      	ldr	r3, [r3, #32]
 80144b6:	dbef      	blt.n	8014498 <__cleanup_context+0x54>
 80144b8:	4618      	mov	r0, r3
 80144ba:	4649      	mov	r1, r9
 80144bc:	47c0      	blx	r8
 80144be:	6830      	ldr	r0, [r6, #0]
 80144c0:	4649      	mov	r1, r9
 80144c2:	47c0      	blx	r8
 80144c4:	2300      	movs	r3, #0
 80144c6:	e9c6 3300 	strd	r3, r3, [r6]
 80144ca:	4638      	mov	r0, r7
 80144cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144d0:	3401      	adds	r4, #1
 80144d2:	f145 0500 	adc.w	r5, r5, #0
 80144d6:	4294      	cmp	r4, r2
 80144d8:	eb75 010c 	sbcs.w	r1, r5, ip
 80144dc:	dbdc      	blt.n	8014498 <__cleanup_context+0x54>
 80144de:	4618      	mov	r0, r3
 80144e0:	4649      	mov	r1, r9
 80144e2:	47c0      	blx	r8
 80144e4:	6830      	ldr	r0, [r6, #0]
 80144e6:	e7eb      	b.n	80144c0 <__cleanup_context+0x7c>
 80144e8:	4607      	mov	r7, r0
 80144ea:	2300      	movs	r3, #0
 80144ec:	e9c6 3300 	strd	r3, r3, [r6]
 80144f0:	4638      	mov	r0, r7
 80144f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144f6:	f7f9 fccb 	bl	800de90 <rcutils_reset_error>
 80144fa:	e7b7      	b.n	801446c <__cleanup_context+0x28>
 80144fc:	f7ff ff7e 	bl	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 8014500:	4607      	mov	r7, r0
 8014502:	e7bc      	b.n	801447e <__cleanup_context+0x3a>

08014504 <rcl_init>:
 8014504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014508:	1e05      	subs	r5, r0, #0
 801450a:	b09e      	sub	sp, #120	@ 0x78
 801450c:	460e      	mov	r6, r1
 801450e:	4690      	mov	r8, r2
 8014510:	461f      	mov	r7, r3
 8014512:	f340 809c 	ble.w	801464e <rcl_init+0x14a>
 8014516:	2900      	cmp	r1, #0
 8014518:	f000 809c 	beq.w	8014654 <rcl_init+0x150>
 801451c:	f1a1 0e04 	sub.w	lr, r1, #4
 8014520:	f04f 0c00 	mov.w	ip, #0
 8014524:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014528:	f10c 0c01 	add.w	ip, ip, #1
 801452c:	2c00      	cmp	r4, #0
 801452e:	f000 8091 	beq.w	8014654 <rcl_init+0x150>
 8014532:	4565      	cmp	r5, ip
 8014534:	d1f6      	bne.n	8014524 <rcl_init+0x20>
 8014536:	f1b8 0f00 	cmp.w	r8, #0
 801453a:	f000 808b 	beq.w	8014654 <rcl_init+0x150>
 801453e:	f8d8 4000 	ldr.w	r4, [r8]
 8014542:	2c00      	cmp	r4, #0
 8014544:	f000 8086 	beq.w	8014654 <rcl_init+0x150>
 8014548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801454a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801454e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014552:	6823      	ldr	r3, [r4, #0]
 8014554:	f8cc 3000 	str.w	r3, [ip]
 8014558:	a819      	add	r0, sp, #100	@ 0x64
 801455a:	f7f9 fc73 	bl	800de44 <rcutils_allocator_is_valid>
 801455e:	2800      	cmp	r0, #0
 8014560:	d078      	beq.n	8014654 <rcl_init+0x150>
 8014562:	2f00      	cmp	r7, #0
 8014564:	d076      	beq.n	8014654 <rcl_init+0x150>
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d178      	bne.n	801465e <rcl_init+0x15a>
 801456c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8014570:	2178      	movs	r1, #120	@ 0x78
 8014572:	2001      	movs	r0, #1
 8014574:	4798      	blx	r3
 8014576:	4604      	mov	r4, r0
 8014578:	6038      	str	r0, [r7, #0]
 801457a:	2800      	cmp	r0, #0
 801457c:	f000 80b6 	beq.w	80146ec <rcl_init+0x1e8>
 8014580:	a802      	add	r0, sp, #8
 8014582:	f003 f86d 	bl	8017660 <rmw_get_zero_initialized_context>
 8014586:	a902      	add	r1, sp, #8
 8014588:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801458c:	2250      	movs	r2, #80	@ 0x50
 801458e:	ac19      	add	r4, sp, #100	@ 0x64
 8014590:	f006 f8ff 	bl	801a792 <memcpy>
 8014594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014596:	f8d7 e000 	ldr.w	lr, [r7]
 801459a:	46f4      	mov	ip, lr
 801459c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145a0:	6823      	ldr	r3, [r4, #0]
 80145a2:	f8cc 3000 	str.w	r3, [ip]
 80145a6:	f10e 0114 	add.w	r1, lr, #20
 80145aa:	4640      	mov	r0, r8
 80145ac:	f7f8 faf4 	bl	800cb98 <rcl_init_options_copy>
 80145b0:	4604      	mov	r4, r0
 80145b2:	2800      	cmp	r0, #0
 80145b4:	d144      	bne.n	8014640 <rcl_init+0x13c>
 80145b6:	f8d7 9000 	ldr.w	r9, [r7]
 80145ba:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80145be:	f8c9 0020 	str.w	r0, [r9, #32]
 80145c2:	f8c9 5018 	str.w	r5, [r9, #24]
 80145c6:	f8c9 801c 	str.w	r8, [r9, #28]
 80145ca:	2d00      	cmp	r5, #0
 80145cc:	d04e      	beq.n	801466c <rcl_init+0x168>
 80145ce:	2e00      	cmp	r6, #0
 80145d0:	d04c      	beq.n	801466c <rcl_init+0x168>
 80145d2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80145d6:	2104      	movs	r1, #4
 80145d8:	4628      	mov	r0, r5
 80145da:	4798      	blx	r3
 80145dc:	f8c9 0020 	str.w	r0, [r9, #32]
 80145e0:	f8d7 9000 	ldr.w	r9, [r7]
 80145e4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80145e8:	46ca      	mov	sl, r9
 80145ea:	b343      	cbz	r3, 801463e <rcl_init+0x13a>
 80145ec:	2d01      	cmp	r5, #1
 80145ee:	f178 0300 	sbcs.w	r3, r8, #0
 80145f2:	db3b      	blt.n	801466c <rcl_init+0x168>
 80145f4:	2400      	movs	r4, #0
 80145f6:	3e04      	subs	r6, #4
 80145f8:	46a1      	mov	r9, r4
 80145fa:	e00b      	b.n	8014614 <rcl_init+0x110>
 80145fc:	6831      	ldr	r1, [r6, #0]
 80145fe:	f006 f8c8 	bl	801a792 <memcpy>
 8014602:	3401      	adds	r4, #1
 8014604:	f149 0900 	adc.w	r9, r9, #0
 8014608:	45c8      	cmp	r8, r9
 801460a:	bf08      	it	eq
 801460c:	42a5      	cmpeq	r5, r4
 801460e:	d02b      	beq.n	8014668 <rcl_init+0x164>
 8014610:	f8d7 a000 	ldr.w	sl, [r7]
 8014614:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014618:	f7eb fe0c 	bl	8000234 <strlen>
 801461c:	1c42      	adds	r2, r0, #1
 801461e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014620:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8014622:	f8da a020 	ldr.w	sl, [sl, #32]
 8014626:	9201      	str	r2, [sp, #4]
 8014628:	4610      	mov	r0, r2
 801462a:	4798      	blx	r3
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8014632:	6a1b      	ldr	r3, [r3, #32]
 8014634:	9a01      	ldr	r2, [sp, #4]
 8014636:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801463a:	2800      	cmp	r0, #0
 801463c:	d1de      	bne.n	80145fc <rcl_init+0xf8>
 801463e:	240a      	movs	r4, #10
 8014640:	4638      	mov	r0, r7
 8014642:	f7ff feff 	bl	8014444 <__cleanup_context>
 8014646:	4620      	mov	r0, r4
 8014648:	b01e      	add	sp, #120	@ 0x78
 801464a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801464e:	2900      	cmp	r1, #0
 8014650:	f43f af71 	beq.w	8014536 <rcl_init+0x32>
 8014654:	240b      	movs	r4, #11
 8014656:	4620      	mov	r0, r4
 8014658:	b01e      	add	sp, #120	@ 0x78
 801465a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801465e:	2464      	movs	r4, #100	@ 0x64
 8014660:	4620      	mov	r0, r4
 8014662:	b01e      	add	sp, #120	@ 0x78
 8014664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014668:	f8d7 9000 	ldr.w	r9, [r7]
 801466c:	4926      	ldr	r1, [pc, #152]	@ (8014708 <rcl_init+0x204>)
 801466e:	680b      	ldr	r3, [r1, #0]
 8014670:	3301      	adds	r3, #1
 8014672:	d036      	beq.n	80146e2 <rcl_init+0x1de>
 8014674:	600b      	str	r3, [r1, #0]
 8014676:	461a      	mov	r2, r3
 8014678:	2400      	movs	r4, #0
 801467a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801467e:	607b      	str	r3, [r7, #4]
 8014680:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014682:	3301      	adds	r3, #1
 8014684:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014688:	d034      	beq.n	80146f4 <rcl_init+0x1f0>
 801468a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801468e:	b93b      	cbnz	r3, 80146a0 <rcl_init+0x19c>
 8014690:	3030      	adds	r0, #48	@ 0x30
 8014692:	f000 f83b 	bl	801470c <rcl_get_localhost_only>
 8014696:	4604      	mov	r4, r0
 8014698:	2800      	cmp	r0, #0
 801469a:	d1d1      	bne.n	8014640 <rcl_init+0x13c>
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	6958      	ldr	r0, [r3, #20]
 80146a0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80146a2:	aa18      	add	r2, sp, #96	@ 0x60
 80146a4:	a917      	add	r1, sp, #92	@ 0x5c
 80146a6:	f001 f925 	bl	80158f4 <rcl_validate_enclave_name>
 80146aa:	4604      	mov	r4, r0
 80146ac:	2800      	cmp	r0, #0
 80146ae:	d1c7      	bne.n	8014640 <rcl_init+0x13c>
 80146b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80146b2:	b9eb      	cbnz	r3, 80146f0 <rcl_init+0x1ec>
 80146b4:	6839      	ldr	r1, [r7, #0]
 80146b6:	694b      	ldr	r3, [r1, #20]
 80146b8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80146ba:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80146be:	f000 fb3f 	bl	8014d40 <rcl_get_security_options_from_environment>
 80146c2:	4604      	mov	r4, r0
 80146c4:	2800      	cmp	r0, #0
 80146c6:	d1bb      	bne.n	8014640 <rcl_init+0x13c>
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	6948      	ldr	r0, [r1, #20]
 80146cc:	3128      	adds	r1, #40	@ 0x28
 80146ce:	3018      	adds	r0, #24
 80146d0:	f7f9 fd70 	bl	800e1b4 <rmw_init>
 80146d4:	4604      	mov	r4, r0
 80146d6:	2800      	cmp	r0, #0
 80146d8:	d0bd      	beq.n	8014656 <rcl_init+0x152>
 80146da:	f7ff fe8f 	bl	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 80146de:	4604      	mov	r4, r0
 80146e0:	e7ae      	b.n	8014640 <rcl_init+0x13c>
 80146e2:	2201      	movs	r2, #1
 80146e4:	461c      	mov	r4, r3
 80146e6:	600a      	str	r2, [r1, #0]
 80146e8:	4613      	mov	r3, r2
 80146ea:	e7c6      	b.n	801467a <rcl_init+0x176>
 80146ec:	240a      	movs	r4, #10
 80146ee:	e7b2      	b.n	8014656 <rcl_init+0x152>
 80146f0:	2401      	movs	r4, #1
 80146f2:	e7a5      	b.n	8014640 <rcl_init+0x13c>
 80146f4:	3024      	adds	r0, #36	@ 0x24
 80146f6:	f004 fe2d 	bl	8019354 <rcl_get_default_domain_id>
 80146fa:	4604      	mov	r4, r0
 80146fc:	2800      	cmp	r0, #0
 80146fe:	d19f      	bne.n	8014640 <rcl_init+0x13c>
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	6958      	ldr	r0, [r3, #20]
 8014704:	e7c1      	b.n	801468a <rcl_init+0x186>
 8014706:	bf00      	nop
 8014708:	2000bd80 	.word	0x2000bd80

0801470c <rcl_get_localhost_only>:
 801470c:	b510      	push	{r4, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	2300      	movs	r3, #0
 8014712:	9301      	str	r3, [sp, #4]
 8014714:	b1b8      	cbz	r0, 8014746 <rcl_get_localhost_only+0x3a>
 8014716:	4604      	mov	r4, r0
 8014718:	a901      	add	r1, sp, #4
 801471a:	480c      	ldr	r0, [pc, #48]	@ (801474c <rcl_get_localhost_only+0x40>)
 801471c:	f002 fcf4 	bl	8017108 <rcutils_get_env>
 8014720:	b110      	cbz	r0, 8014728 <rcl_get_localhost_only+0x1c>
 8014722:	2001      	movs	r0, #1
 8014724:	b002      	add	sp, #8
 8014726:	bd10      	pop	{r4, pc}
 8014728:	9b01      	ldr	r3, [sp, #4]
 801472a:	b113      	cbz	r3, 8014732 <rcl_get_localhost_only+0x26>
 801472c:	781a      	ldrb	r2, [r3, #0]
 801472e:	2a31      	cmp	r2, #49	@ 0x31
 8014730:	d004      	beq.n	801473c <rcl_get_localhost_only+0x30>
 8014732:	2302      	movs	r3, #2
 8014734:	2000      	movs	r0, #0
 8014736:	7023      	strb	r3, [r4, #0]
 8014738:	b002      	add	sp, #8
 801473a:	bd10      	pop	{r4, pc}
 801473c:	785b      	ldrb	r3, [r3, #1]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d1f7      	bne.n	8014732 <rcl_get_localhost_only+0x26>
 8014742:	2301      	movs	r3, #1
 8014744:	e7f6      	b.n	8014734 <rcl_get_localhost_only+0x28>
 8014746:	200b      	movs	r0, #11
 8014748:	b002      	add	sp, #8
 801474a:	bd10      	pop	{r4, pc}
 801474c:	0801dc54 	.word	0x0801dc54

08014750 <rcl_get_zero_initialized_node>:
 8014750:	4a03      	ldr	r2, [pc, #12]	@ (8014760 <rcl_get_zero_initialized_node+0x10>)
 8014752:	4603      	mov	r3, r0
 8014754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014758:	e883 0003 	stmia.w	r3, {r0, r1}
 801475c:	4618      	mov	r0, r3
 801475e:	4770      	bx	lr
 8014760:	0801dc70 	.word	0x0801dc70

08014764 <rcl_node_init>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	b0a9      	sub	sp, #164	@ 0xa4
 801476a:	4604      	mov	r4, r0
 801476c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014770:	a823      	add	r0, sp, #140	@ 0x8c
 8014772:	460e      	mov	r6, r1
 8014774:	4615      	mov	r5, r2
 8014776:	461f      	mov	r7, r3
 8014778:	f005 f860 	bl	801983c <rcl_guard_condition_get_default_options>
 801477c:	f1b8 0f00 	cmp.w	r8, #0
 8014780:	f000 80e6 	beq.w	8014950 <rcl_node_init+0x1ec>
 8014784:	4640      	mov	r0, r8
 8014786:	f7f9 fb5d 	bl	800de44 <rcutils_allocator_is_valid>
 801478a:	2800      	cmp	r0, #0
 801478c:	f000 80e0 	beq.w	8014950 <rcl_node_init+0x1ec>
 8014790:	2e00      	cmp	r6, #0
 8014792:	f000 80dd 	beq.w	8014950 <rcl_node_init+0x1ec>
 8014796:	2d00      	cmp	r5, #0
 8014798:	f000 80da 	beq.w	8014950 <rcl_node_init+0x1ec>
 801479c:	2c00      	cmp	r4, #0
 801479e:	f000 80d7 	beq.w	8014950 <rcl_node_init+0x1ec>
 80147a2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80147a6:	f1b9 0f00 	cmp.w	r9, #0
 80147aa:	f040 80fd 	bne.w	80149a8 <rcl_node_init+0x244>
 80147ae:	2f00      	cmp	r7, #0
 80147b0:	f000 80ce 	beq.w	8014950 <rcl_node_init+0x1ec>
 80147b4:	4638      	mov	r0, r7
 80147b6:	f7ff fe3f 	bl	8014438 <rcl_context_is_valid>
 80147ba:	4682      	mov	sl, r0
 80147bc:	2800      	cmp	r0, #0
 80147be:	f000 80cd 	beq.w	801495c <rcl_node_init+0x1f8>
 80147c2:	464a      	mov	r2, r9
 80147c4:	a922      	add	r1, sp, #136	@ 0x88
 80147c6:	4630      	mov	r0, r6
 80147c8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80147cc:	f003 f8c6 	bl	801795c <rmw_validate_node_name>
 80147d0:	4681      	mov	r9, r0
 80147d2:	2800      	cmp	r0, #0
 80147d4:	f040 80be 	bne.w	8014954 <rcl_node_init+0x1f0>
 80147d8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80147da:	2800      	cmp	r0, #0
 80147dc:	f040 80f0 	bne.w	80149c0 <rcl_node_init+0x25c>
 80147e0:	4628      	mov	r0, r5
 80147e2:	f7eb fd27 	bl	8000234 <strlen>
 80147e6:	2800      	cmp	r0, #0
 80147e8:	f040 80bb 	bne.w	8014962 <rcl_node_init+0x1fe>
 80147ec:	4d7c      	ldr	r5, [pc, #496]	@ (80149e0 <rcl_node_init+0x27c>)
 80147ee:	a922      	add	r1, sp, #136	@ 0x88
 80147f0:	2200      	movs	r2, #0
 80147f2:	4628      	mov	r0, r5
 80147f4:	f003 f894 	bl	8017920 <rmw_validate_namespace>
 80147f8:	4681      	mov	r9, r0
 80147fa:	2800      	cmp	r0, #0
 80147fc:	f040 80aa 	bne.w	8014954 <rcl_node_init+0x1f0>
 8014800:	4682      	mov	sl, r0
 8014802:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014804:	2800      	cmp	r0, #0
 8014806:	f040 80e0 	bne.w	80149ca <rcl_node_init+0x266>
 801480a:	f8d8 3000 	ldr.w	r3, [r8]
 801480e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014812:	2078      	movs	r0, #120	@ 0x78
 8014814:	4798      	blx	r3
 8014816:	4681      	mov	r9, r0
 8014818:	6060      	str	r0, [r4, #4]
 801481a:	2800      	cmp	r0, #0
 801481c:	f000 80ca 	beq.w	80149b4 <rcl_node_init+0x250>
 8014820:	2200      	movs	r2, #0
 8014822:	2300      	movs	r3, #0
 8014824:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8014828:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 801482c:	a808      	add	r0, sp, #32
 801482e:	f000 f907 	bl	8014a40 <rcl_node_get_default_options>
 8014832:	a908      	add	r1, sp, #32
 8014834:	4648      	mov	r0, r9
 8014836:	2268      	movs	r2, #104	@ 0x68
 8014838:	f005 ffab 	bl	801a792 <memcpy>
 801483c:	6861      	ldr	r1, [r4, #4]
 801483e:	6027      	str	r7, [r4, #0]
 8014840:	4640      	mov	r0, r8
 8014842:	f000 f90b 	bl	8014a5c <rcl_node_options_copy>
 8014846:	2800      	cmp	r0, #0
 8014848:	d158      	bne.n	80148fc <rcl_node_init+0x198>
 801484a:	4628      	mov	r0, r5
 801484c:	f7eb fcf2 	bl	8000234 <strlen>
 8014850:	4428      	add	r0, r5
 8014852:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014856:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801485a:	2b2f      	cmp	r3, #47	@ 0x2f
 801485c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	bf0c      	ite	eq
 8014864:	4b5f      	ldreq	r3, [pc, #380]	@ (80149e4 <rcl_node_init+0x280>)
 8014866:	4b60      	ldrne	r3, [pc, #384]	@ (80149e8 <rcl_node_init+0x284>)
 8014868:	9302      	str	r3, [sp, #8]
 801486a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801486e:	9301      	str	r3, [sp, #4]
 8014870:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014874:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014878:	f002 fc6e 	bl	8017158 <rcutils_format_string_limit>
 801487c:	6823      	ldr	r3, [r4, #0]
 801487e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8014882:	6818      	ldr	r0, [r3, #0]
 8014884:	4631      	mov	r1, r6
 8014886:	3028      	adds	r0, #40	@ 0x28
 8014888:	462a      	mov	r2, r5
 801488a:	6866      	ldr	r6, [r4, #4]
 801488c:	f7f9 fe74 	bl	800e578 <rmw_create_node>
 8014890:	6863      	ldr	r3, [r4, #4]
 8014892:	66b0      	str	r0, [r6, #104]	@ 0x68
 8014894:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014896:	2800      	cmp	r0, #0
 8014898:	d032      	beq.n	8014900 <rcl_node_init+0x19c>
 801489a:	f7f9 ff01 	bl	800e6a0 <rmw_node_get_graph_guard_condition>
 801489e:	4681      	mov	r9, r0
 80148a0:	b360      	cbz	r0, 80148fc <rcl_node_init+0x198>
 80148a2:	f8d8 3000 	ldr.w	r3, [r8]
 80148a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80148aa:	6866      	ldr	r6, [r4, #4]
 80148ac:	2008      	movs	r0, #8
 80148ae:	4798      	blx	r3
 80148b0:	6863      	ldr	r3, [r4, #4]
 80148b2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80148b4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80148b8:	f1bb 0f00 	cmp.w	fp, #0
 80148bc:	d020      	beq.n	8014900 <rcl_node_init+0x19c>
 80148be:	a806      	add	r0, sp, #24
 80148c0:	f004 fee0 	bl	8019684 <rcl_get_zero_initialized_guard_condition>
 80148c4:	a806      	add	r0, sp, #24
 80148c6:	c803      	ldmia	r0, {r0, r1}
 80148c8:	6863      	ldr	r3, [r4, #4]
 80148ca:	46c4      	mov	ip, r8
 80148cc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80148d0:	e88b 0003 	stmia.w	fp, {r0, r1}
 80148d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148d8:	ae23      	add	r6, sp, #140	@ 0x8c
 80148da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80148dc:	f8dc 3000 	ldr.w	r3, [ip]
 80148e0:	6033      	str	r3, [r6, #0]
 80148e2:	ab28      	add	r3, sp, #160	@ 0xa0
 80148e4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80148e8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80148ec:	4649      	mov	r1, r9
 80148ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80148f0:	463a      	mov	r2, r7
 80148f2:	4670      	mov	r0, lr
 80148f4:	f004 ff1c 	bl	8019730 <rcl_guard_condition_init_from_rmw>
 80148f8:	4681      	mov	r9, r0
 80148fa:	b328      	cbz	r0, 8014948 <rcl_node_init+0x1e4>
 80148fc:	6863      	ldr	r3, [r4, #4]
 80148fe:	b1f3      	cbz	r3, 801493e <rcl_node_init+0x1da>
 8014900:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014902:	b128      	cbz	r0, 8014910 <rcl_node_init+0x1ac>
 8014904:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014908:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801490c:	4798      	blx	r3
 801490e:	6863      	ldr	r3, [r4, #4]
 8014910:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014912:	b110      	cbz	r0, 801491a <rcl_node_init+0x1b6>
 8014914:	f7f9 fe48 	bl	800e5a8 <rmw_destroy_node>
 8014918:	6863      	ldr	r3, [r4, #4]
 801491a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801491c:	b148      	cbz	r0, 8014932 <rcl_node_init+0x1ce>
 801491e:	f004 ff67 	bl	80197f0 <rcl_guard_condition_fini>
 8014922:	6863      	ldr	r3, [r4, #4]
 8014924:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014928:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801492a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801492e:	4798      	blx	r3
 8014930:	6863      	ldr	r3, [r4, #4]
 8014932:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014936:	4618      	mov	r0, r3
 8014938:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801493c:	4798      	blx	r3
 801493e:	2300      	movs	r3, #0
 8014940:	e9c4 3300 	strd	r3, r3, [r4]
 8014944:	f04f 0901 	mov.w	r9, #1
 8014948:	f1ba 0f00 	cmp.w	sl, #0
 801494c:	d125      	bne.n	801499a <rcl_node_init+0x236>
 801494e:	e001      	b.n	8014954 <rcl_node_init+0x1f0>
 8014950:	f04f 090b 	mov.w	r9, #11
 8014954:	4648      	mov	r0, r9
 8014956:	b029      	add	sp, #164	@ 0xa4
 8014958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801495c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014960:	e7f8      	b.n	8014954 <rcl_node_init+0x1f0>
 8014962:	782b      	ldrb	r3, [r5, #0]
 8014964:	2b2f      	cmp	r3, #47	@ 0x2f
 8014966:	f43f af42 	beq.w	80147ee <rcl_node_init+0x8a>
 801496a:	9503      	str	r5, [sp, #12]
 801496c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	4b1e      	ldr	r3, [pc, #120]	@ (80149ec <rcl_node_init+0x288>)
 8014974:	9302      	str	r3, [sp, #8]
 8014976:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801497a:	9301      	str	r3, [sp, #4]
 801497c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014980:	f002 fbea 	bl	8017158 <rcutils_format_string_limit>
 8014984:	4605      	mov	r5, r0
 8014986:	b340      	cbz	r0, 80149da <rcl_node_init+0x276>
 8014988:	2200      	movs	r2, #0
 801498a:	a922      	add	r1, sp, #136	@ 0x88
 801498c:	9222      	str	r2, [sp, #136]	@ 0x88
 801498e:	f002 ffc7 	bl	8017920 <rmw_validate_namespace>
 8014992:	4681      	mov	r9, r0
 8014994:	2800      	cmp	r0, #0
 8014996:	f43f af34 	beq.w	8014802 <rcl_node_init+0x9e>
 801499a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801499e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80149a2:	4628      	mov	r0, r5
 80149a4:	4798      	blx	r3
 80149a6:	e7d5      	b.n	8014954 <rcl_node_init+0x1f0>
 80149a8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80149ac:	4648      	mov	r0, r9
 80149ae:	b029      	add	sp, #164	@ 0xa4
 80149b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b4:	f04f 090a 	mov.w	r9, #10
 80149b8:	f1ba 0f00 	cmp.w	sl, #0
 80149bc:	d1ed      	bne.n	801499a <rcl_node_init+0x236>
 80149be:	e7c9      	b.n	8014954 <rcl_node_init+0x1f0>
 80149c0:	f003 f81e 	bl	8017a00 <rmw_node_name_validation_result_string>
 80149c4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80149c8:	e7c4      	b.n	8014954 <rcl_node_init+0x1f0>
 80149ca:	f002 ffbb 	bl	8017944 <rmw_namespace_validation_result_string>
 80149ce:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80149d2:	f1ba 0f00 	cmp.w	sl, #0
 80149d6:	d1e0      	bne.n	801499a <rcl_node_init+0x236>
 80149d8:	e7bc      	b.n	8014954 <rcl_node_init+0x1f0>
 80149da:	f04f 090a 	mov.w	r9, #10
 80149de:	e7b9      	b.n	8014954 <rcl_node_init+0x1f0>
 80149e0:	0801d6ac 	.word	0x0801d6ac
 80149e4:	0801d6d4 	.word	0x0801d6d4
 80149e8:	0801d6b0 	.word	0x0801d6b0
 80149ec:	0801dc6c 	.word	0x0801dc6c

080149f0 <rcl_node_is_valid>:
 80149f0:	b130      	cbz	r0, 8014a00 <rcl_node_is_valid+0x10>
 80149f2:	6843      	ldr	r3, [r0, #4]
 80149f4:	b123      	cbz	r3, 8014a00 <rcl_node_is_valid+0x10>
 80149f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80149f8:	b113      	cbz	r3, 8014a00 <rcl_node_is_valid+0x10>
 80149fa:	6800      	ldr	r0, [r0, #0]
 80149fc:	f7ff bd1c 	b.w	8014438 <rcl_context_is_valid>
 8014a00:	2000      	movs	r0, #0
 8014a02:	4770      	bx	lr

08014a04 <rcl_node_get_name>:
 8014a04:	b120      	cbz	r0, 8014a10 <rcl_node_get_name+0xc>
 8014a06:	6840      	ldr	r0, [r0, #4]
 8014a08:	b110      	cbz	r0, 8014a10 <rcl_node_get_name+0xc>
 8014a0a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014a0c:	b100      	cbz	r0, 8014a10 <rcl_node_get_name+0xc>
 8014a0e:	6880      	ldr	r0, [r0, #8]
 8014a10:	4770      	bx	lr
 8014a12:	bf00      	nop

08014a14 <rcl_node_get_namespace>:
 8014a14:	b120      	cbz	r0, 8014a20 <rcl_node_get_namespace+0xc>
 8014a16:	6840      	ldr	r0, [r0, #4]
 8014a18:	b110      	cbz	r0, 8014a20 <rcl_node_get_namespace+0xc>
 8014a1a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014a1c:	b100      	cbz	r0, 8014a20 <rcl_node_get_namespace+0xc>
 8014a1e:	68c0      	ldr	r0, [r0, #12]
 8014a20:	4770      	bx	lr
 8014a22:	bf00      	nop

08014a24 <rcl_node_get_options>:
 8014a24:	b128      	cbz	r0, 8014a32 <rcl_node_get_options+0xe>
 8014a26:	6840      	ldr	r0, [r0, #4]
 8014a28:	b118      	cbz	r0, 8014a32 <rcl_node_get_options+0xe>
 8014a2a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	bf08      	it	eq
 8014a30:	2000      	moveq	r0, #0
 8014a32:	4770      	bx	lr

08014a34 <rcl_node_get_rmw_handle>:
 8014a34:	b110      	cbz	r0, 8014a3c <rcl_node_get_rmw_handle+0x8>
 8014a36:	6840      	ldr	r0, [r0, #4]
 8014a38:	b100      	cbz	r0, 8014a3c <rcl_node_get_rmw_handle+0x8>
 8014a3a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014a3c:	4770      	bx	lr
 8014a3e:	bf00      	nop

08014a40 <rcl_node_get_default_options>:
 8014a40:	b510      	push	{r4, lr}
 8014a42:	2268      	movs	r2, #104	@ 0x68
 8014a44:	4604      	mov	r4, r0
 8014a46:	2100      	movs	r1, #0
 8014a48:	f005 fdda 	bl	801a600 <memset>
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	f7f9 f9eb 	bl	800de28 <rcutils_get_default_allocator>
 8014a52:	2301      	movs	r3, #1
 8014a54:	7523      	strb	r3, [r4, #20]
 8014a56:	4620      	mov	r0, r4
 8014a58:	bd10      	pop	{r4, pc}
 8014a5a:	bf00      	nop

08014a5c <rcl_node_options_copy>:
 8014a5c:	b1d0      	cbz	r0, 8014a94 <rcl_node_options_copy+0x38>
 8014a5e:	b570      	push	{r4, r5, r6, lr}
 8014a60:	460c      	mov	r4, r1
 8014a62:	b1a9      	cbz	r1, 8014a90 <rcl_node_options_copy+0x34>
 8014a64:	4288      	cmp	r0, r1
 8014a66:	4684      	mov	ip, r0
 8014a68:	d012      	beq.n	8014a90 <rcl_node_options_copy+0x34>
 8014a6a:	4605      	mov	r5, r0
 8014a6c:	8a86      	ldrh	r6, [r0, #20]
 8014a6e:	468e      	mov	lr, r1
 8014a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a76:	682b      	ldr	r3, [r5, #0]
 8014a78:	f8ce 3000 	str.w	r3, [lr]
 8014a7c:	f10c 0118 	add.w	r1, ip, #24
 8014a80:	2250      	movs	r2, #80	@ 0x50
 8014a82:	82a6      	strh	r6, [r4, #20]
 8014a84:	f104 0018 	add.w	r0, r4, #24
 8014a88:	f005 fe83 	bl	801a792 <memcpy>
 8014a8c:	2000      	movs	r0, #0
 8014a8e:	bd70      	pop	{r4, r5, r6, pc}
 8014a90:	200b      	movs	r0, #11
 8014a92:	bd70      	pop	{r4, r5, r6, pc}
 8014a94:	200b      	movs	r0, #11
 8014a96:	4770      	bx	lr

08014a98 <rcl_node_resolve_name>:
 8014a98:	b082      	sub	sp, #8
 8014a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a9e:	b091      	sub	sp, #68	@ 0x44
 8014aa0:	ac1a      	add	r4, sp, #104	@ 0x68
 8014aa2:	e884 000c 	stmia.w	r4, {r2, r3}
 8014aa6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d03b      	beq.n	8014b26 <rcl_node_resolve_name+0x8e>
 8014aae:	460c      	mov	r4, r1
 8014ab0:	4605      	mov	r5, r0
 8014ab2:	f7ff ffb7 	bl	8014a24 <rcl_node_get_options>
 8014ab6:	2800      	cmp	r0, #0
 8014ab8:	d037      	beq.n	8014b2a <rcl_node_resolve_name+0x92>
 8014aba:	4628      	mov	r0, r5
 8014abc:	f7ff ffa2 	bl	8014a04 <rcl_node_get_name>
 8014ac0:	4606      	mov	r6, r0
 8014ac2:	4628      	mov	r0, r5
 8014ac4:	f7ff ffa6 	bl	8014a14 <rcl_node_get_namespace>
 8014ac8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014acc:	4681      	mov	r9, r0
 8014ace:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ad2:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014ad4:	46ac      	mov	ip, r5
 8014ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ada:	f8de 3000 	ldr.w	r3, [lr]
 8014ade:	f8cc 3000 	str.w	r3, [ip]
 8014ae2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014ae4:	b1fb      	cbz	r3, 8014b26 <rcl_node_resolve_name+0x8e>
 8014ae6:	468a      	mov	sl, r1
 8014ae8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014aec:	f002 fc8c 	bl	8017408 <rcutils_get_zero_initialized_string_map>
 8014af0:	ab10      	add	r3, sp, #64	@ 0x40
 8014af2:	9008      	str	r0, [sp, #32]
 8014af4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014af8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014afc:	2100      	movs	r1, #0
 8014afe:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014b02:	a808      	add	r0, sp, #32
 8014b04:	f002 fcf8 	bl	80174f8 <rcutils_string_map_init>
 8014b08:	4607      	mov	r7, r0
 8014b0a:	b180      	cbz	r0, 8014b2e <rcl_node_resolve_name+0x96>
 8014b0c:	f7f9 f9a8 	bl	800de60 <rcutils_get_error_string>
 8014b10:	f7f9 f9be 	bl	800de90 <rcutils_reset_error>
 8014b14:	2f0a      	cmp	r7, #10
 8014b16:	bf18      	it	ne
 8014b18:	2701      	movne	r7, #1
 8014b1a:	4638      	mov	r0, r7
 8014b1c:	b011      	add	sp, #68	@ 0x44
 8014b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b22:	b002      	add	sp, #8
 8014b24:	4770      	bx	lr
 8014b26:	270b      	movs	r7, #11
 8014b28:	e7f7      	b.n	8014b1a <rcl_node_resolve_name+0x82>
 8014b2a:	2701      	movs	r7, #1
 8014b2c:	e7f5      	b.n	8014b1a <rcl_node_resolve_name+0x82>
 8014b2e:	9009      	str	r0, [sp, #36]	@ 0x24
 8014b30:	9007      	str	r0, [sp, #28]
 8014b32:	a808      	add	r0, sp, #32
 8014b34:	f004 fda0 	bl	8019678 <rcl_get_default_topic_name_substitutions>
 8014b38:	4607      	mov	r7, r0
 8014b3a:	b1a8      	cbz	r0, 8014b68 <rcl_node_resolve_name+0xd0>
 8014b3c:	280a      	cmp	r0, #10
 8014b3e:	9c07      	ldr	r4, [sp, #28]
 8014b40:	d000      	beq.n	8014b44 <rcl_node_resolve_name+0xac>
 8014b42:	2701      	movs	r7, #1
 8014b44:	a808      	add	r0, sp, #32
 8014b46:	f002 fd17 	bl	8017578 <rcutils_string_map_fini>
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	d13d      	bne.n	8014bca <rcl_node_resolve_name+0x132>
 8014b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014b50:	4659      	mov	r1, fp
 8014b52:	47d0      	blx	sl
 8014b54:	4659      	mov	r1, fp
 8014b56:	4620      	mov	r0, r4
 8014b58:	47d0      	blx	sl
 8014b5a:	f1b8 0f00 	cmp.w	r8, #0
 8014b5e:	d0dc      	beq.n	8014b1a <rcl_node_resolve_name+0x82>
 8014b60:	2f67      	cmp	r7, #103	@ 0x67
 8014b62:	bf08      	it	eq
 8014b64:	2768      	moveq	r7, #104	@ 0x68
 8014b66:	e7d8      	b.n	8014b1a <rcl_node_resolve_name+0x82>
 8014b68:	ab09      	add	r3, sp, #36	@ 0x24
 8014b6a:	9305      	str	r3, [sp, #20]
 8014b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b6e:	46ec      	mov	ip, sp
 8014b70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b74:	682b      	ldr	r3, [r5, #0]
 8014b76:	f8cc 3000 	str.w	r3, [ip]
 8014b7a:	464a      	mov	r2, r9
 8014b7c:	4631      	mov	r1, r6
 8014b7e:	4620      	mov	r0, r4
 8014b80:	ab08      	add	r3, sp, #32
 8014b82:	f004 fc1b 	bl	80193bc <rcl_expand_topic_name>
 8014b86:	4607      	mov	r7, r0
 8014b88:	b9b8      	cbnz	r0, 8014bba <rcl_node_resolve_name+0x122>
 8014b8a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014b8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8014b8e:	4602      	mov	r2, r0
 8014b90:	a90a      	add	r1, sp, #40	@ 0x28
 8014b92:	4620      	mov	r0, r4
 8014b94:	f002 fe00 	bl	8017798 <rmw_validate_full_topic_name>
 8014b98:	b988      	cbnz	r0, 8014bbe <rcl_node_resolve_name+0x126>
 8014b9a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014b9c:	b9d5      	cbnz	r5, 8014bd4 <rcl_node_resolve_name+0x13c>
 8014b9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014ba0:	a808      	add	r0, sp, #32
 8014ba2:	601c      	str	r4, [r3, #0]
 8014ba4:	f002 fce8 	bl	8017578 <rcutils_string_map_fini>
 8014ba8:	4607      	mov	r7, r0
 8014baa:	b1a8      	cbz	r0, 8014bd8 <rcl_node_resolve_name+0x140>
 8014bac:	f7f9 f958 	bl	800de60 <rcutils_get_error_string>
 8014bb0:	462c      	mov	r4, r5
 8014bb2:	f7f9 f96d 	bl	800de90 <rcutils_reset_error>
 8014bb6:	2701      	movs	r7, #1
 8014bb8:	e7c9      	b.n	8014b4e <rcl_node_resolve_name+0xb6>
 8014bba:	9c07      	ldr	r4, [sp, #28]
 8014bbc:	e7c2      	b.n	8014b44 <rcl_node_resolve_name+0xac>
 8014bbe:	f7f9 f94f 	bl	800de60 <rcutils_get_error_string>
 8014bc2:	2701      	movs	r7, #1
 8014bc4:	f7f9 f964 	bl	800de90 <rcutils_reset_error>
 8014bc8:	e7bc      	b.n	8014b44 <rcl_node_resolve_name+0xac>
 8014bca:	f7f9 f949 	bl	800de60 <rcutils_get_error_string>
 8014bce:	f7f9 f95f 	bl	800de90 <rcutils_reset_error>
 8014bd2:	e7bc      	b.n	8014b4e <rcl_node_resolve_name+0xb6>
 8014bd4:	2767      	movs	r7, #103	@ 0x67
 8014bd6:	e7b5      	b.n	8014b44 <rcl_node_resolve_name+0xac>
 8014bd8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014bda:	4659      	mov	r1, fp
 8014bdc:	47d0      	blx	sl
 8014bde:	4659      	mov	r1, fp
 8014be0:	4638      	mov	r0, r7
 8014be2:	47d0      	blx	sl
 8014be4:	e799      	b.n	8014b1a <rcl_node_resolve_name+0x82>
 8014be6:	bf00      	nop

08014be8 <exact_match_lookup>:
 8014be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bea:	f102 0708 	add.w	r7, r2, #8
 8014bee:	460b      	mov	r3, r1
 8014bf0:	4614      	mov	r4, r2
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014bf8:	b085      	sub	sp, #20
 8014bfa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	4919      	ldr	r1, [pc, #100]	@ (8014c68 <exact_match_lookup+0x80>)
 8014c02:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014c06:	f002 fa99 	bl	801713c <rcutils_join_path>
 8014c0a:	7833      	ldrb	r3, [r6, #0]
 8014c0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8014c0e:	4605      	mov	r5, r0
 8014c10:	d023      	beq.n	8014c5a <exact_match_lookup+0x72>
 8014c12:	f104 030c 	add.w	r3, r4, #12
 8014c16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014c1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014c1e:	1c70      	adds	r0, r6, #1
 8014c20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014c24:	f002 fa90 	bl	8017148 <rcutils_to_native_path>
 8014c28:	4606      	mov	r6, r0
 8014c2a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014c2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c32:	4631      	mov	r1, r6
 8014c34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f002 fa7f 	bl	801713c <rcutils_join_path>
 8014c3e:	6862      	ldr	r2, [r4, #4]
 8014c40:	6921      	ldr	r1, [r4, #16]
 8014c42:	4603      	mov	r3, r0
 8014c44:	4630      	mov	r0, r6
 8014c46:	461e      	mov	r6, r3
 8014c48:	4790      	blx	r2
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	6863      	ldr	r3, [r4, #4]
 8014c4e:	6921      	ldr	r1, [r4, #16]
 8014c50:	4798      	blx	r3
 8014c52:	4635      	mov	r5, r6
 8014c54:	4628      	mov	r0, r5
 8014c56:	b005      	add	sp, #20
 8014c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c5a:	7873      	ldrb	r3, [r6, #1]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d1d8      	bne.n	8014c12 <exact_match_lookup+0x2a>
 8014c60:	4628      	mov	r0, r5
 8014c62:	b005      	add	sp, #20
 8014c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c66:	bf00      	nop
 8014c68:	0801dcb4 	.word	0x0801dcb4

08014c6c <rcl_get_secure_root>:
 8014c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c70:	b085      	sub	sp, #20
 8014c72:	b168      	cbz	r0, 8014c90 <rcl_get_secure_root+0x24>
 8014c74:	4607      	mov	r7, r0
 8014c76:	4608      	mov	r0, r1
 8014c78:	460c      	mov	r4, r1
 8014c7a:	f7f9 f8e3 	bl	800de44 <rcutils_allocator_is_valid>
 8014c7e:	b138      	cbz	r0, 8014c90 <rcl_get_secure_root+0x24>
 8014c80:	2300      	movs	r3, #0
 8014c82:	482d      	ldr	r0, [pc, #180]	@ (8014d38 <rcl_get_secure_root+0xcc>)
 8014c84:	9303      	str	r3, [sp, #12]
 8014c86:	a903      	add	r1, sp, #12
 8014c88:	f002 fa3e 	bl	8017108 <rcutils_get_env>
 8014c8c:	4605      	mov	r5, r0
 8014c8e:	b120      	cbz	r0, 8014c9a <rcl_get_secure_root+0x2e>
 8014c90:	2500      	movs	r5, #0
 8014c92:	4628      	mov	r0, r5
 8014c94:	b005      	add	sp, #20
 8014c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c9a:	9b03      	ldr	r3, [sp, #12]
 8014c9c:	781a      	ldrb	r2, [r3, #0]
 8014c9e:	2a00      	cmp	r2, #0
 8014ca0:	d0f6      	beq.n	8014c90 <rcl_get_secure_root+0x24>
 8014ca2:	f104 090c 	add.w	r9, r4, #12
 8014ca6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014caa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014cb4:	f002 fb6a 	bl	801738c <rcutils_strdup>
 8014cb8:	4680      	mov	r8, r0
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d0e8      	beq.n	8014c90 <rcl_get_secure_root+0x24>
 8014cbe:	481f      	ldr	r0, [pc, #124]	@ (8014d3c <rcl_get_secure_root+0xd0>)
 8014cc0:	9503      	str	r5, [sp, #12]
 8014cc2:	a903      	add	r1, sp, #12
 8014cc4:	f002 fa20 	bl	8017108 <rcutils_get_env>
 8014cc8:	b160      	cbz	r0, 8014ce4 <rcl_get_secure_root+0x78>
 8014cca:	2600      	movs	r6, #0
 8014ccc:	6863      	ldr	r3, [r4, #4]
 8014cce:	6921      	ldr	r1, [r4, #16]
 8014cd0:	4630      	mov	r0, r6
 8014cd2:	4798      	blx	r3
 8014cd4:	4640      	mov	r0, r8
 8014cd6:	6863      	ldr	r3, [r4, #4]
 8014cd8:	6921      	ldr	r1, [r4, #16]
 8014cda:	4798      	blx	r3
 8014cdc:	4628      	mov	r0, r5
 8014cde:	b005      	add	sp, #20
 8014ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ce4:	9b03      	ldr	r3, [sp, #12]
 8014ce6:	781e      	ldrb	r6, [r3, #0]
 8014ce8:	b1f6      	cbz	r6, 8014d28 <rcl_get_secure_root+0xbc>
 8014cea:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014cee:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014cf8:	f002 fb48 	bl	801738c <rcutils_strdup>
 8014cfc:	4606      	mov	r6, r0
 8014cfe:	2800      	cmp	r0, #0
 8014d00:	d0e3      	beq.n	8014cca <rcl_get_secure_root+0x5e>
 8014d02:	4622      	mov	r2, r4
 8014d04:	4641      	mov	r1, r8
 8014d06:	f7ff ff6f 	bl	8014be8 <exact_match_lookup>
 8014d0a:	4605      	mov	r5, r0
 8014d0c:	2d00      	cmp	r5, #0
 8014d0e:	d0dd      	beq.n	8014ccc <rcl_get_secure_root+0x60>
 8014d10:	4628      	mov	r0, r5
 8014d12:	f002 fa11 	bl	8017138 <rcutils_is_directory>
 8014d16:	4603      	mov	r3, r0
 8014d18:	2800      	cmp	r0, #0
 8014d1a:	d1d7      	bne.n	8014ccc <rcl_get_secure_root+0x60>
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	6921      	ldr	r1, [r4, #16]
 8014d20:	461d      	mov	r5, r3
 8014d22:	6863      	ldr	r3, [r4, #4]
 8014d24:	4798      	blx	r3
 8014d26:	e7d1      	b.n	8014ccc <rcl_get_secure_root+0x60>
 8014d28:	4622      	mov	r2, r4
 8014d2a:	4638      	mov	r0, r7
 8014d2c:	4641      	mov	r1, r8
 8014d2e:	f7ff ff5b 	bl	8014be8 <exact_match_lookup>
 8014d32:	4605      	mov	r5, r0
 8014d34:	e7ea      	b.n	8014d0c <rcl_get_secure_root+0xa0>
 8014d36:	bf00      	nop
 8014d38:	0801dcc0 	.word	0x0801dcc0
 8014d3c:	0801dcd8 	.word	0x0801dcd8

08014d40 <rcl_get_security_options_from_environment>:
 8014d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	2300      	movs	r3, #0
 8014d48:	4606      	mov	r6, r0
 8014d4a:	460f      	mov	r7, r1
 8014d4c:	4820      	ldr	r0, [pc, #128]	@ (8014dd0 <rcl_get_security_options_from_environment+0x90>)
 8014d4e:	9301      	str	r3, [sp, #4]
 8014d50:	a901      	add	r1, sp, #4
 8014d52:	4690      	mov	r8, r2
 8014d54:	f002 f9d8 	bl	8017108 <rcutils_get_env>
 8014d58:	b120      	cbz	r0, 8014d64 <rcl_get_security_options_from_environment+0x24>
 8014d5a:	2501      	movs	r5, #1
 8014d5c:	4628      	mov	r0, r5
 8014d5e:	b002      	add	sp, #8
 8014d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d64:	491b      	ldr	r1, [pc, #108]	@ (8014dd4 <rcl_get_security_options_from_environment+0x94>)
 8014d66:	4604      	mov	r4, r0
 8014d68:	9801      	ldr	r0, [sp, #4]
 8014d6a:	f7eb fa59 	bl	8000220 <strcmp>
 8014d6e:	4605      	mov	r5, r0
 8014d70:	b9e8      	cbnz	r0, 8014dae <rcl_get_security_options_from_environment+0x6e>
 8014d72:	9001      	str	r0, [sp, #4]
 8014d74:	f1b8 0f00 	cmp.w	r8, #0
 8014d78:	d020      	beq.n	8014dbc <rcl_get_security_options_from_environment+0x7c>
 8014d7a:	4817      	ldr	r0, [pc, #92]	@ (8014dd8 <rcl_get_security_options_from_environment+0x98>)
 8014d7c:	a901      	add	r1, sp, #4
 8014d7e:	f002 f9c3 	bl	8017108 <rcutils_get_env>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d1e9      	bne.n	8014d5a <rcl_get_security_options_from_environment+0x1a>
 8014d86:	4915      	ldr	r1, [pc, #84]	@ (8014ddc <rcl_get_security_options_from_environment+0x9c>)
 8014d88:	9801      	ldr	r0, [sp, #4]
 8014d8a:	f7eb fa49 	bl	8000220 <strcmp>
 8014d8e:	fab0 f080 	clz	r0, r0
 8014d92:	0940      	lsrs	r0, r0, #5
 8014d94:	f888 0000 	strb.w	r0, [r8]
 8014d98:	4639      	mov	r1, r7
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f7ff ff66 	bl	8014c6c <rcl_get_secure_root>
 8014da0:	b170      	cbz	r0, 8014dc0 <rcl_get_security_options_from_environment+0x80>
 8014da2:	f8c8 0004 	str.w	r0, [r8, #4]
 8014da6:	4628      	mov	r0, r5
 8014da8:	b002      	add	sp, #8
 8014daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dae:	4625      	mov	r5, r4
 8014db0:	4628      	mov	r0, r5
 8014db2:	f888 4000 	strb.w	r4, [r8]
 8014db6:	b002      	add	sp, #8
 8014db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dbc:	250b      	movs	r5, #11
 8014dbe:	e7cd      	b.n	8014d5c <rcl_get_security_options_from_environment+0x1c>
 8014dc0:	f898 5000 	ldrb.w	r5, [r8]
 8014dc4:	f1a5 0501 	sub.w	r5, r5, #1
 8014dc8:	fab5 f585 	clz	r5, r5
 8014dcc:	096d      	lsrs	r5, r5, #5
 8014dce:	e7c5      	b.n	8014d5c <rcl_get_security_options_from_environment+0x1c>
 8014dd0:	0801dc78 	.word	0x0801dc78
 8014dd4:	0801dc8c 	.word	0x0801dc8c
 8014dd8:	0801dc94 	.word	0x0801dc94
 8014ddc:	0801dcac 	.word	0x0801dcac

08014de0 <rcl_get_zero_initialized_service>:
 8014de0:	4b01      	ldr	r3, [pc, #4]	@ (8014de8 <rcl_get_zero_initialized_service+0x8>)
 8014de2:	6818      	ldr	r0, [r3, #0]
 8014de4:	4770      	bx	lr
 8014de6:	bf00      	nop
 8014de8:	0801dcf8 	.word	0x0801dcf8

08014dec <rcl_service_init>:
 8014dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014df0:	b089      	sub	sp, #36	@ 0x24
 8014df2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8014df4:	b1c5      	cbz	r5, 8014e28 <rcl_service_init+0x3c>
 8014df6:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	4648      	mov	r0, r9
 8014dfe:	4688      	mov	r8, r1
 8014e00:	4617      	mov	r7, r2
 8014e02:	461e      	mov	r6, r3
 8014e04:	f7f9 f81e 	bl	800de44 <rcutils_allocator_is_valid>
 8014e08:	b170      	cbz	r0, 8014e28 <rcl_service_init+0x3c>
 8014e0a:	b16c      	cbz	r4, 8014e28 <rcl_service_init+0x3c>
 8014e0c:	4640      	mov	r0, r8
 8014e0e:	f7ff fdef 	bl	80149f0 <rcl_node_is_valid>
 8014e12:	2800      	cmp	r0, #0
 8014e14:	d058      	beq.n	8014ec8 <rcl_service_init+0xdc>
 8014e16:	b13f      	cbz	r7, 8014e28 <rcl_service_init+0x3c>
 8014e18:	b136      	cbz	r6, 8014e28 <rcl_service_init+0x3c>
 8014e1a:	6823      	ldr	r3, [r4, #0]
 8014e1c:	b14b      	cbz	r3, 8014e32 <rcl_service_init+0x46>
 8014e1e:	2664      	movs	r6, #100	@ 0x64
 8014e20:	4630      	mov	r0, r6
 8014e22:	b009      	add	sp, #36	@ 0x24
 8014e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e28:	260b      	movs	r6, #11
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	b009      	add	sp, #36	@ 0x24
 8014e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e32:	aa07      	add	r2, sp, #28
 8014e34:	9205      	str	r2, [sp, #20]
 8014e36:	2201      	movs	r2, #1
 8014e38:	9304      	str	r3, [sp, #16]
 8014e3a:	9203      	str	r2, [sp, #12]
 8014e3c:	9307      	str	r3, [sp, #28]
 8014e3e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8014e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014e46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e4a:	4631      	mov	r1, r6
 8014e4c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014e50:	4640      	mov	r0, r8
 8014e52:	f7ff fe21 	bl	8014a98 <rcl_node_resolve_name>
 8014e56:	2800      	cmp	r0, #0
 8014e58:	d145      	bne.n	8014ee6 <rcl_service_init+0xfa>
 8014e5a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014e5c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014e5e:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8014e62:	4798      	blx	r3
 8014e64:	6020      	str	r0, [r4, #0]
 8014e66:	2800      	cmp	r0, #0
 8014e68:	d043      	beq.n	8014ef2 <rcl_service_init+0x106>
 8014e6a:	4640      	mov	r0, r8
 8014e6c:	f7ff fde2 	bl	8014a34 <rcl_node_get_rmw_handle>
 8014e70:	462b      	mov	r3, r5
 8014e72:	9a07      	ldr	r2, [sp, #28]
 8014e74:	6826      	ldr	r6, [r4, #0]
 8014e76:	4639      	mov	r1, r7
 8014e78:	f7f9 fdbc 	bl	800e9f4 <rmw_create_service>
 8014e7c:	6823      	ldr	r3, [r4, #0]
 8014e7e:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8014e82:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014e86:	b330      	cbz	r0, 8014ed6 <rcl_service_init+0xea>
 8014e88:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8014e8c:	f7f9 fed8 	bl	800ec40 <rmw_service_request_subscription_get_actual_qos>
 8014e90:	b9f8      	cbnz	r0, 8014ed2 <rcl_service_init+0xe6>
 8014e92:	6821      	ldr	r1, [r4, #0]
 8014e94:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8014e98:	31b8      	adds	r1, #184	@ 0xb8
 8014e9a:	f7f9 fec1 	bl	800ec20 <rmw_service_response_publisher_get_actual_qos>
 8014e9e:	4606      	mov	r6, r0
 8014ea0:	b9b8      	cbnz	r0, 8014ed2 <rcl_service_init+0xe6>
 8014ea2:	6820      	ldr	r0, [r4, #0]
 8014ea4:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8014ea8:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 8014eac:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 8014eb0:	2268      	movs	r2, #104	@ 0x68
 8014eb2:	4629      	mov	r1, r5
 8014eb4:	f005 fc6d 	bl	801a792 <memcpy>
 8014eb8:	9807      	ldr	r0, [sp, #28]
 8014eba:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8014ebc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014ebe:	4798      	blx	r3
 8014ec0:	4630      	mov	r0, r6
 8014ec2:	b009      	add	sp, #36	@ 0x24
 8014ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ec8:	26c8      	movs	r6, #200	@ 0xc8
 8014eca:	4630      	mov	r0, r6
 8014ecc:	b009      	add	sp, #36	@ 0x24
 8014ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ed2:	6823      	ldr	r3, [r4, #0]
 8014ed4:	b12b      	cbz	r3, 8014ee2 <rcl_service_init+0xf6>
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8014eda:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8014edc:	4790      	blx	r2
 8014ede:	2300      	movs	r3, #0
 8014ee0:	6023      	str	r3, [r4, #0]
 8014ee2:	2601      	movs	r6, #1
 8014ee4:	e7e8      	b.n	8014eb8 <rcl_service_init+0xcc>
 8014ee6:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8014eea:	2b01      	cmp	r3, #1
 8014eec:	d903      	bls.n	8014ef6 <rcl_service_init+0x10a>
 8014eee:	280a      	cmp	r0, #10
 8014ef0:	d1f7      	bne.n	8014ee2 <rcl_service_init+0xf6>
 8014ef2:	260a      	movs	r6, #10
 8014ef4:	e7e0      	b.n	8014eb8 <rcl_service_init+0xcc>
 8014ef6:	2668      	movs	r6, #104	@ 0x68
 8014ef8:	e7de      	b.n	8014eb8 <rcl_service_init+0xcc>
 8014efa:	bf00      	nop

08014efc <rcl_service_get_default_options>:
 8014efc:	b530      	push	{r4, r5, lr}
 8014efe:	4d0f      	ldr	r5, [pc, #60]	@ (8014f3c <rcl_service_get_default_options+0x40>)
 8014f00:	490f      	ldr	r1, [pc, #60]	@ (8014f40 <rcl_service_get_default_options+0x44>)
 8014f02:	b087      	sub	sp, #28
 8014f04:	4604      	mov	r4, r0
 8014f06:	2250      	movs	r2, #80	@ 0x50
 8014f08:	4628      	mov	r0, r5
 8014f0a:	f005 fc42 	bl	801a792 <memcpy>
 8014f0e:	4668      	mov	r0, sp
 8014f10:	f7f8 ff8a 	bl	800de28 <rcutils_get_default_allocator>
 8014f14:	46ec      	mov	ip, sp
 8014f16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f1a:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014f1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014f22:	2268      	movs	r2, #104	@ 0x68
 8014f24:	f8dc 3000 	ldr.w	r3, [ip]
 8014f28:	f8ce 3000 	str.w	r3, [lr]
 8014f2c:	4629      	mov	r1, r5
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f005 fc2f 	bl	801a792 <memcpy>
 8014f34:	4620      	mov	r0, r4
 8014f36:	b007      	add	sp, #28
 8014f38:	bd30      	pop	{r4, r5, pc}
 8014f3a:	bf00      	nop
 8014f3c:	2000bd88 	.word	0x2000bd88
 8014f40:	0801dd00 	.word	0x0801dd00

08014f44 <rcl_service_get_rmw_handle>:
 8014f44:	b118      	cbz	r0, 8014f4e <rcl_service_get_rmw_handle+0xa>
 8014f46:	6800      	ldr	r0, [r0, #0]
 8014f48:	b108      	cbz	r0, 8014f4e <rcl_service_get_rmw_handle+0xa>
 8014f4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014f4e:	4770      	bx	lr

08014f50 <rcl_take_request>:
 8014f50:	b570      	push	{r4, r5, r6, lr}
 8014f52:	468e      	mov	lr, r1
 8014f54:	460c      	mov	r4, r1
 8014f56:	4616      	mov	r6, r2
 8014f58:	4605      	mov	r5, r0
 8014f5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f5e:	b08c      	sub	sp, #48	@ 0x30
 8014f60:	f10d 0c18 	add.w	ip, sp, #24
 8014f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f68:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014f6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014f70:	b30d      	cbz	r5, 8014fb6 <rcl_take_request+0x66>
 8014f72:	682b      	ldr	r3, [r5, #0]
 8014f74:	b1fb      	cbz	r3, 8014fb6 <rcl_take_request+0x66>
 8014f76:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014f7a:	b1e0      	cbz	r0, 8014fb6 <rcl_take_request+0x66>
 8014f7c:	b336      	cbz	r6, 8014fcc <rcl_take_request+0x7c>
 8014f7e:	2300      	movs	r3, #0
 8014f80:	f88d 3007 	strb.w	r3, [sp, #7]
 8014f84:	4632      	mov	r2, r6
 8014f86:	f10d 0307 	add.w	r3, sp, #7
 8014f8a:	a902      	add	r1, sp, #8
 8014f8c:	f002 ff5a 	bl	8017e44 <rmw_take_request>
 8014f90:	4605      	mov	r5, r0
 8014f92:	b198      	cbz	r0, 8014fbc <rcl_take_request+0x6c>
 8014f94:	280a      	cmp	r0, #10
 8014f96:	bf18      	it	ne
 8014f98:	2501      	movne	r5, #1
 8014f9a:	f10d 0e18 	add.w	lr, sp, #24
 8014f9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014fa2:	46a4      	mov	ip, r4
 8014fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014fa8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014fac:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	b00c      	add	sp, #48	@ 0x30
 8014fb4:	bd70      	pop	{r4, r5, r6, pc}
 8014fb6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014fba:	e7ee      	b.n	8014f9a <rcl_take_request+0x4a>
 8014fbc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014fc0:	f240 2359 	movw	r3, #601	@ 0x259
 8014fc4:	2a00      	cmp	r2, #0
 8014fc6:	bf08      	it	eq
 8014fc8:	461d      	moveq	r5, r3
 8014fca:	e7e6      	b.n	8014f9a <rcl_take_request+0x4a>
 8014fcc:	250b      	movs	r5, #11
 8014fce:	e7e4      	b.n	8014f9a <rcl_take_request+0x4a>

08014fd0 <rcl_send_response>:
 8014fd0:	b170      	cbz	r0, 8014ff0 <rcl_send_response+0x20>
 8014fd2:	6800      	ldr	r0, [r0, #0]
 8014fd4:	b160      	cbz	r0, 8014ff0 <rcl_send_response+0x20>
 8014fd6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014fda:	b148      	cbz	r0, 8014ff0 <rcl_send_response+0x20>
 8014fdc:	b159      	cbz	r1, 8014ff6 <rcl_send_response+0x26>
 8014fde:	b510      	push	{r4, lr}
 8014fe0:	b15a      	cbz	r2, 8014ffa <rcl_send_response+0x2a>
 8014fe2:	f002 ff8d 	bl	8017f00 <rmw_send_response>
 8014fe6:	b110      	cbz	r0, 8014fee <rcl_send_response+0x1e>
 8014fe8:	2802      	cmp	r0, #2
 8014fea:	bf18      	it	ne
 8014fec:	2001      	movne	r0, #1
 8014fee:	bd10      	pop	{r4, pc}
 8014ff0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014ff4:	4770      	bx	lr
 8014ff6:	200b      	movs	r0, #11
 8014ff8:	4770      	bx	lr
 8014ffa:	200b      	movs	r0, #11
 8014ffc:	bd10      	pop	{r4, pc}
 8014ffe:	bf00      	nop

08015000 <rcl_service_is_valid>:
 8015000:	b130      	cbz	r0, 8015010 <rcl_service_is_valid+0x10>
 8015002:	6800      	ldr	r0, [r0, #0]
 8015004:	b120      	cbz	r0, 8015010 <rcl_service_is_valid+0x10>
 8015006:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801500a:	3800      	subs	r0, #0
 801500c:	bf18      	it	ne
 801500e:	2001      	movne	r0, #1
 8015010:	4770      	bx	lr
 8015012:	bf00      	nop

08015014 <rcl_take>:
 8015014:	2800      	cmp	r0, #0
 8015016:	d04a      	beq.n	80150ae <rcl_take+0x9a>
 8015018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801501c:	4604      	mov	r4, r0
 801501e:	6800      	ldr	r0, [r0, #0]
 8015020:	b0a4      	sub	sp, #144	@ 0x90
 8015022:	2800      	cmp	r0, #0
 8015024:	d03b      	beq.n	801509e <rcl_take+0x8a>
 8015026:	461f      	mov	r7, r3
 8015028:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 801502c:	2b00      	cmp	r3, #0
 801502e:	d036      	beq.n	801509e <rcl_take+0x8a>
 8015030:	460e      	mov	r6, r1
 8015032:	2900      	cmp	r1, #0
 8015034:	d039      	beq.n	80150aa <rcl_take+0x96>
 8015036:	4615      	mov	r5, r2
 8015038:	2a00      	cmp	r2, #0
 801503a:	d03c      	beq.n	80150b6 <rcl_take+0xa2>
 801503c:	a802      	add	r0, sp, #8
 801503e:	f002 fba3 	bl	8017788 <rmw_get_zero_initialized_message_info>
 8015042:	f10d 0c08 	add.w	ip, sp, #8
 8015046:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801504a:	46ae      	mov	lr, r5
 801504c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015050:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015054:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015058:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801505c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015060:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8015064:	f04f 0800 	mov.w	r8, #0
 8015068:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801506c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8015070:	6822      	ldr	r2, [r4, #0]
 8015072:	462b      	mov	r3, r5
 8015074:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8015078:	9700      	str	r7, [sp, #0]
 801507a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801507e:	4631      	mov	r1, r6
 8015080:	f002 ffe4 	bl	801804c <rmw_take_with_info>
 8015084:	4603      	mov	r3, r0
 8015086:	b9c0      	cbnz	r0, 80150ba <rcl_take+0xa6>
 8015088:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801508c:	f240 1291 	movw	r2, #401	@ 0x191
 8015090:	2900      	cmp	r1, #0
 8015092:	bf08      	it	eq
 8015094:	4613      	moveq	r3, r2
 8015096:	4618      	mov	r0, r3
 8015098:	b024      	add	sp, #144	@ 0x90
 801509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801509e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80150a2:	4618      	mov	r0, r3
 80150a4:	b024      	add	sp, #144	@ 0x90
 80150a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150aa:	230b      	movs	r3, #11
 80150ac:	e7f3      	b.n	8015096 <rcl_take+0x82>
 80150ae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80150b2:	4618      	mov	r0, r3
 80150b4:	4770      	bx	lr
 80150b6:	ad14      	add	r5, sp, #80	@ 0x50
 80150b8:	e7c0      	b.n	801503c <rcl_take+0x28>
 80150ba:	f7ff f99f 	bl	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 80150be:	4603      	mov	r3, r0
 80150c0:	e7e9      	b.n	8015096 <rcl_take+0x82>
 80150c2:	bf00      	nop

080150c4 <rcl_subscription_get_rmw_handle>:
 80150c4:	b118      	cbz	r0, 80150ce <rcl_subscription_get_rmw_handle+0xa>
 80150c6:	6800      	ldr	r0, [r0, #0]
 80150c8:	b108      	cbz	r0, 80150ce <rcl_subscription_get_rmw_handle+0xa>
 80150ca:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80150ce:	4770      	bx	lr

080150d0 <rcl_subscription_is_valid>:
 80150d0:	b130      	cbz	r0, 80150e0 <rcl_subscription_is_valid+0x10>
 80150d2:	6800      	ldr	r0, [r0, #0]
 80150d4:	b120      	cbz	r0, 80150e0 <rcl_subscription_is_valid+0x10>
 80150d6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80150da:	3800      	subs	r0, #0
 80150dc:	bf18      	it	ne
 80150de:	2001      	movne	r0, #1
 80150e0:	4770      	bx	lr
 80150e2:	bf00      	nop

080150e4 <rcl_get_system_time>:
 80150e4:	4608      	mov	r0, r1
 80150e6:	f7f8 beef 	b.w	800dec8 <rcutils_system_time_now>
 80150ea:	bf00      	nop

080150ec <rcl_get_steady_time>:
 80150ec:	4608      	mov	r0, r1
 80150ee:	f7f8 bf13 	b.w	800df18 <rcutils_steady_time_now>
 80150f2:	bf00      	nop

080150f4 <rcl_get_ros_time>:
 80150f4:	7a03      	ldrb	r3, [r0, #8]
 80150f6:	b510      	push	{r4, lr}
 80150f8:	460c      	mov	r4, r1
 80150fa:	b133      	cbz	r3, 801510a <rcl_get_ros_time+0x16>
 80150fc:	2105      	movs	r1, #5
 80150fe:	f001 ff5f 	bl	8016fc0 <__atomic_load_8>
 8015102:	e9c4 0100 	strd	r0, r1, [r4]
 8015106:	2000      	movs	r0, #0
 8015108:	bd10      	pop	{r4, pc}
 801510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801510e:	4608      	mov	r0, r1
 8015110:	f7f8 beda 	b.w	800dec8 <rcutils_system_time_now>

08015114 <rcl_clock_init>:
 8015114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015116:	4605      	mov	r5, r0
 8015118:	4610      	mov	r0, r2
 801511a:	4614      	mov	r4, r2
 801511c:	460e      	mov	r6, r1
 801511e:	f7f8 fe91 	bl	800de44 <rcutils_allocator_is_valid>
 8015122:	b128      	cbz	r0, 8015130 <rcl_clock_init+0x1c>
 8015124:	2d03      	cmp	r5, #3
 8015126:	d803      	bhi.n	8015130 <rcl_clock_init+0x1c>
 8015128:	e8df f005 	tbb	[pc, r5]
 801512c:	06532e1d 	.word	0x06532e1d
 8015130:	f04f 0c0b 	mov.w	ip, #11
 8015134:	4660      	mov	r0, ip
 8015136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015138:	2e00      	cmp	r6, #0
 801513a:	d0f9      	beq.n	8015130 <rcl_clock_init+0x1c>
 801513c:	2c00      	cmp	r4, #0
 801513e:	d0f7      	beq.n	8015130 <rcl_clock_init+0x1c>
 8015140:	2300      	movs	r3, #0
 8015142:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015146:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80151fc <rcl_clock_init+0xe8>
 801514a:	6133      	str	r3, [r6, #16]
 801514c:	f106 0514 	add.w	r5, r6, #20
 8015150:	469c      	mov	ip, r3
 8015152:	2703      	movs	r7, #3
 8015154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015158:	6823      	ldr	r3, [r4, #0]
 801515a:	602b      	str	r3, [r5, #0]
 801515c:	7037      	strb	r7, [r6, #0]
 801515e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015162:	4660      	mov	r0, ip
 8015164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015166:	2e00      	cmp	r6, #0
 8015168:	d0e2      	beq.n	8015130 <rcl_clock_init+0x1c>
 801516a:	2300      	movs	r3, #0
 801516c:	7033      	strb	r3, [r6, #0]
 801516e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015172:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015176:	469c      	mov	ip, r3
 8015178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801517a:	f106 0514 	add.w	r5, r6, #20
 801517e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015180:	6823      	ldr	r3, [r4, #0]
 8015182:	602b      	str	r3, [r5, #0]
 8015184:	4660      	mov	r0, ip
 8015186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015188:	2e00      	cmp	r6, #0
 801518a:	d0d1      	beq.n	8015130 <rcl_clock_init+0x1c>
 801518c:	2c00      	cmp	r4, #0
 801518e:	d0cf      	beq.n	8015130 <rcl_clock_init+0x1c>
 8015190:	2700      	movs	r7, #0
 8015192:	7037      	strb	r7, [r6, #0]
 8015194:	46a4      	mov	ip, r4
 8015196:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801519a:	f106 0514 	add.w	r5, r6, #20
 801519e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80151a2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80151a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80151a8:	f8dc 3000 	ldr.w	r3, [ip]
 80151ac:	602b      	str	r3, [r5, #0]
 80151ae:	6921      	ldr	r1, [r4, #16]
 80151b0:	6823      	ldr	r3, [r4, #0]
 80151b2:	2010      	movs	r0, #16
 80151b4:	4798      	blx	r3
 80151b6:	6130      	str	r0, [r6, #16]
 80151b8:	b1d0      	cbz	r0, 80151f0 <rcl_clock_init+0xdc>
 80151ba:	2200      	movs	r2, #0
 80151bc:	2300      	movs	r3, #0
 80151be:	e9c0 2300 	strd	r2, r3, [r0]
 80151c2:	2301      	movs	r3, #1
 80151c4:	7207      	strb	r7, [r0, #8]
 80151c6:	4a0c      	ldr	r2, [pc, #48]	@ (80151f8 <rcl_clock_init+0xe4>)
 80151c8:	7033      	strb	r3, [r6, #0]
 80151ca:	46bc      	mov	ip, r7
 80151cc:	60f2      	str	r2, [r6, #12]
 80151ce:	4660      	mov	r0, ip
 80151d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151d2:	2e00      	cmp	r6, #0
 80151d4:	d0ac      	beq.n	8015130 <rcl_clock_init+0x1c>
 80151d6:	2c00      	cmp	r4, #0
 80151d8:	d0aa      	beq.n	8015130 <rcl_clock_init+0x1c>
 80151da:	2300      	movs	r3, #0
 80151dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80151e0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8015200 <rcl_clock_init+0xec>
 80151e4:	6133      	str	r3, [r6, #16]
 80151e6:	f106 0514 	add.w	r5, r6, #20
 80151ea:	469c      	mov	ip, r3
 80151ec:	2702      	movs	r7, #2
 80151ee:	e7b1      	b.n	8015154 <rcl_clock_init+0x40>
 80151f0:	f04f 0c0a 	mov.w	ip, #10
 80151f4:	e79e      	b.n	8015134 <rcl_clock_init+0x20>
 80151f6:	bf00      	nop
 80151f8:	080150f5 	.word	0x080150f5
 80151fc:	080150ed 	.word	0x080150ed
 8015200:	080150e5 	.word	0x080150e5

08015204 <rcl_clock_get_now>:
 8015204:	b140      	cbz	r0, 8015218 <rcl_clock_get_now+0x14>
 8015206:	b139      	cbz	r1, 8015218 <rcl_clock_get_now+0x14>
 8015208:	7803      	ldrb	r3, [r0, #0]
 801520a:	b11b      	cbz	r3, 8015214 <rcl_clock_get_now+0x10>
 801520c:	68c3      	ldr	r3, [r0, #12]
 801520e:	b10b      	cbz	r3, 8015214 <rcl_clock_get_now+0x10>
 8015210:	6900      	ldr	r0, [r0, #16]
 8015212:	4718      	bx	r3
 8015214:	2001      	movs	r0, #1
 8015216:	4770      	bx	lr
 8015218:	200b      	movs	r0, #11
 801521a:	4770      	bx	lr

0801521c <rcl_clock_add_jump_callback>:
 801521c:	b082      	sub	sp, #8
 801521e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015222:	a906      	add	r1, sp, #24
 8015224:	e881 000c 	stmia.w	r1, {r2, r3}
 8015228:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 801522c:	b320      	cbz	r0, 8015278 <rcl_clock_add_jump_callback+0x5c>
 801522e:	4604      	mov	r4, r0
 8015230:	3014      	adds	r0, #20
 8015232:	f7f8 fe07 	bl	800de44 <rcutils_allocator_is_valid>
 8015236:	b1f8      	cbz	r0, 8015278 <rcl_clock_add_jump_callback+0x5c>
 8015238:	b1f6      	cbz	r6, 8015278 <rcl_clock_add_jump_callback+0x5c>
 801523a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801523c:	2b00      	cmp	r3, #0
 801523e:	db1b      	blt.n	8015278 <rcl_clock_add_jump_callback+0x5c>
 8015240:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015244:	2a01      	cmp	r2, #1
 8015246:	f173 0300 	sbcs.w	r3, r3, #0
 801524a:	da15      	bge.n	8015278 <rcl_clock_add_jump_callback+0x5c>
 801524c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015250:	2f00      	cmp	r7, #0
 8015252:	d042      	beq.n	80152da <rcl_clock_add_jump_callback+0xbe>
 8015254:	2300      	movs	r3, #0
 8015256:	4602      	mov	r2, r0
 8015258:	e003      	b.n	8015262 <rcl_clock_add_jump_callback+0x46>
 801525a:	42bb      	cmp	r3, r7
 801525c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015260:	d011      	beq.n	8015286 <rcl_clock_add_jump_callback+0x6a>
 8015262:	6811      	ldr	r1, [r2, #0]
 8015264:	42b1      	cmp	r1, r6
 8015266:	f103 0301 	add.w	r3, r3, #1
 801526a:	d1f6      	bne.n	801525a <rcl_clock_add_jump_callback+0x3e>
 801526c:	6a11      	ldr	r1, [r2, #32]
 801526e:	42a9      	cmp	r1, r5
 8015270:	d1f3      	bne.n	801525a <rcl_clock_add_jump_callback+0x3e>
 8015272:	f04f 0e01 	mov.w	lr, #1
 8015276:	e001      	b.n	801527c <rcl_clock_add_jump_callback+0x60>
 8015278:	f04f 0e0b 	mov.w	lr, #11
 801527c:	4670      	mov	r0, lr
 801527e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015282:	b002      	add	sp, #8
 8015284:	4770      	bx	lr
 8015286:	3301      	adds	r3, #1
 8015288:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801528c:	00d9      	lsls	r1, r3, #3
 801528e:	69e3      	ldr	r3, [r4, #28]
 8015290:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015292:	4798      	blx	r3
 8015294:	b1f0      	cbz	r0, 80152d4 <rcl_clock_add_jump_callback+0xb8>
 8015296:	68a3      	ldr	r3, [r4, #8]
 8015298:	6060      	str	r0, [r4, #4]
 801529a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801529e:	f10d 0c18 	add.w	ip, sp, #24
 80152a2:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80152a6:	f103 0801 	add.w	r8, r3, #1
 80152aa:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80152ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80152b2:	f106 0708 	add.w	r7, r6, #8
 80152b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80152b8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80152bc:	f04f 0e00 	mov.w	lr, #0
 80152c0:	e887 0003 	stmia.w	r7, {r0, r1}
 80152c4:	6235      	str	r5, [r6, #32]
 80152c6:	4670      	mov	r0, lr
 80152c8:	f8c4 8008 	str.w	r8, [r4, #8]
 80152cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152d0:	b002      	add	sp, #8
 80152d2:	4770      	bx	lr
 80152d4:	f04f 0e0a 	mov.w	lr, #10
 80152d8:	e7d0      	b.n	801527c <rcl_clock_add_jump_callback+0x60>
 80152da:	2128      	movs	r1, #40	@ 0x28
 80152dc:	e7d7      	b.n	801528e <rcl_clock_add_jump_callback+0x72>
 80152de:	bf00      	nop

080152e0 <rcl_clock_remove_jump_callback>:
 80152e0:	2800      	cmp	r0, #0
 80152e2:	d057      	beq.n	8015394 <rcl_clock_remove_jump_callback+0xb4>
 80152e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152e8:	4605      	mov	r5, r0
 80152ea:	3014      	adds	r0, #20
 80152ec:	4688      	mov	r8, r1
 80152ee:	4692      	mov	sl, r2
 80152f0:	f7f8 fda8 	bl	800de44 <rcutils_allocator_is_valid>
 80152f4:	2800      	cmp	r0, #0
 80152f6:	d03b      	beq.n	8015370 <rcl_clock_remove_jump_callback+0x90>
 80152f8:	f1b8 0f00 	cmp.w	r8, #0
 80152fc:	d038      	beq.n	8015370 <rcl_clock_remove_jump_callback+0x90>
 80152fe:	68ae      	ldr	r6, [r5, #8]
 8015300:	b166      	cbz	r6, 801531c <rcl_clock_remove_jump_callback+0x3c>
 8015302:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015306:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801530a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801530e:	464c      	mov	r4, r9
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	4543      	cmp	r3, r8
 8015314:	d005      	beq.n	8015322 <rcl_clock_remove_jump_callback+0x42>
 8015316:	3428      	adds	r4, #40	@ 0x28
 8015318:	42a7      	cmp	r7, r4
 801531a:	d1f9      	bne.n	8015310 <rcl_clock_remove_jump_callback+0x30>
 801531c:	2001      	movs	r0, #1
 801531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015322:	6a23      	ldr	r3, [r4, #32]
 8015324:	3428      	adds	r4, #40	@ 0x28
 8015326:	42bc      	cmp	r4, r7
 8015328:	d02d      	beq.n	8015386 <rcl_clock_remove_jump_callback+0xa6>
 801532a:	4553      	cmp	r3, sl
 801532c:	d1f0      	bne.n	8015310 <rcl_clock_remove_jump_callback+0x30>
 801532e:	46a6      	mov	lr, r4
 8015330:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015334:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8015338:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801533c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015340:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015344:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015348:	3428      	adds	r4, #40	@ 0x28
 801534a:	42a7      	cmp	r7, r4
 801534c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015350:	d1ed      	bne.n	801532e <rcl_clock_remove_jump_callback+0x4e>
 8015352:	3e01      	subs	r6, #1
 8015354:	60ae      	str	r6, [r5, #8]
 8015356:	b176      	cbz	r6, 8015376 <rcl_clock_remove_jump_callback+0x96>
 8015358:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801535c:	69eb      	ldr	r3, [r5, #28]
 801535e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015360:	00f1      	lsls	r1, r6, #3
 8015362:	4648      	mov	r0, r9
 8015364:	4798      	blx	r3
 8015366:	b1b8      	cbz	r0, 8015398 <rcl_clock_remove_jump_callback+0xb8>
 8015368:	6068      	str	r0, [r5, #4]
 801536a:	2000      	movs	r0, #0
 801536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015370:	200b      	movs	r0, #11
 8015372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015376:	4648      	mov	r0, r9
 8015378:	69ab      	ldr	r3, [r5, #24]
 801537a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801537c:	4798      	blx	r3
 801537e:	606e      	str	r6, [r5, #4]
 8015380:	4630      	mov	r0, r6
 8015382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015386:	4553      	cmp	r3, sl
 8015388:	d1c8      	bne.n	801531c <rcl_clock_remove_jump_callback+0x3c>
 801538a:	3e01      	subs	r6, #1
 801538c:	60ae      	str	r6, [r5, #8]
 801538e:	2e00      	cmp	r6, #0
 8015390:	d1e2      	bne.n	8015358 <rcl_clock_remove_jump_callback+0x78>
 8015392:	e7f0      	b.n	8015376 <rcl_clock_remove_jump_callback+0x96>
 8015394:	200b      	movs	r0, #11
 8015396:	4770      	bx	lr
 8015398:	200a      	movs	r0, #10
 801539a:	e7ea      	b.n	8015372 <rcl_clock_remove_jump_callback+0x92>

0801539c <_rcl_timer_time_jump>:
 801539c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153a0:	4605      	mov	r5, r0
 80153a2:	b084      	sub	sp, #16
 80153a4:	4614      	mov	r4, r2
 80153a6:	b131      	cbz	r1, 80153b6 <_rcl_timer_time_jump+0x1a>
 80153a8:	7803      	ldrb	r3, [r0, #0]
 80153aa:	3b02      	subs	r3, #2
 80153ac:	2b01      	cmp	r3, #1
 80153ae:	d93f      	bls.n	8015430 <_rcl_timer_time_jump+0x94>
 80153b0:	b004      	add	sp, #16
 80153b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153b6:	6813      	ldr	r3, [r2, #0]
 80153b8:	a902      	add	r1, sp, #8
 80153ba:	6818      	ldr	r0, [r3, #0]
 80153bc:	f7ff ff22 	bl	8015204 <rcl_clock_get_now>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d1f5      	bne.n	80153b0 <_rcl_timer_time_jump+0x14>
 80153c4:	6820      	ldr	r0, [r4, #0]
 80153c6:	2105      	movs	r1, #5
 80153c8:	3020      	adds	r0, #32
 80153ca:	f001 fdf9 	bl	8016fc0 <__atomic_load_8>
 80153ce:	6823      	ldr	r3, [r4, #0]
 80153d0:	4681      	mov	r9, r0
 80153d2:	4688      	mov	r8, r1
 80153d4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80153d8:	2105      	movs	r1, #5
 80153da:	f001 fdf1 	bl	8016fc0 <__atomic_load_8>
 80153de:	4607      	mov	r7, r0
 80153e0:	6820      	ldr	r0, [r4, #0]
 80153e2:	460e      	mov	r6, r1
 80153e4:	3018      	adds	r0, #24
 80153e6:	2105      	movs	r1, #5
 80153e8:	f001 fdea 	bl	8016fc0 <__atomic_load_8>
 80153ec:	782b      	ldrb	r3, [r5, #0]
 80153ee:	9a02      	ldr	r2, [sp, #8]
 80153f0:	3b02      	subs	r3, #2
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	460d      	mov	r5, r1
 80153f6:	9b03      	ldr	r3, [sp, #12]
 80153f8:	4682      	mov	sl, r0
 80153fa:	d937      	bls.n	801546c <_rcl_timer_time_jump+0xd0>
 80153fc:	42ba      	cmp	r2, r7
 80153fe:	eb73 0106 	sbcs.w	r1, r3, r6
 8015402:	da5f      	bge.n	80154c4 <_rcl_timer_time_jump+0x128>
 8015404:	454a      	cmp	r2, r9
 8015406:	eb73 0108 	sbcs.w	r1, r3, r8
 801540a:	dad1      	bge.n	80153b0 <_rcl_timer_time_jump+0x14>
 801540c:	6820      	ldr	r0, [r4, #0]
 801540e:	eb1a 0202 	adds.w	r2, sl, r2
 8015412:	eb43 0305 	adc.w	r3, r3, r5
 8015416:	2505      	movs	r5, #5
 8015418:	3028      	adds	r0, #40	@ 0x28
 801541a:	9500      	str	r5, [sp, #0]
 801541c:	f001 fe06 	bl	801702c <__atomic_store_8>
 8015420:	6820      	ldr	r0, [r4, #0]
 8015422:	9500      	str	r5, [sp, #0]
 8015424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015428:	3020      	adds	r0, #32
 801542a:	f001 fdff 	bl	801702c <__atomic_store_8>
 801542e:	e7bf      	b.n	80153b0 <_rcl_timer_time_jump+0x14>
 8015430:	6813      	ldr	r3, [r2, #0]
 8015432:	a902      	add	r1, sp, #8
 8015434:	6818      	ldr	r0, [r3, #0]
 8015436:	f7ff fee5 	bl	8015204 <rcl_clock_get_now>
 801543a:	2800      	cmp	r0, #0
 801543c:	d1b8      	bne.n	80153b0 <_rcl_timer_time_jump+0x14>
 801543e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015442:	4313      	orrs	r3, r2
 8015444:	d0b4      	beq.n	80153b0 <_rcl_timer_time_jump+0x14>
 8015446:	6820      	ldr	r0, [r4, #0]
 8015448:	2105      	movs	r1, #5
 801544a:	3028      	adds	r0, #40	@ 0x28
 801544c:	f001 fdb8 	bl	8016fc0 <__atomic_load_8>
 8015450:	9d02      	ldr	r5, [sp, #8]
 8015452:	9b03      	ldr	r3, [sp, #12]
 8015454:	4602      	mov	r2, r0
 8015456:	6820      	ldr	r0, [r4, #0]
 8015458:	1b52      	subs	r2, r2, r5
 801545a:	f04f 0405 	mov.w	r4, #5
 801545e:	9400      	str	r4, [sp, #0]
 8015460:	eb61 0303 	sbc.w	r3, r1, r3
 8015464:	3030      	adds	r0, #48	@ 0x30
 8015466:	f001 fde1 	bl	801702c <__atomic_store_8>
 801546a:	e7a1      	b.n	80153b0 <_rcl_timer_time_jump+0x14>
 801546c:	4313      	orrs	r3, r2
 801546e:	d09f      	beq.n	80153b0 <_rcl_timer_time_jump+0x14>
 8015470:	6820      	ldr	r0, [r4, #0]
 8015472:	f04f 0805 	mov.w	r8, #5
 8015476:	2300      	movs	r3, #0
 8015478:	f8cd 8000 	str.w	r8, [sp]
 801547c:	3030      	adds	r0, #48	@ 0x30
 801547e:	2200      	movs	r2, #0
 8015480:	f001 fe0a 	bl	8017098 <__atomic_exchange_8>
 8015484:	ea51 0300 	orrs.w	r3, r1, r0
 8015488:	4606      	mov	r6, r0
 801548a:	460f      	mov	r7, r1
 801548c:	d090      	beq.n	80153b0 <_rcl_timer_time_jump+0x14>
 801548e:	9a02      	ldr	r2, [sp, #8]
 8015490:	9b03      	ldr	r3, [sp, #12]
 8015492:	f8cd 8000 	str.w	r8, [sp]
 8015496:	1a12      	subs	r2, r2, r0
 8015498:	6820      	ldr	r0, [r4, #0]
 801549a:	eb63 0301 	sbc.w	r3, r3, r1
 801549e:	eb12 020a 	adds.w	r2, r2, sl
 80154a2:	eb43 0305 	adc.w	r3, r3, r5
 80154a6:	3028      	adds	r0, #40	@ 0x28
 80154a8:	f001 fdc0 	bl	801702c <__atomic_store_8>
 80154ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154b0:	f8cd 8000 	str.w	r8, [sp]
 80154b4:	6820      	ldr	r0, [r4, #0]
 80154b6:	1b92      	subs	r2, r2, r6
 80154b8:	eb63 0307 	sbc.w	r3, r3, r7
 80154bc:	3020      	adds	r0, #32
 80154be:	f001 fdb5 	bl	801702c <__atomic_store_8>
 80154c2:	e775      	b.n	80153b0 <_rcl_timer_time_jump+0x14>
 80154c4:	6820      	ldr	r0, [r4, #0]
 80154c6:	3008      	adds	r0, #8
 80154c8:	f004 f9d4 	bl	8019874 <rcl_trigger_guard_condition>
 80154cc:	e770      	b.n	80153b0 <_rcl_timer_time_jump+0x14>
 80154ce:	bf00      	nop

080154d0 <rcl_get_zero_initialized_timer>:
 80154d0:	4b01      	ldr	r3, [pc, #4]	@ (80154d8 <rcl_get_zero_initialized_timer+0x8>)
 80154d2:	6818      	ldr	r0, [r3, #0]
 80154d4:	4770      	bx	lr
 80154d6:	bf00      	nop
 80154d8:	0801dd50 	.word	0x0801dd50
 80154dc:	00000000 	.word	0x00000000

080154e0 <rcl_timer_init>:
 80154e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154e4:	b0aa      	sub	sp, #168	@ 0xa8
 80154e6:	4604      	mov	r4, r0
 80154e8:	a835      	add	r0, sp, #212	@ 0xd4
 80154ea:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80154ee:	460d      	mov	r5, r1
 80154f0:	4692      	mov	sl, r2
 80154f2:	f7f8 fca7 	bl	800de44 <rcutils_allocator_is_valid>
 80154f6:	2800      	cmp	r0, #0
 80154f8:	d064      	beq.n	80155c4 <rcl_timer_init+0xe4>
 80154fa:	2c00      	cmp	r4, #0
 80154fc:	d062      	beq.n	80155c4 <rcl_timer_init+0xe4>
 80154fe:	2d00      	cmp	r5, #0
 8015500:	d060      	beq.n	80155c4 <rcl_timer_init+0xe4>
 8015502:	2f00      	cmp	r7, #0
 8015504:	db5e      	blt.n	80155c4 <rcl_timer_init+0xe4>
 8015506:	6823      	ldr	r3, [r4, #0]
 8015508:	b123      	cbz	r3, 8015514 <rcl_timer_init+0x34>
 801550a:	2664      	movs	r6, #100	@ 0x64
 801550c:	4630      	mov	r0, r6
 801550e:	b02a      	add	sp, #168	@ 0xa8
 8015510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015514:	a908      	add	r1, sp, #32
 8015516:	4628      	mov	r0, r5
 8015518:	f7ff fe74 	bl	8015204 <rcl_clock_get_now>
 801551c:	4606      	mov	r6, r0
 801551e:	2800      	cmp	r0, #0
 8015520:	d1f4      	bne.n	801550c <rcl_timer_init+0x2c>
 8015522:	ae06      	add	r6, sp, #24
 8015524:	4630      	mov	r0, r6
 8015526:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801552a:	f004 f8ab 	bl	8019684 <rcl_get_zero_initialized_guard_condition>
 801552e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015532:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8015536:	ae0b      	add	r6, sp, #44	@ 0x2c
 8015538:	e889 0003 	stmia.w	r9, {r0, r1}
 801553c:	4630      	mov	r0, r6
 801553e:	f004 f97d 	bl	801983c <rcl_guard_condition_get_default_options>
 8015542:	ab0d      	add	r3, sp, #52	@ 0x34
 8015544:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015548:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801554c:	4651      	mov	r1, sl
 801554e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015552:	4648      	mov	r0, r9
 8015554:	f004 f8a0 	bl	8019698 <rcl_guard_condition_init>
 8015558:	4606      	mov	r6, r0
 801555a:	2800      	cmp	r0, #0
 801555c:	d1d6      	bne.n	801550c <rcl_timer_init+0x2c>
 801555e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	2b01      	cmp	r3, #1
 8015564:	d033      	beq.n	80155ce <rcl_timer_init+0xee>
 8015566:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8015568:	911a      	str	r1, [sp, #104]	@ 0x68
 801556a:	4642      	mov	r2, r8
 801556c:	463b      	mov	r3, r7
 801556e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8015572:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015576:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015628 <rcl_timer_init+0x148>
 801557a:	eb12 0008 	adds.w	r0, r2, r8
 801557e:	eb47 0103 	adc.w	r1, r7, r3
 8015582:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8015586:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801558a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801558e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8015592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015596:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 801559a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801559e:	f8de 3000 	ldr.w	r3, [lr]
 80155a2:	f8cc 3000 	str.w	r3, [ip]
 80155a6:	f04f 0a00 	mov.w	sl, #0
 80155aa:	4619      	mov	r1, r3
 80155ac:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80155b0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80155b2:	2050      	movs	r0, #80	@ 0x50
 80155b4:	4798      	blx	r3
 80155b6:	6020      	str	r0, [r4, #0]
 80155b8:	b358      	cbz	r0, 8015612 <rcl_timer_init+0x132>
 80155ba:	2250      	movs	r2, #80	@ 0x50
 80155bc:	a916      	add	r1, sp, #88	@ 0x58
 80155be:	f005 f8e8 	bl	801a792 <memcpy>
 80155c2:	e7a3      	b.n	801550c <rcl_timer_init+0x2c>
 80155c4:	260b      	movs	r6, #11
 80155c6:	4630      	mov	r0, r6
 80155c8:	b02a      	add	sp, #168	@ 0xa8
 80155ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155ce:	2001      	movs	r0, #1
 80155d0:	2100      	movs	r1, #0
 80155d2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80155d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80155de:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80155e2:	4a13      	ldr	r2, [pc, #76]	@ (8015630 <rcl_timer_init+0x150>)
 80155e4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80155e8:	9405      	str	r4, [sp, #20]
 80155ea:	9204      	str	r2, [sp, #16]
 80155ec:	ab12      	add	r3, sp, #72	@ 0x48
 80155ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80155f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80155f4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80155f8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80155fc:	4628      	mov	r0, r5
 80155fe:	f7ff fe0d 	bl	801521c <rcl_clock_add_jump_callback>
 8015602:	4682      	mov	sl, r0
 8015604:	2800      	cmp	r0, #0
 8015606:	d0ae      	beq.n	8015566 <rcl_timer_init+0x86>
 8015608:	4648      	mov	r0, r9
 801560a:	f004 f8f1 	bl	80197f0 <rcl_guard_condition_fini>
 801560e:	4656      	mov	r6, sl
 8015610:	e77c      	b.n	801550c <rcl_timer_init+0x2c>
 8015612:	4648      	mov	r0, r9
 8015614:	f004 f8ec 	bl	80197f0 <rcl_guard_condition_fini>
 8015618:	4905      	ldr	r1, [pc, #20]	@ (8015630 <rcl_timer_init+0x150>)
 801561a:	4622      	mov	r2, r4
 801561c:	4628      	mov	r0, r5
 801561e:	f7ff fe5f 	bl	80152e0 <rcl_clock_remove_jump_callback>
 8015622:	260a      	movs	r6, #10
 8015624:	e772      	b.n	801550c <rcl_timer_init+0x2c>
 8015626:	bf00      	nop
	...
 8015630:	0801539d 	.word	0x0801539d

08015634 <rcl_timer_call>:
 8015634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015638:	b087      	sub	sp, #28
 801563a:	2800      	cmp	r0, #0
 801563c:	d06d      	beq.n	801571a <rcl_timer_call+0xe6>
 801563e:	6803      	ldr	r3, [r0, #0]
 8015640:	4604      	mov	r4, r0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d063      	beq.n	801570e <rcl_timer_call+0xda>
 8015646:	f3bf 8f5b 	dmb	ish
 801564a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801564e:	f3bf 8f5b 	dmb	ish
 8015652:	2b00      	cmp	r3, #0
 8015654:	d150      	bne.n	80156f8 <rcl_timer_call+0xc4>
 8015656:	6803      	ldr	r3, [r0, #0]
 8015658:	a904      	add	r1, sp, #16
 801565a:	6818      	ldr	r0, [r3, #0]
 801565c:	f7ff fdd2 	bl	8015204 <rcl_clock_get_now>
 8015660:	4605      	mov	r5, r0
 8015662:	2800      	cmp	r0, #0
 8015664:	d14a      	bne.n	80156fc <rcl_timer_call+0xc8>
 8015666:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801566a:	2b00      	cmp	r3, #0
 801566c:	db4a      	blt.n	8015704 <rcl_timer_call+0xd0>
 801566e:	6820      	ldr	r0, [r4, #0]
 8015670:	f04f 0a05 	mov.w	sl, #5
 8015674:	f8cd a000 	str.w	sl, [sp]
 8015678:	3020      	adds	r0, #32
 801567a:	f001 fd0d 	bl	8017098 <__atomic_exchange_8>
 801567e:	6823      	ldr	r3, [r4, #0]
 8015680:	f3bf 8f5b 	dmb	ish
 8015684:	4680      	mov	r8, r0
 8015686:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801568a:	f3bf 8f5b 	dmb	ish
 801568e:	6820      	ldr	r0, [r4, #0]
 8015690:	4689      	mov	r9, r1
 8015692:	3028      	adds	r0, #40	@ 0x28
 8015694:	4651      	mov	r1, sl
 8015696:	f001 fc93 	bl	8016fc0 <__atomic_load_8>
 801569a:	4606      	mov	r6, r0
 801569c:	6820      	ldr	r0, [r4, #0]
 801569e:	460f      	mov	r7, r1
 80156a0:	3018      	adds	r0, #24
 80156a2:	4651      	mov	r1, sl
 80156a4:	f001 fc8c 	bl	8016fc0 <__atomic_load_8>
 80156a8:	1836      	adds	r6, r6, r0
 80156aa:	4602      	mov	r2, r0
 80156ac:	4682      	mov	sl, r0
 80156ae:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80156b2:	eb47 0701 	adc.w	r7, r7, r1
 80156b6:	4286      	cmp	r6, r0
 80156b8:	460b      	mov	r3, r1
 80156ba:	eb77 010c 	sbcs.w	r1, r7, ip
 80156be:	da04      	bge.n	80156ca <rcl_timer_call+0x96>
 80156c0:	ea53 0102 	orrs.w	r1, r3, r2
 80156c4:	d12e      	bne.n	8015724 <rcl_timer_call+0xf0>
 80156c6:	4606      	mov	r6, r0
 80156c8:	4667      	mov	r7, ip
 80156ca:	6820      	ldr	r0, [r4, #0]
 80156cc:	2105      	movs	r1, #5
 80156ce:	4632      	mov	r2, r6
 80156d0:	463b      	mov	r3, r7
 80156d2:	3028      	adds	r0, #40	@ 0x28
 80156d4:	9100      	str	r1, [sp, #0]
 80156d6:	f001 fca9 	bl	801702c <__atomic_store_8>
 80156da:	f1bb 0f00 	cmp.w	fp, #0
 80156de:	d00d      	beq.n	80156fc <rcl_timer_call+0xc8>
 80156e0:	9a04      	ldr	r2, [sp, #16]
 80156e2:	9b05      	ldr	r3, [sp, #20]
 80156e4:	ebb2 0208 	subs.w	r2, r2, r8
 80156e8:	4620      	mov	r0, r4
 80156ea:	eb63 0309 	sbc.w	r3, r3, r9
 80156ee:	47d8      	blx	fp
 80156f0:	4628      	mov	r0, r5
 80156f2:	b007      	add	sp, #28
 80156f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156f8:	f240 3521 	movw	r5, #801	@ 0x321
 80156fc:	4628      	mov	r0, r5
 80156fe:	b007      	add	sp, #28
 8015700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015704:	2501      	movs	r5, #1
 8015706:	4628      	mov	r0, r5
 8015708:	b007      	add	sp, #28
 801570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015712:	4628      	mov	r0, r5
 8015714:	b007      	add	sp, #28
 8015716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801571a:	250b      	movs	r5, #11
 801571c:	4628      	mov	r0, r5
 801571e:	b007      	add	sp, #28
 8015720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015724:	1b80      	subs	r0, r0, r6
 8015726:	eb6c 0107 	sbc.w	r1, ip, r7
 801572a:	3801      	subs	r0, #1
 801572c:	f161 0100 	sbc.w	r1, r1, #0
 8015730:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015734:	f7eb fa98 	bl	8000c68 <__aeabi_ldivmod>
 8015738:	9b02      	ldr	r3, [sp, #8]
 801573a:	3001      	adds	r0, #1
 801573c:	f141 0100 	adc.w	r1, r1, #0
 8015740:	fb00 f303 	mul.w	r3, r0, r3
 8015744:	fb01 330a 	mla	r3, r1, sl, r3
 8015748:	fba0 0a0a 	umull	r0, sl, r0, sl
 801574c:	1986      	adds	r6, r0, r6
 801574e:	4453      	add	r3, sl
 8015750:	eb43 0707 	adc.w	r7, r3, r7
 8015754:	e7b9      	b.n	80156ca <rcl_timer_call+0x96>
 8015756:	bf00      	nop

08015758 <rcl_timer_is_ready>:
 8015758:	b570      	push	{r4, r5, r6, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	b378      	cbz	r0, 80157be <rcl_timer_is_ready+0x66>
 801575e:	6803      	ldr	r3, [r0, #0]
 8015760:	4604      	mov	r4, r0
 8015762:	b383      	cbz	r3, 80157c6 <rcl_timer_is_ready+0x6e>
 8015764:	460d      	mov	r5, r1
 8015766:	b351      	cbz	r1, 80157be <rcl_timer_is_ready+0x66>
 8015768:	f3bf 8f5b 	dmb	ish
 801576c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015770:	f3bf 8f5b 	dmb	ish
 8015774:	b953      	cbnz	r3, 801578c <rcl_timer_is_ready+0x34>
 8015776:	6803      	ldr	r3, [r0, #0]
 8015778:	4669      	mov	r1, sp
 801577a:	6818      	ldr	r0, [r3, #0]
 801577c:	f7ff fd42 	bl	8015204 <rcl_clock_get_now>
 8015780:	4606      	mov	r6, r0
 8015782:	b140      	cbz	r0, 8015796 <rcl_timer_is_ready+0x3e>
 8015784:	f240 3321 	movw	r3, #801	@ 0x321
 8015788:	4298      	cmp	r0, r3
 801578a:	d101      	bne.n	8015790 <rcl_timer_is_ready+0x38>
 801578c:	2600      	movs	r6, #0
 801578e:	702e      	strb	r6, [r5, #0]
 8015790:	4630      	mov	r0, r6
 8015792:	b002      	add	sp, #8
 8015794:	bd70      	pop	{r4, r5, r6, pc}
 8015796:	6820      	ldr	r0, [r4, #0]
 8015798:	2105      	movs	r1, #5
 801579a:	3028      	adds	r0, #40	@ 0x28
 801579c:	f001 fc10 	bl	8016fc0 <__atomic_load_8>
 80157a0:	9b00      	ldr	r3, [sp, #0]
 80157a2:	1ac0      	subs	r0, r0, r3
 80157a4:	9b01      	ldr	r3, [sp, #4]
 80157a6:	eb61 0103 	sbc.w	r1, r1, r3
 80157aa:	2801      	cmp	r0, #1
 80157ac:	f171 0300 	sbcs.w	r3, r1, #0
 80157b0:	bfb4      	ite	lt
 80157b2:	2301      	movlt	r3, #1
 80157b4:	2300      	movge	r3, #0
 80157b6:	4630      	mov	r0, r6
 80157b8:	702b      	strb	r3, [r5, #0]
 80157ba:	b002      	add	sp, #8
 80157bc:	bd70      	pop	{r4, r5, r6, pc}
 80157be:	260b      	movs	r6, #11
 80157c0:	4630      	mov	r0, r6
 80157c2:	b002      	add	sp, #8
 80157c4:	bd70      	pop	{r4, r5, r6, pc}
 80157c6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80157ca:	e7e1      	b.n	8015790 <rcl_timer_is_ready+0x38>

080157cc <rcl_timer_get_time_until_next_call>:
 80157cc:	b570      	push	{r4, r5, r6, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	b330      	cbz	r0, 8015820 <rcl_timer_get_time_until_next_call+0x54>
 80157d2:	6803      	ldr	r3, [r0, #0]
 80157d4:	4604      	mov	r4, r0
 80157d6:	b33b      	cbz	r3, 8015828 <rcl_timer_get_time_until_next_call+0x5c>
 80157d8:	460d      	mov	r5, r1
 80157da:	b309      	cbz	r1, 8015820 <rcl_timer_get_time_until_next_call+0x54>
 80157dc:	f3bf 8f5b 	dmb	ish
 80157e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80157e4:	f3bf 8f5b 	dmb	ish
 80157e8:	b9ab      	cbnz	r3, 8015816 <rcl_timer_get_time_until_next_call+0x4a>
 80157ea:	6803      	ldr	r3, [r0, #0]
 80157ec:	4669      	mov	r1, sp
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	f7ff fd08 	bl	8015204 <rcl_clock_get_now>
 80157f4:	4606      	mov	r6, r0
 80157f6:	b958      	cbnz	r0, 8015810 <rcl_timer_get_time_until_next_call+0x44>
 80157f8:	6820      	ldr	r0, [r4, #0]
 80157fa:	2105      	movs	r1, #5
 80157fc:	3028      	adds	r0, #40	@ 0x28
 80157fe:	f001 fbdf 	bl	8016fc0 <__atomic_load_8>
 8015802:	9b00      	ldr	r3, [sp, #0]
 8015804:	1ac0      	subs	r0, r0, r3
 8015806:	9b01      	ldr	r3, [sp, #4]
 8015808:	6028      	str	r0, [r5, #0]
 801580a:	eb61 0103 	sbc.w	r1, r1, r3
 801580e:	6069      	str	r1, [r5, #4]
 8015810:	4630      	mov	r0, r6
 8015812:	b002      	add	sp, #8
 8015814:	bd70      	pop	{r4, r5, r6, pc}
 8015816:	f240 3621 	movw	r6, #801	@ 0x321
 801581a:	4630      	mov	r0, r6
 801581c:	b002      	add	sp, #8
 801581e:	bd70      	pop	{r4, r5, r6, pc}
 8015820:	260b      	movs	r6, #11
 8015822:	4630      	mov	r0, r6
 8015824:	b002      	add	sp, #8
 8015826:	bd70      	pop	{r4, r5, r6, pc}
 8015828:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801582c:	e7f0      	b.n	8015810 <rcl_timer_get_time_until_next_call+0x44>
 801582e:	bf00      	nop

08015830 <rcl_timer_get_guard_condition>:
 8015830:	b130      	cbz	r0, 8015840 <rcl_timer_get_guard_condition+0x10>
 8015832:	6800      	ldr	r0, [r0, #0]
 8015834:	b120      	cbz	r0, 8015840 <rcl_timer_get_guard_condition+0x10>
 8015836:	68c3      	ldr	r3, [r0, #12]
 8015838:	b10b      	cbz	r3, 801583e <rcl_timer_get_guard_condition+0xe>
 801583a:	3008      	adds	r0, #8
 801583c:	4770      	bx	lr
 801583e:	4618      	mov	r0, r3
 8015840:	4770      	bx	lr
 8015842:	bf00      	nop

08015844 <rcl_validate_enclave_name_with_size>:
 8015844:	b378      	cbz	r0, 80158a6 <rcl_validate_enclave_name_with_size+0x62>
 8015846:	b570      	push	{r4, r5, r6, lr}
 8015848:	4615      	mov	r5, r2
 801584a:	b0c2      	sub	sp, #264	@ 0x108
 801584c:	b302      	cbz	r2, 8015890 <rcl_validate_enclave_name_with_size+0x4c>
 801584e:	461e      	mov	r6, r3
 8015850:	466a      	mov	r2, sp
 8015852:	ab01      	add	r3, sp, #4
 8015854:	460c      	mov	r4, r1
 8015856:	f002 f815 	bl	8017884 <rmw_validate_namespace_with_size>
 801585a:	4684      	mov	ip, r0
 801585c:	b9e8      	cbnz	r0, 801589a <rcl_validate_enclave_name_with_size+0x56>
 801585e:	9b00      	ldr	r3, [sp, #0]
 8015860:	b923      	cbnz	r3, 801586c <rcl_validate_enclave_name_with_size+0x28>
 8015862:	2300      	movs	r3, #0
 8015864:	602b      	str	r3, [r5, #0]
 8015866:	4660      	mov	r0, ip
 8015868:	b042      	add	sp, #264	@ 0x108
 801586a:	bd70      	pop	{r4, r5, r6, pc}
 801586c:	2b07      	cmp	r3, #7
 801586e:	d007      	beq.n	8015880 <rcl_validate_enclave_name_with_size+0x3c>
 8015870:	1e5a      	subs	r2, r3, #1
 8015872:	2a05      	cmp	r2, #5
 8015874:	d833      	bhi.n	80158de <rcl_validate_enclave_name_with_size+0x9a>
 8015876:	e8df f002 	tbb	[pc, r2]
 801587a:	2c2f      	.short	0x2c2f
 801587c:	1a232629 	.word	0x1a232629
 8015880:	2cff      	cmp	r4, #255	@ 0xff
 8015882:	d9ee      	bls.n	8015862 <rcl_validate_enclave_name_with_size+0x1e>
 8015884:	602b      	str	r3, [r5, #0]
 8015886:	2e00      	cmp	r6, #0
 8015888:	d0ed      	beq.n	8015866 <rcl_validate_enclave_name_with_size+0x22>
 801588a:	23fe      	movs	r3, #254	@ 0xfe
 801588c:	6033      	str	r3, [r6, #0]
 801588e:	e7ea      	b.n	8015866 <rcl_validate_enclave_name_with_size+0x22>
 8015890:	f04f 0c0b 	mov.w	ip, #11
 8015894:	4660      	mov	r0, ip
 8015896:	b042      	add	sp, #264	@ 0x108
 8015898:	bd70      	pop	{r4, r5, r6, pc}
 801589a:	f7fe fdaf 	bl	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 801589e:	4684      	mov	ip, r0
 80158a0:	4660      	mov	r0, ip
 80158a2:	b042      	add	sp, #264	@ 0x108
 80158a4:	bd70      	pop	{r4, r5, r6, pc}
 80158a6:	f04f 0c0b 	mov.w	ip, #11
 80158aa:	4660      	mov	r0, ip
 80158ac:	4770      	bx	lr
 80158ae:	2306      	movs	r3, #6
 80158b0:	602b      	str	r3, [r5, #0]
 80158b2:	2e00      	cmp	r6, #0
 80158b4:	d0d7      	beq.n	8015866 <rcl_validate_enclave_name_with_size+0x22>
 80158b6:	9b01      	ldr	r3, [sp, #4]
 80158b8:	6033      	str	r3, [r6, #0]
 80158ba:	4660      	mov	r0, ip
 80158bc:	b042      	add	sp, #264	@ 0x108
 80158be:	bd70      	pop	{r4, r5, r6, pc}
 80158c0:	2305      	movs	r3, #5
 80158c2:	602b      	str	r3, [r5, #0]
 80158c4:	e7f5      	b.n	80158b2 <rcl_validate_enclave_name_with_size+0x6e>
 80158c6:	2304      	movs	r3, #4
 80158c8:	602b      	str	r3, [r5, #0]
 80158ca:	e7f2      	b.n	80158b2 <rcl_validate_enclave_name_with_size+0x6e>
 80158cc:	2303      	movs	r3, #3
 80158ce:	602b      	str	r3, [r5, #0]
 80158d0:	e7ef      	b.n	80158b2 <rcl_validate_enclave_name_with_size+0x6e>
 80158d2:	2302      	movs	r3, #2
 80158d4:	602b      	str	r3, [r5, #0]
 80158d6:	e7ec      	b.n	80158b2 <rcl_validate_enclave_name_with_size+0x6e>
 80158d8:	2301      	movs	r3, #1
 80158da:	602b      	str	r3, [r5, #0]
 80158dc:	e7e9      	b.n	80158b2 <rcl_validate_enclave_name_with_size+0x6e>
 80158de:	4a04      	ldr	r2, [pc, #16]	@ (80158f0 <rcl_validate_enclave_name_with_size+0xac>)
 80158e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80158e4:	a802      	add	r0, sp, #8
 80158e6:	f001 fd25 	bl	8017334 <rcutils_snprintf>
 80158ea:	f04f 0c01 	mov.w	ip, #1
 80158ee:	e7ba      	b.n	8015866 <rcl_validate_enclave_name_with_size+0x22>
 80158f0:	0801dd54 	.word	0x0801dd54

080158f4 <rcl_validate_enclave_name>:
 80158f4:	b168      	cbz	r0, 8015912 <rcl_validate_enclave_name+0x1e>
 80158f6:	b570      	push	{r4, r5, r6, lr}
 80158f8:	460d      	mov	r5, r1
 80158fa:	4616      	mov	r6, r2
 80158fc:	4604      	mov	r4, r0
 80158fe:	f7ea fc99 	bl	8000234 <strlen>
 8015902:	4633      	mov	r3, r6
 8015904:	4601      	mov	r1, r0
 8015906:	462a      	mov	r2, r5
 8015908:	4620      	mov	r0, r4
 801590a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801590e:	f7ff bf99 	b.w	8015844 <rcl_validate_enclave_name_with_size>
 8015912:	200b      	movs	r0, #11
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop

08015918 <rcl_get_zero_initialized_wait_set>:
 8015918:	b510      	push	{r4, lr}
 801591a:	4c08      	ldr	r4, [pc, #32]	@ (801593c <rcl_get_zero_initialized_wait_set+0x24>)
 801591c:	4686      	mov	lr, r0
 801591e:	4684      	mov	ip, r0
 8015920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015922:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015928:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801592c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801592e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015932:	6823      	ldr	r3, [r4, #0]
 8015934:	f8cc 3000 	str.w	r3, [ip]
 8015938:	4670      	mov	r0, lr
 801593a:	bd10      	pop	{r4, pc}
 801593c:	0801ddb4 	.word	0x0801ddb4

08015940 <rcl_wait_set_is_valid>:
 8015940:	b118      	cbz	r0, 801594a <rcl_wait_set_is_valid+0xa>
 8015942:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015944:	3800      	subs	r0, #0
 8015946:	bf18      	it	ne
 8015948:	2001      	movne	r0, #1
 801594a:	4770      	bx	lr

0801594c <rcl_wait_set_fini>:
 801594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015950:	b082      	sub	sp, #8
 8015952:	2800      	cmp	r0, #0
 8015954:	f000 8095 	beq.w	8015a82 <rcl_wait_set_fini+0x136>
 8015958:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801595a:	4604      	mov	r4, r0
 801595c:	2e00      	cmp	r6, #0
 801595e:	f000 808c 	beq.w	8015a7a <rcl_wait_set_fini+0x12e>
 8015962:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015964:	f002 fd48 	bl	80183f8 <rmw_destroy_wait_set>
 8015968:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801596a:	1e06      	subs	r6, r0, #0
 801596c:	bf18      	it	ne
 801596e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015972:	2d00      	cmp	r5, #0
 8015974:	f000 8081 	beq.w	8015a7a <rcl_wait_set_fini+0x12e>
 8015978:	6820      	ldr	r0, [r4, #0]
 801597a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801597e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015980:	2700      	movs	r7, #0
 8015982:	6067      	str	r7, [r4, #4]
 8015984:	602f      	str	r7, [r5, #0]
 8015986:	b120      	cbz	r0, 8015992 <rcl_wait_set_fini+0x46>
 8015988:	9101      	str	r1, [sp, #4]
 801598a:	47c0      	blx	r8
 801598c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801598e:	9901      	ldr	r1, [sp, #4]
 8015990:	6027      	str	r7, [r4, #0]
 8015992:	68a8      	ldr	r0, [r5, #8]
 8015994:	b120      	cbz	r0, 80159a0 <rcl_wait_set_fini+0x54>
 8015996:	47c0      	blx	r8
 8015998:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801599a:	2300      	movs	r3, #0
 801599c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80159a0:	68a0      	ldr	r0, [r4, #8]
 80159a2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80159a4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80159a6:	f04f 0800 	mov.w	r8, #0
 80159aa:	f8c4 800c 	str.w	r8, [r4, #12]
 80159ae:	f8c5 800c 	str.w	r8, [r5, #12]
 80159b2:	b128      	cbz	r0, 80159c0 <rcl_wait_set_fini+0x74>
 80159b4:	47b8      	blx	r7
 80159b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80159b8:	f8c4 8008 	str.w	r8, [r4, #8]
 80159bc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80159be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80159c0:	6968      	ldr	r0, [r5, #20]
 80159c2:	f04f 0800 	mov.w	r8, #0
 80159c6:	f8c5 8010 	str.w	r8, [r5, #16]
 80159ca:	b128      	cbz	r0, 80159d8 <rcl_wait_set_fini+0x8c>
 80159cc:	47b8      	blx	r7
 80159ce:	f8c5 8014 	str.w	r8, [r5, #20]
 80159d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80159d4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80159d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80159d8:	6920      	ldr	r0, [r4, #16]
 80159da:	f04f 0800 	mov.w	r8, #0
 80159de:	f8c4 8014 	str.w	r8, [r4, #20]
 80159e2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80159e6:	b128      	cbz	r0, 80159f4 <rcl_wait_set_fini+0xa8>
 80159e8:	47b8      	blx	r7
 80159ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80159ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80159f0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80159f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80159f4:	69a0      	ldr	r0, [r4, #24]
 80159f6:	f04f 0800 	mov.w	r8, #0
 80159fa:	f8c4 801c 	str.w	r8, [r4, #28]
 80159fe:	f8c5 8018 	str.w	r8, [r5, #24]
 8015a02:	b128      	cbz	r0, 8015a10 <rcl_wait_set_fini+0xc4>
 8015a04:	9101      	str	r1, [sp, #4]
 8015a06:	47b8      	blx	r7
 8015a08:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015a0a:	9901      	ldr	r1, [sp, #4]
 8015a0c:	f8c4 8018 	str.w	r8, [r4, #24]
 8015a10:	6a28      	ldr	r0, [r5, #32]
 8015a12:	b120      	cbz	r0, 8015a1e <rcl_wait_set_fini+0xd2>
 8015a14:	47b8      	blx	r7
 8015a16:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015a18:	2300      	movs	r3, #0
 8015a1a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015a1e:	6a20      	ldr	r0, [r4, #32]
 8015a20:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015a24:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015a26:	2700      	movs	r7, #0
 8015a28:	6267      	str	r7, [r4, #36]	@ 0x24
 8015a2a:	626f      	str	r7, [r5, #36]	@ 0x24
 8015a2c:	b120      	cbz	r0, 8015a38 <rcl_wait_set_fini+0xec>
 8015a2e:	9101      	str	r1, [sp, #4]
 8015a30:	47c0      	blx	r8
 8015a32:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015a34:	9901      	ldr	r1, [sp, #4]
 8015a36:	6227      	str	r7, [r4, #32]
 8015a38:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015a3a:	b120      	cbz	r0, 8015a46 <rcl_wait_set_fini+0xfa>
 8015a3c:	47c0      	blx	r8
 8015a3e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015a40:	2300      	movs	r3, #0
 8015a42:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015a46:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015a48:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015a4c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015a4e:	2700      	movs	r7, #0
 8015a50:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015a52:	632f      	str	r7, [r5, #48]	@ 0x30
 8015a54:	b120      	cbz	r0, 8015a60 <rcl_wait_set_fini+0x114>
 8015a56:	9101      	str	r1, [sp, #4]
 8015a58:	47c0      	blx	r8
 8015a5a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015a5c:	9901      	ldr	r1, [sp, #4]
 8015a5e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015a60:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015a62:	b120      	cbz	r0, 8015a6e <rcl_wait_set_fini+0x122>
 8015a64:	47c0      	blx	r8
 8015a66:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015a68:	2300      	movs	r3, #0
 8015a6a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015a6e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015a70:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015a72:	4628      	mov	r0, r5
 8015a74:	4798      	blx	r3
 8015a76:	2300      	movs	r3, #0
 8015a78:	6323      	str	r3, [r4, #48]	@ 0x30
 8015a7a:	4630      	mov	r0, r6
 8015a7c:	b002      	add	sp, #8
 8015a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a82:	260b      	movs	r6, #11
 8015a84:	4630      	mov	r0, r6
 8015a86:	b002      	add	sp, #8
 8015a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015a8c <rcl_wait_set_add_subscription>:
 8015a8c:	b318      	cbz	r0, 8015ad6 <rcl_wait_set_add_subscription+0x4a>
 8015a8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015a90:	b570      	push	{r4, r5, r6, lr}
 8015a92:	4604      	mov	r4, r0
 8015a94:	b30b      	cbz	r3, 8015ada <rcl_wait_set_add_subscription+0x4e>
 8015a96:	b319      	cbz	r1, 8015ae0 <rcl_wait_set_add_subscription+0x54>
 8015a98:	681d      	ldr	r5, [r3, #0]
 8015a9a:	6840      	ldr	r0, [r0, #4]
 8015a9c:	4285      	cmp	r5, r0
 8015a9e:	d217      	bcs.n	8015ad0 <rcl_wait_set_add_subscription+0x44>
 8015aa0:	6820      	ldr	r0, [r4, #0]
 8015aa2:	1c6e      	adds	r6, r5, #1
 8015aa4:	601e      	str	r6, [r3, #0]
 8015aa6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015aaa:	b102      	cbz	r2, 8015aae <rcl_wait_set_add_subscription+0x22>
 8015aac:	6015      	str	r5, [r2, #0]
 8015aae:	4608      	mov	r0, r1
 8015ab0:	f7ff fb08 	bl	80150c4 <rcl_subscription_get_rmw_handle>
 8015ab4:	b150      	cbz	r0, 8015acc <rcl_wait_set_add_subscription+0x40>
 8015ab6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ab8:	6842      	ldr	r2, [r0, #4]
 8015aba:	689b      	ldr	r3, [r3, #8]
 8015abc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ac0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015ac2:	6853      	ldr	r3, [r2, #4]
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	2000      	movs	r0, #0
 8015ac8:	6053      	str	r3, [r2, #4]
 8015aca:	bd70      	pop	{r4, r5, r6, pc}
 8015acc:	2001      	movs	r0, #1
 8015ace:	bd70      	pop	{r4, r5, r6, pc}
 8015ad0:	f240 3086 	movw	r0, #902	@ 0x386
 8015ad4:	bd70      	pop	{r4, r5, r6, pc}
 8015ad6:	200b      	movs	r0, #11
 8015ad8:	4770      	bx	lr
 8015ada:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ade:	bd70      	pop	{r4, r5, r6, pc}
 8015ae0:	200b      	movs	r0, #11
 8015ae2:	bd70      	pop	{r4, r5, r6, pc}

08015ae4 <rcl_wait_set_clear>:
 8015ae4:	2800      	cmp	r0, #0
 8015ae6:	d073      	beq.n	8015bd0 <rcl_wait_set_clear+0xec>
 8015ae8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015aea:	b510      	push	{r4, lr}
 8015aec:	4604      	mov	r4, r0
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d070      	beq.n	8015bd4 <rcl_wait_set_clear+0xf0>
 8015af2:	6800      	ldr	r0, [r0, #0]
 8015af4:	b138      	cbz	r0, 8015b06 <rcl_wait_set_clear+0x22>
 8015af6:	6862      	ldr	r2, [r4, #4]
 8015af8:	2100      	movs	r1, #0
 8015afa:	0092      	lsls	r2, r2, #2
 8015afc:	f004 fd80 	bl	801a600 <memset>
 8015b00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
 8015b06:	68a0      	ldr	r0, [r4, #8]
 8015b08:	b138      	cbz	r0, 8015b1a <rcl_wait_set_clear+0x36>
 8015b0a:	68e2      	ldr	r2, [r4, #12]
 8015b0c:	2100      	movs	r1, #0
 8015b0e:	0092      	lsls	r2, r2, #2
 8015b10:	f004 fd76 	bl	801a600 <memset>
 8015b14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b16:	2200      	movs	r2, #0
 8015b18:	60da      	str	r2, [r3, #12]
 8015b1a:	69a0      	ldr	r0, [r4, #24]
 8015b1c:	b138      	cbz	r0, 8015b2e <rcl_wait_set_clear+0x4a>
 8015b1e:	69e2      	ldr	r2, [r4, #28]
 8015b20:	2100      	movs	r1, #0
 8015b22:	0092      	lsls	r2, r2, #2
 8015b24:	f004 fd6c 	bl	801a600 <memset>
 8015b28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	619a      	str	r2, [r3, #24]
 8015b2e:	6a20      	ldr	r0, [r4, #32]
 8015b30:	b138      	cbz	r0, 8015b42 <rcl_wait_set_clear+0x5e>
 8015b32:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015b34:	2100      	movs	r1, #0
 8015b36:	0092      	lsls	r2, r2, #2
 8015b38:	f004 fd62 	bl	801a600 <memset>
 8015b3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b3e:	2200      	movs	r2, #0
 8015b40:	625a      	str	r2, [r3, #36]	@ 0x24
 8015b42:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015b44:	b138      	cbz	r0, 8015b56 <rcl_wait_set_clear+0x72>
 8015b46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015b48:	2100      	movs	r1, #0
 8015b4a:	0092      	lsls	r2, r2, #2
 8015b4c:	f004 fd58 	bl	801a600 <memset>
 8015b50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b52:	2200      	movs	r2, #0
 8015b54:	631a      	str	r2, [r3, #48]	@ 0x30
 8015b56:	6920      	ldr	r0, [r4, #16]
 8015b58:	b138      	cbz	r0, 8015b6a <rcl_wait_set_clear+0x86>
 8015b5a:	6962      	ldr	r2, [r4, #20]
 8015b5c:	2100      	movs	r1, #0
 8015b5e:	0092      	lsls	r2, r2, #2
 8015b60:	f004 fd4e 	bl	801a600 <memset>
 8015b64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b66:	2200      	movs	r2, #0
 8015b68:	641a      	str	r2, [r3, #64]	@ 0x40
 8015b6a:	6898      	ldr	r0, [r3, #8]
 8015b6c:	b138      	cbz	r0, 8015b7e <rcl_wait_set_clear+0x9a>
 8015b6e:	685a      	ldr	r2, [r3, #4]
 8015b70:	2100      	movs	r1, #0
 8015b72:	0092      	lsls	r2, r2, #2
 8015b74:	f004 fd44 	bl	801a600 <memset>
 8015b78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	605a      	str	r2, [r3, #4]
 8015b7e:	6958      	ldr	r0, [r3, #20]
 8015b80:	b138      	cbz	r0, 8015b92 <rcl_wait_set_clear+0xae>
 8015b82:	691a      	ldr	r2, [r3, #16]
 8015b84:	2100      	movs	r1, #0
 8015b86:	0092      	lsls	r2, r2, #2
 8015b88:	f004 fd3a 	bl	801a600 <memset>
 8015b8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b8e:	2200      	movs	r2, #0
 8015b90:	611a      	str	r2, [r3, #16]
 8015b92:	6a18      	ldr	r0, [r3, #32]
 8015b94:	b138      	cbz	r0, 8015ba6 <rcl_wait_set_clear+0xc2>
 8015b96:	69da      	ldr	r2, [r3, #28]
 8015b98:	2100      	movs	r1, #0
 8015b9a:	0092      	lsls	r2, r2, #2
 8015b9c:	f004 fd30 	bl	801a600 <memset>
 8015ba0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	61da      	str	r2, [r3, #28]
 8015ba6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015ba8:	b138      	cbz	r0, 8015bba <rcl_wait_set_clear+0xd6>
 8015baa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015bac:	2100      	movs	r1, #0
 8015bae:	0092      	lsls	r2, r2, #2
 8015bb0:	f004 fd26 	bl	801a600 <memset>
 8015bb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8015bba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015bbc:	b138      	cbz	r0, 8015bce <rcl_wait_set_clear+0xea>
 8015bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015bc0:	2100      	movs	r1, #0
 8015bc2:	0092      	lsls	r2, r2, #2
 8015bc4:	f004 fd1c 	bl	801a600 <memset>
 8015bc8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015bca:	2000      	movs	r0, #0
 8015bcc:	6358      	str	r0, [r3, #52]	@ 0x34
 8015bce:	bd10      	pop	{r4, pc}
 8015bd0:	200b      	movs	r0, #11
 8015bd2:	4770      	bx	lr
 8015bd4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015bd8:	bd10      	pop	{r4, pc}
 8015bda:	bf00      	nop

08015bdc <rcl_wait_set_resize>:
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	f000 8185 	beq.w	8015eec <rcl_wait_set_resize+0x310>
 8015be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015be6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015be8:	b083      	sub	sp, #12
 8015bea:	4605      	mov	r5, r0
 8015bec:	2c00      	cmp	r4, #0
 8015bee:	f000 817f 	beq.w	8015ef0 <rcl_wait_set_resize+0x314>
 8015bf2:	f04f 0900 	mov.w	r9, #0
 8015bf6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015bfa:	461f      	mov	r7, r3
 8015bfc:	4688      	mov	r8, r1
 8015bfe:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8015c02:	4616      	mov	r6, r2
 8015c04:	f8c0 9004 	str.w	r9, [r0, #4]
 8015c08:	f8c4 9000 	str.w	r9, [r4]
 8015c0c:	2900      	cmp	r1, #0
 8015c0e:	f000 80bd 	beq.w	8015d8c <rcl_wait_set_resize+0x1b0>
 8015c12:	008c      	lsls	r4, r1, #2
 8015c14:	6800      	ldr	r0, [r0, #0]
 8015c16:	9301      	str	r3, [sp, #4]
 8015c18:	4652      	mov	r2, sl
 8015c1a:	4621      	mov	r1, r4
 8015c1c:	4798      	blx	r3
 8015c1e:	9b01      	ldr	r3, [sp, #4]
 8015c20:	6028      	str	r0, [r5, #0]
 8015c22:	2800      	cmp	r0, #0
 8015c24:	f000 80cb 	beq.w	8015dbe <rcl_wait_set_resize+0x1e2>
 8015c28:	4622      	mov	r2, r4
 8015c2a:	4649      	mov	r1, r9
 8015c2c:	9301      	str	r3, [sp, #4]
 8015c2e:	f004 fce7 	bl	801a600 <memset>
 8015c32:	f8c5 8004 	str.w	r8, [r5, #4]
 8015c36:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015c3a:	9b01      	ldr	r3, [sp, #4]
 8015c3c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015c40:	f8c8 9004 	str.w	r9, [r8, #4]
 8015c44:	4652      	mov	r2, sl
 8015c46:	4621      	mov	r1, r4
 8015c48:	4798      	blx	r3
 8015c4a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c4c:	f8c8 0008 	str.w	r0, [r8, #8]
 8015c50:	689b      	ldr	r3, [r3, #8]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	f000 80ac 	beq.w	8015db0 <rcl_wait_set_resize+0x1d4>
 8015c58:	4622      	mov	r2, r4
 8015c5a:	4649      	mov	r1, r9
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f004 fccf 	bl	801a600 <memset>
 8015c62:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c64:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015c68:	f04f 0800 	mov.w	r8, #0
 8015c6c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8015c70:	f8c5 800c 	str.w	r8, [r5, #12]
 8015c74:	f8c4 800c 	str.w	r8, [r4, #12]
 8015c78:	2e00      	cmp	r6, #0
 8015c7a:	f040 80a4 	bne.w	8015dc6 <rcl_wait_set_resize+0x1ea>
 8015c7e:	68a8      	ldr	r0, [r5, #8]
 8015c80:	b128      	cbz	r0, 8015c8e <rcl_wait_set_resize+0xb2>
 8015c82:	4649      	mov	r1, r9
 8015c84:	4790      	blx	r2
 8015c86:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c88:	60ae      	str	r6, [r5, #8]
 8015c8a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015c8e:	f04f 0800 	mov.w	r8, #0
 8015c92:	19f6      	adds	r6, r6, r7
 8015c94:	f8c4 8010 	str.w	r8, [r4, #16]
 8015c98:	f040 80ac 	bne.w	8015df4 <rcl_wait_set_resize+0x218>
 8015c9c:	6960      	ldr	r0, [r4, #20]
 8015c9e:	b130      	cbz	r0, 8015cae <rcl_wait_set_resize+0xd2>
 8015ca0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015ca2:	4649      	mov	r1, r9
 8015ca4:	4798      	blx	r3
 8015ca6:	6166      	str	r6, [r4, #20]
 8015ca8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015caa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015cae:	2600      	movs	r6, #0
 8015cb0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015cb4:	616e      	str	r6, [r5, #20]
 8015cb6:	6426      	str	r6, [r4, #64]	@ 0x40
 8015cb8:	2f00      	cmp	r7, #0
 8015cba:	f040 80ad 	bne.w	8015e18 <rcl_wait_set_resize+0x23c>
 8015cbe:	6928      	ldr	r0, [r5, #16]
 8015cc0:	b138      	cbz	r0, 8015cd2 <rcl_wait_set_resize+0xf6>
 8015cc2:	4649      	mov	r1, r9
 8015cc4:	47d0      	blx	sl
 8015cc6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cc8:	612f      	str	r7, [r5, #16]
 8015cca:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015cce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015cd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015cd4:	2600      	movs	r6, #0
 8015cd6:	61ee      	str	r6, [r5, #28]
 8015cd8:	61a6      	str	r6, [r4, #24]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	f040 80af 	bne.w	8015e3e <rcl_wait_set_resize+0x262>
 8015ce0:	69a8      	ldr	r0, [r5, #24]
 8015ce2:	b120      	cbz	r0, 8015cee <rcl_wait_set_resize+0x112>
 8015ce4:	4649      	mov	r1, r9
 8015ce6:	47d0      	blx	sl
 8015ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015cea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cec:	61ab      	str	r3, [r5, #24]
 8015cee:	6a20      	ldr	r0, [r4, #32]
 8015cf0:	b128      	cbz	r0, 8015cfe <rcl_wait_set_resize+0x122>
 8015cf2:	4649      	mov	r1, r9
 8015cf4:	47d0      	blx	sl
 8015cf6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d00:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015d02:	2600      	movs	r6, #0
 8015d04:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015d08:	626e      	str	r6, [r5, #36]	@ 0x24
 8015d0a:	6266      	str	r6, [r4, #36]	@ 0x24
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	f000 80b6 	beq.w	8015e7e <rcl_wait_set_resize+0x2a2>
 8015d12:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015d16:	6a28      	ldr	r0, [r5, #32]
 8015d18:	463a      	mov	r2, r7
 8015d1a:	4651      	mov	r1, sl
 8015d1c:	47c8      	blx	r9
 8015d1e:	6228      	str	r0, [r5, #32]
 8015d20:	2800      	cmp	r0, #0
 8015d22:	d04c      	beq.n	8015dbe <rcl_wait_set_resize+0x1e2>
 8015d24:	4652      	mov	r2, sl
 8015d26:	4631      	mov	r1, r6
 8015d28:	f004 fc6a 	bl	801a600 <memset>
 8015d2c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d30:	626b      	str	r3, [r5, #36]	@ 0x24
 8015d32:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015d34:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015d36:	463a      	mov	r2, r7
 8015d38:	4651      	mov	r1, sl
 8015d3a:	47c8      	blx	r9
 8015d3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015d3e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8015d40:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8015d42:	2c00      	cmp	r4, #0
 8015d44:	f000 80f0 	beq.w	8015f28 <rcl_wait_set_resize+0x34c>
 8015d48:	4620      	mov	r0, r4
 8015d4a:	4652      	mov	r2, sl
 8015d4c:	4631      	mov	r1, r6
 8015d4e:	f004 fc57 	bl	801a600 <memset>
 8015d52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d56:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015d58:	2600      	movs	r6, #0
 8015d5a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015d5e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015d60:	6326      	str	r6, [r4, #48]	@ 0x30
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	f040 809d 	bne.w	8015ea2 <rcl_wait_set_resize+0x2c6>
 8015d68:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015d6a:	b120      	cbz	r0, 8015d76 <rcl_wait_set_resize+0x19a>
 8015d6c:	4639      	mov	r1, r7
 8015d6e:	47c0      	blx	r8
 8015d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d72:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d74:	62ab      	str	r3, [r5, #40]	@ 0x28
 8015d76:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015d78:	b310      	cbz	r0, 8015dc0 <rcl_wait_set_resize+0x1e4>
 8015d7a:	4639      	mov	r1, r7
 8015d7c:	47c0      	blx	r8
 8015d7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015d80:	2000      	movs	r0, #0
 8015d82:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015d86:	b003      	add	sp, #12
 8015d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d8c:	6800      	ldr	r0, [r0, #0]
 8015d8e:	b120      	cbz	r0, 8015d9a <rcl_wait_set_resize+0x1be>
 8015d90:	4651      	mov	r1, sl
 8015d92:	47d8      	blx	fp
 8015d94:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015d96:	f8c5 8000 	str.w	r8, [r5]
 8015d9a:	68a0      	ldr	r0, [r4, #8]
 8015d9c:	2800      	cmp	r0, #0
 8015d9e:	f43f af61 	beq.w	8015c64 <rcl_wait_set_resize+0x88>
 8015da2:	4651      	mov	r1, sl
 8015da4:	47d8      	blx	fp
 8015da6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015da8:	2300      	movs	r3, #0
 8015daa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015dae:	e759      	b.n	8015c64 <rcl_wait_set_resize+0x88>
 8015db0:	6828      	ldr	r0, [r5, #0]
 8015db2:	9301      	str	r3, [sp, #4]
 8015db4:	4651      	mov	r1, sl
 8015db6:	47d8      	blx	fp
 8015db8:	9b01      	ldr	r3, [sp, #4]
 8015dba:	e9c5 3300 	strd	r3, r3, [r5]
 8015dbe:	200a      	movs	r0, #10
 8015dc0:	b003      	add	sp, #12
 8015dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc6:	00b4      	lsls	r4, r6, #2
 8015dc8:	68a8      	ldr	r0, [r5, #8]
 8015dca:	464a      	mov	r2, r9
 8015dcc:	4621      	mov	r1, r4
 8015dce:	4798      	blx	r3
 8015dd0:	60a8      	str	r0, [r5, #8]
 8015dd2:	2800      	cmp	r0, #0
 8015dd4:	d0f3      	beq.n	8015dbe <rcl_wait_set_resize+0x1e2>
 8015dd6:	4622      	mov	r2, r4
 8015dd8:	4641      	mov	r1, r8
 8015dda:	f004 fc11 	bl	801a600 <memset>
 8015dde:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015de0:	60ee      	str	r6, [r5, #12]
 8015de2:	f04f 0800 	mov.w	r8, #0
 8015de6:	19f6      	adds	r6, r6, r7
 8015de8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015dec:	f8c4 8010 	str.w	r8, [r4, #16]
 8015df0:	f43f af54 	beq.w	8015c9c <rcl_wait_set_resize+0xc0>
 8015df4:	00b6      	lsls	r6, r6, #2
 8015df6:	464a      	mov	r2, r9
 8015df8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015dfa:	6960      	ldr	r0, [r4, #20]
 8015dfc:	4631      	mov	r1, r6
 8015dfe:	4798      	blx	r3
 8015e00:	4681      	mov	r9, r0
 8015e02:	6160      	str	r0, [r4, #20]
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d076      	beq.n	8015ef6 <rcl_wait_set_resize+0x31a>
 8015e08:	4632      	mov	r2, r6
 8015e0a:	4641      	mov	r1, r8
 8015e0c:	f004 fbf8 	bl	801a600 <memset>
 8015e10:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015e12:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015e16:	e74a      	b.n	8015cae <rcl_wait_set_resize+0xd2>
 8015e18:	00bc      	lsls	r4, r7, #2
 8015e1a:	6928      	ldr	r0, [r5, #16]
 8015e1c:	464a      	mov	r2, r9
 8015e1e:	4621      	mov	r1, r4
 8015e20:	47c0      	blx	r8
 8015e22:	6128      	str	r0, [r5, #16]
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d0ca      	beq.n	8015dbe <rcl_wait_set_resize+0x1e2>
 8015e28:	4622      	mov	r2, r4
 8015e2a:	4631      	mov	r1, r6
 8015e2c:	f004 fbe8 	bl	801a600 <memset>
 8015e30:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015e32:	616f      	str	r7, [r5, #20]
 8015e34:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015e38:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015e3c:	e749      	b.n	8015cd2 <rcl_wait_set_resize+0xf6>
 8015e3e:	009c      	lsls	r4, r3, #2
 8015e40:	69a8      	ldr	r0, [r5, #24]
 8015e42:	464a      	mov	r2, r9
 8015e44:	4621      	mov	r1, r4
 8015e46:	47c0      	blx	r8
 8015e48:	61a8      	str	r0, [r5, #24]
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	d0b7      	beq.n	8015dbe <rcl_wait_set_resize+0x1e2>
 8015e4e:	4622      	mov	r2, r4
 8015e50:	4631      	mov	r1, r6
 8015e52:	f004 fbd5 	bl	801a600 <memset>
 8015e56:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015e58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e5a:	61eb      	str	r3, [r5, #28]
 8015e5c:	6a38      	ldr	r0, [r7, #32]
 8015e5e:	61fe      	str	r6, [r7, #28]
 8015e60:	464a      	mov	r2, r9
 8015e62:	4621      	mov	r1, r4
 8015e64:	47c0      	blx	r8
 8015e66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015e68:	6238      	str	r0, [r7, #32]
 8015e6a:	6a1f      	ldr	r7, [r3, #32]
 8015e6c:	2f00      	cmp	r7, #0
 8015e6e:	d054      	beq.n	8015f1a <rcl_wait_set_resize+0x33e>
 8015e70:	4622      	mov	r2, r4
 8015e72:	4631      	mov	r1, r6
 8015e74:	4638      	mov	r0, r7
 8015e76:	f004 fbc3 	bl	801a600 <memset>
 8015e7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015e7c:	e73f      	b.n	8015cfe <rcl_wait_set_resize+0x122>
 8015e7e:	6a28      	ldr	r0, [r5, #32]
 8015e80:	b120      	cbz	r0, 8015e8c <rcl_wait_set_resize+0x2b0>
 8015e82:	4639      	mov	r1, r7
 8015e84:	47c0      	blx	r8
 8015e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e88:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015e8a:	622b      	str	r3, [r5, #32]
 8015e8c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015e8e:	2800      	cmp	r0, #0
 8015e90:	f43f af60 	beq.w	8015d54 <rcl_wait_set_resize+0x178>
 8015e94:	4639      	mov	r1, r7
 8015e96:	47c0      	blx	r8
 8015e98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015ea0:	e758      	b.n	8015d54 <rcl_wait_set_resize+0x178>
 8015ea2:	009c      	lsls	r4, r3, #2
 8015ea4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015ea6:	463a      	mov	r2, r7
 8015ea8:	4621      	mov	r1, r4
 8015eaa:	47c8      	blx	r9
 8015eac:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	d085      	beq.n	8015dbe <rcl_wait_set_resize+0x1e2>
 8015eb2:	4622      	mov	r2, r4
 8015eb4:	4631      	mov	r1, r6
 8015eb6:	f004 fba3 	bl	801a600 <memset>
 8015eba:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ec0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015ec2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015ec6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015eca:	463a      	mov	r2, r7
 8015ecc:	4621      	mov	r1, r4
 8015ece:	47c8      	blx	r9
 8015ed0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ed2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ed8:	b36b      	cbz	r3, 8015f36 <rcl_wait_set_resize+0x35a>
 8015eda:	4622      	mov	r2, r4
 8015edc:	4631      	mov	r1, r6
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f004 fb8e 	bl	801a600 <memset>
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	b003      	add	sp, #12
 8015ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eec:	200b      	movs	r0, #11
 8015eee:	4770      	bx	lr
 8015ef0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ef4:	e764      	b.n	8015dc0 <rcl_wait_set_resize+0x1e4>
 8015ef6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ef8:	68a8      	ldr	r0, [r5, #8]
 8015efa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015efe:	4798      	blx	r3
 8015f00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015f02:	6928      	ldr	r0, [r5, #16]
 8015f04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015f06:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015f08:	f8c5 900c 	str.w	r9, [r5, #12]
 8015f0c:	f8c5 9008 	str.w	r9, [r5, #8]
 8015f10:	4790      	blx	r2
 8015f12:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8015f16:	200a      	movs	r0, #10
 8015f18:	e752      	b.n	8015dc0 <rcl_wait_set_resize+0x1e4>
 8015f1a:	69a8      	ldr	r0, [r5, #24]
 8015f1c:	4649      	mov	r1, r9
 8015f1e:	47d0      	blx	sl
 8015f20:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015f24:	200a      	movs	r0, #10
 8015f26:	e74b      	b.n	8015dc0 <rcl_wait_set_resize+0x1e4>
 8015f28:	6a28      	ldr	r0, [r5, #32]
 8015f2a:	4639      	mov	r1, r7
 8015f2c:	47c0      	blx	r8
 8015f2e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8015f32:	200a      	movs	r0, #10
 8015f34:	e744      	b.n	8015dc0 <rcl_wait_set_resize+0x1e4>
 8015f36:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015f38:	9301      	str	r3, [sp, #4]
 8015f3a:	4639      	mov	r1, r7
 8015f3c:	47c0      	blx	r8
 8015f3e:	9b01      	ldr	r3, [sp, #4]
 8015f40:	200a      	movs	r0, #10
 8015f42:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015f46:	e73b      	b.n	8015dc0 <rcl_wait_set_resize+0x1e4>

08015f48 <rcl_wait_set_init>:
 8015f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f4c:	b084      	sub	sp, #16
 8015f4e:	4604      	mov	r4, r0
 8015f50:	a810      	add	r0, sp, #64	@ 0x40
 8015f52:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015f56:	460f      	mov	r7, r1
 8015f58:	4690      	mov	r8, r2
 8015f5a:	4699      	mov	r9, r3
 8015f5c:	f7f7 ff72 	bl	800de44 <rcutils_allocator_is_valid>
 8015f60:	2800      	cmp	r0, #0
 8015f62:	d06b      	beq.n	801603c <rcl_wait_set_init+0xf4>
 8015f64:	2c00      	cmp	r4, #0
 8015f66:	d069      	beq.n	801603c <rcl_wait_set_init+0xf4>
 8015f68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015f6a:	b125      	cbz	r5, 8015f76 <rcl_wait_set_init+0x2e>
 8015f6c:	2564      	movs	r5, #100	@ 0x64
 8015f6e:	4628      	mov	r0, r5
 8015f70:	b004      	add	sp, #16
 8015f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f76:	f1ba 0f00 	cmp.w	sl, #0
 8015f7a:	d05f      	beq.n	801603c <rcl_wait_set_init+0xf4>
 8015f7c:	4650      	mov	r0, sl
 8015f7e:	f7fe fa5b 	bl	8014438 <rcl_context_is_valid>
 8015f82:	2800      	cmp	r0, #0
 8015f84:	d067      	beq.n	8016056 <rcl_wait_set_init+0x10e>
 8015f86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f88:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015f8a:	205c      	movs	r0, #92	@ 0x5c
 8015f8c:	4798      	blx	r3
 8015f8e:	6320      	str	r0, [r4, #48]	@ 0x30
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d062      	beq.n	801605a <rcl_wait_set_init+0x112>
 8015f94:	4629      	mov	r1, r5
 8015f96:	225c      	movs	r2, #92	@ 0x5c
 8015f98:	f004 fb32 	bl	801a600 <memset>
 8015f9c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015fa0:	eb03 0e02 	add.w	lr, r3, r2
 8015fa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fa6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015fa8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015fac:	449e      	add	lr, r3
 8015fae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fb2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015fb6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015fba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015fbe:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015fc2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015fc6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015fca:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015fce:	f8da a000 	ldr.w	sl, [sl]
 8015fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015fd4:	44c6      	add	lr, r8
 8015fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8015fda:	602b      	str	r3, [r5, #0]
 8015fdc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015fe0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015fe4:	f002 f9fe 	bl	80183e4 <rmw_create_wait_set>
 8015fe8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015fea:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015fec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015fee:	b350      	cbz	r0, 8016046 <rcl_wait_set_init+0xfe>
 8015ff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ff2:	9302      	str	r3, [sp, #8]
 8015ff4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ff6:	9301      	str	r3, [sp, #4]
 8015ff8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ffa:	9300      	str	r3, [sp, #0]
 8015ffc:	4642      	mov	r2, r8
 8015ffe:	464b      	mov	r3, r9
 8016000:	4639      	mov	r1, r7
 8016002:	4620      	mov	r0, r4
 8016004:	f7ff fdea 	bl	8015bdc <rcl_wait_set_resize>
 8016008:	4605      	mov	r5, r0
 801600a:	2800      	cmp	r0, #0
 801600c:	d0af      	beq.n	8015f6e <rcl_wait_set_init+0x26>
 801600e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016010:	bb2b      	cbnz	r3, 801605e <rcl_wait_set_init+0x116>
 8016012:	2600      	movs	r6, #0
 8016014:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016018:	9600      	str	r6, [sp, #0]
 801601a:	4633      	mov	r3, r6
 801601c:	4632      	mov	r2, r6
 801601e:	4631      	mov	r1, r6
 8016020:	4620      	mov	r0, r4
 8016022:	f7ff fddb 	bl	8015bdc <rcl_wait_set_resize>
 8016026:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016028:	2800      	cmp	r0, #0
 801602a:	d0a0      	beq.n	8015f6e <rcl_wait_set_init+0x26>
 801602c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801602e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016030:	4798      	blx	r3
 8016032:	4628      	mov	r0, r5
 8016034:	6326      	str	r6, [r4, #48]	@ 0x30
 8016036:	b004      	add	sp, #16
 8016038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801603c:	250b      	movs	r5, #11
 801603e:	4628      	mov	r0, r5
 8016040:	b004      	add	sp, #16
 8016042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016046:	2501      	movs	r5, #1
 8016048:	f002 f9d6 	bl	80183f8 <rmw_destroy_wait_set>
 801604c:	2800      	cmp	r0, #0
 801604e:	bf18      	it	ne
 8016050:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8016054:	e7dd      	b.n	8016012 <rcl_wait_set_init+0xca>
 8016056:	2565      	movs	r5, #101	@ 0x65
 8016058:	e789      	b.n	8015f6e <rcl_wait_set_init+0x26>
 801605a:	250a      	movs	r5, #10
 801605c:	e787      	b.n	8015f6e <rcl_wait_set_init+0x26>
 801605e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016060:	e7f2      	b.n	8016048 <rcl_wait_set_init+0x100>
 8016062:	bf00      	nop

08016064 <rcl_wait_set_add_guard_condition>:
 8016064:	b318      	cbz	r0, 80160ae <rcl_wait_set_add_guard_condition+0x4a>
 8016066:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016068:	b570      	push	{r4, r5, r6, lr}
 801606a:	4604      	mov	r4, r0
 801606c:	b30b      	cbz	r3, 80160b2 <rcl_wait_set_add_guard_condition+0x4e>
 801606e:	b319      	cbz	r1, 80160b8 <rcl_wait_set_add_guard_condition+0x54>
 8016070:	68dd      	ldr	r5, [r3, #12]
 8016072:	68c0      	ldr	r0, [r0, #12]
 8016074:	4285      	cmp	r5, r0
 8016076:	d217      	bcs.n	80160a8 <rcl_wait_set_add_guard_condition+0x44>
 8016078:	68a0      	ldr	r0, [r4, #8]
 801607a:	1c6e      	adds	r6, r5, #1
 801607c:	60de      	str	r6, [r3, #12]
 801607e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016082:	b102      	cbz	r2, 8016086 <rcl_wait_set_add_guard_condition+0x22>
 8016084:	6015      	str	r5, [r2, #0]
 8016086:	4608      	mov	r0, r1
 8016088:	f003 fc04 	bl	8019894 <rcl_guard_condition_get_rmw_handle>
 801608c:	b150      	cbz	r0, 80160a4 <rcl_wait_set_add_guard_condition+0x40>
 801608e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016090:	6842      	ldr	r2, [r0, #4]
 8016092:	695b      	ldr	r3, [r3, #20]
 8016094:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016098:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801609a:	6913      	ldr	r3, [r2, #16]
 801609c:	3301      	adds	r3, #1
 801609e:	2000      	movs	r0, #0
 80160a0:	6113      	str	r3, [r2, #16]
 80160a2:	bd70      	pop	{r4, r5, r6, pc}
 80160a4:	2001      	movs	r0, #1
 80160a6:	bd70      	pop	{r4, r5, r6, pc}
 80160a8:	f240 3086 	movw	r0, #902	@ 0x386
 80160ac:	bd70      	pop	{r4, r5, r6, pc}
 80160ae:	200b      	movs	r0, #11
 80160b0:	4770      	bx	lr
 80160b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80160b6:	bd70      	pop	{r4, r5, r6, pc}
 80160b8:	200b      	movs	r0, #11
 80160ba:	bd70      	pop	{r4, r5, r6, pc}

080160bc <rcl_wait_set_add_timer>:
 80160bc:	b328      	cbz	r0, 801610a <rcl_wait_set_add_timer+0x4e>
 80160be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80160c0:	b570      	push	{r4, r5, r6, lr}
 80160c2:	4604      	mov	r4, r0
 80160c4:	b31b      	cbz	r3, 801610e <rcl_wait_set_add_timer+0x52>
 80160c6:	b329      	cbz	r1, 8016114 <rcl_wait_set_add_timer+0x58>
 80160c8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80160ca:	6965      	ldr	r5, [r4, #20]
 80160cc:	42a8      	cmp	r0, r5
 80160ce:	d219      	bcs.n	8016104 <rcl_wait_set_add_timer+0x48>
 80160d0:	6925      	ldr	r5, [r4, #16]
 80160d2:	1c46      	adds	r6, r0, #1
 80160d4:	641e      	str	r6, [r3, #64]	@ 0x40
 80160d6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80160da:	b102      	cbz	r2, 80160de <rcl_wait_set_add_timer+0x22>
 80160dc:	6010      	str	r0, [r2, #0]
 80160de:	4608      	mov	r0, r1
 80160e0:	f7ff fba6 	bl	8015830 <rcl_timer_get_guard_condition>
 80160e4:	b168      	cbz	r0, 8016102 <rcl_wait_set_add_timer+0x46>
 80160e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80160e8:	68e3      	ldr	r3, [r4, #12]
 80160ea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80160ec:	3b01      	subs	r3, #1
 80160ee:	441d      	add	r5, r3
 80160f0:	f003 fbd0 	bl	8019894 <rcl_guard_condition_get_rmw_handle>
 80160f4:	b180      	cbz	r0, 8016118 <rcl_wait_set_add_timer+0x5c>
 80160f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160f8:	6842      	ldr	r2, [r0, #4]
 80160fa:	695b      	ldr	r3, [r3, #20]
 80160fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016100:	2000      	movs	r0, #0
 8016102:	bd70      	pop	{r4, r5, r6, pc}
 8016104:	f240 3086 	movw	r0, #902	@ 0x386
 8016108:	bd70      	pop	{r4, r5, r6, pc}
 801610a:	200b      	movs	r0, #11
 801610c:	4770      	bx	lr
 801610e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016112:	bd70      	pop	{r4, r5, r6, pc}
 8016114:	200b      	movs	r0, #11
 8016116:	bd70      	pop	{r4, r5, r6, pc}
 8016118:	2001      	movs	r0, #1
 801611a:	bd70      	pop	{r4, r5, r6, pc}

0801611c <rcl_wait_set_add_client>:
 801611c:	b318      	cbz	r0, 8016166 <rcl_wait_set_add_client+0x4a>
 801611e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016120:	b570      	push	{r4, r5, r6, lr}
 8016122:	4604      	mov	r4, r0
 8016124:	b30b      	cbz	r3, 801616a <rcl_wait_set_add_client+0x4e>
 8016126:	b319      	cbz	r1, 8016170 <rcl_wait_set_add_client+0x54>
 8016128:	699d      	ldr	r5, [r3, #24]
 801612a:	69c0      	ldr	r0, [r0, #28]
 801612c:	4285      	cmp	r5, r0
 801612e:	d217      	bcs.n	8016160 <rcl_wait_set_add_client+0x44>
 8016130:	69a0      	ldr	r0, [r4, #24]
 8016132:	1c6e      	adds	r6, r5, #1
 8016134:	619e      	str	r6, [r3, #24]
 8016136:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801613a:	b102      	cbz	r2, 801613e <rcl_wait_set_add_client+0x22>
 801613c:	6015      	str	r5, [r2, #0]
 801613e:	4608      	mov	r0, r1
 8016140:	f7fe f8ce 	bl	80142e0 <rcl_client_get_rmw_handle>
 8016144:	b150      	cbz	r0, 801615c <rcl_wait_set_add_client+0x40>
 8016146:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016148:	6842      	ldr	r2, [r0, #4]
 801614a:	6a1b      	ldr	r3, [r3, #32]
 801614c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016150:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016152:	69d3      	ldr	r3, [r2, #28]
 8016154:	3301      	adds	r3, #1
 8016156:	2000      	movs	r0, #0
 8016158:	61d3      	str	r3, [r2, #28]
 801615a:	bd70      	pop	{r4, r5, r6, pc}
 801615c:	2001      	movs	r0, #1
 801615e:	bd70      	pop	{r4, r5, r6, pc}
 8016160:	f240 3086 	movw	r0, #902	@ 0x386
 8016164:	bd70      	pop	{r4, r5, r6, pc}
 8016166:	200b      	movs	r0, #11
 8016168:	4770      	bx	lr
 801616a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801616e:	bd70      	pop	{r4, r5, r6, pc}
 8016170:	200b      	movs	r0, #11
 8016172:	bd70      	pop	{r4, r5, r6, pc}

08016174 <rcl_wait_set_add_service>:
 8016174:	b318      	cbz	r0, 80161be <rcl_wait_set_add_service+0x4a>
 8016176:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016178:	b570      	push	{r4, r5, r6, lr}
 801617a:	4604      	mov	r4, r0
 801617c:	b30b      	cbz	r3, 80161c2 <rcl_wait_set_add_service+0x4e>
 801617e:	b319      	cbz	r1, 80161c8 <rcl_wait_set_add_service+0x54>
 8016180:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016182:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016184:	4285      	cmp	r5, r0
 8016186:	d217      	bcs.n	80161b8 <rcl_wait_set_add_service+0x44>
 8016188:	6a20      	ldr	r0, [r4, #32]
 801618a:	1c6e      	adds	r6, r5, #1
 801618c:	625e      	str	r6, [r3, #36]	@ 0x24
 801618e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016192:	b102      	cbz	r2, 8016196 <rcl_wait_set_add_service+0x22>
 8016194:	6015      	str	r5, [r2, #0]
 8016196:	4608      	mov	r0, r1
 8016198:	f7fe fed4 	bl	8014f44 <rcl_service_get_rmw_handle>
 801619c:	b150      	cbz	r0, 80161b4 <rcl_wait_set_add_service+0x40>
 801619e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80161a0:	6842      	ldr	r2, [r0, #4]
 80161a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161a4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80161a8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80161aa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80161ac:	3301      	adds	r3, #1
 80161ae:	2000      	movs	r0, #0
 80161b0:	6293      	str	r3, [r2, #40]	@ 0x28
 80161b2:	bd70      	pop	{r4, r5, r6, pc}
 80161b4:	2001      	movs	r0, #1
 80161b6:	bd70      	pop	{r4, r5, r6, pc}
 80161b8:	f240 3086 	movw	r0, #902	@ 0x386
 80161bc:	bd70      	pop	{r4, r5, r6, pc}
 80161be:	200b      	movs	r0, #11
 80161c0:	4770      	bx	lr
 80161c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80161c6:	bd70      	pop	{r4, r5, r6, pc}
 80161c8:	200b      	movs	r0, #11
 80161ca:	bd70      	pop	{r4, r5, r6, pc}
 80161cc:	0000      	movs	r0, r0
	...

080161d0 <rcl_wait>:
 80161d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161d4:	ed2d 8b02 	vpush	{d8}
 80161d8:	b08d      	sub	sp, #52	@ 0x34
 80161da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80161de:	2800      	cmp	r0, #0
 80161e0:	f000 8143 	beq.w	801646a <rcl_wait+0x29a>
 80161e4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80161e6:	4605      	mov	r5, r0
 80161e8:	2e00      	cmp	r6, #0
 80161ea:	f000 8112 	beq.w	8016412 <rcl_wait+0x242>
 80161ee:	6843      	ldr	r3, [r0, #4]
 80161f0:	b983      	cbnz	r3, 8016214 <rcl_wait+0x44>
 80161f2:	68eb      	ldr	r3, [r5, #12]
 80161f4:	b973      	cbnz	r3, 8016214 <rcl_wait+0x44>
 80161f6:	696b      	ldr	r3, [r5, #20]
 80161f8:	b963      	cbnz	r3, 8016214 <rcl_wait+0x44>
 80161fa:	69eb      	ldr	r3, [r5, #28]
 80161fc:	b953      	cbnz	r3, 8016214 <rcl_wait+0x44>
 80161fe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016200:	b943      	cbnz	r3, 8016214 <rcl_wait+0x44>
 8016202:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8016204:	b933      	cbnz	r3, 8016214 <rcl_wait+0x44>
 8016206:	f240 3085 	movw	r0, #901	@ 0x385
 801620a:	b00d      	add	sp, #52	@ 0x34
 801620c:	ecbd 8b02 	vpop	{d8}
 8016210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016214:	9b04      	ldr	r3, [sp, #16]
 8016216:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016218:	2b01      	cmp	r3, #1
 801621a:	9b05      	ldr	r3, [sp, #20]
 801621c:	f173 0300 	sbcs.w	r3, r3, #0
 8016220:	f2c0 80f0 	blt.w	8016404 <rcl_wait+0x234>
 8016224:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016228:	4643      	mov	r3, r8
 801622a:	2a00      	cmp	r2, #0
 801622c:	f000 8133 	beq.w	8016496 <rcl_wait+0x2c6>
 8016230:	2400      	movs	r4, #0
 8016232:	4613      	mov	r3, r2
 8016234:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80164a8 <rcl_wait+0x2d8>
 8016238:	46a2      	mov	sl, r4
 801623a:	46a3      	mov	fp, r4
 801623c:	f240 3921 	movw	r9, #801	@ 0x321
 8016240:	4632      	mov	r2, r6
 8016242:	e014      	b.n	801626e <rcl_wait+0x9e>
 8016244:	2800      	cmp	r0, #0
 8016246:	d1e0      	bne.n	801620a <rcl_wait+0x3a>
 8016248:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801624c:	4542      	cmp	r2, r8
 801624e:	eb73 0107 	sbcs.w	r1, r3, r7
 8016252:	da03      	bge.n	801625c <rcl_wait+0x8c>
 8016254:	4690      	mov	r8, r2
 8016256:	461f      	mov	r7, r3
 8016258:	f04f 0b01 	mov.w	fp, #1
 801625c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801625e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016260:	3401      	adds	r4, #1
 8016262:	f14a 0a00 	adc.w	sl, sl, #0
 8016266:	429c      	cmp	r4, r3
 8016268:	f17a 0100 	sbcs.w	r1, sl, #0
 801626c:	d228      	bcs.n	80162c0 <rcl_wait+0xf0>
 801626e:	6928      	ldr	r0, [r5, #16]
 8016270:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016274:	a908      	add	r1, sp, #32
 8016276:	00a6      	lsls	r6, r4, #2
 8016278:	2800      	cmp	r0, #0
 801627a:	d0f1      	beq.n	8016260 <rcl_wait+0x90>
 801627c:	68eb      	ldr	r3, [r5, #12]
 801627e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016282:	4423      	add	r3, r4
 8016284:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016288:	f1be 0f00 	cmp.w	lr, #0
 801628c:	d006      	beq.n	801629c <rcl_wait+0xcc>
 801628e:	6913      	ldr	r3, [r2, #16]
 8016290:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016294:	3301      	adds	r3, #1
 8016296:	6113      	str	r3, [r2, #16]
 8016298:	692b      	ldr	r3, [r5, #16]
 801629a:	5998      	ldr	r0, [r3, r6]
 801629c:	ed8d 8b08 	vstr	d8, [sp, #32]
 80162a0:	f7ff fa94 	bl	80157cc <rcl_timer_get_time_until_next_call>
 80162a4:	4548      	cmp	r0, r9
 80162a6:	d1cd      	bne.n	8016244 <rcl_wait+0x74>
 80162a8:	692b      	ldr	r3, [r5, #16]
 80162aa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80162ac:	2100      	movs	r1, #0
 80162ae:	5199      	str	r1, [r3, r6]
 80162b0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80162b2:	3401      	adds	r4, #1
 80162b4:	f14a 0a00 	adc.w	sl, sl, #0
 80162b8:	429c      	cmp	r4, r3
 80162ba:	f17a 0100 	sbcs.w	r1, sl, #0
 80162be:	d3d6      	bcc.n	801626e <rcl_wait+0x9e>
 80162c0:	4616      	mov	r6, r2
 80162c2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80162c6:	4313      	orrs	r3, r2
 80162c8:	46d9      	mov	r9, fp
 80162ca:	f040 80a9 	bne.w	8016420 <rcl_wait+0x250>
 80162ce:	2300      	movs	r3, #0
 80162d0:	2200      	movs	r2, #0
 80162d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80162d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80162da:	ab08      	add	r3, sp, #32
 80162dc:	9302      	str	r3, [sp, #8]
 80162de:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80162e0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80162e4:	e9cd 3200 	strd	r3, r2, [sp]
 80162e8:	f106 0110 	add.w	r1, r6, #16
 80162ec:	f106 031c 	add.w	r3, r6, #28
 80162f0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80162f4:	1d30      	adds	r0, r6, #4
 80162f6:	f001 fefd 	bl	80180f4 <rmw_wait>
 80162fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80162fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80162fe:	4680      	mov	r8, r0
 8016300:	b1ca      	cbz	r2, 8016336 <rcl_wait+0x166>
 8016302:	2400      	movs	r4, #0
 8016304:	4627      	mov	r7, r4
 8016306:	692a      	ldr	r2, [r5, #16]
 8016308:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801630c:	f10d 011f 	add.w	r1, sp, #31
 8016310:	00a6      	lsls	r6, r4, #2
 8016312:	b160      	cbz	r0, 801632e <rcl_wait+0x15e>
 8016314:	f88d 701f 	strb.w	r7, [sp, #31]
 8016318:	f7ff fa1e 	bl	8015758 <rcl_timer_is_ready>
 801631c:	2800      	cmp	r0, #0
 801631e:	f47f af74 	bne.w	801620a <rcl_wait+0x3a>
 8016322:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016326:	b90b      	cbnz	r3, 801632c <rcl_wait+0x15c>
 8016328:	692a      	ldr	r2, [r5, #16]
 801632a:	5193      	str	r3, [r2, r6]
 801632c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801632e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016330:	3401      	adds	r4, #1
 8016332:	42a2      	cmp	r2, r4
 8016334:	d8e7      	bhi.n	8016306 <rcl_wait+0x136>
 8016336:	f038 0002 	bics.w	r0, r8, #2
 801633a:	f040 8090 	bne.w	801645e <rcl_wait+0x28e>
 801633e:	686e      	ldr	r6, [r5, #4]
 8016340:	4602      	mov	r2, r0
 8016342:	b91e      	cbnz	r6, 801634c <rcl_wait+0x17c>
 8016344:	e00d      	b.n	8016362 <rcl_wait+0x192>
 8016346:	3201      	adds	r2, #1
 8016348:	42b2      	cmp	r2, r6
 801634a:	d00a      	beq.n	8016362 <rcl_wait+0x192>
 801634c:	6899      	ldr	r1, [r3, #8]
 801634e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016352:	2900      	cmp	r1, #0
 8016354:	d1f7      	bne.n	8016346 <rcl_wait+0x176>
 8016356:	682c      	ldr	r4, [r5, #0]
 8016358:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801635c:	3201      	adds	r2, #1
 801635e:	42b2      	cmp	r2, r6
 8016360:	d1f4      	bne.n	801634c <rcl_wait+0x17c>
 8016362:	68ee      	ldr	r6, [r5, #12]
 8016364:	2200      	movs	r2, #0
 8016366:	b91e      	cbnz	r6, 8016370 <rcl_wait+0x1a0>
 8016368:	e00d      	b.n	8016386 <rcl_wait+0x1b6>
 801636a:	3201      	adds	r2, #1
 801636c:	42b2      	cmp	r2, r6
 801636e:	d00a      	beq.n	8016386 <rcl_wait+0x1b6>
 8016370:	6959      	ldr	r1, [r3, #20]
 8016372:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016376:	2900      	cmp	r1, #0
 8016378:	d1f7      	bne.n	801636a <rcl_wait+0x19a>
 801637a:	68ac      	ldr	r4, [r5, #8]
 801637c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016380:	3201      	adds	r2, #1
 8016382:	42b2      	cmp	r2, r6
 8016384:	d1f4      	bne.n	8016370 <rcl_wait+0x1a0>
 8016386:	69ee      	ldr	r6, [r5, #28]
 8016388:	2200      	movs	r2, #0
 801638a:	b91e      	cbnz	r6, 8016394 <rcl_wait+0x1c4>
 801638c:	e00d      	b.n	80163aa <rcl_wait+0x1da>
 801638e:	3201      	adds	r2, #1
 8016390:	42b2      	cmp	r2, r6
 8016392:	d00a      	beq.n	80163aa <rcl_wait+0x1da>
 8016394:	6a19      	ldr	r1, [r3, #32]
 8016396:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801639a:	2900      	cmp	r1, #0
 801639c:	d1f7      	bne.n	801638e <rcl_wait+0x1be>
 801639e:	69ac      	ldr	r4, [r5, #24]
 80163a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80163a4:	3201      	adds	r2, #1
 80163a6:	42b2      	cmp	r2, r6
 80163a8:	d1f4      	bne.n	8016394 <rcl_wait+0x1c4>
 80163aa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80163ac:	2200      	movs	r2, #0
 80163ae:	b91e      	cbnz	r6, 80163b8 <rcl_wait+0x1e8>
 80163b0:	e00d      	b.n	80163ce <rcl_wait+0x1fe>
 80163b2:	3201      	adds	r2, #1
 80163b4:	4296      	cmp	r6, r2
 80163b6:	d00a      	beq.n	80163ce <rcl_wait+0x1fe>
 80163b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80163ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80163be:	2900      	cmp	r1, #0
 80163c0:	d1f7      	bne.n	80163b2 <rcl_wait+0x1e2>
 80163c2:	6a2c      	ldr	r4, [r5, #32]
 80163c4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80163c8:	3201      	adds	r2, #1
 80163ca:	4296      	cmp	r6, r2
 80163cc:	d1f4      	bne.n	80163b8 <rcl_wait+0x1e8>
 80163ce:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80163d0:	2200      	movs	r2, #0
 80163d2:	b91e      	cbnz	r6, 80163dc <rcl_wait+0x20c>
 80163d4:	e00d      	b.n	80163f2 <rcl_wait+0x222>
 80163d6:	3201      	adds	r2, #1
 80163d8:	42b2      	cmp	r2, r6
 80163da:	d00a      	beq.n	80163f2 <rcl_wait+0x222>
 80163dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80163de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80163e2:	2900      	cmp	r1, #0
 80163e4:	d1f7      	bne.n	80163d6 <rcl_wait+0x206>
 80163e6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80163e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80163ec:	3201      	adds	r2, #1
 80163ee:	42b2      	cmp	r2, r6
 80163f0:	d1f4      	bne.n	80163dc <rcl_wait+0x20c>
 80163f2:	f1b8 0f02 	cmp.w	r8, #2
 80163f6:	f47f af08 	bne.w	801620a <rcl_wait+0x3a>
 80163fa:	464b      	mov	r3, r9
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	bf08      	it	eq
 8016400:	2002      	moveq	r0, #2
 8016402:	e702      	b.n	801620a <rcl_wait+0x3a>
 8016404:	2a00      	cmp	r2, #0
 8016406:	d03a      	beq.n	801647e <rcl_wait+0x2ae>
 8016408:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801640c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016410:	e70e      	b.n	8016230 <rcl_wait+0x60>
 8016412:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016416:	b00d      	add	sp, #52	@ 0x34
 8016418:	ecbd 8b02 	vpop	{d8}
 801641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016420:	9b04      	ldr	r3, [sp, #16]
 8016422:	2b01      	cmp	r3, #1
 8016424:	9b05      	ldr	r3, [sp, #20]
 8016426:	f173 0300 	sbcs.w	r3, r3, #0
 801642a:	db24      	blt.n	8016476 <rcl_wait+0x2a6>
 801642c:	2f00      	cmp	r7, #0
 801642e:	bfbc      	itt	lt
 8016430:	f04f 0800 	movlt.w	r8, #0
 8016434:	4647      	movlt	r7, r8
 8016436:	a31e      	add	r3, pc, #120	@ (adr r3, 80164b0 <rcl_wait+0x2e0>)
 8016438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643c:	4640      	mov	r0, r8
 801643e:	4639      	mov	r1, r7
 8016440:	f7ea fc12 	bl	8000c68 <__aeabi_ldivmod>
 8016444:	a31a      	add	r3, pc, #104	@ (adr r3, 80164b0 <rcl_wait+0x2e0>)
 8016446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801644e:	4640      	mov	r0, r8
 8016450:	4639      	mov	r1, r7
 8016452:	f7ea fc09 	bl	8000c68 <__aeabi_ldivmod>
 8016456:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801645a:	ab08      	add	r3, sp, #32
 801645c:	e73e      	b.n	80162dc <rcl_wait+0x10c>
 801645e:	2001      	movs	r0, #1
 8016460:	b00d      	add	sp, #52	@ 0x34
 8016462:	ecbd 8b02 	vpop	{d8}
 8016466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801646a:	200b      	movs	r0, #11
 801646c:	b00d      	add	sp, #52	@ 0x34
 801646e:	ecbd 8b02 	vpop	{d8}
 8016472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016476:	465b      	mov	r3, fp
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1d7      	bne.n	801642c <rcl_wait+0x25c>
 801647c:	e72e      	b.n	80162dc <rcl_wait+0x10c>
 801647e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016482:	430b      	orrs	r3, r1
 8016484:	bf08      	it	eq
 8016486:	4691      	moveq	r9, r2
 8016488:	f43f af21 	beq.w	80162ce <rcl_wait+0xfe>
 801648c:	9b04      	ldr	r3, [sp, #16]
 801648e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016492:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016496:	2b01      	cmp	r3, #1
 8016498:	9b05      	ldr	r3, [sp, #20]
 801649a:	f173 0300 	sbcs.w	r3, r3, #0
 801649e:	f04f 0300 	mov.w	r3, #0
 80164a2:	4699      	mov	r9, r3
 80164a4:	dac2      	bge.n	801642c <rcl_wait+0x25c>
 80164a6:	e719      	b.n	80162dc <rcl_wait+0x10c>
 80164a8:	ffffffff 	.word	0xffffffff
 80164ac:	7fffffff 	.word	0x7fffffff
 80164b0:	3b9aca00 	.word	0x3b9aca00
 80164b4:	00000000 	.word	0x00000000

080164b8 <rcl_action_take_goal_response>:
 80164b8:	2800      	cmp	r0, #0
 80164ba:	d039      	beq.n	8016530 <rcl_action_take_goal_response+0x78>
 80164bc:	b570      	push	{r4, r5, r6, lr}
 80164be:	4604      	mov	r4, r0
 80164c0:	6800      	ldr	r0, [r0, #0]
 80164c2:	b380      	cbz	r0, 8016526 <rcl_action_take_goal_response+0x6e>
 80164c4:	460d      	mov	r5, r1
 80164c6:	4616      	mov	r6, r2
 80164c8:	f7fd ff8e 	bl	80143e8 <rcl_client_is_valid>
 80164cc:	b330      	cbz	r0, 801651c <rcl_action_take_goal_response+0x64>
 80164ce:	6820      	ldr	r0, [r4, #0]
 80164d0:	3004      	adds	r0, #4
 80164d2:	f7fd ff89 	bl	80143e8 <rcl_client_is_valid>
 80164d6:	b308      	cbz	r0, 801651c <rcl_action_take_goal_response+0x64>
 80164d8:	6820      	ldr	r0, [r4, #0]
 80164da:	3008      	adds	r0, #8
 80164dc:	f7fd ff84 	bl	80143e8 <rcl_client_is_valid>
 80164e0:	b1e0      	cbz	r0, 801651c <rcl_action_take_goal_response+0x64>
 80164e2:	6820      	ldr	r0, [r4, #0]
 80164e4:	300c      	adds	r0, #12
 80164e6:	f7fe fdf3 	bl	80150d0 <rcl_subscription_is_valid>
 80164ea:	b1b8      	cbz	r0, 801651c <rcl_action_take_goal_response+0x64>
 80164ec:	6820      	ldr	r0, [r4, #0]
 80164ee:	3010      	adds	r0, #16
 80164f0:	f7fe fdee 	bl	80150d0 <rcl_subscription_is_valid>
 80164f4:	b190      	cbz	r0, 801651c <rcl_action_take_goal_response+0x64>
 80164f6:	b1cd      	cbz	r5, 801652c <rcl_action_take_goal_response+0x74>
 80164f8:	b1c6      	cbz	r6, 801652c <rcl_action_take_goal_response+0x74>
 80164fa:	6820      	ldr	r0, [r4, #0]
 80164fc:	4632      	mov	r2, r6
 80164fe:	4629      	mov	r1, r5
 8016500:	f7fd ff2a 	bl	8014358 <rcl_take_response>
 8016504:	b148      	cbz	r0, 801651a <rcl_action_take_goal_response+0x62>
 8016506:	280a      	cmp	r0, #10
 8016508:	d007      	beq.n	801651a <rcl_action_take_goal_response+0x62>
 801650a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801650e:	f640 0337 	movw	r3, #2103	@ 0x837
 8016512:	4290      	cmp	r0, r2
 8016514:	bf0c      	ite	eq
 8016516:	4618      	moveq	r0, r3
 8016518:	2001      	movne	r0, #1
 801651a:	bd70      	pop	{r4, r5, r6, pc}
 801651c:	f7f7 fcb8 	bl	800de90 <rcutils_reset_error>
 8016520:	f640 0036 	movw	r0, #2102	@ 0x836
 8016524:	bd70      	pop	{r4, r5, r6, pc}
 8016526:	f640 0036 	movw	r0, #2102	@ 0x836
 801652a:	bd70      	pop	{r4, r5, r6, pc}
 801652c:	200b      	movs	r0, #11
 801652e:	bd70      	pop	{r4, r5, r6, pc}
 8016530:	f640 0036 	movw	r0, #2102	@ 0x836
 8016534:	4770      	bx	lr
 8016536:	bf00      	nop

08016538 <rcl_action_send_result_request>:
 8016538:	b390      	cbz	r0, 80165a0 <rcl_action_send_result_request+0x68>
 801653a:	b570      	push	{r4, r5, r6, lr}
 801653c:	4604      	mov	r4, r0
 801653e:	6800      	ldr	r0, [r0, #0]
 8016540:	b348      	cbz	r0, 8016596 <rcl_action_send_result_request+0x5e>
 8016542:	460d      	mov	r5, r1
 8016544:	4616      	mov	r6, r2
 8016546:	f7fd ff4f 	bl	80143e8 <rcl_client_is_valid>
 801654a:	b1f8      	cbz	r0, 801658c <rcl_action_send_result_request+0x54>
 801654c:	6820      	ldr	r0, [r4, #0]
 801654e:	3004      	adds	r0, #4
 8016550:	f7fd ff4a 	bl	80143e8 <rcl_client_is_valid>
 8016554:	b1d0      	cbz	r0, 801658c <rcl_action_send_result_request+0x54>
 8016556:	6820      	ldr	r0, [r4, #0]
 8016558:	3008      	adds	r0, #8
 801655a:	f7fd ff45 	bl	80143e8 <rcl_client_is_valid>
 801655e:	b1a8      	cbz	r0, 801658c <rcl_action_send_result_request+0x54>
 8016560:	6820      	ldr	r0, [r4, #0]
 8016562:	300c      	adds	r0, #12
 8016564:	f7fe fdb4 	bl	80150d0 <rcl_subscription_is_valid>
 8016568:	b180      	cbz	r0, 801658c <rcl_action_send_result_request+0x54>
 801656a:	6820      	ldr	r0, [r4, #0]
 801656c:	3010      	adds	r0, #16
 801656e:	f7fe fdaf 	bl	80150d0 <rcl_subscription_is_valid>
 8016572:	b158      	cbz	r0, 801658c <rcl_action_send_result_request+0x54>
 8016574:	b195      	cbz	r5, 801659c <rcl_action_send_result_request+0x64>
 8016576:	b18e      	cbz	r6, 801659c <rcl_action_send_result_request+0x64>
 8016578:	6820      	ldr	r0, [r4, #0]
 801657a:	4632      	mov	r2, r6
 801657c:	4629      	mov	r1, r5
 801657e:	3008      	adds	r0, #8
 8016580:	f7fd feb4 	bl	80142ec <rcl_send_request>
 8016584:	3800      	subs	r0, #0
 8016586:	bf18      	it	ne
 8016588:	2001      	movne	r0, #1
 801658a:	bd70      	pop	{r4, r5, r6, pc}
 801658c:	f7f7 fc80 	bl	800de90 <rcutils_reset_error>
 8016590:	f640 0036 	movw	r0, #2102	@ 0x836
 8016594:	bd70      	pop	{r4, r5, r6, pc}
 8016596:	f640 0036 	movw	r0, #2102	@ 0x836
 801659a:	bd70      	pop	{r4, r5, r6, pc}
 801659c:	200b      	movs	r0, #11
 801659e:	bd70      	pop	{r4, r5, r6, pc}
 80165a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80165a4:	4770      	bx	lr
 80165a6:	bf00      	nop

080165a8 <rcl_action_take_result_response>:
 80165a8:	2800      	cmp	r0, #0
 80165aa:	d03a      	beq.n	8016622 <rcl_action_take_result_response+0x7a>
 80165ac:	b570      	push	{r4, r5, r6, lr}
 80165ae:	4604      	mov	r4, r0
 80165b0:	6800      	ldr	r0, [r0, #0]
 80165b2:	b388      	cbz	r0, 8016618 <rcl_action_take_result_response+0x70>
 80165b4:	460d      	mov	r5, r1
 80165b6:	4616      	mov	r6, r2
 80165b8:	f7fd ff16 	bl	80143e8 <rcl_client_is_valid>
 80165bc:	b338      	cbz	r0, 801660e <rcl_action_take_result_response+0x66>
 80165be:	6820      	ldr	r0, [r4, #0]
 80165c0:	3004      	adds	r0, #4
 80165c2:	f7fd ff11 	bl	80143e8 <rcl_client_is_valid>
 80165c6:	b310      	cbz	r0, 801660e <rcl_action_take_result_response+0x66>
 80165c8:	6820      	ldr	r0, [r4, #0]
 80165ca:	3008      	adds	r0, #8
 80165cc:	f7fd ff0c 	bl	80143e8 <rcl_client_is_valid>
 80165d0:	b1e8      	cbz	r0, 801660e <rcl_action_take_result_response+0x66>
 80165d2:	6820      	ldr	r0, [r4, #0]
 80165d4:	300c      	adds	r0, #12
 80165d6:	f7fe fd7b 	bl	80150d0 <rcl_subscription_is_valid>
 80165da:	b1c0      	cbz	r0, 801660e <rcl_action_take_result_response+0x66>
 80165dc:	6820      	ldr	r0, [r4, #0]
 80165de:	3010      	adds	r0, #16
 80165e0:	f7fe fd76 	bl	80150d0 <rcl_subscription_is_valid>
 80165e4:	b198      	cbz	r0, 801660e <rcl_action_take_result_response+0x66>
 80165e6:	b1d5      	cbz	r5, 801661e <rcl_action_take_result_response+0x76>
 80165e8:	b1ce      	cbz	r6, 801661e <rcl_action_take_result_response+0x76>
 80165ea:	6820      	ldr	r0, [r4, #0]
 80165ec:	4632      	mov	r2, r6
 80165ee:	4629      	mov	r1, r5
 80165f0:	3008      	adds	r0, #8
 80165f2:	f7fd feb1 	bl	8014358 <rcl_take_response>
 80165f6:	b148      	cbz	r0, 801660c <rcl_action_take_result_response+0x64>
 80165f8:	280a      	cmp	r0, #10
 80165fa:	d007      	beq.n	801660c <rcl_action_take_result_response+0x64>
 80165fc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016600:	f640 0337 	movw	r3, #2103	@ 0x837
 8016604:	4290      	cmp	r0, r2
 8016606:	bf0c      	ite	eq
 8016608:	4618      	moveq	r0, r3
 801660a:	2001      	movne	r0, #1
 801660c:	bd70      	pop	{r4, r5, r6, pc}
 801660e:	f7f7 fc3f 	bl	800de90 <rcutils_reset_error>
 8016612:	f640 0036 	movw	r0, #2102	@ 0x836
 8016616:	bd70      	pop	{r4, r5, r6, pc}
 8016618:	f640 0036 	movw	r0, #2102	@ 0x836
 801661c:	bd70      	pop	{r4, r5, r6, pc}
 801661e:	200b      	movs	r0, #11
 8016620:	bd70      	pop	{r4, r5, r6, pc}
 8016622:	f640 0036 	movw	r0, #2102	@ 0x836
 8016626:	4770      	bx	lr

08016628 <rcl_action_take_cancel_response>:
 8016628:	2800      	cmp	r0, #0
 801662a:	d03a      	beq.n	80166a2 <rcl_action_take_cancel_response+0x7a>
 801662c:	b570      	push	{r4, r5, r6, lr}
 801662e:	4604      	mov	r4, r0
 8016630:	6800      	ldr	r0, [r0, #0]
 8016632:	b388      	cbz	r0, 8016698 <rcl_action_take_cancel_response+0x70>
 8016634:	460d      	mov	r5, r1
 8016636:	4616      	mov	r6, r2
 8016638:	f7fd fed6 	bl	80143e8 <rcl_client_is_valid>
 801663c:	b338      	cbz	r0, 801668e <rcl_action_take_cancel_response+0x66>
 801663e:	6820      	ldr	r0, [r4, #0]
 8016640:	3004      	adds	r0, #4
 8016642:	f7fd fed1 	bl	80143e8 <rcl_client_is_valid>
 8016646:	b310      	cbz	r0, 801668e <rcl_action_take_cancel_response+0x66>
 8016648:	6820      	ldr	r0, [r4, #0]
 801664a:	3008      	adds	r0, #8
 801664c:	f7fd fecc 	bl	80143e8 <rcl_client_is_valid>
 8016650:	b1e8      	cbz	r0, 801668e <rcl_action_take_cancel_response+0x66>
 8016652:	6820      	ldr	r0, [r4, #0]
 8016654:	300c      	adds	r0, #12
 8016656:	f7fe fd3b 	bl	80150d0 <rcl_subscription_is_valid>
 801665a:	b1c0      	cbz	r0, 801668e <rcl_action_take_cancel_response+0x66>
 801665c:	6820      	ldr	r0, [r4, #0]
 801665e:	3010      	adds	r0, #16
 8016660:	f7fe fd36 	bl	80150d0 <rcl_subscription_is_valid>
 8016664:	b198      	cbz	r0, 801668e <rcl_action_take_cancel_response+0x66>
 8016666:	b1d5      	cbz	r5, 801669e <rcl_action_take_cancel_response+0x76>
 8016668:	b1ce      	cbz	r6, 801669e <rcl_action_take_cancel_response+0x76>
 801666a:	6820      	ldr	r0, [r4, #0]
 801666c:	4632      	mov	r2, r6
 801666e:	4629      	mov	r1, r5
 8016670:	3004      	adds	r0, #4
 8016672:	f7fd fe71 	bl	8014358 <rcl_take_response>
 8016676:	b148      	cbz	r0, 801668c <rcl_action_take_cancel_response+0x64>
 8016678:	280a      	cmp	r0, #10
 801667a:	d007      	beq.n	801668c <rcl_action_take_cancel_response+0x64>
 801667c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016680:	f640 0337 	movw	r3, #2103	@ 0x837
 8016684:	4290      	cmp	r0, r2
 8016686:	bf0c      	ite	eq
 8016688:	4618      	moveq	r0, r3
 801668a:	2001      	movne	r0, #1
 801668c:	bd70      	pop	{r4, r5, r6, pc}
 801668e:	f7f7 fbff 	bl	800de90 <rcutils_reset_error>
 8016692:	f640 0036 	movw	r0, #2102	@ 0x836
 8016696:	bd70      	pop	{r4, r5, r6, pc}
 8016698:	f640 0036 	movw	r0, #2102	@ 0x836
 801669c:	bd70      	pop	{r4, r5, r6, pc}
 801669e:	200b      	movs	r0, #11
 80166a0:	bd70      	pop	{r4, r5, r6, pc}
 80166a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80166a6:	4770      	bx	lr

080166a8 <rcl_action_take_feedback>:
 80166a8:	2800      	cmp	r0, #0
 80166aa:	d038      	beq.n	801671e <rcl_action_take_feedback+0x76>
 80166ac:	b530      	push	{r4, r5, lr}
 80166ae:	4604      	mov	r4, r0
 80166b0:	6800      	ldr	r0, [r0, #0]
 80166b2:	b091      	sub	sp, #68	@ 0x44
 80166b4:	b378      	cbz	r0, 8016716 <rcl_action_take_feedback+0x6e>
 80166b6:	460d      	mov	r5, r1
 80166b8:	f7fd fe96 	bl	80143e8 <rcl_client_is_valid>
 80166bc:	b328      	cbz	r0, 801670a <rcl_action_take_feedback+0x62>
 80166be:	6820      	ldr	r0, [r4, #0]
 80166c0:	3004      	adds	r0, #4
 80166c2:	f7fd fe91 	bl	80143e8 <rcl_client_is_valid>
 80166c6:	b300      	cbz	r0, 801670a <rcl_action_take_feedback+0x62>
 80166c8:	6820      	ldr	r0, [r4, #0]
 80166ca:	3008      	adds	r0, #8
 80166cc:	f7fd fe8c 	bl	80143e8 <rcl_client_is_valid>
 80166d0:	b1d8      	cbz	r0, 801670a <rcl_action_take_feedback+0x62>
 80166d2:	6820      	ldr	r0, [r4, #0]
 80166d4:	300c      	adds	r0, #12
 80166d6:	f7fe fcfb 	bl	80150d0 <rcl_subscription_is_valid>
 80166da:	b1b0      	cbz	r0, 801670a <rcl_action_take_feedback+0x62>
 80166dc:	6820      	ldr	r0, [r4, #0]
 80166de:	3010      	adds	r0, #16
 80166e0:	f7fe fcf6 	bl	80150d0 <rcl_subscription_is_valid>
 80166e4:	b188      	cbz	r0, 801670a <rcl_action_take_feedback+0x62>
 80166e6:	b1ed      	cbz	r5, 8016724 <rcl_action_take_feedback+0x7c>
 80166e8:	6820      	ldr	r0, [r4, #0]
 80166ea:	2300      	movs	r3, #0
 80166ec:	466a      	mov	r2, sp
 80166ee:	4629      	mov	r1, r5
 80166f0:	300c      	adds	r0, #12
 80166f2:	f7fe fc8f 	bl	8015014 <rcl_take>
 80166f6:	b160      	cbz	r0, 8016712 <rcl_action_take_feedback+0x6a>
 80166f8:	f240 1391 	movw	r3, #401	@ 0x191
 80166fc:	4298      	cmp	r0, r3
 80166fe:	d014      	beq.n	801672a <rcl_action_take_feedback+0x82>
 8016700:	280a      	cmp	r0, #10
 8016702:	bf18      	it	ne
 8016704:	2001      	movne	r0, #1
 8016706:	b011      	add	sp, #68	@ 0x44
 8016708:	bd30      	pop	{r4, r5, pc}
 801670a:	f7f7 fbc1 	bl	800de90 <rcutils_reset_error>
 801670e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016712:	b011      	add	sp, #68	@ 0x44
 8016714:	bd30      	pop	{r4, r5, pc}
 8016716:	f640 0036 	movw	r0, #2102	@ 0x836
 801671a:	b011      	add	sp, #68	@ 0x44
 801671c:	bd30      	pop	{r4, r5, pc}
 801671e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016722:	4770      	bx	lr
 8016724:	200b      	movs	r0, #11
 8016726:	b011      	add	sp, #68	@ 0x44
 8016728:	bd30      	pop	{r4, r5, pc}
 801672a:	f640 0037 	movw	r0, #2103	@ 0x837
 801672e:	e7f0      	b.n	8016712 <rcl_action_take_feedback+0x6a>

08016730 <rcl_action_wait_set_add_action_client>:
 8016730:	2800      	cmp	r0, #0
 8016732:	d048      	beq.n	80167c6 <rcl_action_wait_set_add_action_client+0x96>
 8016734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016736:	460c      	mov	r4, r1
 8016738:	2900      	cmp	r1, #0
 801673a:	d03c      	beq.n	80167b6 <rcl_action_wait_set_add_action_client+0x86>
 801673c:	4605      	mov	r5, r0
 801673e:	6808      	ldr	r0, [r1, #0]
 8016740:	2800      	cmp	r0, #0
 8016742:	d038      	beq.n	80167b6 <rcl_action_wait_set_add_action_client+0x86>
 8016744:	4617      	mov	r7, r2
 8016746:	461e      	mov	r6, r3
 8016748:	f7fd fe4e 	bl	80143e8 <rcl_client_is_valid>
 801674c:	b3b0      	cbz	r0, 80167bc <rcl_action_wait_set_add_action_client+0x8c>
 801674e:	6820      	ldr	r0, [r4, #0]
 8016750:	3004      	adds	r0, #4
 8016752:	f7fd fe49 	bl	80143e8 <rcl_client_is_valid>
 8016756:	b388      	cbz	r0, 80167bc <rcl_action_wait_set_add_action_client+0x8c>
 8016758:	6820      	ldr	r0, [r4, #0]
 801675a:	3008      	adds	r0, #8
 801675c:	f7fd fe44 	bl	80143e8 <rcl_client_is_valid>
 8016760:	b360      	cbz	r0, 80167bc <rcl_action_wait_set_add_action_client+0x8c>
 8016762:	6820      	ldr	r0, [r4, #0]
 8016764:	300c      	adds	r0, #12
 8016766:	f7fe fcb3 	bl	80150d0 <rcl_subscription_is_valid>
 801676a:	b338      	cbz	r0, 80167bc <rcl_action_wait_set_add_action_client+0x8c>
 801676c:	6820      	ldr	r0, [r4, #0]
 801676e:	3010      	adds	r0, #16
 8016770:	f7fe fcae 	bl	80150d0 <rcl_subscription_is_valid>
 8016774:	b310      	cbz	r0, 80167bc <rcl_action_wait_set_add_action_client+0x8c>
 8016776:	6821      	ldr	r1, [r4, #0]
 8016778:	4628      	mov	r0, r5
 801677a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801677e:	f7ff fccd 	bl	801611c <rcl_wait_set_add_client>
 8016782:	b9b8      	cbnz	r0, 80167b4 <rcl_action_wait_set_add_action_client+0x84>
 8016784:	6821      	ldr	r1, [r4, #0]
 8016786:	4628      	mov	r0, r5
 8016788:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801678c:	3104      	adds	r1, #4
 801678e:	f7ff fcc5 	bl	801611c <rcl_wait_set_add_client>
 8016792:	b978      	cbnz	r0, 80167b4 <rcl_action_wait_set_add_action_client+0x84>
 8016794:	6821      	ldr	r1, [r4, #0]
 8016796:	4628      	mov	r0, r5
 8016798:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801679c:	3108      	adds	r1, #8
 801679e:	f7ff fcbd 	bl	801611c <rcl_wait_set_add_client>
 80167a2:	b938      	cbnz	r0, 80167b4 <rcl_action_wait_set_add_action_client+0x84>
 80167a4:	6821      	ldr	r1, [r4, #0]
 80167a6:	4628      	mov	r0, r5
 80167a8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80167ac:	310c      	adds	r1, #12
 80167ae:	f7ff f96d 	bl	8015a8c <rcl_wait_set_add_subscription>
 80167b2:	b158      	cbz	r0, 80167cc <rcl_action_wait_set_add_action_client+0x9c>
 80167b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80167ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167bc:	f7f7 fb68 	bl	800de90 <rcutils_reset_error>
 80167c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80167c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80167ca:	4770      	bx	lr
 80167cc:	6821      	ldr	r1, [r4, #0]
 80167ce:	4628      	mov	r0, r5
 80167d0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80167d4:	3110      	adds	r1, #16
 80167d6:	f7ff f959 	bl	8015a8c <rcl_wait_set_add_subscription>
 80167da:	2800      	cmp	r0, #0
 80167dc:	d1ea      	bne.n	80167b4 <rcl_action_wait_set_add_action_client+0x84>
 80167de:	b11f      	cbz	r7, 80167e8 <rcl_action_wait_set_add_action_client+0xb8>
 80167e0:	6823      	ldr	r3, [r4, #0]
 80167e2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80167e6:	603b      	str	r3, [r7, #0]
 80167e8:	2e00      	cmp	r6, #0
 80167ea:	d0e3      	beq.n	80167b4 <rcl_action_wait_set_add_action_client+0x84>
 80167ec:	6823      	ldr	r3, [r4, #0]
 80167ee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80167f2:	6033      	str	r3, [r6, #0]
 80167f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167f6:	bf00      	nop

080167f8 <rcl_action_client_wait_set_get_entities_ready>:
 80167f8:	2800      	cmp	r0, #0
 80167fa:	f000 808d 	beq.w	8016918 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80167fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016802:	460c      	mov	r4, r1
 8016804:	2900      	cmp	r1, #0
 8016806:	d077      	beq.n	80168f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016808:	4605      	mov	r5, r0
 801680a:	6808      	ldr	r0, [r1, #0]
 801680c:	2800      	cmp	r0, #0
 801680e:	d073      	beq.n	80168f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016810:	4616      	mov	r6, r2
 8016812:	461f      	mov	r7, r3
 8016814:	f7fd fde8 	bl	80143e8 <rcl_client_is_valid>
 8016818:	2800      	cmp	r0, #0
 801681a:	d071      	beq.n	8016900 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801681c:	6820      	ldr	r0, [r4, #0]
 801681e:	3004      	adds	r0, #4
 8016820:	f7fd fde2 	bl	80143e8 <rcl_client_is_valid>
 8016824:	2800      	cmp	r0, #0
 8016826:	d06b      	beq.n	8016900 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016828:	6820      	ldr	r0, [r4, #0]
 801682a:	3008      	adds	r0, #8
 801682c:	f7fd fddc 	bl	80143e8 <rcl_client_is_valid>
 8016830:	2800      	cmp	r0, #0
 8016832:	d065      	beq.n	8016900 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016834:	6820      	ldr	r0, [r4, #0]
 8016836:	300c      	adds	r0, #12
 8016838:	f7fe fc4a 	bl	80150d0 <rcl_subscription_is_valid>
 801683c:	2800      	cmp	r0, #0
 801683e:	d05f      	beq.n	8016900 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016840:	6820      	ldr	r0, [r4, #0]
 8016842:	3010      	adds	r0, #16
 8016844:	f7fe fc44 	bl	80150d0 <rcl_subscription_is_valid>
 8016848:	2800      	cmp	r0, #0
 801684a:	d059      	beq.n	8016900 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801684c:	2e00      	cmp	r6, #0
 801684e:	d060      	beq.n	8016912 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016850:	2f00      	cmp	r7, #0
 8016852:	d05e      	beq.n	8016912 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016854:	9b06      	ldr	r3, [sp, #24]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d05b      	beq.n	8016912 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801685a:	9b07      	ldr	r3, [sp, #28]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d058      	beq.n	8016912 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016860:	9b08      	ldr	r3, [sp, #32]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d055      	beq.n	8016912 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016866:	6823      	ldr	r3, [r4, #0]
 8016868:	686a      	ldr	r2, [r5, #4]
 801686a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801686e:	428a      	cmp	r2, r1
 8016870:	d94c      	bls.n	801690c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016872:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016876:	4282      	cmp	r2, r0
 8016878:	d948      	bls.n	801690c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801687a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801687e:	69ea      	ldr	r2, [r5, #28]
 8016880:	42a2      	cmp	r2, r4
 8016882:	d943      	bls.n	801690c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016884:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016888:	4562      	cmp	r2, ip
 801688a:	d93f      	bls.n	801690c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801688c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016890:	4572      	cmp	r2, lr
 8016892:	d93b      	bls.n	801690c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8016894:	69aa      	ldr	r2, [r5, #24]
 8016896:	682d      	ldr	r5, [r5, #0]
 8016898:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801689c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80168a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80168a4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80168a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80168ac:	f103 0c0c 	add.w	ip, r3, #12
 80168b0:	eba5 050c 	sub.w	r5, r5, ip
 80168b4:	fab5 f585 	clz	r5, r5
 80168b8:	096d      	lsrs	r5, r5, #5
 80168ba:	7035      	strb	r5, [r6, #0]
 80168bc:	f103 0510 	add.w	r5, r3, #16
 80168c0:	1b64      	subs	r4, r4, r5
 80168c2:	fab4 f484 	clz	r4, r4
 80168c6:	0964      	lsrs	r4, r4, #5
 80168c8:	703c      	strb	r4, [r7, #0]
 80168ca:	eba3 0008 	sub.w	r0, r3, r8
 80168ce:	1d1c      	adds	r4, r3, #4
 80168d0:	3308      	adds	r3, #8
 80168d2:	1ad3      	subs	r3, r2, r3
 80168d4:	fab0 f080 	clz	r0, r0
 80168d8:	9a06      	ldr	r2, [sp, #24]
 80168da:	0940      	lsrs	r0, r0, #5
 80168dc:	1b09      	subs	r1, r1, r4
 80168de:	7010      	strb	r0, [r2, #0]
 80168e0:	fab1 f181 	clz	r1, r1
 80168e4:	9a07      	ldr	r2, [sp, #28]
 80168e6:	0949      	lsrs	r1, r1, #5
 80168e8:	7011      	strb	r1, [r2, #0]
 80168ea:	fab3 f383 	clz	r3, r3
 80168ee:	9a08      	ldr	r2, [sp, #32]
 80168f0:	095b      	lsrs	r3, r3, #5
 80168f2:	2000      	movs	r0, #0
 80168f4:	7013      	strb	r3, [r2, #0]
 80168f6:	e001      	b.n	80168fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80168f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80168fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016900:	f7f7 fac6 	bl	800de90 <rcutils_reset_error>
 8016904:	f640 0036 	movw	r0, #2102	@ 0x836
 8016908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801690c:	2001      	movs	r0, #1
 801690e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016912:	200b      	movs	r0, #11
 8016914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016918:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801691c:	4770      	bx	lr
 801691e:	bf00      	nop

08016920 <rcl_action_take_goal_request>:
 8016920:	2800      	cmp	r0, #0
 8016922:	d039      	beq.n	8016998 <rcl_action_take_goal_request+0x78>
 8016924:	b570      	push	{r4, r5, r6, lr}
 8016926:	4604      	mov	r4, r0
 8016928:	6800      	ldr	r0, [r0, #0]
 801692a:	b380      	cbz	r0, 801698e <rcl_action_take_goal_request+0x6e>
 801692c:	460d      	mov	r5, r1
 801692e:	4616      	mov	r6, r2
 8016930:	f7fe fb66 	bl	8015000 <rcl_service_is_valid>
 8016934:	b330      	cbz	r0, 8016984 <rcl_action_take_goal_request+0x64>
 8016936:	6820      	ldr	r0, [r4, #0]
 8016938:	3004      	adds	r0, #4
 801693a:	f7fe fb61 	bl	8015000 <rcl_service_is_valid>
 801693e:	b308      	cbz	r0, 8016984 <rcl_action_take_goal_request+0x64>
 8016940:	6820      	ldr	r0, [r4, #0]
 8016942:	3008      	adds	r0, #8
 8016944:	f7fe fb5c 	bl	8015000 <rcl_service_is_valid>
 8016948:	b1e0      	cbz	r0, 8016984 <rcl_action_take_goal_request+0x64>
 801694a:	6820      	ldr	r0, [r4, #0]
 801694c:	300c      	adds	r0, #12
 801694e:	f7f6 fa85 	bl	800ce5c <rcl_publisher_is_valid>
 8016952:	b1b8      	cbz	r0, 8016984 <rcl_action_take_goal_request+0x64>
 8016954:	6820      	ldr	r0, [r4, #0]
 8016956:	3010      	adds	r0, #16
 8016958:	f7f6 fa80 	bl	800ce5c <rcl_publisher_is_valid>
 801695c:	b190      	cbz	r0, 8016984 <rcl_action_take_goal_request+0x64>
 801695e:	b1cd      	cbz	r5, 8016994 <rcl_action_take_goal_request+0x74>
 8016960:	b1c6      	cbz	r6, 8016994 <rcl_action_take_goal_request+0x74>
 8016962:	6820      	ldr	r0, [r4, #0]
 8016964:	4632      	mov	r2, r6
 8016966:	4629      	mov	r1, r5
 8016968:	f7fe faf2 	bl	8014f50 <rcl_take_request>
 801696c:	b148      	cbz	r0, 8016982 <rcl_action_take_goal_request+0x62>
 801696e:	280a      	cmp	r0, #10
 8016970:	d007      	beq.n	8016982 <rcl_action_take_goal_request+0x62>
 8016972:	f240 2259 	movw	r2, #601	@ 0x259
 8016976:	f640 0399 	movw	r3, #2201	@ 0x899
 801697a:	4290      	cmp	r0, r2
 801697c:	bf0c      	ite	eq
 801697e:	4618      	moveq	r0, r3
 8016980:	2001      	movne	r0, #1
 8016982:	bd70      	pop	{r4, r5, r6, pc}
 8016984:	f7f7 fa84 	bl	800de90 <rcutils_reset_error>
 8016988:	f640 0098 	movw	r0, #2200	@ 0x898
 801698c:	bd70      	pop	{r4, r5, r6, pc}
 801698e:	f640 0098 	movw	r0, #2200	@ 0x898
 8016992:	bd70      	pop	{r4, r5, r6, pc}
 8016994:	200b      	movs	r0, #11
 8016996:	bd70      	pop	{r4, r5, r6, pc}
 8016998:	f640 0098 	movw	r0, #2200	@ 0x898
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop

080169a0 <rcl_action_send_goal_response>:
 80169a0:	b390      	cbz	r0, 8016a08 <rcl_action_send_goal_response+0x68>
 80169a2:	b570      	push	{r4, r5, r6, lr}
 80169a4:	4604      	mov	r4, r0
 80169a6:	6800      	ldr	r0, [r0, #0]
 80169a8:	b348      	cbz	r0, 80169fe <rcl_action_send_goal_response+0x5e>
 80169aa:	460d      	mov	r5, r1
 80169ac:	4616      	mov	r6, r2
 80169ae:	f7fe fb27 	bl	8015000 <rcl_service_is_valid>
 80169b2:	b1f8      	cbz	r0, 80169f4 <rcl_action_send_goal_response+0x54>
 80169b4:	6820      	ldr	r0, [r4, #0]
 80169b6:	3004      	adds	r0, #4
 80169b8:	f7fe fb22 	bl	8015000 <rcl_service_is_valid>
 80169bc:	b1d0      	cbz	r0, 80169f4 <rcl_action_send_goal_response+0x54>
 80169be:	6820      	ldr	r0, [r4, #0]
 80169c0:	3008      	adds	r0, #8
 80169c2:	f7fe fb1d 	bl	8015000 <rcl_service_is_valid>
 80169c6:	b1a8      	cbz	r0, 80169f4 <rcl_action_send_goal_response+0x54>
 80169c8:	6820      	ldr	r0, [r4, #0]
 80169ca:	300c      	adds	r0, #12
 80169cc:	f7f6 fa46 	bl	800ce5c <rcl_publisher_is_valid>
 80169d0:	b180      	cbz	r0, 80169f4 <rcl_action_send_goal_response+0x54>
 80169d2:	6820      	ldr	r0, [r4, #0]
 80169d4:	3010      	adds	r0, #16
 80169d6:	f7f6 fa41 	bl	800ce5c <rcl_publisher_is_valid>
 80169da:	b158      	cbz	r0, 80169f4 <rcl_action_send_goal_response+0x54>
 80169dc:	b195      	cbz	r5, 8016a04 <rcl_action_send_goal_response+0x64>
 80169de:	b18e      	cbz	r6, 8016a04 <rcl_action_send_goal_response+0x64>
 80169e0:	6820      	ldr	r0, [r4, #0]
 80169e2:	4632      	mov	r2, r6
 80169e4:	4629      	mov	r1, r5
 80169e6:	f7fe faf3 	bl	8014fd0 <rcl_send_response>
 80169ea:	b110      	cbz	r0, 80169f2 <rcl_action_send_goal_response+0x52>
 80169ec:	2802      	cmp	r0, #2
 80169ee:	bf18      	it	ne
 80169f0:	2001      	movne	r0, #1
 80169f2:	bd70      	pop	{r4, r5, r6, pc}
 80169f4:	f7f7 fa4c 	bl	800de90 <rcutils_reset_error>
 80169f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80169fc:	bd70      	pop	{r4, r5, r6, pc}
 80169fe:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a02:	bd70      	pop	{r4, r5, r6, pc}
 8016a04:	200b      	movs	r0, #11
 8016a06:	bd70      	pop	{r4, r5, r6, pc}
 8016a08:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a0c:	4770      	bx	lr
 8016a0e:	bf00      	nop

08016a10 <rcl_action_take_result_request>:
 8016a10:	2800      	cmp	r0, #0
 8016a12:	d03a      	beq.n	8016a8a <rcl_action_take_result_request+0x7a>
 8016a14:	b570      	push	{r4, r5, r6, lr}
 8016a16:	4604      	mov	r4, r0
 8016a18:	6800      	ldr	r0, [r0, #0]
 8016a1a:	b388      	cbz	r0, 8016a80 <rcl_action_take_result_request+0x70>
 8016a1c:	460d      	mov	r5, r1
 8016a1e:	4616      	mov	r6, r2
 8016a20:	f7fe faee 	bl	8015000 <rcl_service_is_valid>
 8016a24:	b338      	cbz	r0, 8016a76 <rcl_action_take_result_request+0x66>
 8016a26:	6820      	ldr	r0, [r4, #0]
 8016a28:	3004      	adds	r0, #4
 8016a2a:	f7fe fae9 	bl	8015000 <rcl_service_is_valid>
 8016a2e:	b310      	cbz	r0, 8016a76 <rcl_action_take_result_request+0x66>
 8016a30:	6820      	ldr	r0, [r4, #0]
 8016a32:	3008      	adds	r0, #8
 8016a34:	f7fe fae4 	bl	8015000 <rcl_service_is_valid>
 8016a38:	b1e8      	cbz	r0, 8016a76 <rcl_action_take_result_request+0x66>
 8016a3a:	6820      	ldr	r0, [r4, #0]
 8016a3c:	300c      	adds	r0, #12
 8016a3e:	f7f6 fa0d 	bl	800ce5c <rcl_publisher_is_valid>
 8016a42:	b1c0      	cbz	r0, 8016a76 <rcl_action_take_result_request+0x66>
 8016a44:	6820      	ldr	r0, [r4, #0]
 8016a46:	3010      	adds	r0, #16
 8016a48:	f7f6 fa08 	bl	800ce5c <rcl_publisher_is_valid>
 8016a4c:	b198      	cbz	r0, 8016a76 <rcl_action_take_result_request+0x66>
 8016a4e:	b1d5      	cbz	r5, 8016a86 <rcl_action_take_result_request+0x76>
 8016a50:	b1ce      	cbz	r6, 8016a86 <rcl_action_take_result_request+0x76>
 8016a52:	6820      	ldr	r0, [r4, #0]
 8016a54:	4632      	mov	r2, r6
 8016a56:	4629      	mov	r1, r5
 8016a58:	3008      	adds	r0, #8
 8016a5a:	f7fe fa79 	bl	8014f50 <rcl_take_request>
 8016a5e:	b148      	cbz	r0, 8016a74 <rcl_action_take_result_request+0x64>
 8016a60:	280a      	cmp	r0, #10
 8016a62:	d007      	beq.n	8016a74 <rcl_action_take_result_request+0x64>
 8016a64:	f240 2259 	movw	r2, #601	@ 0x259
 8016a68:	f640 0399 	movw	r3, #2201	@ 0x899
 8016a6c:	4290      	cmp	r0, r2
 8016a6e:	bf0c      	ite	eq
 8016a70:	4618      	moveq	r0, r3
 8016a72:	2001      	movne	r0, #1
 8016a74:	bd70      	pop	{r4, r5, r6, pc}
 8016a76:	f7f7 fa0b 	bl	800de90 <rcutils_reset_error>
 8016a7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a7e:	bd70      	pop	{r4, r5, r6, pc}
 8016a80:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	200b      	movs	r0, #11
 8016a88:	bd70      	pop	{r4, r5, r6, pc}
 8016a8a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016a8e:	4770      	bx	lr

08016a90 <rcl_action_take_cancel_request>:
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d03a      	beq.n	8016b0a <rcl_action_take_cancel_request+0x7a>
 8016a94:	b570      	push	{r4, r5, r6, lr}
 8016a96:	4604      	mov	r4, r0
 8016a98:	6800      	ldr	r0, [r0, #0]
 8016a9a:	b388      	cbz	r0, 8016b00 <rcl_action_take_cancel_request+0x70>
 8016a9c:	460d      	mov	r5, r1
 8016a9e:	4616      	mov	r6, r2
 8016aa0:	f7fe faae 	bl	8015000 <rcl_service_is_valid>
 8016aa4:	b338      	cbz	r0, 8016af6 <rcl_action_take_cancel_request+0x66>
 8016aa6:	6820      	ldr	r0, [r4, #0]
 8016aa8:	3004      	adds	r0, #4
 8016aaa:	f7fe faa9 	bl	8015000 <rcl_service_is_valid>
 8016aae:	b310      	cbz	r0, 8016af6 <rcl_action_take_cancel_request+0x66>
 8016ab0:	6820      	ldr	r0, [r4, #0]
 8016ab2:	3008      	adds	r0, #8
 8016ab4:	f7fe faa4 	bl	8015000 <rcl_service_is_valid>
 8016ab8:	b1e8      	cbz	r0, 8016af6 <rcl_action_take_cancel_request+0x66>
 8016aba:	6820      	ldr	r0, [r4, #0]
 8016abc:	300c      	adds	r0, #12
 8016abe:	f7f6 f9cd 	bl	800ce5c <rcl_publisher_is_valid>
 8016ac2:	b1c0      	cbz	r0, 8016af6 <rcl_action_take_cancel_request+0x66>
 8016ac4:	6820      	ldr	r0, [r4, #0]
 8016ac6:	3010      	adds	r0, #16
 8016ac8:	f7f6 f9c8 	bl	800ce5c <rcl_publisher_is_valid>
 8016acc:	b198      	cbz	r0, 8016af6 <rcl_action_take_cancel_request+0x66>
 8016ace:	b1d5      	cbz	r5, 8016b06 <rcl_action_take_cancel_request+0x76>
 8016ad0:	b1ce      	cbz	r6, 8016b06 <rcl_action_take_cancel_request+0x76>
 8016ad2:	6820      	ldr	r0, [r4, #0]
 8016ad4:	4632      	mov	r2, r6
 8016ad6:	4629      	mov	r1, r5
 8016ad8:	3004      	adds	r0, #4
 8016ada:	f7fe fa39 	bl	8014f50 <rcl_take_request>
 8016ade:	b148      	cbz	r0, 8016af4 <rcl_action_take_cancel_request+0x64>
 8016ae0:	280a      	cmp	r0, #10
 8016ae2:	d007      	beq.n	8016af4 <rcl_action_take_cancel_request+0x64>
 8016ae4:	f240 2259 	movw	r2, #601	@ 0x259
 8016ae8:	f640 0399 	movw	r3, #2201	@ 0x899
 8016aec:	4290      	cmp	r0, r2
 8016aee:	bf0c      	ite	eq
 8016af0:	4618      	moveq	r0, r3
 8016af2:	2001      	movne	r0, #1
 8016af4:	bd70      	pop	{r4, r5, r6, pc}
 8016af6:	f7f7 f9cb 	bl	800de90 <rcutils_reset_error>
 8016afa:	f640 0098 	movw	r0, #2200	@ 0x898
 8016afe:	bd70      	pop	{r4, r5, r6, pc}
 8016b00:	f640 0098 	movw	r0, #2200	@ 0x898
 8016b04:	bd70      	pop	{r4, r5, r6, pc}
 8016b06:	200b      	movs	r0, #11
 8016b08:	bd70      	pop	{r4, r5, r6, pc}
 8016b0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016b0e:	4770      	bx	lr

08016b10 <rcl_action_send_cancel_response>:
 8016b10:	b398      	cbz	r0, 8016b7a <rcl_action_send_cancel_response+0x6a>
 8016b12:	b570      	push	{r4, r5, r6, lr}
 8016b14:	4604      	mov	r4, r0
 8016b16:	6800      	ldr	r0, [r0, #0]
 8016b18:	b350      	cbz	r0, 8016b70 <rcl_action_send_cancel_response+0x60>
 8016b1a:	460d      	mov	r5, r1
 8016b1c:	4616      	mov	r6, r2
 8016b1e:	f7fe fa6f 	bl	8015000 <rcl_service_is_valid>
 8016b22:	b300      	cbz	r0, 8016b66 <rcl_action_send_cancel_response+0x56>
 8016b24:	6820      	ldr	r0, [r4, #0]
 8016b26:	3004      	adds	r0, #4
 8016b28:	f7fe fa6a 	bl	8015000 <rcl_service_is_valid>
 8016b2c:	b1d8      	cbz	r0, 8016b66 <rcl_action_send_cancel_response+0x56>
 8016b2e:	6820      	ldr	r0, [r4, #0]
 8016b30:	3008      	adds	r0, #8
 8016b32:	f7fe fa65 	bl	8015000 <rcl_service_is_valid>
 8016b36:	b1b0      	cbz	r0, 8016b66 <rcl_action_send_cancel_response+0x56>
 8016b38:	6820      	ldr	r0, [r4, #0]
 8016b3a:	300c      	adds	r0, #12
 8016b3c:	f7f6 f98e 	bl	800ce5c <rcl_publisher_is_valid>
 8016b40:	b188      	cbz	r0, 8016b66 <rcl_action_send_cancel_response+0x56>
 8016b42:	6820      	ldr	r0, [r4, #0]
 8016b44:	3010      	adds	r0, #16
 8016b46:	f7f6 f989 	bl	800ce5c <rcl_publisher_is_valid>
 8016b4a:	b160      	cbz	r0, 8016b66 <rcl_action_send_cancel_response+0x56>
 8016b4c:	b19d      	cbz	r5, 8016b76 <rcl_action_send_cancel_response+0x66>
 8016b4e:	b196      	cbz	r6, 8016b76 <rcl_action_send_cancel_response+0x66>
 8016b50:	6820      	ldr	r0, [r4, #0]
 8016b52:	4632      	mov	r2, r6
 8016b54:	4629      	mov	r1, r5
 8016b56:	3004      	adds	r0, #4
 8016b58:	f7fe fa3a 	bl	8014fd0 <rcl_send_response>
 8016b5c:	b110      	cbz	r0, 8016b64 <rcl_action_send_cancel_response+0x54>
 8016b5e:	2802      	cmp	r0, #2
 8016b60:	bf18      	it	ne
 8016b62:	2001      	movne	r0, #1
 8016b64:	bd70      	pop	{r4, r5, r6, pc}
 8016b66:	f7f7 f993 	bl	800de90 <rcutils_reset_error>
 8016b6a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016b6e:	bd70      	pop	{r4, r5, r6, pc}
 8016b70:	f640 0098 	movw	r0, #2200	@ 0x898
 8016b74:	bd70      	pop	{r4, r5, r6, pc}
 8016b76:	200b      	movs	r0, #11
 8016b78:	bd70      	pop	{r4, r5, r6, pc}
 8016b7a:	f640 0098 	movw	r0, #2200	@ 0x898
 8016b7e:	4770      	bx	lr

08016b80 <rcl_action_wait_set_add_action_server>:
 8016b80:	2800      	cmp	r0, #0
 8016b82:	d04d      	beq.n	8016c20 <rcl_action_wait_set_add_action_server+0xa0>
 8016b84:	b570      	push	{r4, r5, r6, lr}
 8016b86:	460c      	mov	r4, r1
 8016b88:	b159      	cbz	r1, 8016ba2 <rcl_action_wait_set_add_action_server+0x22>
 8016b8a:	4605      	mov	r5, r0
 8016b8c:	6808      	ldr	r0, [r1, #0]
 8016b8e:	b140      	cbz	r0, 8016ba2 <rcl_action_wait_set_add_action_server+0x22>
 8016b90:	4616      	mov	r6, r2
 8016b92:	f7fe fa35 	bl	8015000 <rcl_service_is_valid>
 8016b96:	b120      	cbz	r0, 8016ba2 <rcl_action_wait_set_add_action_server+0x22>
 8016b98:	6820      	ldr	r0, [r4, #0]
 8016b9a:	3004      	adds	r0, #4
 8016b9c:	f7fe fa30 	bl	8015000 <rcl_service_is_valid>
 8016ba0:	b910      	cbnz	r0, 8016ba8 <rcl_action_wait_set_add_action_server+0x28>
 8016ba2:	f640 0098 	movw	r0, #2200	@ 0x898
 8016ba6:	bd70      	pop	{r4, r5, r6, pc}
 8016ba8:	6820      	ldr	r0, [r4, #0]
 8016baa:	3008      	adds	r0, #8
 8016bac:	f7fe fa28 	bl	8015000 <rcl_service_is_valid>
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	d0f6      	beq.n	8016ba2 <rcl_action_wait_set_add_action_server+0x22>
 8016bb4:	6820      	ldr	r0, [r4, #0]
 8016bb6:	300c      	adds	r0, #12
 8016bb8:	f7f6 f968 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	d0f0      	beq.n	8016ba2 <rcl_action_wait_set_add_action_server+0x22>
 8016bc0:	6820      	ldr	r0, [r4, #0]
 8016bc2:	3010      	adds	r0, #16
 8016bc4:	f7f6 f962 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 8016bc8:	2800      	cmp	r0, #0
 8016bca:	d0ea      	beq.n	8016ba2 <rcl_action_wait_set_add_action_server+0x22>
 8016bcc:	6821      	ldr	r1, [r4, #0]
 8016bce:	4628      	mov	r0, r5
 8016bd0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016bd4:	f7ff face 	bl	8016174 <rcl_wait_set_add_service>
 8016bd8:	2800      	cmp	r0, #0
 8016bda:	d1e4      	bne.n	8016ba6 <rcl_action_wait_set_add_action_server+0x26>
 8016bdc:	6821      	ldr	r1, [r4, #0]
 8016bde:	4628      	mov	r0, r5
 8016be0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016be4:	3104      	adds	r1, #4
 8016be6:	f7ff fac5 	bl	8016174 <rcl_wait_set_add_service>
 8016bea:	2800      	cmp	r0, #0
 8016bec:	d1db      	bne.n	8016ba6 <rcl_action_wait_set_add_action_server+0x26>
 8016bee:	6821      	ldr	r1, [r4, #0]
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016bf6:	3108      	adds	r1, #8
 8016bf8:	f7ff fabc 	bl	8016174 <rcl_wait_set_add_service>
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	d1d2      	bne.n	8016ba6 <rcl_action_wait_set_add_action_server+0x26>
 8016c00:	6821      	ldr	r1, [r4, #0]
 8016c02:	4628      	mov	r0, r5
 8016c04:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016c08:	3114      	adds	r1, #20
 8016c0a:	f7ff fa57 	bl	80160bc <rcl_wait_set_add_timer>
 8016c0e:	2800      	cmp	r0, #0
 8016c10:	d1c9      	bne.n	8016ba6 <rcl_action_wait_set_add_action_server+0x26>
 8016c12:	2e00      	cmp	r6, #0
 8016c14:	d0c7      	beq.n	8016ba6 <rcl_action_wait_set_add_action_server+0x26>
 8016c16:	6823      	ldr	r3, [r4, #0]
 8016c18:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016c1c:	6033      	str	r3, [r6, #0]
 8016c1e:	bd70      	pop	{r4, r5, r6, pc}
 8016c20:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop

08016c28 <rcl_action_server_wait_set_get_entities_ready>:
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	d05a      	beq.n	8016ce2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c2e:	460c      	mov	r4, r1
 8016c30:	b161      	cbz	r1, 8016c4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016c32:	4605      	mov	r5, r0
 8016c34:	6808      	ldr	r0, [r1, #0]
 8016c36:	b148      	cbz	r0, 8016c4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016c38:	4616      	mov	r6, r2
 8016c3a:	461f      	mov	r7, r3
 8016c3c:	f7fe f9e0 	bl	8015000 <rcl_service_is_valid>
 8016c40:	b120      	cbz	r0, 8016c4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016c42:	6820      	ldr	r0, [r4, #0]
 8016c44:	3004      	adds	r0, #4
 8016c46:	f7fe f9db 	bl	8015000 <rcl_service_is_valid>
 8016c4a:	b910      	cbnz	r0, 8016c52 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016c4c:	f640 0098 	movw	r0, #2200	@ 0x898
 8016c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c52:	6820      	ldr	r0, [r4, #0]
 8016c54:	3008      	adds	r0, #8
 8016c56:	f7fe f9d3 	bl	8015000 <rcl_service_is_valid>
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	d0f6      	beq.n	8016c4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016c5e:	6820      	ldr	r0, [r4, #0]
 8016c60:	300c      	adds	r0, #12
 8016c62:	f7f6 f913 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 8016c66:	2800      	cmp	r0, #0
 8016c68:	d0f0      	beq.n	8016c4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016c6a:	6820      	ldr	r0, [r4, #0]
 8016c6c:	3010      	adds	r0, #16
 8016c6e:	f7f6 f90d 	bl	800ce8c <rcl_publisher_is_valid_except_context>
 8016c72:	2800      	cmp	r0, #0
 8016c74:	d0ea      	beq.n	8016c4c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016c76:	b3be      	cbz	r6, 8016ce8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016c78:	b3b7      	cbz	r7, 8016ce8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016c7a:	9b06      	ldr	r3, [sp, #24]
 8016c7c:	b3a3      	cbz	r3, 8016ce8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016c7e:	9b07      	ldr	r3, [sp, #28]
 8016c80:	b393      	cbz	r3, 8016ce8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8016c82:	6821      	ldr	r1, [r4, #0]
 8016c84:	692a      	ldr	r2, [r5, #16]
 8016c86:	6a2c      	ldr	r4, [r5, #32]
 8016c88:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8016c8c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8016c90:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016c94:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8016c98:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8016c9c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8016ca0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016ca4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016ca8:	1a64      	subs	r4, r4, r1
 8016caa:	fab4 f484 	clz	r4, r4
 8016cae:	0964      	lsrs	r4, r4, #5
 8016cb0:	7034      	strb	r4, [r6, #0]
 8016cb2:	1d0c      	adds	r4, r1, #4
 8016cb4:	1b1b      	subs	r3, r3, r4
 8016cb6:	fab3 f383 	clz	r3, r3
 8016cba:	095b      	lsrs	r3, r3, #5
 8016cbc:	f101 0408 	add.w	r4, r1, #8
 8016cc0:	703b      	strb	r3, [r7, #0]
 8016cc2:	f101 0314 	add.w	r3, r1, #20
 8016cc6:	1b01      	subs	r1, r0, r4
 8016cc8:	1ad3      	subs	r3, r2, r3
 8016cca:	fab1 f181 	clz	r1, r1
 8016cce:	9a06      	ldr	r2, [sp, #24]
 8016cd0:	0949      	lsrs	r1, r1, #5
 8016cd2:	7011      	strb	r1, [r2, #0]
 8016cd4:	fab3 f383 	clz	r3, r3
 8016cd8:	9a07      	ldr	r2, [sp, #28]
 8016cda:	095b      	lsrs	r3, r3, #5
 8016cdc:	2000      	movs	r0, #0
 8016cde:	7013      	strb	r3, [r2, #0]
 8016ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ce2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016ce6:	4770      	bx	lr
 8016ce8:	200b      	movs	r0, #11
 8016cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016cec <_execute_event_handler>:
 8016cec:	2002      	movs	r0, #2
 8016cee:	4770      	bx	lr

08016cf0 <_cancel_goal_event_handler>:
 8016cf0:	2003      	movs	r0, #3
 8016cf2:	4770      	bx	lr

08016cf4 <_succeed_event_handler>:
 8016cf4:	2004      	movs	r0, #4
 8016cf6:	4770      	bx	lr

08016cf8 <_abort_event_handler>:
 8016cf8:	2006      	movs	r0, #6
 8016cfa:	4770      	bx	lr

08016cfc <_canceled_event_handler>:
 8016cfc:	2005      	movs	r0, #5
 8016cfe:	4770      	bx	lr

08016d00 <rcl_action_transition_goal_state>:
 8016d00:	b2c2      	uxtb	r2, r0
 8016d02:	2a06      	cmp	r2, #6
 8016d04:	d80c      	bhi.n	8016d20 <rcl_action_transition_goal_state+0x20>
 8016d06:	2904      	cmp	r1, #4
 8016d08:	d80a      	bhi.n	8016d20 <rcl_action_transition_goal_state+0x20>
 8016d0a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016d0e:	b410      	push	{r4}
 8016d10:	1853      	adds	r3, r2, r1
 8016d12:	4c06      	ldr	r4, [pc, #24]	@ (8016d2c <rcl_action_transition_goal_state+0x2c>)
 8016d14:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016d18:	b123      	cbz	r3, 8016d24 <rcl_action_transition_goal_state+0x24>
 8016d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d1e:	4718      	bx	r3
 8016d20:	2000      	movs	r0, #0
 8016d22:	4770      	bx	lr
 8016d24:	2000      	movs	r0, #0
 8016d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d2a:	4770      	bx	lr
 8016d2c:	0801dde8 	.word	0x0801dde8

08016d30 <rcl_action_get_zero_initialized_cancel_response>:
 8016d30:	b510      	push	{r4, lr}
 8016d32:	4c07      	ldr	r4, [pc, #28]	@ (8016d50 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016d34:	4686      	mov	lr, r0
 8016d36:	4684      	mov	ip, r0
 8016d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d44:	6823      	ldr	r3, [r4, #0]
 8016d46:	f8cc 3000 	str.w	r3, [ip]
 8016d4a:	4670      	mov	r0, lr
 8016d4c:	bd10      	pop	{r4, pc}
 8016d4e:	bf00      	nop
 8016d50:	0801de74 	.word	0x0801de74

08016d54 <rclc_action_send_result_request>:
 8016d54:	b1d0      	cbz	r0, 8016d8c <rclc_action_send_result_request+0x38>
 8016d56:	b500      	push	{lr}
 8016d58:	4684      	mov	ip, r0
 8016d5a:	b087      	sub	sp, #28
 8016d5c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016d60:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8016d64:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016d68:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016d6c:	f10d 0e08 	add.w	lr, sp, #8
 8016d70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016d74:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016d78:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016d7c:	a902      	add	r1, sp, #8
 8016d7e:	3010      	adds	r0, #16
 8016d80:	f7ff fbda 	bl	8016538 <rcl_action_send_result_request>
 8016d84:	b920      	cbnz	r0, 8016d90 <rclc_action_send_result_request+0x3c>
 8016d86:	b007      	add	sp, #28
 8016d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d8c:	200b      	movs	r0, #11
 8016d8e:	4770      	bx	lr
 8016d90:	9001      	str	r0, [sp, #4]
 8016d92:	f7f7 f87d 	bl	800de90 <rcutils_reset_error>
 8016d96:	9801      	ldr	r0, [sp, #4]
 8016d98:	b007      	add	sp, #28
 8016d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d9e:	bf00      	nop

08016da0 <rclc_action_take_goal_handle>:
 8016da0:	b160      	cbz	r0, 8016dbc <rclc_action_take_goal_handle+0x1c>
 8016da2:	6883      	ldr	r3, [r0, #8]
 8016da4:	b143      	cbz	r3, 8016db8 <rclc_action_take_goal_handle+0x18>
 8016da6:	6819      	ldr	r1, [r3, #0]
 8016da8:	6081      	str	r1, [r0, #8]
 8016daa:	2200      	movs	r2, #0
 8016dac:	721a      	strb	r2, [r3, #8]
 8016dae:	68c1      	ldr	r1, [r0, #12]
 8016db0:	6019      	str	r1, [r3, #0]
 8016db2:	621a      	str	r2, [r3, #32]
 8016db4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016db6:	60c3      	str	r3, [r0, #12]
 8016db8:	4618      	mov	r0, r3
 8016dba:	4770      	bx	lr
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	e7fb      	b.n	8016db8 <rclc_action_take_goal_handle+0x18>

08016dc0 <rclc_action_remove_used_goal_handle>:
 8016dc0:	b180      	cbz	r0, 8016de4 <rclc_action_remove_used_goal_handle+0x24>
 8016dc2:	b179      	cbz	r1, 8016de4 <rclc_action_remove_used_goal_handle+0x24>
 8016dc4:	68c3      	ldr	r3, [r0, #12]
 8016dc6:	4299      	cmp	r1, r3
 8016dc8:	d00d      	beq.n	8016de6 <rclc_action_remove_used_goal_handle+0x26>
 8016dca:	b12b      	cbz	r3, 8016dd8 <rclc_action_remove_used_goal_handle+0x18>
 8016dcc:	681a      	ldr	r2, [r3, #0]
 8016dce:	4291      	cmp	r1, r2
 8016dd0:	d003      	beq.n	8016dda <rclc_action_remove_used_goal_handle+0x1a>
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d1f9      	bne.n	8016dcc <rclc_action_remove_used_goal_handle+0xc>
 8016dd8:	4770      	bx	lr
 8016dda:	680a      	ldr	r2, [r1, #0]
 8016ddc:	601a      	str	r2, [r3, #0]
 8016dde:	6883      	ldr	r3, [r0, #8]
 8016de0:	600b      	str	r3, [r1, #0]
 8016de2:	6081      	str	r1, [r0, #8]
 8016de4:	4770      	bx	lr
 8016de6:	680b      	ldr	r3, [r1, #0]
 8016de8:	60c3      	str	r3, [r0, #12]
 8016dea:	e7f8      	b.n	8016dde <rclc_action_remove_used_goal_handle+0x1e>

08016dec <rclc_action_find_goal_handle_by_uuid>:
 8016dec:	b538      	push	{r3, r4, r5, lr}
 8016dee:	b180      	cbz	r0, 8016e12 <rclc_action_find_goal_handle_by_uuid+0x26>
 8016df0:	460d      	mov	r5, r1
 8016df2:	b181      	cbz	r1, 8016e16 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016df4:	68c4      	ldr	r4, [r0, #12]
 8016df6:	b914      	cbnz	r4, 8016dfe <rclc_action_find_goal_handle_by_uuid+0x12>
 8016df8:	e009      	b.n	8016e0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016dfa:	6824      	ldr	r4, [r4, #0]
 8016dfc:	b13c      	cbz	r4, 8016e0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016dfe:	f104 0009 	add.w	r0, r4, #9
 8016e02:	2210      	movs	r2, #16
 8016e04:	4629      	mov	r1, r5
 8016e06:	f003 fbd1 	bl	801a5ac <memcmp>
 8016e0a:	2800      	cmp	r0, #0
 8016e0c:	d1f5      	bne.n	8016dfa <rclc_action_find_goal_handle_by_uuid+0xe>
 8016e0e:	4620      	mov	r0, r4
 8016e10:	bd38      	pop	{r3, r4, r5, pc}
 8016e12:	4604      	mov	r4, r0
 8016e14:	e7fb      	b.n	8016e0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016e16:	460c      	mov	r4, r1
 8016e18:	e7f9      	b.n	8016e0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8016e1a:	bf00      	nop

08016e1c <rclc_action_find_first_handle_by_status>:
 8016e1c:	b140      	cbz	r0, 8016e30 <rclc_action_find_first_handle_by_status+0x14>
 8016e1e:	68c0      	ldr	r0, [r0, #12]
 8016e20:	b910      	cbnz	r0, 8016e28 <rclc_action_find_first_handle_by_status+0xc>
 8016e22:	e005      	b.n	8016e30 <rclc_action_find_first_handle_by_status+0x14>
 8016e24:	6800      	ldr	r0, [r0, #0]
 8016e26:	b118      	cbz	r0, 8016e30 <rclc_action_find_first_handle_by_status+0x14>
 8016e28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016e2c:	428b      	cmp	r3, r1
 8016e2e:	d1f9      	bne.n	8016e24 <rclc_action_find_first_handle_by_status+0x8>
 8016e30:	4770      	bx	lr
 8016e32:	bf00      	nop

08016e34 <rclc_action_find_first_terminated_handle>:
 8016e34:	b140      	cbz	r0, 8016e48 <rclc_action_find_first_terminated_handle+0x14>
 8016e36:	68c0      	ldr	r0, [r0, #12]
 8016e38:	b910      	cbnz	r0, 8016e40 <rclc_action_find_first_terminated_handle+0xc>
 8016e3a:	e005      	b.n	8016e48 <rclc_action_find_first_terminated_handle+0x14>
 8016e3c:	6800      	ldr	r0, [r0, #0]
 8016e3e:	b118      	cbz	r0, 8016e48 <rclc_action_find_first_terminated_handle+0x14>
 8016e40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016e44:	2b03      	cmp	r3, #3
 8016e46:	ddf9      	ble.n	8016e3c <rclc_action_find_first_terminated_handle+0x8>
 8016e48:	4770      	bx	lr
 8016e4a:	bf00      	nop

08016e4c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016e4c:	b170      	cbz	r0, 8016e6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016e4e:	68c0      	ldr	r0, [r0, #12]
 8016e50:	b160      	cbz	r0, 8016e6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016e52:	b410      	push	{r4}
 8016e54:	e001      	b.n	8016e5a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016e56:	6800      	ldr	r0, [r0, #0]
 8016e58:	b128      	cbz	r0, 8016e66 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016e5a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016e5e:	4299      	cmp	r1, r3
 8016e60:	bf08      	it	eq
 8016e62:	4294      	cmpeq	r4, r2
 8016e64:	d1f7      	bne.n	8016e56 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e6a:	4770      	bx	lr
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop

08016e70 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016e70:	b170      	cbz	r0, 8016e90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016e72:	68c0      	ldr	r0, [r0, #12]
 8016e74:	b160      	cbz	r0, 8016e90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016e76:	b410      	push	{r4}
 8016e78:	e001      	b.n	8016e7e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016e7a:	6800      	ldr	r0, [r0, #0]
 8016e7c:	b128      	cbz	r0, 8016e8a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016e7e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8016e82:	4299      	cmp	r1, r3
 8016e84:	bf08      	it	eq
 8016e86:	4294      	cmpeq	r4, r2
 8016e88:	d1f7      	bne.n	8016e7a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016e8e:	4770      	bx	lr
 8016e90:	4770      	bx	lr
 8016e92:	bf00      	nop

08016e94 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016e94:	b170      	cbz	r0, 8016eb4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016e96:	68c0      	ldr	r0, [r0, #12]
 8016e98:	b160      	cbz	r0, 8016eb4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016e9a:	b410      	push	{r4}
 8016e9c:	e001      	b.n	8016ea2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016e9e:	6800      	ldr	r0, [r0, #0]
 8016ea0:	b128      	cbz	r0, 8016eae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016ea2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016ea6:	4299      	cmp	r1, r3
 8016ea8:	bf08      	it	eq
 8016eaa:	4294      	cmpeq	r4, r2
 8016eac:	d1f7      	bne.n	8016e9e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016eb2:	4770      	bx	lr
 8016eb4:	4770      	bx	lr
 8016eb6:	bf00      	nop

08016eb8 <rclc_action_find_first_handle_with_goal_response>:
 8016eb8:	b140      	cbz	r0, 8016ecc <rclc_action_find_first_handle_with_goal_response+0x14>
 8016eba:	68c0      	ldr	r0, [r0, #12]
 8016ebc:	b910      	cbnz	r0, 8016ec4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8016ebe:	e005      	b.n	8016ecc <rclc_action_find_first_handle_with_goal_response+0x14>
 8016ec0:	6800      	ldr	r0, [r0, #0]
 8016ec2:	b118      	cbz	r0, 8016ecc <rclc_action_find_first_handle_with_goal_response+0x14>
 8016ec4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d0f9      	beq.n	8016ec0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016ecc:	4770      	bx	lr
 8016ece:	bf00      	nop

08016ed0 <rclc_action_find_first_handle_with_result_response>:
 8016ed0:	b140      	cbz	r0, 8016ee4 <rclc_action_find_first_handle_with_result_response+0x14>
 8016ed2:	68c0      	ldr	r0, [r0, #12]
 8016ed4:	b910      	cbnz	r0, 8016edc <rclc_action_find_first_handle_with_result_response+0xc>
 8016ed6:	e005      	b.n	8016ee4 <rclc_action_find_first_handle_with_result_response+0x14>
 8016ed8:	6800      	ldr	r0, [r0, #0]
 8016eda:	b118      	cbz	r0, 8016ee4 <rclc_action_find_first_handle_with_result_response+0x14>
 8016edc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d0f9      	beq.n	8016ed8 <rclc_action_find_first_handle_with_result_response+0x8>
 8016ee4:	4770      	bx	lr
 8016ee6:	bf00      	nop

08016ee8 <rclc_action_server_response_goal_request>:
 8016ee8:	b198      	cbz	r0, 8016f12 <rclc_action_server_response_goal_request+0x2a>
 8016eea:	b510      	push	{r4, lr}
 8016eec:	6844      	ldr	r4, [r0, #4]
 8016eee:	b086      	sub	sp, #24
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016ef6:	460b      	mov	r3, r1
 8016ef8:	9205      	str	r2, [sp, #20]
 8016efa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8016efe:	aa03      	add	r2, sp, #12
 8016f00:	f104 0010 	add.w	r0, r4, #16
 8016f04:	f88d 300c 	strb.w	r3, [sp, #12]
 8016f08:	f7ff fd4a 	bl	80169a0 <rcl_action_send_goal_response>
 8016f0c:	b918      	cbnz	r0, 8016f16 <rclc_action_server_response_goal_request+0x2e>
 8016f0e:	b006      	add	sp, #24
 8016f10:	bd10      	pop	{r4, pc}
 8016f12:	200b      	movs	r0, #11
 8016f14:	4770      	bx	lr
 8016f16:	9001      	str	r0, [sp, #4]
 8016f18:	f7f6 ffba 	bl	800de90 <rcutils_reset_error>
 8016f1c:	9801      	ldr	r0, [sp, #4]
 8016f1e:	b006      	add	sp, #24
 8016f20:	bd10      	pop	{r4, pc}
 8016f22:	bf00      	nop
 8016f24:	0000      	movs	r0, r0
	...

08016f28 <rclc_action_server_goal_cancel_accept>:
 8016f28:	b310      	cbz	r0, 8016f70 <rclc_action_server_goal_cancel_accept+0x48>
 8016f2a:	b510      	push	{r4, lr}
 8016f2c:	b090      	sub	sp, #64	@ 0x40
 8016f2e:	4604      	mov	r4, r0
 8016f30:	a806      	add	r0, sp, #24
 8016f32:	f7ff fefd 	bl	8016d30 <rcl_action_get_zero_initialized_cancel_response>
 8016f36:	2300      	movs	r3, #0
 8016f38:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016f3c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016f40:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8016f44:	f88d 3018 	strb.w	r3, [sp, #24]
 8016f48:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016f4c:	f8cd d01c 	str.w	sp, [sp, #28]
 8016f50:	46ec      	mov	ip, sp
 8016f52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f56:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016f78 <rclc_action_server_goal_cancel_accept+0x50>
 8016f5a:	6860      	ldr	r0, [r4, #4]
 8016f5c:	aa06      	add	r2, sp, #24
 8016f5e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8016f62:	3010      	adds	r0, #16
 8016f64:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016f68:	f7ff fdd2 	bl	8016b10 <rcl_action_send_cancel_response>
 8016f6c:	b010      	add	sp, #64	@ 0x40
 8016f6e:	bd10      	pop	{r4, pc}
 8016f70:	200b      	movs	r0, #11
 8016f72:	4770      	bx	lr
 8016f74:	f3af 8000 	nop.w
 8016f78:	00000001 	.word	0x00000001
 8016f7c:	00000001 	.word	0x00000001

08016f80 <rclc_action_server_goal_cancel_reject>:
 8016f80:	b082      	sub	sp, #8
 8016f82:	b530      	push	{r4, r5, lr}
 8016f84:	b08b      	sub	sp, #44	@ 0x2c
 8016f86:	ac0e      	add	r4, sp, #56	@ 0x38
 8016f88:	e884 000c 	stmia.w	r4, {r2, r3}
 8016f8c:	b188      	cbz	r0, 8016fb2 <rclc_action_server_goal_cancel_reject+0x32>
 8016f8e:	4604      	mov	r4, r0
 8016f90:	a801      	add	r0, sp, #4
 8016f92:	460d      	mov	r5, r1
 8016f94:	f7ff fecc 	bl	8016d30 <rcl_action_get_zero_initialized_cancel_response>
 8016f98:	aa01      	add	r2, sp, #4
 8016f9a:	a90e      	add	r1, sp, #56	@ 0x38
 8016f9c:	f104 0010 	add.w	r0, r4, #16
 8016fa0:	f88d 5004 	strb.w	r5, [sp, #4]
 8016fa4:	f7ff fdb4 	bl	8016b10 <rcl_action_send_cancel_response>
 8016fa8:	b00b      	add	sp, #44	@ 0x2c
 8016faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fae:	b002      	add	sp, #8
 8016fb0:	4770      	bx	lr
 8016fb2:	200b      	movs	r0, #11
 8016fb4:	b00b      	add	sp, #44	@ 0x2c
 8016fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fba:	b002      	add	sp, #8
 8016fbc:	4770      	bx	lr
 8016fbe:	bf00      	nop

08016fc0 <__atomic_load_8>:
 8016fc0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016fc4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016fc8:	4a15      	ldr	r2, [pc, #84]	@ (8017020 <__atomic_load_8+0x60>)
 8016fca:	4b16      	ldr	r3, [pc, #88]	@ (8017024 <__atomic_load_8+0x64>)
 8016fcc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016fd0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016fd4:	fb02 f101 	mul.w	r1, r2, r1
 8016fd8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016fdc:	fba3 2301 	umull	r2, r3, r3, r1
 8016fe0:	091b      	lsrs	r3, r3, #4
 8016fe2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016fe6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8016fea:	b4d0      	push	{r4, r6, r7}
 8016fec:	4c0e      	ldr	r4, [pc, #56]	@ (8017028 <__atomic_load_8+0x68>)
 8016fee:	1ac9      	subs	r1, r1, r3
 8016ff0:	1862      	adds	r2, r4, r1
 8016ff2:	f04f 0c01 	mov.w	ip, #1
 8016ff6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016ffa:	e8c2 cf46 	strexb	r6, ip, [r2]
 8016ffe:	2e00      	cmp	r6, #0
 8017000:	d1f9      	bne.n	8016ff6 <__atomic_load_8+0x36>
 8017002:	f3bf 8f5b 	dmb	ish
 8017006:	b2db      	uxtb	r3, r3
 8017008:	2b00      	cmp	r3, #0
 801700a:	d1f4      	bne.n	8016ff6 <__atomic_load_8+0x36>
 801700c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017010:	f3bf 8f5b 	dmb	ish
 8017014:	5463      	strb	r3, [r4, r1]
 8017016:	4630      	mov	r0, r6
 8017018:	4639      	mov	r1, r7
 801701a:	bcd0      	pop	{r4, r6, r7}
 801701c:	4770      	bx	lr
 801701e:	bf00      	nop
 8017020:	27d4eb2d 	.word	0x27d4eb2d
 8017024:	b21642c9 	.word	0xb21642c9
 8017028:	2000bdf0 	.word	0x2000bdf0

0801702c <__atomic_store_8>:
 801702c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017030:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017034:	b570      	push	{r4, r5, r6, lr}
 8017036:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801703a:	4c14      	ldr	r4, [pc, #80]	@ (801708c <__atomic_store_8+0x60>)
 801703c:	4d14      	ldr	r5, [pc, #80]	@ (8017090 <__atomic_store_8+0x64>)
 801703e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017042:	fb04 f101 	mul.w	r1, r4, r1
 8017046:	4c13      	ldr	r4, [pc, #76]	@ (8017094 <__atomic_store_8+0x68>)
 8017048:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801704c:	fba4 4e01 	umull	r4, lr, r4, r1
 8017050:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8017054:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8017058:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801705c:	eba1 0e0e 	sub.w	lr, r1, lr
 8017060:	eb05 0c0e 	add.w	ip, r5, lr
 8017064:	f04f 0401 	mov.w	r4, #1
 8017068:	e8dc 1f4f 	ldrexb	r1, [ip]
 801706c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8017070:	2e00      	cmp	r6, #0
 8017072:	d1f9      	bne.n	8017068 <__atomic_store_8+0x3c>
 8017074:	f3bf 8f5b 	dmb	ish
 8017078:	b2c9      	uxtb	r1, r1
 801707a:	2900      	cmp	r1, #0
 801707c:	d1f4      	bne.n	8017068 <__atomic_store_8+0x3c>
 801707e:	e9c0 2300 	strd	r2, r3, [r0]
 8017082:	f3bf 8f5b 	dmb	ish
 8017086:	f805 100e 	strb.w	r1, [r5, lr]
 801708a:	bd70      	pop	{r4, r5, r6, pc}
 801708c:	27d4eb2d 	.word	0x27d4eb2d
 8017090:	2000bdf0 	.word	0x2000bdf0
 8017094:	b21642c9 	.word	0xb21642c9

08017098 <__atomic_exchange_8>:
 8017098:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801709c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80170a0:	4916      	ldr	r1, [pc, #88]	@ (80170fc <__atomic_exchange_8+0x64>)
 80170a2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80170a6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80170aa:	fb01 fc0c 	mul.w	ip, r1, ip
 80170ae:	4914      	ldr	r1, [pc, #80]	@ (8017100 <__atomic_exchange_8+0x68>)
 80170b0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80170b4:	b570      	push	{r4, r5, r6, lr}
 80170b6:	4605      	mov	r5, r0
 80170b8:	fba1 010c 	umull	r0, r1, r1, ip
 80170bc:	0909      	lsrs	r1, r1, #4
 80170be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80170c2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80170c6:	4e0f      	ldr	r6, [pc, #60]	@ (8017104 <__atomic_exchange_8+0x6c>)
 80170c8:	ebac 0c01 	sub.w	ip, ip, r1
 80170cc:	eb06 010c 	add.w	r1, r6, ip
 80170d0:	f04f 0e01 	mov.w	lr, #1
 80170d4:	e8d1 4f4f 	ldrexb	r4, [r1]
 80170d8:	e8c1 ef40 	strexb	r0, lr, [r1]
 80170dc:	2800      	cmp	r0, #0
 80170de:	d1f9      	bne.n	80170d4 <__atomic_exchange_8+0x3c>
 80170e0:	f3bf 8f5b 	dmb	ish
 80170e4:	b2e4      	uxtb	r4, r4
 80170e6:	2c00      	cmp	r4, #0
 80170e8:	d1f4      	bne.n	80170d4 <__atomic_exchange_8+0x3c>
 80170ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 80170ee:	e9c5 2300 	strd	r2, r3, [r5]
 80170f2:	f3bf 8f5b 	dmb	ish
 80170f6:	f806 400c 	strb.w	r4, [r6, ip]
 80170fa:	bd70      	pop	{r4, r5, r6, pc}
 80170fc:	27d4eb2d 	.word	0x27d4eb2d
 8017100:	b21642c9 	.word	0xb21642c9
 8017104:	2000bdf0 	.word	0x2000bdf0

08017108 <rcutils_get_env>:
 8017108:	b168      	cbz	r0, 8017126 <rcutils_get_env+0x1e>
 801710a:	b510      	push	{r4, lr}
 801710c:	460c      	mov	r4, r1
 801710e:	b129      	cbz	r1, 801711c <rcutils_get_env+0x14>
 8017110:	f002 fd5c 	bl	8019bcc <getenv>
 8017114:	b120      	cbz	r0, 8017120 <rcutils_get_env+0x18>
 8017116:	6020      	str	r0, [r4, #0]
 8017118:	2000      	movs	r0, #0
 801711a:	bd10      	pop	{r4, pc}
 801711c:	4803      	ldr	r0, [pc, #12]	@ (801712c <rcutils_get_env+0x24>)
 801711e:	bd10      	pop	{r4, pc}
 8017120:	4b03      	ldr	r3, [pc, #12]	@ (8017130 <rcutils_get_env+0x28>)
 8017122:	6023      	str	r3, [r4, #0]
 8017124:	bd10      	pop	{r4, pc}
 8017126:	4803      	ldr	r0, [pc, #12]	@ (8017134 <rcutils_get_env+0x2c>)
 8017128:	4770      	bx	lr
 801712a:	bf00      	nop
 801712c:	0801deb4 	.word	0x0801deb4
 8017130:	0801e2d4 	.word	0x0801e2d4
 8017134:	0801de98 	.word	0x0801de98

08017138 <rcutils_is_directory>:
 8017138:	2000      	movs	r0, #0
 801713a:	4770      	bx	lr

0801713c <rcutils_join_path>:
 801713c:	b082      	sub	sp, #8
 801713e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8017142:	2000      	movs	r0, #0
 8017144:	b002      	add	sp, #8
 8017146:	4770      	bx	lr

08017148 <rcutils_to_native_path>:
 8017148:	b084      	sub	sp, #16
 801714a:	a801      	add	r0, sp, #4
 801714c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8017150:	b004      	add	sp, #16
 8017152:	2000      	movs	r0, #0
 8017154:	4770      	bx	lr
 8017156:	bf00      	nop

08017158 <rcutils_format_string_limit>:
 8017158:	b40f      	push	{r0, r1, r2, r3}
 801715a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801715c:	b083      	sub	sp, #12
 801715e:	ac08      	add	r4, sp, #32
 8017160:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017166:	b34e      	cbz	r6, 80171bc <rcutils_format_string_limit+0x64>
 8017168:	a808      	add	r0, sp, #32
 801716a:	f7f6 fe6b 	bl	800de44 <rcutils_allocator_is_valid>
 801716e:	b328      	cbz	r0, 80171bc <rcutils_format_string_limit+0x64>
 8017170:	2100      	movs	r1, #0
 8017172:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017174:	4632      	mov	r2, r6
 8017176:	4608      	mov	r0, r1
 8017178:	e9cd 3300 	strd	r3, r3, [sp]
 801717c:	f000 f8f4 	bl	8017368 <rcutils_vsnprintf>
 8017180:	1c43      	adds	r3, r0, #1
 8017182:	4605      	mov	r5, r0
 8017184:	d01a      	beq.n	80171bc <rcutils_format_string_limit+0x64>
 8017186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017188:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801718a:	1c47      	adds	r7, r0, #1
 801718c:	429f      	cmp	r7, r3
 801718e:	bf84      	itt	hi
 8017190:	461f      	movhi	r7, r3
 8017192:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8017196:	4638      	mov	r0, r7
 8017198:	9b08      	ldr	r3, [sp, #32]
 801719a:	4798      	blx	r3
 801719c:	4604      	mov	r4, r0
 801719e:	b168      	cbz	r0, 80171bc <rcutils_format_string_limit+0x64>
 80171a0:	9b01      	ldr	r3, [sp, #4]
 80171a2:	4632      	mov	r2, r6
 80171a4:	4639      	mov	r1, r7
 80171a6:	f000 f8df 	bl	8017368 <rcutils_vsnprintf>
 80171aa:	2800      	cmp	r0, #0
 80171ac:	db02      	blt.n	80171b4 <rcutils_format_string_limit+0x5c>
 80171ae:	2300      	movs	r3, #0
 80171b0:	5563      	strb	r3, [r4, r5]
 80171b2:	e004      	b.n	80171be <rcutils_format_string_limit+0x66>
 80171b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80171b8:	4620      	mov	r0, r4
 80171ba:	4798      	blx	r3
 80171bc:	2400      	movs	r4, #0
 80171be:	4620      	mov	r0, r4
 80171c0:	b003      	add	sp, #12
 80171c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80171c6:	b004      	add	sp, #16
 80171c8:	4770      	bx	lr
 80171ca:	bf00      	nop

080171cc <rcutils_repl_str>:
 80171cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d0:	ed2d 8b02 	vpush	{d8}
 80171d4:	b087      	sub	sp, #28
 80171d6:	4680      	mov	r8, r0
 80171d8:	4608      	mov	r0, r1
 80171da:	f8cd 8004 	str.w	r8, [sp, #4]
 80171de:	ee08 2a10 	vmov	s16, r2
 80171e2:	468a      	mov	sl, r1
 80171e4:	4699      	mov	r9, r3
 80171e6:	f7e9 f825 	bl	8000234 <strlen>
 80171ea:	2600      	movs	r6, #0
 80171ec:	4647      	mov	r7, r8
 80171ee:	9002      	str	r0, [sp, #8]
 80171f0:	46b3      	mov	fp, r6
 80171f2:	2510      	movs	r5, #16
 80171f4:	46b0      	mov	r8, r6
 80171f6:	e01d      	b.n	8017234 <rcutils_repl_str+0x68>
 80171f8:	f10b 0b01 	add.w	fp, fp, #1
 80171fc:	455e      	cmp	r6, fp
 80171fe:	d211      	bcs.n	8017224 <rcutils_repl_str+0x58>
 8017200:	442e      	add	r6, r5
 8017202:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017206:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801720a:	00b1      	lsls	r1, r6, #2
 801720c:	4798      	blx	r3
 801720e:	2800      	cmp	r0, #0
 8017210:	f000 8088 	beq.w	8017324 <rcutils_repl_str+0x158>
 8017214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017218:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801721c:	4680      	mov	r8, r0
 801721e:	bf28      	it	cs
 8017220:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8017224:	9a01      	ldr	r2, [sp, #4]
 8017226:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801722a:	1aa2      	subs	r2, r4, r2
 801722c:	f843 2c04 	str.w	r2, [r3, #-4]
 8017230:	9b02      	ldr	r3, [sp, #8]
 8017232:	18e7      	adds	r7, r4, r3
 8017234:	4651      	mov	r1, sl
 8017236:	4638      	mov	r0, r7
 8017238:	f003 fa09 	bl	801a64e <strstr>
 801723c:	4604      	mov	r4, r0
 801723e:	4640      	mov	r0, r8
 8017240:	2c00      	cmp	r4, #0
 8017242:	d1d9      	bne.n	80171f8 <rcutils_repl_str+0x2c>
 8017244:	46b8      	mov	r8, r7
 8017246:	4607      	mov	r7, r0
 8017248:	4640      	mov	r0, r8
 801724a:	f7e8 fff3 	bl	8000234 <strlen>
 801724e:	9b01      	ldr	r3, [sp, #4]
 8017250:	eba8 0303 	sub.w	r3, r8, r3
 8017254:	181c      	adds	r4, r3, r0
 8017256:	9404      	str	r4, [sp, #16]
 8017258:	f1bb 0f00 	cmp.w	fp, #0
 801725c:	d04a      	beq.n	80172f4 <rcutils_repl_str+0x128>
 801725e:	ee18 0a10 	vmov	r0, s16
 8017262:	f7e8 ffe7 	bl	8000234 <strlen>
 8017266:	9b02      	ldr	r3, [sp, #8]
 8017268:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801726c:	1ac3      	subs	r3, r0, r3
 801726e:	fb0b 4303 	mla	r3, fp, r3, r4
 8017272:	461a      	mov	r2, r3
 8017274:	9305      	str	r3, [sp, #20]
 8017276:	4606      	mov	r6, r0
 8017278:	f8d9 3000 	ldr.w	r3, [r9]
 801727c:	1c50      	adds	r0, r2, #1
 801727e:	4798      	blx	r3
 8017280:	9003      	str	r0, [sp, #12]
 8017282:	2800      	cmp	r0, #0
 8017284:	d04f      	beq.n	8017326 <rcutils_repl_str+0x15a>
 8017286:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801728a:	683a      	ldr	r2, [r7, #0]
 801728c:	4641      	mov	r1, r8
 801728e:	f003 fa80 	bl	801a792 <memcpy>
 8017292:	683d      	ldr	r5, [r7, #0]
 8017294:	9b03      	ldr	r3, [sp, #12]
 8017296:	9701      	str	r7, [sp, #4]
 8017298:	46ba      	mov	sl, r7
 801729a:	441d      	add	r5, r3
 801729c:	9f02      	ldr	r7, [sp, #8]
 801729e:	f8cd 9008 	str.w	r9, [sp, #8]
 80172a2:	2401      	movs	r4, #1
 80172a4:	46d1      	mov	r9, sl
 80172a6:	ee18 aa10 	vmov	sl, s16
 80172aa:	e00a      	b.n	80172c2 <rcutils_repl_str+0xf6>
 80172ac:	f8d9 5000 	ldr.w	r5, [r9]
 80172b0:	1aaa      	subs	r2, r5, r2
 80172b2:	1885      	adds	r5, r0, r2
 80172b4:	f003 fa6d 	bl	801a792 <memcpy>
 80172b8:	45a3      	cmp	fp, r4
 80172ba:	f104 0201 	add.w	r2, r4, #1
 80172be:	d935      	bls.n	801732c <rcutils_repl_str+0x160>
 80172c0:	4614      	mov	r4, r2
 80172c2:	4632      	mov	r2, r6
 80172c4:	4651      	mov	r1, sl
 80172c6:	4628      	mov	r0, r5
 80172c8:	f003 fa63 	bl	801a792 <memcpy>
 80172cc:	f859 2b04 	ldr.w	r2, [r9], #4
 80172d0:	45a3      	cmp	fp, r4
 80172d2:	443a      	add	r2, r7
 80172d4:	eb05 0006 	add.w	r0, r5, r6
 80172d8:	eb08 0102 	add.w	r1, r8, r2
 80172dc:	d1e6      	bne.n	80172ac <rcutils_repl_str+0xe0>
 80172de:	9b04      	ldr	r3, [sp, #16]
 80172e0:	1a9a      	subs	r2, r3, r2
 80172e2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80172e6:	f003 fa54 	bl	801a792 <memcpy>
 80172ea:	9a03      	ldr	r2, [sp, #12]
 80172ec:	9905      	ldr	r1, [sp, #20]
 80172ee:	2300      	movs	r3, #0
 80172f0:	5453      	strb	r3, [r2, r1]
 80172f2:	e00b      	b.n	801730c <rcutils_repl_str+0x140>
 80172f4:	4620      	mov	r0, r4
 80172f6:	f8d9 3000 	ldr.w	r3, [r9]
 80172fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80172fe:	3001      	adds	r0, #1
 8017300:	4798      	blx	r3
 8017302:	9003      	str	r0, [sp, #12]
 8017304:	b110      	cbz	r0, 801730c <rcutils_repl_str+0x140>
 8017306:	9901      	ldr	r1, [sp, #4]
 8017308:	f003 fa3b 	bl	801a782 <strcpy>
 801730c:	4638      	mov	r0, r7
 801730e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017312:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017316:	4798      	blx	r3
 8017318:	9803      	ldr	r0, [sp, #12]
 801731a:	b007      	add	sp, #28
 801731c:	ecbd 8b02 	vpop	{d8}
 8017320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017324:	4647      	mov	r7, r8
 8017326:	2300      	movs	r3, #0
 8017328:	9303      	str	r3, [sp, #12]
 801732a:	e7ef      	b.n	801730c <rcutils_repl_str+0x140>
 801732c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017330:	e7db      	b.n	80172ea <rcutils_repl_str+0x11e>
 8017332:	bf00      	nop

08017334 <rcutils_snprintf>:
 8017334:	b40c      	push	{r2, r3}
 8017336:	b530      	push	{r4, r5, lr}
 8017338:	b083      	sub	sp, #12
 801733a:	ab06      	add	r3, sp, #24
 801733c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017340:	9301      	str	r3, [sp, #4]
 8017342:	b152      	cbz	r2, 801735a <rcutils_snprintf+0x26>
 8017344:	b138      	cbz	r0, 8017356 <rcutils_snprintf+0x22>
 8017346:	b141      	cbz	r1, 801735a <rcutils_snprintf+0x26>
 8017348:	f003 f88e 	bl	801a468 <vsniprintf>
 801734c:	b003      	add	sp, #12
 801734e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017352:	b002      	add	sp, #8
 8017354:	4770      	bx	lr
 8017356:	2900      	cmp	r1, #0
 8017358:	d0f6      	beq.n	8017348 <rcutils_snprintf+0x14>
 801735a:	f003 f9e5 	bl	801a728 <__errno>
 801735e:	2316      	movs	r3, #22
 8017360:	6003      	str	r3, [r0, #0]
 8017362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017366:	e7f1      	b.n	801734c <rcutils_snprintf+0x18>

08017368 <rcutils_vsnprintf>:
 8017368:	b570      	push	{r4, r5, r6, lr}
 801736a:	b13a      	cbz	r2, 801737c <rcutils_vsnprintf+0x14>
 801736c:	b120      	cbz	r0, 8017378 <rcutils_vsnprintf+0x10>
 801736e:	b129      	cbz	r1, 801737c <rcutils_vsnprintf+0x14>
 8017370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017374:	f003 b878 	b.w	801a468 <vsniprintf>
 8017378:	2900      	cmp	r1, #0
 801737a:	d0f9      	beq.n	8017370 <rcutils_vsnprintf+0x8>
 801737c:	f003 f9d4 	bl	801a728 <__errno>
 8017380:	2316      	movs	r3, #22
 8017382:	6003      	str	r3, [r0, #0]
 8017384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017388:	bd70      	pop	{r4, r5, r6, pc}
 801738a:	bf00      	nop

0801738c <rcutils_strdup>:
 801738c:	b084      	sub	sp, #16
 801738e:	b570      	push	{r4, r5, r6, lr}
 8017390:	b082      	sub	sp, #8
 8017392:	ac07      	add	r4, sp, #28
 8017394:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017398:	4605      	mov	r5, r0
 801739a:	b1b0      	cbz	r0, 80173ca <rcutils_strdup+0x3e>
 801739c:	f7e8 ff4a 	bl	8000234 <strlen>
 80173a0:	1c42      	adds	r2, r0, #1
 80173a2:	9b07      	ldr	r3, [sp, #28]
 80173a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80173a6:	9201      	str	r2, [sp, #4]
 80173a8:	4606      	mov	r6, r0
 80173aa:	4610      	mov	r0, r2
 80173ac:	4798      	blx	r3
 80173ae:	4604      	mov	r4, r0
 80173b0:	b128      	cbz	r0, 80173be <rcutils_strdup+0x32>
 80173b2:	9a01      	ldr	r2, [sp, #4]
 80173b4:	4629      	mov	r1, r5
 80173b6:	f003 f9ec 	bl	801a792 <memcpy>
 80173ba:	2300      	movs	r3, #0
 80173bc:	55a3      	strb	r3, [r4, r6]
 80173be:	4620      	mov	r0, r4
 80173c0:	b002      	add	sp, #8
 80173c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173c6:	b004      	add	sp, #16
 80173c8:	4770      	bx	lr
 80173ca:	4604      	mov	r4, r0
 80173cc:	e7f7      	b.n	80173be <rcutils_strdup+0x32>
 80173ce:	bf00      	nop

080173d0 <rcutils_strndup>:
 80173d0:	b082      	sub	sp, #8
 80173d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173d4:	ac06      	add	r4, sp, #24
 80173d6:	e884 000c 	stmia.w	r4, {r2, r3}
 80173da:	4605      	mov	r5, r0
 80173dc:	b188      	cbz	r0, 8017402 <rcutils_strndup+0x32>
 80173de:	1c4f      	adds	r7, r1, #1
 80173e0:	460e      	mov	r6, r1
 80173e2:	4638      	mov	r0, r7
 80173e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80173e6:	4790      	blx	r2
 80173e8:	4604      	mov	r4, r0
 80173ea:	b128      	cbz	r0, 80173f8 <rcutils_strndup+0x28>
 80173ec:	463a      	mov	r2, r7
 80173ee:	4629      	mov	r1, r5
 80173f0:	f003 f9cf 	bl	801a792 <memcpy>
 80173f4:	2300      	movs	r3, #0
 80173f6:	55a3      	strb	r3, [r4, r6]
 80173f8:	4620      	mov	r0, r4
 80173fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80173fe:	b002      	add	sp, #8
 8017400:	4770      	bx	lr
 8017402:	4604      	mov	r4, r0
 8017404:	e7f8      	b.n	80173f8 <rcutils_strndup+0x28>
 8017406:	bf00      	nop

08017408 <rcutils_get_zero_initialized_string_map>:
 8017408:	4b01      	ldr	r3, [pc, #4]	@ (8017410 <rcutils_get_zero_initialized_string_map+0x8>)
 801740a:	2000      	movs	r0, #0
 801740c:	6018      	str	r0, [r3, #0]
 801740e:	4770      	bx	lr
 8017410:	2000be08 	.word	0x2000be08

08017414 <rcutils_string_map_reserve>:
 8017414:	2800      	cmp	r0, #0
 8017416:	d05f      	beq.n	80174d8 <rcutils_string_map_reserve+0xc4>
 8017418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801741c:	460c      	mov	r4, r1
 801741e:	6801      	ldr	r1, [r0, #0]
 8017420:	b082      	sub	sp, #8
 8017422:	4605      	mov	r5, r0
 8017424:	b129      	cbz	r1, 8017432 <rcutils_string_map_reserve+0x1e>
 8017426:	68cb      	ldr	r3, [r1, #12]
 8017428:	42a3      	cmp	r3, r4
 801742a:	d906      	bls.n	801743a <rcutils_string_map_reserve+0x26>
 801742c:	461c      	mov	r4, r3
 801742e:	2900      	cmp	r1, #0
 8017430:	d1f9      	bne.n	8017426 <rcutils_string_map_reserve+0x12>
 8017432:	201f      	movs	r0, #31
 8017434:	b002      	add	sp, #8
 8017436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801743a:	688b      	ldr	r3, [r1, #8]
 801743c:	42a3      	cmp	r3, r4
 801743e:	d047      	beq.n	80174d0 <rcutils_string_map_reserve+0xbc>
 8017440:	6a0e      	ldr	r6, [r1, #32]
 8017442:	2c00      	cmp	r4, #0
 8017444:	d034      	beq.n	80174b0 <rcutils_string_map_reserve+0x9c>
 8017446:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801744a:	d243      	bcs.n	80174d4 <rcutils_string_map_reserve+0xc0>
 801744c:	00a7      	lsls	r7, r4, #2
 801744e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017452:	6808      	ldr	r0, [r1, #0]
 8017454:	4632      	mov	r2, r6
 8017456:	4639      	mov	r1, r7
 8017458:	47c0      	blx	r8
 801745a:	2800      	cmp	r0, #0
 801745c:	d03a      	beq.n	80174d4 <rcutils_string_map_reserve+0xc0>
 801745e:	682b      	ldr	r3, [r5, #0]
 8017460:	4632      	mov	r2, r6
 8017462:	6018      	str	r0, [r3, #0]
 8017464:	4639      	mov	r1, r7
 8017466:	6858      	ldr	r0, [r3, #4]
 8017468:	47c0      	blx	r8
 801746a:	2800      	cmp	r0, #0
 801746c:	d032      	beq.n	80174d4 <rcutils_string_map_reserve+0xc0>
 801746e:	682d      	ldr	r5, [r5, #0]
 8017470:	68ab      	ldr	r3, [r5, #8]
 8017472:	6068      	str	r0, [r5, #4]
 8017474:	42a3      	cmp	r3, r4
 8017476:	d226      	bcs.n	80174c6 <rcutils_string_map_reserve+0xb2>
 8017478:	682a      	ldr	r2, [r5, #0]
 801747a:	eb00 0c07 	add.w	ip, r0, r7
 801747e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017482:	45e6      	cmp	lr, ip
 8017484:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017488:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801748c:	d203      	bcs.n	8017496 <rcutils_string_map_reserve+0x82>
 801748e:	eb02 0c07 	add.w	ip, r2, r7
 8017492:	4566      	cmp	r6, ip
 8017494:	d322      	bcc.n	80174dc <rcutils_string_map_reserve+0xc8>
 8017496:	1ae3      	subs	r3, r4, r3
 8017498:	009a      	lsls	r2, r3, #2
 801749a:	4670      	mov	r0, lr
 801749c:	2100      	movs	r1, #0
 801749e:	9201      	str	r2, [sp, #4]
 80174a0:	f003 f8ae 	bl	801a600 <memset>
 80174a4:	9a01      	ldr	r2, [sp, #4]
 80174a6:	2100      	movs	r1, #0
 80174a8:	4630      	mov	r0, r6
 80174aa:	f003 f8a9 	bl	801a600 <memset>
 80174ae:	e00a      	b.n	80174c6 <rcutils_string_map_reserve+0xb2>
 80174b0:	694f      	ldr	r7, [r1, #20]
 80174b2:	6808      	ldr	r0, [r1, #0]
 80174b4:	4631      	mov	r1, r6
 80174b6:	47b8      	blx	r7
 80174b8:	682b      	ldr	r3, [r5, #0]
 80174ba:	4631      	mov	r1, r6
 80174bc:	6858      	ldr	r0, [r3, #4]
 80174be:	601c      	str	r4, [r3, #0]
 80174c0:	47b8      	blx	r7
 80174c2:	682d      	ldr	r5, [r5, #0]
 80174c4:	606c      	str	r4, [r5, #4]
 80174c6:	2000      	movs	r0, #0
 80174c8:	60ac      	str	r4, [r5, #8]
 80174ca:	b002      	add	sp, #8
 80174cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174d0:	2000      	movs	r0, #0
 80174d2:	e7af      	b.n	8017434 <rcutils_string_map_reserve+0x20>
 80174d4:	200a      	movs	r0, #10
 80174d6:	e7ad      	b.n	8017434 <rcutils_string_map_reserve+0x20>
 80174d8:	200b      	movs	r0, #11
 80174da:	4770      	bx	lr
 80174dc:	1f0b      	subs	r3, r1, #4
 80174de:	4418      	add	r0, r3
 80174e0:	4413      	add	r3, r2
 80174e2:	3a04      	subs	r2, #4
 80174e4:	4417      	add	r7, r2
 80174e6:	2200      	movs	r2, #0
 80174e8:	f843 2f04 	str.w	r2, [r3, #4]!
 80174ec:	42bb      	cmp	r3, r7
 80174ee:	f840 2f04 	str.w	r2, [r0, #4]!
 80174f2:	d1f9      	bne.n	80174e8 <rcutils_string_map_reserve+0xd4>
 80174f4:	e7e7      	b.n	80174c6 <rcutils_string_map_reserve+0xb2>
 80174f6:	bf00      	nop

080174f8 <rcutils_string_map_init>:
 80174f8:	b082      	sub	sp, #8
 80174fa:	b570      	push	{r4, r5, r6, lr}
 80174fc:	ac04      	add	r4, sp, #16
 80174fe:	e884 000c 	stmia.w	r4, {r2, r3}
 8017502:	b380      	cbz	r0, 8017566 <rcutils_string_map_init+0x6e>
 8017504:	6806      	ldr	r6, [r0, #0]
 8017506:	4604      	mov	r4, r0
 8017508:	b12e      	cbz	r6, 8017516 <rcutils_string_map_init+0x1e>
 801750a:	251e      	movs	r5, #30
 801750c:	4628      	mov	r0, r5
 801750e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017512:	b002      	add	sp, #8
 8017514:	4770      	bx	lr
 8017516:	a804      	add	r0, sp, #16
 8017518:	460d      	mov	r5, r1
 801751a:	f7f6 fc93 	bl	800de44 <rcutils_allocator_is_valid>
 801751e:	b310      	cbz	r0, 8017566 <rcutils_string_map_init+0x6e>
 8017520:	9b04      	ldr	r3, [sp, #16]
 8017522:	9908      	ldr	r1, [sp, #32]
 8017524:	2024      	movs	r0, #36	@ 0x24
 8017526:	4798      	blx	r3
 8017528:	6020      	str	r0, [r4, #0]
 801752a:	b310      	cbz	r0, 8017572 <rcutils_string_map_init+0x7a>
 801752c:	f10d 0e10 	add.w	lr, sp, #16
 8017530:	e9c0 6600 	strd	r6, r6, [r0]
 8017534:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017538:	f100 0c10 	add.w	ip, r0, #16
 801753c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017540:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017544:	f8de 3000 	ldr.w	r3, [lr]
 8017548:	f8cc 3000 	str.w	r3, [ip]
 801754c:	4629      	mov	r1, r5
 801754e:	4620      	mov	r0, r4
 8017550:	f7ff ff60 	bl	8017414 <rcutils_string_map_reserve>
 8017554:	4605      	mov	r5, r0
 8017556:	2800      	cmp	r0, #0
 8017558:	d0d8      	beq.n	801750c <rcutils_string_map_init+0x14>
 801755a:	9b05      	ldr	r3, [sp, #20]
 801755c:	9908      	ldr	r1, [sp, #32]
 801755e:	6820      	ldr	r0, [r4, #0]
 8017560:	4798      	blx	r3
 8017562:	6026      	str	r6, [r4, #0]
 8017564:	e7d2      	b.n	801750c <rcutils_string_map_init+0x14>
 8017566:	250b      	movs	r5, #11
 8017568:	4628      	mov	r0, r5
 801756a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801756e:	b002      	add	sp, #8
 8017570:	4770      	bx	lr
 8017572:	250a      	movs	r5, #10
 8017574:	e7ca      	b.n	801750c <rcutils_string_map_init+0x14>
 8017576:	bf00      	nop

08017578 <rcutils_string_map_fini>:
 8017578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801757c:	b082      	sub	sp, #8
 801757e:	2800      	cmp	r0, #0
 8017580:	d03a      	beq.n	80175f8 <rcutils_string_map_fini+0x80>
 8017582:	6804      	ldr	r4, [r0, #0]
 8017584:	4606      	mov	r6, r0
 8017586:	2c00      	cmp	r4, #0
 8017588:	d032      	beq.n	80175f0 <rcutils_string_map_fini+0x78>
 801758a:	68a3      	ldr	r3, [r4, #8]
 801758c:	b32b      	cbz	r3, 80175da <rcutils_string_map_fini+0x62>
 801758e:	2500      	movs	r5, #0
 8017590:	6822      	ldr	r2, [r4, #0]
 8017592:	462f      	mov	r7, r5
 8017594:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017598:	b1e0      	cbz	r0, 80175d4 <rcutils_string_map_fini+0x5c>
 801759a:	6a21      	ldr	r1, [r4, #32]
 801759c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80175a0:	9101      	str	r1, [sp, #4]
 80175a2:	47c0      	blx	r8
 80175a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80175a8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80175ac:	9901      	ldr	r1, [sp, #4]
 80175ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80175b2:	47c0      	blx	r8
 80175b4:	68e3      	ldr	r3, [r4, #12]
 80175b6:	6862      	ldr	r2, [r4, #4]
 80175b8:	3b01      	subs	r3, #1
 80175ba:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80175be:	60e3      	str	r3, [r4, #12]
 80175c0:	6834      	ldr	r4, [r6, #0]
 80175c2:	68a3      	ldr	r3, [r4, #8]
 80175c4:	3501      	adds	r5, #1
 80175c6:	429d      	cmp	r5, r3
 80175c8:	d207      	bcs.n	80175da <rcutils_string_map_fini+0x62>
 80175ca:	6822      	ldr	r2, [r4, #0]
 80175cc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80175d0:	2800      	cmp	r0, #0
 80175d2:	d1e2      	bne.n	801759a <rcutils_string_map_fini+0x22>
 80175d4:	3501      	adds	r5, #1
 80175d6:	429d      	cmp	r5, r3
 80175d8:	d3dc      	bcc.n	8017594 <rcutils_string_map_fini+0x1c>
 80175da:	2100      	movs	r1, #0
 80175dc:	4630      	mov	r0, r6
 80175de:	f7ff ff19 	bl	8017414 <rcutils_string_map_reserve>
 80175e2:	4604      	mov	r4, r0
 80175e4:	b920      	cbnz	r0, 80175f0 <rcutils_string_map_fini+0x78>
 80175e6:	6830      	ldr	r0, [r6, #0]
 80175e8:	6943      	ldr	r3, [r0, #20]
 80175ea:	6a01      	ldr	r1, [r0, #32]
 80175ec:	4798      	blx	r3
 80175ee:	6034      	str	r4, [r6, #0]
 80175f0:	4620      	mov	r0, r4
 80175f2:	b002      	add	sp, #8
 80175f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175f8:	240b      	movs	r4, #11
 80175fa:	4620      	mov	r0, r4
 80175fc:	b002      	add	sp, #8
 80175fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017602:	bf00      	nop

08017604 <rcutils_string_map_getn>:
 8017604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017608:	b300      	cbz	r0, 801764c <rcutils_string_map_getn+0x48>
 801760a:	6807      	ldr	r7, [r0, #0]
 801760c:	b1ff      	cbz	r7, 801764e <rcutils_string_map_getn+0x4a>
 801760e:	4688      	mov	r8, r1
 8017610:	b1e1      	cbz	r1, 801764c <rcutils_string_map_getn+0x48>
 8017612:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017616:	683e      	ldr	r6, [r7, #0]
 8017618:	f1ba 0f00 	cmp.w	sl, #0
 801761c:	d016      	beq.n	801764c <rcutils_string_map_getn+0x48>
 801761e:	4691      	mov	r9, r2
 8017620:	3e04      	subs	r6, #4
 8017622:	2400      	movs	r4, #0
 8017624:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801762c:	4628      	mov	r0, r5
 801762e:	3401      	adds	r4, #1
 8017630:	b155      	cbz	r5, 8017648 <rcutils_string_map_getn+0x44>
 8017632:	f7e8 fdff 	bl	8000234 <strlen>
 8017636:	4548      	cmp	r0, r9
 8017638:	4602      	mov	r2, r0
 801763a:	4629      	mov	r1, r5
 801763c:	bf38      	it	cc
 801763e:	464a      	movcc	r2, r9
 8017640:	4640      	mov	r0, r8
 8017642:	f002 fff2 	bl	801a62a <strncmp>
 8017646:	b128      	cbz	r0, 8017654 <rcutils_string_map_getn+0x50>
 8017648:	45a2      	cmp	sl, r4
 801764a:	d1eb      	bne.n	8017624 <rcutils_string_map_getn+0x20>
 801764c:	2700      	movs	r7, #0
 801764e:	4638      	mov	r0, r7
 8017650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	f853 700b 	ldr.w	r7, [r3, fp]
 801765a:	4638      	mov	r0, r7
 801765c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017660 <rmw_get_zero_initialized_context>:
 8017660:	b510      	push	{r4, lr}
 8017662:	4604      	mov	r4, r0
 8017664:	3010      	adds	r0, #16
 8017666:	f7f6 fc7f 	bl	800df68 <rmw_get_zero_initialized_init_options>
 801766a:	2300      	movs	r3, #0
 801766c:	2000      	movs	r0, #0
 801766e:	2100      	movs	r1, #0
 8017670:	e9c4 0100 	strd	r0, r1, [r4]
 8017674:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017678:	60a3      	str	r3, [r4, #8]
 801767a:	4620      	mov	r0, r4
 801767c:	bd10      	pop	{r4, pc}
 801767e:	bf00      	nop

08017680 <rmw_time_equal>:
 8017680:	b4f0      	push	{r4, r5, r6, r7}
 8017682:	b084      	sub	sp, #16
 8017684:	ac04      	add	r4, sp, #16
 8017686:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801768a:	4603      	mov	r3, r0
 801768c:	4924      	ldr	r1, [pc, #144]	@ (8017720 <rmw_time_equal+0xa0>)
 801768e:	9e03      	ldr	r6, [sp, #12]
 8017690:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8017694:	2202      	movs	r2, #2
 8017696:	4299      	cmp	r1, r3
 8017698:	41aa      	sbcs	r2, r5
 801769a:	d330      	bcc.n	80176fe <rmw_time_equal+0x7e>
 801769c:	4c21      	ldr	r4, [pc, #132]	@ (8017724 <rmw_time_equal+0xa4>)
 801769e:	fba3 3204 	umull	r3, r2, r3, r4
 80176a2:	fb04 2205 	mla	r2, r4, r5, r2
 80176a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80176aa:	43dd      	mvns	r5, r3
 80176ac:	1a8c      	subs	r4, r1, r2
 80176ae:	4285      	cmp	r5, r0
 80176b0:	41b4      	sbcs	r4, r6
 80176b2:	d332      	bcc.n	801771a <rmw_time_equal+0x9a>
 80176b4:	eb10 0c03 	adds.w	ip, r0, r3
 80176b8:	eb42 0106 	adc.w	r1, r2, r6
 80176bc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80176c0:	4817      	ldr	r0, [pc, #92]	@ (8017720 <rmw_time_equal+0xa0>)
 80176c2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80176c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80176c6:	2202      	movs	r2, #2
 80176c8:	4298      	cmp	r0, r3
 80176ca:	41b2      	sbcs	r2, r6
 80176cc:	d31c      	bcc.n	8017708 <rmw_time_equal+0x88>
 80176ce:	4c15      	ldr	r4, [pc, #84]	@ (8017724 <rmw_time_equal+0xa4>)
 80176d0:	fba3 3204 	umull	r3, r2, r3, r4
 80176d4:	fb04 2206 	mla	r2, r4, r6, r2
 80176d8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80176dc:	43de      	mvns	r6, r3
 80176de:	1a84      	subs	r4, r0, r2
 80176e0:	42ae      	cmp	r6, r5
 80176e2:	41bc      	sbcs	r4, r7
 80176e4:	d315      	bcc.n	8017712 <rmw_time_equal+0x92>
 80176e6:	195b      	adds	r3, r3, r5
 80176e8:	eb42 0207 	adc.w	r2, r2, r7
 80176ec:	428a      	cmp	r2, r1
 80176ee:	bf08      	it	eq
 80176f0:	4563      	cmpeq	r3, ip
 80176f2:	bf0c      	ite	eq
 80176f4:	2001      	moveq	r0, #1
 80176f6:	2000      	movne	r0, #0
 80176f8:	b004      	add	sp, #16
 80176fa:	bcf0      	pop	{r4, r5, r6, r7}
 80176fc:	4770      	bx	lr
 80176fe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017702:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017706:	e7d9      	b.n	80176bc <rmw_time_equal+0x3c>
 8017708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801770c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017710:	e7ec      	b.n	80176ec <rmw_time_equal+0x6c>
 8017712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017716:	4602      	mov	r2, r0
 8017718:	e7e8      	b.n	80176ec <rmw_time_equal+0x6c>
 801771a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801771e:	e7cd      	b.n	80176bc <rmw_time_equal+0x3c>
 8017720:	25c17d04 	.word	0x25c17d04
 8017724:	3b9aca00 	.word	0x3b9aca00

08017728 <rmw_time_total_nsec>:
 8017728:	b470      	push	{r4, r5, r6}
 801772a:	b085      	sub	sp, #20
 801772c:	ac04      	add	r4, sp, #16
 801772e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017732:	4603      	mov	r3, r0
 8017734:	4912      	ldr	r1, [pc, #72]	@ (8017780 <rmw_time_total_nsec+0x58>)
 8017736:	9e03      	ldr	r6, [sp, #12]
 8017738:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801773c:	2202      	movs	r2, #2
 801773e:	4299      	cmp	r1, r3
 8017740:	41aa      	sbcs	r2, r5
 8017742:	d311      	bcc.n	8017768 <rmw_time_total_nsec+0x40>
 8017744:	4c0f      	ldr	r4, [pc, #60]	@ (8017784 <rmw_time_total_nsec+0x5c>)
 8017746:	fba3 3204 	umull	r3, r2, r3, r4
 801774a:	fb04 2205 	mla	r2, r4, r5, r2
 801774e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017752:	43dd      	mvns	r5, r3
 8017754:	1a8c      	subs	r4, r1, r2
 8017756:	4285      	cmp	r5, r0
 8017758:	41b4      	sbcs	r4, r6
 801775a:	d30c      	bcc.n	8017776 <rmw_time_total_nsec+0x4e>
 801775c:	1818      	adds	r0, r3, r0
 801775e:	eb42 0106 	adc.w	r1, r2, r6
 8017762:	b005      	add	sp, #20
 8017764:	bc70      	pop	{r4, r5, r6}
 8017766:	4770      	bx	lr
 8017768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801776c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017770:	b005      	add	sp, #20
 8017772:	bc70      	pop	{r4, r5, r6}
 8017774:	4770      	bx	lr
 8017776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801777a:	b005      	add	sp, #20
 801777c:	bc70      	pop	{r4, r5, r6}
 801777e:	4770      	bx	lr
 8017780:	25c17d04 	.word	0x25c17d04
 8017784:	3b9aca00 	.word	0x3b9aca00

08017788 <rmw_get_zero_initialized_message_info>:
 8017788:	b510      	push	{r4, lr}
 801778a:	2240      	movs	r2, #64	@ 0x40
 801778c:	4604      	mov	r4, r0
 801778e:	2100      	movs	r1, #0
 8017790:	f002 ff36 	bl	801a600 <memset>
 8017794:	4620      	mov	r0, r4
 8017796:	bd10      	pop	{r4, pc}

08017798 <rmw_validate_full_topic_name>:
 8017798:	2800      	cmp	r0, #0
 801779a:	d057      	beq.n	801784c <rmw_validate_full_topic_name+0xb4>
 801779c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177a0:	460d      	mov	r5, r1
 80177a2:	2900      	cmp	r1, #0
 80177a4:	d054      	beq.n	8017850 <rmw_validate_full_topic_name+0xb8>
 80177a6:	4616      	mov	r6, r2
 80177a8:	4604      	mov	r4, r0
 80177aa:	f7e8 fd43 	bl	8000234 <strlen>
 80177ae:	b148      	cbz	r0, 80177c4 <rmw_validate_full_topic_name+0x2c>
 80177b0:	7823      	ldrb	r3, [r4, #0]
 80177b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80177b4:	d00d      	beq.n	80177d2 <rmw_validate_full_topic_name+0x3a>
 80177b6:	2302      	movs	r3, #2
 80177b8:	602b      	str	r3, [r5, #0]
 80177ba:	b13e      	cbz	r6, 80177cc <rmw_validate_full_topic_name+0x34>
 80177bc:	2000      	movs	r0, #0
 80177be:	6030      	str	r0, [r6, #0]
 80177c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c4:	2301      	movs	r3, #1
 80177c6:	602b      	str	r3, [r5, #0]
 80177c8:	2e00      	cmp	r6, #0
 80177ca:	d1f7      	bne.n	80177bc <rmw_validate_full_topic_name+0x24>
 80177cc:	2000      	movs	r0, #0
 80177ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177d2:	1e43      	subs	r3, r0, #1
 80177d4:	5ce2      	ldrb	r2, [r4, r3]
 80177d6:	2a2f      	cmp	r2, #47	@ 0x2f
 80177d8:	d03c      	beq.n	8017854 <rmw_validate_full_topic_name+0xbc>
 80177da:	1e63      	subs	r3, r4, #1
 80177dc:	eb03 0800 	add.w	r8, r3, r0
 80177e0:	f1c4 0e01 	rsb	lr, r4, #1
 80177e4:	eb0e 0703 	add.w	r7, lr, r3
 80177e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80177ec:	f021 0220 	bic.w	r2, r1, #32
 80177f0:	3a41      	subs	r2, #65	@ 0x41
 80177f2:	2a19      	cmp	r2, #25
 80177f4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80177f8:	d90b      	bls.n	8017812 <rmw_validate_full_topic_name+0x7a>
 80177fa:	295f      	cmp	r1, #95	@ 0x5f
 80177fc:	d009      	beq.n	8017812 <rmw_validate_full_topic_name+0x7a>
 80177fe:	f1bc 0f0a 	cmp.w	ip, #10
 8017802:	d906      	bls.n	8017812 <rmw_validate_full_topic_name+0x7a>
 8017804:	2304      	movs	r3, #4
 8017806:	602b      	str	r3, [r5, #0]
 8017808:	2e00      	cmp	r6, #0
 801780a:	d0df      	beq.n	80177cc <rmw_validate_full_topic_name+0x34>
 801780c:	6037      	str	r7, [r6, #0]
 801780e:	2000      	movs	r0, #0
 8017810:	e7d6      	b.n	80177c0 <rmw_validate_full_topic_name+0x28>
 8017812:	4543      	cmp	r3, r8
 8017814:	d1e6      	bne.n	80177e4 <rmw_validate_full_topic_name+0x4c>
 8017816:	4f1a      	ldr	r7, [pc, #104]	@ (8017880 <rmw_validate_full_topic_name+0xe8>)
 8017818:	2301      	movs	r3, #1
 801781a:	e004      	b.n	8017826 <rmw_validate_full_topic_name+0x8e>
 801781c:	4298      	cmp	r0, r3
 801781e:	f104 0401 	add.w	r4, r4, #1
 8017822:	d91c      	bls.n	801785e <rmw_validate_full_topic_name+0xc6>
 8017824:	4613      	mov	r3, r2
 8017826:	4298      	cmp	r0, r3
 8017828:	f103 0201 	add.w	r2, r3, #1
 801782c:	d0f6      	beq.n	801781c <rmw_validate_full_topic_name+0x84>
 801782e:	7821      	ldrb	r1, [r4, #0]
 8017830:	292f      	cmp	r1, #47	@ 0x2f
 8017832:	d1f3      	bne.n	801781c <rmw_validate_full_topic_name+0x84>
 8017834:	7861      	ldrb	r1, [r4, #1]
 8017836:	292f      	cmp	r1, #47	@ 0x2f
 8017838:	d01c      	beq.n	8017874 <rmw_validate_full_topic_name+0xdc>
 801783a:	5dc9      	ldrb	r1, [r1, r7]
 801783c:	0749      	lsls	r1, r1, #29
 801783e:	d5ed      	bpl.n	801781c <rmw_validate_full_topic_name+0x84>
 8017840:	2206      	movs	r2, #6
 8017842:	602a      	str	r2, [r5, #0]
 8017844:	2e00      	cmp	r6, #0
 8017846:	d0c1      	beq.n	80177cc <rmw_validate_full_topic_name+0x34>
 8017848:	6033      	str	r3, [r6, #0]
 801784a:	e7bf      	b.n	80177cc <rmw_validate_full_topic_name+0x34>
 801784c:	200b      	movs	r0, #11
 801784e:	4770      	bx	lr
 8017850:	200b      	movs	r0, #11
 8017852:	e7b5      	b.n	80177c0 <rmw_validate_full_topic_name+0x28>
 8017854:	2203      	movs	r2, #3
 8017856:	602a      	str	r2, [r5, #0]
 8017858:	2e00      	cmp	r6, #0
 801785a:	d1f5      	bne.n	8017848 <rmw_validate_full_topic_name+0xb0>
 801785c:	e7b6      	b.n	80177cc <rmw_validate_full_topic_name+0x34>
 801785e:	28f7      	cmp	r0, #247	@ 0xf7
 8017860:	d802      	bhi.n	8017868 <rmw_validate_full_topic_name+0xd0>
 8017862:	2000      	movs	r0, #0
 8017864:	6028      	str	r0, [r5, #0]
 8017866:	e7ab      	b.n	80177c0 <rmw_validate_full_topic_name+0x28>
 8017868:	2307      	movs	r3, #7
 801786a:	602b      	str	r3, [r5, #0]
 801786c:	2e00      	cmp	r6, #0
 801786e:	d0ad      	beq.n	80177cc <rmw_validate_full_topic_name+0x34>
 8017870:	23f6      	movs	r3, #246	@ 0xf6
 8017872:	e7e9      	b.n	8017848 <rmw_validate_full_topic_name+0xb0>
 8017874:	2205      	movs	r2, #5
 8017876:	602a      	str	r2, [r5, #0]
 8017878:	2e00      	cmp	r6, #0
 801787a:	d1e5      	bne.n	8017848 <rmw_validate_full_topic_name+0xb0>
 801787c:	e7a6      	b.n	80177cc <rmw_validate_full_topic_name+0x34>
 801787e:	bf00      	nop
 8017880:	0801e3ea 	.word	0x0801e3ea

08017884 <rmw_validate_namespace_with_size>:
 8017884:	b340      	cbz	r0, 80178d8 <rmw_validate_namespace_with_size+0x54>
 8017886:	b570      	push	{r4, r5, r6, lr}
 8017888:	4614      	mov	r4, r2
 801788a:	b0c2      	sub	sp, #264	@ 0x108
 801788c:	b332      	cbz	r2, 80178dc <rmw_validate_namespace_with_size+0x58>
 801788e:	2901      	cmp	r1, #1
 8017890:	460d      	mov	r5, r1
 8017892:	461e      	mov	r6, r3
 8017894:	d102      	bne.n	801789c <rmw_validate_namespace_with_size+0x18>
 8017896:	7803      	ldrb	r3, [r0, #0]
 8017898:	2b2f      	cmp	r3, #47	@ 0x2f
 801789a:	d012      	beq.n	80178c2 <rmw_validate_namespace_with_size+0x3e>
 801789c:	aa01      	add	r2, sp, #4
 801789e:	4669      	mov	r1, sp
 80178a0:	f7ff ff7a 	bl	8017798 <rmw_validate_full_topic_name>
 80178a4:	b978      	cbnz	r0, 80178c6 <rmw_validate_namespace_with_size+0x42>
 80178a6:	9b00      	ldr	r3, [sp, #0]
 80178a8:	b14b      	cbz	r3, 80178be <rmw_validate_namespace_with_size+0x3a>
 80178aa:	2b07      	cmp	r3, #7
 80178ac:	d007      	beq.n	80178be <rmw_validate_namespace_with_size+0x3a>
 80178ae:	1e5a      	subs	r2, r3, #1
 80178b0:	2a05      	cmp	r2, #5
 80178b2:	d82b      	bhi.n	801790c <rmw_validate_namespace_with_size+0x88>
 80178b4:	e8df f002 	tbb	[pc, r2]
 80178b8:	1e212427 	.word	0x1e212427
 80178bc:	141b      	.short	0x141b
 80178be:	2df5      	cmp	r5, #245	@ 0xf5
 80178c0:	d803      	bhi.n	80178ca <rmw_validate_namespace_with_size+0x46>
 80178c2:	2000      	movs	r0, #0
 80178c4:	6020      	str	r0, [r4, #0]
 80178c6:	b042      	add	sp, #264	@ 0x108
 80178c8:	bd70      	pop	{r4, r5, r6, pc}
 80178ca:	2307      	movs	r3, #7
 80178cc:	6023      	str	r3, [r4, #0]
 80178ce:	2e00      	cmp	r6, #0
 80178d0:	d0f9      	beq.n	80178c6 <rmw_validate_namespace_with_size+0x42>
 80178d2:	23f4      	movs	r3, #244	@ 0xf4
 80178d4:	6033      	str	r3, [r6, #0]
 80178d6:	e7f6      	b.n	80178c6 <rmw_validate_namespace_with_size+0x42>
 80178d8:	200b      	movs	r0, #11
 80178da:	4770      	bx	lr
 80178dc:	200b      	movs	r0, #11
 80178de:	e7f2      	b.n	80178c6 <rmw_validate_namespace_with_size+0x42>
 80178e0:	2306      	movs	r3, #6
 80178e2:	6023      	str	r3, [r4, #0]
 80178e4:	2e00      	cmp	r6, #0
 80178e6:	d0ee      	beq.n	80178c6 <rmw_validate_namespace_with_size+0x42>
 80178e8:	9b01      	ldr	r3, [sp, #4]
 80178ea:	6033      	str	r3, [r6, #0]
 80178ec:	e7eb      	b.n	80178c6 <rmw_validate_namespace_with_size+0x42>
 80178ee:	2305      	movs	r3, #5
 80178f0:	6023      	str	r3, [r4, #0]
 80178f2:	e7f7      	b.n	80178e4 <rmw_validate_namespace_with_size+0x60>
 80178f4:	2304      	movs	r3, #4
 80178f6:	6023      	str	r3, [r4, #0]
 80178f8:	e7f4      	b.n	80178e4 <rmw_validate_namespace_with_size+0x60>
 80178fa:	2303      	movs	r3, #3
 80178fc:	6023      	str	r3, [r4, #0]
 80178fe:	e7f1      	b.n	80178e4 <rmw_validate_namespace_with_size+0x60>
 8017900:	2302      	movs	r3, #2
 8017902:	6023      	str	r3, [r4, #0]
 8017904:	e7ee      	b.n	80178e4 <rmw_validate_namespace_with_size+0x60>
 8017906:	2301      	movs	r3, #1
 8017908:	6023      	str	r3, [r4, #0]
 801790a:	e7eb      	b.n	80178e4 <rmw_validate_namespace_with_size+0x60>
 801790c:	4a03      	ldr	r2, [pc, #12]	@ (801791c <rmw_validate_namespace_with_size+0x98>)
 801790e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017912:	a802      	add	r0, sp, #8
 8017914:	f7ff fd0e 	bl	8017334 <rcutils_snprintf>
 8017918:	2001      	movs	r0, #1
 801791a:	e7d4      	b.n	80178c6 <rmw_validate_namespace_with_size+0x42>
 801791c:	0801ded0 	.word	0x0801ded0

08017920 <rmw_validate_namespace>:
 8017920:	b168      	cbz	r0, 801793e <rmw_validate_namespace+0x1e>
 8017922:	b570      	push	{r4, r5, r6, lr}
 8017924:	460d      	mov	r5, r1
 8017926:	4616      	mov	r6, r2
 8017928:	4604      	mov	r4, r0
 801792a:	f7e8 fc83 	bl	8000234 <strlen>
 801792e:	4633      	mov	r3, r6
 8017930:	4601      	mov	r1, r0
 8017932:	462a      	mov	r2, r5
 8017934:	4620      	mov	r0, r4
 8017936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801793a:	f7ff bfa3 	b.w	8017884 <rmw_validate_namespace_with_size>
 801793e:	200b      	movs	r0, #11
 8017940:	4770      	bx	lr
 8017942:	bf00      	nop

08017944 <rmw_namespace_validation_result_string>:
 8017944:	2807      	cmp	r0, #7
 8017946:	bf9a      	itte	ls
 8017948:	4b02      	ldrls	r3, [pc, #8]	@ (8017954 <rmw_namespace_validation_result_string+0x10>)
 801794a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801794e:	4802      	ldrhi	r0, [pc, #8]	@ (8017958 <rmw_namespace_validation_result_string+0x14>)
 8017950:	4770      	bx	lr
 8017952:	bf00      	nop
 8017954:	0801e0c8 	.word	0x0801e0c8
 8017958:	0801df20 	.word	0x0801df20

0801795c <rmw_validate_node_name>:
 801795c:	2800      	cmp	r0, #0
 801795e:	d03b      	beq.n	80179d8 <rmw_validate_node_name+0x7c>
 8017960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017964:	460d      	mov	r5, r1
 8017966:	2900      	cmp	r1, #0
 8017968:	d038      	beq.n	80179dc <rmw_validate_node_name+0x80>
 801796a:	4616      	mov	r6, r2
 801796c:	4604      	mov	r4, r0
 801796e:	f7e8 fc61 	bl	8000234 <strlen>
 8017972:	b1e0      	cbz	r0, 80179ae <rmw_validate_node_name+0x52>
 8017974:	1e63      	subs	r3, r4, #1
 8017976:	eb03 0800 	add.w	r8, r3, r0
 801797a:	f1c4 0101 	rsb	r1, r4, #1
 801797e:	18cf      	adds	r7, r1, r3
 8017980:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017984:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8017988:	f02e 0c20 	bic.w	ip, lr, #32
 801798c:	2a09      	cmp	r2, #9
 801798e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8017992:	d914      	bls.n	80179be <rmw_validate_node_name+0x62>
 8017994:	f1bc 0f19 	cmp.w	ip, #25
 8017998:	d911      	bls.n	80179be <rmw_validate_node_name+0x62>
 801799a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801799e:	d00e      	beq.n	80179be <rmw_validate_node_name+0x62>
 80179a0:	2302      	movs	r3, #2
 80179a2:	602b      	str	r3, [r5, #0]
 80179a4:	b106      	cbz	r6, 80179a8 <rmw_validate_node_name+0x4c>
 80179a6:	6037      	str	r7, [r6, #0]
 80179a8:	2000      	movs	r0, #0
 80179aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179ae:	2301      	movs	r3, #1
 80179b0:	602b      	str	r3, [r5, #0]
 80179b2:	2e00      	cmp	r6, #0
 80179b4:	d0f8      	beq.n	80179a8 <rmw_validate_node_name+0x4c>
 80179b6:	2000      	movs	r0, #0
 80179b8:	6030      	str	r0, [r6, #0]
 80179ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179be:	4543      	cmp	r3, r8
 80179c0:	d1dd      	bne.n	801797e <rmw_validate_node_name+0x22>
 80179c2:	7822      	ldrb	r2, [r4, #0]
 80179c4:	4b0d      	ldr	r3, [pc, #52]	@ (80179fc <rmw_validate_node_name+0xa0>)
 80179c6:	5cd3      	ldrb	r3, [r2, r3]
 80179c8:	f013 0304 	ands.w	r3, r3, #4
 80179cc:	d110      	bne.n	80179f0 <rmw_validate_node_name+0x94>
 80179ce:	28ff      	cmp	r0, #255	@ 0xff
 80179d0:	d806      	bhi.n	80179e0 <rmw_validate_node_name+0x84>
 80179d2:	602b      	str	r3, [r5, #0]
 80179d4:	4618      	mov	r0, r3
 80179d6:	e7e8      	b.n	80179aa <rmw_validate_node_name+0x4e>
 80179d8:	200b      	movs	r0, #11
 80179da:	4770      	bx	lr
 80179dc:	200b      	movs	r0, #11
 80179de:	e7e4      	b.n	80179aa <rmw_validate_node_name+0x4e>
 80179e0:	2204      	movs	r2, #4
 80179e2:	602a      	str	r2, [r5, #0]
 80179e4:	2e00      	cmp	r6, #0
 80179e6:	d0df      	beq.n	80179a8 <rmw_validate_node_name+0x4c>
 80179e8:	22fe      	movs	r2, #254	@ 0xfe
 80179ea:	6032      	str	r2, [r6, #0]
 80179ec:	4618      	mov	r0, r3
 80179ee:	e7dc      	b.n	80179aa <rmw_validate_node_name+0x4e>
 80179f0:	2303      	movs	r3, #3
 80179f2:	602b      	str	r3, [r5, #0]
 80179f4:	2e00      	cmp	r6, #0
 80179f6:	d1de      	bne.n	80179b6 <rmw_validate_node_name+0x5a>
 80179f8:	e7d6      	b.n	80179a8 <rmw_validate_node_name+0x4c>
 80179fa:	bf00      	nop
 80179fc:	0801e3ea 	.word	0x0801e3ea

08017a00 <rmw_node_name_validation_result_string>:
 8017a00:	2804      	cmp	r0, #4
 8017a02:	bf9a      	itte	ls
 8017a04:	4b02      	ldrls	r3, [pc, #8]	@ (8017a10 <rmw_node_name_validation_result_string+0x10>)
 8017a06:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017a0a:	4802      	ldrhi	r0, [pc, #8]	@ (8017a14 <rmw_node_name_validation_result_string+0x14>)
 8017a0c:	4770      	bx	lr
 8017a0e:	bf00      	nop
 8017a10:	0801e1d4 	.word	0x0801e1d4
 8017a14:	0801e0e8 	.word	0x0801e0e8

08017a18 <on_status>:
 8017a18:	b082      	sub	sp, #8
 8017a1a:	b002      	add	sp, #8
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop

08017a20 <on_topic>:
 8017a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a24:	4a22      	ldr	r2, [pc, #136]	@ (8017ab0 <on_topic+0x90>)
 8017a26:	b094      	sub	sp, #80	@ 0x50
 8017a28:	6812      	ldr	r2, [r2, #0]
 8017a2a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017a2c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017a30:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8017a34:	b3c2      	cbz	r2, 8017aa8 <on_topic+0x88>
 8017a36:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017a3a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017a3e:	e001      	b.n	8017a44 <on_topic+0x24>
 8017a40:	6852      	ldr	r2, [r2, #4]
 8017a42:	b38a      	cbz	r2, 8017aa8 <on_topic+0x88>
 8017a44:	6894      	ldr	r4, [r2, #8]
 8017a46:	8aa3      	ldrh	r3, [r4, #20]
 8017a48:	428b      	cmp	r3, r1
 8017a4a:	d1f9      	bne.n	8017a40 <on_topic+0x20>
 8017a4c:	7da3      	ldrb	r3, [r4, #22]
 8017a4e:	4283      	cmp	r3, r0
 8017a50:	d1f6      	bne.n	8017a40 <on_topic+0x20>
 8017a52:	2248      	movs	r2, #72	@ 0x48
 8017a54:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017a58:	4668      	mov	r0, sp
 8017a5a:	f002 fe9a 	bl	801a792 <memcpy>
 8017a5e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8017a62:	cb0c      	ldmia	r3, {r2, r3}
 8017a64:	4620      	mov	r0, r4
 8017a66:	f7f7 fb83 	bl	800f170 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017a6a:	4607      	mov	r7, r0
 8017a6c:	b1e0      	cbz	r0, 8017aa8 <on_topic+0x88>
 8017a6e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017a72:	4632      	mov	r2, r6
 8017a74:	4628      	mov	r0, r5
 8017a76:	f108 0110 	add.w	r1, r8, #16
 8017a7a:	f7f8 fd9d 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8017a7e:	b930      	cbnz	r0, 8017a8e <on_topic+0x6e>
 8017a80:	480c      	ldr	r0, [pc, #48]	@ (8017ab4 <on_topic+0x94>)
 8017a82:	4639      	mov	r1, r7
 8017a84:	b014      	add	sp, #80	@ 0x50
 8017a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a8a:	f000 b8bd 	b.w	8017c08 <put_memory>
 8017a8e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8017a92:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8017a96:	f7f7 f969 	bl	800ed6c <rmw_uros_epoch_nanos>
 8017a9a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017a9e:	2305      	movs	r3, #5
 8017aa0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017aa4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017aa8:	b014      	add	sp, #80	@ 0x50
 8017aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aae:	bf00      	nop
 8017ab0:	2000bd4c 	.word	0x2000bd4c
 8017ab4:	2000bd3c 	.word	0x2000bd3c

08017ab8 <on_request>:
 8017ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017abc:	4823      	ldr	r0, [pc, #140]	@ (8017b4c <on_request+0x94>)
 8017abe:	b094      	sub	sp, #80	@ 0x50
 8017ac0:	6800      	ldr	r0, [r0, #0]
 8017ac2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017ac4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017ac8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017aca:	2800      	cmp	r0, #0
 8017acc:	d03b      	beq.n	8017b46 <on_request+0x8e>
 8017ace:	461d      	mov	r5, r3
 8017ad0:	e001      	b.n	8017ad6 <on_request+0x1e>
 8017ad2:	6840      	ldr	r0, [r0, #4]
 8017ad4:	b3b8      	cbz	r0, 8017b46 <on_request+0x8e>
 8017ad6:	6884      	ldr	r4, [r0, #8]
 8017ad8:	8b21      	ldrh	r1, [r4, #24]
 8017ada:	4291      	cmp	r1, r2
 8017adc:	d1f9      	bne.n	8017ad2 <on_request+0x1a>
 8017ade:	2248      	movs	r2, #72	@ 0x48
 8017ae0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017ae4:	4668      	mov	r0, sp
 8017ae6:	f002 fe54 	bl	801a792 <memcpy>
 8017aea:	f104 0320 	add.w	r3, r4, #32
 8017aee:	cb0c      	ldmia	r3, {r2, r3}
 8017af0:	4620      	mov	r0, r4
 8017af2:	f7f7 fb3d 	bl	800f170 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017af6:	4680      	mov	r8, r0
 8017af8:	b328      	cbz	r0, 8017b46 <on_request+0x8e>
 8017afa:	4638      	mov	r0, r7
 8017afc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017b00:	4632      	mov	r2, r6
 8017b02:	f107 0110 	add.w	r1, r7, #16
 8017b06:	f7f8 fd57 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8017b0a:	b930      	cbnz	r0, 8017b1a <on_request+0x62>
 8017b0c:	4810      	ldr	r0, [pc, #64]	@ (8017b50 <on_request+0x98>)
 8017b0e:	4641      	mov	r1, r8
 8017b10:	b014      	add	sp, #80	@ 0x50
 8017b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b16:	f000 b877 	b.w	8017c08 <put_memory>
 8017b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b1c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017b20:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017b24:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017b28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017b2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017b30:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017b34:	f7f7 f91a 	bl	800ed6c <rmw_uros_epoch_nanos>
 8017b38:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017b3c:	2303      	movs	r3, #3
 8017b3e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017b42:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017b46:	b014      	add	sp, #80	@ 0x50
 8017b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b4c:	2000bd1c 	.word	0x2000bd1c
 8017b50:	2000bd3c 	.word	0x2000bd3c

08017b54 <on_reply>:
 8017b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b58:	4821      	ldr	r0, [pc, #132]	@ (8017be0 <on_reply+0x8c>)
 8017b5a:	b094      	sub	sp, #80	@ 0x50
 8017b5c:	6800      	ldr	r0, [r0, #0]
 8017b5e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017b60:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017b64:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017b66:	b3b8      	cbz	r0, 8017bd8 <on_reply+0x84>
 8017b68:	461d      	mov	r5, r3
 8017b6a:	e001      	b.n	8017b70 <on_reply+0x1c>
 8017b6c:	6840      	ldr	r0, [r0, #4]
 8017b6e:	b398      	cbz	r0, 8017bd8 <on_reply+0x84>
 8017b70:	6884      	ldr	r4, [r0, #8]
 8017b72:	8b21      	ldrh	r1, [r4, #24]
 8017b74:	4291      	cmp	r1, r2
 8017b76:	d1f9      	bne.n	8017b6c <on_reply+0x18>
 8017b78:	2248      	movs	r2, #72	@ 0x48
 8017b7a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017b7e:	4668      	mov	r0, sp
 8017b80:	f002 fe07 	bl	801a792 <memcpy>
 8017b84:	f104 0320 	add.w	r3, r4, #32
 8017b88:	cb0c      	ldmia	r3, {r2, r3}
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	f7f7 faf0 	bl	800f170 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017b90:	4680      	mov	r8, r0
 8017b92:	b308      	cbz	r0, 8017bd8 <on_reply+0x84>
 8017b94:	4638      	mov	r0, r7
 8017b96:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017b9a:	4632      	mov	r2, r6
 8017b9c:	f107 0110 	add.w	r1, r7, #16
 8017ba0:	f7f8 fd0a 	bl	80105b8 <ucdr_deserialize_array_uint8_t>
 8017ba4:	b930      	cbnz	r0, 8017bb4 <on_reply+0x60>
 8017ba6:	480f      	ldr	r0, [pc, #60]	@ (8017be4 <on_reply+0x90>)
 8017ba8:	4641      	mov	r1, r8
 8017baa:	b014      	add	sp, #80	@ 0x50
 8017bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bb0:	f000 b82a 	b.w	8017c08 <put_memory>
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017bba:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017bbe:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017bc2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8017bc6:	f7f7 f8d1 	bl	800ed6c <rmw_uros_epoch_nanos>
 8017bca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017bce:	2304      	movs	r3, #4
 8017bd0:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017bd4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017bd8:	b014      	add	sp, #80	@ 0x50
 8017bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bde:	bf00      	nop
 8017be0:	2000710c 	.word	0x2000710c
 8017be4:	2000bd3c 	.word	0x2000bd3c

08017be8 <get_memory>:
 8017be8:	4603      	mov	r3, r0
 8017bea:	6840      	ldr	r0, [r0, #4]
 8017bec:	b158      	cbz	r0, 8017c06 <get_memory+0x1e>
 8017bee:	6842      	ldr	r2, [r0, #4]
 8017bf0:	605a      	str	r2, [r3, #4]
 8017bf2:	b10a      	cbz	r2, 8017bf8 <get_memory+0x10>
 8017bf4:	2100      	movs	r1, #0
 8017bf6:	6011      	str	r1, [r2, #0]
 8017bf8:	681a      	ldr	r2, [r3, #0]
 8017bfa:	6042      	str	r2, [r0, #4]
 8017bfc:	b102      	cbz	r2, 8017c00 <get_memory+0x18>
 8017bfe:	6010      	str	r0, [r2, #0]
 8017c00:	2200      	movs	r2, #0
 8017c02:	6002      	str	r2, [r0, #0]
 8017c04:	6018      	str	r0, [r3, #0]
 8017c06:	4770      	bx	lr

08017c08 <put_memory>:
 8017c08:	680b      	ldr	r3, [r1, #0]
 8017c0a:	b10b      	cbz	r3, 8017c10 <put_memory+0x8>
 8017c0c:	684a      	ldr	r2, [r1, #4]
 8017c0e:	605a      	str	r2, [r3, #4]
 8017c10:	684a      	ldr	r2, [r1, #4]
 8017c12:	b102      	cbz	r2, 8017c16 <put_memory+0xe>
 8017c14:	6013      	str	r3, [r2, #0]
 8017c16:	6803      	ldr	r3, [r0, #0]
 8017c18:	428b      	cmp	r3, r1
 8017c1a:	6843      	ldr	r3, [r0, #4]
 8017c1c:	bf08      	it	eq
 8017c1e:	6002      	streq	r2, [r0, #0]
 8017c20:	604b      	str	r3, [r1, #4]
 8017c22:	b103      	cbz	r3, 8017c26 <put_memory+0x1e>
 8017c24:	6019      	str	r1, [r3, #0]
 8017c26:	2300      	movs	r3, #0
 8017c28:	600b      	str	r3, [r1, #0]
 8017c2a:	6041      	str	r1, [r0, #4]
 8017c2c:	4770      	bx	lr
 8017c2e:	bf00      	nop

08017c30 <rmw_destroy_client>:
 8017c30:	b570      	push	{r4, r5, r6, lr}
 8017c32:	b128      	cbz	r0, 8017c40 <rmw_destroy_client+0x10>
 8017c34:	4604      	mov	r4, r0
 8017c36:	6800      	ldr	r0, [r0, #0]
 8017c38:	460d      	mov	r5, r1
 8017c3a:	f7f7 fca9 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 8017c3e:	b910      	cbnz	r0, 8017c46 <rmw_destroy_client+0x16>
 8017c40:	2401      	movs	r4, #1
 8017c42:	4620      	mov	r0, r4
 8017c44:	bd70      	pop	{r4, r5, r6, pc}
 8017c46:	6863      	ldr	r3, [r4, #4]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d0f9      	beq.n	8017c40 <rmw_destroy_client+0x10>
 8017c4c:	2d00      	cmp	r5, #0
 8017c4e:	d0f7      	beq.n	8017c40 <rmw_destroy_client+0x10>
 8017c50:	6828      	ldr	r0, [r5, #0]
 8017c52:	f7f7 fc9d 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 8017c56:	2800      	cmp	r0, #0
 8017c58:	d0f2      	beq.n	8017c40 <rmw_destroy_client+0x10>
 8017c5a:	686e      	ldr	r6, [r5, #4]
 8017c5c:	2e00      	cmp	r6, #0
 8017c5e:	d0ef      	beq.n	8017c40 <rmw_destroy_client+0x10>
 8017c60:	6864      	ldr	r4, [r4, #4]
 8017c62:	6932      	ldr	r2, [r6, #16]
 8017c64:	6920      	ldr	r0, [r4, #16]
 8017c66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017c6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c6e:	6819      	ldr	r1, [r3, #0]
 8017c70:	f7f9 f99e 	bl	8010fb0 <uxr_buffer_cancel_data>
 8017c74:	4602      	mov	r2, r0
 8017c76:	6920      	ldr	r0, [r4, #16]
 8017c78:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017c7c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017c80:	f7f7 fb6c 	bl	800f35c <run_xrce_session>
 8017c84:	6920      	ldr	r0, [r4, #16]
 8017c86:	6932      	ldr	r2, [r6, #16]
 8017c88:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017c8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c90:	6819      	ldr	r1, [r3, #0]
 8017c92:	f7f8 fecd 	bl	8010a30 <uxr_buffer_delete_entity>
 8017c96:	4602      	mov	r2, r0
 8017c98:	6920      	ldr	r0, [r4, #16]
 8017c9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017c9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017ca2:	f7f7 fb5b 	bl	800f35c <run_xrce_session>
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	4628      	mov	r0, r5
 8017caa:	bf14      	ite	ne
 8017cac:	2400      	movne	r4, #0
 8017cae:	2402      	moveq	r4, #2
 8017cb0:	f7f7 fa3c 	bl	800f12c <rmw_uxrce_fini_client_memory>
 8017cb4:	e7c5      	b.n	8017c42 <rmw_destroy_client+0x12>
 8017cb6:	bf00      	nop

08017cb8 <rmw_get_implementation_identifier>:
 8017cb8:	4b01      	ldr	r3, [pc, #4]	@ (8017cc0 <rmw_get_implementation_identifier+0x8>)
 8017cba:	6818      	ldr	r0, [r3, #0]
 8017cbc:	4770      	bx	lr
 8017cbe:	bf00      	nop
 8017cc0:	0801e200 	.word	0x0801e200

08017cc4 <create_topic>:
 8017cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc8:	4605      	mov	r5, r0
 8017cca:	b084      	sub	sp, #16
 8017ccc:	4822      	ldr	r0, [pc, #136]	@ (8017d58 <create_topic+0x94>)
 8017cce:	460f      	mov	r7, r1
 8017cd0:	4616      	mov	r6, r2
 8017cd2:	f7ff ff89 	bl	8017be8 <get_memory>
 8017cd6:	4604      	mov	r4, r0
 8017cd8:	2800      	cmp	r0, #0
 8017cda:	d039      	beq.n	8017d50 <create_topic+0x8c>
 8017cdc:	692b      	ldr	r3, [r5, #16]
 8017cde:	6884      	ldr	r4, [r0, #8]
 8017ce0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017d60 <create_topic+0x9c>
 8017ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017ce8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017cec:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017cf0:	1c42      	adds	r2, r0, #1
 8017cf2:	2102      	movs	r1, #2
 8017cf4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017cf8:	f7f9 f8f0 	bl	8010edc <uxr_object_id>
 8017cfc:	223c      	movs	r2, #60	@ 0x3c
 8017cfe:	6120      	str	r0, [r4, #16]
 8017d00:	4641      	mov	r1, r8
 8017d02:	4638      	mov	r0, r7
 8017d04:	f7f7 fc2a 	bl	800f55c <generate_topic_name>
 8017d08:	b1f0      	cbz	r0, 8017d48 <create_topic+0x84>
 8017d0a:	4f14      	ldr	r7, [pc, #80]	@ (8017d5c <create_topic+0x98>)
 8017d0c:	4630      	mov	r0, r6
 8017d0e:	2264      	movs	r2, #100	@ 0x64
 8017d10:	4639      	mov	r1, r7
 8017d12:	f7f7 fbf3 	bl	800f4fc <generate_type_name>
 8017d16:	b1b8      	cbz	r0, 8017d48 <create_topic+0x84>
 8017d18:	6928      	ldr	r0, [r5, #16]
 8017d1a:	2306      	movs	r3, #6
 8017d1c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017d20:	f8cd 8000 	str.w	r8, [sp]
 8017d24:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017d28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d2c:	6811      	ldr	r1, [r2, #0]
 8017d2e:	696b      	ldr	r3, [r5, #20]
 8017d30:	6922      	ldr	r2, [r4, #16]
 8017d32:	f7f8 fefb 	bl	8010b2c <uxr_buffer_create_topic_bin>
 8017d36:	4602      	mov	r2, r0
 8017d38:	6928      	ldr	r0, [r5, #16]
 8017d3a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017d3e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017d42:	f7f7 fb0b 	bl	800f35c <run_xrce_session>
 8017d46:	b918      	cbnz	r0, 8017d50 <create_topic+0x8c>
 8017d48:	4620      	mov	r0, r4
 8017d4a:	f7f7 fa05 	bl	800f158 <rmw_uxrce_fini_topic_memory>
 8017d4e:	2400      	movs	r4, #0
 8017d50:	4620      	mov	r0, r4
 8017d52:	b004      	add	sp, #16
 8017d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d58:	2000bd5c 	.word	0x2000bd5c
 8017d5c:	2000be48 	.word	0x2000be48
 8017d60:	2000be0c 	.word	0x2000be0c

08017d64 <destroy_topic>:
 8017d64:	b538      	push	{r3, r4, r5, lr}
 8017d66:	6985      	ldr	r5, [r0, #24]
 8017d68:	b1d5      	cbz	r5, 8017da0 <destroy_topic+0x3c>
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	6928      	ldr	r0, [r5, #16]
 8017d6e:	6922      	ldr	r2, [r4, #16]
 8017d70:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017d74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d78:	6819      	ldr	r1, [r3, #0]
 8017d7a:	f7f8 fe59 	bl	8010a30 <uxr_buffer_delete_entity>
 8017d7e:	4602      	mov	r2, r0
 8017d80:	6928      	ldr	r0, [r5, #16]
 8017d82:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017d86:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017d8a:	f7f7 fae7 	bl	800f35c <run_xrce_session>
 8017d8e:	2800      	cmp	r0, #0
 8017d90:	4620      	mov	r0, r4
 8017d92:	bf14      	ite	ne
 8017d94:	2400      	movne	r4, #0
 8017d96:	2402      	moveq	r4, #2
 8017d98:	f7f7 f9de 	bl	800f158 <rmw_uxrce_fini_topic_memory>
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	2401      	movs	r4, #1
 8017da2:	4620      	mov	r0, r4
 8017da4:	bd38      	pop	{r3, r4, r5, pc}
 8017da6:	bf00      	nop

08017da8 <rmw_send_request>:
 8017da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dac:	4604      	mov	r4, r0
 8017dae:	6800      	ldr	r0, [r0, #0]
 8017db0:	b08b      	sub	sp, #44	@ 0x2c
 8017db2:	460e      	mov	r6, r1
 8017db4:	4615      	mov	r5, r2
 8017db6:	b128      	cbz	r0, 8017dc4 <rmw_send_request+0x1c>
 8017db8:	4b21      	ldr	r3, [pc, #132]	@ (8017e40 <rmw_send_request+0x98>)
 8017dba:	6819      	ldr	r1, [r3, #0]
 8017dbc:	f7e8 fa30 	bl	8000220 <strcmp>
 8017dc0:	2800      	cmp	r0, #0
 8017dc2:	d139      	bne.n	8017e38 <rmw_send_request+0x90>
 8017dc4:	6864      	ldr	r4, [r4, #4]
 8017dc6:	6963      	ldr	r3, [r4, #20]
 8017dc8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017dcc:	689b      	ldr	r3, [r3, #8]
 8017dce:	4798      	blx	r3
 8017dd0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017dd4:	4630      	mov	r0, r6
 8017dd6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017dda:	4798      	blx	r3
 8017ddc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017de0:	9000      	str	r0, [sp, #0]
 8017de2:	6922      	ldr	r2, [r4, #16]
 8017de4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017de6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017dea:	ab02      	add	r3, sp, #8
 8017dec:	f7fb f99a 	bl	8013124 <uxr_prepare_output_stream>
 8017df0:	2700      	movs	r7, #0
 8017df2:	6028      	str	r0, [r5, #0]
 8017df4:	606f      	str	r7, [r5, #4]
 8017df6:	b198      	cbz	r0, 8017e20 <rmw_send_request+0x78>
 8017df8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017dfc:	a902      	add	r1, sp, #8
 8017dfe:	4630      	mov	r0, r6
 8017e00:	4798      	blx	r3
 8017e02:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017e06:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017e0a:	2b01      	cmp	r3, #1
 8017e0c:	d00c      	beq.n	8017e28 <rmw_send_request+0x80>
 8017e0e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017e10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e14:	f7f9 feb2 	bl	8011b7c <uxr_run_session_until_confirm_delivery>
 8017e18:	4638      	mov	r0, r7
 8017e1a:	b00b      	add	sp, #44	@ 0x2c
 8017e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e20:	2001      	movs	r0, #1
 8017e22:	b00b      	add	sp, #44	@ 0x2c
 8017e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017e2c:	f7f9 fae6 	bl	80113fc <uxr_flash_output_streams>
 8017e30:	4638      	mov	r0, r7
 8017e32:	b00b      	add	sp, #44	@ 0x2c
 8017e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e38:	200c      	movs	r0, #12
 8017e3a:	b00b      	add	sp, #44	@ 0x2c
 8017e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e40:	0801e200 	.word	0x0801e200

08017e44 <rmw_take_request>:
 8017e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e48:	4605      	mov	r5, r0
 8017e4a:	6800      	ldr	r0, [r0, #0]
 8017e4c:	b089      	sub	sp, #36	@ 0x24
 8017e4e:	460c      	mov	r4, r1
 8017e50:	4690      	mov	r8, r2
 8017e52:	461e      	mov	r6, r3
 8017e54:	b128      	cbz	r0, 8017e62 <rmw_take_request+0x1e>
 8017e56:	4b28      	ldr	r3, [pc, #160]	@ (8017ef8 <rmw_take_request+0xb4>)
 8017e58:	6819      	ldr	r1, [r3, #0]
 8017e5a:	f7e8 f9e1 	bl	8000220 <strcmp>
 8017e5e:	2800      	cmp	r0, #0
 8017e60:	d146      	bne.n	8017ef0 <rmw_take_request+0xac>
 8017e62:	b10e      	cbz	r6, 8017e68 <rmw_take_request+0x24>
 8017e64:	2300      	movs	r3, #0
 8017e66:	7033      	strb	r3, [r6, #0]
 8017e68:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017e6c:	f7f7 f9f8 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e70:	4648      	mov	r0, r9
 8017e72:	f7f7 f9cd 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017e76:	4607      	mov	r7, r0
 8017e78:	b3b0      	cbz	r0, 8017ee8 <rmw_take_request+0xa4>
 8017e7a:	6885      	ldr	r5, [r0, #8]
 8017e7c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017e80:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017e84:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017e88:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017e8c:	7423      	strb	r3, [r4, #16]
 8017e8e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017e92:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017e96:	74e2      	strb	r2, [r4, #19]
 8017e98:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017e9c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017ea0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017ea4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017ea8:	61e1      	str	r1, [r4, #28]
 8017eaa:	6162      	str	r2, [r4, #20]
 8017eac:	61a3      	str	r3, [r4, #24]
 8017eae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017eb2:	689b      	ldr	r3, [r3, #8]
 8017eb4:	4798      	blx	r3
 8017eb6:	6844      	ldr	r4, [r0, #4]
 8017eb8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017ebc:	f105 0110 	add.w	r1, r5, #16
 8017ec0:	4668      	mov	r0, sp
 8017ec2:	f7f4 fd67 	bl	800c994 <ucdr_init_buffer>
 8017ec6:	68e3      	ldr	r3, [r4, #12]
 8017ec8:	4641      	mov	r1, r8
 8017eca:	4668      	mov	r0, sp
 8017ecc:	4798      	blx	r3
 8017ece:	4639      	mov	r1, r7
 8017ed0:	4604      	mov	r4, r0
 8017ed2:	480a      	ldr	r0, [pc, #40]	@ (8017efc <rmw_take_request+0xb8>)
 8017ed4:	f7ff fe98 	bl	8017c08 <put_memory>
 8017ed8:	b106      	cbz	r6, 8017edc <rmw_take_request+0x98>
 8017eda:	7034      	strb	r4, [r6, #0]
 8017edc:	f084 0001 	eor.w	r0, r4, #1
 8017ee0:	b2c0      	uxtb	r0, r0
 8017ee2:	b009      	add	sp, #36	@ 0x24
 8017ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ee8:	2001      	movs	r0, #1
 8017eea:	b009      	add	sp, #36	@ 0x24
 8017eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ef0:	200c      	movs	r0, #12
 8017ef2:	b009      	add	sp, #36	@ 0x24
 8017ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ef8:	0801e200 	.word	0x0801e200
 8017efc:	2000bd3c 	.word	0x2000bd3c

08017f00 <rmw_send_response>:
 8017f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f02:	4605      	mov	r5, r0
 8017f04:	6800      	ldr	r0, [r0, #0]
 8017f06:	b091      	sub	sp, #68	@ 0x44
 8017f08:	460c      	mov	r4, r1
 8017f0a:	4616      	mov	r6, r2
 8017f0c:	b128      	cbz	r0, 8017f1a <rmw_send_response+0x1a>
 8017f0e:	4b29      	ldr	r3, [pc, #164]	@ (8017fb4 <rmw_send_response+0xb4>)
 8017f10:	6819      	ldr	r1, [r3, #0]
 8017f12:	f7e8 f985 	bl	8000220 <strcmp>
 8017f16:	2800      	cmp	r0, #0
 8017f18:	d141      	bne.n	8017f9e <rmw_send_response+0x9e>
 8017f1a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8017f1e:	9306      	str	r3, [sp, #24]
 8017f20:	4623      	mov	r3, r4
 8017f22:	9207      	str	r2, [sp, #28]
 8017f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f28:	686d      	ldr	r5, [r5, #4]
 8017f2a:	789b      	ldrb	r3, [r3, #2]
 8017f2c:	68a1      	ldr	r1, [r4, #8]
 8017f2e:	f88d 2017 	strb.w	r2, [sp, #23]
 8017f32:	f88d 3016 	strb.w	r3, [sp, #22]
 8017f36:	68e2      	ldr	r2, [r4, #12]
 8017f38:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017f3c:	6860      	ldr	r0, [r4, #4]
 8017f3e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017f42:	ab02      	add	r3, sp, #8
 8017f44:	c307      	stmia	r3!, {r0, r1, r2}
 8017f46:	696b      	ldr	r3, [r5, #20]
 8017f48:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8017f4a:	68db      	ldr	r3, [r3, #12]
 8017f4c:	4798      	blx	r3
 8017f4e:	6844      	ldr	r4, [r0, #4]
 8017f50:	4630      	mov	r0, r6
 8017f52:	6923      	ldr	r3, [r4, #16]
 8017f54:	4798      	blx	r3
 8017f56:	f100 0318 	add.w	r3, r0, #24
 8017f5a:	6938      	ldr	r0, [r7, #16]
 8017f5c:	9300      	str	r3, [sp, #0]
 8017f5e:	692a      	ldr	r2, [r5, #16]
 8017f60:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017f62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f66:	ab08      	add	r3, sp, #32
 8017f68:	f7fb f8dc 	bl	8013124 <uxr_prepare_output_stream>
 8017f6c:	b910      	cbnz	r0, 8017f74 <rmw_send_response+0x74>
 8017f6e:	2001      	movs	r0, #1
 8017f70:	b011      	add	sp, #68	@ 0x44
 8017f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f74:	a902      	add	r1, sp, #8
 8017f76:	a808      	add	r0, sp, #32
 8017f78:	f7fc f962 	bl	8014240 <uxr_serialize_SampleIdentity>
 8017f7c:	68a3      	ldr	r3, [r4, #8]
 8017f7e:	a908      	add	r1, sp, #32
 8017f80:	4630      	mov	r0, r6
 8017f82:	4798      	blx	r3
 8017f84:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017f88:	6938      	ldr	r0, [r7, #16]
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	d00a      	beq.n	8017fa4 <rmw_send_response+0xa4>
 8017f8e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017f90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017f94:	f7f9 fdf2 	bl	8011b7c <uxr_run_session_until_confirm_delivery>
 8017f98:	2000      	movs	r0, #0
 8017f9a:	b011      	add	sp, #68	@ 0x44
 8017f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f9e:	200c      	movs	r0, #12
 8017fa0:	b011      	add	sp, #68	@ 0x44
 8017fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fa4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017fa8:	f7f9 fa28 	bl	80113fc <uxr_flash_output_streams>
 8017fac:	2000      	movs	r0, #0
 8017fae:	b011      	add	sp, #68	@ 0x44
 8017fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fb2:	bf00      	nop
 8017fb4:	0801e200 	.word	0x0801e200

08017fb8 <rmw_take_response>:
 8017fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fbc:	4604      	mov	r4, r0
 8017fbe:	6800      	ldr	r0, [r0, #0]
 8017fc0:	b088      	sub	sp, #32
 8017fc2:	4688      	mov	r8, r1
 8017fc4:	4617      	mov	r7, r2
 8017fc6:	461d      	mov	r5, r3
 8017fc8:	b120      	cbz	r0, 8017fd4 <rmw_take_response+0x1c>
 8017fca:	4b1e      	ldr	r3, [pc, #120]	@ (8018044 <rmw_take_response+0x8c>)
 8017fcc:	6819      	ldr	r1, [r3, #0]
 8017fce:	f7e8 f927 	bl	8000220 <strcmp>
 8017fd2:	bb78      	cbnz	r0, 8018034 <rmw_take_response+0x7c>
 8017fd4:	b10d      	cbz	r5, 8017fda <rmw_take_response+0x22>
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	702b      	strb	r3, [r5, #0]
 8017fda:	6864      	ldr	r4, [r4, #4]
 8017fdc:	f7f7 f940 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	f7f7 f915 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fe6:	4606      	mov	r6, r0
 8017fe8:	b340      	cbz	r0, 801803c <rmw_take_response+0x84>
 8017fea:	6963      	ldr	r3, [r4, #20]
 8017fec:	6884      	ldr	r4, [r0, #8]
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017ff4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017ff8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017ffc:	4798      	blx	r3
 8017ffe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018002:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018006:	f104 0110 	add.w	r1, r4, #16
 801800a:	4668      	mov	r0, sp
 801800c:	f7f4 fcc2 	bl	800c994 <ucdr_init_buffer>
 8018010:	4639      	mov	r1, r7
 8018012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018016:	4668      	mov	r0, sp
 8018018:	4798      	blx	r3
 801801a:	4631      	mov	r1, r6
 801801c:	4604      	mov	r4, r0
 801801e:	480a      	ldr	r0, [pc, #40]	@ (8018048 <rmw_take_response+0x90>)
 8018020:	f7ff fdf2 	bl	8017c08 <put_memory>
 8018024:	b105      	cbz	r5, 8018028 <rmw_take_response+0x70>
 8018026:	702c      	strb	r4, [r5, #0]
 8018028:	f084 0001 	eor.w	r0, r4, #1
 801802c:	b2c0      	uxtb	r0, r0
 801802e:	b008      	add	sp, #32
 8018030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018034:	200c      	movs	r0, #12
 8018036:	b008      	add	sp, #32
 8018038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801803c:	2001      	movs	r0, #1
 801803e:	b008      	add	sp, #32
 8018040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018044:	0801e200 	.word	0x0801e200
 8018048:	2000bd3c 	.word	0x2000bd3c

0801804c <rmw_take_with_info>:
 801804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801804e:	4604      	mov	r4, r0
 8018050:	6800      	ldr	r0, [r0, #0]
 8018052:	b089      	sub	sp, #36	@ 0x24
 8018054:	460f      	mov	r7, r1
 8018056:	4615      	mov	r5, r2
 8018058:	b128      	cbz	r0, 8018066 <rmw_take_with_info+0x1a>
 801805a:	4b24      	ldr	r3, [pc, #144]	@ (80180ec <rmw_take_with_info+0xa0>)
 801805c:	6819      	ldr	r1, [r3, #0]
 801805e:	f7e8 f8df 	bl	8000220 <strcmp>
 8018062:	2800      	cmp	r0, #0
 8018064:	d13e      	bne.n	80180e4 <rmw_take_with_info+0x98>
 8018066:	b305      	cbz	r5, 80180aa <rmw_take_with_info+0x5e>
 8018068:	6864      	ldr	r4, [r4, #4]
 801806a:	2300      	movs	r3, #0
 801806c:	702b      	strb	r3, [r5, #0]
 801806e:	f7f7 f8f7 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8018072:	4620      	mov	r0, r4
 8018074:	f7f7 f8cc 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018078:	4606      	mov	r6, r0
 801807a:	b1f0      	cbz	r0, 80180ba <rmw_take_with_info+0x6e>
 801807c:	6881      	ldr	r1, [r0, #8]
 801807e:	4668      	mov	r0, sp
 8018080:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018084:	3110      	adds	r1, #16
 8018086:	f7f4 fc85 	bl	800c994 <ucdr_init_buffer>
 801808a:	69a3      	ldr	r3, [r4, #24]
 801808c:	4639      	mov	r1, r7
 801808e:	68db      	ldr	r3, [r3, #12]
 8018090:	4668      	mov	r0, sp
 8018092:	4798      	blx	r3
 8018094:	4631      	mov	r1, r6
 8018096:	4604      	mov	r4, r0
 8018098:	4815      	ldr	r0, [pc, #84]	@ (80180f0 <rmw_take_with_info+0xa4>)
 801809a:	f7ff fdb5 	bl	8017c08 <put_memory>
 801809e:	702c      	strb	r4, [r5, #0]
 80180a0:	f084 0001 	eor.w	r0, r4, #1
 80180a4:	b2c0      	uxtb	r0, r0
 80180a6:	b009      	add	sp, #36	@ 0x24
 80180a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180aa:	6864      	ldr	r4, [r4, #4]
 80180ac:	f7f7 f8d8 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 80180b0:	4620      	mov	r0, r4
 80180b2:	f7f7 f8ad 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 80180b6:	4605      	mov	r5, r0
 80180b8:	b910      	cbnz	r0, 80180c0 <rmw_take_with_info+0x74>
 80180ba:	2001      	movs	r0, #1
 80180bc:	b009      	add	sp, #36	@ 0x24
 80180be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180c0:	68a9      	ldr	r1, [r5, #8]
 80180c2:	4668      	mov	r0, sp
 80180c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80180c8:	3110      	adds	r1, #16
 80180ca:	f7f4 fc63 	bl	800c994 <ucdr_init_buffer>
 80180ce:	69a3      	ldr	r3, [r4, #24]
 80180d0:	4639      	mov	r1, r7
 80180d2:	68db      	ldr	r3, [r3, #12]
 80180d4:	4668      	mov	r0, sp
 80180d6:	4798      	blx	r3
 80180d8:	4629      	mov	r1, r5
 80180da:	4604      	mov	r4, r0
 80180dc:	4804      	ldr	r0, [pc, #16]	@ (80180f0 <rmw_take_with_info+0xa4>)
 80180de:	f7ff fd93 	bl	8017c08 <put_memory>
 80180e2:	e7dd      	b.n	80180a0 <rmw_take_with_info+0x54>
 80180e4:	200c      	movs	r0, #12
 80180e6:	b009      	add	sp, #36	@ 0x24
 80180e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180ea:	bf00      	nop
 80180ec:	0801e200 	.word	0x0801e200
 80180f0:	2000bd3c 	.word	0x2000bd3c

080180f4 <rmw_wait>:
 80180f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180f8:	b089      	sub	sp, #36	@ 0x24
 80180fa:	4605      	mov	r5, r0
 80180fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80180fe:	460e      	mov	r6, r1
 8018100:	4698      	mov	r8, r3
 8018102:	4691      	mov	r9, r2
 8018104:	2a00      	cmp	r2, #0
 8018106:	f000 810a 	beq.w	801831e <rmw_wait+0x22a>
 801810a:	b16c      	cbz	r4, 8018128 <rmw_wait+0x34>
 801810c:	4bae      	ldr	r3, [pc, #696]	@ (80183c8 <rmw_wait+0x2d4>)
 801810e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018110:	af04      	add	r7, sp, #16
 8018112:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8018116:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801811a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801811e:	f7ff faaf 	bl	8017680 <rmw_time_equal>
 8018122:	2800      	cmp	r0, #0
 8018124:	f000 8127 	beq.w	8018376 <rmw_wait+0x282>
 8018128:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801812c:	f7f7 f898 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8018130:	4ba6      	ldr	r3, [pc, #664]	@ (80183cc <rmw_wait+0x2d8>)
 8018132:	681c      	ldr	r4, [r3, #0]
 8018134:	b14c      	cbz	r4, 801814a <rmw_wait+0x56>
 8018136:	4623      	mov	r3, r4
 8018138:	2100      	movs	r1, #0
 801813a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801813e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018142:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8018146:	2b00      	cmp	r3, #0
 8018148:	d1f7      	bne.n	801813a <rmw_wait+0x46>
 801814a:	f1b9 0f00 	cmp.w	r9, #0
 801814e:	d011      	beq.n	8018174 <rmw_wait+0x80>
 8018150:	f8d9 1000 	ldr.w	r1, [r9]
 8018154:	b171      	cbz	r1, 8018174 <rmw_wait+0x80>
 8018156:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801815a:	2300      	movs	r3, #0
 801815c:	2001      	movs	r0, #1
 801815e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018162:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018164:	6912      	ldr	r2, [r2, #16]
 8018166:	3301      	adds	r3, #1
 8018168:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801816c:	4299      	cmp	r1, r3
 801816e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018172:	d1f4      	bne.n	801815e <rmw_wait+0x6a>
 8018174:	f1b8 0f00 	cmp.w	r8, #0
 8018178:	d011      	beq.n	801819e <rmw_wait+0xaa>
 801817a:	f8d8 1000 	ldr.w	r1, [r8]
 801817e:	b171      	cbz	r1, 801819e <rmw_wait+0xaa>
 8018180:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018184:	2300      	movs	r3, #0
 8018186:	2001      	movs	r0, #1
 8018188:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801818c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801818e:	6912      	ldr	r2, [r2, #16]
 8018190:	3301      	adds	r3, #1
 8018192:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018196:	4299      	cmp	r1, r3
 8018198:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801819c:	d1f4      	bne.n	8018188 <rmw_wait+0x94>
 801819e:	b185      	cbz	r5, 80181c2 <rmw_wait+0xce>
 80181a0:	6829      	ldr	r1, [r5, #0]
 80181a2:	b171      	cbz	r1, 80181c2 <rmw_wait+0xce>
 80181a4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80181a8:	2300      	movs	r3, #0
 80181aa:	2001      	movs	r0, #1
 80181ac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80181b0:	6a12      	ldr	r2, [r2, #32]
 80181b2:	6912      	ldr	r2, [r2, #16]
 80181b4:	3301      	adds	r3, #1
 80181b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181ba:	4299      	cmp	r1, r3
 80181bc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80181c0:	d1f4      	bne.n	80181ac <rmw_wait+0xb8>
 80181c2:	b34c      	cbz	r4, 8018218 <rmw_wait+0x124>
 80181c4:	4622      	mov	r2, r4
 80181c6:	2300      	movs	r3, #0
 80181c8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80181cc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80181d0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80181d4:	440b      	add	r3, r1
 80181d6:	b2db      	uxtb	r3, r3
 80181d8:	2a00      	cmp	r2, #0
 80181da:	d1f5      	bne.n	80181c8 <rmw_wait+0xd4>
 80181dc:	2b00      	cmp	r3, #0
 80181de:	f000 8084 	beq.w	80182ea <rmw_wait+0x1f6>
 80181e2:	1c7a      	adds	r2, r7, #1
 80181e4:	d00d      	beq.n	8018202 <rmw_wait+0x10e>
 80181e6:	ee07 7a90 	vmov	s15, r7
 80181ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80181ee:	ee07 3a90 	vmov	s15, r3
 80181f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80181f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80181fa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80181fe:	ee17 7a90 	vmov	r7, s15
 8018202:	68a0      	ldr	r0, [r4, #8]
 8018204:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8018208:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801820c:	2b00      	cmp	r3, #0
 801820e:	f040 8090 	bne.w	8018332 <rmw_wait+0x23e>
 8018212:	6864      	ldr	r4, [r4, #4]
 8018214:	2c00      	cmp	r4, #0
 8018216:	d1f4      	bne.n	8018202 <rmw_wait+0x10e>
 8018218:	f1b9 0f00 	cmp.w	r9, #0
 801821c:	f000 80bc 	beq.w	8018398 <rmw_wait+0x2a4>
 8018220:	f8d9 7000 	ldr.w	r7, [r9]
 8018224:	2f00      	cmp	r7, #0
 8018226:	f000 808e 	beq.w	8018346 <rmw_wait+0x252>
 801822a:	2400      	movs	r4, #0
 801822c:	4627      	mov	r7, r4
 801822e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018232:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018236:	f7f6 ffeb 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 801823a:	2800      	cmp	r0, #0
 801823c:	d05f      	beq.n	80182fe <rmw_wait+0x20a>
 801823e:	f8d9 3000 	ldr.w	r3, [r9]
 8018242:	3401      	adds	r4, #1
 8018244:	42a3      	cmp	r3, r4
 8018246:	f04f 0701 	mov.w	r7, #1
 801824a:	d8f0      	bhi.n	801822e <rmw_wait+0x13a>
 801824c:	f1b8 0f00 	cmp.w	r8, #0
 8018250:	d012      	beq.n	8018278 <rmw_wait+0x184>
 8018252:	f8d8 3000 	ldr.w	r3, [r8]
 8018256:	b17b      	cbz	r3, 8018278 <rmw_wait+0x184>
 8018258:	2400      	movs	r4, #0
 801825a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801825e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018262:	f7f6 ffd5 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018266:	2800      	cmp	r0, #0
 8018268:	d051      	beq.n	801830e <rmw_wait+0x21a>
 801826a:	f8d8 3000 	ldr.w	r3, [r8]
 801826e:	3401      	adds	r4, #1
 8018270:	42a3      	cmp	r3, r4
 8018272:	f04f 0701 	mov.w	r7, #1
 8018276:	d8f0      	bhi.n	801825a <rmw_wait+0x166>
 8018278:	b1dd      	cbz	r5, 80182b2 <rmw_wait+0x1be>
 801827a:	682b      	ldr	r3, [r5, #0]
 801827c:	b1cb      	cbz	r3, 80182b2 <rmw_wait+0x1be>
 801827e:	2400      	movs	r4, #0
 8018280:	686b      	ldr	r3, [r5, #4]
 8018282:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018286:	f7f6 ffc3 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 801828a:	b158      	cbz	r0, 80182a4 <rmw_wait+0x1b0>
 801828c:	682b      	ldr	r3, [r5, #0]
 801828e:	3401      	adds	r4, #1
 8018290:	42a3      	cmp	r3, r4
 8018292:	d969      	bls.n	8018368 <rmw_wait+0x274>
 8018294:	686b      	ldr	r3, [r5, #4]
 8018296:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801829a:	2701      	movs	r7, #1
 801829c:	f7f6 ffb8 	bl	800f210 <rmw_uxrce_find_static_input_buffer_by_owner>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d1f3      	bne.n	801828c <rmw_wait+0x198>
 80182a4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80182a8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80182ac:	3401      	adds	r4, #1
 80182ae:	42a3      	cmp	r3, r4
 80182b0:	d8e6      	bhi.n	8018280 <rmw_wait+0x18c>
 80182b2:	b1a6      	cbz	r6, 80182de <rmw_wait+0x1ea>
 80182b4:	6834      	ldr	r4, [r6, #0]
 80182b6:	b194      	cbz	r4, 80182de <rmw_wait+0x1ea>
 80182b8:	2300      	movs	r3, #0
 80182ba:	461d      	mov	r5, r3
 80182bc:	e004      	b.n	80182c8 <rmw_wait+0x1d4>
 80182be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80182c2:	3301      	adds	r3, #1
 80182c4:	42a3      	cmp	r3, r4
 80182c6:	d00a      	beq.n	80182de <rmw_wait+0x1ea>
 80182c8:	6870      	ldr	r0, [r6, #4]
 80182ca:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80182ce:	7c0a      	ldrb	r2, [r1, #16]
 80182d0:	2a00      	cmp	r2, #0
 80182d2:	d0f4      	beq.n	80182be <rmw_wait+0x1ca>
 80182d4:	3301      	adds	r3, #1
 80182d6:	42a3      	cmp	r3, r4
 80182d8:	740d      	strb	r5, [r1, #16]
 80182da:	4617      	mov	r7, r2
 80182dc:	d1f4      	bne.n	80182c8 <rmw_wait+0x1d4>
 80182de:	2f00      	cmp	r7, #0
 80182e0:	d03e      	beq.n	8018360 <rmw_wait+0x26c>
 80182e2:	2000      	movs	r0, #0
 80182e4:	b009      	add	sp, #36	@ 0x24
 80182e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182ea:	68a0      	ldr	r0, [r4, #8]
 80182ec:	2100      	movs	r1, #0
 80182ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80182f2:	f7f9 fc09 	bl	8011b08 <uxr_run_session_timeout>
 80182f6:	6864      	ldr	r4, [r4, #4]
 80182f8:	2c00      	cmp	r4, #0
 80182fa:	d1f6      	bne.n	80182ea <rmw_wait+0x1f6>
 80182fc:	e78c      	b.n	8018218 <rmw_wait+0x124>
 80182fe:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018302:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018306:	3401      	adds	r4, #1
 8018308:	42a3      	cmp	r3, r4
 801830a:	d890      	bhi.n	801822e <rmw_wait+0x13a>
 801830c:	e79e      	b.n	801824c <rmw_wait+0x158>
 801830e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018312:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018316:	3401      	adds	r4, #1
 8018318:	429c      	cmp	r4, r3
 801831a:	d39e      	bcc.n	801825a <rmw_wait+0x166>
 801831c:	e7ac      	b.n	8018278 <rmw_wait+0x184>
 801831e:	2b00      	cmp	r3, #0
 8018320:	f47f aef3 	bne.w	801810a <rmw_wait+0x16>
 8018324:	2800      	cmp	r0, #0
 8018326:	f47f aef0 	bne.w	801810a <rmw_wait+0x16>
 801832a:	2900      	cmp	r1, #0
 801832c:	f47f aeed 	bne.w	801810a <rmw_wait+0x16>
 8018330:	e7d7      	b.n	80182e2 <rmw_wait+0x1ee>
 8018332:	4639      	mov	r1, r7
 8018334:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018338:	f7f9 fc00 	bl	8011b3c <uxr_run_session_until_data>
 801833c:	6864      	ldr	r4, [r4, #4]
 801833e:	2c00      	cmp	r4, #0
 8018340:	f47f af5f 	bne.w	8018202 <rmw_wait+0x10e>
 8018344:	e768      	b.n	8018218 <rmw_wait+0x124>
 8018346:	f1b8 0f00 	cmp.w	r8, #0
 801834a:	d032      	beq.n	80183b2 <rmw_wait+0x2be>
 801834c:	f8d8 3000 	ldr.w	r3, [r8]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d181      	bne.n	8018258 <rmw_wait+0x164>
 8018354:	461f      	mov	r7, r3
 8018356:	2d00      	cmp	r5, #0
 8018358:	d18f      	bne.n	801827a <rmw_wait+0x186>
 801835a:	462f      	mov	r7, r5
 801835c:	2e00      	cmp	r6, #0
 801835e:	d1a9      	bne.n	80182b4 <rmw_wait+0x1c0>
 8018360:	2002      	movs	r0, #2
 8018362:	b009      	add	sp, #36	@ 0x24
 8018364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018368:	2e00      	cmp	r6, #0
 801836a:	d0ba      	beq.n	80182e2 <rmw_wait+0x1ee>
 801836c:	6834      	ldr	r4, [r6, #0]
 801836e:	2701      	movs	r7, #1
 8018370:	2c00      	cmp	r4, #0
 8018372:	d1a1      	bne.n	80182b8 <rmw_wait+0x1c4>
 8018374:	e7b5      	b.n	80182e2 <rmw_wait+0x1ee>
 8018376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801837a:	f7ff f9d5 	bl	8017728 <rmw_time_total_nsec>
 801837e:	2300      	movs	r3, #0
 8018380:	4a13      	ldr	r2, [pc, #76]	@ (80183d0 <rmw_wait+0x2dc>)
 8018382:	f7e8 fcc1 	bl	8000d08 <__aeabi_uldivmod>
 8018386:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801838a:	f171 0300 	sbcs.w	r3, r1, #0
 801838e:	4607      	mov	r7, r0
 8018390:	bfa8      	it	ge
 8018392:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8018396:	e6c9      	b.n	801812c <rmw_wait+0x38>
 8018398:	f1b8 0f00 	cmp.w	r8, #0
 801839c:	d009      	beq.n	80183b2 <rmw_wait+0x2be>
 801839e:	f8d8 3000 	ldr.w	r3, [r8]
 80183a2:	464f      	mov	r7, r9
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	f47f af57 	bne.w	8018258 <rmw_wait+0x164>
 80183aa:	2d00      	cmp	r5, #0
 80183ac:	f47f af65 	bne.w	801827a <rmw_wait+0x186>
 80183b0:	e7d3      	b.n	801835a <rmw_wait+0x266>
 80183b2:	b17d      	cbz	r5, 80183d4 <rmw_wait+0x2e0>
 80183b4:	682b      	ldr	r3, [r5, #0]
 80183b6:	4647      	mov	r7, r8
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	f47f af60 	bne.w	801827e <rmw_wait+0x18a>
 80183be:	2e00      	cmp	r6, #0
 80183c0:	f47f af78 	bne.w	80182b4 <rmw_wait+0x1c0>
 80183c4:	e7cc      	b.n	8018360 <rmw_wait+0x26c>
 80183c6:	bf00      	nop
 80183c8:	0801cb80 	.word	0x0801cb80
 80183cc:	2000bd2c 	.word	0x2000bd2c
 80183d0:	000f4240 	.word	0x000f4240
 80183d4:	2e00      	cmp	r6, #0
 80183d6:	d0c3      	beq.n	8018360 <rmw_wait+0x26c>
 80183d8:	6834      	ldr	r4, [r6, #0]
 80183da:	462f      	mov	r7, r5
 80183dc:	2c00      	cmp	r4, #0
 80183de:	f47f af6b 	bne.w	80182b8 <rmw_wait+0x1c4>
 80183e2:	e7bd      	b.n	8018360 <rmw_wait+0x26c>

080183e4 <rmw_create_wait_set>:
 80183e4:	b508      	push	{r3, lr}
 80183e6:	4803      	ldr	r0, [pc, #12]	@ (80183f4 <rmw_create_wait_set+0x10>)
 80183e8:	f7ff fbfe 	bl	8017be8 <get_memory>
 80183ec:	b108      	cbz	r0, 80183f2 <rmw_create_wait_set+0xe>
 80183ee:	6880      	ldr	r0, [r0, #8]
 80183f0:	3010      	adds	r0, #16
 80183f2:	bd08      	pop	{r3, pc}
 80183f4:	2000bd6c 	.word	0x2000bd6c

080183f8 <rmw_destroy_wait_set>:
 80183f8:	b508      	push	{r3, lr}
 80183fa:	4b08      	ldr	r3, [pc, #32]	@ (801841c <rmw_destroy_wait_set+0x24>)
 80183fc:	6819      	ldr	r1, [r3, #0]
 80183fe:	b911      	cbnz	r1, 8018406 <rmw_destroy_wait_set+0xe>
 8018400:	e00a      	b.n	8018418 <rmw_destroy_wait_set+0x20>
 8018402:	6849      	ldr	r1, [r1, #4]
 8018404:	b141      	cbz	r1, 8018418 <rmw_destroy_wait_set+0x20>
 8018406:	688b      	ldr	r3, [r1, #8]
 8018408:	3310      	adds	r3, #16
 801840a:	4298      	cmp	r0, r3
 801840c:	d1f9      	bne.n	8018402 <rmw_destroy_wait_set+0xa>
 801840e:	4803      	ldr	r0, [pc, #12]	@ (801841c <rmw_destroy_wait_set+0x24>)
 8018410:	f7ff fbfa 	bl	8017c08 <put_memory>
 8018414:	2000      	movs	r0, #0
 8018416:	bd08      	pop	{r3, pc}
 8018418:	2001      	movs	r0, #1
 801841a:	bd08      	pop	{r3, pc}
 801841c:	2000bd6c 	.word	0x2000bd6c

08018420 <rosidl_runtime_c__double__Sequence__init>:
 8018420:	b530      	push	{r4, r5, lr}
 8018422:	4604      	mov	r4, r0
 8018424:	b087      	sub	sp, #28
 8018426:	b130      	cbz	r0, 8018436 <rosidl_runtime_c__double__Sequence__init+0x16>
 8018428:	460d      	mov	r5, r1
 801842a:	b931      	cbnz	r1, 801843a <rosidl_runtime_c__double__Sequence__init+0x1a>
 801842c:	4608      	mov	r0, r1
 801842e:	e9c4 0500 	strd	r0, r5, [r4]
 8018432:	60a5      	str	r5, [r4, #8]
 8018434:	2001      	movs	r0, #1
 8018436:	b007      	add	sp, #28
 8018438:	bd30      	pop	{r4, r5, pc}
 801843a:	a801      	add	r0, sp, #4
 801843c:	f7f5 fcf4 	bl	800de28 <rcutils_get_default_allocator>
 8018440:	9b01      	ldr	r3, [sp, #4]
 8018442:	9905      	ldr	r1, [sp, #20]
 8018444:	00e8      	lsls	r0, r5, #3
 8018446:	4798      	blx	r3
 8018448:	2800      	cmp	r0, #0
 801844a:	d1f0      	bne.n	801842e <rosidl_runtime_c__double__Sequence__init+0xe>
 801844c:	e7f3      	b.n	8018436 <rosidl_runtime_c__double__Sequence__init+0x16>
 801844e:	bf00      	nop

08018450 <rosidl_runtime_c__double__Sequence__fini>:
 8018450:	b188      	cbz	r0, 8018476 <rosidl_runtime_c__double__Sequence__fini+0x26>
 8018452:	b510      	push	{r4, lr}
 8018454:	6803      	ldr	r3, [r0, #0]
 8018456:	b086      	sub	sp, #24
 8018458:	4604      	mov	r4, r0
 801845a:	b153      	cbz	r3, 8018472 <rosidl_runtime_c__double__Sequence__fini+0x22>
 801845c:	a801      	add	r0, sp, #4
 801845e:	f7f5 fce3 	bl	800de28 <rcutils_get_default_allocator>
 8018462:	9b02      	ldr	r3, [sp, #8]
 8018464:	9905      	ldr	r1, [sp, #20]
 8018466:	6820      	ldr	r0, [r4, #0]
 8018468:	4798      	blx	r3
 801846a:	2300      	movs	r3, #0
 801846c:	e9c4 3300 	strd	r3, r3, [r4]
 8018470:	60a3      	str	r3, [r4, #8]
 8018472:	b006      	add	sp, #24
 8018474:	bd10      	pop	{r4, pc}
 8018476:	4770      	bx	lr

08018478 <sensor_msgs__msg__Imu__init>:
 8018478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801847c:	4605      	mov	r5, r0
 801847e:	b3c0      	cbz	r0, 80184f2 <sensor_msgs__msg__Imu__init+0x7a>
 8018480:	f000 f86a 	bl	8018558 <std_msgs__msg__Header__init>
 8018484:	4604      	mov	r4, r0
 8018486:	b310      	cbz	r0, 80184ce <sensor_msgs__msg__Imu__init+0x56>
 8018488:	f105 0618 	add.w	r6, r5, #24
 801848c:	4630      	mov	r0, r6
 801848e:	f000 f9cb 	bl	8018828 <geometry_msgs__msg__Quaternion__init>
 8018492:	4604      	mov	r4, r0
 8018494:	2800      	cmp	r0, #0
 8018496:	d040      	beq.n	801851a <sensor_msgs__msg__Imu__init+0xa2>
 8018498:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801849c:	4638      	mov	r0, r7
 801849e:	f7f7 feab 	bl	80101f8 <geometry_msgs__msg__Vector3__init>
 80184a2:	4604      	mov	r4, r0
 80184a4:	b348      	cbz	r0, 80184fa <sensor_msgs__msg__Imu__init+0x82>
 80184a6:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 80184aa:	4640      	mov	r0, r8
 80184ac:	f7f7 fea4 	bl	80101f8 <geometry_msgs__msg__Vector3__init>
 80184b0:	4604      	mov	r4, r0
 80184b2:	b9d8      	cbnz	r0, 80184ec <sensor_msgs__msg__Imu__init+0x74>
 80184b4:	4628      	mov	r0, r5
 80184b6:	f000 f873 	bl	80185a0 <std_msgs__msg__Header__fini>
 80184ba:	4630      	mov	r0, r6
 80184bc:	f000 f9c8 	bl	8018850 <geometry_msgs__msg__Quaternion__fini>
 80184c0:	4638      	mov	r0, r7
 80184c2:	f7f7 fe9d 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80184c6:	4640      	mov	r0, r8
 80184c8:	f7f7 fe9a 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80184cc:	e00e      	b.n	80184ec <sensor_msgs__msg__Imu__init+0x74>
 80184ce:	4628      	mov	r0, r5
 80184d0:	f000 f866 	bl	80185a0 <std_msgs__msg__Header__fini>
 80184d4:	f105 0018 	add.w	r0, r5, #24
 80184d8:	f000 f9ba 	bl	8018850 <geometry_msgs__msg__Quaternion__fini>
 80184dc:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 80184e0:	f7f7 fe8e 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80184e4:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 80184e8:	f7f7 fe8a 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 80184ec:	4620      	mov	r0, r4
 80184ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184f2:	4604      	mov	r4, r0
 80184f4:	4620      	mov	r0, r4
 80184f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184fa:	4628      	mov	r0, r5
 80184fc:	f000 f850 	bl	80185a0 <std_msgs__msg__Header__fini>
 8018500:	4630      	mov	r0, r6
 8018502:	f000 f9a5 	bl	8018850 <geometry_msgs__msg__Quaternion__fini>
 8018506:	4638      	mov	r0, r7
 8018508:	f7f7 fe7a 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 801850c:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 8018510:	f7f7 fe76 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 8018514:	4620      	mov	r0, r4
 8018516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801851a:	4628      	mov	r0, r5
 801851c:	f000 f840 	bl	80185a0 <std_msgs__msg__Header__fini>
 8018520:	4630      	mov	r0, r6
 8018522:	e7d9      	b.n	80184d8 <sensor_msgs__msg__Imu__init+0x60>

08018524 <sensor_msgs__msg__Imu__fini>:
 8018524:	b188      	cbz	r0, 801854a <sensor_msgs__msg__Imu__fini+0x26>
 8018526:	b510      	push	{r4, lr}
 8018528:	4604      	mov	r4, r0
 801852a:	f000 f839 	bl	80185a0 <std_msgs__msg__Header__fini>
 801852e:	f104 0018 	add.w	r0, r4, #24
 8018532:	f000 f98d 	bl	8018850 <geometry_msgs__msg__Quaternion__fini>
 8018536:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801853a:	f7f7 fe61 	bl	8010200 <geometry_msgs__msg__Vector3__fini>
 801853e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8018542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018546:	f7f7 be5b 	b.w	8010200 <geometry_msgs__msg__Vector3__fini>
 801854a:	4770      	bx	lr

0801854c <std_msgs__msg__Bool__init>:
 801854c:	3800      	subs	r0, #0
 801854e:	bf18      	it	ne
 8018550:	2001      	movne	r0, #1
 8018552:	4770      	bx	lr

08018554 <std_msgs__msg__Bool__fini>:
 8018554:	4770      	bx	lr
 8018556:	bf00      	nop

08018558 <std_msgs__msg__Header__init>:
 8018558:	b570      	push	{r4, r5, r6, lr}
 801855a:	4605      	mov	r5, r0
 801855c:	b1a8      	cbz	r0, 801858a <std_msgs__msg__Header__init+0x32>
 801855e:	f000 f95b 	bl	8018818 <builtin_interfaces__msg__Time__init>
 8018562:	4604      	mov	r4, r0
 8018564:	b140      	cbz	r0, 8018578 <std_msgs__msg__Header__init+0x20>
 8018566:	f105 0608 	add.w	r6, r5, #8
 801856a:	4630      	mov	r0, r6
 801856c:	f001 faa2 	bl	8019ab4 <rosidl_runtime_c__String__init>
 8018570:	4604      	mov	r4, r0
 8018572:	b168      	cbz	r0, 8018590 <std_msgs__msg__Header__init+0x38>
 8018574:	4620      	mov	r0, r4
 8018576:	bd70      	pop	{r4, r5, r6, pc}
 8018578:	4628      	mov	r0, r5
 801857a:	f000 f951 	bl	8018820 <builtin_interfaces__msg__Time__fini>
 801857e:	f105 0008 	add.w	r0, r5, #8
 8018582:	f001 faad 	bl	8019ae0 <rosidl_runtime_c__String__fini>
 8018586:	4620      	mov	r0, r4
 8018588:	bd70      	pop	{r4, r5, r6, pc}
 801858a:	4604      	mov	r4, r0
 801858c:	4620      	mov	r0, r4
 801858e:	bd70      	pop	{r4, r5, r6, pc}
 8018590:	4628      	mov	r0, r5
 8018592:	f000 f945 	bl	8018820 <builtin_interfaces__msg__Time__fini>
 8018596:	4630      	mov	r0, r6
 8018598:	f001 faa2 	bl	8019ae0 <rosidl_runtime_c__String__fini>
 801859c:	e7ea      	b.n	8018574 <std_msgs__msg__Header__init+0x1c>
 801859e:	bf00      	nop

080185a0 <std_msgs__msg__Header__fini>:
 80185a0:	b148      	cbz	r0, 80185b6 <std_msgs__msg__Header__fini+0x16>
 80185a2:	b510      	push	{r4, lr}
 80185a4:	4604      	mov	r4, r0
 80185a6:	f000 f93b 	bl	8018820 <builtin_interfaces__msg__Time__fini>
 80185aa:	f104 0008 	add.w	r0, r4, #8
 80185ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185b2:	f001 ba95 	b.w	8019ae0 <rosidl_runtime_c__String__fini>
 80185b6:	4770      	bx	lr

080185b8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 80185b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185bc:	b086      	sub	sp, #24
 80185be:	4682      	mov	sl, r0
 80185c0:	4689      	mov	r9, r1
 80185c2:	a801      	add	r0, sp, #4
 80185c4:	f7f5 fc30 	bl	800de28 <rcutils_get_default_allocator>
 80185c8:	f1b9 0f00 	cmp.w	r9, #0
 80185cc:	d02f      	beq.n	801862e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80185ce:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80185d2:	2114      	movs	r1, #20
 80185d4:	4642      	mov	r2, r8
 80185d6:	4648      	mov	r0, r9
 80185d8:	4798      	blx	r3
 80185da:	4607      	mov	r7, r0
 80185dc:	b388      	cbz	r0, 8018642 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 80185de:	4606      	mov	r6, r0
 80185e0:	2400      	movs	r4, #0
 80185e2:	e004      	b.n	80185ee <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 80185e4:	3401      	adds	r4, #1
 80185e6:	45a1      	cmp	r9, r4
 80185e8:	f106 0614 	add.w	r6, r6, #20
 80185ec:	d020      	beq.n	8018630 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 80185ee:	4630      	mov	r0, r6
 80185f0:	f001 fa60 	bl	8019ab4 <rosidl_runtime_c__String__init>
 80185f4:	4605      	mov	r5, r0
 80185f6:	2800      	cmp	r0, #0
 80185f8:	d1f4      	bne.n	80185e4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 80185fa:	4630      	mov	r0, r6
 80185fc:	f001 fa70 	bl	8019ae0 <rosidl_runtime_c__String__fini>
 8018600:	45a1      	cmp	r9, r4
 8018602:	d915      	bls.n	8018630 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8018604:	b15c      	cbz	r4, 801861e <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 8018606:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801860a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 801860e:	3c14      	subs	r4, #20
 8018610:	4620      	mov	r0, r4
 8018612:	f001 fa65 	bl	8019ae0 <rosidl_runtime_c__String__fini>
 8018616:	42a7      	cmp	r7, r4
 8018618:	f1a4 0414 	sub.w	r4, r4, #20
 801861c:	d1f8      	bne.n	8018610 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 801861e:	4638      	mov	r0, r7
 8018620:	9b02      	ldr	r3, [sp, #8]
 8018622:	4641      	mov	r1, r8
 8018624:	4798      	blx	r3
 8018626:	4628      	mov	r0, r5
 8018628:	b006      	add	sp, #24
 801862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801862e:	464f      	mov	r7, r9
 8018630:	e9ca 7900 	strd	r7, r9, [sl]
 8018634:	f8ca 9008 	str.w	r9, [sl, #8]
 8018638:	2501      	movs	r5, #1
 801863a:	4628      	mov	r0, r5
 801863c:	b006      	add	sp, #24
 801863e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018642:	4605      	mov	r5, r0
 8018644:	e7f9      	b.n	801863a <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 8018646:	bf00      	nop

08018648 <std_msgs__msg__MultiArrayDimension__init>:
 8018648:	b538      	push	{r3, r4, r5, lr}
 801864a:	4604      	mov	r4, r0
 801864c:	b128      	cbz	r0, 801865a <std_msgs__msg__MultiArrayDimension__init+0x12>
 801864e:	f001 fa31 	bl	8019ab4 <rosidl_runtime_c__String__init>
 8018652:	4605      	mov	r5, r0
 8018654:	b120      	cbz	r0, 8018660 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8018656:	4628      	mov	r0, r5
 8018658:	bd38      	pop	{r3, r4, r5, pc}
 801865a:	4605      	mov	r5, r0
 801865c:	4628      	mov	r0, r5
 801865e:	bd38      	pop	{r3, r4, r5, pc}
 8018660:	4620      	mov	r0, r4
 8018662:	f001 fa3d 	bl	8019ae0 <rosidl_runtime_c__String__fini>
 8018666:	4628      	mov	r0, r5
 8018668:	bd38      	pop	{r3, r4, r5, pc}
 801866a:	bf00      	nop

0801866c <std_msgs__msg__MultiArrayDimension__fini>:
 801866c:	b108      	cbz	r0, 8018672 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 801866e:	f001 ba37 	b.w	8019ae0 <rosidl_runtime_c__String__fini>
 8018672:	4770      	bx	lr

08018674 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8018674:	b108      	cbz	r0, 801867a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8018676:	f7ff bf9f 	b.w	80185b8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801867a:	4770      	bx	lr

0801867c <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 801867c:	b320      	cbz	r0, 80186c8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 801867e:	b530      	push	{r4, r5, lr}
 8018680:	4605      	mov	r5, r0
 8018682:	b087      	sub	sp, #28
 8018684:	a801      	add	r0, sp, #4
 8018686:	f7f5 fbcf 	bl	800de28 <rcutils_get_default_allocator>
 801868a:	682a      	ldr	r2, [r5, #0]
 801868c:	b1b2      	cbz	r2, 80186bc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 801868e:	68a9      	ldr	r1, [r5, #8]
 8018690:	b161      	cbz	r1, 80186ac <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8018692:	2400      	movs	r4, #0
 8018694:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8018698:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 801869c:	d010      	beq.n	80186c0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 801869e:	f001 fa1f 	bl	8019ae0 <rosidl_runtime_c__String__fini>
 80186a2:	68a9      	ldr	r1, [r5, #8]
 80186a4:	682a      	ldr	r2, [r5, #0]
 80186a6:	3401      	adds	r4, #1
 80186a8:	428c      	cmp	r4, r1
 80186aa:	d3f3      	bcc.n	8018694 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80186ac:	9b02      	ldr	r3, [sp, #8]
 80186ae:	9905      	ldr	r1, [sp, #20]
 80186b0:	4610      	mov	r0, r2
 80186b2:	4798      	blx	r3
 80186b4:	2300      	movs	r3, #0
 80186b6:	e9c5 3300 	strd	r3, r3, [r5]
 80186ba:	60ab      	str	r3, [r5, #8]
 80186bc:	b007      	add	sp, #28
 80186be:	bd30      	pop	{r4, r5, pc}
 80186c0:	3401      	adds	r4, #1
 80186c2:	428c      	cmp	r4, r1
 80186c4:	d3e6      	bcc.n	8018694 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80186c6:	e7f1      	b.n	80186ac <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80186c8:	4770      	bx	lr
 80186ca:	bf00      	nop

080186cc <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 80186cc:	f7ff bfbc 	b.w	8018648 <std_msgs__msg__MultiArrayDimension__init>

080186d0 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 80186d0:	f7ff bfcc 	b.w	801866c <std_msgs__msg__MultiArrayDimension__fini>

080186d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80186d4:	4b04      	ldr	r3, [pc, #16]	@ (80186e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80186d6:	681a      	ldr	r2, [r3, #0]
 80186d8:	b10a      	cbz	r2, 80186de <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 80186da:	4803      	ldr	r0, [pc, #12]	@ (80186e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80186dc:	4770      	bx	lr
 80186de:	4a03      	ldr	r2, [pc, #12]	@ (80186ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 80186e0:	4801      	ldr	r0, [pc, #4]	@ (80186e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80186e2:	6812      	ldr	r2, [r2, #0]
 80186e4:	601a      	str	r2, [r3, #0]
 80186e6:	4770      	bx	lr
 80186e8:	20000c14 	.word	0x20000c14
 80186ec:	2000052c 	.word	0x2000052c

080186f0 <_MultiArrayDimension__cdr_serialize>:
 80186f0:	b1d0      	cbz	r0, 8018728 <_MultiArrayDimension__cdr_serialize+0x38>
 80186f2:	b570      	push	{r4, r5, r6, lr}
 80186f4:	6806      	ldr	r6, [r0, #0]
 80186f6:	460d      	mov	r5, r1
 80186f8:	4604      	mov	r4, r0
 80186fa:	b196      	cbz	r6, 8018722 <_MultiArrayDimension__cdr_serialize+0x32>
 80186fc:	4630      	mov	r0, r6
 80186fe:	f7e7 fd99 	bl	8000234 <strlen>
 8018702:	1c42      	adds	r2, r0, #1
 8018704:	4631      	mov	r1, r6
 8018706:	6060      	str	r0, [r4, #4]
 8018708:	4628      	mov	r0, r5
 801870a:	f7f8 f90d 	bl	8010928 <ucdr_serialize_sequence_char>
 801870e:	68e1      	ldr	r1, [r4, #12]
 8018710:	4628      	mov	r0, r5
 8018712:	f7f3 f873 	bl	800b7fc <ucdr_serialize_uint32_t>
 8018716:	6921      	ldr	r1, [r4, #16]
 8018718:	4628      	mov	r0, r5
 801871a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801871e:	f7f3 b86d 	b.w	800b7fc <ucdr_serialize_uint32_t>
 8018722:	4632      	mov	r2, r6
 8018724:	4630      	mov	r0, r6
 8018726:	e7ed      	b.n	8018704 <_MultiArrayDimension__cdr_serialize+0x14>
 8018728:	4770      	bx	lr
 801872a:	bf00      	nop

0801872c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801872c:	b570      	push	{r4, r5, r6, lr}
 801872e:	4604      	mov	r4, r0
 8018730:	b1b0      	cbz	r0, 8018760 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8018732:	460d      	mov	r5, r1
 8018734:	4628      	mov	r0, r5
 8018736:	2104      	movs	r1, #4
 8018738:	f7f4 f930 	bl	800c99c <ucdr_alignment>
 801873c:	6866      	ldr	r6, [r4, #4]
 801873e:	1d6b      	adds	r3, r5, #5
 8018740:	4433      	add	r3, r6
 8018742:	181e      	adds	r6, r3, r0
 8018744:	2104      	movs	r1, #4
 8018746:	4630      	mov	r0, r6
 8018748:	f7f4 f928 	bl	800c99c <ucdr_alignment>
 801874c:	1d04      	adds	r4, r0, #4
 801874e:	4434      	add	r4, r6
 8018750:	2104      	movs	r1, #4
 8018752:	4620      	mov	r0, r4
 8018754:	f7f4 f922 	bl	800c99c <ucdr_alignment>
 8018758:	f1c5 0504 	rsb	r5, r5, #4
 801875c:	4428      	add	r0, r5
 801875e:	4420      	add	r0, r4
 8018760:	bd70      	pop	{r4, r5, r6, pc}
 8018762:	bf00      	nop

08018764 <_MultiArrayDimension__cdr_deserialize>:
 8018764:	b570      	push	{r4, r5, r6, lr}
 8018766:	460c      	mov	r4, r1
 8018768:	b082      	sub	sp, #8
 801876a:	b1d9      	cbz	r1, 80187a4 <_MultiArrayDimension__cdr_deserialize+0x40>
 801876c:	688e      	ldr	r6, [r1, #8]
 801876e:	6809      	ldr	r1, [r1, #0]
 8018770:	ab01      	add	r3, sp, #4
 8018772:	4632      	mov	r2, r6
 8018774:	4605      	mov	r5, r0
 8018776:	f7f8 f8e9 	bl	801094c <ucdr_deserialize_sequence_char>
 801877a:	9b01      	ldr	r3, [sp, #4]
 801877c:	b970      	cbnz	r0, 801879c <_MultiArrayDimension__cdr_deserialize+0x38>
 801877e:	429e      	cmp	r6, r3
 8018780:	d313      	bcc.n	80187aa <_MultiArrayDimension__cdr_deserialize+0x46>
 8018782:	f104 010c 	add.w	r1, r4, #12
 8018786:	4628      	mov	r0, r5
 8018788:	f7f3 f968 	bl	800ba5c <ucdr_deserialize_uint32_t>
 801878c:	f104 0110 	add.w	r1, r4, #16
 8018790:	4628      	mov	r0, r5
 8018792:	b002      	add	sp, #8
 8018794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018798:	f7f3 b960 	b.w	800ba5c <ucdr_deserialize_uint32_t>
 801879c:	b103      	cbz	r3, 80187a0 <_MultiArrayDimension__cdr_deserialize+0x3c>
 801879e:	3b01      	subs	r3, #1
 80187a0:	6063      	str	r3, [r4, #4]
 80187a2:	e7ee      	b.n	8018782 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80187a4:	4608      	mov	r0, r1
 80187a6:	b002      	add	sp, #8
 80187a8:	bd70      	pop	{r4, r5, r6, pc}
 80187aa:	2101      	movs	r1, #1
 80187ac:	75a8      	strb	r0, [r5, #22]
 80187ae:	7569      	strb	r1, [r5, #21]
 80187b0:	6060      	str	r0, [r4, #4]
 80187b2:	4628      	mov	r0, r5
 80187b4:	f7f4 f908 	bl	800c9c8 <ucdr_align_to>
 80187b8:	9901      	ldr	r1, [sp, #4]
 80187ba:	4628      	mov	r0, r5
 80187bc:	f7f4 f93a 	bl	800ca34 <ucdr_advance_buffer>
 80187c0:	e7df      	b.n	8018782 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80187c2:	bf00      	nop

080187c4 <_MultiArrayDimension__max_serialized_size>:
 80187c4:	b510      	push	{r4, lr}
 80187c6:	2104      	movs	r1, #4
 80187c8:	2000      	movs	r0, #0
 80187ca:	f7f4 f8e7 	bl	800c99c <ucdr_alignment>
 80187ce:	1d04      	adds	r4, r0, #4
 80187d0:	2104      	movs	r1, #4
 80187d2:	4620      	mov	r0, r4
 80187d4:	f7f4 f8e2 	bl	800c99c <ucdr_alignment>
 80187d8:	3004      	adds	r0, #4
 80187da:	4420      	add	r0, r4
 80187dc:	bd10      	pop	{r4, pc}
 80187de:	bf00      	nop

080187e0 <_MultiArrayDimension__get_serialized_size>:
 80187e0:	b510      	push	{r4, lr}
 80187e2:	4604      	mov	r4, r0
 80187e4:	b190      	cbz	r0, 801880c <_MultiArrayDimension__get_serialized_size+0x2c>
 80187e6:	2104      	movs	r1, #4
 80187e8:	2000      	movs	r0, #0
 80187ea:	f7f4 f8d7 	bl	800c99c <ucdr_alignment>
 80187ee:	6863      	ldr	r3, [r4, #4]
 80187f0:	3305      	adds	r3, #5
 80187f2:	181c      	adds	r4, r3, r0
 80187f4:	2104      	movs	r1, #4
 80187f6:	4620      	mov	r0, r4
 80187f8:	f7f4 f8d0 	bl	800c99c <ucdr_alignment>
 80187fc:	3004      	adds	r0, #4
 80187fe:	4404      	add	r4, r0
 8018800:	2104      	movs	r1, #4
 8018802:	4620      	mov	r0, r4
 8018804:	f7f4 f8ca 	bl	800c99c <ucdr_alignment>
 8018808:	3004      	adds	r0, #4
 801880a:	4420      	add	r0, r4
 801880c:	bd10      	pop	{r4, pc}
 801880e:	bf00      	nop

08018810 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018810:	4800      	ldr	r0, [pc, #0]	@ (8018814 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8018812:	4770      	bx	lr
 8018814:	20000c20 	.word	0x20000c20

08018818 <builtin_interfaces__msg__Time__init>:
 8018818:	3800      	subs	r0, #0
 801881a:	bf18      	it	ne
 801881c:	2001      	movne	r0, #1
 801881e:	4770      	bx	lr

08018820 <builtin_interfaces__msg__Time__fini>:
 8018820:	4770      	bx	lr
 8018822:	bf00      	nop
 8018824:	0000      	movs	r0, r0
	...

08018828 <geometry_msgs__msg__Quaternion__init>:
 8018828:	b160      	cbz	r0, 8018844 <geometry_msgs__msg__Quaternion__init+0x1c>
 801882a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8018848 <geometry_msgs__msg__Quaternion__init+0x20>
 801882e:	2200      	movs	r2, #0
 8018830:	2300      	movs	r3, #0
 8018832:	e9c0 2300 	strd	r2, r3, [r0]
 8018836:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801883a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801883e:	ed80 7b06 	vstr	d7, [r0, #24]
 8018842:	2001      	movs	r0, #1
 8018844:	4770      	bx	lr
 8018846:	bf00      	nop
 8018848:	00000000 	.word	0x00000000
 801884c:	3ff00000 	.word	0x3ff00000

08018850 <geometry_msgs__msg__Quaternion__fini>:
 8018850:	4770      	bx	lr
 8018852:	bf00      	nop

08018854 <ucdr_serialize_string>:
 8018854:	b510      	push	{r4, lr}
 8018856:	b082      	sub	sp, #8
 8018858:	4604      	mov	r4, r0
 801885a:	4608      	mov	r0, r1
 801885c:	9101      	str	r1, [sp, #4]
 801885e:	f7e7 fce9 	bl	8000234 <strlen>
 8018862:	9901      	ldr	r1, [sp, #4]
 8018864:	1c42      	adds	r2, r0, #1
 8018866:	4620      	mov	r0, r4
 8018868:	b002      	add	sp, #8
 801886a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801886e:	f7f8 b85b 	b.w	8010928 <ucdr_serialize_sequence_char>
 8018872:	bf00      	nop

08018874 <ucdr_deserialize_string>:
 8018874:	b500      	push	{lr}
 8018876:	b083      	sub	sp, #12
 8018878:	ab01      	add	r3, sp, #4
 801887a:	f7f8 f867 	bl	801094c <ucdr_deserialize_sequence_char>
 801887e:	b003      	add	sp, #12
 8018880:	f85d fb04 	ldr.w	pc, [sp], #4

08018884 <uxr_init_input_best_effort_stream>:
 8018884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018888:	8003      	strh	r3, [r0, #0]
 801888a:	4770      	bx	lr

0801888c <uxr_reset_input_best_effort_stream>:
 801888c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018890:	8003      	strh	r3, [r0, #0]
 8018892:	4770      	bx	lr

08018894 <uxr_receive_best_effort_message>:
 8018894:	b538      	push	{r3, r4, r5, lr}
 8018896:	4604      	mov	r4, r0
 8018898:	8800      	ldrh	r0, [r0, #0]
 801889a:	460d      	mov	r5, r1
 801889c:	f000 fd42 	bl	8019324 <uxr_seq_num_cmp>
 80188a0:	4603      	mov	r3, r0
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80188a8:	bfb8      	it	lt
 80188aa:	8025      	strhlt	r5, [r4, #0]
 80188ac:	bd38      	pop	{r3, r4, r5, pc}
 80188ae:	bf00      	nop

080188b0 <on_full_input_buffer>:
 80188b0:	b570      	push	{r4, r5, r6, lr}
 80188b2:	4605      	mov	r5, r0
 80188b4:	460c      	mov	r4, r1
 80188b6:	682b      	ldr	r3, [r5, #0]
 80188b8:	6809      	ldr	r1, [r1, #0]
 80188ba:	8920      	ldrh	r0, [r4, #8]
 80188bc:	6862      	ldr	r2, [r4, #4]
 80188be:	fbb2 f2f0 	udiv	r2, r2, r0
 80188c2:	eba3 0c01 	sub.w	ip, r3, r1
 80188c6:	fbbc fcf2 	udiv	ip, ip, r2
 80188ca:	f10c 0c01 	add.w	ip, ip, #1
 80188ce:	fa1f f38c 	uxth.w	r3, ip
 80188d2:	fbb3 f6f0 	udiv	r6, r3, r0
 80188d6:	fb00 3316 	mls	r3, r0, r6, r3
 80188da:	b29b      	uxth	r3, r3
 80188dc:	fb02 f303 	mul.w	r3, r2, r3
 80188e0:	1d18      	adds	r0, r3, #4
 80188e2:	4408      	add	r0, r1
 80188e4:	7d26      	ldrb	r6, [r4, #20]
 80188e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80188ea:	b116      	cbz	r6, 80188f2 <on_full_input_buffer+0x42>
 80188ec:	2600      	movs	r6, #0
 80188ee:	f840 6c04 	str.w	r6, [r0, #-4]
 80188f2:	2a03      	cmp	r2, #3
 80188f4:	d801      	bhi.n	80188fa <on_full_input_buffer+0x4a>
 80188f6:	2001      	movs	r0, #1
 80188f8:	bd70      	pop	{r4, r5, r6, pc}
 80188fa:	3308      	adds	r3, #8
 80188fc:	4419      	add	r1, r3
 80188fe:	4628      	mov	r0, r5
 8018900:	692b      	ldr	r3, [r5, #16]
 8018902:	3a04      	subs	r2, #4
 8018904:	f7f4 f83e 	bl	800c984 <ucdr_init_buffer_origin>
 8018908:	4628      	mov	r0, r5
 801890a:	4903      	ldr	r1, [pc, #12]	@ (8018918 <on_full_input_buffer+0x68>)
 801890c:	4622      	mov	r2, r4
 801890e:	f7f4 f815 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 8018912:	2000      	movs	r0, #0
 8018914:	bd70      	pop	{r4, r5, r6, pc}
 8018916:	bf00      	nop
 8018918:	080188b1 	.word	0x080188b1

0801891c <uxr_init_input_reliable_stream>:
 801891c:	b500      	push	{lr}
 801891e:	e9c0 1200 	strd	r1, r2, [r0]
 8018922:	f04f 0e00 	mov.w	lr, #0
 8018926:	9a01      	ldr	r2, [sp, #4]
 8018928:	8103      	strh	r3, [r0, #8]
 801892a:	6102      	str	r2, [r0, #16]
 801892c:	f880 e014 	strb.w	lr, [r0, #20]
 8018930:	b1d3      	cbz	r3, 8018968 <uxr_init_input_reliable_stream+0x4c>
 8018932:	f8c1 e000 	str.w	lr, [r1]
 8018936:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801893a:	f1bc 0f01 	cmp.w	ip, #1
 801893e:	d913      	bls.n	8018968 <uxr_init_input_reliable_stream+0x4c>
 8018940:	2301      	movs	r3, #1
 8018942:	fbb3 f1fc 	udiv	r1, r3, ip
 8018946:	fb0c 3111 	mls	r1, ip, r1, r3
 801894a:	b289      	uxth	r1, r1
 801894c:	6842      	ldr	r2, [r0, #4]
 801894e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018952:	fb01 f202 	mul.w	r2, r1, r2
 8018956:	6801      	ldr	r1, [r0, #0]
 8018958:	f841 e002 	str.w	lr, [r1, r2]
 801895c:	3301      	adds	r3, #1
 801895e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018962:	b29b      	uxth	r3, r3
 8018964:	459c      	cmp	ip, r3
 8018966:	d8ec      	bhi.n	8018942 <uxr_init_input_reliable_stream+0x26>
 8018968:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801896c:	60c3      	str	r3, [r0, #12]
 801896e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018972:	bf00      	nop

08018974 <uxr_reset_input_reliable_stream>:
 8018974:	8901      	ldrh	r1, [r0, #8]
 8018976:	b1e9      	cbz	r1, 80189b4 <uxr_reset_input_reliable_stream+0x40>
 8018978:	f04f 0c00 	mov.w	ip, #0
 801897c:	b500      	push	{lr}
 801897e:	4663      	mov	r3, ip
 8018980:	46e6      	mov	lr, ip
 8018982:	fbb3 f2f1 	udiv	r2, r3, r1
 8018986:	fb01 3312 	mls	r3, r1, r2, r3
 801898a:	b29b      	uxth	r3, r3
 801898c:	6842      	ldr	r2, [r0, #4]
 801898e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018992:	fb02 f303 	mul.w	r3, r2, r3
 8018996:	6802      	ldr	r2, [r0, #0]
 8018998:	f842 e003 	str.w	lr, [r2, r3]
 801899c:	f10c 0c01 	add.w	ip, ip, #1
 80189a0:	8901      	ldrh	r1, [r0, #8]
 80189a2:	fa1f f38c 	uxth.w	r3, ip
 80189a6:	4299      	cmp	r1, r3
 80189a8:	d8eb      	bhi.n	8018982 <uxr_reset_input_reliable_stream+0xe>
 80189aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189ae:	60c3      	str	r3, [r0, #12]
 80189b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80189b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189b8:	60c3      	str	r3, [r0, #12]
 80189ba:	4770      	bx	lr

080189bc <uxr_receive_reliable_message>:
 80189bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189c0:	4604      	mov	r4, r0
 80189c2:	460d      	mov	r5, r1
 80189c4:	8901      	ldrh	r1, [r0, #8]
 80189c6:	8980      	ldrh	r0, [r0, #12]
 80189c8:	4690      	mov	r8, r2
 80189ca:	461f      	mov	r7, r3
 80189cc:	f000 fca2 	bl	8019314 <uxr_seq_num_add>
 80189d0:	4629      	mov	r1, r5
 80189d2:	4606      	mov	r6, r0
 80189d4:	89a0      	ldrh	r0, [r4, #12]
 80189d6:	f000 fca5 	bl	8019324 <uxr_seq_num_cmp>
 80189da:	2800      	cmp	r0, #0
 80189dc:	db0a      	blt.n	80189f4 <uxr_receive_reliable_message+0x38>
 80189de:	2600      	movs	r6, #0
 80189e0:	89e0      	ldrh	r0, [r4, #14]
 80189e2:	4629      	mov	r1, r5
 80189e4:	f000 fc9e 	bl	8019324 <uxr_seq_num_cmp>
 80189e8:	2800      	cmp	r0, #0
 80189ea:	da00      	bge.n	80189ee <uxr_receive_reliable_message+0x32>
 80189ec:	81e5      	strh	r5, [r4, #14]
 80189ee:	4630      	mov	r0, r6
 80189f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189f4:	4630      	mov	r0, r6
 80189f6:	4629      	mov	r1, r5
 80189f8:	f000 fc94 	bl	8019324 <uxr_seq_num_cmp>
 80189fc:	2800      	cmp	r0, #0
 80189fe:	dbee      	blt.n	80189de <uxr_receive_reliable_message+0x22>
 8018a00:	6923      	ldr	r3, [r4, #16]
 8018a02:	4640      	mov	r0, r8
 8018a04:	4798      	blx	r3
 8018a06:	2101      	movs	r1, #1
 8018a08:	4681      	mov	r9, r0
 8018a0a:	89a0      	ldrh	r0, [r4, #12]
 8018a0c:	f000 fc82 	bl	8019314 <uxr_seq_num_add>
 8018a10:	f1b9 0f00 	cmp.w	r9, #0
 8018a14:	d101      	bne.n	8018a1a <uxr_receive_reliable_message+0x5e>
 8018a16:	4285      	cmp	r5, r0
 8018a18:	d047      	beq.n	8018aaa <uxr_receive_reliable_message+0xee>
 8018a1a:	8922      	ldrh	r2, [r4, #8]
 8018a1c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018a20:	fb02 5010 	mls	r0, r2, r0, r5
 8018a24:	b280      	uxth	r0, r0
 8018a26:	6863      	ldr	r3, [r4, #4]
 8018a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a2c:	fb00 f303 	mul.w	r3, r0, r3
 8018a30:	6820      	ldr	r0, [r4, #0]
 8018a32:	3304      	adds	r3, #4
 8018a34:	4418      	add	r0, r3
 8018a36:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d1cf      	bne.n	80189de <uxr_receive_reliable_message+0x22>
 8018a3e:	4641      	mov	r1, r8
 8018a40:	463a      	mov	r2, r7
 8018a42:	f001 fea6 	bl	801a792 <memcpy>
 8018a46:	8921      	ldrh	r1, [r4, #8]
 8018a48:	fbb5 f2f1 	udiv	r2, r5, r1
 8018a4c:	fb01 5212 	mls	r2, r1, r2, r5
 8018a50:	b292      	uxth	r2, r2
 8018a52:	6863      	ldr	r3, [r4, #4]
 8018a54:	fbb3 f3f1 	udiv	r3, r3, r1
 8018a58:	fb02 f303 	mul.w	r3, r2, r3
 8018a5c:	6822      	ldr	r2, [r4, #0]
 8018a5e:	50d7      	str	r7, [r2, r3]
 8018a60:	9a08      	ldr	r2, [sp, #32]
 8018a62:	2301      	movs	r3, #1
 8018a64:	7013      	strb	r3, [r2, #0]
 8018a66:	f1b9 0f00 	cmp.w	r9, #0
 8018a6a:	d0b8      	beq.n	80189de <uxr_receive_reliable_message+0x22>
 8018a6c:	89a6      	ldrh	r6, [r4, #12]
 8018a6e:	4630      	mov	r0, r6
 8018a70:	2101      	movs	r1, #1
 8018a72:	f000 fc4f 	bl	8019314 <uxr_seq_num_add>
 8018a76:	8922      	ldrh	r2, [r4, #8]
 8018a78:	6863      	ldr	r3, [r4, #4]
 8018a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a7e:	4606      	mov	r6, r0
 8018a80:	fbb0 f0f2 	udiv	r0, r0, r2
 8018a84:	fb02 6010 	mls	r0, r2, r0, r6
 8018a88:	b280      	uxth	r0, r0
 8018a8a:	fb00 f303 	mul.w	r3, r0, r3
 8018a8e:	6820      	ldr	r0, [r4, #0]
 8018a90:	3304      	adds	r3, #4
 8018a92:	4418      	add	r0, r3
 8018a94:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d0a0      	beq.n	80189de <uxr_receive_reliable_message+0x22>
 8018a9c:	6923      	ldr	r3, [r4, #16]
 8018a9e:	4798      	blx	r3
 8018aa0:	2802      	cmp	r0, #2
 8018aa2:	d008      	beq.n	8018ab6 <uxr_receive_reliable_message+0xfa>
 8018aa4:	2801      	cmp	r0, #1
 8018aa6:	d0e2      	beq.n	8018a6e <uxr_receive_reliable_message+0xb2>
 8018aa8:	e799      	b.n	80189de <uxr_receive_reliable_message+0x22>
 8018aaa:	9b08      	ldr	r3, [sp, #32]
 8018aac:	81a5      	strh	r5, [r4, #12]
 8018aae:	2601      	movs	r6, #1
 8018ab0:	f883 9000 	strb.w	r9, [r3]
 8018ab4:	e794      	b.n	80189e0 <uxr_receive_reliable_message+0x24>
 8018ab6:	2601      	movs	r6, #1
 8018ab8:	e792      	b.n	80189e0 <uxr_receive_reliable_message+0x24>
 8018aba:	bf00      	nop

08018abc <uxr_next_input_reliable_buffer_available>:
 8018abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ac0:	4604      	mov	r4, r0
 8018ac2:	460f      	mov	r7, r1
 8018ac4:	8980      	ldrh	r0, [r0, #12]
 8018ac6:	2101      	movs	r1, #1
 8018ac8:	4690      	mov	r8, r2
 8018aca:	f000 fc23 	bl	8019314 <uxr_seq_num_add>
 8018ace:	8922      	ldrh	r2, [r4, #8]
 8018ad0:	fbb0 f6f2 	udiv	r6, r0, r2
 8018ad4:	fb02 0616 	mls	r6, r2, r6, r0
 8018ad8:	b2b6      	uxth	r6, r6
 8018ada:	6863      	ldr	r3, [r4, #4]
 8018adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ae0:	fb06 f303 	mul.w	r3, r6, r3
 8018ae4:	6826      	ldr	r6, [r4, #0]
 8018ae6:	3304      	adds	r3, #4
 8018ae8:	441e      	add	r6, r3
 8018aea:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8018aee:	f1b9 0f00 	cmp.w	r9, #0
 8018af2:	d023      	beq.n	8018b3c <uxr_next_input_reliable_buffer_available+0x80>
 8018af4:	6923      	ldr	r3, [r4, #16]
 8018af6:	4605      	mov	r5, r0
 8018af8:	4630      	mov	r0, r6
 8018afa:	4798      	blx	r3
 8018afc:	4682      	mov	sl, r0
 8018afe:	b300      	cbz	r0, 8018b42 <uxr_next_input_reliable_buffer_available+0x86>
 8018b00:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018b04:	2101      	movs	r1, #1
 8018b06:	4650      	mov	r0, sl
 8018b08:	f000 fc04 	bl	8019314 <uxr_seq_num_add>
 8018b0c:	8921      	ldrh	r1, [r4, #8]
 8018b0e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018b12:	4682      	mov	sl, r0
 8018b14:	fb01 0212 	mls	r2, r1, r2, r0
 8018b18:	e9d4 0300 	ldrd	r0, r3, [r4]
 8018b1c:	b292      	uxth	r2, r2
 8018b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b22:	fb02 f303 	mul.w	r3, r2, r3
 8018b26:	3304      	adds	r3, #4
 8018b28:	4418      	add	r0, r3
 8018b2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018b2e:	b12b      	cbz	r3, 8018b3c <uxr_next_input_reliable_buffer_available+0x80>
 8018b30:	6923      	ldr	r3, [r4, #16]
 8018b32:	4798      	blx	r3
 8018b34:	2802      	cmp	r0, #2
 8018b36:	d01b      	beq.n	8018b70 <uxr_next_input_reliable_buffer_available+0xb4>
 8018b38:	2801      	cmp	r0, #1
 8018b3a:	d0e3      	beq.n	8018b04 <uxr_next_input_reliable_buffer_available+0x48>
 8018b3c:	2000      	movs	r0, #0
 8018b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b42:	464a      	mov	r2, r9
 8018b44:	4631      	mov	r1, r6
 8018b46:	4638      	mov	r0, r7
 8018b48:	f7f3 ff24 	bl	800c994 <ucdr_init_buffer>
 8018b4c:	8921      	ldrh	r1, [r4, #8]
 8018b4e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018b52:	fb01 5212 	mls	r2, r1, r2, r5
 8018b56:	b292      	uxth	r2, r2
 8018b58:	6863      	ldr	r3, [r4, #4]
 8018b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b5e:	fb02 f303 	mul.w	r3, r2, r3
 8018b62:	6822      	ldr	r2, [r4, #0]
 8018b64:	f842 a003 	str.w	sl, [r2, r3]
 8018b68:	2001      	movs	r0, #1
 8018b6a:	81a5      	strh	r5, [r4, #12]
 8018b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b70:	8920      	ldrh	r0, [r4, #8]
 8018b72:	fbb5 f3f0 	udiv	r3, r5, r0
 8018b76:	fb00 5513 	mls	r5, r0, r3, r5
 8018b7a:	b2ad      	uxth	r5, r5
 8018b7c:	6863      	ldr	r3, [r4, #4]
 8018b7e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018b82:	fb03 f505 	mul.w	r5, r3, r5
 8018b86:	6823      	ldr	r3, [r4, #0]
 8018b88:	2000      	movs	r0, #0
 8018b8a:	5158      	str	r0, [r3, r5]
 8018b8c:	eb06 0108 	add.w	r1, r6, r8
 8018b90:	eba9 0208 	sub.w	r2, r9, r8
 8018b94:	4638      	mov	r0, r7
 8018b96:	f7f3 fefd 	bl	800c994 <ucdr_init_buffer>
 8018b9a:	4638      	mov	r0, r7
 8018b9c:	4903      	ldr	r1, [pc, #12]	@ (8018bac <uxr_next_input_reliable_buffer_available+0xf0>)
 8018b9e:	4622      	mov	r2, r4
 8018ba0:	f7f3 fecc 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 8018ba4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018ba8:	2001      	movs	r0, #1
 8018baa:	e7c8      	b.n	8018b3e <uxr_next_input_reliable_buffer_available+0x82>
 8018bac:	080188b1 	.word	0x080188b1

08018bb0 <uxr_process_heartbeat>:
 8018bb0:	b538      	push	{r3, r4, r5, lr}
 8018bb2:	4611      	mov	r1, r2
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	89c0      	ldrh	r0, [r0, #14]
 8018bb8:	4615      	mov	r5, r2
 8018bba:	f000 fbb3 	bl	8019324 <uxr_seq_num_cmp>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	bfb8      	it	lt
 8018bc2:	81e5      	strhlt	r5, [r4, #14]
 8018bc4:	bd38      	pop	{r3, r4, r5, pc}
 8018bc6:	bf00      	nop

08018bc8 <uxr_compute_acknack>:
 8018bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bcc:	8903      	ldrh	r3, [r0, #8]
 8018bce:	8985      	ldrh	r5, [r0, #12]
 8018bd0:	4604      	mov	r4, r0
 8018bd2:	460e      	mov	r6, r1
 8018bd4:	b1d3      	cbz	r3, 8018c0c <uxr_compute_acknack+0x44>
 8018bd6:	4628      	mov	r0, r5
 8018bd8:	2701      	movs	r7, #1
 8018bda:	e003      	b.n	8018be4 <uxr_compute_acknack+0x1c>
 8018bdc:	4567      	cmp	r7, ip
 8018bde:	d215      	bcs.n	8018c0c <uxr_compute_acknack+0x44>
 8018be0:	89a0      	ldrh	r0, [r4, #12]
 8018be2:	3701      	adds	r7, #1
 8018be4:	b2b9      	uxth	r1, r7
 8018be6:	f000 fb95 	bl	8019314 <uxr_seq_num_add>
 8018bea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018bee:	fbb0 f3fc 	udiv	r3, r0, ip
 8018bf2:	fb0c 0313 	mls	r3, ip, r3, r0
 8018bf6:	b29a      	uxth	r2, r3
 8018bf8:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018bfc:	fbb3 f3fc 	udiv	r3, r3, ip
 8018c00:	fb02 f303 	mul.w	r3, r2, r3
 8018c04:	58cb      	ldr	r3, [r1, r3]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d1e8      	bne.n	8018bdc <uxr_compute_acknack+0x14>
 8018c0a:	4605      	mov	r5, r0
 8018c0c:	8035      	strh	r5, [r6, #0]
 8018c0e:	2101      	movs	r1, #1
 8018c10:	4628      	mov	r0, r5
 8018c12:	89e7      	ldrh	r7, [r4, #14]
 8018c14:	f000 fb82 	bl	801931c <uxr_seq_num_sub>
 8018c18:	4601      	mov	r1, r0
 8018c1a:	4638      	mov	r0, r7
 8018c1c:	f000 fb7e 	bl	801931c <uxr_seq_num_sub>
 8018c20:	4605      	mov	r5, r0
 8018c22:	b318      	cbz	r0, 8018c6c <uxr_compute_acknack+0xa4>
 8018c24:	f04f 0900 	mov.w	r9, #0
 8018c28:	464f      	mov	r7, r9
 8018c2a:	f04f 0801 	mov.w	r8, #1
 8018c2e:	fa1f f189 	uxth.w	r1, r9
 8018c32:	8830      	ldrh	r0, [r6, #0]
 8018c34:	f000 fb6e 	bl	8019314 <uxr_seq_num_add>
 8018c38:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c3c:	fbb0 f3fc 	udiv	r3, r0, ip
 8018c40:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018c44:	fb03 001c 	mls	r0, r3, ip, r0
 8018c48:	b283      	uxth	r3, r0
 8018c4a:	fbb2 f2fc 	udiv	r2, r2, ip
 8018c4e:	fb02 f303 	mul.w	r3, r2, r3
 8018c52:	fa08 f209 	lsl.w	r2, r8, r9
 8018c56:	58cb      	ldr	r3, [r1, r3]
 8018c58:	f109 0901 	add.w	r9, r9, #1
 8018c5c:	b90b      	cbnz	r3, 8018c62 <uxr_compute_acknack+0x9a>
 8018c5e:	4317      	orrs	r7, r2
 8018c60:	b2bf      	uxth	r7, r7
 8018c62:	454d      	cmp	r5, r9
 8018c64:	d1e3      	bne.n	8018c2e <uxr_compute_acknack+0x66>
 8018c66:	4638      	mov	r0, r7
 8018c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c6c:	4607      	mov	r7, r0
 8018c6e:	4638      	mov	r0, r7
 8018c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018c74 <uxr_init_output_best_effort_stream>:
 8018c74:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018c78:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018c7c:	6001      	str	r1, [r0, #0]
 8018c7e:	7303      	strb	r3, [r0, #12]
 8018c80:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018c84:	4770      	bx	lr
 8018c86:	bf00      	nop

08018c88 <uxr_reset_output_best_effort_stream>:
 8018c88:	7b02      	ldrb	r2, [r0, #12]
 8018c8a:	6042      	str	r2, [r0, #4]
 8018c8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018c90:	81c3      	strh	r3, [r0, #14]
 8018c92:	4770      	bx	lr

08018c94 <uxr_prepare_best_effort_buffer_to_write>:
 8018c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c96:	4604      	mov	r4, r0
 8018c98:	b083      	sub	sp, #12
 8018c9a:	6840      	ldr	r0, [r0, #4]
 8018c9c:	460d      	mov	r5, r1
 8018c9e:	4616      	mov	r6, r2
 8018ca0:	f7fa f980 	bl	8012fa4 <uxr_submessage_padding>
 8018ca4:	6863      	ldr	r3, [r4, #4]
 8018ca6:	4418      	add	r0, r3
 8018ca8:	68a3      	ldr	r3, [r4, #8]
 8018caa:	1942      	adds	r2, r0, r5
 8018cac:	4293      	cmp	r3, r2
 8018cae:	bf2c      	ite	cs
 8018cb0:	2701      	movcs	r7, #1
 8018cb2:	2700      	movcc	r7, #0
 8018cb4:	d202      	bcs.n	8018cbc <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018cb6:	4638      	mov	r0, r7
 8018cb8:	b003      	add	sp, #12
 8018cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cbc:	9000      	str	r0, [sp, #0]
 8018cbe:	6821      	ldr	r1, [r4, #0]
 8018cc0:	4630      	mov	r0, r6
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	f7f3 fe54 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8018cc8:	6861      	ldr	r1, [r4, #4]
 8018cca:	4638      	mov	r0, r7
 8018ccc:	4429      	add	r1, r5
 8018cce:	6061      	str	r1, [r4, #4]
 8018cd0:	b003      	add	sp, #12
 8018cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018cd4 <uxr_prepare_best_effort_buffer_to_send>:
 8018cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd8:	4604      	mov	r4, r0
 8018cda:	461d      	mov	r5, r3
 8018cdc:	6840      	ldr	r0, [r0, #4]
 8018cde:	7b23      	ldrb	r3, [r4, #12]
 8018ce0:	4298      	cmp	r0, r3
 8018ce2:	bf8c      	ite	hi
 8018ce4:	2601      	movhi	r6, #1
 8018ce6:	2600      	movls	r6, #0
 8018ce8:	d802      	bhi.n	8018cf0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018cea:	4630      	mov	r0, r6
 8018cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cf0:	4688      	mov	r8, r1
 8018cf2:	89e0      	ldrh	r0, [r4, #14]
 8018cf4:	2101      	movs	r1, #1
 8018cf6:	4617      	mov	r7, r2
 8018cf8:	f000 fb0c 	bl	8019314 <uxr_seq_num_add>
 8018cfc:	6823      	ldr	r3, [r4, #0]
 8018cfe:	81e0      	strh	r0, [r4, #14]
 8018d00:	8028      	strh	r0, [r5, #0]
 8018d02:	f8c8 3000 	str.w	r3, [r8]
 8018d06:	6863      	ldr	r3, [r4, #4]
 8018d08:	603b      	str	r3, [r7, #0]
 8018d0a:	7b23      	ldrb	r3, [r4, #12]
 8018d0c:	6063      	str	r3, [r4, #4]
 8018d0e:	4630      	mov	r0, r6
 8018d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d14 <on_full_output_buffer>:
 8018d14:	b538      	push	{r3, r4, r5, lr}
 8018d16:	6802      	ldr	r2, [r0, #0]
 8018d18:	460c      	mov	r4, r1
 8018d1a:	6809      	ldr	r1, [r1, #0]
 8018d1c:	8923      	ldrh	r3, [r4, #8]
 8018d1e:	eba2 0c01 	sub.w	ip, r2, r1
 8018d22:	6862      	ldr	r2, [r4, #4]
 8018d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8018d28:	fbbc fcf2 	udiv	ip, ip, r2
 8018d2c:	f10c 0c01 	add.w	ip, ip, #1
 8018d30:	fa1f fc8c 	uxth.w	ip, ip
 8018d34:	fbbc fef3 	udiv	lr, ip, r3
 8018d38:	fb03 c31e 	mls	r3, r3, lr, ip
 8018d3c:	b29b      	uxth	r3, r3
 8018d3e:	fb02 f303 	mul.w	r3, r2, r3
 8018d42:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018d46:	58ca      	ldr	r2, [r1, r3]
 8018d48:	4463      	add	r3, ip
 8018d4a:	eba2 020c 	sub.w	r2, r2, ip
 8018d4e:	3308      	adds	r3, #8
 8018d50:	4605      	mov	r5, r0
 8018d52:	4419      	add	r1, r3
 8018d54:	3a04      	subs	r2, #4
 8018d56:	6903      	ldr	r3, [r0, #16]
 8018d58:	f7f3 fe14 	bl	800c984 <ucdr_init_buffer_origin>
 8018d5c:	4628      	mov	r0, r5
 8018d5e:	4903      	ldr	r1, [pc, #12]	@ (8018d6c <on_full_output_buffer+0x58>)
 8018d60:	4622      	mov	r2, r4
 8018d62:	f7f3 fdeb 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 8018d66:	2000      	movs	r0, #0
 8018d68:	bd38      	pop	{r3, r4, r5, pc}
 8018d6a:	bf00      	nop
 8018d6c:	08018d15 	.word	0x08018d15

08018d70 <uxr_init_output_reliable_stream>:
 8018d70:	b410      	push	{r4}
 8018d72:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018d76:	8103      	strh	r3, [r0, #8]
 8018d78:	e9c0 1200 	strd	r1, r2, [r0]
 8018d7c:	f880 c00c 	strb.w	ip, [r0, #12]
 8018d80:	b1d3      	cbz	r3, 8018db8 <uxr_init_output_reliable_stream+0x48>
 8018d82:	f8c1 c000 	str.w	ip, [r1]
 8018d86:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018d8a:	f1bc 0f01 	cmp.w	ip, #1
 8018d8e:	d913      	bls.n	8018db8 <uxr_init_output_reliable_stream+0x48>
 8018d90:	2301      	movs	r3, #1
 8018d92:	fbb3 f1fc 	udiv	r1, r3, ip
 8018d96:	fb0c 3111 	mls	r1, ip, r1, r3
 8018d9a:	b289      	uxth	r1, r1
 8018d9c:	6842      	ldr	r2, [r0, #4]
 8018d9e:	6804      	ldr	r4, [r0, #0]
 8018da0:	fbb2 f2fc 	udiv	r2, r2, ip
 8018da4:	fb01 f202 	mul.w	r2, r1, r2
 8018da8:	7b01      	ldrb	r1, [r0, #12]
 8018daa:	50a1      	str	r1, [r4, r2]
 8018dac:	3301      	adds	r3, #1
 8018dae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018db2:	b29b      	uxth	r3, r3
 8018db4:	459c      	cmp	ip, r3
 8018db6:	d8ec      	bhi.n	8018d92 <uxr_init_output_reliable_stream+0x22>
 8018db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018dbc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018dc0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018dc4:	4905      	ldr	r1, [pc, #20]	@ (8018ddc <uxr_init_output_reliable_stream+0x6c>)
 8018dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dca:	f8c0 100e 	str.w	r1, [r0, #14]
 8018dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018dd2:	2300      	movs	r3, #0
 8018dd4:	8242      	strh	r2, [r0, #18]
 8018dd6:	8403      	strh	r3, [r0, #32]
 8018dd8:	4770      	bx	lr
 8018dda:	bf00      	nop
 8018ddc:	ffff0000 	.word	0xffff0000

08018de0 <uxr_reset_output_reliable_stream>:
 8018de0:	8901      	ldrh	r1, [r0, #8]
 8018de2:	b1b1      	cbz	r1, 8018e12 <uxr_reset_output_reliable_stream+0x32>
 8018de4:	f04f 0c00 	mov.w	ip, #0
 8018de8:	4663      	mov	r3, ip
 8018dea:	fbb3 f2f1 	udiv	r2, r3, r1
 8018dee:	fb01 3312 	mls	r3, r1, r2, r3
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	6842      	ldr	r2, [r0, #4]
 8018df6:	fbb2 f2f1 	udiv	r2, r2, r1
 8018dfa:	6801      	ldr	r1, [r0, #0]
 8018dfc:	fb02 f303 	mul.w	r3, r2, r3
 8018e00:	7b02      	ldrb	r2, [r0, #12]
 8018e02:	50ca      	str	r2, [r1, r3]
 8018e04:	f10c 0c01 	add.w	ip, ip, #1
 8018e08:	8901      	ldrh	r1, [r0, #8]
 8018e0a:	fa1f f38c 	uxth.w	r3, ip
 8018e0e:	4299      	cmp	r1, r3
 8018e10:	d8eb      	bhi.n	8018dea <uxr_reset_output_reliable_stream+0xa>
 8018e12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e16:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018e1a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018e1e:	4904      	ldr	r1, [pc, #16]	@ (8018e30 <uxr_reset_output_reliable_stream+0x50>)
 8018e20:	f8c0 100e 	str.w	r1, [r0, #14]
 8018e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e28:	2300      	movs	r3, #0
 8018e2a:	8242      	strh	r2, [r0, #18]
 8018e2c:	8403      	strh	r3, [r0, #32]
 8018e2e:	4770      	bx	lr
 8018e30:	ffff0000 	.word	0xffff0000

08018e34 <uxr_prepare_reliable_buffer_to_write>:
 8018e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e38:	4604      	mov	r4, r0
 8018e3a:	b091      	sub	sp, #68	@ 0x44
 8018e3c:	8900      	ldrh	r0, [r0, #8]
 8018e3e:	89e6      	ldrh	r6, [r4, #14]
 8018e40:	6823      	ldr	r3, [r4, #0]
 8018e42:	9204      	str	r2, [sp, #16]
 8018e44:	fbb6 f2f0 	udiv	r2, r6, r0
 8018e48:	fb00 6212 	mls	r2, r0, r2, r6
 8018e4c:	b292      	uxth	r2, r2
 8018e4e:	6865      	ldr	r5, [r4, #4]
 8018e50:	fbb5 f5f0 	udiv	r5, r5, r0
 8018e54:	fb05 3202 	mla	r2, r5, r2, r3
 8018e58:	3204      	adds	r2, #4
 8018e5a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8018e5e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018e62:	9203      	str	r2, [sp, #12]
 8018e64:	468b      	mov	fp, r1
 8018e66:	1f2f      	subs	r7, r5, #4
 8018e68:	2800      	cmp	r0, #0
 8018e6a:	f000 814c 	beq.w	8019106 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8018e6e:	f04f 0c00 	mov.w	ip, #0
 8018e72:	46e2      	mov	sl, ip
 8018e74:	4661      	mov	r1, ip
 8018e76:	fbb1 f2f0 	udiv	r2, r1, r0
 8018e7a:	fb00 1212 	mls	r2, r0, r2, r1
 8018e7e:	b292      	uxth	r2, r2
 8018e80:	fb05 f202 	mul.w	r2, r5, r2
 8018e84:	f10c 0c01 	add.w	ip, ip, #1
 8018e88:	589a      	ldr	r2, [r3, r2]
 8018e8a:	454a      	cmp	r2, r9
 8018e8c:	bf08      	it	eq
 8018e8e:	f10a 0a01 	addeq.w	sl, sl, #1
 8018e92:	fa1f f18c 	uxth.w	r1, ip
 8018e96:	bf08      	it	eq
 8018e98:	fa1f fa8a 	uxtheq.w	sl, sl
 8018e9c:	4281      	cmp	r1, r0
 8018e9e:	d3ea      	bcc.n	8018e76 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018ea0:	4640      	mov	r0, r8
 8018ea2:	2104      	movs	r1, #4
 8018ea4:	f8cd a014 	str.w	sl, [sp, #20]
 8018ea8:	f7f3 fd78 	bl	800c99c <ucdr_alignment>
 8018eac:	4480      	add	r8, r0
 8018eae:	eb08 020b 	add.w	r2, r8, fp
 8018eb2:	42ba      	cmp	r2, r7
 8018eb4:	f240 80cd 	bls.w	8019052 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018eb8:	7b22      	ldrb	r2, [r4, #12]
 8018eba:	445a      	add	r2, fp
 8018ebc:	42ba      	cmp	r2, r7
 8018ebe:	f240 80b5 	bls.w	801902c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018ec2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018ec6:	33fc      	adds	r3, #252	@ 0xfc
 8018ec8:	b2ba      	uxth	r2, r7
 8018eca:	4413      	add	r3, r2
 8018ecc:	b29b      	uxth	r3, r3
 8018ece:	fb0a f903 	mul.w	r9, sl, r3
 8018ed2:	45d9      	cmp	r9, fp
 8018ed4:	9305      	str	r3, [sp, #20]
 8018ed6:	9306      	str	r3, [sp, #24]
 8018ed8:	f0c0 80b7 	bcc.w	801904a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018edc:	f108 0304 	add.w	r3, r8, #4
 8018ee0:	42bb      	cmp	r3, r7
 8018ee2:	f080 80db 	bcs.w	801909c <uxr_prepare_reliable_buffer_to_write+0x268>
 8018ee6:	f1a2 0904 	sub.w	r9, r2, #4
 8018eea:	eba9 0908 	sub.w	r9, r9, r8
 8018eee:	9b05      	ldr	r3, [sp, #20]
 8018ef0:	fa1f f989 	uxth.w	r9, r9
 8018ef4:	ebab 0b09 	sub.w	fp, fp, r9
 8018ef8:	fbbb f2f3 	udiv	r2, fp, r3
 8018efc:	fb03 b312 	mls	r3, r3, r2, fp
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	f000 80c8 	beq.w	8019096 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018f06:	3201      	adds	r2, #1
 8018f08:	b292      	uxth	r2, r2
 8018f0a:	9306      	str	r3, [sp, #24]
 8018f0c:	4552      	cmp	r2, sl
 8018f0e:	f200 809c 	bhi.w	801904a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018f12:	f10d 0b20 	add.w	fp, sp, #32
 8018f16:	2a00      	cmp	r2, #0
 8018f18:	d042      	beq.n	8018fa0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8018f1a:	f8cd 801c 	str.w	r8, [sp, #28]
 8018f1e:	f04f 0a00 	mov.w	sl, #0
 8018f22:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018f26:	9505      	str	r5, [sp, #20]
 8018f28:	f10d 0b20 	add.w	fp, sp, #32
 8018f2c:	4615      	mov	r5, r2
 8018f2e:	e000      	b.n	8018f32 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018f30:	46c1      	mov	r9, r8
 8018f32:	8920      	ldrh	r0, [r4, #8]
 8018f34:	fbb6 f2f0 	udiv	r2, r6, r0
 8018f38:	fb00 6112 	mls	r1, r0, r2, r6
 8018f3c:	b28a      	uxth	r2, r1
 8018f3e:	6863      	ldr	r3, [r4, #4]
 8018f40:	fbb3 f1f0 	udiv	r1, r3, r0
 8018f44:	6823      	ldr	r3, [r4, #0]
 8018f46:	fb02 f101 	mul.w	r1, r2, r1
 8018f4a:	3104      	adds	r1, #4
 8018f4c:	4419      	add	r1, r3
 8018f4e:	4658      	mov	r0, fp
 8018f50:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018f54:	9200      	str	r2, [sp, #0]
 8018f56:	2300      	movs	r3, #0
 8018f58:	463a      	mov	r2, r7
 8018f5a:	f7f3 fd09 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8018f5e:	464a      	mov	r2, r9
 8018f60:	2300      	movs	r3, #0
 8018f62:	210d      	movs	r1, #13
 8018f64:	4658      	mov	r0, fp
 8018f66:	f7f9 ffdd 	bl	8012f24 <uxr_buffer_submessage_header>
 8018f6a:	8921      	ldrh	r1, [r4, #8]
 8018f6c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018f70:	fb01 6212 	mls	r2, r1, r2, r6
 8018f74:	b292      	uxth	r2, r2
 8018f76:	6863      	ldr	r3, [r4, #4]
 8018f78:	fbb3 f3f1 	udiv	r3, r3, r1
 8018f7c:	fb02 f303 	mul.w	r3, r2, r3
 8018f80:	6822      	ldr	r2, [r4, #0]
 8018f82:	4630      	mov	r0, r6
 8018f84:	50d7      	str	r7, [r2, r3]
 8018f86:	2101      	movs	r1, #1
 8018f88:	f000 f9c4 	bl	8019314 <uxr_seq_num_add>
 8018f8c:	f10a 0a01 	add.w	sl, sl, #1
 8018f90:	fa1f f38a 	uxth.w	r3, sl
 8018f94:	429d      	cmp	r5, r3
 8018f96:	4606      	mov	r6, r0
 8018f98:	d8ca      	bhi.n	8018f30 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8018f9a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018f9e:	9d05      	ldr	r5, [sp, #20]
 8018fa0:	8920      	ldrh	r0, [r4, #8]
 8018fa2:	fbb6 f3f0 	udiv	r3, r6, r0
 8018fa6:	fb00 6313 	mls	r3, r0, r3, r6
 8018faa:	b299      	uxth	r1, r3
 8018fac:	6863      	ldr	r3, [r4, #4]
 8018fae:	fbb3 f3f0 	udiv	r3, r3, r0
 8018fb2:	fb01 f303 	mul.w	r3, r1, r3
 8018fb6:	6821      	ldr	r1, [r4, #0]
 8018fb8:	3304      	adds	r3, #4
 8018fba:	4419      	add	r1, r3
 8018fbc:	463a      	mov	r2, r7
 8018fbe:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018fc2:	9000      	str	r0, [sp, #0]
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	4658      	mov	r0, fp
 8018fc8:	f7f3 fcd2 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8018fcc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018fd0:	4658      	mov	r0, fp
 8018fd2:	fa1f f289 	uxth.w	r2, r9
 8018fd6:	2302      	movs	r3, #2
 8018fd8:	210d      	movs	r1, #13
 8018fda:	f7f9 ffa3 	bl	8012f24 <uxr_buffer_submessage_header>
 8018fde:	9b03      	ldr	r3, [sp, #12]
 8018fe0:	8927      	ldrh	r7, [r4, #8]
 8018fe2:	7b20      	ldrb	r0, [r4, #12]
 8018fe4:	f108 0104 	add.w	r1, r8, #4
 8018fe8:	440b      	add	r3, r1
 8018fea:	4619      	mov	r1, r3
 8018fec:	fbb6 f3f7 	udiv	r3, r6, r7
 8018ff0:	fb07 6313 	mls	r3, r7, r3, r6
 8018ff4:	f1a5 0208 	sub.w	r2, r5, #8
 8018ff8:	b29d      	uxth	r5, r3
 8018ffa:	3004      	adds	r0, #4
 8018ffc:	6863      	ldr	r3, [r4, #4]
 8018ffe:	fbb3 f3f7 	udiv	r3, r3, r7
 8019002:	fb05 f303 	mul.w	r3, r5, r3
 8019006:	6825      	ldr	r5, [r4, #0]
 8019008:	4448      	add	r0, r9
 801900a:	50e8      	str	r0, [r5, r3]
 801900c:	9d04      	ldr	r5, [sp, #16]
 801900e:	eba2 0208 	sub.w	r2, r2, r8
 8019012:	4628      	mov	r0, r5
 8019014:	f7f3 fcbe 	bl	800c994 <ucdr_init_buffer>
 8019018:	4628      	mov	r0, r5
 801901a:	493c      	ldr	r1, [pc, #240]	@ (801910c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801901c:	4622      	mov	r2, r4
 801901e:	f7f3 fc8d 	bl	800c93c <ucdr_set_on_full_buffer_callback>
 8019022:	2001      	movs	r0, #1
 8019024:	81e6      	strh	r6, [r4, #14]
 8019026:	b011      	add	sp, #68	@ 0x44
 8019028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801902c:	2101      	movs	r1, #1
 801902e:	89e0      	ldrh	r0, [r4, #14]
 8019030:	f000 f970 	bl	8019314 <uxr_seq_num_add>
 8019034:	8921      	ldrh	r1, [r4, #8]
 8019036:	4605      	mov	r5, r0
 8019038:	8a60      	ldrh	r0, [r4, #18]
 801903a:	f000 f96b 	bl	8019314 <uxr_seq_num_add>
 801903e:	4601      	mov	r1, r0
 8019040:	4628      	mov	r0, r5
 8019042:	f000 f96f 	bl	8019324 <uxr_seq_num_cmp>
 8019046:	2800      	cmp	r0, #0
 8019048:	dd42      	ble.n	80190d0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801904a:	2000      	movs	r0, #0
 801904c:	b011      	add	sp, #68	@ 0x44
 801904e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019052:	8921      	ldrh	r1, [r4, #8]
 8019054:	8a60      	ldrh	r0, [r4, #18]
 8019056:	9205      	str	r2, [sp, #20]
 8019058:	f000 f95c 	bl	8019314 <uxr_seq_num_add>
 801905c:	4601      	mov	r1, r0
 801905e:	4630      	mov	r0, r6
 8019060:	f000 f960 	bl	8019324 <uxr_seq_num_cmp>
 8019064:	2800      	cmp	r0, #0
 8019066:	9a05      	ldr	r2, [sp, #20]
 8019068:	dcef      	bgt.n	801904a <uxr_prepare_reliable_buffer_to_write+0x216>
 801906a:	8927      	ldrh	r7, [r4, #8]
 801906c:	fbb6 f3f7 	udiv	r3, r6, r7
 8019070:	fb07 6313 	mls	r3, r7, r3, r6
 8019074:	b29d      	uxth	r5, r3
 8019076:	6863      	ldr	r3, [r4, #4]
 8019078:	6824      	ldr	r4, [r4, #0]
 801907a:	fbb3 f3f7 	udiv	r3, r3, r7
 801907e:	fb05 f303 	mul.w	r3, r5, r3
 8019082:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019086:	50e2      	str	r2, [r4, r3]
 8019088:	2300      	movs	r3, #0
 801908a:	f8cd 8000 	str.w	r8, [sp]
 801908e:	f7f3 fc6f 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8019092:	2001      	movs	r0, #1
 8019094:	e7da      	b.n	801904c <uxr_prepare_reliable_buffer_to_write+0x218>
 8019096:	b293      	uxth	r3, r2
 8019098:	461a      	mov	r2, r3
 801909a:	e737      	b.n	8018f0c <uxr_prepare_reliable_buffer_to_write+0xd8>
 801909c:	4630      	mov	r0, r6
 801909e:	2101      	movs	r1, #1
 80190a0:	9207      	str	r2, [sp, #28]
 80190a2:	f000 f937 	bl	8019314 <uxr_seq_num_add>
 80190a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80190aa:	fbb0 f1fc 	udiv	r1, r0, ip
 80190ae:	fb0c 0111 	mls	r1, ip, r1, r0
 80190b2:	4606      	mov	r6, r0
 80190b4:	b288      	uxth	r0, r1
 80190b6:	6863      	ldr	r3, [r4, #4]
 80190b8:	fbb3 f1fc 	udiv	r1, r3, ip
 80190bc:	6823      	ldr	r3, [r4, #0]
 80190be:	9a07      	ldr	r2, [sp, #28]
 80190c0:	fb00 f101 	mul.w	r1, r0, r1
 80190c4:	3104      	adds	r1, #4
 80190c6:	440b      	add	r3, r1
 80190c8:	9303      	str	r3, [sp, #12]
 80190ca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80190ce:	e70a      	b.n	8018ee6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80190d0:	8921      	ldrh	r1, [r4, #8]
 80190d2:	fbb5 f3f1 	udiv	r3, r5, r1
 80190d6:	fb01 5313 	mls	r3, r1, r3, r5
 80190da:	b29a      	uxth	r2, r3
 80190dc:	6863      	ldr	r3, [r4, #4]
 80190de:	fbb3 f3f1 	udiv	r3, r3, r1
 80190e2:	6821      	ldr	r1, [r4, #0]
 80190e4:	9804      	ldr	r0, [sp, #16]
 80190e6:	fb02 f303 	mul.w	r3, r2, r3
 80190ea:	3304      	adds	r3, #4
 80190ec:	7b22      	ldrb	r2, [r4, #12]
 80190ee:	4419      	add	r1, r3
 80190f0:	445a      	add	r2, fp
 80190f2:	f841 2c04 	str.w	r2, [r1, #-4]
 80190f6:	7b23      	ldrb	r3, [r4, #12]
 80190f8:	9300      	str	r3, [sp, #0]
 80190fa:	2300      	movs	r3, #0
 80190fc:	f7f3 fc38 	bl	800c970 <ucdr_init_buffer_origin_offset>
 8019100:	81e5      	strh	r5, [r4, #14]
 8019102:	2001      	movs	r0, #1
 8019104:	e7a2      	b.n	801904c <uxr_prepare_reliable_buffer_to_write+0x218>
 8019106:	4682      	mov	sl, r0
 8019108:	e6ca      	b.n	8018ea0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801910a:	bf00      	nop
 801910c:	08018d15 	.word	0x08018d15

08019110 <uxr_prepare_next_reliable_buffer_to_send>:
 8019110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019112:	4604      	mov	r4, r0
 8019114:	460f      	mov	r7, r1
 8019116:	8a00      	ldrh	r0, [r0, #16]
 8019118:	2101      	movs	r1, #1
 801911a:	4616      	mov	r6, r2
 801911c:	461d      	mov	r5, r3
 801911e:	f000 f8f9 	bl	8019314 <uxr_seq_num_add>
 8019122:	8028      	strh	r0, [r5, #0]
 8019124:	8922      	ldrh	r2, [r4, #8]
 8019126:	fbb0 f3f2 	udiv	r3, r0, r2
 801912a:	fb02 0c13 	mls	ip, r2, r3, r0
 801912e:	fa1f fc8c 	uxth.w	ip, ip
 8019132:	6863      	ldr	r3, [r4, #4]
 8019134:	fbb3 f3f2 	udiv	r3, r3, r2
 8019138:	fb0c fc03 	mul.w	ip, ip, r3
 801913c:	6823      	ldr	r3, [r4, #0]
 801913e:	89e1      	ldrh	r1, [r4, #14]
 8019140:	f10c 0c04 	add.w	ip, ip, #4
 8019144:	4463      	add	r3, ip
 8019146:	603b      	str	r3, [r7, #0]
 8019148:	6823      	ldr	r3, [r4, #0]
 801914a:	449c      	add	ip, r3
 801914c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019150:	6033      	str	r3, [r6, #0]
 8019152:	f000 f8e7 	bl	8019324 <uxr_seq_num_cmp>
 8019156:	2800      	cmp	r0, #0
 8019158:	dd01      	ble.n	801915e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801915a:	2000      	movs	r0, #0
 801915c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801915e:	7b23      	ldrb	r3, [r4, #12]
 8019160:	6832      	ldr	r2, [r6, #0]
 8019162:	429a      	cmp	r2, r3
 8019164:	d9f9      	bls.n	801915a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019166:	8a61      	ldrh	r1, [r4, #18]
 8019168:	8a20      	ldrh	r0, [r4, #16]
 801916a:	f000 f8d7 	bl	801931c <uxr_seq_num_sub>
 801916e:	8923      	ldrh	r3, [r4, #8]
 8019170:	4283      	cmp	r3, r0
 8019172:	d0f2      	beq.n	801915a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019174:	8828      	ldrh	r0, [r5, #0]
 8019176:	89e3      	ldrh	r3, [r4, #14]
 8019178:	8220      	strh	r0, [r4, #16]
 801917a:	4298      	cmp	r0, r3
 801917c:	d001      	beq.n	8019182 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801917e:	2001      	movs	r0, #1
 8019180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019182:	2101      	movs	r1, #1
 8019184:	f000 f8c6 	bl	8019314 <uxr_seq_num_add>
 8019188:	81e0      	strh	r0, [r4, #14]
 801918a:	2001      	movs	r0, #1
 801918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801918e:	bf00      	nop

08019190 <uxr_update_output_stream_heartbeat_timestamp>:
 8019190:	b570      	push	{r4, r5, r6, lr}
 8019192:	8a01      	ldrh	r1, [r0, #16]
 8019194:	4604      	mov	r4, r0
 8019196:	8a40      	ldrh	r0, [r0, #18]
 8019198:	4615      	mov	r5, r2
 801919a:	461e      	mov	r6, r3
 801919c:	f000 f8c2 	bl	8019324 <uxr_seq_num_cmp>
 80191a0:	2800      	cmp	r0, #0
 80191a2:	db07      	blt.n	80191b4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80191a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80191a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80191ac:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80191b0:	2000      	movs	r0, #0
 80191b2:	bd70      	pop	{r4, r5, r6, pc}
 80191b4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80191b8:	b940      	cbnz	r0, 80191cc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80191ba:	2301      	movs	r3, #1
 80191bc:	f884 3020 	strb.w	r3, [r4, #32]
 80191c0:	3564      	adds	r5, #100	@ 0x64
 80191c2:	f146 0600 	adc.w	r6, r6, #0
 80191c6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80191ca:	bd70      	pop	{r4, r5, r6, pc}
 80191cc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80191d0:	4295      	cmp	r5, r2
 80191d2:	eb76 0303 	sbcs.w	r3, r6, r3
 80191d6:	bfa5      	ittet	ge
 80191d8:	3001      	addge	r0, #1
 80191da:	f884 0020 	strbge.w	r0, [r4, #32]
 80191de:	2000      	movlt	r0, #0
 80191e0:	2001      	movge	r0, #1
 80191e2:	e7ed      	b.n	80191c0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080191e4 <uxr_begin_output_nack_buffer_it>:
 80191e4:	8a40      	ldrh	r0, [r0, #18]
 80191e6:	4770      	bx	lr

080191e8 <uxr_next_reliable_nack_buffer_to_send>:
 80191e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191ec:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80191f0:	b082      	sub	sp, #8
 80191f2:	f1b8 0f00 	cmp.w	r8, #0
 80191f6:	d011      	beq.n	801921c <uxr_next_reliable_nack_buffer_to_send+0x34>
 80191f8:	4604      	mov	r4, r0
 80191fa:	8818      	ldrh	r0, [r3, #0]
 80191fc:	460e      	mov	r6, r1
 80191fe:	4617      	mov	r7, r2
 8019200:	461d      	mov	r5, r3
 8019202:	2101      	movs	r1, #1
 8019204:	f000 f886 	bl	8019314 <uxr_seq_num_add>
 8019208:	8028      	strh	r0, [r5, #0]
 801920a:	8a21      	ldrh	r1, [r4, #16]
 801920c:	f000 f88a 	bl	8019324 <uxr_seq_num_cmp>
 8019210:	2800      	cmp	r0, #0
 8019212:	dd07      	ble.n	8019224 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8019214:	f04f 0800 	mov.w	r8, #0
 8019218:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801921c:	4640      	mov	r0, r8
 801921e:	b002      	add	sp, #8
 8019220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019224:	8921      	ldrh	r1, [r4, #8]
 8019226:	8828      	ldrh	r0, [r5, #0]
 8019228:	6823      	ldr	r3, [r4, #0]
 801922a:	fbb0 f2f1 	udiv	r2, r0, r1
 801922e:	fb01 0c12 	mls	ip, r1, r2, r0
 8019232:	fa1f f28c 	uxth.w	r2, ip
 8019236:	9301      	str	r3, [sp, #4]
 8019238:	6863      	ldr	r3, [r4, #4]
 801923a:	fbb3 fcf1 	udiv	ip, r3, r1
 801923e:	9b01      	ldr	r3, [sp, #4]
 8019240:	fb02 fc0c 	mul.w	ip, r2, ip
 8019244:	f10c 0c04 	add.w	ip, ip, #4
 8019248:	4463      	add	r3, ip
 801924a:	6033      	str	r3, [r6, #0]
 801924c:	6823      	ldr	r3, [r4, #0]
 801924e:	4463      	add	r3, ip
 8019250:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019254:	603b      	str	r3, [r7, #0]
 8019256:	7b22      	ldrb	r2, [r4, #12]
 8019258:	429a      	cmp	r2, r3
 801925a:	d0d2      	beq.n	8019202 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801925c:	4640      	mov	r0, r8
 801925e:	b002      	add	sp, #8
 8019260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019264 <uxr_process_acknack>:
 8019264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019266:	4604      	mov	r4, r0
 8019268:	460e      	mov	r6, r1
 801926a:	4610      	mov	r0, r2
 801926c:	2101      	movs	r1, #1
 801926e:	f000 f855 	bl	801931c <uxr_seq_num_sub>
 8019272:	8a61      	ldrh	r1, [r4, #18]
 8019274:	f000 f852 	bl	801931c <uxr_seq_num_sub>
 8019278:	b1c0      	cbz	r0, 80192ac <uxr_process_acknack+0x48>
 801927a:	4605      	mov	r5, r0
 801927c:	2700      	movs	r7, #0
 801927e:	2101      	movs	r1, #1
 8019280:	8a60      	ldrh	r0, [r4, #18]
 8019282:	f000 f847 	bl	8019314 <uxr_seq_num_add>
 8019286:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801928a:	fbb0 f1fc 	udiv	r1, r0, ip
 801928e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019292:	fb0c 0111 	mls	r1, ip, r1, r0
 8019296:	b289      	uxth	r1, r1
 8019298:	3701      	adds	r7, #1
 801929a:	fbb3 f3fc 	udiv	r3, r3, ip
 801929e:	fb01 f303 	mul.w	r3, r1, r3
 80192a2:	42bd      	cmp	r5, r7
 80192a4:	7b21      	ldrb	r1, [r4, #12]
 80192a6:	8260      	strh	r0, [r4, #18]
 80192a8:	50d1      	str	r1, [r2, r3]
 80192aa:	d1e8      	bne.n	801927e <uxr_process_acknack+0x1a>
 80192ac:	3e00      	subs	r6, #0
 80192ae:	f04f 0300 	mov.w	r3, #0
 80192b2:	bf18      	it	ne
 80192b4:	2601      	movne	r6, #1
 80192b6:	f884 3020 	strb.w	r3, [r4, #32]
 80192ba:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80192be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192c0 <uxr_is_output_up_to_date>:
 80192c0:	8a01      	ldrh	r1, [r0, #16]
 80192c2:	8a40      	ldrh	r0, [r0, #18]
 80192c4:	b508      	push	{r3, lr}
 80192c6:	f000 f82d 	bl	8019324 <uxr_seq_num_cmp>
 80192ca:	fab0 f080 	clz	r0, r0
 80192ce:	0940      	lsrs	r0, r0, #5
 80192d0:	bd08      	pop	{r3, pc}
 80192d2:	bf00      	nop

080192d4 <get_available_free_slots>:
 80192d4:	8902      	ldrh	r2, [r0, #8]
 80192d6:	b1da      	cbz	r2, 8019310 <get_available_free_slots+0x3c>
 80192d8:	b530      	push	{r4, r5, lr}
 80192da:	2100      	movs	r1, #0
 80192dc:	6843      	ldr	r3, [r0, #4]
 80192de:	6805      	ldr	r5, [r0, #0]
 80192e0:	7b04      	ldrb	r4, [r0, #12]
 80192e2:	fbb3 fef2 	udiv	lr, r3, r2
 80192e6:	4608      	mov	r0, r1
 80192e8:	460b      	mov	r3, r1
 80192ea:	fbb3 fcf2 	udiv	ip, r3, r2
 80192ee:	fb02 331c 	mls	r3, r2, ip, r3
 80192f2:	b29b      	uxth	r3, r3
 80192f4:	fb0e f303 	mul.w	r3, lr, r3
 80192f8:	3101      	adds	r1, #1
 80192fa:	f855 c003 	ldr.w	ip, [r5, r3]
 80192fe:	4564      	cmp	r4, ip
 8019300:	bf08      	it	eq
 8019302:	3001      	addeq	r0, #1
 8019304:	b28b      	uxth	r3, r1
 8019306:	bf08      	it	eq
 8019308:	b280      	uxtheq	r0, r0
 801930a:	4293      	cmp	r3, r2
 801930c:	d3ed      	bcc.n	80192ea <get_available_free_slots+0x16>
 801930e:	bd30      	pop	{r4, r5, pc}
 8019310:	4610      	mov	r0, r2
 8019312:	4770      	bx	lr

08019314 <uxr_seq_num_add>:
 8019314:	4408      	add	r0, r1
 8019316:	b280      	uxth	r0, r0
 8019318:	4770      	bx	lr
 801931a:	bf00      	nop

0801931c <uxr_seq_num_sub>:
 801931c:	1a40      	subs	r0, r0, r1
 801931e:	b280      	uxth	r0, r0
 8019320:	4770      	bx	lr
 8019322:	bf00      	nop

08019324 <uxr_seq_num_cmp>:
 8019324:	4288      	cmp	r0, r1
 8019326:	d011      	beq.n	801934c <uxr_seq_num_cmp+0x28>
 8019328:	d309      	bcc.n	801933e <uxr_seq_num_cmp+0x1a>
 801932a:	4288      	cmp	r0, r1
 801932c:	d910      	bls.n	8019350 <uxr_seq_num_cmp+0x2c>
 801932e:	1a40      	subs	r0, r0, r1
 8019330:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8019334:	bfd4      	ite	le
 8019336:	2001      	movle	r0, #1
 8019338:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801933c:	4770      	bx	lr
 801933e:	1a0b      	subs	r3, r1, r0
 8019340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019344:	daf1      	bge.n	801932a <uxr_seq_num_cmp+0x6>
 8019346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801934a:	4770      	bx	lr
 801934c:	2000      	movs	r0, #0
 801934e:	4770      	bx	lr
 8019350:	2001      	movs	r0, #1
 8019352:	4770      	bx	lr

08019354 <rcl_get_default_domain_id>:
 8019354:	b530      	push	{r4, r5, lr}
 8019356:	b083      	sub	sp, #12
 8019358:	2300      	movs	r3, #0
 801935a:	9300      	str	r3, [sp, #0]
 801935c:	b1d0      	cbz	r0, 8019394 <rcl_get_default_domain_id+0x40>
 801935e:	4604      	mov	r4, r0
 8019360:	4669      	mov	r1, sp
 8019362:	4815      	ldr	r0, [pc, #84]	@ (80193b8 <rcl_get_default_domain_id+0x64>)
 8019364:	f7fd fed0 	bl	8017108 <rcutils_get_env>
 8019368:	4602      	mov	r2, r0
 801936a:	b110      	cbz	r0, 8019372 <rcl_get_default_domain_id+0x1e>
 801936c:	2001      	movs	r0, #1
 801936e:	b003      	add	sp, #12
 8019370:	bd30      	pop	{r4, r5, pc}
 8019372:	9b00      	ldr	r3, [sp, #0]
 8019374:	b18b      	cbz	r3, 801939a <rcl_get_default_domain_id+0x46>
 8019376:	7818      	ldrb	r0, [r3, #0]
 8019378:	2800      	cmp	r0, #0
 801937a:	d0f8      	beq.n	801936e <rcl_get_default_domain_id+0x1a>
 801937c:	a901      	add	r1, sp, #4
 801937e:	4618      	mov	r0, r3
 8019380:	9201      	str	r2, [sp, #4]
 8019382:	f000 fe39 	bl	8019ff8 <strtoul>
 8019386:	4605      	mov	r5, r0
 8019388:	b150      	cbz	r0, 80193a0 <rcl_get_default_domain_id+0x4c>
 801938a:	1c43      	adds	r3, r0, #1
 801938c:	d00d      	beq.n	80193aa <rcl_get_default_domain_id+0x56>
 801938e:	6025      	str	r5, [r4, #0]
 8019390:	2000      	movs	r0, #0
 8019392:	e7ec      	b.n	801936e <rcl_get_default_domain_id+0x1a>
 8019394:	200b      	movs	r0, #11
 8019396:	b003      	add	sp, #12
 8019398:	bd30      	pop	{r4, r5, pc}
 801939a:	4618      	mov	r0, r3
 801939c:	b003      	add	sp, #12
 801939e:	bd30      	pop	{r4, r5, pc}
 80193a0:	9b01      	ldr	r3, [sp, #4]
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d0f2      	beq.n	801938e <rcl_get_default_domain_id+0x3a>
 80193a8:	e7e0      	b.n	801936c <rcl_get_default_domain_id+0x18>
 80193aa:	f001 f9bd 	bl	801a728 <__errno>
 80193ae:	6803      	ldr	r3, [r0, #0]
 80193b0:	2b22      	cmp	r3, #34	@ 0x22
 80193b2:	d1ec      	bne.n	801938e <rcl_get_default_domain_id+0x3a>
 80193b4:	e7da      	b.n	801936c <rcl_get_default_domain_id+0x18>
 80193b6:	bf00      	nop
 80193b8:	0801e24c 	.word	0x0801e24c

080193bc <rcl_expand_topic_name>:
 80193bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193c0:	b08b      	sub	sp, #44	@ 0x2c
 80193c2:	9306      	str	r3, [sp, #24]
 80193c4:	2800      	cmp	r0, #0
 80193c6:	f000 80ad 	beq.w	8019524 <rcl_expand_topic_name+0x168>
 80193ca:	460e      	mov	r6, r1
 80193cc:	2900      	cmp	r1, #0
 80193ce:	f000 80a9 	beq.w	8019524 <rcl_expand_topic_name+0x168>
 80193d2:	4617      	mov	r7, r2
 80193d4:	2a00      	cmp	r2, #0
 80193d6:	f000 80a5 	beq.w	8019524 <rcl_expand_topic_name+0x168>
 80193da:	2b00      	cmp	r3, #0
 80193dc:	f000 80a2 	beq.w	8019524 <rcl_expand_topic_name+0x168>
 80193e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	f000 809e 	beq.w	8019524 <rcl_expand_topic_name+0x168>
 80193e8:	2200      	movs	r2, #0
 80193ea:	a909      	add	r1, sp, #36	@ 0x24
 80193ec:	4680      	mov	r8, r0
 80193ee:	f000 fa57 	bl	80198a0 <rcl_validate_topic_name>
 80193f2:	4604      	mov	r4, r0
 80193f4:	2800      	cmp	r0, #0
 80193f6:	f040 8096 	bne.w	8019526 <rcl_expand_topic_name+0x16a>
 80193fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	f040 809a 	bne.w	8019536 <rcl_expand_topic_name+0x17a>
 8019402:	4602      	mov	r2, r0
 8019404:	a909      	add	r1, sp, #36	@ 0x24
 8019406:	4630      	mov	r0, r6
 8019408:	f7fe faa8 	bl	801795c <rmw_validate_node_name>
 801940c:	2800      	cmp	r0, #0
 801940e:	f040 808e 	bne.w	801952e <rcl_expand_topic_name+0x172>
 8019412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019414:	2a00      	cmp	r2, #0
 8019416:	f040 8093 	bne.w	8019540 <rcl_expand_topic_name+0x184>
 801941a:	a909      	add	r1, sp, #36	@ 0x24
 801941c:	4638      	mov	r0, r7
 801941e:	f7fe fa7f 	bl	8017920 <rmw_validate_namespace>
 8019422:	2800      	cmp	r0, #0
 8019424:	f040 8083 	bne.w	801952e <rcl_expand_topic_name+0x172>
 8019428:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801942a:	2c00      	cmp	r4, #0
 801942c:	f040 80ed 	bne.w	801960a <rcl_expand_topic_name+0x24e>
 8019430:	217b      	movs	r1, #123	@ 0x7b
 8019432:	4640      	mov	r0, r8
 8019434:	f001 f8ec 	bl	801a610 <strchr>
 8019438:	f898 3000 	ldrb.w	r3, [r8]
 801943c:	2b2f      	cmp	r3, #47	@ 0x2f
 801943e:	4605      	mov	r5, r0
 8019440:	f000 809e 	beq.w	8019580 <rcl_expand_topic_name+0x1c4>
 8019444:	2b7e      	cmp	r3, #126	@ 0x7e
 8019446:	f040 80a2 	bne.w	801958e <rcl_expand_topic_name+0x1d2>
 801944a:	4638      	mov	r0, r7
 801944c:	f7e6 fef2 	bl	8000234 <strlen>
 8019450:	4a82      	ldr	r2, [pc, #520]	@ (801965c <rcl_expand_topic_name+0x2a0>)
 8019452:	4b83      	ldr	r3, [pc, #524]	@ (8019660 <rcl_expand_topic_name+0x2a4>)
 8019454:	2801      	cmp	r0, #1
 8019456:	bf18      	it	ne
 8019458:	4613      	movne	r3, r2
 801945a:	9302      	str	r3, [sp, #8]
 801945c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801945e:	9300      	str	r3, [sp, #0]
 8019460:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019464:	f108 0301 	add.w	r3, r8, #1
 8019468:	9305      	str	r3, [sp, #20]
 801946a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801946e:	9301      	str	r3, [sp, #4]
 8019470:	ab14      	add	r3, sp, #80	@ 0x50
 8019472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019474:	f7fd fe70 	bl	8017158 <rcutils_format_string_limit>
 8019478:	4682      	mov	sl, r0
 801947a:	2800      	cmp	r0, #0
 801947c:	f000 80c7 	beq.w	801960e <rcl_expand_topic_name+0x252>
 8019480:	2d00      	cmp	r5, #0
 8019482:	f000 80a2 	beq.w	80195ca <rcl_expand_topic_name+0x20e>
 8019486:	217b      	movs	r1, #123	@ 0x7b
 8019488:	f001 f8c2 	bl	801a610 <strchr>
 801948c:	46d1      	mov	r9, sl
 801948e:	4605      	mov	r5, r0
 8019490:	9407      	str	r4, [sp, #28]
 8019492:	46d3      	mov	fp, sl
 8019494:	464c      	mov	r4, r9
 8019496:	2d00      	cmp	r5, #0
 8019498:	f000 80be 	beq.w	8019618 <rcl_expand_topic_name+0x25c>
 801949c:	217d      	movs	r1, #125	@ 0x7d
 801949e:	4620      	mov	r0, r4
 80194a0:	f001 f8b6 	bl	801a610 <strchr>
 80194a4:	eba0 0905 	sub.w	r9, r0, r5
 80194a8:	f109 0a01 	add.w	sl, r9, #1
 80194ac:	486d      	ldr	r0, [pc, #436]	@ (8019664 <rcl_expand_topic_name+0x2a8>)
 80194ae:	4652      	mov	r2, sl
 80194b0:	4629      	mov	r1, r5
 80194b2:	f001 f8ba 	bl	801a62a <strncmp>
 80194b6:	2800      	cmp	r0, #0
 80194b8:	d067      	beq.n	801958a <rcl_expand_topic_name+0x1ce>
 80194ba:	486b      	ldr	r0, [pc, #428]	@ (8019668 <rcl_expand_topic_name+0x2ac>)
 80194bc:	4652      	mov	r2, sl
 80194be:	4629      	mov	r1, r5
 80194c0:	f001 f8b3 	bl	801a62a <strncmp>
 80194c4:	b130      	cbz	r0, 80194d4 <rcl_expand_topic_name+0x118>
 80194c6:	4869      	ldr	r0, [pc, #420]	@ (801966c <rcl_expand_topic_name+0x2b0>)
 80194c8:	4652      	mov	r2, sl
 80194ca:	4629      	mov	r1, r5
 80194cc:	f001 f8ad 	bl	801a62a <strncmp>
 80194d0:	2800      	cmp	r0, #0
 80194d2:	d137      	bne.n	8019544 <rcl_expand_topic_name+0x188>
 80194d4:	46b9      	mov	r9, r7
 80194d6:	ab16      	add	r3, sp, #88	@ 0x58
 80194d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80194dc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80194e0:	ab14      	add	r3, sp, #80	@ 0x50
 80194e2:	4628      	mov	r0, r5
 80194e4:	cb0c      	ldmia	r3, {r2, r3}
 80194e6:	4651      	mov	r1, sl
 80194e8:	f7fd ff72 	bl	80173d0 <rcutils_strndup>
 80194ec:	4605      	mov	r5, r0
 80194ee:	2800      	cmp	r0, #0
 80194f0:	f000 809c 	beq.w	801962c <rcl_expand_topic_name+0x270>
 80194f4:	464a      	mov	r2, r9
 80194f6:	4620      	mov	r0, r4
 80194f8:	ab14      	add	r3, sp, #80	@ 0x50
 80194fa:	4629      	mov	r1, r5
 80194fc:	f7fd fe66 	bl	80171cc <rcutils_repl_str>
 8019500:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019502:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019504:	4604      	mov	r4, r0
 8019506:	4628      	mov	r0, r5
 8019508:	4798      	blx	r3
 801950a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801950c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801950e:	4658      	mov	r0, fp
 8019510:	4798      	blx	r3
 8019512:	2c00      	cmp	r4, #0
 8019514:	d07b      	beq.n	801960e <rcl_expand_topic_name+0x252>
 8019516:	217b      	movs	r1, #123	@ 0x7b
 8019518:	4620      	mov	r0, r4
 801951a:	f001 f879 	bl	801a610 <strchr>
 801951e:	46a3      	mov	fp, r4
 8019520:	4605      	mov	r5, r0
 8019522:	e7b8      	b.n	8019496 <rcl_expand_topic_name+0xda>
 8019524:	240b      	movs	r4, #11
 8019526:	4620      	mov	r0, r4
 8019528:	b00b      	add	sp, #44	@ 0x2c
 801952a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801952e:	f7fa ff65 	bl	80143fc <rcl_convert_rmw_ret_to_rcl_ret>
 8019532:	4604      	mov	r4, r0
 8019534:	e7f7      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 8019536:	2467      	movs	r4, #103	@ 0x67
 8019538:	4620      	mov	r0, r4
 801953a:	b00b      	add	sp, #44	@ 0x2c
 801953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019540:	24c9      	movs	r4, #201	@ 0xc9
 8019542:	e7f0      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 8019544:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8019548:	9806      	ldr	r0, [sp, #24]
 801954a:	1c69      	adds	r1, r5, #1
 801954c:	f7fe f85a 	bl	8017604 <rcutils_string_map_getn>
 8019550:	4681      	mov	r9, r0
 8019552:	2800      	cmp	r0, #0
 8019554:	d1bf      	bne.n	80194d6 <rcl_expand_topic_name+0x11a>
 8019556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019558:	aa16      	add	r2, sp, #88	@ 0x58
 801955a:	6018      	str	r0, [r3, #0]
 801955c:	ca07      	ldmia	r2, {r0, r1, r2}
 801955e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019562:	ab14      	add	r3, sp, #80	@ 0x50
 8019564:	cb0c      	ldmia	r3, {r2, r3}
 8019566:	4651      	mov	r1, sl
 8019568:	4628      	mov	r0, r5
 801956a:	f7fd ff31 	bl	80173d0 <rcutils_strndup>
 801956e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019570:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019572:	4798      	blx	r3
 8019574:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019576:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019578:	4658      	mov	r0, fp
 801957a:	2469      	movs	r4, #105	@ 0x69
 801957c:	4798      	blx	r3
 801957e:	e7d2      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 8019580:	2800      	cmp	r0, #0
 8019582:	d05b      	beq.n	801963c <rcl_expand_topic_name+0x280>
 8019584:	46c1      	mov	r9, r8
 8019586:	46a2      	mov	sl, r4
 8019588:	e782      	b.n	8019490 <rcl_expand_topic_name+0xd4>
 801958a:	46b1      	mov	r9, r6
 801958c:	e7a3      	b.n	80194d6 <rcl_expand_topic_name+0x11a>
 801958e:	2800      	cmp	r0, #0
 8019590:	d1f8      	bne.n	8019584 <rcl_expand_topic_name+0x1c8>
 8019592:	4638      	mov	r0, r7
 8019594:	f7e6 fe4e 	bl	8000234 <strlen>
 8019598:	4a35      	ldr	r2, [pc, #212]	@ (8019670 <rcl_expand_topic_name+0x2b4>)
 801959a:	4b36      	ldr	r3, [pc, #216]	@ (8019674 <rcl_expand_topic_name+0x2b8>)
 801959c:	f8cd 8010 	str.w	r8, [sp, #16]
 80195a0:	2801      	cmp	r0, #1
 80195a2:	bf18      	it	ne
 80195a4:	4613      	movne	r3, r2
 80195a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80195aa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80195ae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80195b0:	9703      	str	r7, [sp, #12]
 80195b2:	9200      	str	r2, [sp, #0]
 80195b4:	ab14      	add	r3, sp, #80	@ 0x50
 80195b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80195b8:	f7fd fdce 	bl	8017158 <rcutils_format_string_limit>
 80195bc:	4682      	mov	sl, r0
 80195be:	4653      	mov	r3, sl
 80195c0:	b32b      	cbz	r3, 801960e <rcl_expand_topic_name+0x252>
 80195c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80195c4:	f8c3 a000 	str.w	sl, [r3]
 80195c8:	e7ad      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 80195ca:	f89a 3000 	ldrb.w	r3, [sl]
 80195ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80195d0:	d0f7      	beq.n	80195c2 <rcl_expand_topic_name+0x206>
 80195d2:	4638      	mov	r0, r7
 80195d4:	f7e6 fe2e 	bl	8000234 <strlen>
 80195d8:	4a25      	ldr	r2, [pc, #148]	@ (8019670 <rcl_expand_topic_name+0x2b4>)
 80195da:	4b26      	ldr	r3, [pc, #152]	@ (8019674 <rcl_expand_topic_name+0x2b8>)
 80195dc:	f8cd a010 	str.w	sl, [sp, #16]
 80195e0:	2801      	cmp	r0, #1
 80195e2:	bf18      	it	ne
 80195e4:	4613      	movne	r3, r2
 80195e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80195ea:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80195ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80195f0:	9703      	str	r7, [sp, #12]
 80195f2:	9200      	str	r2, [sp, #0]
 80195f4:	ab14      	add	r3, sp, #80	@ 0x50
 80195f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80195f8:	f7fd fdae 	bl	8017158 <rcutils_format_string_limit>
 80195fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80195fe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019600:	4605      	mov	r5, r0
 8019602:	4650      	mov	r0, sl
 8019604:	4798      	blx	r3
 8019606:	46aa      	mov	sl, r5
 8019608:	e7d9      	b.n	80195be <rcl_expand_topic_name+0x202>
 801960a:	24ca      	movs	r4, #202	@ 0xca
 801960c:	e78b      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 801960e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019610:	2300      	movs	r3, #0
 8019612:	6013      	str	r3, [r2, #0]
 8019614:	240a      	movs	r4, #10
 8019616:	e786      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 8019618:	465b      	mov	r3, fp
 801961a:	9c07      	ldr	r4, [sp, #28]
 801961c:	46da      	mov	sl, fp
 801961e:	2b00      	cmp	r3, #0
 8019620:	d1d3      	bne.n	80195ca <rcl_expand_topic_name+0x20e>
 8019622:	f898 3000 	ldrb.w	r3, [r8]
 8019626:	2b2f      	cmp	r3, #47	@ 0x2f
 8019628:	d0cb      	beq.n	80195c2 <rcl_expand_topic_name+0x206>
 801962a:	e7b2      	b.n	8019592 <rcl_expand_topic_name+0x1d6>
 801962c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019630:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019632:	6015      	str	r5, [r2, #0]
 8019634:	4658      	mov	r0, fp
 8019636:	4798      	blx	r3
 8019638:	240a      	movs	r4, #10
 801963a:	e774      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 801963c:	ab17      	add	r3, sp, #92	@ 0x5c
 801963e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019642:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019646:	ab14      	add	r3, sp, #80	@ 0x50
 8019648:	cb0e      	ldmia	r3, {r1, r2, r3}
 801964a:	4640      	mov	r0, r8
 801964c:	f7fd fe9e 	bl	801738c <rcutils_strdup>
 8019650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019652:	2800      	cmp	r0, #0
 8019654:	6018      	str	r0, [r3, #0]
 8019656:	bf08      	it	eq
 8019658:	240a      	moveq	r4, #10
 801965a:	e764      	b.n	8019526 <rcl_expand_topic_name+0x16a>
 801965c:	0801e25c 	.word	0x0801e25c
 8019660:	0801d6c4 	.word	0x0801d6c4
 8019664:	0801e264 	.word	0x0801e264
 8019668:	0801e26c 	.word	0x0801e26c
 801966c:	0801e274 	.word	0x0801e274
 8019670:	0801d6b0 	.word	0x0801d6b0
 8019674:	0801d6d4 	.word	0x0801d6d4

08019678 <rcl_get_default_topic_name_substitutions>:
 8019678:	2800      	cmp	r0, #0
 801967a:	bf0c      	ite	eq
 801967c:	200b      	moveq	r0, #11
 801967e:	2000      	movne	r0, #0
 8019680:	4770      	bx	lr
 8019682:	bf00      	nop

08019684 <rcl_get_zero_initialized_guard_condition>:
 8019684:	4a03      	ldr	r2, [pc, #12]	@ (8019694 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019686:	4603      	mov	r3, r0
 8019688:	e892 0003 	ldmia.w	r2, {r0, r1}
 801968c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019690:	4618      	mov	r0, r3
 8019692:	4770      	bx	lr
 8019694:	0801e280 	.word	0x0801e280

08019698 <rcl_guard_condition_init>:
 8019698:	b082      	sub	sp, #8
 801969a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801969c:	b087      	sub	sp, #28
 801969e:	ac0c      	add	r4, sp, #48	@ 0x30
 80196a0:	e884 000c 	stmia.w	r4, {r2, r3}
 80196a4:	46a6      	mov	lr, r4
 80196a6:	460d      	mov	r5, r1
 80196a8:	4604      	mov	r4, r0
 80196aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196ae:	f10d 0c04 	add.w	ip, sp, #4
 80196b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196b6:	f8de 3000 	ldr.w	r3, [lr]
 80196ba:	f8cc 3000 	str.w	r3, [ip]
 80196be:	a801      	add	r0, sp, #4
 80196c0:	f7f4 fbc0 	bl	800de44 <rcutils_allocator_is_valid>
 80196c4:	b338      	cbz	r0, 8019716 <rcl_guard_condition_init+0x7e>
 80196c6:	b334      	cbz	r4, 8019716 <rcl_guard_condition_init+0x7e>
 80196c8:	6866      	ldr	r6, [r4, #4]
 80196ca:	b9ee      	cbnz	r6, 8019708 <rcl_guard_condition_init+0x70>
 80196cc:	b31d      	cbz	r5, 8019716 <rcl_guard_condition_init+0x7e>
 80196ce:	4628      	mov	r0, r5
 80196d0:	f7fa feb2 	bl	8014438 <rcl_context_is_valid>
 80196d4:	b308      	cbz	r0, 801971a <rcl_guard_condition_init+0x82>
 80196d6:	9b01      	ldr	r3, [sp, #4]
 80196d8:	9905      	ldr	r1, [sp, #20]
 80196da:	201c      	movs	r0, #28
 80196dc:	4798      	blx	r3
 80196de:	4607      	mov	r7, r0
 80196e0:	6060      	str	r0, [r4, #4]
 80196e2:	b310      	cbz	r0, 801972a <rcl_guard_condition_init+0x92>
 80196e4:	6828      	ldr	r0, [r5, #0]
 80196e6:	3028      	adds	r0, #40	@ 0x28
 80196e8:	f000 f9ac 	bl	8019a44 <rmw_create_guard_condition>
 80196ec:	6038      	str	r0, [r7, #0]
 80196ee:	6860      	ldr	r0, [r4, #4]
 80196f0:	6805      	ldr	r5, [r0, #0]
 80196f2:	b1a5      	cbz	r5, 801971e <rcl_guard_condition_init+0x86>
 80196f4:	2301      	movs	r3, #1
 80196f6:	ac01      	add	r4, sp, #4
 80196f8:	7103      	strb	r3, [r0, #4]
 80196fa:	f100 0708 	add.w	r7, r0, #8
 80196fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019700:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	603b      	str	r3, [r7, #0]
 8019706:	e000      	b.n	801970a <rcl_guard_condition_init+0x72>
 8019708:	2664      	movs	r6, #100	@ 0x64
 801970a:	4630      	mov	r0, r6
 801970c:	b007      	add	sp, #28
 801970e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019712:	b002      	add	sp, #8
 8019714:	4770      	bx	lr
 8019716:	260b      	movs	r6, #11
 8019718:	e7f7      	b.n	801970a <rcl_guard_condition_init+0x72>
 801971a:	2665      	movs	r6, #101	@ 0x65
 801971c:	e7f5      	b.n	801970a <rcl_guard_condition_init+0x72>
 801971e:	9b02      	ldr	r3, [sp, #8]
 8019720:	9905      	ldr	r1, [sp, #20]
 8019722:	4798      	blx	r3
 8019724:	2601      	movs	r6, #1
 8019726:	6065      	str	r5, [r4, #4]
 8019728:	e7ef      	b.n	801970a <rcl_guard_condition_init+0x72>
 801972a:	260a      	movs	r6, #10
 801972c:	e7ed      	b.n	801970a <rcl_guard_condition_init+0x72>
 801972e:	bf00      	nop

08019730 <rcl_guard_condition_init_from_rmw>:
 8019730:	b082      	sub	sp, #8
 8019732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019736:	b086      	sub	sp, #24
 8019738:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801973c:	4604      	mov	r4, r0
 801973e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019742:	460e      	mov	r6, r1
 8019744:	4617      	mov	r7, r2
 8019746:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801974a:	f10d 0e04 	add.w	lr, sp, #4
 801974e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019752:	f8dc 3000 	ldr.w	r3, [ip]
 8019756:	f8ce 3000 	str.w	r3, [lr]
 801975a:	a801      	add	r0, sp, #4
 801975c:	f7f4 fb72 	bl	800de44 <rcutils_allocator_is_valid>
 8019760:	b350      	cbz	r0, 80197b8 <rcl_guard_condition_init_from_rmw+0x88>
 8019762:	b34c      	cbz	r4, 80197b8 <rcl_guard_condition_init_from_rmw+0x88>
 8019764:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019768:	f1b8 0f00 	cmp.w	r8, #0
 801976c:	d11e      	bne.n	80197ac <rcl_guard_condition_init_from_rmw+0x7c>
 801976e:	b31f      	cbz	r7, 80197b8 <rcl_guard_condition_init_from_rmw+0x88>
 8019770:	4638      	mov	r0, r7
 8019772:	f7fa fe61 	bl	8014438 <rcl_context_is_valid>
 8019776:	b328      	cbz	r0, 80197c4 <rcl_guard_condition_init_from_rmw+0x94>
 8019778:	9b01      	ldr	r3, [sp, #4]
 801977a:	9905      	ldr	r1, [sp, #20]
 801977c:	201c      	movs	r0, #28
 801977e:	4798      	blx	r3
 8019780:	4605      	mov	r5, r0
 8019782:	6060      	str	r0, [r4, #4]
 8019784:	b358      	cbz	r0, 80197de <rcl_guard_condition_init_from_rmw+0xae>
 8019786:	b1fe      	cbz	r6, 80197c8 <rcl_guard_condition_init_from_rmw+0x98>
 8019788:	6006      	str	r6, [r0, #0]
 801978a:	f880 8004 	strb.w	r8, [r0, #4]
 801978e:	ac01      	add	r4, sp, #4
 8019790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019792:	f105 0c08 	add.w	ip, r5, #8
 8019796:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801979a:	6823      	ldr	r3, [r4, #0]
 801979c:	f8cc 3000 	str.w	r3, [ip]
 80197a0:	2000      	movs	r0, #0
 80197a2:	b006      	add	sp, #24
 80197a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197a8:	b002      	add	sp, #8
 80197aa:	4770      	bx	lr
 80197ac:	2064      	movs	r0, #100	@ 0x64
 80197ae:	b006      	add	sp, #24
 80197b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197b4:	b002      	add	sp, #8
 80197b6:	4770      	bx	lr
 80197b8:	200b      	movs	r0, #11
 80197ba:	b006      	add	sp, #24
 80197bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197c0:	b002      	add	sp, #8
 80197c2:	4770      	bx	lr
 80197c4:	2065      	movs	r0, #101	@ 0x65
 80197c6:	e7f2      	b.n	80197ae <rcl_guard_condition_init_from_rmw+0x7e>
 80197c8:	6838      	ldr	r0, [r7, #0]
 80197ca:	3028      	adds	r0, #40	@ 0x28
 80197cc:	f000 f93a 	bl	8019a44 <rmw_create_guard_condition>
 80197d0:	6028      	str	r0, [r5, #0]
 80197d2:	6865      	ldr	r5, [r4, #4]
 80197d4:	682e      	ldr	r6, [r5, #0]
 80197d6:	b126      	cbz	r6, 80197e2 <rcl_guard_condition_init_from_rmw+0xb2>
 80197d8:	2301      	movs	r3, #1
 80197da:	712b      	strb	r3, [r5, #4]
 80197dc:	e7d7      	b.n	801978e <rcl_guard_condition_init_from_rmw+0x5e>
 80197de:	200a      	movs	r0, #10
 80197e0:	e7e5      	b.n	80197ae <rcl_guard_condition_init_from_rmw+0x7e>
 80197e2:	4628      	mov	r0, r5
 80197e4:	9b02      	ldr	r3, [sp, #8]
 80197e6:	9905      	ldr	r1, [sp, #20]
 80197e8:	4798      	blx	r3
 80197ea:	6066      	str	r6, [r4, #4]
 80197ec:	2001      	movs	r0, #1
 80197ee:	e7de      	b.n	80197ae <rcl_guard_condition_init_from_rmw+0x7e>

080197f0 <rcl_guard_condition_fini>:
 80197f0:	b570      	push	{r4, r5, r6, lr}
 80197f2:	b082      	sub	sp, #8
 80197f4:	b1f0      	cbz	r0, 8019834 <rcl_guard_condition_fini+0x44>
 80197f6:	6843      	ldr	r3, [r0, #4]
 80197f8:	4604      	mov	r4, r0
 80197fa:	b163      	cbz	r3, 8019816 <rcl_guard_condition_fini+0x26>
 80197fc:	6818      	ldr	r0, [r3, #0]
 80197fe:	68de      	ldr	r6, [r3, #12]
 8019800:	6999      	ldr	r1, [r3, #24]
 8019802:	b160      	cbz	r0, 801981e <rcl_guard_condition_fini+0x2e>
 8019804:	791d      	ldrb	r5, [r3, #4]
 8019806:	b965      	cbnz	r5, 8019822 <rcl_guard_condition_fini+0x32>
 8019808:	4618      	mov	r0, r3
 801980a:	47b0      	blx	r6
 801980c:	2300      	movs	r3, #0
 801980e:	4628      	mov	r0, r5
 8019810:	6063      	str	r3, [r4, #4]
 8019812:	b002      	add	sp, #8
 8019814:	bd70      	pop	{r4, r5, r6, pc}
 8019816:	461d      	mov	r5, r3
 8019818:	4628      	mov	r0, r5
 801981a:	b002      	add	sp, #8
 801981c:	bd70      	pop	{r4, r5, r6, pc}
 801981e:	4605      	mov	r5, r0
 8019820:	e7f2      	b.n	8019808 <rcl_guard_condition_fini+0x18>
 8019822:	9101      	str	r1, [sp, #4]
 8019824:	f000 f922 	bl	8019a6c <rmw_destroy_guard_condition>
 8019828:	1e05      	subs	r5, r0, #0
 801982a:	6863      	ldr	r3, [r4, #4]
 801982c:	9901      	ldr	r1, [sp, #4]
 801982e:	bf18      	it	ne
 8019830:	2501      	movne	r5, #1
 8019832:	e7e9      	b.n	8019808 <rcl_guard_condition_fini+0x18>
 8019834:	250b      	movs	r5, #11
 8019836:	4628      	mov	r0, r5
 8019838:	b002      	add	sp, #8
 801983a:	bd70      	pop	{r4, r5, r6, pc}

0801983c <rcl_guard_condition_get_default_options>:
 801983c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801983e:	b087      	sub	sp, #28
 8019840:	4606      	mov	r6, r0
 8019842:	4668      	mov	r0, sp
 8019844:	f7f4 faf0 	bl	800de28 <rcutils_get_default_allocator>
 8019848:	4b09      	ldr	r3, [pc, #36]	@ (8019870 <rcl_guard_condition_get_default_options+0x34>)
 801984a:	46ee      	mov	lr, sp
 801984c:	469c      	mov	ip, r3
 801984e:	461d      	mov	r5, r3
 8019850:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019854:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801985a:	4634      	mov	r4, r6
 801985c:	f8de 7000 	ldr.w	r7, [lr]
 8019860:	f8cc 7000 	str.w	r7, [ip]
 8019864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019866:	4630      	mov	r0, r6
 8019868:	6027      	str	r7, [r4, #0]
 801986a:	b007      	add	sp, #28
 801986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801986e:	bf00      	nop
 8019870:	2000beac 	.word	0x2000beac

08019874 <rcl_trigger_guard_condition>:
 8019874:	b148      	cbz	r0, 801988a <rcl_trigger_guard_condition+0x16>
 8019876:	b508      	push	{r3, lr}
 8019878:	6843      	ldr	r3, [r0, #4]
 801987a:	b143      	cbz	r3, 801988e <rcl_trigger_guard_condition+0x1a>
 801987c:	6818      	ldr	r0, [r3, #0]
 801987e:	f000 f909 	bl	8019a94 <rmw_trigger_guard_condition>
 8019882:	3800      	subs	r0, #0
 8019884:	bf18      	it	ne
 8019886:	2001      	movne	r0, #1
 8019888:	bd08      	pop	{r3, pc}
 801988a:	200b      	movs	r0, #11
 801988c:	4770      	bx	lr
 801988e:	200b      	movs	r0, #11
 8019890:	bd08      	pop	{r3, pc}
 8019892:	bf00      	nop

08019894 <rcl_guard_condition_get_rmw_handle>:
 8019894:	b110      	cbz	r0, 801989c <rcl_guard_condition_get_rmw_handle+0x8>
 8019896:	6840      	ldr	r0, [r0, #4]
 8019898:	b100      	cbz	r0, 801989c <rcl_guard_condition_get_rmw_handle+0x8>
 801989a:	6800      	ldr	r0, [r0, #0]
 801989c:	4770      	bx	lr
 801989e:	bf00      	nop

080198a0 <rcl_validate_topic_name>:
 80198a0:	2800      	cmp	r0, #0
 80198a2:	d07a      	beq.n	801999a <rcl_validate_topic_name+0xfa>
 80198a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198a8:	460e      	mov	r6, r1
 80198aa:	2900      	cmp	r1, #0
 80198ac:	d07c      	beq.n	80199a8 <rcl_validate_topic_name+0x108>
 80198ae:	4617      	mov	r7, r2
 80198b0:	4605      	mov	r5, r0
 80198b2:	f7e6 fcbf 	bl	8000234 <strlen>
 80198b6:	b1b0      	cbz	r0, 80198e6 <rcl_validate_topic_name+0x46>
 80198b8:	f895 9000 	ldrb.w	r9, [r5]
 80198bc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019a40 <rcl_validate_topic_name+0x1a0>
 80198c0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80198c4:	f013 0304 	ands.w	r3, r3, #4
 80198c8:	d169      	bne.n	801999e <rcl_validate_topic_name+0xfe>
 80198ca:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80198ce:	f815 2008 	ldrb.w	r2, [r5, r8]
 80198d2:	2a2f      	cmp	r2, #47	@ 0x2f
 80198d4:	d10e      	bne.n	80198f4 <rcl_validate_topic_name+0x54>
 80198d6:	2202      	movs	r2, #2
 80198d8:	6032      	str	r2, [r6, #0]
 80198da:	b36f      	cbz	r7, 8019938 <rcl_validate_topic_name+0x98>
 80198dc:	f8c7 8000 	str.w	r8, [r7]
 80198e0:	4618      	mov	r0, r3
 80198e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198e6:	2301      	movs	r3, #1
 80198e8:	6033      	str	r3, [r6, #0]
 80198ea:	b32f      	cbz	r7, 8019938 <rcl_validate_topic_name+0x98>
 80198ec:	2000      	movs	r0, #0
 80198ee:	6038      	str	r0, [r7, #0]
 80198f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198f4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80198f8:	461c      	mov	r4, r3
 80198fa:	4619      	mov	r1, r3
 80198fc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019900:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019904:	f1be 0f09 	cmp.w	lr, #9
 8019908:	d919      	bls.n	801993e <rcl_validate_topic_name+0x9e>
 801990a:	f022 0e20 	bic.w	lr, r2, #32
 801990e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019912:	f1be 0f19 	cmp.w	lr, #25
 8019916:	d912      	bls.n	801993e <rcl_validate_topic_name+0x9e>
 8019918:	2a5f      	cmp	r2, #95	@ 0x5f
 801991a:	d019      	beq.n	8019950 <rcl_validate_topic_name+0xb0>
 801991c:	2a2f      	cmp	r2, #47	@ 0x2f
 801991e:	d051      	beq.n	80199c4 <rcl_validate_topic_name+0x124>
 8019920:	2a7e      	cmp	r2, #126	@ 0x7e
 8019922:	d048      	beq.n	80199b6 <rcl_validate_topic_name+0x116>
 8019924:	2a7b      	cmp	r2, #123	@ 0x7b
 8019926:	d054      	beq.n	80199d2 <rcl_validate_topic_name+0x132>
 8019928:	2a7d      	cmp	r2, #125	@ 0x7d
 801992a:	d161      	bne.n	80199f0 <rcl_validate_topic_name+0x150>
 801992c:	2c00      	cmp	r4, #0
 801992e:	d155      	bne.n	80199dc <rcl_validate_topic_name+0x13c>
 8019930:	2305      	movs	r3, #5
 8019932:	6033      	str	r3, [r6, #0]
 8019934:	b107      	cbz	r7, 8019938 <rcl_validate_topic_name+0x98>
 8019936:	6039      	str	r1, [r7, #0]
 8019938:	2000      	movs	r0, #0
 801993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801993e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019942:	0752      	lsls	r2, r2, #29
 8019944:	d504      	bpl.n	8019950 <rcl_validate_topic_name+0xb0>
 8019946:	b11c      	cbz	r4, 8019950 <rcl_validate_topic_name+0xb0>
 8019948:	b111      	cbz	r1, 8019950 <rcl_validate_topic_name+0xb0>
 801994a:	1e4a      	subs	r2, r1, #1
 801994c:	429a      	cmp	r2, r3
 801994e:	d02d      	beq.n	80199ac <rcl_validate_topic_name+0x10c>
 8019950:	3101      	adds	r1, #1
 8019952:	4288      	cmp	r0, r1
 8019954:	d1d2      	bne.n	80198fc <rcl_validate_topic_name+0x5c>
 8019956:	2c00      	cmp	r4, #0
 8019958:	d145      	bne.n	80199e6 <rcl_validate_topic_name+0x146>
 801995a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801995e:	d04f      	beq.n	8019a00 <rcl_validate_topic_name+0x160>
 8019960:	4620      	mov	r0, r4
 8019962:	2301      	movs	r3, #1
 8019964:	e006      	b.n	8019974 <rcl_validate_topic_name+0xd4>
 8019966:	428b      	cmp	r3, r1
 8019968:	f105 0501 	add.w	r5, r5, #1
 801996c:	f103 0201 	add.w	r2, r3, #1
 8019970:	d236      	bcs.n	80199e0 <rcl_validate_topic_name+0x140>
 8019972:	4613      	mov	r3, r2
 8019974:	4580      	cmp	r8, r0
 8019976:	f100 0001 	add.w	r0, r0, #1
 801997a:	d0f4      	beq.n	8019966 <rcl_validate_topic_name+0xc6>
 801997c:	782a      	ldrb	r2, [r5, #0]
 801997e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019980:	d1f1      	bne.n	8019966 <rcl_validate_topic_name+0xc6>
 8019982:	786a      	ldrb	r2, [r5, #1]
 8019984:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019988:	0754      	lsls	r4, r2, #29
 801998a:	d5ec      	bpl.n	8019966 <rcl_validate_topic_name+0xc6>
 801998c:	2204      	movs	r2, #4
 801998e:	6032      	str	r2, [r6, #0]
 8019990:	2f00      	cmp	r7, #0
 8019992:	d0d1      	beq.n	8019938 <rcl_validate_topic_name+0x98>
 8019994:	603b      	str	r3, [r7, #0]
 8019996:	2000      	movs	r0, #0
 8019998:	e7aa      	b.n	80198f0 <rcl_validate_topic_name+0x50>
 801999a:	200b      	movs	r0, #11
 801999c:	4770      	bx	lr
 801999e:	2304      	movs	r3, #4
 80199a0:	6033      	str	r3, [r6, #0]
 80199a2:	2f00      	cmp	r7, #0
 80199a4:	d1a2      	bne.n	80198ec <rcl_validate_topic_name+0x4c>
 80199a6:	e7c7      	b.n	8019938 <rcl_validate_topic_name+0x98>
 80199a8:	200b      	movs	r0, #11
 80199aa:	e7a1      	b.n	80198f0 <rcl_validate_topic_name+0x50>
 80199ac:	2309      	movs	r3, #9
 80199ae:	6033      	str	r3, [r6, #0]
 80199b0:	2f00      	cmp	r7, #0
 80199b2:	d1c0      	bne.n	8019936 <rcl_validate_topic_name+0x96>
 80199b4:	e7c0      	b.n	8019938 <rcl_validate_topic_name+0x98>
 80199b6:	2900      	cmp	r1, #0
 80199b8:	d0ca      	beq.n	8019950 <rcl_validate_topic_name+0xb0>
 80199ba:	2306      	movs	r3, #6
 80199bc:	6033      	str	r3, [r6, #0]
 80199be:	2f00      	cmp	r7, #0
 80199c0:	d1b9      	bne.n	8019936 <rcl_validate_topic_name+0x96>
 80199c2:	e7b9      	b.n	8019938 <rcl_validate_topic_name+0x98>
 80199c4:	2c00      	cmp	r4, #0
 80199c6:	d0c3      	beq.n	8019950 <rcl_validate_topic_name+0xb0>
 80199c8:	2308      	movs	r3, #8
 80199ca:	6033      	str	r3, [r6, #0]
 80199cc:	2f00      	cmp	r7, #0
 80199ce:	d1b2      	bne.n	8019936 <rcl_validate_topic_name+0x96>
 80199d0:	e7b2      	b.n	8019938 <rcl_validate_topic_name+0x98>
 80199d2:	2c00      	cmp	r4, #0
 80199d4:	d1f8      	bne.n	80199c8 <rcl_validate_topic_name+0x128>
 80199d6:	460b      	mov	r3, r1
 80199d8:	2401      	movs	r4, #1
 80199da:	e7b9      	b.n	8019950 <rcl_validate_topic_name+0xb0>
 80199dc:	2400      	movs	r4, #0
 80199de:	e7b7      	b.n	8019950 <rcl_validate_topic_name+0xb0>
 80199e0:	2000      	movs	r0, #0
 80199e2:	6030      	str	r0, [r6, #0]
 80199e4:	e784      	b.n	80198f0 <rcl_validate_topic_name+0x50>
 80199e6:	2205      	movs	r2, #5
 80199e8:	6032      	str	r2, [r6, #0]
 80199ea:	2f00      	cmp	r7, #0
 80199ec:	d1d2      	bne.n	8019994 <rcl_validate_topic_name+0xf4>
 80199ee:	e7a3      	b.n	8019938 <rcl_validate_topic_name+0x98>
 80199f0:	2c00      	cmp	r4, #0
 80199f2:	bf14      	ite	ne
 80199f4:	2308      	movne	r3, #8
 80199f6:	2303      	moveq	r3, #3
 80199f8:	6033      	str	r3, [r6, #0]
 80199fa:	2f00      	cmp	r7, #0
 80199fc:	d19b      	bne.n	8019936 <rcl_validate_topic_name+0x96>
 80199fe:	e79b      	b.n	8019938 <rcl_validate_topic_name+0x98>
 8019a00:	2301      	movs	r3, #1
 8019a02:	e00a      	b.n	8019a1a <rcl_validate_topic_name+0x17a>
 8019a04:	2c01      	cmp	r4, #1
 8019a06:	d013      	beq.n	8019a30 <rcl_validate_topic_name+0x190>
 8019a08:	4299      	cmp	r1, r3
 8019a0a:	f104 0401 	add.w	r4, r4, #1
 8019a0e:	f105 0501 	add.w	r5, r5, #1
 8019a12:	f103 0201 	add.w	r2, r3, #1
 8019a16:	d9e3      	bls.n	80199e0 <rcl_validate_topic_name+0x140>
 8019a18:	4613      	mov	r3, r2
 8019a1a:	45a0      	cmp	r8, r4
 8019a1c:	d0f4      	beq.n	8019a08 <rcl_validate_topic_name+0x168>
 8019a1e:	782a      	ldrb	r2, [r5, #0]
 8019a20:	2a2f      	cmp	r2, #47	@ 0x2f
 8019a22:	d1ef      	bne.n	8019a04 <rcl_validate_topic_name+0x164>
 8019a24:	786a      	ldrb	r2, [r5, #1]
 8019a26:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019a2a:	0752      	lsls	r2, r2, #29
 8019a2c:	d5ec      	bpl.n	8019a08 <rcl_validate_topic_name+0x168>
 8019a2e:	e7ad      	b.n	801998c <rcl_validate_topic_name+0xec>
 8019a30:	2307      	movs	r3, #7
 8019a32:	6033      	str	r3, [r6, #0]
 8019a34:	2f00      	cmp	r7, #0
 8019a36:	f43f af7f 	beq.w	8019938 <rcl_validate_topic_name+0x98>
 8019a3a:	603c      	str	r4, [r7, #0]
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	e757      	b.n	80198f0 <rcl_validate_topic_name+0x50>
 8019a40:	0801e3ea 	.word	0x0801e3ea

08019a44 <rmw_create_guard_condition>:
 8019a44:	b538      	push	{r3, r4, r5, lr}
 8019a46:	4605      	mov	r5, r0
 8019a48:	4807      	ldr	r0, [pc, #28]	@ (8019a68 <rmw_create_guard_condition+0x24>)
 8019a4a:	f7fe f8cd 	bl	8017be8 <get_memory>
 8019a4e:	b148      	cbz	r0, 8019a64 <rmw_create_guard_condition+0x20>
 8019a50:	6884      	ldr	r4, [r0, #8]
 8019a52:	2300      	movs	r3, #0
 8019a54:	7423      	strb	r3, [r4, #16]
 8019a56:	61e5      	str	r5, [r4, #28]
 8019a58:	f7fe f92e 	bl	8017cb8 <rmw_get_implementation_identifier>
 8019a5c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019a60:	f104 0014 	add.w	r0, r4, #20
 8019a64:	bd38      	pop	{r3, r4, r5, pc}
 8019a66:	bf00      	nop
 8019a68:	2000bcdc 	.word	0x2000bcdc

08019a6c <rmw_destroy_guard_condition>:
 8019a6c:	b508      	push	{r3, lr}
 8019a6e:	4b08      	ldr	r3, [pc, #32]	@ (8019a90 <rmw_destroy_guard_condition+0x24>)
 8019a70:	6819      	ldr	r1, [r3, #0]
 8019a72:	b911      	cbnz	r1, 8019a7a <rmw_destroy_guard_condition+0xe>
 8019a74:	e00a      	b.n	8019a8c <rmw_destroy_guard_condition+0x20>
 8019a76:	6849      	ldr	r1, [r1, #4]
 8019a78:	b141      	cbz	r1, 8019a8c <rmw_destroy_guard_condition+0x20>
 8019a7a:	688b      	ldr	r3, [r1, #8]
 8019a7c:	3314      	adds	r3, #20
 8019a7e:	4298      	cmp	r0, r3
 8019a80:	d1f9      	bne.n	8019a76 <rmw_destroy_guard_condition+0xa>
 8019a82:	4803      	ldr	r0, [pc, #12]	@ (8019a90 <rmw_destroy_guard_condition+0x24>)
 8019a84:	f7fe f8c0 	bl	8017c08 <put_memory>
 8019a88:	2000      	movs	r0, #0
 8019a8a:	bd08      	pop	{r3, pc}
 8019a8c:	2001      	movs	r0, #1
 8019a8e:	bd08      	pop	{r3, pc}
 8019a90:	2000bcdc 	.word	0x2000bcdc

08019a94 <rmw_trigger_guard_condition>:
 8019a94:	b160      	cbz	r0, 8019ab0 <rmw_trigger_guard_condition+0x1c>
 8019a96:	b510      	push	{r4, lr}
 8019a98:	4604      	mov	r4, r0
 8019a9a:	6800      	ldr	r0, [r0, #0]
 8019a9c:	f7f5 fd78 	bl	800f590 <is_uxrce_rmw_identifier_valid>
 8019aa0:	b908      	cbnz	r0, 8019aa6 <rmw_trigger_guard_condition+0x12>
 8019aa2:	2001      	movs	r0, #1
 8019aa4:	bd10      	pop	{r4, pc}
 8019aa6:	6863      	ldr	r3, [r4, #4]
 8019aa8:	2201      	movs	r2, #1
 8019aaa:	741a      	strb	r2, [r3, #16]
 8019aac:	2000      	movs	r0, #0
 8019aae:	bd10      	pop	{r4, pc}
 8019ab0:	2001      	movs	r0, #1
 8019ab2:	4770      	bx	lr

08019ab4 <rosidl_runtime_c__String__init>:
 8019ab4:	b510      	push	{r4, lr}
 8019ab6:	4604      	mov	r4, r0
 8019ab8:	b086      	sub	sp, #24
 8019aba:	b170      	cbz	r0, 8019ada <rosidl_runtime_c__String__init+0x26>
 8019abc:	a801      	add	r0, sp, #4
 8019abe:	f7f4 f9b3 	bl	800de28 <rcutils_get_default_allocator>
 8019ac2:	9b01      	ldr	r3, [sp, #4]
 8019ac4:	9905      	ldr	r1, [sp, #20]
 8019ac6:	2001      	movs	r0, #1
 8019ac8:	4798      	blx	r3
 8019aca:	6020      	str	r0, [r4, #0]
 8019acc:	b128      	cbz	r0, 8019ada <rosidl_runtime_c__String__init+0x26>
 8019ace:	2100      	movs	r1, #0
 8019ad0:	2201      	movs	r2, #1
 8019ad2:	7001      	strb	r1, [r0, #0]
 8019ad4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019ad8:	4610      	mov	r0, r2
 8019ada:	b006      	add	sp, #24
 8019adc:	bd10      	pop	{r4, pc}
 8019ade:	bf00      	nop

08019ae0 <rosidl_runtime_c__String__fini>:
 8019ae0:	b320      	cbz	r0, 8019b2c <rosidl_runtime_c__String__fini+0x4c>
 8019ae2:	b510      	push	{r4, lr}
 8019ae4:	6803      	ldr	r3, [r0, #0]
 8019ae6:	b086      	sub	sp, #24
 8019ae8:	4604      	mov	r4, r0
 8019aea:	b173      	cbz	r3, 8019b0a <rosidl_runtime_c__String__fini+0x2a>
 8019aec:	6883      	ldr	r3, [r0, #8]
 8019aee:	b1f3      	cbz	r3, 8019b2e <rosidl_runtime_c__String__fini+0x4e>
 8019af0:	a801      	add	r0, sp, #4
 8019af2:	f7f4 f999 	bl	800de28 <rcutils_get_default_allocator>
 8019af6:	9b02      	ldr	r3, [sp, #8]
 8019af8:	9905      	ldr	r1, [sp, #20]
 8019afa:	6820      	ldr	r0, [r4, #0]
 8019afc:	4798      	blx	r3
 8019afe:	2300      	movs	r3, #0
 8019b00:	e9c4 3300 	strd	r3, r3, [r4]
 8019b04:	60a3      	str	r3, [r4, #8]
 8019b06:	b006      	add	sp, #24
 8019b08:	bd10      	pop	{r4, pc}
 8019b0a:	6843      	ldr	r3, [r0, #4]
 8019b0c:	b9db      	cbnz	r3, 8019b46 <rosidl_runtime_c__String__fini+0x66>
 8019b0e:	6883      	ldr	r3, [r0, #8]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d0f8      	beq.n	8019b06 <rosidl_runtime_c__String__fini+0x26>
 8019b14:	4b12      	ldr	r3, [pc, #72]	@ (8019b60 <rosidl_runtime_c__String__fini+0x80>)
 8019b16:	4813      	ldr	r0, [pc, #76]	@ (8019b64 <rosidl_runtime_c__String__fini+0x84>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	2251      	movs	r2, #81	@ 0x51
 8019b1c:	68db      	ldr	r3, [r3, #12]
 8019b1e:	2101      	movs	r1, #1
 8019b20:	f000 fb82 	bl	801a228 <fwrite>
 8019b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b28:	f000 f83e 	bl	8019ba8 <exit>
 8019b2c:	4770      	bx	lr
 8019b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8019b60 <rosidl_runtime_c__String__fini+0x80>)
 8019b30:	480d      	ldr	r0, [pc, #52]	@ (8019b68 <rosidl_runtime_c__String__fini+0x88>)
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	224c      	movs	r2, #76	@ 0x4c
 8019b36:	68db      	ldr	r3, [r3, #12]
 8019b38:	2101      	movs	r1, #1
 8019b3a:	f000 fb75 	bl	801a228 <fwrite>
 8019b3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b42:	f000 f831 	bl	8019ba8 <exit>
 8019b46:	4b06      	ldr	r3, [pc, #24]	@ (8019b60 <rosidl_runtime_c__String__fini+0x80>)
 8019b48:	4808      	ldr	r0, [pc, #32]	@ (8019b6c <rosidl_runtime_c__String__fini+0x8c>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	224e      	movs	r2, #78	@ 0x4e
 8019b4e:	68db      	ldr	r3, [r3, #12]
 8019b50:	2101      	movs	r1, #1
 8019b52:	f000 fb69 	bl	801a228 <fwrite>
 8019b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b5a:	f000 f825 	bl	8019ba8 <exit>
 8019b5e:	bf00      	nop
 8019b60:	20000c54 	.word	0x20000c54
 8019b64:	0801e328 	.word	0x0801e328
 8019b68:	0801e288 	.word	0x0801e288
 8019b6c:	0801e2d8 	.word	0x0801e2d8

08019b70 <calloc>:
 8019b70:	4b02      	ldr	r3, [pc, #8]	@ (8019b7c <calloc+0xc>)
 8019b72:	460a      	mov	r2, r1
 8019b74:	4601      	mov	r1, r0
 8019b76:	6818      	ldr	r0, [r3, #0]
 8019b78:	f000 b802 	b.w	8019b80 <_calloc_r>
 8019b7c:	20000c54 	.word	0x20000c54

08019b80 <_calloc_r>:
 8019b80:	b570      	push	{r4, r5, r6, lr}
 8019b82:	fba1 5402 	umull	r5, r4, r1, r2
 8019b86:	b93c      	cbnz	r4, 8019b98 <_calloc_r+0x18>
 8019b88:	4629      	mov	r1, r5
 8019b8a:	f000 f899 	bl	8019cc0 <_malloc_r>
 8019b8e:	4606      	mov	r6, r0
 8019b90:	b928      	cbnz	r0, 8019b9e <_calloc_r+0x1e>
 8019b92:	2600      	movs	r6, #0
 8019b94:	4630      	mov	r0, r6
 8019b96:	bd70      	pop	{r4, r5, r6, pc}
 8019b98:	220c      	movs	r2, #12
 8019b9a:	6002      	str	r2, [r0, #0]
 8019b9c:	e7f9      	b.n	8019b92 <_calloc_r+0x12>
 8019b9e:	462a      	mov	r2, r5
 8019ba0:	4621      	mov	r1, r4
 8019ba2:	f000 fd2d 	bl	801a600 <memset>
 8019ba6:	e7f5      	b.n	8019b94 <_calloc_r+0x14>

08019ba8 <exit>:
 8019ba8:	b508      	push	{r3, lr}
 8019baa:	4b06      	ldr	r3, [pc, #24]	@ (8019bc4 <exit+0x1c>)
 8019bac:	4604      	mov	r4, r0
 8019bae:	b113      	cbz	r3, 8019bb6 <exit+0xe>
 8019bb0:	2100      	movs	r1, #0
 8019bb2:	f3af 8000 	nop.w
 8019bb6:	4b04      	ldr	r3, [pc, #16]	@ (8019bc8 <exit+0x20>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	b103      	cbz	r3, 8019bbe <exit+0x16>
 8019bbc:	4798      	blx	r3
 8019bbe:	4620      	mov	r0, r4
 8019bc0:	f7e8 fe88 	bl	80028d4 <_exit>
 8019bc4:	00000000 	.word	0x00000000
 8019bc8:	2000c000 	.word	0x2000c000

08019bcc <getenv>:
 8019bcc:	b507      	push	{r0, r1, r2, lr}
 8019bce:	4b04      	ldr	r3, [pc, #16]	@ (8019be0 <getenv+0x14>)
 8019bd0:	4601      	mov	r1, r0
 8019bd2:	aa01      	add	r2, sp, #4
 8019bd4:	6818      	ldr	r0, [r3, #0]
 8019bd6:	f000 f805 	bl	8019be4 <_findenv_r>
 8019bda:	b003      	add	sp, #12
 8019bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019be0:	20000c54 	.word	0x20000c54

08019be4 <_findenv_r>:
 8019be4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019c58 <_findenv_r+0x74>
 8019bec:	4606      	mov	r6, r0
 8019bee:	4689      	mov	r9, r1
 8019bf0:	4617      	mov	r7, r2
 8019bf2:	f000 fdfb 	bl	801a7ec <__env_lock>
 8019bf6:	f8da 4000 	ldr.w	r4, [sl]
 8019bfa:	b134      	cbz	r4, 8019c0a <_findenv_r+0x26>
 8019bfc:	464b      	mov	r3, r9
 8019bfe:	4698      	mov	r8, r3
 8019c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c04:	b13a      	cbz	r2, 8019c16 <_findenv_r+0x32>
 8019c06:	2a3d      	cmp	r2, #61	@ 0x3d
 8019c08:	d1f9      	bne.n	8019bfe <_findenv_r+0x1a>
 8019c0a:	4630      	mov	r0, r6
 8019c0c:	f000 fdf4 	bl	801a7f8 <__env_unlock>
 8019c10:	2000      	movs	r0, #0
 8019c12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c16:	eba8 0809 	sub.w	r8, r8, r9
 8019c1a:	46a3      	mov	fp, r4
 8019c1c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019c20:	2800      	cmp	r0, #0
 8019c22:	d0f2      	beq.n	8019c0a <_findenv_r+0x26>
 8019c24:	4642      	mov	r2, r8
 8019c26:	4649      	mov	r1, r9
 8019c28:	f000 fcff 	bl	801a62a <strncmp>
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	d1f4      	bne.n	8019c1a <_findenv_r+0x36>
 8019c30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019c34:	eb03 0508 	add.w	r5, r3, r8
 8019c38:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019c3c:	2b3d      	cmp	r3, #61	@ 0x3d
 8019c3e:	d1ec      	bne.n	8019c1a <_findenv_r+0x36>
 8019c40:	f8da 3000 	ldr.w	r3, [sl]
 8019c44:	ebab 0303 	sub.w	r3, fp, r3
 8019c48:	109b      	asrs	r3, r3, #2
 8019c4a:	4630      	mov	r0, r6
 8019c4c:	603b      	str	r3, [r7, #0]
 8019c4e:	f000 fdd3 	bl	801a7f8 <__env_unlock>
 8019c52:	1c68      	adds	r0, r5, #1
 8019c54:	e7dd      	b.n	8019c12 <_findenv_r+0x2e>
 8019c56:	bf00      	nop
 8019c58:	20000020 	.word	0x20000020

08019c5c <malloc>:
 8019c5c:	4b02      	ldr	r3, [pc, #8]	@ (8019c68 <malloc+0xc>)
 8019c5e:	4601      	mov	r1, r0
 8019c60:	6818      	ldr	r0, [r3, #0]
 8019c62:	f000 b82d 	b.w	8019cc0 <_malloc_r>
 8019c66:	bf00      	nop
 8019c68:	20000c54 	.word	0x20000c54

08019c6c <free>:
 8019c6c:	4b02      	ldr	r3, [pc, #8]	@ (8019c78 <free+0xc>)
 8019c6e:	4601      	mov	r1, r0
 8019c70:	6818      	ldr	r0, [r3, #0]
 8019c72:	f000 bdc7 	b.w	801a804 <_free_r>
 8019c76:	bf00      	nop
 8019c78:	20000c54 	.word	0x20000c54

08019c7c <sbrk_aligned>:
 8019c7c:	b570      	push	{r4, r5, r6, lr}
 8019c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8019cbc <sbrk_aligned+0x40>)
 8019c80:	460c      	mov	r4, r1
 8019c82:	6831      	ldr	r1, [r6, #0]
 8019c84:	4605      	mov	r5, r0
 8019c86:	b911      	cbnz	r1, 8019c8e <sbrk_aligned+0x12>
 8019c88:	f000 fd2c 	bl	801a6e4 <_sbrk_r>
 8019c8c:	6030      	str	r0, [r6, #0]
 8019c8e:	4621      	mov	r1, r4
 8019c90:	4628      	mov	r0, r5
 8019c92:	f000 fd27 	bl	801a6e4 <_sbrk_r>
 8019c96:	1c43      	adds	r3, r0, #1
 8019c98:	d103      	bne.n	8019ca2 <sbrk_aligned+0x26>
 8019c9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019c9e:	4620      	mov	r0, r4
 8019ca0:	bd70      	pop	{r4, r5, r6, pc}
 8019ca2:	1cc4      	adds	r4, r0, #3
 8019ca4:	f024 0403 	bic.w	r4, r4, #3
 8019ca8:	42a0      	cmp	r0, r4
 8019caa:	d0f8      	beq.n	8019c9e <sbrk_aligned+0x22>
 8019cac:	1a21      	subs	r1, r4, r0
 8019cae:	4628      	mov	r0, r5
 8019cb0:	f000 fd18 	bl	801a6e4 <_sbrk_r>
 8019cb4:	3001      	adds	r0, #1
 8019cb6:	d1f2      	bne.n	8019c9e <sbrk_aligned+0x22>
 8019cb8:	e7ef      	b.n	8019c9a <sbrk_aligned+0x1e>
 8019cba:	bf00      	nop
 8019cbc:	2000bec0 	.word	0x2000bec0

08019cc0 <_malloc_r>:
 8019cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cc4:	1ccd      	adds	r5, r1, #3
 8019cc6:	f025 0503 	bic.w	r5, r5, #3
 8019cca:	3508      	adds	r5, #8
 8019ccc:	2d0c      	cmp	r5, #12
 8019cce:	bf38      	it	cc
 8019cd0:	250c      	movcc	r5, #12
 8019cd2:	2d00      	cmp	r5, #0
 8019cd4:	4606      	mov	r6, r0
 8019cd6:	db01      	blt.n	8019cdc <_malloc_r+0x1c>
 8019cd8:	42a9      	cmp	r1, r5
 8019cda:	d904      	bls.n	8019ce6 <_malloc_r+0x26>
 8019cdc:	230c      	movs	r3, #12
 8019cde:	6033      	str	r3, [r6, #0]
 8019ce0:	2000      	movs	r0, #0
 8019ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019dbc <_malloc_r+0xfc>
 8019cea:	f000 f869 	bl	8019dc0 <__malloc_lock>
 8019cee:	f8d8 3000 	ldr.w	r3, [r8]
 8019cf2:	461c      	mov	r4, r3
 8019cf4:	bb44      	cbnz	r4, 8019d48 <_malloc_r+0x88>
 8019cf6:	4629      	mov	r1, r5
 8019cf8:	4630      	mov	r0, r6
 8019cfa:	f7ff ffbf 	bl	8019c7c <sbrk_aligned>
 8019cfe:	1c43      	adds	r3, r0, #1
 8019d00:	4604      	mov	r4, r0
 8019d02:	d158      	bne.n	8019db6 <_malloc_r+0xf6>
 8019d04:	f8d8 4000 	ldr.w	r4, [r8]
 8019d08:	4627      	mov	r7, r4
 8019d0a:	2f00      	cmp	r7, #0
 8019d0c:	d143      	bne.n	8019d96 <_malloc_r+0xd6>
 8019d0e:	2c00      	cmp	r4, #0
 8019d10:	d04b      	beq.n	8019daa <_malloc_r+0xea>
 8019d12:	6823      	ldr	r3, [r4, #0]
 8019d14:	4639      	mov	r1, r7
 8019d16:	4630      	mov	r0, r6
 8019d18:	eb04 0903 	add.w	r9, r4, r3
 8019d1c:	f000 fce2 	bl	801a6e4 <_sbrk_r>
 8019d20:	4581      	cmp	r9, r0
 8019d22:	d142      	bne.n	8019daa <_malloc_r+0xea>
 8019d24:	6821      	ldr	r1, [r4, #0]
 8019d26:	1a6d      	subs	r5, r5, r1
 8019d28:	4629      	mov	r1, r5
 8019d2a:	4630      	mov	r0, r6
 8019d2c:	f7ff ffa6 	bl	8019c7c <sbrk_aligned>
 8019d30:	3001      	adds	r0, #1
 8019d32:	d03a      	beq.n	8019daa <_malloc_r+0xea>
 8019d34:	6823      	ldr	r3, [r4, #0]
 8019d36:	442b      	add	r3, r5
 8019d38:	6023      	str	r3, [r4, #0]
 8019d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8019d3e:	685a      	ldr	r2, [r3, #4]
 8019d40:	bb62      	cbnz	r2, 8019d9c <_malloc_r+0xdc>
 8019d42:	f8c8 7000 	str.w	r7, [r8]
 8019d46:	e00f      	b.n	8019d68 <_malloc_r+0xa8>
 8019d48:	6822      	ldr	r2, [r4, #0]
 8019d4a:	1b52      	subs	r2, r2, r5
 8019d4c:	d420      	bmi.n	8019d90 <_malloc_r+0xd0>
 8019d4e:	2a0b      	cmp	r2, #11
 8019d50:	d917      	bls.n	8019d82 <_malloc_r+0xc2>
 8019d52:	1961      	adds	r1, r4, r5
 8019d54:	42a3      	cmp	r3, r4
 8019d56:	6025      	str	r5, [r4, #0]
 8019d58:	bf18      	it	ne
 8019d5a:	6059      	strne	r1, [r3, #4]
 8019d5c:	6863      	ldr	r3, [r4, #4]
 8019d5e:	bf08      	it	eq
 8019d60:	f8c8 1000 	streq.w	r1, [r8]
 8019d64:	5162      	str	r2, [r4, r5]
 8019d66:	604b      	str	r3, [r1, #4]
 8019d68:	4630      	mov	r0, r6
 8019d6a:	f000 f82f 	bl	8019dcc <__malloc_unlock>
 8019d6e:	f104 000b 	add.w	r0, r4, #11
 8019d72:	1d23      	adds	r3, r4, #4
 8019d74:	f020 0007 	bic.w	r0, r0, #7
 8019d78:	1ac2      	subs	r2, r0, r3
 8019d7a:	bf1c      	itt	ne
 8019d7c:	1a1b      	subne	r3, r3, r0
 8019d7e:	50a3      	strne	r3, [r4, r2]
 8019d80:	e7af      	b.n	8019ce2 <_malloc_r+0x22>
 8019d82:	6862      	ldr	r2, [r4, #4]
 8019d84:	42a3      	cmp	r3, r4
 8019d86:	bf0c      	ite	eq
 8019d88:	f8c8 2000 	streq.w	r2, [r8]
 8019d8c:	605a      	strne	r2, [r3, #4]
 8019d8e:	e7eb      	b.n	8019d68 <_malloc_r+0xa8>
 8019d90:	4623      	mov	r3, r4
 8019d92:	6864      	ldr	r4, [r4, #4]
 8019d94:	e7ae      	b.n	8019cf4 <_malloc_r+0x34>
 8019d96:	463c      	mov	r4, r7
 8019d98:	687f      	ldr	r7, [r7, #4]
 8019d9a:	e7b6      	b.n	8019d0a <_malloc_r+0x4a>
 8019d9c:	461a      	mov	r2, r3
 8019d9e:	685b      	ldr	r3, [r3, #4]
 8019da0:	42a3      	cmp	r3, r4
 8019da2:	d1fb      	bne.n	8019d9c <_malloc_r+0xdc>
 8019da4:	2300      	movs	r3, #0
 8019da6:	6053      	str	r3, [r2, #4]
 8019da8:	e7de      	b.n	8019d68 <_malloc_r+0xa8>
 8019daa:	230c      	movs	r3, #12
 8019dac:	6033      	str	r3, [r6, #0]
 8019dae:	4630      	mov	r0, r6
 8019db0:	f000 f80c 	bl	8019dcc <__malloc_unlock>
 8019db4:	e794      	b.n	8019ce0 <_malloc_r+0x20>
 8019db6:	6005      	str	r5, [r0, #0]
 8019db8:	e7d6      	b.n	8019d68 <_malloc_r+0xa8>
 8019dba:	bf00      	nop
 8019dbc:	2000bec4 	.word	0x2000bec4

08019dc0 <__malloc_lock>:
 8019dc0:	4801      	ldr	r0, [pc, #4]	@ (8019dc8 <__malloc_lock+0x8>)
 8019dc2:	f000 bcdc 	b.w	801a77e <__retarget_lock_acquire_recursive>
 8019dc6:	bf00      	nop
 8019dc8:	2000c009 	.word	0x2000c009

08019dcc <__malloc_unlock>:
 8019dcc:	4801      	ldr	r0, [pc, #4]	@ (8019dd4 <__malloc_unlock+0x8>)
 8019dce:	f000 bcd7 	b.w	801a780 <__retarget_lock_release_recursive>
 8019dd2:	bf00      	nop
 8019dd4:	2000c009 	.word	0x2000c009

08019dd8 <srand>:
 8019dd8:	b538      	push	{r3, r4, r5, lr}
 8019dda:	4b10      	ldr	r3, [pc, #64]	@ (8019e1c <srand+0x44>)
 8019ddc:	681d      	ldr	r5, [r3, #0]
 8019dde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019de0:	4604      	mov	r4, r0
 8019de2:	b9b3      	cbnz	r3, 8019e12 <srand+0x3a>
 8019de4:	2018      	movs	r0, #24
 8019de6:	f7ff ff39 	bl	8019c5c <malloc>
 8019dea:	4602      	mov	r2, r0
 8019dec:	6328      	str	r0, [r5, #48]	@ 0x30
 8019dee:	b920      	cbnz	r0, 8019dfa <srand+0x22>
 8019df0:	4b0b      	ldr	r3, [pc, #44]	@ (8019e20 <srand+0x48>)
 8019df2:	480c      	ldr	r0, [pc, #48]	@ (8019e24 <srand+0x4c>)
 8019df4:	2146      	movs	r1, #70	@ 0x46
 8019df6:	f000 fcdb 	bl	801a7b0 <__assert_func>
 8019dfa:	490b      	ldr	r1, [pc, #44]	@ (8019e28 <srand+0x50>)
 8019dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8019e2c <srand+0x54>)
 8019dfe:	e9c0 1300 	strd	r1, r3, [r0]
 8019e02:	4b0b      	ldr	r3, [pc, #44]	@ (8019e30 <srand+0x58>)
 8019e04:	6083      	str	r3, [r0, #8]
 8019e06:	230b      	movs	r3, #11
 8019e08:	8183      	strh	r3, [r0, #12]
 8019e0a:	2100      	movs	r1, #0
 8019e0c:	2001      	movs	r0, #1
 8019e0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019e12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019e14:	2200      	movs	r2, #0
 8019e16:	611c      	str	r4, [r3, #16]
 8019e18:	615a      	str	r2, [r3, #20]
 8019e1a:	bd38      	pop	{r3, r4, r5, pc}
 8019e1c:	20000c54 	.word	0x20000c54
 8019e20:	0801e37a 	.word	0x0801e37a
 8019e24:	0801e391 	.word	0x0801e391
 8019e28:	abcd330e 	.word	0xabcd330e
 8019e2c:	e66d1234 	.word	0xe66d1234
 8019e30:	0005deec 	.word	0x0005deec

08019e34 <rand>:
 8019e34:	4b16      	ldr	r3, [pc, #88]	@ (8019e90 <rand+0x5c>)
 8019e36:	b510      	push	{r4, lr}
 8019e38:	681c      	ldr	r4, [r3, #0]
 8019e3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019e3c:	b9b3      	cbnz	r3, 8019e6c <rand+0x38>
 8019e3e:	2018      	movs	r0, #24
 8019e40:	f7ff ff0c 	bl	8019c5c <malloc>
 8019e44:	4602      	mov	r2, r0
 8019e46:	6320      	str	r0, [r4, #48]	@ 0x30
 8019e48:	b920      	cbnz	r0, 8019e54 <rand+0x20>
 8019e4a:	4b12      	ldr	r3, [pc, #72]	@ (8019e94 <rand+0x60>)
 8019e4c:	4812      	ldr	r0, [pc, #72]	@ (8019e98 <rand+0x64>)
 8019e4e:	2152      	movs	r1, #82	@ 0x52
 8019e50:	f000 fcae 	bl	801a7b0 <__assert_func>
 8019e54:	4911      	ldr	r1, [pc, #68]	@ (8019e9c <rand+0x68>)
 8019e56:	4b12      	ldr	r3, [pc, #72]	@ (8019ea0 <rand+0x6c>)
 8019e58:	e9c0 1300 	strd	r1, r3, [r0]
 8019e5c:	4b11      	ldr	r3, [pc, #68]	@ (8019ea4 <rand+0x70>)
 8019e5e:	6083      	str	r3, [r0, #8]
 8019e60:	230b      	movs	r3, #11
 8019e62:	8183      	strh	r3, [r0, #12]
 8019e64:	2100      	movs	r1, #0
 8019e66:	2001      	movs	r0, #1
 8019e68:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019e6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019e6e:	480e      	ldr	r0, [pc, #56]	@ (8019ea8 <rand+0x74>)
 8019e70:	690b      	ldr	r3, [r1, #16]
 8019e72:	694c      	ldr	r4, [r1, #20]
 8019e74:	4a0d      	ldr	r2, [pc, #52]	@ (8019eac <rand+0x78>)
 8019e76:	4358      	muls	r0, r3
 8019e78:	fb02 0004 	mla	r0, r2, r4, r0
 8019e7c:	fba3 3202 	umull	r3, r2, r3, r2
 8019e80:	3301      	adds	r3, #1
 8019e82:	eb40 0002 	adc.w	r0, r0, r2
 8019e86:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019e8a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019e8e:	bd10      	pop	{r4, pc}
 8019e90:	20000c54 	.word	0x20000c54
 8019e94:	0801e37a 	.word	0x0801e37a
 8019e98:	0801e391 	.word	0x0801e391
 8019e9c:	abcd330e 	.word	0xabcd330e
 8019ea0:	e66d1234 	.word	0xe66d1234
 8019ea4:	0005deec 	.word	0x0005deec
 8019ea8:	5851f42d 	.word	0x5851f42d
 8019eac:	4c957f2d 	.word	0x4c957f2d

08019eb0 <realloc>:
 8019eb0:	4b02      	ldr	r3, [pc, #8]	@ (8019ebc <realloc+0xc>)
 8019eb2:	460a      	mov	r2, r1
 8019eb4:	4601      	mov	r1, r0
 8019eb6:	6818      	ldr	r0, [r3, #0]
 8019eb8:	f000 b802 	b.w	8019ec0 <_realloc_r>
 8019ebc:	20000c54 	.word	0x20000c54

08019ec0 <_realloc_r>:
 8019ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ec4:	4680      	mov	r8, r0
 8019ec6:	4615      	mov	r5, r2
 8019ec8:	460c      	mov	r4, r1
 8019eca:	b921      	cbnz	r1, 8019ed6 <_realloc_r+0x16>
 8019ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed0:	4611      	mov	r1, r2
 8019ed2:	f7ff bef5 	b.w	8019cc0 <_malloc_r>
 8019ed6:	b92a      	cbnz	r2, 8019ee4 <_realloc_r+0x24>
 8019ed8:	f000 fc94 	bl	801a804 <_free_r>
 8019edc:	2400      	movs	r4, #0
 8019ede:	4620      	mov	r0, r4
 8019ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ee4:	f000 fcd8 	bl	801a898 <_malloc_usable_size_r>
 8019ee8:	4285      	cmp	r5, r0
 8019eea:	4606      	mov	r6, r0
 8019eec:	d802      	bhi.n	8019ef4 <_realloc_r+0x34>
 8019eee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019ef2:	d8f4      	bhi.n	8019ede <_realloc_r+0x1e>
 8019ef4:	4629      	mov	r1, r5
 8019ef6:	4640      	mov	r0, r8
 8019ef8:	f7ff fee2 	bl	8019cc0 <_malloc_r>
 8019efc:	4607      	mov	r7, r0
 8019efe:	2800      	cmp	r0, #0
 8019f00:	d0ec      	beq.n	8019edc <_realloc_r+0x1c>
 8019f02:	42b5      	cmp	r5, r6
 8019f04:	462a      	mov	r2, r5
 8019f06:	4621      	mov	r1, r4
 8019f08:	bf28      	it	cs
 8019f0a:	4632      	movcs	r2, r6
 8019f0c:	f000 fc41 	bl	801a792 <memcpy>
 8019f10:	4621      	mov	r1, r4
 8019f12:	4640      	mov	r0, r8
 8019f14:	f000 fc76 	bl	801a804 <_free_r>
 8019f18:	463c      	mov	r4, r7
 8019f1a:	e7e0      	b.n	8019ede <_realloc_r+0x1e>

08019f1c <_strtoul_l.constprop.0>:
 8019f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f20:	4e34      	ldr	r6, [pc, #208]	@ (8019ff4 <_strtoul_l.constprop.0+0xd8>)
 8019f22:	4686      	mov	lr, r0
 8019f24:	460d      	mov	r5, r1
 8019f26:	4628      	mov	r0, r5
 8019f28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f2c:	5d37      	ldrb	r7, [r6, r4]
 8019f2e:	f017 0708 	ands.w	r7, r7, #8
 8019f32:	d1f8      	bne.n	8019f26 <_strtoul_l.constprop.0+0xa>
 8019f34:	2c2d      	cmp	r4, #45	@ 0x2d
 8019f36:	d12f      	bne.n	8019f98 <_strtoul_l.constprop.0+0x7c>
 8019f38:	782c      	ldrb	r4, [r5, #0]
 8019f3a:	2701      	movs	r7, #1
 8019f3c:	1c85      	adds	r5, r0, #2
 8019f3e:	f033 0010 	bics.w	r0, r3, #16
 8019f42:	d109      	bne.n	8019f58 <_strtoul_l.constprop.0+0x3c>
 8019f44:	2c30      	cmp	r4, #48	@ 0x30
 8019f46:	d12c      	bne.n	8019fa2 <_strtoul_l.constprop.0+0x86>
 8019f48:	7828      	ldrb	r0, [r5, #0]
 8019f4a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019f4e:	2858      	cmp	r0, #88	@ 0x58
 8019f50:	d127      	bne.n	8019fa2 <_strtoul_l.constprop.0+0x86>
 8019f52:	786c      	ldrb	r4, [r5, #1]
 8019f54:	2310      	movs	r3, #16
 8019f56:	3502      	adds	r5, #2
 8019f58:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019f5c:	2600      	movs	r6, #0
 8019f5e:	fbb8 f8f3 	udiv	r8, r8, r3
 8019f62:	fb03 f908 	mul.w	r9, r3, r8
 8019f66:	ea6f 0909 	mvn.w	r9, r9
 8019f6a:	4630      	mov	r0, r6
 8019f6c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019f70:	f1bc 0f09 	cmp.w	ip, #9
 8019f74:	d81c      	bhi.n	8019fb0 <_strtoul_l.constprop.0+0x94>
 8019f76:	4664      	mov	r4, ip
 8019f78:	42a3      	cmp	r3, r4
 8019f7a:	dd2a      	ble.n	8019fd2 <_strtoul_l.constprop.0+0xb6>
 8019f7c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019f80:	d007      	beq.n	8019f92 <_strtoul_l.constprop.0+0x76>
 8019f82:	4580      	cmp	r8, r0
 8019f84:	d322      	bcc.n	8019fcc <_strtoul_l.constprop.0+0xb0>
 8019f86:	d101      	bne.n	8019f8c <_strtoul_l.constprop.0+0x70>
 8019f88:	45a1      	cmp	r9, r4
 8019f8a:	db1f      	blt.n	8019fcc <_strtoul_l.constprop.0+0xb0>
 8019f8c:	fb00 4003 	mla	r0, r0, r3, r4
 8019f90:	2601      	movs	r6, #1
 8019f92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f96:	e7e9      	b.n	8019f6c <_strtoul_l.constprop.0+0x50>
 8019f98:	2c2b      	cmp	r4, #43	@ 0x2b
 8019f9a:	bf04      	itt	eq
 8019f9c:	782c      	ldrbeq	r4, [r5, #0]
 8019f9e:	1c85      	addeq	r5, r0, #2
 8019fa0:	e7cd      	b.n	8019f3e <_strtoul_l.constprop.0+0x22>
 8019fa2:	2b00      	cmp	r3, #0
 8019fa4:	d1d8      	bne.n	8019f58 <_strtoul_l.constprop.0+0x3c>
 8019fa6:	2c30      	cmp	r4, #48	@ 0x30
 8019fa8:	bf0c      	ite	eq
 8019faa:	2308      	moveq	r3, #8
 8019fac:	230a      	movne	r3, #10
 8019fae:	e7d3      	b.n	8019f58 <_strtoul_l.constprop.0+0x3c>
 8019fb0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019fb4:	f1bc 0f19 	cmp.w	ip, #25
 8019fb8:	d801      	bhi.n	8019fbe <_strtoul_l.constprop.0+0xa2>
 8019fba:	3c37      	subs	r4, #55	@ 0x37
 8019fbc:	e7dc      	b.n	8019f78 <_strtoul_l.constprop.0+0x5c>
 8019fbe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019fc2:	f1bc 0f19 	cmp.w	ip, #25
 8019fc6:	d804      	bhi.n	8019fd2 <_strtoul_l.constprop.0+0xb6>
 8019fc8:	3c57      	subs	r4, #87	@ 0x57
 8019fca:	e7d5      	b.n	8019f78 <_strtoul_l.constprop.0+0x5c>
 8019fcc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019fd0:	e7df      	b.n	8019f92 <_strtoul_l.constprop.0+0x76>
 8019fd2:	1c73      	adds	r3, r6, #1
 8019fd4:	d106      	bne.n	8019fe4 <_strtoul_l.constprop.0+0xc8>
 8019fd6:	2322      	movs	r3, #34	@ 0x22
 8019fd8:	f8ce 3000 	str.w	r3, [lr]
 8019fdc:	4630      	mov	r0, r6
 8019fde:	b932      	cbnz	r2, 8019fee <_strtoul_l.constprop.0+0xd2>
 8019fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019fe4:	b107      	cbz	r7, 8019fe8 <_strtoul_l.constprop.0+0xcc>
 8019fe6:	4240      	negs	r0, r0
 8019fe8:	2a00      	cmp	r2, #0
 8019fea:	d0f9      	beq.n	8019fe0 <_strtoul_l.constprop.0+0xc4>
 8019fec:	b106      	cbz	r6, 8019ff0 <_strtoul_l.constprop.0+0xd4>
 8019fee:	1e69      	subs	r1, r5, #1
 8019ff0:	6011      	str	r1, [r2, #0]
 8019ff2:	e7f5      	b.n	8019fe0 <_strtoul_l.constprop.0+0xc4>
 8019ff4:	0801e3ea 	.word	0x0801e3ea

08019ff8 <strtoul>:
 8019ff8:	4613      	mov	r3, r2
 8019ffa:	460a      	mov	r2, r1
 8019ffc:	4601      	mov	r1, r0
 8019ffe:	4802      	ldr	r0, [pc, #8]	@ (801a008 <strtoul+0x10>)
 801a000:	6800      	ldr	r0, [r0, #0]
 801a002:	f7ff bf8b 	b.w	8019f1c <_strtoul_l.constprop.0>
 801a006:	bf00      	nop
 801a008:	20000c54 	.word	0x20000c54

0801a00c <std>:
 801a00c:	2300      	movs	r3, #0
 801a00e:	b510      	push	{r4, lr}
 801a010:	4604      	mov	r4, r0
 801a012:	e9c0 3300 	strd	r3, r3, [r0]
 801a016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a01a:	6083      	str	r3, [r0, #8]
 801a01c:	8181      	strh	r1, [r0, #12]
 801a01e:	6643      	str	r3, [r0, #100]	@ 0x64
 801a020:	81c2      	strh	r2, [r0, #14]
 801a022:	6183      	str	r3, [r0, #24]
 801a024:	4619      	mov	r1, r3
 801a026:	2208      	movs	r2, #8
 801a028:	305c      	adds	r0, #92	@ 0x5c
 801a02a:	f000 fae9 	bl	801a600 <memset>
 801a02e:	4b0d      	ldr	r3, [pc, #52]	@ (801a064 <std+0x58>)
 801a030:	6263      	str	r3, [r4, #36]	@ 0x24
 801a032:	4b0d      	ldr	r3, [pc, #52]	@ (801a068 <std+0x5c>)
 801a034:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a036:	4b0d      	ldr	r3, [pc, #52]	@ (801a06c <std+0x60>)
 801a038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a03a:	4b0d      	ldr	r3, [pc, #52]	@ (801a070 <std+0x64>)
 801a03c:	6323      	str	r3, [r4, #48]	@ 0x30
 801a03e:	4b0d      	ldr	r3, [pc, #52]	@ (801a074 <std+0x68>)
 801a040:	6224      	str	r4, [r4, #32]
 801a042:	429c      	cmp	r4, r3
 801a044:	d006      	beq.n	801a054 <std+0x48>
 801a046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a04a:	4294      	cmp	r4, r2
 801a04c:	d002      	beq.n	801a054 <std+0x48>
 801a04e:	33d0      	adds	r3, #208	@ 0xd0
 801a050:	429c      	cmp	r4, r3
 801a052:	d105      	bne.n	801a060 <std+0x54>
 801a054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a05c:	f000 bb8e 	b.w	801a77c <__retarget_lock_init_recursive>
 801a060:	bd10      	pop	{r4, pc}
 801a062:	bf00      	nop
 801a064:	0801a38d 	.word	0x0801a38d
 801a068:	0801a3af 	.word	0x0801a3af
 801a06c:	0801a3e7 	.word	0x0801a3e7
 801a070:	0801a40b 	.word	0x0801a40b
 801a074:	2000bec8 	.word	0x2000bec8

0801a078 <stdio_exit_handler>:
 801a078:	4a02      	ldr	r2, [pc, #8]	@ (801a084 <stdio_exit_handler+0xc>)
 801a07a:	4903      	ldr	r1, [pc, #12]	@ (801a088 <stdio_exit_handler+0x10>)
 801a07c:	4803      	ldr	r0, [pc, #12]	@ (801a08c <stdio_exit_handler+0x14>)
 801a07e:	f000 b869 	b.w	801a154 <_fwalk_sglue>
 801a082:	bf00      	nop
 801a084:	20000c48 	.word	0x20000c48
 801a088:	0801b201 	.word	0x0801b201
 801a08c:	20000c58 	.word	0x20000c58

0801a090 <cleanup_stdio>:
 801a090:	6841      	ldr	r1, [r0, #4]
 801a092:	4b0c      	ldr	r3, [pc, #48]	@ (801a0c4 <cleanup_stdio+0x34>)
 801a094:	4299      	cmp	r1, r3
 801a096:	b510      	push	{r4, lr}
 801a098:	4604      	mov	r4, r0
 801a09a:	d001      	beq.n	801a0a0 <cleanup_stdio+0x10>
 801a09c:	f001 f8b0 	bl	801b200 <_fflush_r>
 801a0a0:	68a1      	ldr	r1, [r4, #8]
 801a0a2:	4b09      	ldr	r3, [pc, #36]	@ (801a0c8 <cleanup_stdio+0x38>)
 801a0a4:	4299      	cmp	r1, r3
 801a0a6:	d002      	beq.n	801a0ae <cleanup_stdio+0x1e>
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	f001 f8a9 	bl	801b200 <_fflush_r>
 801a0ae:	68e1      	ldr	r1, [r4, #12]
 801a0b0:	4b06      	ldr	r3, [pc, #24]	@ (801a0cc <cleanup_stdio+0x3c>)
 801a0b2:	4299      	cmp	r1, r3
 801a0b4:	d004      	beq.n	801a0c0 <cleanup_stdio+0x30>
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0bc:	f001 b8a0 	b.w	801b200 <_fflush_r>
 801a0c0:	bd10      	pop	{r4, pc}
 801a0c2:	bf00      	nop
 801a0c4:	2000bec8 	.word	0x2000bec8
 801a0c8:	2000bf30 	.word	0x2000bf30
 801a0cc:	2000bf98 	.word	0x2000bf98

0801a0d0 <global_stdio_init.part.0>:
 801a0d0:	b510      	push	{r4, lr}
 801a0d2:	4b0b      	ldr	r3, [pc, #44]	@ (801a100 <global_stdio_init.part.0+0x30>)
 801a0d4:	4c0b      	ldr	r4, [pc, #44]	@ (801a104 <global_stdio_init.part.0+0x34>)
 801a0d6:	4a0c      	ldr	r2, [pc, #48]	@ (801a108 <global_stdio_init.part.0+0x38>)
 801a0d8:	601a      	str	r2, [r3, #0]
 801a0da:	4620      	mov	r0, r4
 801a0dc:	2200      	movs	r2, #0
 801a0de:	2104      	movs	r1, #4
 801a0e0:	f7ff ff94 	bl	801a00c <std>
 801a0e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a0e8:	2201      	movs	r2, #1
 801a0ea:	2109      	movs	r1, #9
 801a0ec:	f7ff ff8e 	bl	801a00c <std>
 801a0f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a0f4:	2202      	movs	r2, #2
 801a0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0fa:	2112      	movs	r1, #18
 801a0fc:	f7ff bf86 	b.w	801a00c <std>
 801a100:	2000c000 	.word	0x2000c000
 801a104:	2000bec8 	.word	0x2000bec8
 801a108:	0801a079 	.word	0x0801a079

0801a10c <__sfp_lock_acquire>:
 801a10c:	4801      	ldr	r0, [pc, #4]	@ (801a114 <__sfp_lock_acquire+0x8>)
 801a10e:	f000 bb36 	b.w	801a77e <__retarget_lock_acquire_recursive>
 801a112:	bf00      	nop
 801a114:	2000c00a 	.word	0x2000c00a

0801a118 <__sfp_lock_release>:
 801a118:	4801      	ldr	r0, [pc, #4]	@ (801a120 <__sfp_lock_release+0x8>)
 801a11a:	f000 bb31 	b.w	801a780 <__retarget_lock_release_recursive>
 801a11e:	bf00      	nop
 801a120:	2000c00a 	.word	0x2000c00a

0801a124 <__sinit>:
 801a124:	b510      	push	{r4, lr}
 801a126:	4604      	mov	r4, r0
 801a128:	f7ff fff0 	bl	801a10c <__sfp_lock_acquire>
 801a12c:	6a23      	ldr	r3, [r4, #32]
 801a12e:	b11b      	cbz	r3, 801a138 <__sinit+0x14>
 801a130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a134:	f7ff bff0 	b.w	801a118 <__sfp_lock_release>
 801a138:	4b04      	ldr	r3, [pc, #16]	@ (801a14c <__sinit+0x28>)
 801a13a:	6223      	str	r3, [r4, #32]
 801a13c:	4b04      	ldr	r3, [pc, #16]	@ (801a150 <__sinit+0x2c>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d1f5      	bne.n	801a130 <__sinit+0xc>
 801a144:	f7ff ffc4 	bl	801a0d0 <global_stdio_init.part.0>
 801a148:	e7f2      	b.n	801a130 <__sinit+0xc>
 801a14a:	bf00      	nop
 801a14c:	0801a091 	.word	0x0801a091
 801a150:	2000c000 	.word	0x2000c000

0801a154 <_fwalk_sglue>:
 801a154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a158:	4607      	mov	r7, r0
 801a15a:	4688      	mov	r8, r1
 801a15c:	4614      	mov	r4, r2
 801a15e:	2600      	movs	r6, #0
 801a160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a164:	f1b9 0901 	subs.w	r9, r9, #1
 801a168:	d505      	bpl.n	801a176 <_fwalk_sglue+0x22>
 801a16a:	6824      	ldr	r4, [r4, #0]
 801a16c:	2c00      	cmp	r4, #0
 801a16e:	d1f7      	bne.n	801a160 <_fwalk_sglue+0xc>
 801a170:	4630      	mov	r0, r6
 801a172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a176:	89ab      	ldrh	r3, [r5, #12]
 801a178:	2b01      	cmp	r3, #1
 801a17a:	d907      	bls.n	801a18c <_fwalk_sglue+0x38>
 801a17c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a180:	3301      	adds	r3, #1
 801a182:	d003      	beq.n	801a18c <_fwalk_sglue+0x38>
 801a184:	4629      	mov	r1, r5
 801a186:	4638      	mov	r0, r7
 801a188:	47c0      	blx	r8
 801a18a:	4306      	orrs	r6, r0
 801a18c:	3568      	adds	r5, #104	@ 0x68
 801a18e:	e7e9      	b.n	801a164 <_fwalk_sglue+0x10>

0801a190 <_fwrite_r>:
 801a190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a194:	9c08      	ldr	r4, [sp, #32]
 801a196:	468a      	mov	sl, r1
 801a198:	4690      	mov	r8, r2
 801a19a:	fb02 f903 	mul.w	r9, r2, r3
 801a19e:	4606      	mov	r6, r0
 801a1a0:	b118      	cbz	r0, 801a1aa <_fwrite_r+0x1a>
 801a1a2:	6a03      	ldr	r3, [r0, #32]
 801a1a4:	b90b      	cbnz	r3, 801a1aa <_fwrite_r+0x1a>
 801a1a6:	f7ff ffbd 	bl	801a124 <__sinit>
 801a1aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a1ac:	07dd      	lsls	r5, r3, #31
 801a1ae:	d405      	bmi.n	801a1bc <_fwrite_r+0x2c>
 801a1b0:	89a3      	ldrh	r3, [r4, #12]
 801a1b2:	0598      	lsls	r0, r3, #22
 801a1b4:	d402      	bmi.n	801a1bc <_fwrite_r+0x2c>
 801a1b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a1b8:	f000 fae1 	bl	801a77e <__retarget_lock_acquire_recursive>
 801a1bc:	89a3      	ldrh	r3, [r4, #12]
 801a1be:	0719      	lsls	r1, r3, #28
 801a1c0:	d516      	bpl.n	801a1f0 <_fwrite_r+0x60>
 801a1c2:	6923      	ldr	r3, [r4, #16]
 801a1c4:	b1a3      	cbz	r3, 801a1f0 <_fwrite_r+0x60>
 801a1c6:	2500      	movs	r5, #0
 801a1c8:	454d      	cmp	r5, r9
 801a1ca:	d01f      	beq.n	801a20c <_fwrite_r+0x7c>
 801a1cc:	68a7      	ldr	r7, [r4, #8]
 801a1ce:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801a1d2:	3f01      	subs	r7, #1
 801a1d4:	2f00      	cmp	r7, #0
 801a1d6:	60a7      	str	r7, [r4, #8]
 801a1d8:	da04      	bge.n	801a1e4 <_fwrite_r+0x54>
 801a1da:	69a3      	ldr	r3, [r4, #24]
 801a1dc:	429f      	cmp	r7, r3
 801a1de:	db0f      	blt.n	801a200 <_fwrite_r+0x70>
 801a1e0:	290a      	cmp	r1, #10
 801a1e2:	d00d      	beq.n	801a200 <_fwrite_r+0x70>
 801a1e4:	6823      	ldr	r3, [r4, #0]
 801a1e6:	1c5a      	adds	r2, r3, #1
 801a1e8:	6022      	str	r2, [r4, #0]
 801a1ea:	7019      	strb	r1, [r3, #0]
 801a1ec:	3501      	adds	r5, #1
 801a1ee:	e7eb      	b.n	801a1c8 <_fwrite_r+0x38>
 801a1f0:	4621      	mov	r1, r4
 801a1f2:	4630      	mov	r0, r6
 801a1f4:	f000 f984 	bl	801a500 <__swsetup_r>
 801a1f8:	2800      	cmp	r0, #0
 801a1fa:	d0e4      	beq.n	801a1c6 <_fwrite_r+0x36>
 801a1fc:	2500      	movs	r5, #0
 801a1fe:	e005      	b.n	801a20c <_fwrite_r+0x7c>
 801a200:	4622      	mov	r2, r4
 801a202:	4630      	mov	r0, r6
 801a204:	f000 f93e 	bl	801a484 <__swbuf_r>
 801a208:	3001      	adds	r0, #1
 801a20a:	d1ef      	bne.n	801a1ec <_fwrite_r+0x5c>
 801a20c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a20e:	07da      	lsls	r2, r3, #31
 801a210:	d405      	bmi.n	801a21e <_fwrite_r+0x8e>
 801a212:	89a3      	ldrh	r3, [r4, #12]
 801a214:	059b      	lsls	r3, r3, #22
 801a216:	d402      	bmi.n	801a21e <_fwrite_r+0x8e>
 801a218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a21a:	f000 fab1 	bl	801a780 <__retarget_lock_release_recursive>
 801a21e:	fbb5 f0f8 	udiv	r0, r5, r8
 801a222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801a228 <fwrite>:
 801a228:	b507      	push	{r0, r1, r2, lr}
 801a22a:	9300      	str	r3, [sp, #0]
 801a22c:	4613      	mov	r3, r2
 801a22e:	460a      	mov	r2, r1
 801a230:	4601      	mov	r1, r0
 801a232:	4803      	ldr	r0, [pc, #12]	@ (801a240 <fwrite+0x18>)
 801a234:	6800      	ldr	r0, [r0, #0]
 801a236:	f7ff ffab 	bl	801a190 <_fwrite_r>
 801a23a:	b003      	add	sp, #12
 801a23c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a240:	20000c54 	.word	0x20000c54

0801a244 <iprintf>:
 801a244:	b40f      	push	{r0, r1, r2, r3}
 801a246:	b507      	push	{r0, r1, r2, lr}
 801a248:	4906      	ldr	r1, [pc, #24]	@ (801a264 <iprintf+0x20>)
 801a24a:	ab04      	add	r3, sp, #16
 801a24c:	6808      	ldr	r0, [r1, #0]
 801a24e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a252:	6881      	ldr	r1, [r0, #8]
 801a254:	9301      	str	r3, [sp, #4]
 801a256:	f000 fca9 	bl	801abac <_vfiprintf_r>
 801a25a:	b003      	add	sp, #12
 801a25c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a260:	b004      	add	sp, #16
 801a262:	4770      	bx	lr
 801a264:	20000c54 	.word	0x20000c54

0801a268 <_puts_r>:
 801a268:	6a03      	ldr	r3, [r0, #32]
 801a26a:	b570      	push	{r4, r5, r6, lr}
 801a26c:	6884      	ldr	r4, [r0, #8]
 801a26e:	4605      	mov	r5, r0
 801a270:	460e      	mov	r6, r1
 801a272:	b90b      	cbnz	r3, 801a278 <_puts_r+0x10>
 801a274:	f7ff ff56 	bl	801a124 <__sinit>
 801a278:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a27a:	07db      	lsls	r3, r3, #31
 801a27c:	d405      	bmi.n	801a28a <_puts_r+0x22>
 801a27e:	89a3      	ldrh	r3, [r4, #12]
 801a280:	0598      	lsls	r0, r3, #22
 801a282:	d402      	bmi.n	801a28a <_puts_r+0x22>
 801a284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a286:	f000 fa7a 	bl	801a77e <__retarget_lock_acquire_recursive>
 801a28a:	89a3      	ldrh	r3, [r4, #12]
 801a28c:	0719      	lsls	r1, r3, #28
 801a28e:	d502      	bpl.n	801a296 <_puts_r+0x2e>
 801a290:	6923      	ldr	r3, [r4, #16]
 801a292:	2b00      	cmp	r3, #0
 801a294:	d135      	bne.n	801a302 <_puts_r+0x9a>
 801a296:	4621      	mov	r1, r4
 801a298:	4628      	mov	r0, r5
 801a29a:	f000 f931 	bl	801a500 <__swsetup_r>
 801a29e:	b380      	cbz	r0, 801a302 <_puts_r+0x9a>
 801a2a0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a2a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a2a6:	07da      	lsls	r2, r3, #31
 801a2a8:	d405      	bmi.n	801a2b6 <_puts_r+0x4e>
 801a2aa:	89a3      	ldrh	r3, [r4, #12]
 801a2ac:	059b      	lsls	r3, r3, #22
 801a2ae:	d402      	bmi.n	801a2b6 <_puts_r+0x4e>
 801a2b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a2b2:	f000 fa65 	bl	801a780 <__retarget_lock_release_recursive>
 801a2b6:	4628      	mov	r0, r5
 801a2b8:	bd70      	pop	{r4, r5, r6, pc}
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	da04      	bge.n	801a2c8 <_puts_r+0x60>
 801a2be:	69a2      	ldr	r2, [r4, #24]
 801a2c0:	429a      	cmp	r2, r3
 801a2c2:	dc17      	bgt.n	801a2f4 <_puts_r+0x8c>
 801a2c4:	290a      	cmp	r1, #10
 801a2c6:	d015      	beq.n	801a2f4 <_puts_r+0x8c>
 801a2c8:	6823      	ldr	r3, [r4, #0]
 801a2ca:	1c5a      	adds	r2, r3, #1
 801a2cc:	6022      	str	r2, [r4, #0]
 801a2ce:	7019      	strb	r1, [r3, #0]
 801a2d0:	68a3      	ldr	r3, [r4, #8]
 801a2d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a2d6:	3b01      	subs	r3, #1
 801a2d8:	60a3      	str	r3, [r4, #8]
 801a2da:	2900      	cmp	r1, #0
 801a2dc:	d1ed      	bne.n	801a2ba <_puts_r+0x52>
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	da11      	bge.n	801a306 <_puts_r+0x9e>
 801a2e2:	4622      	mov	r2, r4
 801a2e4:	210a      	movs	r1, #10
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	f000 f8cc 	bl	801a484 <__swbuf_r>
 801a2ec:	3001      	adds	r0, #1
 801a2ee:	d0d7      	beq.n	801a2a0 <_puts_r+0x38>
 801a2f0:	250a      	movs	r5, #10
 801a2f2:	e7d7      	b.n	801a2a4 <_puts_r+0x3c>
 801a2f4:	4622      	mov	r2, r4
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	f000 f8c4 	bl	801a484 <__swbuf_r>
 801a2fc:	3001      	adds	r0, #1
 801a2fe:	d1e7      	bne.n	801a2d0 <_puts_r+0x68>
 801a300:	e7ce      	b.n	801a2a0 <_puts_r+0x38>
 801a302:	3e01      	subs	r6, #1
 801a304:	e7e4      	b.n	801a2d0 <_puts_r+0x68>
 801a306:	6823      	ldr	r3, [r4, #0]
 801a308:	1c5a      	adds	r2, r3, #1
 801a30a:	6022      	str	r2, [r4, #0]
 801a30c:	220a      	movs	r2, #10
 801a30e:	701a      	strb	r2, [r3, #0]
 801a310:	e7ee      	b.n	801a2f0 <_puts_r+0x88>
	...

0801a314 <puts>:
 801a314:	4b02      	ldr	r3, [pc, #8]	@ (801a320 <puts+0xc>)
 801a316:	4601      	mov	r1, r0
 801a318:	6818      	ldr	r0, [r3, #0]
 801a31a:	f7ff bfa5 	b.w	801a268 <_puts_r>
 801a31e:	bf00      	nop
 801a320:	20000c54 	.word	0x20000c54

0801a324 <sniprintf>:
 801a324:	b40c      	push	{r2, r3}
 801a326:	b530      	push	{r4, r5, lr}
 801a328:	4b17      	ldr	r3, [pc, #92]	@ (801a388 <sniprintf+0x64>)
 801a32a:	1e0c      	subs	r4, r1, #0
 801a32c:	681d      	ldr	r5, [r3, #0]
 801a32e:	b09d      	sub	sp, #116	@ 0x74
 801a330:	da08      	bge.n	801a344 <sniprintf+0x20>
 801a332:	238b      	movs	r3, #139	@ 0x8b
 801a334:	602b      	str	r3, [r5, #0]
 801a336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a33a:	b01d      	add	sp, #116	@ 0x74
 801a33c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a340:	b002      	add	sp, #8
 801a342:	4770      	bx	lr
 801a344:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a348:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a34c:	bf14      	ite	ne
 801a34e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a352:	4623      	moveq	r3, r4
 801a354:	9304      	str	r3, [sp, #16]
 801a356:	9307      	str	r3, [sp, #28]
 801a358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a35c:	9002      	str	r0, [sp, #8]
 801a35e:	9006      	str	r0, [sp, #24]
 801a360:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a364:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a366:	ab21      	add	r3, sp, #132	@ 0x84
 801a368:	a902      	add	r1, sp, #8
 801a36a:	4628      	mov	r0, r5
 801a36c:	9301      	str	r3, [sp, #4]
 801a36e:	f000 faf7 	bl	801a960 <_svfiprintf_r>
 801a372:	1c43      	adds	r3, r0, #1
 801a374:	bfbc      	itt	lt
 801a376:	238b      	movlt	r3, #139	@ 0x8b
 801a378:	602b      	strlt	r3, [r5, #0]
 801a37a:	2c00      	cmp	r4, #0
 801a37c:	d0dd      	beq.n	801a33a <sniprintf+0x16>
 801a37e:	9b02      	ldr	r3, [sp, #8]
 801a380:	2200      	movs	r2, #0
 801a382:	701a      	strb	r2, [r3, #0]
 801a384:	e7d9      	b.n	801a33a <sniprintf+0x16>
 801a386:	bf00      	nop
 801a388:	20000c54 	.word	0x20000c54

0801a38c <__sread>:
 801a38c:	b510      	push	{r4, lr}
 801a38e:	460c      	mov	r4, r1
 801a390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a394:	f000 f994 	bl	801a6c0 <_read_r>
 801a398:	2800      	cmp	r0, #0
 801a39a:	bfab      	itete	ge
 801a39c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a39e:	89a3      	ldrhlt	r3, [r4, #12]
 801a3a0:	181b      	addge	r3, r3, r0
 801a3a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a3a6:	bfac      	ite	ge
 801a3a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a3aa:	81a3      	strhlt	r3, [r4, #12]
 801a3ac:	bd10      	pop	{r4, pc}

0801a3ae <__swrite>:
 801a3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3b2:	461f      	mov	r7, r3
 801a3b4:	898b      	ldrh	r3, [r1, #12]
 801a3b6:	05db      	lsls	r3, r3, #23
 801a3b8:	4605      	mov	r5, r0
 801a3ba:	460c      	mov	r4, r1
 801a3bc:	4616      	mov	r6, r2
 801a3be:	d505      	bpl.n	801a3cc <__swrite+0x1e>
 801a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3c4:	2302      	movs	r3, #2
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	f000 f968 	bl	801a69c <_lseek_r>
 801a3cc:	89a3      	ldrh	r3, [r4, #12]
 801a3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a3d6:	81a3      	strh	r3, [r4, #12]
 801a3d8:	4632      	mov	r2, r6
 801a3da:	463b      	mov	r3, r7
 801a3dc:	4628      	mov	r0, r5
 801a3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3e2:	f000 b98f 	b.w	801a704 <_write_r>

0801a3e6 <__sseek>:
 801a3e6:	b510      	push	{r4, lr}
 801a3e8:	460c      	mov	r4, r1
 801a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ee:	f000 f955 	bl	801a69c <_lseek_r>
 801a3f2:	1c43      	adds	r3, r0, #1
 801a3f4:	89a3      	ldrh	r3, [r4, #12]
 801a3f6:	bf15      	itete	ne
 801a3f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a3fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a3fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a402:	81a3      	strheq	r3, [r4, #12]
 801a404:	bf18      	it	ne
 801a406:	81a3      	strhne	r3, [r4, #12]
 801a408:	bd10      	pop	{r4, pc}

0801a40a <__sclose>:
 801a40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a40e:	f000 b935 	b.w	801a67c <_close_r>

0801a412 <_vsniprintf_r>:
 801a412:	b530      	push	{r4, r5, lr}
 801a414:	4614      	mov	r4, r2
 801a416:	2c00      	cmp	r4, #0
 801a418:	b09b      	sub	sp, #108	@ 0x6c
 801a41a:	4605      	mov	r5, r0
 801a41c:	461a      	mov	r2, r3
 801a41e:	da05      	bge.n	801a42c <_vsniprintf_r+0x1a>
 801a420:	238b      	movs	r3, #139	@ 0x8b
 801a422:	6003      	str	r3, [r0, #0]
 801a424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a428:	b01b      	add	sp, #108	@ 0x6c
 801a42a:	bd30      	pop	{r4, r5, pc}
 801a42c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a430:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a434:	bf14      	ite	ne
 801a436:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a43a:	4623      	moveq	r3, r4
 801a43c:	9302      	str	r3, [sp, #8]
 801a43e:	9305      	str	r3, [sp, #20]
 801a440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a444:	9100      	str	r1, [sp, #0]
 801a446:	9104      	str	r1, [sp, #16]
 801a448:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a44c:	4669      	mov	r1, sp
 801a44e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a450:	f000 fa86 	bl	801a960 <_svfiprintf_r>
 801a454:	1c43      	adds	r3, r0, #1
 801a456:	bfbc      	itt	lt
 801a458:	238b      	movlt	r3, #139	@ 0x8b
 801a45a:	602b      	strlt	r3, [r5, #0]
 801a45c:	2c00      	cmp	r4, #0
 801a45e:	d0e3      	beq.n	801a428 <_vsniprintf_r+0x16>
 801a460:	9b00      	ldr	r3, [sp, #0]
 801a462:	2200      	movs	r2, #0
 801a464:	701a      	strb	r2, [r3, #0]
 801a466:	e7df      	b.n	801a428 <_vsniprintf_r+0x16>

0801a468 <vsniprintf>:
 801a468:	b507      	push	{r0, r1, r2, lr}
 801a46a:	9300      	str	r3, [sp, #0]
 801a46c:	4613      	mov	r3, r2
 801a46e:	460a      	mov	r2, r1
 801a470:	4601      	mov	r1, r0
 801a472:	4803      	ldr	r0, [pc, #12]	@ (801a480 <vsniprintf+0x18>)
 801a474:	6800      	ldr	r0, [r0, #0]
 801a476:	f7ff ffcc 	bl	801a412 <_vsniprintf_r>
 801a47a:	b003      	add	sp, #12
 801a47c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a480:	20000c54 	.word	0x20000c54

0801a484 <__swbuf_r>:
 801a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a486:	460e      	mov	r6, r1
 801a488:	4614      	mov	r4, r2
 801a48a:	4605      	mov	r5, r0
 801a48c:	b118      	cbz	r0, 801a496 <__swbuf_r+0x12>
 801a48e:	6a03      	ldr	r3, [r0, #32]
 801a490:	b90b      	cbnz	r3, 801a496 <__swbuf_r+0x12>
 801a492:	f7ff fe47 	bl	801a124 <__sinit>
 801a496:	69a3      	ldr	r3, [r4, #24]
 801a498:	60a3      	str	r3, [r4, #8]
 801a49a:	89a3      	ldrh	r3, [r4, #12]
 801a49c:	071a      	lsls	r2, r3, #28
 801a49e:	d501      	bpl.n	801a4a4 <__swbuf_r+0x20>
 801a4a0:	6923      	ldr	r3, [r4, #16]
 801a4a2:	b943      	cbnz	r3, 801a4b6 <__swbuf_r+0x32>
 801a4a4:	4621      	mov	r1, r4
 801a4a6:	4628      	mov	r0, r5
 801a4a8:	f000 f82a 	bl	801a500 <__swsetup_r>
 801a4ac:	b118      	cbz	r0, 801a4b6 <__swbuf_r+0x32>
 801a4ae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a4b2:	4638      	mov	r0, r7
 801a4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4b6:	6823      	ldr	r3, [r4, #0]
 801a4b8:	6922      	ldr	r2, [r4, #16]
 801a4ba:	1a98      	subs	r0, r3, r2
 801a4bc:	6963      	ldr	r3, [r4, #20]
 801a4be:	b2f6      	uxtb	r6, r6
 801a4c0:	4283      	cmp	r3, r0
 801a4c2:	4637      	mov	r7, r6
 801a4c4:	dc05      	bgt.n	801a4d2 <__swbuf_r+0x4e>
 801a4c6:	4621      	mov	r1, r4
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	f000 fe99 	bl	801b200 <_fflush_r>
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	d1ed      	bne.n	801a4ae <__swbuf_r+0x2a>
 801a4d2:	68a3      	ldr	r3, [r4, #8]
 801a4d4:	3b01      	subs	r3, #1
 801a4d6:	60a3      	str	r3, [r4, #8]
 801a4d8:	6823      	ldr	r3, [r4, #0]
 801a4da:	1c5a      	adds	r2, r3, #1
 801a4dc:	6022      	str	r2, [r4, #0]
 801a4de:	701e      	strb	r6, [r3, #0]
 801a4e0:	6962      	ldr	r2, [r4, #20]
 801a4e2:	1c43      	adds	r3, r0, #1
 801a4e4:	429a      	cmp	r2, r3
 801a4e6:	d004      	beq.n	801a4f2 <__swbuf_r+0x6e>
 801a4e8:	89a3      	ldrh	r3, [r4, #12]
 801a4ea:	07db      	lsls	r3, r3, #31
 801a4ec:	d5e1      	bpl.n	801a4b2 <__swbuf_r+0x2e>
 801a4ee:	2e0a      	cmp	r6, #10
 801a4f0:	d1df      	bne.n	801a4b2 <__swbuf_r+0x2e>
 801a4f2:	4621      	mov	r1, r4
 801a4f4:	4628      	mov	r0, r5
 801a4f6:	f000 fe83 	bl	801b200 <_fflush_r>
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	d0d9      	beq.n	801a4b2 <__swbuf_r+0x2e>
 801a4fe:	e7d6      	b.n	801a4ae <__swbuf_r+0x2a>

0801a500 <__swsetup_r>:
 801a500:	b538      	push	{r3, r4, r5, lr}
 801a502:	4b29      	ldr	r3, [pc, #164]	@ (801a5a8 <__swsetup_r+0xa8>)
 801a504:	4605      	mov	r5, r0
 801a506:	6818      	ldr	r0, [r3, #0]
 801a508:	460c      	mov	r4, r1
 801a50a:	b118      	cbz	r0, 801a514 <__swsetup_r+0x14>
 801a50c:	6a03      	ldr	r3, [r0, #32]
 801a50e:	b90b      	cbnz	r3, 801a514 <__swsetup_r+0x14>
 801a510:	f7ff fe08 	bl	801a124 <__sinit>
 801a514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a518:	0719      	lsls	r1, r3, #28
 801a51a:	d422      	bmi.n	801a562 <__swsetup_r+0x62>
 801a51c:	06da      	lsls	r2, r3, #27
 801a51e:	d407      	bmi.n	801a530 <__swsetup_r+0x30>
 801a520:	2209      	movs	r2, #9
 801a522:	602a      	str	r2, [r5, #0]
 801a524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a528:	81a3      	strh	r3, [r4, #12]
 801a52a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a52e:	e033      	b.n	801a598 <__swsetup_r+0x98>
 801a530:	0758      	lsls	r0, r3, #29
 801a532:	d512      	bpl.n	801a55a <__swsetup_r+0x5a>
 801a534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a536:	b141      	cbz	r1, 801a54a <__swsetup_r+0x4a>
 801a538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a53c:	4299      	cmp	r1, r3
 801a53e:	d002      	beq.n	801a546 <__swsetup_r+0x46>
 801a540:	4628      	mov	r0, r5
 801a542:	f000 f95f 	bl	801a804 <_free_r>
 801a546:	2300      	movs	r3, #0
 801a548:	6363      	str	r3, [r4, #52]	@ 0x34
 801a54a:	89a3      	ldrh	r3, [r4, #12]
 801a54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a550:	81a3      	strh	r3, [r4, #12]
 801a552:	2300      	movs	r3, #0
 801a554:	6063      	str	r3, [r4, #4]
 801a556:	6923      	ldr	r3, [r4, #16]
 801a558:	6023      	str	r3, [r4, #0]
 801a55a:	89a3      	ldrh	r3, [r4, #12]
 801a55c:	f043 0308 	orr.w	r3, r3, #8
 801a560:	81a3      	strh	r3, [r4, #12]
 801a562:	6923      	ldr	r3, [r4, #16]
 801a564:	b94b      	cbnz	r3, 801a57a <__swsetup_r+0x7a>
 801a566:	89a3      	ldrh	r3, [r4, #12]
 801a568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a570:	d003      	beq.n	801a57a <__swsetup_r+0x7a>
 801a572:	4621      	mov	r1, r4
 801a574:	4628      	mov	r0, r5
 801a576:	f000 fea3 	bl	801b2c0 <__smakebuf_r>
 801a57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a57e:	f013 0201 	ands.w	r2, r3, #1
 801a582:	d00a      	beq.n	801a59a <__swsetup_r+0x9a>
 801a584:	2200      	movs	r2, #0
 801a586:	60a2      	str	r2, [r4, #8]
 801a588:	6962      	ldr	r2, [r4, #20]
 801a58a:	4252      	negs	r2, r2
 801a58c:	61a2      	str	r2, [r4, #24]
 801a58e:	6922      	ldr	r2, [r4, #16]
 801a590:	b942      	cbnz	r2, 801a5a4 <__swsetup_r+0xa4>
 801a592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a596:	d1c5      	bne.n	801a524 <__swsetup_r+0x24>
 801a598:	bd38      	pop	{r3, r4, r5, pc}
 801a59a:	0799      	lsls	r1, r3, #30
 801a59c:	bf58      	it	pl
 801a59e:	6962      	ldrpl	r2, [r4, #20]
 801a5a0:	60a2      	str	r2, [r4, #8]
 801a5a2:	e7f4      	b.n	801a58e <__swsetup_r+0x8e>
 801a5a4:	2000      	movs	r0, #0
 801a5a6:	e7f7      	b.n	801a598 <__swsetup_r+0x98>
 801a5a8:	20000c54 	.word	0x20000c54

0801a5ac <memcmp>:
 801a5ac:	b510      	push	{r4, lr}
 801a5ae:	3901      	subs	r1, #1
 801a5b0:	4402      	add	r2, r0
 801a5b2:	4290      	cmp	r0, r2
 801a5b4:	d101      	bne.n	801a5ba <memcmp+0xe>
 801a5b6:	2000      	movs	r0, #0
 801a5b8:	e005      	b.n	801a5c6 <memcmp+0x1a>
 801a5ba:	7803      	ldrb	r3, [r0, #0]
 801a5bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a5c0:	42a3      	cmp	r3, r4
 801a5c2:	d001      	beq.n	801a5c8 <memcmp+0x1c>
 801a5c4:	1b18      	subs	r0, r3, r4
 801a5c6:	bd10      	pop	{r4, pc}
 801a5c8:	3001      	adds	r0, #1
 801a5ca:	e7f2      	b.n	801a5b2 <memcmp+0x6>

0801a5cc <memmove>:
 801a5cc:	4288      	cmp	r0, r1
 801a5ce:	b510      	push	{r4, lr}
 801a5d0:	eb01 0402 	add.w	r4, r1, r2
 801a5d4:	d902      	bls.n	801a5dc <memmove+0x10>
 801a5d6:	4284      	cmp	r4, r0
 801a5d8:	4623      	mov	r3, r4
 801a5da:	d807      	bhi.n	801a5ec <memmove+0x20>
 801a5dc:	1e43      	subs	r3, r0, #1
 801a5de:	42a1      	cmp	r1, r4
 801a5e0:	d008      	beq.n	801a5f4 <memmove+0x28>
 801a5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a5e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a5ea:	e7f8      	b.n	801a5de <memmove+0x12>
 801a5ec:	4402      	add	r2, r0
 801a5ee:	4601      	mov	r1, r0
 801a5f0:	428a      	cmp	r2, r1
 801a5f2:	d100      	bne.n	801a5f6 <memmove+0x2a>
 801a5f4:	bd10      	pop	{r4, pc}
 801a5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a5fe:	e7f7      	b.n	801a5f0 <memmove+0x24>

0801a600 <memset>:
 801a600:	4402      	add	r2, r0
 801a602:	4603      	mov	r3, r0
 801a604:	4293      	cmp	r3, r2
 801a606:	d100      	bne.n	801a60a <memset+0xa>
 801a608:	4770      	bx	lr
 801a60a:	f803 1b01 	strb.w	r1, [r3], #1
 801a60e:	e7f9      	b.n	801a604 <memset+0x4>

0801a610 <strchr>:
 801a610:	b2c9      	uxtb	r1, r1
 801a612:	4603      	mov	r3, r0
 801a614:	4618      	mov	r0, r3
 801a616:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a61a:	b112      	cbz	r2, 801a622 <strchr+0x12>
 801a61c:	428a      	cmp	r2, r1
 801a61e:	d1f9      	bne.n	801a614 <strchr+0x4>
 801a620:	4770      	bx	lr
 801a622:	2900      	cmp	r1, #0
 801a624:	bf18      	it	ne
 801a626:	2000      	movne	r0, #0
 801a628:	4770      	bx	lr

0801a62a <strncmp>:
 801a62a:	b510      	push	{r4, lr}
 801a62c:	b16a      	cbz	r2, 801a64a <strncmp+0x20>
 801a62e:	3901      	subs	r1, #1
 801a630:	1884      	adds	r4, r0, r2
 801a632:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a636:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d103      	bne.n	801a646 <strncmp+0x1c>
 801a63e:	42a0      	cmp	r0, r4
 801a640:	d001      	beq.n	801a646 <strncmp+0x1c>
 801a642:	2a00      	cmp	r2, #0
 801a644:	d1f5      	bne.n	801a632 <strncmp+0x8>
 801a646:	1ad0      	subs	r0, r2, r3
 801a648:	bd10      	pop	{r4, pc}
 801a64a:	4610      	mov	r0, r2
 801a64c:	e7fc      	b.n	801a648 <strncmp+0x1e>

0801a64e <strstr>:
 801a64e:	780a      	ldrb	r2, [r1, #0]
 801a650:	b570      	push	{r4, r5, r6, lr}
 801a652:	b96a      	cbnz	r2, 801a670 <strstr+0x22>
 801a654:	bd70      	pop	{r4, r5, r6, pc}
 801a656:	429a      	cmp	r2, r3
 801a658:	d109      	bne.n	801a66e <strstr+0x20>
 801a65a:	460c      	mov	r4, r1
 801a65c:	4605      	mov	r5, r0
 801a65e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a662:	2b00      	cmp	r3, #0
 801a664:	d0f6      	beq.n	801a654 <strstr+0x6>
 801a666:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a66a:	429e      	cmp	r6, r3
 801a66c:	d0f7      	beq.n	801a65e <strstr+0x10>
 801a66e:	3001      	adds	r0, #1
 801a670:	7803      	ldrb	r3, [r0, #0]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d1ef      	bne.n	801a656 <strstr+0x8>
 801a676:	4618      	mov	r0, r3
 801a678:	e7ec      	b.n	801a654 <strstr+0x6>
	...

0801a67c <_close_r>:
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4d06      	ldr	r5, [pc, #24]	@ (801a698 <_close_r+0x1c>)
 801a680:	2300      	movs	r3, #0
 801a682:	4604      	mov	r4, r0
 801a684:	4608      	mov	r0, r1
 801a686:	602b      	str	r3, [r5, #0]
 801a688:	f7e8 f968 	bl	800295c <_close>
 801a68c:	1c43      	adds	r3, r0, #1
 801a68e:	d102      	bne.n	801a696 <_close_r+0x1a>
 801a690:	682b      	ldr	r3, [r5, #0]
 801a692:	b103      	cbz	r3, 801a696 <_close_r+0x1a>
 801a694:	6023      	str	r3, [r4, #0]
 801a696:	bd38      	pop	{r3, r4, r5, pc}
 801a698:	2000c004 	.word	0x2000c004

0801a69c <_lseek_r>:
 801a69c:	b538      	push	{r3, r4, r5, lr}
 801a69e:	4d07      	ldr	r5, [pc, #28]	@ (801a6bc <_lseek_r+0x20>)
 801a6a0:	4604      	mov	r4, r0
 801a6a2:	4608      	mov	r0, r1
 801a6a4:	4611      	mov	r1, r2
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	602a      	str	r2, [r5, #0]
 801a6aa:	461a      	mov	r2, r3
 801a6ac:	f7e8 f97d 	bl	80029aa <_lseek>
 801a6b0:	1c43      	adds	r3, r0, #1
 801a6b2:	d102      	bne.n	801a6ba <_lseek_r+0x1e>
 801a6b4:	682b      	ldr	r3, [r5, #0]
 801a6b6:	b103      	cbz	r3, 801a6ba <_lseek_r+0x1e>
 801a6b8:	6023      	str	r3, [r4, #0]
 801a6ba:	bd38      	pop	{r3, r4, r5, pc}
 801a6bc:	2000c004 	.word	0x2000c004

0801a6c0 <_read_r>:
 801a6c0:	b538      	push	{r3, r4, r5, lr}
 801a6c2:	4d07      	ldr	r5, [pc, #28]	@ (801a6e0 <_read_r+0x20>)
 801a6c4:	4604      	mov	r4, r0
 801a6c6:	4608      	mov	r0, r1
 801a6c8:	4611      	mov	r1, r2
 801a6ca:	2200      	movs	r2, #0
 801a6cc:	602a      	str	r2, [r5, #0]
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	f7e8 f90b 	bl	80028ea <_read>
 801a6d4:	1c43      	adds	r3, r0, #1
 801a6d6:	d102      	bne.n	801a6de <_read_r+0x1e>
 801a6d8:	682b      	ldr	r3, [r5, #0]
 801a6da:	b103      	cbz	r3, 801a6de <_read_r+0x1e>
 801a6dc:	6023      	str	r3, [r4, #0]
 801a6de:	bd38      	pop	{r3, r4, r5, pc}
 801a6e0:	2000c004 	.word	0x2000c004

0801a6e4 <_sbrk_r>:
 801a6e4:	b538      	push	{r3, r4, r5, lr}
 801a6e6:	4d06      	ldr	r5, [pc, #24]	@ (801a700 <_sbrk_r+0x1c>)
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	4604      	mov	r4, r0
 801a6ec:	4608      	mov	r0, r1
 801a6ee:	602b      	str	r3, [r5, #0]
 801a6f0:	f7e8 f968 	bl	80029c4 <_sbrk>
 801a6f4:	1c43      	adds	r3, r0, #1
 801a6f6:	d102      	bne.n	801a6fe <_sbrk_r+0x1a>
 801a6f8:	682b      	ldr	r3, [r5, #0]
 801a6fa:	b103      	cbz	r3, 801a6fe <_sbrk_r+0x1a>
 801a6fc:	6023      	str	r3, [r4, #0]
 801a6fe:	bd38      	pop	{r3, r4, r5, pc}
 801a700:	2000c004 	.word	0x2000c004

0801a704 <_write_r>:
 801a704:	b538      	push	{r3, r4, r5, lr}
 801a706:	4d07      	ldr	r5, [pc, #28]	@ (801a724 <_write_r+0x20>)
 801a708:	4604      	mov	r4, r0
 801a70a:	4608      	mov	r0, r1
 801a70c:	4611      	mov	r1, r2
 801a70e:	2200      	movs	r2, #0
 801a710:	602a      	str	r2, [r5, #0]
 801a712:	461a      	mov	r2, r3
 801a714:	f7e8 f906 	bl	8002924 <_write>
 801a718:	1c43      	adds	r3, r0, #1
 801a71a:	d102      	bne.n	801a722 <_write_r+0x1e>
 801a71c:	682b      	ldr	r3, [r5, #0]
 801a71e:	b103      	cbz	r3, 801a722 <_write_r+0x1e>
 801a720:	6023      	str	r3, [r4, #0]
 801a722:	bd38      	pop	{r3, r4, r5, pc}
 801a724:	2000c004 	.word	0x2000c004

0801a728 <__errno>:
 801a728:	4b01      	ldr	r3, [pc, #4]	@ (801a730 <__errno+0x8>)
 801a72a:	6818      	ldr	r0, [r3, #0]
 801a72c:	4770      	bx	lr
 801a72e:	bf00      	nop
 801a730:	20000c54 	.word	0x20000c54

0801a734 <__libc_init_array>:
 801a734:	b570      	push	{r4, r5, r6, lr}
 801a736:	4d0d      	ldr	r5, [pc, #52]	@ (801a76c <__libc_init_array+0x38>)
 801a738:	4c0d      	ldr	r4, [pc, #52]	@ (801a770 <__libc_init_array+0x3c>)
 801a73a:	1b64      	subs	r4, r4, r5
 801a73c:	10a4      	asrs	r4, r4, #2
 801a73e:	2600      	movs	r6, #0
 801a740:	42a6      	cmp	r6, r4
 801a742:	d109      	bne.n	801a758 <__libc_init_array+0x24>
 801a744:	4d0b      	ldr	r5, [pc, #44]	@ (801a774 <__libc_init_array+0x40>)
 801a746:	4c0c      	ldr	r4, [pc, #48]	@ (801a778 <__libc_init_array+0x44>)
 801a748:	f002 f99a 	bl	801ca80 <_init>
 801a74c:	1b64      	subs	r4, r4, r5
 801a74e:	10a4      	asrs	r4, r4, #2
 801a750:	2600      	movs	r6, #0
 801a752:	42a6      	cmp	r6, r4
 801a754:	d105      	bne.n	801a762 <__libc_init_array+0x2e>
 801a756:	bd70      	pop	{r4, r5, r6, pc}
 801a758:	f855 3b04 	ldr.w	r3, [r5], #4
 801a75c:	4798      	blx	r3
 801a75e:	3601      	adds	r6, #1
 801a760:	e7ee      	b.n	801a740 <__libc_init_array+0xc>
 801a762:	f855 3b04 	ldr.w	r3, [r5], #4
 801a766:	4798      	blx	r3
 801a768:	3601      	adds	r6, #1
 801a76a:	e7f2      	b.n	801a752 <__libc_init_array+0x1e>
 801a76c:	0801e608 	.word	0x0801e608
 801a770:	0801e608 	.word	0x0801e608
 801a774:	0801e608 	.word	0x0801e608
 801a778:	0801e61c 	.word	0x0801e61c

0801a77c <__retarget_lock_init_recursive>:
 801a77c:	4770      	bx	lr

0801a77e <__retarget_lock_acquire_recursive>:
 801a77e:	4770      	bx	lr

0801a780 <__retarget_lock_release_recursive>:
 801a780:	4770      	bx	lr

0801a782 <strcpy>:
 801a782:	4603      	mov	r3, r0
 801a784:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a788:	f803 2b01 	strb.w	r2, [r3], #1
 801a78c:	2a00      	cmp	r2, #0
 801a78e:	d1f9      	bne.n	801a784 <strcpy+0x2>
 801a790:	4770      	bx	lr

0801a792 <memcpy>:
 801a792:	440a      	add	r2, r1
 801a794:	4291      	cmp	r1, r2
 801a796:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801a79a:	d100      	bne.n	801a79e <memcpy+0xc>
 801a79c:	4770      	bx	lr
 801a79e:	b510      	push	{r4, lr}
 801a7a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a7a8:	4291      	cmp	r1, r2
 801a7aa:	d1f9      	bne.n	801a7a0 <memcpy+0xe>
 801a7ac:	bd10      	pop	{r4, pc}
	...

0801a7b0 <__assert_func>:
 801a7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a7b2:	4614      	mov	r4, r2
 801a7b4:	461a      	mov	r2, r3
 801a7b6:	4b09      	ldr	r3, [pc, #36]	@ (801a7dc <__assert_func+0x2c>)
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	4605      	mov	r5, r0
 801a7bc:	68d8      	ldr	r0, [r3, #12]
 801a7be:	b954      	cbnz	r4, 801a7d6 <__assert_func+0x26>
 801a7c0:	4b07      	ldr	r3, [pc, #28]	@ (801a7e0 <__assert_func+0x30>)
 801a7c2:	461c      	mov	r4, r3
 801a7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a7c8:	9100      	str	r1, [sp, #0]
 801a7ca:	462b      	mov	r3, r5
 801a7cc:	4905      	ldr	r1, [pc, #20]	@ (801a7e4 <__assert_func+0x34>)
 801a7ce:	f000 fd3f 	bl	801b250 <fiprintf>
 801a7d2:	f000 fdd3 	bl	801b37c <abort>
 801a7d6:	4b04      	ldr	r3, [pc, #16]	@ (801a7e8 <__assert_func+0x38>)
 801a7d8:	e7f4      	b.n	801a7c4 <__assert_func+0x14>
 801a7da:	bf00      	nop
 801a7dc:	20000c54 	.word	0x20000c54
 801a7e0:	0801e525 	.word	0x0801e525
 801a7e4:	0801e4f7 	.word	0x0801e4f7
 801a7e8:	0801e4ea 	.word	0x0801e4ea

0801a7ec <__env_lock>:
 801a7ec:	4801      	ldr	r0, [pc, #4]	@ (801a7f4 <__env_lock+0x8>)
 801a7ee:	f7ff bfc6 	b.w	801a77e <__retarget_lock_acquire_recursive>
 801a7f2:	bf00      	nop
 801a7f4:	2000c008 	.word	0x2000c008

0801a7f8 <__env_unlock>:
 801a7f8:	4801      	ldr	r0, [pc, #4]	@ (801a800 <__env_unlock+0x8>)
 801a7fa:	f7ff bfc1 	b.w	801a780 <__retarget_lock_release_recursive>
 801a7fe:	bf00      	nop
 801a800:	2000c008 	.word	0x2000c008

0801a804 <_free_r>:
 801a804:	b538      	push	{r3, r4, r5, lr}
 801a806:	4605      	mov	r5, r0
 801a808:	2900      	cmp	r1, #0
 801a80a:	d041      	beq.n	801a890 <_free_r+0x8c>
 801a80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a810:	1f0c      	subs	r4, r1, #4
 801a812:	2b00      	cmp	r3, #0
 801a814:	bfb8      	it	lt
 801a816:	18e4      	addlt	r4, r4, r3
 801a818:	f7ff fad2 	bl	8019dc0 <__malloc_lock>
 801a81c:	4a1d      	ldr	r2, [pc, #116]	@ (801a894 <_free_r+0x90>)
 801a81e:	6813      	ldr	r3, [r2, #0]
 801a820:	b933      	cbnz	r3, 801a830 <_free_r+0x2c>
 801a822:	6063      	str	r3, [r4, #4]
 801a824:	6014      	str	r4, [r2, #0]
 801a826:	4628      	mov	r0, r5
 801a828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a82c:	f7ff bace 	b.w	8019dcc <__malloc_unlock>
 801a830:	42a3      	cmp	r3, r4
 801a832:	d908      	bls.n	801a846 <_free_r+0x42>
 801a834:	6820      	ldr	r0, [r4, #0]
 801a836:	1821      	adds	r1, r4, r0
 801a838:	428b      	cmp	r3, r1
 801a83a:	bf01      	itttt	eq
 801a83c:	6819      	ldreq	r1, [r3, #0]
 801a83e:	685b      	ldreq	r3, [r3, #4]
 801a840:	1809      	addeq	r1, r1, r0
 801a842:	6021      	streq	r1, [r4, #0]
 801a844:	e7ed      	b.n	801a822 <_free_r+0x1e>
 801a846:	461a      	mov	r2, r3
 801a848:	685b      	ldr	r3, [r3, #4]
 801a84a:	b10b      	cbz	r3, 801a850 <_free_r+0x4c>
 801a84c:	42a3      	cmp	r3, r4
 801a84e:	d9fa      	bls.n	801a846 <_free_r+0x42>
 801a850:	6811      	ldr	r1, [r2, #0]
 801a852:	1850      	adds	r0, r2, r1
 801a854:	42a0      	cmp	r0, r4
 801a856:	d10b      	bne.n	801a870 <_free_r+0x6c>
 801a858:	6820      	ldr	r0, [r4, #0]
 801a85a:	4401      	add	r1, r0
 801a85c:	1850      	adds	r0, r2, r1
 801a85e:	4283      	cmp	r3, r0
 801a860:	6011      	str	r1, [r2, #0]
 801a862:	d1e0      	bne.n	801a826 <_free_r+0x22>
 801a864:	6818      	ldr	r0, [r3, #0]
 801a866:	685b      	ldr	r3, [r3, #4]
 801a868:	6053      	str	r3, [r2, #4]
 801a86a:	4408      	add	r0, r1
 801a86c:	6010      	str	r0, [r2, #0]
 801a86e:	e7da      	b.n	801a826 <_free_r+0x22>
 801a870:	d902      	bls.n	801a878 <_free_r+0x74>
 801a872:	230c      	movs	r3, #12
 801a874:	602b      	str	r3, [r5, #0]
 801a876:	e7d6      	b.n	801a826 <_free_r+0x22>
 801a878:	6820      	ldr	r0, [r4, #0]
 801a87a:	1821      	adds	r1, r4, r0
 801a87c:	428b      	cmp	r3, r1
 801a87e:	bf04      	itt	eq
 801a880:	6819      	ldreq	r1, [r3, #0]
 801a882:	685b      	ldreq	r3, [r3, #4]
 801a884:	6063      	str	r3, [r4, #4]
 801a886:	bf04      	itt	eq
 801a888:	1809      	addeq	r1, r1, r0
 801a88a:	6021      	streq	r1, [r4, #0]
 801a88c:	6054      	str	r4, [r2, #4]
 801a88e:	e7ca      	b.n	801a826 <_free_r+0x22>
 801a890:	bd38      	pop	{r3, r4, r5, pc}
 801a892:	bf00      	nop
 801a894:	2000bec4 	.word	0x2000bec4

0801a898 <_malloc_usable_size_r>:
 801a898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a89c:	1f18      	subs	r0, r3, #4
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	bfbc      	itt	lt
 801a8a2:	580b      	ldrlt	r3, [r1, r0]
 801a8a4:	18c0      	addlt	r0, r0, r3
 801a8a6:	4770      	bx	lr

0801a8a8 <__ssputs_r>:
 801a8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8ac:	688e      	ldr	r6, [r1, #8]
 801a8ae:	461f      	mov	r7, r3
 801a8b0:	42be      	cmp	r6, r7
 801a8b2:	680b      	ldr	r3, [r1, #0]
 801a8b4:	4682      	mov	sl, r0
 801a8b6:	460c      	mov	r4, r1
 801a8b8:	4690      	mov	r8, r2
 801a8ba:	d82d      	bhi.n	801a918 <__ssputs_r+0x70>
 801a8bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a8c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a8c4:	d026      	beq.n	801a914 <__ssputs_r+0x6c>
 801a8c6:	6965      	ldr	r5, [r4, #20]
 801a8c8:	6909      	ldr	r1, [r1, #16]
 801a8ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8ce:	eba3 0901 	sub.w	r9, r3, r1
 801a8d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a8d6:	1c7b      	adds	r3, r7, #1
 801a8d8:	444b      	add	r3, r9
 801a8da:	106d      	asrs	r5, r5, #1
 801a8dc:	429d      	cmp	r5, r3
 801a8de:	bf38      	it	cc
 801a8e0:	461d      	movcc	r5, r3
 801a8e2:	0553      	lsls	r3, r2, #21
 801a8e4:	d527      	bpl.n	801a936 <__ssputs_r+0x8e>
 801a8e6:	4629      	mov	r1, r5
 801a8e8:	f7ff f9ea 	bl	8019cc0 <_malloc_r>
 801a8ec:	4606      	mov	r6, r0
 801a8ee:	b360      	cbz	r0, 801a94a <__ssputs_r+0xa2>
 801a8f0:	6921      	ldr	r1, [r4, #16]
 801a8f2:	464a      	mov	r2, r9
 801a8f4:	f7ff ff4d 	bl	801a792 <memcpy>
 801a8f8:	89a3      	ldrh	r3, [r4, #12]
 801a8fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a8fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a902:	81a3      	strh	r3, [r4, #12]
 801a904:	6126      	str	r6, [r4, #16]
 801a906:	6165      	str	r5, [r4, #20]
 801a908:	444e      	add	r6, r9
 801a90a:	eba5 0509 	sub.w	r5, r5, r9
 801a90e:	6026      	str	r6, [r4, #0]
 801a910:	60a5      	str	r5, [r4, #8]
 801a912:	463e      	mov	r6, r7
 801a914:	42be      	cmp	r6, r7
 801a916:	d900      	bls.n	801a91a <__ssputs_r+0x72>
 801a918:	463e      	mov	r6, r7
 801a91a:	6820      	ldr	r0, [r4, #0]
 801a91c:	4632      	mov	r2, r6
 801a91e:	4641      	mov	r1, r8
 801a920:	f7ff fe54 	bl	801a5cc <memmove>
 801a924:	68a3      	ldr	r3, [r4, #8]
 801a926:	1b9b      	subs	r3, r3, r6
 801a928:	60a3      	str	r3, [r4, #8]
 801a92a:	6823      	ldr	r3, [r4, #0]
 801a92c:	4433      	add	r3, r6
 801a92e:	6023      	str	r3, [r4, #0]
 801a930:	2000      	movs	r0, #0
 801a932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a936:	462a      	mov	r2, r5
 801a938:	f7ff fac2 	bl	8019ec0 <_realloc_r>
 801a93c:	4606      	mov	r6, r0
 801a93e:	2800      	cmp	r0, #0
 801a940:	d1e0      	bne.n	801a904 <__ssputs_r+0x5c>
 801a942:	6921      	ldr	r1, [r4, #16]
 801a944:	4650      	mov	r0, sl
 801a946:	f7ff ff5d 	bl	801a804 <_free_r>
 801a94a:	230c      	movs	r3, #12
 801a94c:	f8ca 3000 	str.w	r3, [sl]
 801a950:	89a3      	ldrh	r3, [r4, #12]
 801a952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a956:	81a3      	strh	r3, [r4, #12]
 801a958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a95c:	e7e9      	b.n	801a932 <__ssputs_r+0x8a>
	...

0801a960 <_svfiprintf_r>:
 801a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a964:	4698      	mov	r8, r3
 801a966:	898b      	ldrh	r3, [r1, #12]
 801a968:	061b      	lsls	r3, r3, #24
 801a96a:	b09d      	sub	sp, #116	@ 0x74
 801a96c:	4607      	mov	r7, r0
 801a96e:	460d      	mov	r5, r1
 801a970:	4614      	mov	r4, r2
 801a972:	d510      	bpl.n	801a996 <_svfiprintf_r+0x36>
 801a974:	690b      	ldr	r3, [r1, #16]
 801a976:	b973      	cbnz	r3, 801a996 <_svfiprintf_r+0x36>
 801a978:	2140      	movs	r1, #64	@ 0x40
 801a97a:	f7ff f9a1 	bl	8019cc0 <_malloc_r>
 801a97e:	6028      	str	r0, [r5, #0]
 801a980:	6128      	str	r0, [r5, #16]
 801a982:	b930      	cbnz	r0, 801a992 <_svfiprintf_r+0x32>
 801a984:	230c      	movs	r3, #12
 801a986:	603b      	str	r3, [r7, #0]
 801a988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a98c:	b01d      	add	sp, #116	@ 0x74
 801a98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a992:	2340      	movs	r3, #64	@ 0x40
 801a994:	616b      	str	r3, [r5, #20]
 801a996:	2300      	movs	r3, #0
 801a998:	9309      	str	r3, [sp, #36]	@ 0x24
 801a99a:	2320      	movs	r3, #32
 801a99c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a9a0:	f8cd 800c 	str.w	r8, [sp, #12]
 801a9a4:	2330      	movs	r3, #48	@ 0x30
 801a9a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ab44 <_svfiprintf_r+0x1e4>
 801a9aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a9ae:	f04f 0901 	mov.w	r9, #1
 801a9b2:	4623      	mov	r3, r4
 801a9b4:	469a      	mov	sl, r3
 801a9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a9ba:	b10a      	cbz	r2, 801a9c0 <_svfiprintf_r+0x60>
 801a9bc:	2a25      	cmp	r2, #37	@ 0x25
 801a9be:	d1f9      	bne.n	801a9b4 <_svfiprintf_r+0x54>
 801a9c0:	ebba 0b04 	subs.w	fp, sl, r4
 801a9c4:	d00b      	beq.n	801a9de <_svfiprintf_r+0x7e>
 801a9c6:	465b      	mov	r3, fp
 801a9c8:	4622      	mov	r2, r4
 801a9ca:	4629      	mov	r1, r5
 801a9cc:	4638      	mov	r0, r7
 801a9ce:	f7ff ff6b 	bl	801a8a8 <__ssputs_r>
 801a9d2:	3001      	adds	r0, #1
 801a9d4:	f000 80a7 	beq.w	801ab26 <_svfiprintf_r+0x1c6>
 801a9d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a9da:	445a      	add	r2, fp
 801a9dc:	9209      	str	r2, [sp, #36]	@ 0x24
 801a9de:	f89a 3000 	ldrb.w	r3, [sl]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	f000 809f 	beq.w	801ab26 <_svfiprintf_r+0x1c6>
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a9ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9f2:	f10a 0a01 	add.w	sl, sl, #1
 801a9f6:	9304      	str	r3, [sp, #16]
 801a9f8:	9307      	str	r3, [sp, #28]
 801a9fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a9fe:	931a      	str	r3, [sp, #104]	@ 0x68
 801aa00:	4654      	mov	r4, sl
 801aa02:	2205      	movs	r2, #5
 801aa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa08:	484e      	ldr	r0, [pc, #312]	@ (801ab44 <_svfiprintf_r+0x1e4>)
 801aa0a:	f7e5 fc21 	bl	8000250 <memchr>
 801aa0e:	9a04      	ldr	r2, [sp, #16]
 801aa10:	b9d8      	cbnz	r0, 801aa4a <_svfiprintf_r+0xea>
 801aa12:	06d0      	lsls	r0, r2, #27
 801aa14:	bf44      	itt	mi
 801aa16:	2320      	movmi	r3, #32
 801aa18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aa1c:	0711      	lsls	r1, r2, #28
 801aa1e:	bf44      	itt	mi
 801aa20:	232b      	movmi	r3, #43	@ 0x2b
 801aa22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801aa26:	f89a 3000 	ldrb.w	r3, [sl]
 801aa2a:	2b2a      	cmp	r3, #42	@ 0x2a
 801aa2c:	d015      	beq.n	801aa5a <_svfiprintf_r+0xfa>
 801aa2e:	9a07      	ldr	r2, [sp, #28]
 801aa30:	4654      	mov	r4, sl
 801aa32:	2000      	movs	r0, #0
 801aa34:	f04f 0c0a 	mov.w	ip, #10
 801aa38:	4621      	mov	r1, r4
 801aa3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa3e:	3b30      	subs	r3, #48	@ 0x30
 801aa40:	2b09      	cmp	r3, #9
 801aa42:	d94b      	bls.n	801aadc <_svfiprintf_r+0x17c>
 801aa44:	b1b0      	cbz	r0, 801aa74 <_svfiprintf_r+0x114>
 801aa46:	9207      	str	r2, [sp, #28]
 801aa48:	e014      	b.n	801aa74 <_svfiprintf_r+0x114>
 801aa4a:	eba0 0308 	sub.w	r3, r0, r8
 801aa4e:	fa09 f303 	lsl.w	r3, r9, r3
 801aa52:	4313      	orrs	r3, r2
 801aa54:	9304      	str	r3, [sp, #16]
 801aa56:	46a2      	mov	sl, r4
 801aa58:	e7d2      	b.n	801aa00 <_svfiprintf_r+0xa0>
 801aa5a:	9b03      	ldr	r3, [sp, #12]
 801aa5c:	1d19      	adds	r1, r3, #4
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	9103      	str	r1, [sp, #12]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	bfbb      	ittet	lt
 801aa66:	425b      	neglt	r3, r3
 801aa68:	f042 0202 	orrlt.w	r2, r2, #2
 801aa6c:	9307      	strge	r3, [sp, #28]
 801aa6e:	9307      	strlt	r3, [sp, #28]
 801aa70:	bfb8      	it	lt
 801aa72:	9204      	strlt	r2, [sp, #16]
 801aa74:	7823      	ldrb	r3, [r4, #0]
 801aa76:	2b2e      	cmp	r3, #46	@ 0x2e
 801aa78:	d10a      	bne.n	801aa90 <_svfiprintf_r+0x130>
 801aa7a:	7863      	ldrb	r3, [r4, #1]
 801aa7c:	2b2a      	cmp	r3, #42	@ 0x2a
 801aa7e:	d132      	bne.n	801aae6 <_svfiprintf_r+0x186>
 801aa80:	9b03      	ldr	r3, [sp, #12]
 801aa82:	1d1a      	adds	r2, r3, #4
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	9203      	str	r2, [sp, #12]
 801aa88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aa8c:	3402      	adds	r4, #2
 801aa8e:	9305      	str	r3, [sp, #20]
 801aa90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ab54 <_svfiprintf_r+0x1f4>
 801aa94:	7821      	ldrb	r1, [r4, #0]
 801aa96:	2203      	movs	r2, #3
 801aa98:	4650      	mov	r0, sl
 801aa9a:	f7e5 fbd9 	bl	8000250 <memchr>
 801aa9e:	b138      	cbz	r0, 801aab0 <_svfiprintf_r+0x150>
 801aaa0:	9b04      	ldr	r3, [sp, #16]
 801aaa2:	eba0 000a 	sub.w	r0, r0, sl
 801aaa6:	2240      	movs	r2, #64	@ 0x40
 801aaa8:	4082      	lsls	r2, r0
 801aaaa:	4313      	orrs	r3, r2
 801aaac:	3401      	adds	r4, #1
 801aaae:	9304      	str	r3, [sp, #16]
 801aab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aab4:	4824      	ldr	r0, [pc, #144]	@ (801ab48 <_svfiprintf_r+0x1e8>)
 801aab6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aaba:	2206      	movs	r2, #6
 801aabc:	f7e5 fbc8 	bl	8000250 <memchr>
 801aac0:	2800      	cmp	r0, #0
 801aac2:	d036      	beq.n	801ab32 <_svfiprintf_r+0x1d2>
 801aac4:	4b21      	ldr	r3, [pc, #132]	@ (801ab4c <_svfiprintf_r+0x1ec>)
 801aac6:	bb1b      	cbnz	r3, 801ab10 <_svfiprintf_r+0x1b0>
 801aac8:	9b03      	ldr	r3, [sp, #12]
 801aaca:	3307      	adds	r3, #7
 801aacc:	f023 0307 	bic.w	r3, r3, #7
 801aad0:	3308      	adds	r3, #8
 801aad2:	9303      	str	r3, [sp, #12]
 801aad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aad6:	4433      	add	r3, r6
 801aad8:	9309      	str	r3, [sp, #36]	@ 0x24
 801aada:	e76a      	b.n	801a9b2 <_svfiprintf_r+0x52>
 801aadc:	fb0c 3202 	mla	r2, ip, r2, r3
 801aae0:	460c      	mov	r4, r1
 801aae2:	2001      	movs	r0, #1
 801aae4:	e7a8      	b.n	801aa38 <_svfiprintf_r+0xd8>
 801aae6:	2300      	movs	r3, #0
 801aae8:	3401      	adds	r4, #1
 801aaea:	9305      	str	r3, [sp, #20]
 801aaec:	4619      	mov	r1, r3
 801aaee:	f04f 0c0a 	mov.w	ip, #10
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aaf8:	3a30      	subs	r2, #48	@ 0x30
 801aafa:	2a09      	cmp	r2, #9
 801aafc:	d903      	bls.n	801ab06 <_svfiprintf_r+0x1a6>
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d0c6      	beq.n	801aa90 <_svfiprintf_r+0x130>
 801ab02:	9105      	str	r1, [sp, #20]
 801ab04:	e7c4      	b.n	801aa90 <_svfiprintf_r+0x130>
 801ab06:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab0a:	4604      	mov	r4, r0
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	e7f0      	b.n	801aaf2 <_svfiprintf_r+0x192>
 801ab10:	ab03      	add	r3, sp, #12
 801ab12:	9300      	str	r3, [sp, #0]
 801ab14:	462a      	mov	r2, r5
 801ab16:	4b0e      	ldr	r3, [pc, #56]	@ (801ab50 <_svfiprintf_r+0x1f0>)
 801ab18:	a904      	add	r1, sp, #16
 801ab1a:	4638      	mov	r0, r7
 801ab1c:	f3af 8000 	nop.w
 801ab20:	1c42      	adds	r2, r0, #1
 801ab22:	4606      	mov	r6, r0
 801ab24:	d1d6      	bne.n	801aad4 <_svfiprintf_r+0x174>
 801ab26:	89ab      	ldrh	r3, [r5, #12]
 801ab28:	065b      	lsls	r3, r3, #25
 801ab2a:	f53f af2d 	bmi.w	801a988 <_svfiprintf_r+0x28>
 801ab2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ab30:	e72c      	b.n	801a98c <_svfiprintf_r+0x2c>
 801ab32:	ab03      	add	r3, sp, #12
 801ab34:	9300      	str	r3, [sp, #0]
 801ab36:	462a      	mov	r2, r5
 801ab38:	4b05      	ldr	r3, [pc, #20]	@ (801ab50 <_svfiprintf_r+0x1f0>)
 801ab3a:	a904      	add	r1, sp, #16
 801ab3c:	4638      	mov	r0, r7
 801ab3e:	f000 f9bb 	bl	801aeb8 <_printf_i>
 801ab42:	e7ed      	b.n	801ab20 <_svfiprintf_r+0x1c0>
 801ab44:	0801e526 	.word	0x0801e526
 801ab48:	0801e530 	.word	0x0801e530
 801ab4c:	00000000 	.word	0x00000000
 801ab50:	0801a8a9 	.word	0x0801a8a9
 801ab54:	0801e52c 	.word	0x0801e52c

0801ab58 <__sfputc_r>:
 801ab58:	6893      	ldr	r3, [r2, #8]
 801ab5a:	3b01      	subs	r3, #1
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	b410      	push	{r4}
 801ab60:	6093      	str	r3, [r2, #8]
 801ab62:	da08      	bge.n	801ab76 <__sfputc_r+0x1e>
 801ab64:	6994      	ldr	r4, [r2, #24]
 801ab66:	42a3      	cmp	r3, r4
 801ab68:	db01      	blt.n	801ab6e <__sfputc_r+0x16>
 801ab6a:	290a      	cmp	r1, #10
 801ab6c:	d103      	bne.n	801ab76 <__sfputc_r+0x1e>
 801ab6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab72:	f7ff bc87 	b.w	801a484 <__swbuf_r>
 801ab76:	6813      	ldr	r3, [r2, #0]
 801ab78:	1c58      	adds	r0, r3, #1
 801ab7a:	6010      	str	r0, [r2, #0]
 801ab7c:	7019      	strb	r1, [r3, #0]
 801ab7e:	4608      	mov	r0, r1
 801ab80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab84:	4770      	bx	lr

0801ab86 <__sfputs_r>:
 801ab86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab88:	4606      	mov	r6, r0
 801ab8a:	460f      	mov	r7, r1
 801ab8c:	4614      	mov	r4, r2
 801ab8e:	18d5      	adds	r5, r2, r3
 801ab90:	42ac      	cmp	r4, r5
 801ab92:	d101      	bne.n	801ab98 <__sfputs_r+0x12>
 801ab94:	2000      	movs	r0, #0
 801ab96:	e007      	b.n	801aba8 <__sfputs_r+0x22>
 801ab98:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab9c:	463a      	mov	r2, r7
 801ab9e:	4630      	mov	r0, r6
 801aba0:	f7ff ffda 	bl	801ab58 <__sfputc_r>
 801aba4:	1c43      	adds	r3, r0, #1
 801aba6:	d1f3      	bne.n	801ab90 <__sfputs_r+0xa>
 801aba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801abac <_vfiprintf_r>:
 801abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb0:	460d      	mov	r5, r1
 801abb2:	b09d      	sub	sp, #116	@ 0x74
 801abb4:	4614      	mov	r4, r2
 801abb6:	4698      	mov	r8, r3
 801abb8:	4606      	mov	r6, r0
 801abba:	b118      	cbz	r0, 801abc4 <_vfiprintf_r+0x18>
 801abbc:	6a03      	ldr	r3, [r0, #32]
 801abbe:	b90b      	cbnz	r3, 801abc4 <_vfiprintf_r+0x18>
 801abc0:	f7ff fab0 	bl	801a124 <__sinit>
 801abc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801abc6:	07d9      	lsls	r1, r3, #31
 801abc8:	d405      	bmi.n	801abd6 <_vfiprintf_r+0x2a>
 801abca:	89ab      	ldrh	r3, [r5, #12]
 801abcc:	059a      	lsls	r2, r3, #22
 801abce:	d402      	bmi.n	801abd6 <_vfiprintf_r+0x2a>
 801abd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801abd2:	f7ff fdd4 	bl	801a77e <__retarget_lock_acquire_recursive>
 801abd6:	89ab      	ldrh	r3, [r5, #12]
 801abd8:	071b      	lsls	r3, r3, #28
 801abda:	d501      	bpl.n	801abe0 <_vfiprintf_r+0x34>
 801abdc:	692b      	ldr	r3, [r5, #16]
 801abde:	b99b      	cbnz	r3, 801ac08 <_vfiprintf_r+0x5c>
 801abe0:	4629      	mov	r1, r5
 801abe2:	4630      	mov	r0, r6
 801abe4:	f7ff fc8c 	bl	801a500 <__swsetup_r>
 801abe8:	b170      	cbz	r0, 801ac08 <_vfiprintf_r+0x5c>
 801abea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801abec:	07dc      	lsls	r4, r3, #31
 801abee:	d504      	bpl.n	801abfa <_vfiprintf_r+0x4e>
 801abf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abf4:	b01d      	add	sp, #116	@ 0x74
 801abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abfa:	89ab      	ldrh	r3, [r5, #12]
 801abfc:	0598      	lsls	r0, r3, #22
 801abfe:	d4f7      	bmi.n	801abf0 <_vfiprintf_r+0x44>
 801ac00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ac02:	f7ff fdbd 	bl	801a780 <__retarget_lock_release_recursive>
 801ac06:	e7f3      	b.n	801abf0 <_vfiprintf_r+0x44>
 801ac08:	2300      	movs	r3, #0
 801ac0a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac0c:	2320      	movs	r3, #32
 801ac0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ac12:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac16:	2330      	movs	r3, #48	@ 0x30
 801ac18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801adc8 <_vfiprintf_r+0x21c>
 801ac1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ac20:	f04f 0901 	mov.w	r9, #1
 801ac24:	4623      	mov	r3, r4
 801ac26:	469a      	mov	sl, r3
 801ac28:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac2c:	b10a      	cbz	r2, 801ac32 <_vfiprintf_r+0x86>
 801ac2e:	2a25      	cmp	r2, #37	@ 0x25
 801ac30:	d1f9      	bne.n	801ac26 <_vfiprintf_r+0x7a>
 801ac32:	ebba 0b04 	subs.w	fp, sl, r4
 801ac36:	d00b      	beq.n	801ac50 <_vfiprintf_r+0xa4>
 801ac38:	465b      	mov	r3, fp
 801ac3a:	4622      	mov	r2, r4
 801ac3c:	4629      	mov	r1, r5
 801ac3e:	4630      	mov	r0, r6
 801ac40:	f7ff ffa1 	bl	801ab86 <__sfputs_r>
 801ac44:	3001      	adds	r0, #1
 801ac46:	f000 80a7 	beq.w	801ad98 <_vfiprintf_r+0x1ec>
 801ac4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ac4c:	445a      	add	r2, fp
 801ac4e:	9209      	str	r2, [sp, #36]	@ 0x24
 801ac50:	f89a 3000 	ldrb.w	r3, [sl]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	f000 809f 	beq.w	801ad98 <_vfiprintf_r+0x1ec>
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ac60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac64:	f10a 0a01 	add.w	sl, sl, #1
 801ac68:	9304      	str	r3, [sp, #16]
 801ac6a:	9307      	str	r3, [sp, #28]
 801ac6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ac70:	931a      	str	r3, [sp, #104]	@ 0x68
 801ac72:	4654      	mov	r4, sl
 801ac74:	2205      	movs	r2, #5
 801ac76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac7a:	4853      	ldr	r0, [pc, #332]	@ (801adc8 <_vfiprintf_r+0x21c>)
 801ac7c:	f7e5 fae8 	bl	8000250 <memchr>
 801ac80:	9a04      	ldr	r2, [sp, #16]
 801ac82:	b9d8      	cbnz	r0, 801acbc <_vfiprintf_r+0x110>
 801ac84:	06d1      	lsls	r1, r2, #27
 801ac86:	bf44      	itt	mi
 801ac88:	2320      	movmi	r3, #32
 801ac8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac8e:	0713      	lsls	r3, r2, #28
 801ac90:	bf44      	itt	mi
 801ac92:	232b      	movmi	r3, #43	@ 0x2b
 801ac94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac98:	f89a 3000 	ldrb.w	r3, [sl]
 801ac9c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac9e:	d015      	beq.n	801accc <_vfiprintf_r+0x120>
 801aca0:	9a07      	ldr	r2, [sp, #28]
 801aca2:	4654      	mov	r4, sl
 801aca4:	2000      	movs	r0, #0
 801aca6:	f04f 0c0a 	mov.w	ip, #10
 801acaa:	4621      	mov	r1, r4
 801acac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801acb0:	3b30      	subs	r3, #48	@ 0x30
 801acb2:	2b09      	cmp	r3, #9
 801acb4:	d94b      	bls.n	801ad4e <_vfiprintf_r+0x1a2>
 801acb6:	b1b0      	cbz	r0, 801ace6 <_vfiprintf_r+0x13a>
 801acb8:	9207      	str	r2, [sp, #28]
 801acba:	e014      	b.n	801ace6 <_vfiprintf_r+0x13a>
 801acbc:	eba0 0308 	sub.w	r3, r0, r8
 801acc0:	fa09 f303 	lsl.w	r3, r9, r3
 801acc4:	4313      	orrs	r3, r2
 801acc6:	9304      	str	r3, [sp, #16]
 801acc8:	46a2      	mov	sl, r4
 801acca:	e7d2      	b.n	801ac72 <_vfiprintf_r+0xc6>
 801accc:	9b03      	ldr	r3, [sp, #12]
 801acce:	1d19      	adds	r1, r3, #4
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	9103      	str	r1, [sp, #12]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	bfbb      	ittet	lt
 801acd8:	425b      	neglt	r3, r3
 801acda:	f042 0202 	orrlt.w	r2, r2, #2
 801acde:	9307      	strge	r3, [sp, #28]
 801ace0:	9307      	strlt	r3, [sp, #28]
 801ace2:	bfb8      	it	lt
 801ace4:	9204      	strlt	r2, [sp, #16]
 801ace6:	7823      	ldrb	r3, [r4, #0]
 801ace8:	2b2e      	cmp	r3, #46	@ 0x2e
 801acea:	d10a      	bne.n	801ad02 <_vfiprintf_r+0x156>
 801acec:	7863      	ldrb	r3, [r4, #1]
 801acee:	2b2a      	cmp	r3, #42	@ 0x2a
 801acf0:	d132      	bne.n	801ad58 <_vfiprintf_r+0x1ac>
 801acf2:	9b03      	ldr	r3, [sp, #12]
 801acf4:	1d1a      	adds	r2, r3, #4
 801acf6:	681b      	ldr	r3, [r3, #0]
 801acf8:	9203      	str	r2, [sp, #12]
 801acfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801acfe:	3402      	adds	r4, #2
 801ad00:	9305      	str	r3, [sp, #20]
 801ad02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801add8 <_vfiprintf_r+0x22c>
 801ad06:	7821      	ldrb	r1, [r4, #0]
 801ad08:	2203      	movs	r2, #3
 801ad0a:	4650      	mov	r0, sl
 801ad0c:	f7e5 faa0 	bl	8000250 <memchr>
 801ad10:	b138      	cbz	r0, 801ad22 <_vfiprintf_r+0x176>
 801ad12:	9b04      	ldr	r3, [sp, #16]
 801ad14:	eba0 000a 	sub.w	r0, r0, sl
 801ad18:	2240      	movs	r2, #64	@ 0x40
 801ad1a:	4082      	lsls	r2, r0
 801ad1c:	4313      	orrs	r3, r2
 801ad1e:	3401      	adds	r4, #1
 801ad20:	9304      	str	r3, [sp, #16]
 801ad22:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad26:	4829      	ldr	r0, [pc, #164]	@ (801adcc <_vfiprintf_r+0x220>)
 801ad28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ad2c:	2206      	movs	r2, #6
 801ad2e:	f7e5 fa8f 	bl	8000250 <memchr>
 801ad32:	2800      	cmp	r0, #0
 801ad34:	d03f      	beq.n	801adb6 <_vfiprintf_r+0x20a>
 801ad36:	4b26      	ldr	r3, [pc, #152]	@ (801add0 <_vfiprintf_r+0x224>)
 801ad38:	bb1b      	cbnz	r3, 801ad82 <_vfiprintf_r+0x1d6>
 801ad3a:	9b03      	ldr	r3, [sp, #12]
 801ad3c:	3307      	adds	r3, #7
 801ad3e:	f023 0307 	bic.w	r3, r3, #7
 801ad42:	3308      	adds	r3, #8
 801ad44:	9303      	str	r3, [sp, #12]
 801ad46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad48:	443b      	add	r3, r7
 801ad4a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad4c:	e76a      	b.n	801ac24 <_vfiprintf_r+0x78>
 801ad4e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad52:	460c      	mov	r4, r1
 801ad54:	2001      	movs	r0, #1
 801ad56:	e7a8      	b.n	801acaa <_vfiprintf_r+0xfe>
 801ad58:	2300      	movs	r3, #0
 801ad5a:	3401      	adds	r4, #1
 801ad5c:	9305      	str	r3, [sp, #20]
 801ad5e:	4619      	mov	r1, r3
 801ad60:	f04f 0c0a 	mov.w	ip, #10
 801ad64:	4620      	mov	r0, r4
 801ad66:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad6a:	3a30      	subs	r2, #48	@ 0x30
 801ad6c:	2a09      	cmp	r2, #9
 801ad6e:	d903      	bls.n	801ad78 <_vfiprintf_r+0x1cc>
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d0c6      	beq.n	801ad02 <_vfiprintf_r+0x156>
 801ad74:	9105      	str	r1, [sp, #20]
 801ad76:	e7c4      	b.n	801ad02 <_vfiprintf_r+0x156>
 801ad78:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad7c:	4604      	mov	r4, r0
 801ad7e:	2301      	movs	r3, #1
 801ad80:	e7f0      	b.n	801ad64 <_vfiprintf_r+0x1b8>
 801ad82:	ab03      	add	r3, sp, #12
 801ad84:	9300      	str	r3, [sp, #0]
 801ad86:	462a      	mov	r2, r5
 801ad88:	4b12      	ldr	r3, [pc, #72]	@ (801add4 <_vfiprintf_r+0x228>)
 801ad8a:	a904      	add	r1, sp, #16
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	f3af 8000 	nop.w
 801ad92:	4607      	mov	r7, r0
 801ad94:	1c78      	adds	r0, r7, #1
 801ad96:	d1d6      	bne.n	801ad46 <_vfiprintf_r+0x19a>
 801ad98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad9a:	07d9      	lsls	r1, r3, #31
 801ad9c:	d405      	bmi.n	801adaa <_vfiprintf_r+0x1fe>
 801ad9e:	89ab      	ldrh	r3, [r5, #12]
 801ada0:	059a      	lsls	r2, r3, #22
 801ada2:	d402      	bmi.n	801adaa <_vfiprintf_r+0x1fe>
 801ada4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ada6:	f7ff fceb 	bl	801a780 <__retarget_lock_release_recursive>
 801adaa:	89ab      	ldrh	r3, [r5, #12]
 801adac:	065b      	lsls	r3, r3, #25
 801adae:	f53f af1f 	bmi.w	801abf0 <_vfiprintf_r+0x44>
 801adb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801adb4:	e71e      	b.n	801abf4 <_vfiprintf_r+0x48>
 801adb6:	ab03      	add	r3, sp, #12
 801adb8:	9300      	str	r3, [sp, #0]
 801adba:	462a      	mov	r2, r5
 801adbc:	4b05      	ldr	r3, [pc, #20]	@ (801add4 <_vfiprintf_r+0x228>)
 801adbe:	a904      	add	r1, sp, #16
 801adc0:	4630      	mov	r0, r6
 801adc2:	f000 f879 	bl	801aeb8 <_printf_i>
 801adc6:	e7e4      	b.n	801ad92 <_vfiprintf_r+0x1e6>
 801adc8:	0801e526 	.word	0x0801e526
 801adcc:	0801e530 	.word	0x0801e530
 801add0:	00000000 	.word	0x00000000
 801add4:	0801ab87 	.word	0x0801ab87
 801add8:	0801e52c 	.word	0x0801e52c

0801addc <_printf_common>:
 801addc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ade0:	4616      	mov	r6, r2
 801ade2:	4698      	mov	r8, r3
 801ade4:	688a      	ldr	r2, [r1, #8]
 801ade6:	690b      	ldr	r3, [r1, #16]
 801ade8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801adec:	4293      	cmp	r3, r2
 801adee:	bfb8      	it	lt
 801adf0:	4613      	movlt	r3, r2
 801adf2:	6033      	str	r3, [r6, #0]
 801adf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801adf8:	4607      	mov	r7, r0
 801adfa:	460c      	mov	r4, r1
 801adfc:	b10a      	cbz	r2, 801ae02 <_printf_common+0x26>
 801adfe:	3301      	adds	r3, #1
 801ae00:	6033      	str	r3, [r6, #0]
 801ae02:	6823      	ldr	r3, [r4, #0]
 801ae04:	0699      	lsls	r1, r3, #26
 801ae06:	bf42      	ittt	mi
 801ae08:	6833      	ldrmi	r3, [r6, #0]
 801ae0a:	3302      	addmi	r3, #2
 801ae0c:	6033      	strmi	r3, [r6, #0]
 801ae0e:	6825      	ldr	r5, [r4, #0]
 801ae10:	f015 0506 	ands.w	r5, r5, #6
 801ae14:	d106      	bne.n	801ae24 <_printf_common+0x48>
 801ae16:	f104 0a19 	add.w	sl, r4, #25
 801ae1a:	68e3      	ldr	r3, [r4, #12]
 801ae1c:	6832      	ldr	r2, [r6, #0]
 801ae1e:	1a9b      	subs	r3, r3, r2
 801ae20:	42ab      	cmp	r3, r5
 801ae22:	dc26      	bgt.n	801ae72 <_printf_common+0x96>
 801ae24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ae28:	6822      	ldr	r2, [r4, #0]
 801ae2a:	3b00      	subs	r3, #0
 801ae2c:	bf18      	it	ne
 801ae2e:	2301      	movne	r3, #1
 801ae30:	0692      	lsls	r2, r2, #26
 801ae32:	d42b      	bmi.n	801ae8c <_printf_common+0xb0>
 801ae34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ae38:	4641      	mov	r1, r8
 801ae3a:	4638      	mov	r0, r7
 801ae3c:	47c8      	blx	r9
 801ae3e:	3001      	adds	r0, #1
 801ae40:	d01e      	beq.n	801ae80 <_printf_common+0xa4>
 801ae42:	6823      	ldr	r3, [r4, #0]
 801ae44:	6922      	ldr	r2, [r4, #16]
 801ae46:	f003 0306 	and.w	r3, r3, #6
 801ae4a:	2b04      	cmp	r3, #4
 801ae4c:	bf02      	ittt	eq
 801ae4e:	68e5      	ldreq	r5, [r4, #12]
 801ae50:	6833      	ldreq	r3, [r6, #0]
 801ae52:	1aed      	subeq	r5, r5, r3
 801ae54:	68a3      	ldr	r3, [r4, #8]
 801ae56:	bf0c      	ite	eq
 801ae58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae5c:	2500      	movne	r5, #0
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	bfc4      	itt	gt
 801ae62:	1a9b      	subgt	r3, r3, r2
 801ae64:	18ed      	addgt	r5, r5, r3
 801ae66:	2600      	movs	r6, #0
 801ae68:	341a      	adds	r4, #26
 801ae6a:	42b5      	cmp	r5, r6
 801ae6c:	d11a      	bne.n	801aea4 <_printf_common+0xc8>
 801ae6e:	2000      	movs	r0, #0
 801ae70:	e008      	b.n	801ae84 <_printf_common+0xa8>
 801ae72:	2301      	movs	r3, #1
 801ae74:	4652      	mov	r2, sl
 801ae76:	4641      	mov	r1, r8
 801ae78:	4638      	mov	r0, r7
 801ae7a:	47c8      	blx	r9
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	d103      	bne.n	801ae88 <_printf_common+0xac>
 801ae80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ae84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae88:	3501      	adds	r5, #1
 801ae8a:	e7c6      	b.n	801ae1a <_printf_common+0x3e>
 801ae8c:	18e1      	adds	r1, r4, r3
 801ae8e:	1c5a      	adds	r2, r3, #1
 801ae90:	2030      	movs	r0, #48	@ 0x30
 801ae92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ae96:	4422      	add	r2, r4
 801ae98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aea0:	3302      	adds	r3, #2
 801aea2:	e7c7      	b.n	801ae34 <_printf_common+0x58>
 801aea4:	2301      	movs	r3, #1
 801aea6:	4622      	mov	r2, r4
 801aea8:	4641      	mov	r1, r8
 801aeaa:	4638      	mov	r0, r7
 801aeac:	47c8      	blx	r9
 801aeae:	3001      	adds	r0, #1
 801aeb0:	d0e6      	beq.n	801ae80 <_printf_common+0xa4>
 801aeb2:	3601      	adds	r6, #1
 801aeb4:	e7d9      	b.n	801ae6a <_printf_common+0x8e>
	...

0801aeb8 <_printf_i>:
 801aeb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aebc:	7e0f      	ldrb	r7, [r1, #24]
 801aebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aec0:	2f78      	cmp	r7, #120	@ 0x78
 801aec2:	4691      	mov	r9, r2
 801aec4:	4680      	mov	r8, r0
 801aec6:	460c      	mov	r4, r1
 801aec8:	469a      	mov	sl, r3
 801aeca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aece:	d807      	bhi.n	801aee0 <_printf_i+0x28>
 801aed0:	2f62      	cmp	r7, #98	@ 0x62
 801aed2:	d80a      	bhi.n	801aeea <_printf_i+0x32>
 801aed4:	2f00      	cmp	r7, #0
 801aed6:	f000 80d2 	beq.w	801b07e <_printf_i+0x1c6>
 801aeda:	2f58      	cmp	r7, #88	@ 0x58
 801aedc:	f000 80b9 	beq.w	801b052 <_printf_i+0x19a>
 801aee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aee8:	e03a      	b.n	801af60 <_printf_i+0xa8>
 801aeea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aeee:	2b15      	cmp	r3, #21
 801aef0:	d8f6      	bhi.n	801aee0 <_printf_i+0x28>
 801aef2:	a101      	add	r1, pc, #4	@ (adr r1, 801aef8 <_printf_i+0x40>)
 801aef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aef8:	0801af51 	.word	0x0801af51
 801aefc:	0801af65 	.word	0x0801af65
 801af00:	0801aee1 	.word	0x0801aee1
 801af04:	0801aee1 	.word	0x0801aee1
 801af08:	0801aee1 	.word	0x0801aee1
 801af0c:	0801aee1 	.word	0x0801aee1
 801af10:	0801af65 	.word	0x0801af65
 801af14:	0801aee1 	.word	0x0801aee1
 801af18:	0801aee1 	.word	0x0801aee1
 801af1c:	0801aee1 	.word	0x0801aee1
 801af20:	0801aee1 	.word	0x0801aee1
 801af24:	0801b065 	.word	0x0801b065
 801af28:	0801af8f 	.word	0x0801af8f
 801af2c:	0801b01f 	.word	0x0801b01f
 801af30:	0801aee1 	.word	0x0801aee1
 801af34:	0801aee1 	.word	0x0801aee1
 801af38:	0801b087 	.word	0x0801b087
 801af3c:	0801aee1 	.word	0x0801aee1
 801af40:	0801af8f 	.word	0x0801af8f
 801af44:	0801aee1 	.word	0x0801aee1
 801af48:	0801aee1 	.word	0x0801aee1
 801af4c:	0801b027 	.word	0x0801b027
 801af50:	6833      	ldr	r3, [r6, #0]
 801af52:	1d1a      	adds	r2, r3, #4
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	6032      	str	r2, [r6, #0]
 801af58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801af5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801af60:	2301      	movs	r3, #1
 801af62:	e09d      	b.n	801b0a0 <_printf_i+0x1e8>
 801af64:	6833      	ldr	r3, [r6, #0]
 801af66:	6820      	ldr	r0, [r4, #0]
 801af68:	1d19      	adds	r1, r3, #4
 801af6a:	6031      	str	r1, [r6, #0]
 801af6c:	0606      	lsls	r6, r0, #24
 801af6e:	d501      	bpl.n	801af74 <_printf_i+0xbc>
 801af70:	681d      	ldr	r5, [r3, #0]
 801af72:	e003      	b.n	801af7c <_printf_i+0xc4>
 801af74:	0645      	lsls	r5, r0, #25
 801af76:	d5fb      	bpl.n	801af70 <_printf_i+0xb8>
 801af78:	f9b3 5000 	ldrsh.w	r5, [r3]
 801af7c:	2d00      	cmp	r5, #0
 801af7e:	da03      	bge.n	801af88 <_printf_i+0xd0>
 801af80:	232d      	movs	r3, #45	@ 0x2d
 801af82:	426d      	negs	r5, r5
 801af84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af88:	4859      	ldr	r0, [pc, #356]	@ (801b0f0 <_printf_i+0x238>)
 801af8a:	230a      	movs	r3, #10
 801af8c:	e011      	b.n	801afb2 <_printf_i+0xfa>
 801af8e:	6821      	ldr	r1, [r4, #0]
 801af90:	6833      	ldr	r3, [r6, #0]
 801af92:	0608      	lsls	r0, r1, #24
 801af94:	f853 5b04 	ldr.w	r5, [r3], #4
 801af98:	d402      	bmi.n	801afa0 <_printf_i+0xe8>
 801af9a:	0649      	lsls	r1, r1, #25
 801af9c:	bf48      	it	mi
 801af9e:	b2ad      	uxthmi	r5, r5
 801afa0:	2f6f      	cmp	r7, #111	@ 0x6f
 801afa2:	4853      	ldr	r0, [pc, #332]	@ (801b0f0 <_printf_i+0x238>)
 801afa4:	6033      	str	r3, [r6, #0]
 801afa6:	bf14      	ite	ne
 801afa8:	230a      	movne	r3, #10
 801afaa:	2308      	moveq	r3, #8
 801afac:	2100      	movs	r1, #0
 801afae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801afb2:	6866      	ldr	r6, [r4, #4]
 801afb4:	60a6      	str	r6, [r4, #8]
 801afb6:	2e00      	cmp	r6, #0
 801afb8:	bfa2      	ittt	ge
 801afba:	6821      	ldrge	r1, [r4, #0]
 801afbc:	f021 0104 	bicge.w	r1, r1, #4
 801afc0:	6021      	strge	r1, [r4, #0]
 801afc2:	b90d      	cbnz	r5, 801afc8 <_printf_i+0x110>
 801afc4:	2e00      	cmp	r6, #0
 801afc6:	d04b      	beq.n	801b060 <_printf_i+0x1a8>
 801afc8:	4616      	mov	r6, r2
 801afca:	fbb5 f1f3 	udiv	r1, r5, r3
 801afce:	fb03 5711 	mls	r7, r3, r1, r5
 801afd2:	5dc7      	ldrb	r7, [r0, r7]
 801afd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801afd8:	462f      	mov	r7, r5
 801afda:	42bb      	cmp	r3, r7
 801afdc:	460d      	mov	r5, r1
 801afde:	d9f4      	bls.n	801afca <_printf_i+0x112>
 801afe0:	2b08      	cmp	r3, #8
 801afe2:	d10b      	bne.n	801affc <_printf_i+0x144>
 801afe4:	6823      	ldr	r3, [r4, #0]
 801afe6:	07df      	lsls	r7, r3, #31
 801afe8:	d508      	bpl.n	801affc <_printf_i+0x144>
 801afea:	6923      	ldr	r3, [r4, #16]
 801afec:	6861      	ldr	r1, [r4, #4]
 801afee:	4299      	cmp	r1, r3
 801aff0:	bfde      	ittt	le
 801aff2:	2330      	movle	r3, #48	@ 0x30
 801aff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aff8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801affc:	1b92      	subs	r2, r2, r6
 801affe:	6122      	str	r2, [r4, #16]
 801b000:	f8cd a000 	str.w	sl, [sp]
 801b004:	464b      	mov	r3, r9
 801b006:	aa03      	add	r2, sp, #12
 801b008:	4621      	mov	r1, r4
 801b00a:	4640      	mov	r0, r8
 801b00c:	f7ff fee6 	bl	801addc <_printf_common>
 801b010:	3001      	adds	r0, #1
 801b012:	d14a      	bne.n	801b0aa <_printf_i+0x1f2>
 801b014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b018:	b004      	add	sp, #16
 801b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b01e:	6823      	ldr	r3, [r4, #0]
 801b020:	f043 0320 	orr.w	r3, r3, #32
 801b024:	6023      	str	r3, [r4, #0]
 801b026:	4833      	ldr	r0, [pc, #204]	@ (801b0f4 <_printf_i+0x23c>)
 801b028:	2778      	movs	r7, #120	@ 0x78
 801b02a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b02e:	6823      	ldr	r3, [r4, #0]
 801b030:	6831      	ldr	r1, [r6, #0]
 801b032:	061f      	lsls	r7, r3, #24
 801b034:	f851 5b04 	ldr.w	r5, [r1], #4
 801b038:	d402      	bmi.n	801b040 <_printf_i+0x188>
 801b03a:	065f      	lsls	r7, r3, #25
 801b03c:	bf48      	it	mi
 801b03e:	b2ad      	uxthmi	r5, r5
 801b040:	6031      	str	r1, [r6, #0]
 801b042:	07d9      	lsls	r1, r3, #31
 801b044:	bf44      	itt	mi
 801b046:	f043 0320 	orrmi.w	r3, r3, #32
 801b04a:	6023      	strmi	r3, [r4, #0]
 801b04c:	b11d      	cbz	r5, 801b056 <_printf_i+0x19e>
 801b04e:	2310      	movs	r3, #16
 801b050:	e7ac      	b.n	801afac <_printf_i+0xf4>
 801b052:	4827      	ldr	r0, [pc, #156]	@ (801b0f0 <_printf_i+0x238>)
 801b054:	e7e9      	b.n	801b02a <_printf_i+0x172>
 801b056:	6823      	ldr	r3, [r4, #0]
 801b058:	f023 0320 	bic.w	r3, r3, #32
 801b05c:	6023      	str	r3, [r4, #0]
 801b05e:	e7f6      	b.n	801b04e <_printf_i+0x196>
 801b060:	4616      	mov	r6, r2
 801b062:	e7bd      	b.n	801afe0 <_printf_i+0x128>
 801b064:	6833      	ldr	r3, [r6, #0]
 801b066:	6825      	ldr	r5, [r4, #0]
 801b068:	6961      	ldr	r1, [r4, #20]
 801b06a:	1d18      	adds	r0, r3, #4
 801b06c:	6030      	str	r0, [r6, #0]
 801b06e:	062e      	lsls	r6, r5, #24
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	d501      	bpl.n	801b078 <_printf_i+0x1c0>
 801b074:	6019      	str	r1, [r3, #0]
 801b076:	e002      	b.n	801b07e <_printf_i+0x1c6>
 801b078:	0668      	lsls	r0, r5, #25
 801b07a:	d5fb      	bpl.n	801b074 <_printf_i+0x1bc>
 801b07c:	8019      	strh	r1, [r3, #0]
 801b07e:	2300      	movs	r3, #0
 801b080:	6123      	str	r3, [r4, #16]
 801b082:	4616      	mov	r6, r2
 801b084:	e7bc      	b.n	801b000 <_printf_i+0x148>
 801b086:	6833      	ldr	r3, [r6, #0]
 801b088:	1d1a      	adds	r2, r3, #4
 801b08a:	6032      	str	r2, [r6, #0]
 801b08c:	681e      	ldr	r6, [r3, #0]
 801b08e:	6862      	ldr	r2, [r4, #4]
 801b090:	2100      	movs	r1, #0
 801b092:	4630      	mov	r0, r6
 801b094:	f7e5 f8dc 	bl	8000250 <memchr>
 801b098:	b108      	cbz	r0, 801b09e <_printf_i+0x1e6>
 801b09a:	1b80      	subs	r0, r0, r6
 801b09c:	6060      	str	r0, [r4, #4]
 801b09e:	6863      	ldr	r3, [r4, #4]
 801b0a0:	6123      	str	r3, [r4, #16]
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b0a8:	e7aa      	b.n	801b000 <_printf_i+0x148>
 801b0aa:	6923      	ldr	r3, [r4, #16]
 801b0ac:	4632      	mov	r2, r6
 801b0ae:	4649      	mov	r1, r9
 801b0b0:	4640      	mov	r0, r8
 801b0b2:	47d0      	blx	sl
 801b0b4:	3001      	adds	r0, #1
 801b0b6:	d0ad      	beq.n	801b014 <_printf_i+0x15c>
 801b0b8:	6823      	ldr	r3, [r4, #0]
 801b0ba:	079b      	lsls	r3, r3, #30
 801b0bc:	d413      	bmi.n	801b0e6 <_printf_i+0x22e>
 801b0be:	68e0      	ldr	r0, [r4, #12]
 801b0c0:	9b03      	ldr	r3, [sp, #12]
 801b0c2:	4298      	cmp	r0, r3
 801b0c4:	bfb8      	it	lt
 801b0c6:	4618      	movlt	r0, r3
 801b0c8:	e7a6      	b.n	801b018 <_printf_i+0x160>
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	4632      	mov	r2, r6
 801b0ce:	4649      	mov	r1, r9
 801b0d0:	4640      	mov	r0, r8
 801b0d2:	47d0      	blx	sl
 801b0d4:	3001      	adds	r0, #1
 801b0d6:	d09d      	beq.n	801b014 <_printf_i+0x15c>
 801b0d8:	3501      	adds	r5, #1
 801b0da:	68e3      	ldr	r3, [r4, #12]
 801b0dc:	9903      	ldr	r1, [sp, #12]
 801b0de:	1a5b      	subs	r3, r3, r1
 801b0e0:	42ab      	cmp	r3, r5
 801b0e2:	dcf2      	bgt.n	801b0ca <_printf_i+0x212>
 801b0e4:	e7eb      	b.n	801b0be <_printf_i+0x206>
 801b0e6:	2500      	movs	r5, #0
 801b0e8:	f104 0619 	add.w	r6, r4, #25
 801b0ec:	e7f5      	b.n	801b0da <_printf_i+0x222>
 801b0ee:	bf00      	nop
 801b0f0:	0801e537 	.word	0x0801e537
 801b0f4:	0801e548 	.word	0x0801e548

0801b0f8 <__sflush_r>:
 801b0f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b100:	0716      	lsls	r6, r2, #28
 801b102:	4605      	mov	r5, r0
 801b104:	460c      	mov	r4, r1
 801b106:	d454      	bmi.n	801b1b2 <__sflush_r+0xba>
 801b108:	684b      	ldr	r3, [r1, #4]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	dc02      	bgt.n	801b114 <__sflush_r+0x1c>
 801b10e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b110:	2b00      	cmp	r3, #0
 801b112:	dd48      	ble.n	801b1a6 <__sflush_r+0xae>
 801b114:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b116:	2e00      	cmp	r6, #0
 801b118:	d045      	beq.n	801b1a6 <__sflush_r+0xae>
 801b11a:	2300      	movs	r3, #0
 801b11c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b120:	682f      	ldr	r7, [r5, #0]
 801b122:	6a21      	ldr	r1, [r4, #32]
 801b124:	602b      	str	r3, [r5, #0]
 801b126:	d030      	beq.n	801b18a <__sflush_r+0x92>
 801b128:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b12a:	89a3      	ldrh	r3, [r4, #12]
 801b12c:	0759      	lsls	r1, r3, #29
 801b12e:	d505      	bpl.n	801b13c <__sflush_r+0x44>
 801b130:	6863      	ldr	r3, [r4, #4]
 801b132:	1ad2      	subs	r2, r2, r3
 801b134:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b136:	b10b      	cbz	r3, 801b13c <__sflush_r+0x44>
 801b138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b13a:	1ad2      	subs	r2, r2, r3
 801b13c:	2300      	movs	r3, #0
 801b13e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b140:	6a21      	ldr	r1, [r4, #32]
 801b142:	4628      	mov	r0, r5
 801b144:	47b0      	blx	r6
 801b146:	1c43      	adds	r3, r0, #1
 801b148:	89a3      	ldrh	r3, [r4, #12]
 801b14a:	d106      	bne.n	801b15a <__sflush_r+0x62>
 801b14c:	6829      	ldr	r1, [r5, #0]
 801b14e:	291d      	cmp	r1, #29
 801b150:	d82b      	bhi.n	801b1aa <__sflush_r+0xb2>
 801b152:	4a2a      	ldr	r2, [pc, #168]	@ (801b1fc <__sflush_r+0x104>)
 801b154:	410a      	asrs	r2, r1
 801b156:	07d6      	lsls	r6, r2, #31
 801b158:	d427      	bmi.n	801b1aa <__sflush_r+0xb2>
 801b15a:	2200      	movs	r2, #0
 801b15c:	6062      	str	r2, [r4, #4]
 801b15e:	04d9      	lsls	r1, r3, #19
 801b160:	6922      	ldr	r2, [r4, #16]
 801b162:	6022      	str	r2, [r4, #0]
 801b164:	d504      	bpl.n	801b170 <__sflush_r+0x78>
 801b166:	1c42      	adds	r2, r0, #1
 801b168:	d101      	bne.n	801b16e <__sflush_r+0x76>
 801b16a:	682b      	ldr	r3, [r5, #0]
 801b16c:	b903      	cbnz	r3, 801b170 <__sflush_r+0x78>
 801b16e:	6560      	str	r0, [r4, #84]	@ 0x54
 801b170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b172:	602f      	str	r7, [r5, #0]
 801b174:	b1b9      	cbz	r1, 801b1a6 <__sflush_r+0xae>
 801b176:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b17a:	4299      	cmp	r1, r3
 801b17c:	d002      	beq.n	801b184 <__sflush_r+0x8c>
 801b17e:	4628      	mov	r0, r5
 801b180:	f7ff fb40 	bl	801a804 <_free_r>
 801b184:	2300      	movs	r3, #0
 801b186:	6363      	str	r3, [r4, #52]	@ 0x34
 801b188:	e00d      	b.n	801b1a6 <__sflush_r+0xae>
 801b18a:	2301      	movs	r3, #1
 801b18c:	4628      	mov	r0, r5
 801b18e:	47b0      	blx	r6
 801b190:	4602      	mov	r2, r0
 801b192:	1c50      	adds	r0, r2, #1
 801b194:	d1c9      	bne.n	801b12a <__sflush_r+0x32>
 801b196:	682b      	ldr	r3, [r5, #0]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d0c6      	beq.n	801b12a <__sflush_r+0x32>
 801b19c:	2b1d      	cmp	r3, #29
 801b19e:	d001      	beq.n	801b1a4 <__sflush_r+0xac>
 801b1a0:	2b16      	cmp	r3, #22
 801b1a2:	d11e      	bne.n	801b1e2 <__sflush_r+0xea>
 801b1a4:	602f      	str	r7, [r5, #0]
 801b1a6:	2000      	movs	r0, #0
 801b1a8:	e022      	b.n	801b1f0 <__sflush_r+0xf8>
 801b1aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1ae:	b21b      	sxth	r3, r3
 801b1b0:	e01b      	b.n	801b1ea <__sflush_r+0xf2>
 801b1b2:	690f      	ldr	r7, [r1, #16]
 801b1b4:	2f00      	cmp	r7, #0
 801b1b6:	d0f6      	beq.n	801b1a6 <__sflush_r+0xae>
 801b1b8:	0793      	lsls	r3, r2, #30
 801b1ba:	680e      	ldr	r6, [r1, #0]
 801b1bc:	bf08      	it	eq
 801b1be:	694b      	ldreq	r3, [r1, #20]
 801b1c0:	600f      	str	r7, [r1, #0]
 801b1c2:	bf18      	it	ne
 801b1c4:	2300      	movne	r3, #0
 801b1c6:	eba6 0807 	sub.w	r8, r6, r7
 801b1ca:	608b      	str	r3, [r1, #8]
 801b1cc:	f1b8 0f00 	cmp.w	r8, #0
 801b1d0:	dde9      	ble.n	801b1a6 <__sflush_r+0xae>
 801b1d2:	6a21      	ldr	r1, [r4, #32]
 801b1d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b1d6:	4643      	mov	r3, r8
 801b1d8:	463a      	mov	r2, r7
 801b1da:	4628      	mov	r0, r5
 801b1dc:	47b0      	blx	r6
 801b1de:	2800      	cmp	r0, #0
 801b1e0:	dc08      	bgt.n	801b1f4 <__sflush_r+0xfc>
 801b1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b1ea:	81a3      	strh	r3, [r4, #12]
 801b1ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b1f4:	4407      	add	r7, r0
 801b1f6:	eba8 0800 	sub.w	r8, r8, r0
 801b1fa:	e7e7      	b.n	801b1cc <__sflush_r+0xd4>
 801b1fc:	dfbffffe 	.word	0xdfbffffe

0801b200 <_fflush_r>:
 801b200:	b538      	push	{r3, r4, r5, lr}
 801b202:	690b      	ldr	r3, [r1, #16]
 801b204:	4605      	mov	r5, r0
 801b206:	460c      	mov	r4, r1
 801b208:	b913      	cbnz	r3, 801b210 <_fflush_r+0x10>
 801b20a:	2500      	movs	r5, #0
 801b20c:	4628      	mov	r0, r5
 801b20e:	bd38      	pop	{r3, r4, r5, pc}
 801b210:	b118      	cbz	r0, 801b21a <_fflush_r+0x1a>
 801b212:	6a03      	ldr	r3, [r0, #32]
 801b214:	b90b      	cbnz	r3, 801b21a <_fflush_r+0x1a>
 801b216:	f7fe ff85 	bl	801a124 <__sinit>
 801b21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d0f3      	beq.n	801b20a <_fflush_r+0xa>
 801b222:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b224:	07d0      	lsls	r0, r2, #31
 801b226:	d404      	bmi.n	801b232 <_fflush_r+0x32>
 801b228:	0599      	lsls	r1, r3, #22
 801b22a:	d402      	bmi.n	801b232 <_fflush_r+0x32>
 801b22c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b22e:	f7ff faa6 	bl	801a77e <__retarget_lock_acquire_recursive>
 801b232:	4628      	mov	r0, r5
 801b234:	4621      	mov	r1, r4
 801b236:	f7ff ff5f 	bl	801b0f8 <__sflush_r>
 801b23a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b23c:	07da      	lsls	r2, r3, #31
 801b23e:	4605      	mov	r5, r0
 801b240:	d4e4      	bmi.n	801b20c <_fflush_r+0xc>
 801b242:	89a3      	ldrh	r3, [r4, #12]
 801b244:	059b      	lsls	r3, r3, #22
 801b246:	d4e1      	bmi.n	801b20c <_fflush_r+0xc>
 801b248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b24a:	f7ff fa99 	bl	801a780 <__retarget_lock_release_recursive>
 801b24e:	e7dd      	b.n	801b20c <_fflush_r+0xc>

0801b250 <fiprintf>:
 801b250:	b40e      	push	{r1, r2, r3}
 801b252:	b503      	push	{r0, r1, lr}
 801b254:	4601      	mov	r1, r0
 801b256:	ab03      	add	r3, sp, #12
 801b258:	4805      	ldr	r0, [pc, #20]	@ (801b270 <fiprintf+0x20>)
 801b25a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b25e:	6800      	ldr	r0, [r0, #0]
 801b260:	9301      	str	r3, [sp, #4]
 801b262:	f7ff fca3 	bl	801abac <_vfiprintf_r>
 801b266:	b002      	add	sp, #8
 801b268:	f85d eb04 	ldr.w	lr, [sp], #4
 801b26c:	b003      	add	sp, #12
 801b26e:	4770      	bx	lr
 801b270:	20000c54 	.word	0x20000c54

0801b274 <__swhatbuf_r>:
 801b274:	b570      	push	{r4, r5, r6, lr}
 801b276:	460c      	mov	r4, r1
 801b278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b27c:	2900      	cmp	r1, #0
 801b27e:	b096      	sub	sp, #88	@ 0x58
 801b280:	4615      	mov	r5, r2
 801b282:	461e      	mov	r6, r3
 801b284:	da0d      	bge.n	801b2a2 <__swhatbuf_r+0x2e>
 801b286:	89a3      	ldrh	r3, [r4, #12]
 801b288:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b28c:	f04f 0100 	mov.w	r1, #0
 801b290:	bf14      	ite	ne
 801b292:	2340      	movne	r3, #64	@ 0x40
 801b294:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b298:	2000      	movs	r0, #0
 801b29a:	6031      	str	r1, [r6, #0]
 801b29c:	602b      	str	r3, [r5, #0]
 801b29e:	b016      	add	sp, #88	@ 0x58
 801b2a0:	bd70      	pop	{r4, r5, r6, pc}
 801b2a2:	466a      	mov	r2, sp
 801b2a4:	f000 f848 	bl	801b338 <_fstat_r>
 801b2a8:	2800      	cmp	r0, #0
 801b2aa:	dbec      	blt.n	801b286 <__swhatbuf_r+0x12>
 801b2ac:	9901      	ldr	r1, [sp, #4]
 801b2ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b2b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b2b6:	4259      	negs	r1, r3
 801b2b8:	4159      	adcs	r1, r3
 801b2ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b2be:	e7eb      	b.n	801b298 <__swhatbuf_r+0x24>

0801b2c0 <__smakebuf_r>:
 801b2c0:	898b      	ldrh	r3, [r1, #12]
 801b2c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b2c4:	079d      	lsls	r5, r3, #30
 801b2c6:	4606      	mov	r6, r0
 801b2c8:	460c      	mov	r4, r1
 801b2ca:	d507      	bpl.n	801b2dc <__smakebuf_r+0x1c>
 801b2cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b2d0:	6023      	str	r3, [r4, #0]
 801b2d2:	6123      	str	r3, [r4, #16]
 801b2d4:	2301      	movs	r3, #1
 801b2d6:	6163      	str	r3, [r4, #20]
 801b2d8:	b003      	add	sp, #12
 801b2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2dc:	ab01      	add	r3, sp, #4
 801b2de:	466a      	mov	r2, sp
 801b2e0:	f7ff ffc8 	bl	801b274 <__swhatbuf_r>
 801b2e4:	9f00      	ldr	r7, [sp, #0]
 801b2e6:	4605      	mov	r5, r0
 801b2e8:	4639      	mov	r1, r7
 801b2ea:	4630      	mov	r0, r6
 801b2ec:	f7fe fce8 	bl	8019cc0 <_malloc_r>
 801b2f0:	b948      	cbnz	r0, 801b306 <__smakebuf_r+0x46>
 801b2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2f6:	059a      	lsls	r2, r3, #22
 801b2f8:	d4ee      	bmi.n	801b2d8 <__smakebuf_r+0x18>
 801b2fa:	f023 0303 	bic.w	r3, r3, #3
 801b2fe:	f043 0302 	orr.w	r3, r3, #2
 801b302:	81a3      	strh	r3, [r4, #12]
 801b304:	e7e2      	b.n	801b2cc <__smakebuf_r+0xc>
 801b306:	89a3      	ldrh	r3, [r4, #12]
 801b308:	6020      	str	r0, [r4, #0]
 801b30a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b30e:	81a3      	strh	r3, [r4, #12]
 801b310:	9b01      	ldr	r3, [sp, #4]
 801b312:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b316:	b15b      	cbz	r3, 801b330 <__smakebuf_r+0x70>
 801b318:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b31c:	4630      	mov	r0, r6
 801b31e:	f000 f81d 	bl	801b35c <_isatty_r>
 801b322:	b128      	cbz	r0, 801b330 <__smakebuf_r+0x70>
 801b324:	89a3      	ldrh	r3, [r4, #12]
 801b326:	f023 0303 	bic.w	r3, r3, #3
 801b32a:	f043 0301 	orr.w	r3, r3, #1
 801b32e:	81a3      	strh	r3, [r4, #12]
 801b330:	89a3      	ldrh	r3, [r4, #12]
 801b332:	431d      	orrs	r5, r3
 801b334:	81a5      	strh	r5, [r4, #12]
 801b336:	e7cf      	b.n	801b2d8 <__smakebuf_r+0x18>

0801b338 <_fstat_r>:
 801b338:	b538      	push	{r3, r4, r5, lr}
 801b33a:	4d07      	ldr	r5, [pc, #28]	@ (801b358 <_fstat_r+0x20>)
 801b33c:	2300      	movs	r3, #0
 801b33e:	4604      	mov	r4, r0
 801b340:	4608      	mov	r0, r1
 801b342:	4611      	mov	r1, r2
 801b344:	602b      	str	r3, [r5, #0]
 801b346:	f7e7 fb15 	bl	8002974 <_fstat>
 801b34a:	1c43      	adds	r3, r0, #1
 801b34c:	d102      	bne.n	801b354 <_fstat_r+0x1c>
 801b34e:	682b      	ldr	r3, [r5, #0]
 801b350:	b103      	cbz	r3, 801b354 <_fstat_r+0x1c>
 801b352:	6023      	str	r3, [r4, #0]
 801b354:	bd38      	pop	{r3, r4, r5, pc}
 801b356:	bf00      	nop
 801b358:	2000c004 	.word	0x2000c004

0801b35c <_isatty_r>:
 801b35c:	b538      	push	{r3, r4, r5, lr}
 801b35e:	4d06      	ldr	r5, [pc, #24]	@ (801b378 <_isatty_r+0x1c>)
 801b360:	2300      	movs	r3, #0
 801b362:	4604      	mov	r4, r0
 801b364:	4608      	mov	r0, r1
 801b366:	602b      	str	r3, [r5, #0]
 801b368:	f7e7 fb14 	bl	8002994 <_isatty>
 801b36c:	1c43      	adds	r3, r0, #1
 801b36e:	d102      	bne.n	801b376 <_isatty_r+0x1a>
 801b370:	682b      	ldr	r3, [r5, #0]
 801b372:	b103      	cbz	r3, 801b376 <_isatty_r+0x1a>
 801b374:	6023      	str	r3, [r4, #0]
 801b376:	bd38      	pop	{r3, r4, r5, pc}
 801b378:	2000c004 	.word	0x2000c004

0801b37c <abort>:
 801b37c:	b508      	push	{r3, lr}
 801b37e:	2006      	movs	r0, #6
 801b380:	f000 f82c 	bl	801b3dc <raise>
 801b384:	2001      	movs	r0, #1
 801b386:	f7e7 faa5 	bl	80028d4 <_exit>

0801b38a <_raise_r>:
 801b38a:	291f      	cmp	r1, #31
 801b38c:	b538      	push	{r3, r4, r5, lr}
 801b38e:	4605      	mov	r5, r0
 801b390:	460c      	mov	r4, r1
 801b392:	d904      	bls.n	801b39e <_raise_r+0x14>
 801b394:	2316      	movs	r3, #22
 801b396:	6003      	str	r3, [r0, #0]
 801b398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b39c:	bd38      	pop	{r3, r4, r5, pc}
 801b39e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b3a0:	b112      	cbz	r2, 801b3a8 <_raise_r+0x1e>
 801b3a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b3a6:	b94b      	cbnz	r3, 801b3bc <_raise_r+0x32>
 801b3a8:	4628      	mov	r0, r5
 801b3aa:	f000 f831 	bl	801b410 <_getpid_r>
 801b3ae:	4622      	mov	r2, r4
 801b3b0:	4601      	mov	r1, r0
 801b3b2:	4628      	mov	r0, r5
 801b3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3b8:	f000 b818 	b.w	801b3ec <_kill_r>
 801b3bc:	2b01      	cmp	r3, #1
 801b3be:	d00a      	beq.n	801b3d6 <_raise_r+0x4c>
 801b3c0:	1c59      	adds	r1, r3, #1
 801b3c2:	d103      	bne.n	801b3cc <_raise_r+0x42>
 801b3c4:	2316      	movs	r3, #22
 801b3c6:	6003      	str	r3, [r0, #0]
 801b3c8:	2001      	movs	r0, #1
 801b3ca:	e7e7      	b.n	801b39c <_raise_r+0x12>
 801b3cc:	2100      	movs	r1, #0
 801b3ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	4798      	blx	r3
 801b3d6:	2000      	movs	r0, #0
 801b3d8:	e7e0      	b.n	801b39c <_raise_r+0x12>
	...

0801b3dc <raise>:
 801b3dc:	4b02      	ldr	r3, [pc, #8]	@ (801b3e8 <raise+0xc>)
 801b3de:	4601      	mov	r1, r0
 801b3e0:	6818      	ldr	r0, [r3, #0]
 801b3e2:	f7ff bfd2 	b.w	801b38a <_raise_r>
 801b3e6:	bf00      	nop
 801b3e8:	20000c54 	.word	0x20000c54

0801b3ec <_kill_r>:
 801b3ec:	b538      	push	{r3, r4, r5, lr}
 801b3ee:	4d07      	ldr	r5, [pc, #28]	@ (801b40c <_kill_r+0x20>)
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	4604      	mov	r4, r0
 801b3f4:	4608      	mov	r0, r1
 801b3f6:	4611      	mov	r1, r2
 801b3f8:	602b      	str	r3, [r5, #0]
 801b3fa:	f7e7 fa5b 	bl	80028b4 <_kill>
 801b3fe:	1c43      	adds	r3, r0, #1
 801b400:	d102      	bne.n	801b408 <_kill_r+0x1c>
 801b402:	682b      	ldr	r3, [r5, #0]
 801b404:	b103      	cbz	r3, 801b408 <_kill_r+0x1c>
 801b406:	6023      	str	r3, [r4, #0]
 801b408:	bd38      	pop	{r3, r4, r5, pc}
 801b40a:	bf00      	nop
 801b40c:	2000c004 	.word	0x2000c004

0801b410 <_getpid_r>:
 801b410:	f7e7 ba48 	b.w	80028a4 <_getpid>

0801b414 <atan2>:
 801b414:	f000 bb58 	b.w	801bac8 <__ieee754_atan2>

0801b418 <hypot>:
 801b418:	b508      	push	{r3, lr}
 801b41a:	ed2d 8b06 	vpush	{d8-d10}
 801b41e:	eeb0 aa40 	vmov.f32	s20, s0
 801b422:	eef0 aa60 	vmov.f32	s21, s1
 801b426:	eeb0 9a41 	vmov.f32	s18, s2
 801b42a:	eef0 9a61 	vmov.f32	s19, s3
 801b42e:	f000 fc11 	bl	801bc54 <__ieee754_hypot>
 801b432:	eeb0 8a40 	vmov.f32	s16, s0
 801b436:	eef0 8a60 	vmov.f32	s17, s1
 801b43a:	f000 fa5d 	bl	801b8f8 <finite>
 801b43e:	b998      	cbnz	r0, 801b468 <hypot+0x50>
 801b440:	eeb0 0a4a 	vmov.f32	s0, s20
 801b444:	eef0 0a6a 	vmov.f32	s1, s21
 801b448:	f000 fa56 	bl	801b8f8 <finite>
 801b44c:	b160      	cbz	r0, 801b468 <hypot+0x50>
 801b44e:	eeb0 0a49 	vmov.f32	s0, s18
 801b452:	eef0 0a69 	vmov.f32	s1, s19
 801b456:	f000 fa4f 	bl	801b8f8 <finite>
 801b45a:	b128      	cbz	r0, 801b468 <hypot+0x50>
 801b45c:	f7ff f964 	bl	801a728 <__errno>
 801b460:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 801b478 <hypot+0x60>
 801b464:	2322      	movs	r3, #34	@ 0x22
 801b466:	6003      	str	r3, [r0, #0]
 801b468:	eeb0 0a48 	vmov.f32	s0, s16
 801b46c:	eef0 0a68 	vmov.f32	s1, s17
 801b470:	ecbd 8b06 	vpop	{d8-d10}
 801b474:	bd08      	pop	{r3, pc}
 801b476:	bf00      	nop
 801b478:	00000000 	.word	0x00000000
 801b47c:	7ff00000 	.word	0x7ff00000

0801b480 <pow>:
 801b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b482:	ed2d 8b02 	vpush	{d8}
 801b486:	eeb0 8a40 	vmov.f32	s16, s0
 801b48a:	eef0 8a60 	vmov.f32	s17, s1
 801b48e:	ec55 4b11 	vmov	r4, r5, d1
 801b492:	f000 fcf5 	bl	801be80 <__ieee754_pow>
 801b496:	4622      	mov	r2, r4
 801b498:	462b      	mov	r3, r5
 801b49a:	4620      	mov	r0, r4
 801b49c:	4629      	mov	r1, r5
 801b49e:	ec57 6b10 	vmov	r6, r7, d0
 801b4a2:	f7e5 fb7b 	bl	8000b9c <__aeabi_dcmpun>
 801b4a6:	2800      	cmp	r0, #0
 801b4a8:	d13b      	bne.n	801b522 <pow+0xa2>
 801b4aa:	ec51 0b18 	vmov	r0, r1, d8
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	f7e5 fb41 	bl	8000b38 <__aeabi_dcmpeq>
 801b4b6:	b1b8      	cbz	r0, 801b4e8 <pow+0x68>
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	4620      	mov	r0, r4
 801b4be:	4629      	mov	r1, r5
 801b4c0:	f7e5 fb3a 	bl	8000b38 <__aeabi_dcmpeq>
 801b4c4:	2800      	cmp	r0, #0
 801b4c6:	d146      	bne.n	801b556 <pow+0xd6>
 801b4c8:	ec45 4b10 	vmov	d0, r4, r5
 801b4cc:	f000 fa14 	bl	801b8f8 <finite>
 801b4d0:	b338      	cbz	r0, 801b522 <pow+0xa2>
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	4629      	mov	r1, r5
 801b4da:	f7e5 fb37 	bl	8000b4c <__aeabi_dcmplt>
 801b4de:	b300      	cbz	r0, 801b522 <pow+0xa2>
 801b4e0:	f7ff f922 	bl	801a728 <__errno>
 801b4e4:	2322      	movs	r3, #34	@ 0x22
 801b4e6:	e01b      	b.n	801b520 <pow+0xa0>
 801b4e8:	ec47 6b10 	vmov	d0, r6, r7
 801b4ec:	f000 fa04 	bl	801b8f8 <finite>
 801b4f0:	b9e0      	cbnz	r0, 801b52c <pow+0xac>
 801b4f2:	eeb0 0a48 	vmov.f32	s0, s16
 801b4f6:	eef0 0a68 	vmov.f32	s1, s17
 801b4fa:	f000 f9fd 	bl	801b8f8 <finite>
 801b4fe:	b1a8      	cbz	r0, 801b52c <pow+0xac>
 801b500:	ec45 4b10 	vmov	d0, r4, r5
 801b504:	f000 f9f8 	bl	801b8f8 <finite>
 801b508:	b180      	cbz	r0, 801b52c <pow+0xac>
 801b50a:	4632      	mov	r2, r6
 801b50c:	463b      	mov	r3, r7
 801b50e:	4630      	mov	r0, r6
 801b510:	4639      	mov	r1, r7
 801b512:	f7e5 fb43 	bl	8000b9c <__aeabi_dcmpun>
 801b516:	2800      	cmp	r0, #0
 801b518:	d0e2      	beq.n	801b4e0 <pow+0x60>
 801b51a:	f7ff f905 	bl	801a728 <__errno>
 801b51e:	2321      	movs	r3, #33	@ 0x21
 801b520:	6003      	str	r3, [r0, #0]
 801b522:	ecbd 8b02 	vpop	{d8}
 801b526:	ec47 6b10 	vmov	d0, r6, r7
 801b52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b52c:	2200      	movs	r2, #0
 801b52e:	2300      	movs	r3, #0
 801b530:	4630      	mov	r0, r6
 801b532:	4639      	mov	r1, r7
 801b534:	f7e5 fb00 	bl	8000b38 <__aeabi_dcmpeq>
 801b538:	2800      	cmp	r0, #0
 801b53a:	d0f2      	beq.n	801b522 <pow+0xa2>
 801b53c:	eeb0 0a48 	vmov.f32	s0, s16
 801b540:	eef0 0a68 	vmov.f32	s1, s17
 801b544:	f000 f9d8 	bl	801b8f8 <finite>
 801b548:	2800      	cmp	r0, #0
 801b54a:	d0ea      	beq.n	801b522 <pow+0xa2>
 801b54c:	ec45 4b10 	vmov	d0, r4, r5
 801b550:	f000 f9d2 	bl	801b8f8 <finite>
 801b554:	e7c3      	b.n	801b4de <pow+0x5e>
 801b556:	4f01      	ldr	r7, [pc, #4]	@ (801b55c <pow+0xdc>)
 801b558:	2600      	movs	r6, #0
 801b55a:	e7e2      	b.n	801b522 <pow+0xa2>
 801b55c:	3ff00000 	.word	0x3ff00000

0801b560 <sqrt>:
 801b560:	b538      	push	{r3, r4, r5, lr}
 801b562:	ed2d 8b02 	vpush	{d8}
 801b566:	ec55 4b10 	vmov	r4, r5, d0
 801b56a:	f000 f9d1 	bl	801b910 <__ieee754_sqrt>
 801b56e:	4622      	mov	r2, r4
 801b570:	462b      	mov	r3, r5
 801b572:	4620      	mov	r0, r4
 801b574:	4629      	mov	r1, r5
 801b576:	eeb0 8a40 	vmov.f32	s16, s0
 801b57a:	eef0 8a60 	vmov.f32	s17, s1
 801b57e:	f7e5 fb0d 	bl	8000b9c <__aeabi_dcmpun>
 801b582:	b990      	cbnz	r0, 801b5aa <sqrt+0x4a>
 801b584:	2200      	movs	r2, #0
 801b586:	2300      	movs	r3, #0
 801b588:	4620      	mov	r0, r4
 801b58a:	4629      	mov	r1, r5
 801b58c:	f7e5 fade 	bl	8000b4c <__aeabi_dcmplt>
 801b590:	b158      	cbz	r0, 801b5aa <sqrt+0x4a>
 801b592:	f7ff f8c9 	bl	801a728 <__errno>
 801b596:	2321      	movs	r3, #33	@ 0x21
 801b598:	6003      	str	r3, [r0, #0]
 801b59a:	2200      	movs	r2, #0
 801b59c:	2300      	movs	r3, #0
 801b59e:	4610      	mov	r0, r2
 801b5a0:	4619      	mov	r1, r3
 801b5a2:	f7e5 f98b 	bl	80008bc <__aeabi_ddiv>
 801b5a6:	ec41 0b18 	vmov	d8, r0, r1
 801b5aa:	eeb0 0a48 	vmov.f32	s0, s16
 801b5ae:	eef0 0a68 	vmov.f32	s1, s17
 801b5b2:	ecbd 8b02 	vpop	{d8}
 801b5b6:	bd38      	pop	{r3, r4, r5, pc}

0801b5b8 <atan>:
 801b5b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5bc:	ec55 4b10 	vmov	r4, r5, d0
 801b5c0:	4bbf      	ldr	r3, [pc, #764]	@ (801b8c0 <atan+0x308>)
 801b5c2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801b5c6:	429e      	cmp	r6, r3
 801b5c8:	46ab      	mov	fp, r5
 801b5ca:	d918      	bls.n	801b5fe <atan+0x46>
 801b5cc:	4bbd      	ldr	r3, [pc, #756]	@ (801b8c4 <atan+0x30c>)
 801b5ce:	429e      	cmp	r6, r3
 801b5d0:	d801      	bhi.n	801b5d6 <atan+0x1e>
 801b5d2:	d109      	bne.n	801b5e8 <atan+0x30>
 801b5d4:	b144      	cbz	r4, 801b5e8 <atan+0x30>
 801b5d6:	4622      	mov	r2, r4
 801b5d8:	462b      	mov	r3, r5
 801b5da:	4620      	mov	r0, r4
 801b5dc:	4629      	mov	r1, r5
 801b5de:	f7e4 fe8d 	bl	80002fc <__adddf3>
 801b5e2:	4604      	mov	r4, r0
 801b5e4:	460d      	mov	r5, r1
 801b5e6:	e006      	b.n	801b5f6 <atan+0x3e>
 801b5e8:	f1bb 0f00 	cmp.w	fp, #0
 801b5ec:	f340 812b 	ble.w	801b846 <atan+0x28e>
 801b5f0:	a597      	add	r5, pc, #604	@ (adr r5, 801b850 <atan+0x298>)
 801b5f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b5f6:	ec45 4b10 	vmov	d0, r4, r5
 801b5fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5fe:	4bb2      	ldr	r3, [pc, #712]	@ (801b8c8 <atan+0x310>)
 801b600:	429e      	cmp	r6, r3
 801b602:	d813      	bhi.n	801b62c <atan+0x74>
 801b604:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801b608:	429e      	cmp	r6, r3
 801b60a:	d80c      	bhi.n	801b626 <atan+0x6e>
 801b60c:	a392      	add	r3, pc, #584	@ (adr r3, 801b858 <atan+0x2a0>)
 801b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b612:	4620      	mov	r0, r4
 801b614:	4629      	mov	r1, r5
 801b616:	f7e4 fe71 	bl	80002fc <__adddf3>
 801b61a:	4bac      	ldr	r3, [pc, #688]	@ (801b8cc <atan+0x314>)
 801b61c:	2200      	movs	r2, #0
 801b61e:	f7e5 fab3 	bl	8000b88 <__aeabi_dcmpgt>
 801b622:	2800      	cmp	r0, #0
 801b624:	d1e7      	bne.n	801b5f6 <atan+0x3e>
 801b626:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801b62a:	e029      	b.n	801b680 <atan+0xc8>
 801b62c:	f000 f95c 	bl	801b8e8 <fabs>
 801b630:	4ba7      	ldr	r3, [pc, #668]	@ (801b8d0 <atan+0x318>)
 801b632:	429e      	cmp	r6, r3
 801b634:	ec55 4b10 	vmov	r4, r5, d0
 801b638:	f200 80bc 	bhi.w	801b7b4 <atan+0x1fc>
 801b63c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801b640:	429e      	cmp	r6, r3
 801b642:	f200 809e 	bhi.w	801b782 <atan+0x1ca>
 801b646:	4622      	mov	r2, r4
 801b648:	462b      	mov	r3, r5
 801b64a:	4620      	mov	r0, r4
 801b64c:	4629      	mov	r1, r5
 801b64e:	f7e4 fe55 	bl	80002fc <__adddf3>
 801b652:	4b9e      	ldr	r3, [pc, #632]	@ (801b8cc <atan+0x314>)
 801b654:	2200      	movs	r2, #0
 801b656:	f7e4 fe4f 	bl	80002f8 <__aeabi_dsub>
 801b65a:	2200      	movs	r2, #0
 801b65c:	4606      	mov	r6, r0
 801b65e:	460f      	mov	r7, r1
 801b660:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801b664:	4620      	mov	r0, r4
 801b666:	4629      	mov	r1, r5
 801b668:	f7e4 fe48 	bl	80002fc <__adddf3>
 801b66c:	4602      	mov	r2, r0
 801b66e:	460b      	mov	r3, r1
 801b670:	4630      	mov	r0, r6
 801b672:	4639      	mov	r1, r7
 801b674:	f7e5 f922 	bl	80008bc <__aeabi_ddiv>
 801b678:	f04f 0a00 	mov.w	sl, #0
 801b67c:	4604      	mov	r4, r0
 801b67e:	460d      	mov	r5, r1
 801b680:	4622      	mov	r2, r4
 801b682:	462b      	mov	r3, r5
 801b684:	4620      	mov	r0, r4
 801b686:	4629      	mov	r1, r5
 801b688:	f7e4 ffee 	bl	8000668 <__aeabi_dmul>
 801b68c:	4602      	mov	r2, r0
 801b68e:	460b      	mov	r3, r1
 801b690:	4680      	mov	r8, r0
 801b692:	4689      	mov	r9, r1
 801b694:	f7e4 ffe8 	bl	8000668 <__aeabi_dmul>
 801b698:	a371      	add	r3, pc, #452	@ (adr r3, 801b860 <atan+0x2a8>)
 801b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b69e:	4606      	mov	r6, r0
 801b6a0:	460f      	mov	r7, r1
 801b6a2:	f7e4 ffe1 	bl	8000668 <__aeabi_dmul>
 801b6a6:	a370      	add	r3, pc, #448	@ (adr r3, 801b868 <atan+0x2b0>)
 801b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ac:	f7e4 fe26 	bl	80002fc <__adddf3>
 801b6b0:	4632      	mov	r2, r6
 801b6b2:	463b      	mov	r3, r7
 801b6b4:	f7e4 ffd8 	bl	8000668 <__aeabi_dmul>
 801b6b8:	a36d      	add	r3, pc, #436	@ (adr r3, 801b870 <atan+0x2b8>)
 801b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6be:	f7e4 fe1d 	bl	80002fc <__adddf3>
 801b6c2:	4632      	mov	r2, r6
 801b6c4:	463b      	mov	r3, r7
 801b6c6:	f7e4 ffcf 	bl	8000668 <__aeabi_dmul>
 801b6ca:	a36b      	add	r3, pc, #428	@ (adr r3, 801b878 <atan+0x2c0>)
 801b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6d0:	f7e4 fe14 	bl	80002fc <__adddf3>
 801b6d4:	4632      	mov	r2, r6
 801b6d6:	463b      	mov	r3, r7
 801b6d8:	f7e4 ffc6 	bl	8000668 <__aeabi_dmul>
 801b6dc:	a368      	add	r3, pc, #416	@ (adr r3, 801b880 <atan+0x2c8>)
 801b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6e2:	f7e4 fe0b 	bl	80002fc <__adddf3>
 801b6e6:	4632      	mov	r2, r6
 801b6e8:	463b      	mov	r3, r7
 801b6ea:	f7e4 ffbd 	bl	8000668 <__aeabi_dmul>
 801b6ee:	a366      	add	r3, pc, #408	@ (adr r3, 801b888 <atan+0x2d0>)
 801b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f4:	f7e4 fe02 	bl	80002fc <__adddf3>
 801b6f8:	4642      	mov	r2, r8
 801b6fa:	464b      	mov	r3, r9
 801b6fc:	f7e4 ffb4 	bl	8000668 <__aeabi_dmul>
 801b700:	a363      	add	r3, pc, #396	@ (adr r3, 801b890 <atan+0x2d8>)
 801b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b706:	4680      	mov	r8, r0
 801b708:	4689      	mov	r9, r1
 801b70a:	4630      	mov	r0, r6
 801b70c:	4639      	mov	r1, r7
 801b70e:	f7e4 ffab 	bl	8000668 <__aeabi_dmul>
 801b712:	a361      	add	r3, pc, #388	@ (adr r3, 801b898 <atan+0x2e0>)
 801b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b718:	f7e4 fdee 	bl	80002f8 <__aeabi_dsub>
 801b71c:	4632      	mov	r2, r6
 801b71e:	463b      	mov	r3, r7
 801b720:	f7e4 ffa2 	bl	8000668 <__aeabi_dmul>
 801b724:	a35e      	add	r3, pc, #376	@ (adr r3, 801b8a0 <atan+0x2e8>)
 801b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b72a:	f7e4 fde5 	bl	80002f8 <__aeabi_dsub>
 801b72e:	4632      	mov	r2, r6
 801b730:	463b      	mov	r3, r7
 801b732:	f7e4 ff99 	bl	8000668 <__aeabi_dmul>
 801b736:	a35c      	add	r3, pc, #368	@ (adr r3, 801b8a8 <atan+0x2f0>)
 801b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b73c:	f7e4 fddc 	bl	80002f8 <__aeabi_dsub>
 801b740:	4632      	mov	r2, r6
 801b742:	463b      	mov	r3, r7
 801b744:	f7e4 ff90 	bl	8000668 <__aeabi_dmul>
 801b748:	a359      	add	r3, pc, #356	@ (adr r3, 801b8b0 <atan+0x2f8>)
 801b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b74e:	f7e4 fdd3 	bl	80002f8 <__aeabi_dsub>
 801b752:	4632      	mov	r2, r6
 801b754:	463b      	mov	r3, r7
 801b756:	f7e4 ff87 	bl	8000668 <__aeabi_dmul>
 801b75a:	4602      	mov	r2, r0
 801b75c:	460b      	mov	r3, r1
 801b75e:	4640      	mov	r0, r8
 801b760:	4649      	mov	r1, r9
 801b762:	f7e4 fdcb 	bl	80002fc <__adddf3>
 801b766:	4622      	mov	r2, r4
 801b768:	462b      	mov	r3, r5
 801b76a:	f7e4 ff7d 	bl	8000668 <__aeabi_dmul>
 801b76e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801b772:	4602      	mov	r2, r0
 801b774:	460b      	mov	r3, r1
 801b776:	d148      	bne.n	801b80a <atan+0x252>
 801b778:	4620      	mov	r0, r4
 801b77a:	4629      	mov	r1, r5
 801b77c:	f7e4 fdbc 	bl	80002f8 <__aeabi_dsub>
 801b780:	e72f      	b.n	801b5e2 <atan+0x2a>
 801b782:	4b52      	ldr	r3, [pc, #328]	@ (801b8cc <atan+0x314>)
 801b784:	2200      	movs	r2, #0
 801b786:	4620      	mov	r0, r4
 801b788:	4629      	mov	r1, r5
 801b78a:	f7e4 fdb5 	bl	80002f8 <__aeabi_dsub>
 801b78e:	4b4f      	ldr	r3, [pc, #316]	@ (801b8cc <atan+0x314>)
 801b790:	4606      	mov	r6, r0
 801b792:	460f      	mov	r7, r1
 801b794:	2200      	movs	r2, #0
 801b796:	4620      	mov	r0, r4
 801b798:	4629      	mov	r1, r5
 801b79a:	f7e4 fdaf 	bl	80002fc <__adddf3>
 801b79e:	4602      	mov	r2, r0
 801b7a0:	460b      	mov	r3, r1
 801b7a2:	4630      	mov	r0, r6
 801b7a4:	4639      	mov	r1, r7
 801b7a6:	f7e5 f889 	bl	80008bc <__aeabi_ddiv>
 801b7aa:	f04f 0a01 	mov.w	sl, #1
 801b7ae:	4604      	mov	r4, r0
 801b7b0:	460d      	mov	r5, r1
 801b7b2:	e765      	b.n	801b680 <atan+0xc8>
 801b7b4:	4b47      	ldr	r3, [pc, #284]	@ (801b8d4 <atan+0x31c>)
 801b7b6:	429e      	cmp	r6, r3
 801b7b8:	d21c      	bcs.n	801b7f4 <atan+0x23c>
 801b7ba:	4b47      	ldr	r3, [pc, #284]	@ (801b8d8 <atan+0x320>)
 801b7bc:	2200      	movs	r2, #0
 801b7be:	4620      	mov	r0, r4
 801b7c0:	4629      	mov	r1, r5
 801b7c2:	f7e4 fd99 	bl	80002f8 <__aeabi_dsub>
 801b7c6:	4b44      	ldr	r3, [pc, #272]	@ (801b8d8 <atan+0x320>)
 801b7c8:	4606      	mov	r6, r0
 801b7ca:	460f      	mov	r7, r1
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	4629      	mov	r1, r5
 801b7d2:	f7e4 ff49 	bl	8000668 <__aeabi_dmul>
 801b7d6:	4b3d      	ldr	r3, [pc, #244]	@ (801b8cc <atan+0x314>)
 801b7d8:	2200      	movs	r2, #0
 801b7da:	f7e4 fd8f 	bl	80002fc <__adddf3>
 801b7de:	4602      	mov	r2, r0
 801b7e0:	460b      	mov	r3, r1
 801b7e2:	4630      	mov	r0, r6
 801b7e4:	4639      	mov	r1, r7
 801b7e6:	f7e5 f869 	bl	80008bc <__aeabi_ddiv>
 801b7ea:	f04f 0a02 	mov.w	sl, #2
 801b7ee:	4604      	mov	r4, r0
 801b7f0:	460d      	mov	r5, r1
 801b7f2:	e745      	b.n	801b680 <atan+0xc8>
 801b7f4:	4622      	mov	r2, r4
 801b7f6:	462b      	mov	r3, r5
 801b7f8:	4938      	ldr	r1, [pc, #224]	@ (801b8dc <atan+0x324>)
 801b7fa:	2000      	movs	r0, #0
 801b7fc:	f7e5 f85e 	bl	80008bc <__aeabi_ddiv>
 801b800:	f04f 0a03 	mov.w	sl, #3
 801b804:	4604      	mov	r4, r0
 801b806:	460d      	mov	r5, r1
 801b808:	e73a      	b.n	801b680 <atan+0xc8>
 801b80a:	4b35      	ldr	r3, [pc, #212]	@ (801b8e0 <atan+0x328>)
 801b80c:	4e35      	ldr	r6, [pc, #212]	@ (801b8e4 <atan+0x32c>)
 801b80e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b816:	f7e4 fd6f 	bl	80002f8 <__aeabi_dsub>
 801b81a:	4622      	mov	r2, r4
 801b81c:	462b      	mov	r3, r5
 801b81e:	f7e4 fd6b 	bl	80002f8 <__aeabi_dsub>
 801b822:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801b826:	4602      	mov	r2, r0
 801b828:	460b      	mov	r3, r1
 801b82a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b82e:	f7e4 fd63 	bl	80002f8 <__aeabi_dsub>
 801b832:	f1bb 0f00 	cmp.w	fp, #0
 801b836:	4604      	mov	r4, r0
 801b838:	460d      	mov	r5, r1
 801b83a:	f6bf aedc 	bge.w	801b5f6 <atan+0x3e>
 801b83e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b842:	461d      	mov	r5, r3
 801b844:	e6d7      	b.n	801b5f6 <atan+0x3e>
 801b846:	a51c      	add	r5, pc, #112	@ (adr r5, 801b8b8 <atan+0x300>)
 801b848:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b84c:	e6d3      	b.n	801b5f6 <atan+0x3e>
 801b84e:	bf00      	nop
 801b850:	54442d18 	.word	0x54442d18
 801b854:	3ff921fb 	.word	0x3ff921fb
 801b858:	8800759c 	.word	0x8800759c
 801b85c:	7e37e43c 	.word	0x7e37e43c
 801b860:	e322da11 	.word	0xe322da11
 801b864:	3f90ad3a 	.word	0x3f90ad3a
 801b868:	24760deb 	.word	0x24760deb
 801b86c:	3fa97b4b 	.word	0x3fa97b4b
 801b870:	a0d03d51 	.word	0xa0d03d51
 801b874:	3fb10d66 	.word	0x3fb10d66
 801b878:	c54c206e 	.word	0xc54c206e
 801b87c:	3fb745cd 	.word	0x3fb745cd
 801b880:	920083ff 	.word	0x920083ff
 801b884:	3fc24924 	.word	0x3fc24924
 801b888:	5555550d 	.word	0x5555550d
 801b88c:	3fd55555 	.word	0x3fd55555
 801b890:	2c6a6c2f 	.word	0x2c6a6c2f
 801b894:	bfa2b444 	.word	0xbfa2b444
 801b898:	52defd9a 	.word	0x52defd9a
 801b89c:	3fadde2d 	.word	0x3fadde2d
 801b8a0:	af749a6d 	.word	0xaf749a6d
 801b8a4:	3fb3b0f2 	.word	0x3fb3b0f2
 801b8a8:	fe231671 	.word	0xfe231671
 801b8ac:	3fbc71c6 	.word	0x3fbc71c6
 801b8b0:	9998ebc4 	.word	0x9998ebc4
 801b8b4:	3fc99999 	.word	0x3fc99999
 801b8b8:	54442d18 	.word	0x54442d18
 801b8bc:	bff921fb 	.word	0xbff921fb
 801b8c0:	440fffff 	.word	0x440fffff
 801b8c4:	7ff00000 	.word	0x7ff00000
 801b8c8:	3fdbffff 	.word	0x3fdbffff
 801b8cc:	3ff00000 	.word	0x3ff00000
 801b8d0:	3ff2ffff 	.word	0x3ff2ffff
 801b8d4:	40038000 	.word	0x40038000
 801b8d8:	3ff80000 	.word	0x3ff80000
 801b8dc:	bff00000 	.word	0xbff00000
 801b8e0:	0801e560 	.word	0x0801e560
 801b8e4:	0801e580 	.word	0x0801e580

0801b8e8 <fabs>:
 801b8e8:	ec51 0b10 	vmov	r0, r1, d0
 801b8ec:	4602      	mov	r2, r0
 801b8ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b8f2:	ec43 2b10 	vmov	d0, r2, r3
 801b8f6:	4770      	bx	lr

0801b8f8 <finite>:
 801b8f8:	b082      	sub	sp, #8
 801b8fa:	ed8d 0b00 	vstr	d0, [sp]
 801b8fe:	9801      	ldr	r0, [sp, #4]
 801b900:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801b904:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801b908:	0fc0      	lsrs	r0, r0, #31
 801b90a:	b002      	add	sp, #8
 801b90c:	4770      	bx	lr
	...

0801b910 <__ieee754_sqrt>:
 801b910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b914:	4a68      	ldr	r2, [pc, #416]	@ (801bab8 <__ieee754_sqrt+0x1a8>)
 801b916:	ec55 4b10 	vmov	r4, r5, d0
 801b91a:	43aa      	bics	r2, r5
 801b91c:	462b      	mov	r3, r5
 801b91e:	4621      	mov	r1, r4
 801b920:	d110      	bne.n	801b944 <__ieee754_sqrt+0x34>
 801b922:	4622      	mov	r2, r4
 801b924:	4620      	mov	r0, r4
 801b926:	4629      	mov	r1, r5
 801b928:	f7e4 fe9e 	bl	8000668 <__aeabi_dmul>
 801b92c:	4602      	mov	r2, r0
 801b92e:	460b      	mov	r3, r1
 801b930:	4620      	mov	r0, r4
 801b932:	4629      	mov	r1, r5
 801b934:	f7e4 fce2 	bl	80002fc <__adddf3>
 801b938:	4604      	mov	r4, r0
 801b93a:	460d      	mov	r5, r1
 801b93c:	ec45 4b10 	vmov	d0, r4, r5
 801b940:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b944:	2d00      	cmp	r5, #0
 801b946:	dc0e      	bgt.n	801b966 <__ieee754_sqrt+0x56>
 801b948:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801b94c:	4322      	orrs	r2, r4
 801b94e:	d0f5      	beq.n	801b93c <__ieee754_sqrt+0x2c>
 801b950:	b19d      	cbz	r5, 801b97a <__ieee754_sqrt+0x6a>
 801b952:	4622      	mov	r2, r4
 801b954:	4620      	mov	r0, r4
 801b956:	4629      	mov	r1, r5
 801b958:	f7e4 fcce 	bl	80002f8 <__aeabi_dsub>
 801b95c:	4602      	mov	r2, r0
 801b95e:	460b      	mov	r3, r1
 801b960:	f7e4 ffac 	bl	80008bc <__aeabi_ddiv>
 801b964:	e7e8      	b.n	801b938 <__ieee754_sqrt+0x28>
 801b966:	152a      	asrs	r2, r5, #20
 801b968:	d115      	bne.n	801b996 <__ieee754_sqrt+0x86>
 801b96a:	2000      	movs	r0, #0
 801b96c:	e009      	b.n	801b982 <__ieee754_sqrt+0x72>
 801b96e:	0acb      	lsrs	r3, r1, #11
 801b970:	3a15      	subs	r2, #21
 801b972:	0549      	lsls	r1, r1, #21
 801b974:	2b00      	cmp	r3, #0
 801b976:	d0fa      	beq.n	801b96e <__ieee754_sqrt+0x5e>
 801b978:	e7f7      	b.n	801b96a <__ieee754_sqrt+0x5a>
 801b97a:	462a      	mov	r2, r5
 801b97c:	e7fa      	b.n	801b974 <__ieee754_sqrt+0x64>
 801b97e:	005b      	lsls	r3, r3, #1
 801b980:	3001      	adds	r0, #1
 801b982:	02dc      	lsls	r4, r3, #11
 801b984:	d5fb      	bpl.n	801b97e <__ieee754_sqrt+0x6e>
 801b986:	1e44      	subs	r4, r0, #1
 801b988:	1b12      	subs	r2, r2, r4
 801b98a:	f1c0 0420 	rsb	r4, r0, #32
 801b98e:	fa21 f404 	lsr.w	r4, r1, r4
 801b992:	4323      	orrs	r3, r4
 801b994:	4081      	lsls	r1, r0
 801b996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b99a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801b99e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b9a2:	07d2      	lsls	r2, r2, #31
 801b9a4:	bf5c      	itt	pl
 801b9a6:	005b      	lslpl	r3, r3, #1
 801b9a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801b9ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b9b0:	bf58      	it	pl
 801b9b2:	0049      	lslpl	r1, r1, #1
 801b9b4:	2600      	movs	r6, #0
 801b9b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801b9ba:	106d      	asrs	r5, r5, #1
 801b9bc:	0049      	lsls	r1, r1, #1
 801b9be:	2016      	movs	r0, #22
 801b9c0:	4632      	mov	r2, r6
 801b9c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801b9c6:	1917      	adds	r7, r2, r4
 801b9c8:	429f      	cmp	r7, r3
 801b9ca:	bfde      	ittt	le
 801b9cc:	193a      	addle	r2, r7, r4
 801b9ce:	1bdb      	suble	r3, r3, r7
 801b9d0:	1936      	addle	r6, r6, r4
 801b9d2:	0fcf      	lsrs	r7, r1, #31
 801b9d4:	3801      	subs	r0, #1
 801b9d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801b9da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b9de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b9e2:	d1f0      	bne.n	801b9c6 <__ieee754_sqrt+0xb6>
 801b9e4:	4604      	mov	r4, r0
 801b9e6:	2720      	movs	r7, #32
 801b9e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801b9ec:	429a      	cmp	r2, r3
 801b9ee:	eb00 0e0c 	add.w	lr, r0, ip
 801b9f2:	db02      	blt.n	801b9fa <__ieee754_sqrt+0xea>
 801b9f4:	d113      	bne.n	801ba1e <__ieee754_sqrt+0x10e>
 801b9f6:	458e      	cmp	lr, r1
 801b9f8:	d811      	bhi.n	801ba1e <__ieee754_sqrt+0x10e>
 801b9fa:	f1be 0f00 	cmp.w	lr, #0
 801b9fe:	eb0e 000c 	add.w	r0, lr, ip
 801ba02:	da42      	bge.n	801ba8a <__ieee754_sqrt+0x17a>
 801ba04:	2800      	cmp	r0, #0
 801ba06:	db40      	blt.n	801ba8a <__ieee754_sqrt+0x17a>
 801ba08:	f102 0801 	add.w	r8, r2, #1
 801ba0c:	1a9b      	subs	r3, r3, r2
 801ba0e:	458e      	cmp	lr, r1
 801ba10:	bf88      	it	hi
 801ba12:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 801ba16:	eba1 010e 	sub.w	r1, r1, lr
 801ba1a:	4464      	add	r4, ip
 801ba1c:	4642      	mov	r2, r8
 801ba1e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801ba22:	3f01      	subs	r7, #1
 801ba24:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801ba28:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ba2c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801ba30:	d1dc      	bne.n	801b9ec <__ieee754_sqrt+0xdc>
 801ba32:	4319      	orrs	r1, r3
 801ba34:	d01b      	beq.n	801ba6e <__ieee754_sqrt+0x15e>
 801ba36:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801babc <__ieee754_sqrt+0x1ac>
 801ba3a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801bac0 <__ieee754_sqrt+0x1b0>
 801ba3e:	e9da 0100 	ldrd	r0, r1, [sl]
 801ba42:	e9db 2300 	ldrd	r2, r3, [fp]
 801ba46:	f7e4 fc57 	bl	80002f8 <__aeabi_dsub>
 801ba4a:	e9da 8900 	ldrd	r8, r9, [sl]
 801ba4e:	4602      	mov	r2, r0
 801ba50:	460b      	mov	r3, r1
 801ba52:	4640      	mov	r0, r8
 801ba54:	4649      	mov	r1, r9
 801ba56:	f7e5 f883 	bl	8000b60 <__aeabi_dcmple>
 801ba5a:	b140      	cbz	r0, 801ba6e <__ieee754_sqrt+0x15e>
 801ba5c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 801ba60:	e9da 0100 	ldrd	r0, r1, [sl]
 801ba64:	e9db 2300 	ldrd	r2, r3, [fp]
 801ba68:	d111      	bne.n	801ba8e <__ieee754_sqrt+0x17e>
 801ba6a:	3601      	adds	r6, #1
 801ba6c:	463c      	mov	r4, r7
 801ba6e:	1072      	asrs	r2, r6, #1
 801ba70:	0863      	lsrs	r3, r4, #1
 801ba72:	07f1      	lsls	r1, r6, #31
 801ba74:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801ba78:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801ba7c:	bf48      	it	mi
 801ba7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801ba82:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801ba86:	4618      	mov	r0, r3
 801ba88:	e756      	b.n	801b938 <__ieee754_sqrt+0x28>
 801ba8a:	4690      	mov	r8, r2
 801ba8c:	e7be      	b.n	801ba0c <__ieee754_sqrt+0xfc>
 801ba8e:	f7e4 fc35 	bl	80002fc <__adddf3>
 801ba92:	e9da 8900 	ldrd	r8, r9, [sl]
 801ba96:	4602      	mov	r2, r0
 801ba98:	460b      	mov	r3, r1
 801ba9a:	4640      	mov	r0, r8
 801ba9c:	4649      	mov	r1, r9
 801ba9e:	f7e5 f855 	bl	8000b4c <__aeabi_dcmplt>
 801baa2:	b120      	cbz	r0, 801baae <__ieee754_sqrt+0x19e>
 801baa4:	1ca0      	adds	r0, r4, #2
 801baa6:	bf08      	it	eq
 801baa8:	3601      	addeq	r6, #1
 801baaa:	3402      	adds	r4, #2
 801baac:	e7df      	b.n	801ba6e <__ieee754_sqrt+0x15e>
 801baae:	1c63      	adds	r3, r4, #1
 801bab0:	f023 0401 	bic.w	r4, r3, #1
 801bab4:	e7db      	b.n	801ba6e <__ieee754_sqrt+0x15e>
 801bab6:	bf00      	nop
 801bab8:	7ff00000 	.word	0x7ff00000
 801babc:	20000cb0 	.word	0x20000cb0
 801bac0:	20000ca8 	.word	0x20000ca8
 801bac4:	00000000 	.word	0x00000000

0801bac8 <__ieee754_atan2>:
 801bac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bacc:	ec57 6b11 	vmov	r6, r7, d1
 801bad0:	4273      	negs	r3, r6
 801bad2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801bc50 <__ieee754_atan2+0x188>
 801bad6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801bada:	4333      	orrs	r3, r6
 801badc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801bae0:	4543      	cmp	r3, r8
 801bae2:	ec51 0b10 	vmov	r0, r1, d0
 801bae6:	4635      	mov	r5, r6
 801bae8:	d809      	bhi.n	801bafe <__ieee754_atan2+0x36>
 801baea:	4244      	negs	r4, r0
 801baec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801baf0:	4304      	orrs	r4, r0
 801baf2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801baf6:	4544      	cmp	r4, r8
 801baf8:	468e      	mov	lr, r1
 801bafa:	4681      	mov	r9, r0
 801bafc:	d907      	bls.n	801bb0e <__ieee754_atan2+0x46>
 801bafe:	4632      	mov	r2, r6
 801bb00:	463b      	mov	r3, r7
 801bb02:	f7e4 fbfb 	bl	80002fc <__adddf3>
 801bb06:	ec41 0b10 	vmov	d0, r0, r1
 801bb0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb0e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801bb12:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801bb16:	4334      	orrs	r4, r6
 801bb18:	d103      	bne.n	801bb22 <__ieee754_atan2+0x5a>
 801bb1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb1e:	f7ff bd4b 	b.w	801b5b8 <atan>
 801bb22:	17bc      	asrs	r4, r7, #30
 801bb24:	f004 0402 	and.w	r4, r4, #2
 801bb28:	ea53 0909 	orrs.w	r9, r3, r9
 801bb2c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801bb30:	d107      	bne.n	801bb42 <__ieee754_atan2+0x7a>
 801bb32:	2c02      	cmp	r4, #2
 801bb34:	d05f      	beq.n	801bbf6 <__ieee754_atan2+0x12e>
 801bb36:	2c03      	cmp	r4, #3
 801bb38:	d1e5      	bne.n	801bb06 <__ieee754_atan2+0x3e>
 801bb3a:	a141      	add	r1, pc, #260	@ (adr r1, 801bc40 <__ieee754_atan2+0x178>)
 801bb3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb40:	e7e1      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bb42:	4315      	orrs	r5, r2
 801bb44:	d106      	bne.n	801bb54 <__ieee754_atan2+0x8c>
 801bb46:	f1be 0f00 	cmp.w	lr, #0
 801bb4a:	da5f      	bge.n	801bc0c <__ieee754_atan2+0x144>
 801bb4c:	a13e      	add	r1, pc, #248	@ (adr r1, 801bc48 <__ieee754_atan2+0x180>)
 801bb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb52:	e7d8      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bb54:	4542      	cmp	r2, r8
 801bb56:	d10f      	bne.n	801bb78 <__ieee754_atan2+0xb0>
 801bb58:	4293      	cmp	r3, r2
 801bb5a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801bb5e:	d107      	bne.n	801bb70 <__ieee754_atan2+0xa8>
 801bb60:	2c02      	cmp	r4, #2
 801bb62:	d84c      	bhi.n	801bbfe <__ieee754_atan2+0x136>
 801bb64:	4b34      	ldr	r3, [pc, #208]	@ (801bc38 <__ieee754_atan2+0x170>)
 801bb66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bb6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bb6e:	e7ca      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bb70:	2c02      	cmp	r4, #2
 801bb72:	d848      	bhi.n	801bc06 <__ieee754_atan2+0x13e>
 801bb74:	4b31      	ldr	r3, [pc, #196]	@ (801bc3c <__ieee754_atan2+0x174>)
 801bb76:	e7f6      	b.n	801bb66 <__ieee754_atan2+0x9e>
 801bb78:	4543      	cmp	r3, r8
 801bb7a:	d0e4      	beq.n	801bb46 <__ieee754_atan2+0x7e>
 801bb7c:	1a9b      	subs	r3, r3, r2
 801bb7e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801bb82:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bb86:	da1e      	bge.n	801bbc6 <__ieee754_atan2+0xfe>
 801bb88:	2f00      	cmp	r7, #0
 801bb8a:	da01      	bge.n	801bb90 <__ieee754_atan2+0xc8>
 801bb8c:	323c      	adds	r2, #60	@ 0x3c
 801bb8e:	db1e      	blt.n	801bbce <__ieee754_atan2+0x106>
 801bb90:	4632      	mov	r2, r6
 801bb92:	463b      	mov	r3, r7
 801bb94:	f7e4 fe92 	bl	80008bc <__aeabi_ddiv>
 801bb98:	ec41 0b10 	vmov	d0, r0, r1
 801bb9c:	f7ff fea4 	bl	801b8e8 <fabs>
 801bba0:	f7ff fd0a 	bl	801b5b8 <atan>
 801bba4:	ec51 0b10 	vmov	r0, r1, d0
 801bba8:	2c01      	cmp	r4, #1
 801bbaa:	d013      	beq.n	801bbd4 <__ieee754_atan2+0x10c>
 801bbac:	2c02      	cmp	r4, #2
 801bbae:	d015      	beq.n	801bbdc <__ieee754_atan2+0x114>
 801bbb0:	2c00      	cmp	r4, #0
 801bbb2:	d0a8      	beq.n	801bb06 <__ieee754_atan2+0x3e>
 801bbb4:	a318      	add	r3, pc, #96	@ (adr r3, 801bc18 <__ieee754_atan2+0x150>)
 801bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbba:	f7e4 fb9d 	bl	80002f8 <__aeabi_dsub>
 801bbbe:	a318      	add	r3, pc, #96	@ (adr r3, 801bc20 <__ieee754_atan2+0x158>)
 801bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbc4:	e014      	b.n	801bbf0 <__ieee754_atan2+0x128>
 801bbc6:	a118      	add	r1, pc, #96	@ (adr r1, 801bc28 <__ieee754_atan2+0x160>)
 801bbc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbcc:	e7ec      	b.n	801bba8 <__ieee754_atan2+0xe0>
 801bbce:	2000      	movs	r0, #0
 801bbd0:	2100      	movs	r1, #0
 801bbd2:	e7e9      	b.n	801bba8 <__ieee754_atan2+0xe0>
 801bbd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801bbd8:	4619      	mov	r1, r3
 801bbda:	e794      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bbdc:	a30e      	add	r3, pc, #56	@ (adr r3, 801bc18 <__ieee754_atan2+0x150>)
 801bbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbe2:	f7e4 fb89 	bl	80002f8 <__aeabi_dsub>
 801bbe6:	4602      	mov	r2, r0
 801bbe8:	460b      	mov	r3, r1
 801bbea:	a10d      	add	r1, pc, #52	@ (adr r1, 801bc20 <__ieee754_atan2+0x158>)
 801bbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbf0:	f7e4 fb82 	bl	80002f8 <__aeabi_dsub>
 801bbf4:	e787      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bbf6:	a10a      	add	r1, pc, #40	@ (adr r1, 801bc20 <__ieee754_atan2+0x158>)
 801bbf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbfc:	e783      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bbfe:	a10c      	add	r1, pc, #48	@ (adr r1, 801bc30 <__ieee754_atan2+0x168>)
 801bc00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc04:	e77f      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bc06:	2000      	movs	r0, #0
 801bc08:	2100      	movs	r1, #0
 801bc0a:	e77c      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bc0c:	a106      	add	r1, pc, #24	@ (adr r1, 801bc28 <__ieee754_atan2+0x160>)
 801bc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc12:	e778      	b.n	801bb06 <__ieee754_atan2+0x3e>
 801bc14:	f3af 8000 	nop.w
 801bc18:	33145c07 	.word	0x33145c07
 801bc1c:	3ca1a626 	.word	0x3ca1a626
 801bc20:	54442d18 	.word	0x54442d18
 801bc24:	400921fb 	.word	0x400921fb
 801bc28:	54442d18 	.word	0x54442d18
 801bc2c:	3ff921fb 	.word	0x3ff921fb
 801bc30:	54442d18 	.word	0x54442d18
 801bc34:	3fe921fb 	.word	0x3fe921fb
 801bc38:	0801e5b8 	.word	0x0801e5b8
 801bc3c:	0801e5a0 	.word	0x0801e5a0
 801bc40:	54442d18 	.word	0x54442d18
 801bc44:	c00921fb 	.word	0xc00921fb
 801bc48:	54442d18 	.word	0x54442d18
 801bc4c:	bff921fb 	.word	0xbff921fb
 801bc50:	7ff00000 	.word	0x7ff00000

0801bc54 <__ieee754_hypot>:
 801bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc58:	ec51 0b10 	vmov	r0, r1, d0
 801bc5c:	ec53 2b11 	vmov	r2, r3, d1
 801bc60:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 801bc64:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 801bc68:	42a5      	cmp	r5, r4
 801bc6a:	b087      	sub	sp, #28
 801bc6c:	da05      	bge.n	801bc7a <__ieee754_hypot+0x26>
 801bc6e:	462e      	mov	r6, r5
 801bc70:	4625      	mov	r5, r4
 801bc72:	4634      	mov	r4, r6
 801bc74:	4606      	mov	r6, r0
 801bc76:	4610      	mov	r0, r2
 801bc78:	4632      	mov	r2, r6
 801bc7a:	1b2b      	subs	r3, r5, r4
 801bc7c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 801bc80:	4629      	mov	r1, r5
 801bc82:	4682      	mov	sl, r0
 801bc84:	46ab      	mov	fp, r5
 801bc86:	4616      	mov	r6, r2
 801bc88:	4627      	mov	r7, r4
 801bc8a:	dd05      	ble.n	801bc98 <__ieee754_hypot+0x44>
 801bc8c:	4623      	mov	r3, r4
 801bc8e:	f7e4 fb35 	bl	80002fc <__adddf3>
 801bc92:	4682      	mov	sl, r0
 801bc94:	468b      	mov	fp, r1
 801bc96:	e016      	b.n	801bcc6 <__ieee754_hypot+0x72>
 801bc98:	4b75      	ldr	r3, [pc, #468]	@ (801be70 <__ieee754_hypot+0x21c>)
 801bc9a:	429d      	cmp	r5, r3
 801bc9c:	f340 8096 	ble.w	801bdcc <__ieee754_hypot+0x178>
 801bca0:	4b74      	ldr	r3, [pc, #464]	@ (801be74 <__ieee754_hypot+0x220>)
 801bca2:	429d      	cmp	r5, r3
 801bca4:	dd14      	ble.n	801bcd0 <__ieee754_hypot+0x7c>
 801bca6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801bcaa:	4305      	orrs	r5, r0
 801bcac:	d004      	beq.n	801bcb8 <__ieee754_hypot+0x64>
 801bcae:	4623      	mov	r3, r4
 801bcb0:	f7e4 fb24 	bl	80002fc <__adddf3>
 801bcb4:	4682      	mov	sl, r0
 801bcb6:	468b      	mov	fp, r1
 801bcb8:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 801bcbc:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 801bcc0:	4334      	orrs	r4, r6
 801bcc2:	f000 80d2 	beq.w	801be6a <__ieee754_hypot+0x216>
 801bcc6:	ec4b ab10 	vmov	d0, sl, fp
 801bcca:	b007      	add	sp, #28
 801bccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcd0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 801bcd4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 801bcd8:	46ab      	mov	fp, r5
 801bcda:	4627      	mov	r7, r4
 801bcdc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 801bce0:	9301      	str	r3, [sp, #4]
 801bce2:	4b65      	ldr	r3, [pc, #404]	@ (801be78 <__ieee754_hypot+0x224>)
 801bce4:	429c      	cmp	r4, r3
 801bce6:	dc19      	bgt.n	801bd1c <__ieee754_hypot+0xc8>
 801bce8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 801bcec:	da70      	bge.n	801bdd0 <__ieee754_hypot+0x17c>
 801bcee:	4633      	mov	r3, r6
 801bcf0:	4323      	orrs	r3, r4
 801bcf2:	d0e8      	beq.n	801bcc6 <__ieee754_hypot+0x72>
 801bcf4:	4b61      	ldr	r3, [pc, #388]	@ (801be7c <__ieee754_hypot+0x228>)
 801bcf6:	2200      	movs	r2, #0
 801bcf8:	4630      	mov	r0, r6
 801bcfa:	4639      	mov	r1, r7
 801bcfc:	f7e4 fcb4 	bl	8000668 <__aeabi_dmul>
 801bd00:	4b5e      	ldr	r3, [pc, #376]	@ (801be7c <__ieee754_hypot+0x228>)
 801bd02:	4606      	mov	r6, r0
 801bd04:	460f      	mov	r7, r1
 801bd06:	4650      	mov	r0, sl
 801bd08:	4659      	mov	r1, fp
 801bd0a:	2200      	movs	r2, #0
 801bd0c:	f7e4 fcac 	bl	8000668 <__aeabi_dmul>
 801bd10:	9b01      	ldr	r3, [sp, #4]
 801bd12:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801bd16:	4682      	mov	sl, r0
 801bd18:	468b      	mov	fp, r1
 801bd1a:	9301      	str	r3, [sp, #4]
 801bd1c:	4632      	mov	r2, r6
 801bd1e:	463b      	mov	r3, r7
 801bd20:	4650      	mov	r0, sl
 801bd22:	4659      	mov	r1, fp
 801bd24:	f7e4 fae8 	bl	80002f8 <__aeabi_dsub>
 801bd28:	4602      	mov	r2, r0
 801bd2a:	460b      	mov	r3, r1
 801bd2c:	4680      	mov	r8, r0
 801bd2e:	4689      	mov	r9, r1
 801bd30:	4630      	mov	r0, r6
 801bd32:	4639      	mov	r1, r7
 801bd34:	f7e4 ff0a 	bl	8000b4c <__aeabi_dcmplt>
 801bd38:	2200      	movs	r2, #0
 801bd3a:	2800      	cmp	r0, #0
 801bd3c:	d053      	beq.n	801bde6 <__ieee754_hypot+0x192>
 801bd3e:	462b      	mov	r3, r5
 801bd40:	4610      	mov	r0, r2
 801bd42:	4629      	mov	r1, r5
 801bd44:	4614      	mov	r4, r2
 801bd46:	f7e4 fc8f 	bl	8000668 <__aeabi_dmul>
 801bd4a:	4632      	mov	r2, r6
 801bd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd50:	463b      	mov	r3, r7
 801bd52:	4630      	mov	r0, r6
 801bd54:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 801bd58:	f7e4 fc86 	bl	8000668 <__aeabi_dmul>
 801bd5c:	4622      	mov	r2, r4
 801bd5e:	4606      	mov	r6, r0
 801bd60:	460f      	mov	r7, r1
 801bd62:	462b      	mov	r3, r5
 801bd64:	4650      	mov	r0, sl
 801bd66:	4659      	mov	r1, fp
 801bd68:	f7e4 fac8 	bl	80002fc <__adddf3>
 801bd6c:	4622      	mov	r2, r4
 801bd6e:	4680      	mov	r8, r0
 801bd70:	4689      	mov	r9, r1
 801bd72:	462b      	mov	r3, r5
 801bd74:	4650      	mov	r0, sl
 801bd76:	4659      	mov	r1, fp
 801bd78:	f7e4 fabe 	bl	80002f8 <__aeabi_dsub>
 801bd7c:	4602      	mov	r2, r0
 801bd7e:	460b      	mov	r3, r1
 801bd80:	4640      	mov	r0, r8
 801bd82:	4649      	mov	r1, r9
 801bd84:	f7e4 fc70 	bl	8000668 <__aeabi_dmul>
 801bd88:	4602      	mov	r2, r0
 801bd8a:	460b      	mov	r3, r1
 801bd8c:	4630      	mov	r0, r6
 801bd8e:	4639      	mov	r1, r7
 801bd90:	f7e4 fab2 	bl	80002f8 <__aeabi_dsub>
 801bd94:	4602      	mov	r2, r0
 801bd96:	460b      	mov	r3, r1
 801bd98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd9c:	f7e4 faac 	bl	80002f8 <__aeabi_dsub>
 801bda0:	ec41 0b10 	vmov	d0, r0, r1
 801bda4:	f7ff fdb4 	bl	801b910 <__ieee754_sqrt>
 801bda8:	9b01      	ldr	r3, [sp, #4]
 801bdaa:	ec5b ab10 	vmov	sl, fp, d0
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d089      	beq.n	801bcc6 <__ieee754_hypot+0x72>
 801bdb2:	051b      	lsls	r3, r3, #20
 801bdb4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801bdb8:	2000      	movs	r0, #0
 801bdba:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801bdbe:	4602      	mov	r2, r0
 801bdc0:	460b      	mov	r3, r1
 801bdc2:	4650      	mov	r0, sl
 801bdc4:	4659      	mov	r1, fp
 801bdc6:	f7e4 fc4f 	bl	8000668 <__aeabi_dmul>
 801bdca:	e762      	b.n	801bc92 <__ieee754_hypot+0x3e>
 801bdcc:	2300      	movs	r3, #0
 801bdce:	e787      	b.n	801bce0 <__ieee754_hypot+0x8c>
 801bdd0:	9b01      	ldr	r3, [sp, #4]
 801bdd2:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 801bdd6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 801bdda:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 801bdde:	9301      	str	r3, [sp, #4]
 801bde0:	46ab      	mov	fp, r5
 801bde2:	4627      	mov	r7, r4
 801bde4:	e79a      	b.n	801bd1c <__ieee754_hypot+0xc8>
 801bde6:	4623      	mov	r3, r4
 801bde8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bdec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdf0:	2200      	movs	r2, #0
 801bdf2:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 801bdf6:	4614      	mov	r4, r2
 801bdf8:	461d      	mov	r5, r3
 801bdfa:	f7e4 fc35 	bl	8000668 <__aeabi_dmul>
 801bdfe:	4642      	mov	r2, r8
 801be00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801be04:	464b      	mov	r3, r9
 801be06:	4640      	mov	r0, r8
 801be08:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 801be0c:	f7e4 fc2c 	bl	8000668 <__aeabi_dmul>
 801be10:	4652      	mov	r2, sl
 801be12:	465b      	mov	r3, fp
 801be14:	4680      	mov	r8, r0
 801be16:	4689      	mov	r9, r1
 801be18:	4650      	mov	r0, sl
 801be1a:	4659      	mov	r1, fp
 801be1c:	f7e4 fa6e 	bl	80002fc <__adddf3>
 801be20:	4622      	mov	r2, r4
 801be22:	462b      	mov	r3, r5
 801be24:	f7e4 fa68 	bl	80002f8 <__aeabi_dsub>
 801be28:	4632      	mov	r2, r6
 801be2a:	463b      	mov	r3, r7
 801be2c:	f7e4 fc1c 	bl	8000668 <__aeabi_dmul>
 801be30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be34:	4682      	mov	sl, r0
 801be36:	468b      	mov	fp, r1
 801be38:	4630      	mov	r0, r6
 801be3a:	4639      	mov	r1, r7
 801be3c:	f7e4 fa5c 	bl	80002f8 <__aeabi_dsub>
 801be40:	4622      	mov	r2, r4
 801be42:	462b      	mov	r3, r5
 801be44:	f7e4 fc10 	bl	8000668 <__aeabi_dmul>
 801be48:	4602      	mov	r2, r0
 801be4a:	460b      	mov	r3, r1
 801be4c:	4650      	mov	r0, sl
 801be4e:	4659      	mov	r1, fp
 801be50:	f7e4 fa54 	bl	80002fc <__adddf3>
 801be54:	4602      	mov	r2, r0
 801be56:	460b      	mov	r3, r1
 801be58:	4640      	mov	r0, r8
 801be5a:	4649      	mov	r1, r9
 801be5c:	f7e4 fa4c 	bl	80002f8 <__aeabi_dsub>
 801be60:	4602      	mov	r2, r0
 801be62:	460b      	mov	r3, r1
 801be64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be68:	e798      	b.n	801bd9c <__ieee754_hypot+0x148>
 801be6a:	46b2      	mov	sl, r6
 801be6c:	46bb      	mov	fp, r7
 801be6e:	e72a      	b.n	801bcc6 <__ieee754_hypot+0x72>
 801be70:	5f300000 	.word	0x5f300000
 801be74:	7fefffff 	.word	0x7fefffff
 801be78:	20afffff 	.word	0x20afffff
 801be7c:	7fd00000 	.word	0x7fd00000

0801be80 <__ieee754_pow>:
 801be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be84:	b091      	sub	sp, #68	@ 0x44
 801be86:	ed8d 1b00 	vstr	d1, [sp]
 801be8a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801be8e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801be92:	ea5a 0001 	orrs.w	r0, sl, r1
 801be96:	ec57 6b10 	vmov	r6, r7, d0
 801be9a:	d113      	bne.n	801bec4 <__ieee754_pow+0x44>
 801be9c:	19b3      	adds	r3, r6, r6
 801be9e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801bea2:	4152      	adcs	r2, r2
 801bea4:	4298      	cmp	r0, r3
 801bea6:	4b98      	ldr	r3, [pc, #608]	@ (801c108 <__ieee754_pow+0x288>)
 801bea8:	4193      	sbcs	r3, r2
 801beaa:	f080 84ea 	bcs.w	801c882 <__ieee754_pow+0xa02>
 801beae:	e9dd 2300 	ldrd	r2, r3, [sp]
 801beb2:	4630      	mov	r0, r6
 801beb4:	4639      	mov	r1, r7
 801beb6:	f7e4 fa21 	bl	80002fc <__adddf3>
 801beba:	ec41 0b10 	vmov	d0, r0, r1
 801bebe:	b011      	add	sp, #68	@ 0x44
 801bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bec4:	4a91      	ldr	r2, [pc, #580]	@ (801c10c <__ieee754_pow+0x28c>)
 801bec6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801beca:	4590      	cmp	r8, r2
 801becc:	463d      	mov	r5, r7
 801bece:	4633      	mov	r3, r6
 801bed0:	d806      	bhi.n	801bee0 <__ieee754_pow+0x60>
 801bed2:	d101      	bne.n	801bed8 <__ieee754_pow+0x58>
 801bed4:	2e00      	cmp	r6, #0
 801bed6:	d1ea      	bne.n	801beae <__ieee754_pow+0x2e>
 801bed8:	4592      	cmp	sl, r2
 801beda:	d801      	bhi.n	801bee0 <__ieee754_pow+0x60>
 801bedc:	d10e      	bne.n	801befc <__ieee754_pow+0x7c>
 801bede:	b169      	cbz	r1, 801befc <__ieee754_pow+0x7c>
 801bee0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801bee4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801bee8:	431d      	orrs	r5, r3
 801beea:	d1e0      	bne.n	801beae <__ieee754_pow+0x2e>
 801beec:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bef0:	18db      	adds	r3, r3, r3
 801bef2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801bef6:	4152      	adcs	r2, r2
 801bef8:	429d      	cmp	r5, r3
 801befa:	e7d4      	b.n	801bea6 <__ieee754_pow+0x26>
 801befc:	2d00      	cmp	r5, #0
 801befe:	46c3      	mov	fp, r8
 801bf00:	da3a      	bge.n	801bf78 <__ieee754_pow+0xf8>
 801bf02:	4a83      	ldr	r2, [pc, #524]	@ (801c110 <__ieee754_pow+0x290>)
 801bf04:	4592      	cmp	sl, r2
 801bf06:	d84d      	bhi.n	801bfa4 <__ieee754_pow+0x124>
 801bf08:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801bf0c:	4592      	cmp	sl, r2
 801bf0e:	f240 84c7 	bls.w	801c8a0 <__ieee754_pow+0xa20>
 801bf12:	ea4f 522a 	mov.w	r2, sl, asr #20
 801bf16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801bf1a:	2a14      	cmp	r2, #20
 801bf1c:	dd0f      	ble.n	801bf3e <__ieee754_pow+0xbe>
 801bf1e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801bf22:	fa21 f402 	lsr.w	r4, r1, r2
 801bf26:	fa04 f202 	lsl.w	r2, r4, r2
 801bf2a:	428a      	cmp	r2, r1
 801bf2c:	f040 84b8 	bne.w	801c8a0 <__ieee754_pow+0xa20>
 801bf30:	f004 0401 	and.w	r4, r4, #1
 801bf34:	f1c4 0402 	rsb	r4, r4, #2
 801bf38:	2900      	cmp	r1, #0
 801bf3a:	d158      	bne.n	801bfee <__ieee754_pow+0x16e>
 801bf3c:	e00e      	b.n	801bf5c <__ieee754_pow+0xdc>
 801bf3e:	2900      	cmp	r1, #0
 801bf40:	d154      	bne.n	801bfec <__ieee754_pow+0x16c>
 801bf42:	f1c2 0214 	rsb	r2, r2, #20
 801bf46:	fa4a f402 	asr.w	r4, sl, r2
 801bf4a:	fa04 f202 	lsl.w	r2, r4, r2
 801bf4e:	4552      	cmp	r2, sl
 801bf50:	f040 84a3 	bne.w	801c89a <__ieee754_pow+0xa1a>
 801bf54:	f004 0401 	and.w	r4, r4, #1
 801bf58:	f1c4 0402 	rsb	r4, r4, #2
 801bf5c:	4a6d      	ldr	r2, [pc, #436]	@ (801c114 <__ieee754_pow+0x294>)
 801bf5e:	4592      	cmp	sl, r2
 801bf60:	d12e      	bne.n	801bfc0 <__ieee754_pow+0x140>
 801bf62:	f1b9 0f00 	cmp.w	r9, #0
 801bf66:	f280 8494 	bge.w	801c892 <__ieee754_pow+0xa12>
 801bf6a:	496a      	ldr	r1, [pc, #424]	@ (801c114 <__ieee754_pow+0x294>)
 801bf6c:	4632      	mov	r2, r6
 801bf6e:	463b      	mov	r3, r7
 801bf70:	2000      	movs	r0, #0
 801bf72:	f7e4 fca3 	bl	80008bc <__aeabi_ddiv>
 801bf76:	e7a0      	b.n	801beba <__ieee754_pow+0x3a>
 801bf78:	2400      	movs	r4, #0
 801bf7a:	bbc1      	cbnz	r1, 801bfee <__ieee754_pow+0x16e>
 801bf7c:	4a63      	ldr	r2, [pc, #396]	@ (801c10c <__ieee754_pow+0x28c>)
 801bf7e:	4592      	cmp	sl, r2
 801bf80:	d1ec      	bne.n	801bf5c <__ieee754_pow+0xdc>
 801bf82:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801bf86:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801bf8a:	431a      	orrs	r2, r3
 801bf8c:	f000 8479 	beq.w	801c882 <__ieee754_pow+0xa02>
 801bf90:	4b61      	ldr	r3, [pc, #388]	@ (801c118 <__ieee754_pow+0x298>)
 801bf92:	4598      	cmp	r8, r3
 801bf94:	d908      	bls.n	801bfa8 <__ieee754_pow+0x128>
 801bf96:	f1b9 0f00 	cmp.w	r9, #0
 801bf9a:	f2c0 8476 	blt.w	801c88a <__ieee754_pow+0xa0a>
 801bf9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bfa2:	e78a      	b.n	801beba <__ieee754_pow+0x3a>
 801bfa4:	2402      	movs	r4, #2
 801bfa6:	e7e8      	b.n	801bf7a <__ieee754_pow+0xfa>
 801bfa8:	f1b9 0f00 	cmp.w	r9, #0
 801bfac:	f04f 0000 	mov.w	r0, #0
 801bfb0:	f04f 0100 	mov.w	r1, #0
 801bfb4:	da81      	bge.n	801beba <__ieee754_pow+0x3a>
 801bfb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801bfba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801bfbe:	e77c      	b.n	801beba <__ieee754_pow+0x3a>
 801bfc0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801bfc4:	d106      	bne.n	801bfd4 <__ieee754_pow+0x154>
 801bfc6:	4632      	mov	r2, r6
 801bfc8:	463b      	mov	r3, r7
 801bfca:	4630      	mov	r0, r6
 801bfcc:	4639      	mov	r1, r7
 801bfce:	f7e4 fb4b 	bl	8000668 <__aeabi_dmul>
 801bfd2:	e772      	b.n	801beba <__ieee754_pow+0x3a>
 801bfd4:	4a51      	ldr	r2, [pc, #324]	@ (801c11c <__ieee754_pow+0x29c>)
 801bfd6:	4591      	cmp	r9, r2
 801bfd8:	d109      	bne.n	801bfee <__ieee754_pow+0x16e>
 801bfda:	2d00      	cmp	r5, #0
 801bfdc:	db07      	blt.n	801bfee <__ieee754_pow+0x16e>
 801bfde:	ec47 6b10 	vmov	d0, r6, r7
 801bfe2:	b011      	add	sp, #68	@ 0x44
 801bfe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe8:	f7ff bc92 	b.w	801b910 <__ieee754_sqrt>
 801bfec:	2400      	movs	r4, #0
 801bfee:	ec47 6b10 	vmov	d0, r6, r7
 801bff2:	9302      	str	r3, [sp, #8]
 801bff4:	f7ff fc78 	bl	801b8e8 <fabs>
 801bff8:	9b02      	ldr	r3, [sp, #8]
 801bffa:	ec51 0b10 	vmov	r0, r1, d0
 801bffe:	bb53      	cbnz	r3, 801c056 <__ieee754_pow+0x1d6>
 801c000:	4b44      	ldr	r3, [pc, #272]	@ (801c114 <__ieee754_pow+0x294>)
 801c002:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801c006:	429a      	cmp	r2, r3
 801c008:	d002      	beq.n	801c010 <__ieee754_pow+0x190>
 801c00a:	f1b8 0f00 	cmp.w	r8, #0
 801c00e:	d122      	bne.n	801c056 <__ieee754_pow+0x1d6>
 801c010:	f1b9 0f00 	cmp.w	r9, #0
 801c014:	da05      	bge.n	801c022 <__ieee754_pow+0x1a2>
 801c016:	4602      	mov	r2, r0
 801c018:	460b      	mov	r3, r1
 801c01a:	2000      	movs	r0, #0
 801c01c:	493d      	ldr	r1, [pc, #244]	@ (801c114 <__ieee754_pow+0x294>)
 801c01e:	f7e4 fc4d 	bl	80008bc <__aeabi_ddiv>
 801c022:	2d00      	cmp	r5, #0
 801c024:	f6bf af49 	bge.w	801beba <__ieee754_pow+0x3a>
 801c028:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801c02c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 801c030:	ea58 0804 	orrs.w	r8, r8, r4
 801c034:	d108      	bne.n	801c048 <__ieee754_pow+0x1c8>
 801c036:	4602      	mov	r2, r0
 801c038:	460b      	mov	r3, r1
 801c03a:	4610      	mov	r0, r2
 801c03c:	4619      	mov	r1, r3
 801c03e:	f7e4 f95b 	bl	80002f8 <__aeabi_dsub>
 801c042:	4602      	mov	r2, r0
 801c044:	460b      	mov	r3, r1
 801c046:	e794      	b.n	801bf72 <__ieee754_pow+0xf2>
 801c048:	2c01      	cmp	r4, #1
 801c04a:	f47f af36 	bne.w	801beba <__ieee754_pow+0x3a>
 801c04e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c052:	4619      	mov	r1, r3
 801c054:	e731      	b.n	801beba <__ieee754_pow+0x3a>
 801c056:	0feb      	lsrs	r3, r5, #31
 801c058:	3b01      	subs	r3, #1
 801c05a:	ea53 0204 	orrs.w	r2, r3, r4
 801c05e:	d102      	bne.n	801c066 <__ieee754_pow+0x1e6>
 801c060:	4632      	mov	r2, r6
 801c062:	463b      	mov	r3, r7
 801c064:	e7e9      	b.n	801c03a <__ieee754_pow+0x1ba>
 801c066:	3c01      	subs	r4, #1
 801c068:	431c      	orrs	r4, r3
 801c06a:	d016      	beq.n	801c09a <__ieee754_pow+0x21a>
 801c06c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 801c0f8 <__ieee754_pow+0x278>
 801c070:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801c074:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c078:	f240 8112 	bls.w	801c2a0 <__ieee754_pow+0x420>
 801c07c:	4b28      	ldr	r3, [pc, #160]	@ (801c120 <__ieee754_pow+0x2a0>)
 801c07e:	459a      	cmp	sl, r3
 801c080:	4b25      	ldr	r3, [pc, #148]	@ (801c118 <__ieee754_pow+0x298>)
 801c082:	d916      	bls.n	801c0b2 <__ieee754_pow+0x232>
 801c084:	4598      	cmp	r8, r3
 801c086:	d80b      	bhi.n	801c0a0 <__ieee754_pow+0x220>
 801c088:	f1b9 0f00 	cmp.w	r9, #0
 801c08c:	da0b      	bge.n	801c0a6 <__ieee754_pow+0x226>
 801c08e:	2000      	movs	r0, #0
 801c090:	b011      	add	sp, #68	@ 0x44
 801c092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c096:	f000 bceb 	b.w	801ca70 <__math_oflow>
 801c09a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 801c100 <__ieee754_pow+0x280>
 801c09e:	e7e7      	b.n	801c070 <__ieee754_pow+0x1f0>
 801c0a0:	f1b9 0f00 	cmp.w	r9, #0
 801c0a4:	dcf3      	bgt.n	801c08e <__ieee754_pow+0x20e>
 801c0a6:	2000      	movs	r0, #0
 801c0a8:	b011      	add	sp, #68	@ 0x44
 801c0aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ae:	f000 bcd7 	b.w	801ca60 <__math_uflow>
 801c0b2:	4598      	cmp	r8, r3
 801c0b4:	d20c      	bcs.n	801c0d0 <__ieee754_pow+0x250>
 801c0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	2300      	movs	r3, #0
 801c0be:	f7e4 fd45 	bl	8000b4c <__aeabi_dcmplt>
 801c0c2:	3800      	subs	r0, #0
 801c0c4:	bf18      	it	ne
 801c0c6:	2001      	movne	r0, #1
 801c0c8:	f1b9 0f00 	cmp.w	r9, #0
 801c0cc:	daec      	bge.n	801c0a8 <__ieee754_pow+0x228>
 801c0ce:	e7df      	b.n	801c090 <__ieee754_pow+0x210>
 801c0d0:	4b10      	ldr	r3, [pc, #64]	@ (801c114 <__ieee754_pow+0x294>)
 801c0d2:	4598      	cmp	r8, r3
 801c0d4:	f04f 0200 	mov.w	r2, #0
 801c0d8:	d924      	bls.n	801c124 <__ieee754_pow+0x2a4>
 801c0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0de:	2300      	movs	r3, #0
 801c0e0:	f7e4 fd34 	bl	8000b4c <__aeabi_dcmplt>
 801c0e4:	3800      	subs	r0, #0
 801c0e6:	bf18      	it	ne
 801c0e8:	2001      	movne	r0, #1
 801c0ea:	f1b9 0f00 	cmp.w	r9, #0
 801c0ee:	dccf      	bgt.n	801c090 <__ieee754_pow+0x210>
 801c0f0:	e7da      	b.n	801c0a8 <__ieee754_pow+0x228>
 801c0f2:	bf00      	nop
 801c0f4:	f3af 8000 	nop.w
 801c0f8:	00000000 	.word	0x00000000
 801c0fc:	3ff00000 	.word	0x3ff00000
 801c100:	00000000 	.word	0x00000000
 801c104:	bff00000 	.word	0xbff00000
 801c108:	fff00000 	.word	0xfff00000
 801c10c:	7ff00000 	.word	0x7ff00000
 801c110:	433fffff 	.word	0x433fffff
 801c114:	3ff00000 	.word	0x3ff00000
 801c118:	3fefffff 	.word	0x3fefffff
 801c11c:	3fe00000 	.word	0x3fe00000
 801c120:	43f00000 	.word	0x43f00000
 801c124:	4b5a      	ldr	r3, [pc, #360]	@ (801c290 <__ieee754_pow+0x410>)
 801c126:	f7e4 f8e7 	bl	80002f8 <__aeabi_dsub>
 801c12a:	a351      	add	r3, pc, #324	@ (adr r3, 801c270 <__ieee754_pow+0x3f0>)
 801c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c130:	4604      	mov	r4, r0
 801c132:	460d      	mov	r5, r1
 801c134:	f7e4 fa98 	bl	8000668 <__aeabi_dmul>
 801c138:	a34f      	add	r3, pc, #316	@ (adr r3, 801c278 <__ieee754_pow+0x3f8>)
 801c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c13e:	4606      	mov	r6, r0
 801c140:	460f      	mov	r7, r1
 801c142:	4620      	mov	r0, r4
 801c144:	4629      	mov	r1, r5
 801c146:	f7e4 fa8f 	bl	8000668 <__aeabi_dmul>
 801c14a:	4b52      	ldr	r3, [pc, #328]	@ (801c294 <__ieee754_pow+0x414>)
 801c14c:	4682      	mov	sl, r0
 801c14e:	468b      	mov	fp, r1
 801c150:	2200      	movs	r2, #0
 801c152:	4620      	mov	r0, r4
 801c154:	4629      	mov	r1, r5
 801c156:	f7e4 fa87 	bl	8000668 <__aeabi_dmul>
 801c15a:	4602      	mov	r2, r0
 801c15c:	460b      	mov	r3, r1
 801c15e:	a148      	add	r1, pc, #288	@ (adr r1, 801c280 <__ieee754_pow+0x400>)
 801c160:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c164:	f7e4 f8c8 	bl	80002f8 <__aeabi_dsub>
 801c168:	4622      	mov	r2, r4
 801c16a:	462b      	mov	r3, r5
 801c16c:	f7e4 fa7c 	bl	8000668 <__aeabi_dmul>
 801c170:	4602      	mov	r2, r0
 801c172:	460b      	mov	r3, r1
 801c174:	2000      	movs	r0, #0
 801c176:	4948      	ldr	r1, [pc, #288]	@ (801c298 <__ieee754_pow+0x418>)
 801c178:	f7e4 f8be 	bl	80002f8 <__aeabi_dsub>
 801c17c:	4622      	mov	r2, r4
 801c17e:	4680      	mov	r8, r0
 801c180:	4689      	mov	r9, r1
 801c182:	462b      	mov	r3, r5
 801c184:	4620      	mov	r0, r4
 801c186:	4629      	mov	r1, r5
 801c188:	f7e4 fa6e 	bl	8000668 <__aeabi_dmul>
 801c18c:	4602      	mov	r2, r0
 801c18e:	460b      	mov	r3, r1
 801c190:	4640      	mov	r0, r8
 801c192:	4649      	mov	r1, r9
 801c194:	f7e4 fa68 	bl	8000668 <__aeabi_dmul>
 801c198:	a33b      	add	r3, pc, #236	@ (adr r3, 801c288 <__ieee754_pow+0x408>)
 801c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c19e:	f7e4 fa63 	bl	8000668 <__aeabi_dmul>
 801c1a2:	4602      	mov	r2, r0
 801c1a4:	460b      	mov	r3, r1
 801c1a6:	4650      	mov	r0, sl
 801c1a8:	4659      	mov	r1, fp
 801c1aa:	f7e4 f8a5 	bl	80002f8 <__aeabi_dsub>
 801c1ae:	4602      	mov	r2, r0
 801c1b0:	460b      	mov	r3, r1
 801c1b2:	4680      	mov	r8, r0
 801c1b4:	4689      	mov	r9, r1
 801c1b6:	4630      	mov	r0, r6
 801c1b8:	4639      	mov	r1, r7
 801c1ba:	f7e4 f89f 	bl	80002fc <__adddf3>
 801c1be:	2400      	movs	r4, #0
 801c1c0:	4632      	mov	r2, r6
 801c1c2:	463b      	mov	r3, r7
 801c1c4:	4620      	mov	r0, r4
 801c1c6:	460d      	mov	r5, r1
 801c1c8:	f7e4 f896 	bl	80002f8 <__aeabi_dsub>
 801c1cc:	4602      	mov	r2, r0
 801c1ce:	460b      	mov	r3, r1
 801c1d0:	4640      	mov	r0, r8
 801c1d2:	4649      	mov	r1, r9
 801c1d4:	f7e4 f890 	bl	80002f8 <__aeabi_dsub>
 801c1d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c1dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c1e0:	2300      	movs	r3, #0
 801c1e2:	9304      	str	r3, [sp, #16]
 801c1e4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801c1e8:	4606      	mov	r6, r0
 801c1ea:	460f      	mov	r7, r1
 801c1ec:	4652      	mov	r2, sl
 801c1ee:	465b      	mov	r3, fp
 801c1f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c1f4:	f7e4 f880 	bl	80002f8 <__aeabi_dsub>
 801c1f8:	4622      	mov	r2, r4
 801c1fa:	462b      	mov	r3, r5
 801c1fc:	f7e4 fa34 	bl	8000668 <__aeabi_dmul>
 801c200:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c204:	4680      	mov	r8, r0
 801c206:	4689      	mov	r9, r1
 801c208:	4630      	mov	r0, r6
 801c20a:	4639      	mov	r1, r7
 801c20c:	f7e4 fa2c 	bl	8000668 <__aeabi_dmul>
 801c210:	4602      	mov	r2, r0
 801c212:	460b      	mov	r3, r1
 801c214:	4640      	mov	r0, r8
 801c216:	4649      	mov	r1, r9
 801c218:	f7e4 f870 	bl	80002fc <__adddf3>
 801c21c:	4652      	mov	r2, sl
 801c21e:	465b      	mov	r3, fp
 801c220:	4606      	mov	r6, r0
 801c222:	460f      	mov	r7, r1
 801c224:	4620      	mov	r0, r4
 801c226:	4629      	mov	r1, r5
 801c228:	f7e4 fa1e 	bl	8000668 <__aeabi_dmul>
 801c22c:	460b      	mov	r3, r1
 801c22e:	4602      	mov	r2, r0
 801c230:	4680      	mov	r8, r0
 801c232:	4689      	mov	r9, r1
 801c234:	4630      	mov	r0, r6
 801c236:	4639      	mov	r1, r7
 801c238:	f7e4 f860 	bl	80002fc <__adddf3>
 801c23c:	4b17      	ldr	r3, [pc, #92]	@ (801c29c <__ieee754_pow+0x41c>)
 801c23e:	4299      	cmp	r1, r3
 801c240:	4604      	mov	r4, r0
 801c242:	460d      	mov	r5, r1
 801c244:	468a      	mov	sl, r1
 801c246:	468b      	mov	fp, r1
 801c248:	f340 82ef 	ble.w	801c82a <__ieee754_pow+0x9aa>
 801c24c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801c250:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801c254:	4303      	orrs	r3, r0
 801c256:	f000 81e8 	beq.w	801c62a <__ieee754_pow+0x7aa>
 801c25a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c25e:	2200      	movs	r2, #0
 801c260:	2300      	movs	r3, #0
 801c262:	f7e4 fc73 	bl	8000b4c <__aeabi_dcmplt>
 801c266:	3800      	subs	r0, #0
 801c268:	bf18      	it	ne
 801c26a:	2001      	movne	r0, #1
 801c26c:	e710      	b.n	801c090 <__ieee754_pow+0x210>
 801c26e:	bf00      	nop
 801c270:	60000000 	.word	0x60000000
 801c274:	3ff71547 	.word	0x3ff71547
 801c278:	f85ddf44 	.word	0xf85ddf44
 801c27c:	3e54ae0b 	.word	0x3e54ae0b
 801c280:	55555555 	.word	0x55555555
 801c284:	3fd55555 	.word	0x3fd55555
 801c288:	652b82fe 	.word	0x652b82fe
 801c28c:	3ff71547 	.word	0x3ff71547
 801c290:	3ff00000 	.word	0x3ff00000
 801c294:	3fd00000 	.word	0x3fd00000
 801c298:	3fe00000 	.word	0x3fe00000
 801c29c:	408fffff 	.word	0x408fffff
 801c2a0:	4bd5      	ldr	r3, [pc, #852]	@ (801c5f8 <__ieee754_pow+0x778>)
 801c2a2:	402b      	ands	r3, r5
 801c2a4:	2200      	movs	r2, #0
 801c2a6:	b92b      	cbnz	r3, 801c2b4 <__ieee754_pow+0x434>
 801c2a8:	4bd4      	ldr	r3, [pc, #848]	@ (801c5fc <__ieee754_pow+0x77c>)
 801c2aa:	f7e4 f9dd 	bl	8000668 <__aeabi_dmul>
 801c2ae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801c2b2:	468b      	mov	fp, r1
 801c2b4:	ea4f 532b 	mov.w	r3, fp, asr #20
 801c2b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801c2bc:	4413      	add	r3, r2
 801c2be:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2c0:	4bcf      	ldr	r3, [pc, #828]	@ (801c600 <__ieee754_pow+0x780>)
 801c2c2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801c2c6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801c2ca:	459b      	cmp	fp, r3
 801c2cc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c2d0:	dd08      	ble.n	801c2e4 <__ieee754_pow+0x464>
 801c2d2:	4bcc      	ldr	r3, [pc, #816]	@ (801c604 <__ieee754_pow+0x784>)
 801c2d4:	459b      	cmp	fp, r3
 801c2d6:	f340 81a5 	ble.w	801c624 <__ieee754_pow+0x7a4>
 801c2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c2dc:	3301      	adds	r3, #1
 801c2de:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2e0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801c2e4:	f04f 0a00 	mov.w	sl, #0
 801c2e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801c2ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c2ee:	4bc6      	ldr	r3, [pc, #792]	@ (801c608 <__ieee754_pow+0x788>)
 801c2f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801c2f4:	ed93 7b00 	vldr	d7, [r3]
 801c2f8:	4629      	mov	r1, r5
 801c2fa:	ec53 2b17 	vmov	r2, r3, d7
 801c2fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c302:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c306:	f7e3 fff7 	bl	80002f8 <__aeabi_dsub>
 801c30a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c30e:	4606      	mov	r6, r0
 801c310:	460f      	mov	r7, r1
 801c312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c316:	f7e3 fff1 	bl	80002fc <__adddf3>
 801c31a:	4602      	mov	r2, r0
 801c31c:	460b      	mov	r3, r1
 801c31e:	2000      	movs	r0, #0
 801c320:	49ba      	ldr	r1, [pc, #744]	@ (801c60c <__ieee754_pow+0x78c>)
 801c322:	f7e4 facb 	bl	80008bc <__aeabi_ddiv>
 801c326:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801c32a:	4602      	mov	r2, r0
 801c32c:	460b      	mov	r3, r1
 801c32e:	4630      	mov	r0, r6
 801c330:	4639      	mov	r1, r7
 801c332:	f7e4 f999 	bl	8000668 <__aeabi_dmul>
 801c336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c33a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801c33e:	106d      	asrs	r5, r5, #1
 801c340:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801c344:	f04f 0b00 	mov.w	fp, #0
 801c348:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801c34c:	4661      	mov	r1, ip
 801c34e:	2200      	movs	r2, #0
 801c350:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801c354:	4658      	mov	r0, fp
 801c356:	46e1      	mov	r9, ip
 801c358:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801c35c:	4614      	mov	r4, r2
 801c35e:	461d      	mov	r5, r3
 801c360:	f7e4 f982 	bl	8000668 <__aeabi_dmul>
 801c364:	4602      	mov	r2, r0
 801c366:	460b      	mov	r3, r1
 801c368:	4630      	mov	r0, r6
 801c36a:	4639      	mov	r1, r7
 801c36c:	f7e3 ffc4 	bl	80002f8 <__aeabi_dsub>
 801c370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c374:	4606      	mov	r6, r0
 801c376:	460f      	mov	r7, r1
 801c378:	4620      	mov	r0, r4
 801c37a:	4629      	mov	r1, r5
 801c37c:	f7e3 ffbc 	bl	80002f8 <__aeabi_dsub>
 801c380:	4602      	mov	r2, r0
 801c382:	460b      	mov	r3, r1
 801c384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c388:	f7e3 ffb6 	bl	80002f8 <__aeabi_dsub>
 801c38c:	465a      	mov	r2, fp
 801c38e:	464b      	mov	r3, r9
 801c390:	f7e4 f96a 	bl	8000668 <__aeabi_dmul>
 801c394:	4602      	mov	r2, r0
 801c396:	460b      	mov	r3, r1
 801c398:	4630      	mov	r0, r6
 801c39a:	4639      	mov	r1, r7
 801c39c:	f7e3 ffac 	bl	80002f8 <__aeabi_dsub>
 801c3a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801c3a4:	f7e4 f960 	bl	8000668 <__aeabi_dmul>
 801c3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c3ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c3b0:	4610      	mov	r0, r2
 801c3b2:	4619      	mov	r1, r3
 801c3b4:	f7e4 f958 	bl	8000668 <__aeabi_dmul>
 801c3b8:	a37d      	add	r3, pc, #500	@ (adr r3, 801c5b0 <__ieee754_pow+0x730>)
 801c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3be:	4604      	mov	r4, r0
 801c3c0:	460d      	mov	r5, r1
 801c3c2:	f7e4 f951 	bl	8000668 <__aeabi_dmul>
 801c3c6:	a37c      	add	r3, pc, #496	@ (adr r3, 801c5b8 <__ieee754_pow+0x738>)
 801c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3cc:	f7e3 ff96 	bl	80002fc <__adddf3>
 801c3d0:	4622      	mov	r2, r4
 801c3d2:	462b      	mov	r3, r5
 801c3d4:	f7e4 f948 	bl	8000668 <__aeabi_dmul>
 801c3d8:	a379      	add	r3, pc, #484	@ (adr r3, 801c5c0 <__ieee754_pow+0x740>)
 801c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3de:	f7e3 ff8d 	bl	80002fc <__adddf3>
 801c3e2:	4622      	mov	r2, r4
 801c3e4:	462b      	mov	r3, r5
 801c3e6:	f7e4 f93f 	bl	8000668 <__aeabi_dmul>
 801c3ea:	a377      	add	r3, pc, #476	@ (adr r3, 801c5c8 <__ieee754_pow+0x748>)
 801c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3f0:	f7e3 ff84 	bl	80002fc <__adddf3>
 801c3f4:	4622      	mov	r2, r4
 801c3f6:	462b      	mov	r3, r5
 801c3f8:	f7e4 f936 	bl	8000668 <__aeabi_dmul>
 801c3fc:	a374      	add	r3, pc, #464	@ (adr r3, 801c5d0 <__ieee754_pow+0x750>)
 801c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c402:	f7e3 ff7b 	bl	80002fc <__adddf3>
 801c406:	4622      	mov	r2, r4
 801c408:	462b      	mov	r3, r5
 801c40a:	f7e4 f92d 	bl	8000668 <__aeabi_dmul>
 801c40e:	a372      	add	r3, pc, #456	@ (adr r3, 801c5d8 <__ieee754_pow+0x758>)
 801c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c414:	f7e3 ff72 	bl	80002fc <__adddf3>
 801c418:	4622      	mov	r2, r4
 801c41a:	4606      	mov	r6, r0
 801c41c:	460f      	mov	r7, r1
 801c41e:	462b      	mov	r3, r5
 801c420:	4620      	mov	r0, r4
 801c422:	4629      	mov	r1, r5
 801c424:	f7e4 f920 	bl	8000668 <__aeabi_dmul>
 801c428:	4602      	mov	r2, r0
 801c42a:	460b      	mov	r3, r1
 801c42c:	4630      	mov	r0, r6
 801c42e:	4639      	mov	r1, r7
 801c430:	f7e4 f91a 	bl	8000668 <__aeabi_dmul>
 801c434:	465a      	mov	r2, fp
 801c436:	4604      	mov	r4, r0
 801c438:	460d      	mov	r5, r1
 801c43a:	464b      	mov	r3, r9
 801c43c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c440:	f7e3 ff5c 	bl	80002fc <__adddf3>
 801c444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c448:	f7e4 f90e 	bl	8000668 <__aeabi_dmul>
 801c44c:	4622      	mov	r2, r4
 801c44e:	462b      	mov	r3, r5
 801c450:	f7e3 ff54 	bl	80002fc <__adddf3>
 801c454:	465a      	mov	r2, fp
 801c456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801c45a:	464b      	mov	r3, r9
 801c45c:	4658      	mov	r0, fp
 801c45e:	4649      	mov	r1, r9
 801c460:	f7e4 f902 	bl	8000668 <__aeabi_dmul>
 801c464:	4b6a      	ldr	r3, [pc, #424]	@ (801c610 <__ieee754_pow+0x790>)
 801c466:	2200      	movs	r2, #0
 801c468:	4606      	mov	r6, r0
 801c46a:	460f      	mov	r7, r1
 801c46c:	f7e3 ff46 	bl	80002fc <__adddf3>
 801c470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c474:	f7e3 ff42 	bl	80002fc <__adddf3>
 801c478:	46d8      	mov	r8, fp
 801c47a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801c47e:	460d      	mov	r5, r1
 801c480:	465a      	mov	r2, fp
 801c482:	460b      	mov	r3, r1
 801c484:	4640      	mov	r0, r8
 801c486:	4649      	mov	r1, r9
 801c488:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801c48c:	f7e4 f8ec 	bl	8000668 <__aeabi_dmul>
 801c490:	465c      	mov	r4, fp
 801c492:	4680      	mov	r8, r0
 801c494:	4689      	mov	r9, r1
 801c496:	4b5e      	ldr	r3, [pc, #376]	@ (801c610 <__ieee754_pow+0x790>)
 801c498:	2200      	movs	r2, #0
 801c49a:	4620      	mov	r0, r4
 801c49c:	4629      	mov	r1, r5
 801c49e:	f7e3 ff2b 	bl	80002f8 <__aeabi_dsub>
 801c4a2:	4632      	mov	r2, r6
 801c4a4:	463b      	mov	r3, r7
 801c4a6:	f7e3 ff27 	bl	80002f8 <__aeabi_dsub>
 801c4aa:	4602      	mov	r2, r0
 801c4ac:	460b      	mov	r3, r1
 801c4ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c4b2:	f7e3 ff21 	bl	80002f8 <__aeabi_dsub>
 801c4b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c4ba:	f7e4 f8d5 	bl	8000668 <__aeabi_dmul>
 801c4be:	4622      	mov	r2, r4
 801c4c0:	4606      	mov	r6, r0
 801c4c2:	460f      	mov	r7, r1
 801c4c4:	462b      	mov	r3, r5
 801c4c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c4ca:	f7e4 f8cd 	bl	8000668 <__aeabi_dmul>
 801c4ce:	4602      	mov	r2, r0
 801c4d0:	460b      	mov	r3, r1
 801c4d2:	4630      	mov	r0, r6
 801c4d4:	4639      	mov	r1, r7
 801c4d6:	f7e3 ff11 	bl	80002fc <__adddf3>
 801c4da:	4606      	mov	r6, r0
 801c4dc:	460f      	mov	r7, r1
 801c4de:	4602      	mov	r2, r0
 801c4e0:	460b      	mov	r3, r1
 801c4e2:	4640      	mov	r0, r8
 801c4e4:	4649      	mov	r1, r9
 801c4e6:	f7e3 ff09 	bl	80002fc <__adddf3>
 801c4ea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801c4ee:	a33c      	add	r3, pc, #240	@ (adr r3, 801c5e0 <__ieee754_pow+0x760>)
 801c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f4:	4658      	mov	r0, fp
 801c4f6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801c4fa:	460d      	mov	r5, r1
 801c4fc:	f7e4 f8b4 	bl	8000668 <__aeabi_dmul>
 801c500:	465c      	mov	r4, fp
 801c502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c506:	4642      	mov	r2, r8
 801c508:	464b      	mov	r3, r9
 801c50a:	4620      	mov	r0, r4
 801c50c:	4629      	mov	r1, r5
 801c50e:	f7e3 fef3 	bl	80002f8 <__aeabi_dsub>
 801c512:	4602      	mov	r2, r0
 801c514:	460b      	mov	r3, r1
 801c516:	4630      	mov	r0, r6
 801c518:	4639      	mov	r1, r7
 801c51a:	f7e3 feed 	bl	80002f8 <__aeabi_dsub>
 801c51e:	a332      	add	r3, pc, #200	@ (adr r3, 801c5e8 <__ieee754_pow+0x768>)
 801c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c524:	f7e4 f8a0 	bl	8000668 <__aeabi_dmul>
 801c528:	a331      	add	r3, pc, #196	@ (adr r3, 801c5f0 <__ieee754_pow+0x770>)
 801c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c52e:	4606      	mov	r6, r0
 801c530:	460f      	mov	r7, r1
 801c532:	4620      	mov	r0, r4
 801c534:	4629      	mov	r1, r5
 801c536:	f7e4 f897 	bl	8000668 <__aeabi_dmul>
 801c53a:	4602      	mov	r2, r0
 801c53c:	460b      	mov	r3, r1
 801c53e:	4630      	mov	r0, r6
 801c540:	4639      	mov	r1, r7
 801c542:	f7e3 fedb 	bl	80002fc <__adddf3>
 801c546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c548:	4b32      	ldr	r3, [pc, #200]	@ (801c614 <__ieee754_pow+0x794>)
 801c54a:	4413      	add	r3, r2
 801c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c550:	f7e3 fed4 	bl	80002fc <__adddf3>
 801c554:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c558:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c55a:	f7e4 f81b 	bl	8000594 <__aeabi_i2d>
 801c55e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c560:	4b2d      	ldr	r3, [pc, #180]	@ (801c618 <__ieee754_pow+0x798>)
 801c562:	4413      	add	r3, r2
 801c564:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c568:	4606      	mov	r6, r0
 801c56a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c56e:	460f      	mov	r7, r1
 801c570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c574:	f7e3 fec2 	bl	80002fc <__adddf3>
 801c578:	4642      	mov	r2, r8
 801c57a:	464b      	mov	r3, r9
 801c57c:	f7e3 febe 	bl	80002fc <__adddf3>
 801c580:	4632      	mov	r2, r6
 801c582:	463b      	mov	r3, r7
 801c584:	f7e3 feba 	bl	80002fc <__adddf3>
 801c588:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801c58c:	4632      	mov	r2, r6
 801c58e:	463b      	mov	r3, r7
 801c590:	4658      	mov	r0, fp
 801c592:	460d      	mov	r5, r1
 801c594:	f7e3 feb0 	bl	80002f8 <__aeabi_dsub>
 801c598:	4642      	mov	r2, r8
 801c59a:	464b      	mov	r3, r9
 801c59c:	f7e3 feac 	bl	80002f8 <__aeabi_dsub>
 801c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c5a4:	f7e3 fea8 	bl	80002f8 <__aeabi_dsub>
 801c5a8:	465c      	mov	r4, fp
 801c5aa:	4602      	mov	r2, r0
 801c5ac:	e036      	b.n	801c61c <__ieee754_pow+0x79c>
 801c5ae:	bf00      	nop
 801c5b0:	4a454eef 	.word	0x4a454eef
 801c5b4:	3fca7e28 	.word	0x3fca7e28
 801c5b8:	93c9db65 	.word	0x93c9db65
 801c5bc:	3fcd864a 	.word	0x3fcd864a
 801c5c0:	a91d4101 	.word	0xa91d4101
 801c5c4:	3fd17460 	.word	0x3fd17460
 801c5c8:	518f264d 	.word	0x518f264d
 801c5cc:	3fd55555 	.word	0x3fd55555
 801c5d0:	db6fabff 	.word	0xdb6fabff
 801c5d4:	3fdb6db6 	.word	0x3fdb6db6
 801c5d8:	33333303 	.word	0x33333303
 801c5dc:	3fe33333 	.word	0x3fe33333
 801c5e0:	e0000000 	.word	0xe0000000
 801c5e4:	3feec709 	.word	0x3feec709
 801c5e8:	dc3a03fd 	.word	0xdc3a03fd
 801c5ec:	3feec709 	.word	0x3feec709
 801c5f0:	145b01f5 	.word	0x145b01f5
 801c5f4:	be3e2fe0 	.word	0xbe3e2fe0
 801c5f8:	7ff00000 	.word	0x7ff00000
 801c5fc:	43400000 	.word	0x43400000
 801c600:	0003988e 	.word	0x0003988e
 801c604:	000bb679 	.word	0x000bb679
 801c608:	0801e5f0 	.word	0x0801e5f0
 801c60c:	3ff00000 	.word	0x3ff00000
 801c610:	40080000 	.word	0x40080000
 801c614:	0801e5d0 	.word	0x0801e5d0
 801c618:	0801e5e0 	.word	0x0801e5e0
 801c61c:	460b      	mov	r3, r1
 801c61e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c622:	e5d7      	b.n	801c1d4 <__ieee754_pow+0x354>
 801c624:	f04f 0a01 	mov.w	sl, #1
 801c628:	e65e      	b.n	801c2e8 <__ieee754_pow+0x468>
 801c62a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801c8fc <__ieee754_pow+0xa7c>)
 801c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c630:	4630      	mov	r0, r6
 801c632:	4639      	mov	r1, r7
 801c634:	f7e3 fe62 	bl	80002fc <__adddf3>
 801c638:	4642      	mov	r2, r8
 801c63a:	e9cd 0100 	strd	r0, r1, [sp]
 801c63e:	464b      	mov	r3, r9
 801c640:	4620      	mov	r0, r4
 801c642:	4629      	mov	r1, r5
 801c644:	f7e3 fe58 	bl	80002f8 <__aeabi_dsub>
 801c648:	4602      	mov	r2, r0
 801c64a:	460b      	mov	r3, r1
 801c64c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c650:	f7e4 fa9a 	bl	8000b88 <__aeabi_dcmpgt>
 801c654:	2800      	cmp	r0, #0
 801c656:	f47f ae00 	bne.w	801c25a <__ieee754_pow+0x3da>
 801c65a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801c65e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801c662:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801c666:	fa43 fa0a 	asr.w	sl, r3, sl
 801c66a:	44da      	add	sl, fp
 801c66c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801c670:	489d      	ldr	r0, [pc, #628]	@ (801c8e8 <__ieee754_pow+0xa68>)
 801c672:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801c676:	4108      	asrs	r0, r1
 801c678:	ea00 030a 	and.w	r3, r0, sl
 801c67c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801c680:	f1c1 0114 	rsb	r1, r1, #20
 801c684:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801c688:	fa4a fa01 	asr.w	sl, sl, r1
 801c68c:	f1bb 0f00 	cmp.w	fp, #0
 801c690:	4640      	mov	r0, r8
 801c692:	4649      	mov	r1, r9
 801c694:	f04f 0200 	mov.w	r2, #0
 801c698:	bfb8      	it	lt
 801c69a:	f1ca 0a00 	rsblt	sl, sl, #0
 801c69e:	f7e3 fe2b 	bl	80002f8 <__aeabi_dsub>
 801c6a2:	4680      	mov	r8, r0
 801c6a4:	4689      	mov	r9, r1
 801c6a6:	4632      	mov	r2, r6
 801c6a8:	463b      	mov	r3, r7
 801c6aa:	4640      	mov	r0, r8
 801c6ac:	4649      	mov	r1, r9
 801c6ae:	f7e3 fe25 	bl	80002fc <__adddf3>
 801c6b2:	2400      	movs	r4, #0
 801c6b4:	a37c      	add	r3, pc, #496	@ (adr r3, 801c8a8 <__ieee754_pow+0xa28>)
 801c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6ba:	4620      	mov	r0, r4
 801c6bc:	460d      	mov	r5, r1
 801c6be:	f7e3 ffd3 	bl	8000668 <__aeabi_dmul>
 801c6c2:	4642      	mov	r2, r8
 801c6c4:	e9cd 0100 	strd	r0, r1, [sp]
 801c6c8:	464b      	mov	r3, r9
 801c6ca:	4620      	mov	r0, r4
 801c6cc:	4629      	mov	r1, r5
 801c6ce:	f7e3 fe13 	bl	80002f8 <__aeabi_dsub>
 801c6d2:	4602      	mov	r2, r0
 801c6d4:	460b      	mov	r3, r1
 801c6d6:	4630      	mov	r0, r6
 801c6d8:	4639      	mov	r1, r7
 801c6da:	f7e3 fe0d 	bl	80002f8 <__aeabi_dsub>
 801c6de:	a374      	add	r3, pc, #464	@ (adr r3, 801c8b0 <__ieee754_pow+0xa30>)
 801c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6e4:	f7e3 ffc0 	bl	8000668 <__aeabi_dmul>
 801c6e8:	a373      	add	r3, pc, #460	@ (adr r3, 801c8b8 <__ieee754_pow+0xa38>)
 801c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6ee:	4680      	mov	r8, r0
 801c6f0:	4689      	mov	r9, r1
 801c6f2:	4620      	mov	r0, r4
 801c6f4:	4629      	mov	r1, r5
 801c6f6:	f7e3 ffb7 	bl	8000668 <__aeabi_dmul>
 801c6fa:	4602      	mov	r2, r0
 801c6fc:	460b      	mov	r3, r1
 801c6fe:	4640      	mov	r0, r8
 801c700:	4649      	mov	r1, r9
 801c702:	f7e3 fdfb 	bl	80002fc <__adddf3>
 801c706:	4604      	mov	r4, r0
 801c708:	460d      	mov	r5, r1
 801c70a:	4602      	mov	r2, r0
 801c70c:	460b      	mov	r3, r1
 801c70e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c712:	f7e3 fdf3 	bl	80002fc <__adddf3>
 801c716:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c71a:	4680      	mov	r8, r0
 801c71c:	4689      	mov	r9, r1
 801c71e:	f7e3 fdeb 	bl	80002f8 <__aeabi_dsub>
 801c722:	4602      	mov	r2, r0
 801c724:	460b      	mov	r3, r1
 801c726:	4620      	mov	r0, r4
 801c728:	4629      	mov	r1, r5
 801c72a:	f7e3 fde5 	bl	80002f8 <__aeabi_dsub>
 801c72e:	4642      	mov	r2, r8
 801c730:	4606      	mov	r6, r0
 801c732:	460f      	mov	r7, r1
 801c734:	464b      	mov	r3, r9
 801c736:	4640      	mov	r0, r8
 801c738:	4649      	mov	r1, r9
 801c73a:	f7e3 ff95 	bl	8000668 <__aeabi_dmul>
 801c73e:	a360      	add	r3, pc, #384	@ (adr r3, 801c8c0 <__ieee754_pow+0xa40>)
 801c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c744:	4604      	mov	r4, r0
 801c746:	460d      	mov	r5, r1
 801c748:	f7e3 ff8e 	bl	8000668 <__aeabi_dmul>
 801c74c:	a35e      	add	r3, pc, #376	@ (adr r3, 801c8c8 <__ieee754_pow+0xa48>)
 801c74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c752:	f7e3 fdd1 	bl	80002f8 <__aeabi_dsub>
 801c756:	4622      	mov	r2, r4
 801c758:	462b      	mov	r3, r5
 801c75a:	f7e3 ff85 	bl	8000668 <__aeabi_dmul>
 801c75e:	a35c      	add	r3, pc, #368	@ (adr r3, 801c8d0 <__ieee754_pow+0xa50>)
 801c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c764:	f7e3 fdca 	bl	80002fc <__adddf3>
 801c768:	4622      	mov	r2, r4
 801c76a:	462b      	mov	r3, r5
 801c76c:	f7e3 ff7c 	bl	8000668 <__aeabi_dmul>
 801c770:	a359      	add	r3, pc, #356	@ (adr r3, 801c8d8 <__ieee754_pow+0xa58>)
 801c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c776:	f7e3 fdbf 	bl	80002f8 <__aeabi_dsub>
 801c77a:	4622      	mov	r2, r4
 801c77c:	462b      	mov	r3, r5
 801c77e:	f7e3 ff73 	bl	8000668 <__aeabi_dmul>
 801c782:	a357      	add	r3, pc, #348	@ (adr r3, 801c8e0 <__ieee754_pow+0xa60>)
 801c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c788:	f7e3 fdb8 	bl	80002fc <__adddf3>
 801c78c:	4622      	mov	r2, r4
 801c78e:	462b      	mov	r3, r5
 801c790:	f7e3 ff6a 	bl	8000668 <__aeabi_dmul>
 801c794:	4602      	mov	r2, r0
 801c796:	460b      	mov	r3, r1
 801c798:	4640      	mov	r0, r8
 801c79a:	4649      	mov	r1, r9
 801c79c:	f7e3 fdac 	bl	80002f8 <__aeabi_dsub>
 801c7a0:	4604      	mov	r4, r0
 801c7a2:	460d      	mov	r5, r1
 801c7a4:	4602      	mov	r2, r0
 801c7a6:	460b      	mov	r3, r1
 801c7a8:	4640      	mov	r0, r8
 801c7aa:	4649      	mov	r1, r9
 801c7ac:	f7e3 ff5c 	bl	8000668 <__aeabi_dmul>
 801c7b0:	2200      	movs	r2, #0
 801c7b2:	e9cd 0100 	strd	r0, r1, [sp]
 801c7b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c7ba:	4620      	mov	r0, r4
 801c7bc:	4629      	mov	r1, r5
 801c7be:	f7e3 fd9b 	bl	80002f8 <__aeabi_dsub>
 801c7c2:	4602      	mov	r2, r0
 801c7c4:	460b      	mov	r3, r1
 801c7c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7ca:	f7e4 f877 	bl	80008bc <__aeabi_ddiv>
 801c7ce:	4632      	mov	r2, r6
 801c7d0:	4604      	mov	r4, r0
 801c7d2:	460d      	mov	r5, r1
 801c7d4:	463b      	mov	r3, r7
 801c7d6:	4640      	mov	r0, r8
 801c7d8:	4649      	mov	r1, r9
 801c7da:	f7e3 ff45 	bl	8000668 <__aeabi_dmul>
 801c7de:	4632      	mov	r2, r6
 801c7e0:	463b      	mov	r3, r7
 801c7e2:	f7e3 fd8b 	bl	80002fc <__adddf3>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	460b      	mov	r3, r1
 801c7ea:	4620      	mov	r0, r4
 801c7ec:	4629      	mov	r1, r5
 801c7ee:	f7e3 fd83 	bl	80002f8 <__aeabi_dsub>
 801c7f2:	4642      	mov	r2, r8
 801c7f4:	464b      	mov	r3, r9
 801c7f6:	f7e3 fd7f 	bl	80002f8 <__aeabi_dsub>
 801c7fa:	460b      	mov	r3, r1
 801c7fc:	4602      	mov	r2, r0
 801c7fe:	493b      	ldr	r1, [pc, #236]	@ (801c8ec <__ieee754_pow+0xa6c>)
 801c800:	2000      	movs	r0, #0
 801c802:	f7e3 fd79 	bl	80002f8 <__aeabi_dsub>
 801c806:	ec41 0b10 	vmov	d0, r0, r1
 801c80a:	ee10 3a90 	vmov	r3, s1
 801c80e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801c812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c816:	da30      	bge.n	801c87a <__ieee754_pow+0x9fa>
 801c818:	4650      	mov	r0, sl
 801c81a:	f000 f875 	bl	801c908 <scalbn>
 801c81e:	ec51 0b10 	vmov	r0, r1, d0
 801c822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c826:	f7ff bbd2 	b.w	801bfce <__ieee754_pow+0x14e>
 801c82a:	4c31      	ldr	r4, [pc, #196]	@ (801c8f0 <__ieee754_pow+0xa70>)
 801c82c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c830:	42a3      	cmp	r3, r4
 801c832:	d91a      	bls.n	801c86a <__ieee754_pow+0x9ea>
 801c834:	4b2f      	ldr	r3, [pc, #188]	@ (801c8f4 <__ieee754_pow+0xa74>)
 801c836:	440b      	add	r3, r1
 801c838:	4303      	orrs	r3, r0
 801c83a:	d009      	beq.n	801c850 <__ieee754_pow+0x9d0>
 801c83c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c840:	2200      	movs	r2, #0
 801c842:	2300      	movs	r3, #0
 801c844:	f7e4 f982 	bl	8000b4c <__aeabi_dcmplt>
 801c848:	3800      	subs	r0, #0
 801c84a:	bf18      	it	ne
 801c84c:	2001      	movne	r0, #1
 801c84e:	e42b      	b.n	801c0a8 <__ieee754_pow+0x228>
 801c850:	4642      	mov	r2, r8
 801c852:	464b      	mov	r3, r9
 801c854:	f7e3 fd50 	bl	80002f8 <__aeabi_dsub>
 801c858:	4632      	mov	r2, r6
 801c85a:	463b      	mov	r3, r7
 801c85c:	f7e4 f98a 	bl	8000b74 <__aeabi_dcmpge>
 801c860:	2800      	cmp	r0, #0
 801c862:	d1eb      	bne.n	801c83c <__ieee754_pow+0x9bc>
 801c864:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801c904 <__ieee754_pow+0xa84>
 801c868:	e6f7      	b.n	801c65a <__ieee754_pow+0x7da>
 801c86a:	469a      	mov	sl, r3
 801c86c:	4b22      	ldr	r3, [pc, #136]	@ (801c8f8 <__ieee754_pow+0xa78>)
 801c86e:	459a      	cmp	sl, r3
 801c870:	f63f aef3 	bhi.w	801c65a <__ieee754_pow+0x7da>
 801c874:	f8dd a010 	ldr.w	sl, [sp, #16]
 801c878:	e715      	b.n	801c6a6 <__ieee754_pow+0x826>
 801c87a:	ec51 0b10 	vmov	r0, r1, d0
 801c87e:	4619      	mov	r1, r3
 801c880:	e7cf      	b.n	801c822 <__ieee754_pow+0x9a2>
 801c882:	491a      	ldr	r1, [pc, #104]	@ (801c8ec <__ieee754_pow+0xa6c>)
 801c884:	2000      	movs	r0, #0
 801c886:	f7ff bb18 	b.w	801beba <__ieee754_pow+0x3a>
 801c88a:	2000      	movs	r0, #0
 801c88c:	2100      	movs	r1, #0
 801c88e:	f7ff bb14 	b.w	801beba <__ieee754_pow+0x3a>
 801c892:	4630      	mov	r0, r6
 801c894:	4639      	mov	r1, r7
 801c896:	f7ff bb10 	b.w	801beba <__ieee754_pow+0x3a>
 801c89a:	460c      	mov	r4, r1
 801c89c:	f7ff bb5e 	b.w	801bf5c <__ieee754_pow+0xdc>
 801c8a0:	2400      	movs	r4, #0
 801c8a2:	f7ff bb49 	b.w	801bf38 <__ieee754_pow+0xb8>
 801c8a6:	bf00      	nop
 801c8a8:	00000000 	.word	0x00000000
 801c8ac:	3fe62e43 	.word	0x3fe62e43
 801c8b0:	fefa39ef 	.word	0xfefa39ef
 801c8b4:	3fe62e42 	.word	0x3fe62e42
 801c8b8:	0ca86c39 	.word	0x0ca86c39
 801c8bc:	be205c61 	.word	0xbe205c61
 801c8c0:	72bea4d0 	.word	0x72bea4d0
 801c8c4:	3e663769 	.word	0x3e663769
 801c8c8:	c5d26bf1 	.word	0xc5d26bf1
 801c8cc:	3ebbbd41 	.word	0x3ebbbd41
 801c8d0:	af25de2c 	.word	0xaf25de2c
 801c8d4:	3f11566a 	.word	0x3f11566a
 801c8d8:	16bebd93 	.word	0x16bebd93
 801c8dc:	3f66c16c 	.word	0x3f66c16c
 801c8e0:	5555553e 	.word	0x5555553e
 801c8e4:	3fc55555 	.word	0x3fc55555
 801c8e8:	fff00000 	.word	0xfff00000
 801c8ec:	3ff00000 	.word	0x3ff00000
 801c8f0:	4090cbff 	.word	0x4090cbff
 801c8f4:	3f6f3400 	.word	0x3f6f3400
 801c8f8:	3fe00000 	.word	0x3fe00000
 801c8fc:	652b82fe 	.word	0x652b82fe
 801c900:	3c971547 	.word	0x3c971547
 801c904:	4090cc00 	.word	0x4090cc00

0801c908 <scalbn>:
 801c908:	b570      	push	{r4, r5, r6, lr}
 801c90a:	ec55 4b10 	vmov	r4, r5, d0
 801c90e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801c912:	4606      	mov	r6, r0
 801c914:	462b      	mov	r3, r5
 801c916:	b991      	cbnz	r1, 801c93e <scalbn+0x36>
 801c918:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801c91c:	4323      	orrs	r3, r4
 801c91e:	d03d      	beq.n	801c99c <scalbn+0x94>
 801c920:	4b35      	ldr	r3, [pc, #212]	@ (801c9f8 <scalbn+0xf0>)
 801c922:	4620      	mov	r0, r4
 801c924:	4629      	mov	r1, r5
 801c926:	2200      	movs	r2, #0
 801c928:	f7e3 fe9e 	bl	8000668 <__aeabi_dmul>
 801c92c:	4b33      	ldr	r3, [pc, #204]	@ (801c9fc <scalbn+0xf4>)
 801c92e:	429e      	cmp	r6, r3
 801c930:	4604      	mov	r4, r0
 801c932:	460d      	mov	r5, r1
 801c934:	da0f      	bge.n	801c956 <scalbn+0x4e>
 801c936:	a328      	add	r3, pc, #160	@ (adr r3, 801c9d8 <scalbn+0xd0>)
 801c938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c93c:	e01e      	b.n	801c97c <scalbn+0x74>
 801c93e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801c942:	4291      	cmp	r1, r2
 801c944:	d10b      	bne.n	801c95e <scalbn+0x56>
 801c946:	4622      	mov	r2, r4
 801c948:	4620      	mov	r0, r4
 801c94a:	4629      	mov	r1, r5
 801c94c:	f7e3 fcd6 	bl	80002fc <__adddf3>
 801c950:	4604      	mov	r4, r0
 801c952:	460d      	mov	r5, r1
 801c954:	e022      	b.n	801c99c <scalbn+0x94>
 801c956:	460b      	mov	r3, r1
 801c958:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801c95c:	3936      	subs	r1, #54	@ 0x36
 801c95e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801c962:	4296      	cmp	r6, r2
 801c964:	dd0d      	ble.n	801c982 <scalbn+0x7a>
 801c966:	2d00      	cmp	r5, #0
 801c968:	a11d      	add	r1, pc, #116	@ (adr r1, 801c9e0 <scalbn+0xd8>)
 801c96a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c96e:	da02      	bge.n	801c976 <scalbn+0x6e>
 801c970:	a11d      	add	r1, pc, #116	@ (adr r1, 801c9e8 <scalbn+0xe0>)
 801c972:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c976:	a31a      	add	r3, pc, #104	@ (adr r3, 801c9e0 <scalbn+0xd8>)
 801c978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c97c:	f7e3 fe74 	bl	8000668 <__aeabi_dmul>
 801c980:	e7e6      	b.n	801c950 <scalbn+0x48>
 801c982:	1872      	adds	r2, r6, r1
 801c984:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801c988:	428a      	cmp	r2, r1
 801c98a:	dcec      	bgt.n	801c966 <scalbn+0x5e>
 801c98c:	2a00      	cmp	r2, #0
 801c98e:	dd08      	ble.n	801c9a2 <scalbn+0x9a>
 801c990:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c994:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801c998:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c99c:	ec45 4b10 	vmov	d0, r4, r5
 801c9a0:	bd70      	pop	{r4, r5, r6, pc}
 801c9a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801c9a6:	da08      	bge.n	801c9ba <scalbn+0xb2>
 801c9a8:	2d00      	cmp	r5, #0
 801c9aa:	a10b      	add	r1, pc, #44	@ (adr r1, 801c9d8 <scalbn+0xd0>)
 801c9ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c9b0:	dac1      	bge.n	801c936 <scalbn+0x2e>
 801c9b2:	a10f      	add	r1, pc, #60	@ (adr r1, 801c9f0 <scalbn+0xe8>)
 801c9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c9b8:	e7bd      	b.n	801c936 <scalbn+0x2e>
 801c9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801c9be:	3236      	adds	r2, #54	@ 0x36
 801c9c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801c9c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c9c8:	4620      	mov	r0, r4
 801c9ca:	4b0d      	ldr	r3, [pc, #52]	@ (801ca00 <scalbn+0xf8>)
 801c9cc:	4629      	mov	r1, r5
 801c9ce:	2200      	movs	r2, #0
 801c9d0:	e7d4      	b.n	801c97c <scalbn+0x74>
 801c9d2:	bf00      	nop
 801c9d4:	f3af 8000 	nop.w
 801c9d8:	c2f8f359 	.word	0xc2f8f359
 801c9dc:	01a56e1f 	.word	0x01a56e1f
 801c9e0:	8800759c 	.word	0x8800759c
 801c9e4:	7e37e43c 	.word	0x7e37e43c
 801c9e8:	8800759c 	.word	0x8800759c
 801c9ec:	fe37e43c 	.word	0xfe37e43c
 801c9f0:	c2f8f359 	.word	0xc2f8f359
 801c9f4:	81a56e1f 	.word	0x81a56e1f
 801c9f8:	43500000 	.word	0x43500000
 801c9fc:	ffff3cb0 	.word	0xffff3cb0
 801ca00:	3c900000 	.word	0x3c900000

0801ca04 <with_errno>:
 801ca04:	b510      	push	{r4, lr}
 801ca06:	ed2d 8b02 	vpush	{d8}
 801ca0a:	eeb0 8a40 	vmov.f32	s16, s0
 801ca0e:	eef0 8a60 	vmov.f32	s17, s1
 801ca12:	4604      	mov	r4, r0
 801ca14:	f7fd fe88 	bl	801a728 <__errno>
 801ca18:	eeb0 0a48 	vmov.f32	s0, s16
 801ca1c:	eef0 0a68 	vmov.f32	s1, s17
 801ca20:	ecbd 8b02 	vpop	{d8}
 801ca24:	6004      	str	r4, [r0, #0]
 801ca26:	bd10      	pop	{r4, pc}

0801ca28 <xflow>:
 801ca28:	4603      	mov	r3, r0
 801ca2a:	b507      	push	{r0, r1, r2, lr}
 801ca2c:	ec51 0b10 	vmov	r0, r1, d0
 801ca30:	b183      	cbz	r3, 801ca54 <xflow+0x2c>
 801ca32:	4602      	mov	r2, r0
 801ca34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ca38:	e9cd 2300 	strd	r2, r3, [sp]
 801ca3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ca40:	f7e3 fe12 	bl	8000668 <__aeabi_dmul>
 801ca44:	ec41 0b10 	vmov	d0, r0, r1
 801ca48:	2022      	movs	r0, #34	@ 0x22
 801ca4a:	b003      	add	sp, #12
 801ca4c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ca50:	f7ff bfd8 	b.w	801ca04 <with_errno>
 801ca54:	4602      	mov	r2, r0
 801ca56:	460b      	mov	r3, r1
 801ca58:	e7ee      	b.n	801ca38 <xflow+0x10>
 801ca5a:	0000      	movs	r0, r0
 801ca5c:	0000      	movs	r0, r0
	...

0801ca60 <__math_uflow>:
 801ca60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ca68 <__math_uflow+0x8>
 801ca64:	f7ff bfe0 	b.w	801ca28 <xflow>
 801ca68:	00000000 	.word	0x00000000
 801ca6c:	10000000 	.word	0x10000000

0801ca70 <__math_oflow>:
 801ca70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ca78 <__math_oflow+0x8>
 801ca74:	f7ff bfd8 	b.w	801ca28 <xflow>
 801ca78:	00000000 	.word	0x00000000
 801ca7c:	70000000 	.word	0x70000000

0801ca80 <_init>:
 801ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca82:	bf00      	nop
 801ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca86:	bc08      	pop	{r3}
 801ca88:	469e      	mov	lr, r3
 801ca8a:	4770      	bx	lr

0801ca8c <_fini>:
 801ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca8e:	bf00      	nop
 801ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ca92:	bc08      	pop	{r3}
 801ca94:	469e      	mov	lr, r3
 801ca96:	4770      	bx	lr
