
nucleo_g474re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017440  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c0  08017620  08017620  00018620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188e0  080188e0  0001a2a4  2**0
                  CONTENTS
  4 .ARM          00000008  080188e0  080188e0  000198e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188e8  080188e8  0001a2a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080188e8  080188e8  000198e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080188f4  080188f4  000198f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a4  20000000  080188f8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ae1c  200002a8  08018b9c  0001a2a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b0c4  08018b9c  0001b0c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a2a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000220ba  00000000  00000000  0001a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce3  00000000  00000000  0003c38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00041078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014d2  00000000  00000000  00042b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb98  00000000  00000000  00044062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f47  00000000  00000000  00070bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011273e  00000000  00000000  00092b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a527f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dec  00000000  00000000  001a52f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001ad0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a8 	.word	0x200002a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017608 	.word	0x08017608

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002ac 	.word	0x200002ac
 800021c:	08017608 	.word	0x08017608

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <MX_FREERTOS_Init+0x18>)
 8000686:	2100      	movs	r1, #0
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_FREERTOS_Init+0x1c>)
 800068a:	f005 fa87 	bl	8005b9c <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <MX_FREERTOS_Init+0x20>)
 8000692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	080176d0 	.word	0x080176d0
 800069c:	08000ec1 	.word	0x08000ec1
 80006a0:	200002c4 	.word	0x200002c4

080006a4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b0:	f006 fb48 	bl	8006d44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006b4:	4b5a      	ldr	r3, [pc, #360]	@ (8000820 <pvPortMallocMicroROS+0x17c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006bc:	f000 f986 	bl	80009cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c0:	4b58      	ldr	r3, [pc, #352]	@ (8000824 <pvPortMallocMicroROS+0x180>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4013      	ands	r3, r2
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	f040 8090 	bne.w	80007ee <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d01e      	beq.n	8000712 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006d4:	2208      	movs	r2, #8
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d015      	beq.n	8000712 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f023 0307 	bic.w	r3, r3, #7
 80006ec:	3308      	adds	r3, #8
 80006ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00b      	beq.n	8000712 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006fe:	f383 8811 	msr	BASEPRI, r3
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	e7fd      	b.n	800070e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d06a      	beq.n	80007ee <pvPortMallocMicroROS+0x14a>
 8000718:	4b43      	ldr	r3, [pc, #268]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	429a      	cmp	r2, r3
 8000720:	d865      	bhi.n	80007ee <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000722:	4b42      	ldr	r3, [pc, #264]	@ (800082c <pvPortMallocMicroROS+0x188>)
 8000724:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000726:	4b41      	ldr	r3, [pc, #260]	@ (800082c <pvPortMallocMicroROS+0x188>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800072c:	e004      	b.n	8000738 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800072e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000730:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	429a      	cmp	r2, r3
 8000740:	d903      	bls.n	800074a <pvPortMallocMicroROS+0xa6>
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f1      	bne.n	800072e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800074a:	4b35      	ldr	r3, [pc, #212]	@ (8000820 <pvPortMallocMicroROS+0x17c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000750:	429a      	cmp	r2, r3
 8000752:	d04c      	beq.n	80007ee <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000754:	6a3b      	ldr	r3, [r7, #32]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2208      	movs	r2, #8
 800075a:	4413      	add	r3, r2
 800075c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800075e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1ad2      	subs	r2, r2, r3
 800076e:	2308      	movs	r3, #8
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	429a      	cmp	r2, r3
 8000774:	d920      	bls.n	80007b8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	f003 0307 	and.w	r3, r3, #7
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00b      	beq.n	80007a0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	613b      	str	r3, [r7, #16]
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	1ad2      	subs	r2, r2, r3
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007b2:	69b8      	ldr	r0, [r7, #24]
 80007b4:	f000 f96c 	bl	8000a90 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x18c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d203      	bcs.n	80007da <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <pvPortMallocMicroROS+0x184>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a16      	ldr	r2, [pc, #88]	@ (8000830 <pvPortMallocMicroROS+0x18c>)
 80007d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <pvPortMallocMicroROS+0x180>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	431a      	orrs	r2, r3
 80007e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007ee:	f006 fab7 	bl	8006d60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d00b      	beq.n	8000814 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80007fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000800:	f383 8811 	msr	BASEPRI, r3
 8000804:	f3bf 8f6f 	isb	sy
 8000808:	f3bf 8f4f 	dsb	sy
 800080c:	60fb      	str	r3, [r7, #12]
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000814:	69fb      	ldr	r3, [r7, #28]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3728      	adds	r7, #40	@ 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20003e0c 	.word	0x20003e0c
 8000824:	20003e18 	.word	0x20003e18
 8000828:	20003e10 	.word	0x20003e10
 800082c:	20003e04 	.word	0x20003e04
 8000830:	20003e14 	.word	0x20003e14

08000834 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d04a      	beq.n	80008dc <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000846:	2308      	movs	r3, #8
 8000848:	425b      	negs	r3, r3
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <vPortFreeMicroROS+0xb0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4013      	ands	r3, r2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d10b      	bne.n	800087a <vPortFreeMicroROS+0x46>
	__asm volatile
 8000862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000866:	f383 8811 	msr	BASEPRI, r3
 800086a:	f3bf 8f6f 	isb	sy
 800086e:	f3bf 8f4f 	dsb	sy
 8000872:	60fb      	str	r3, [r7, #12]
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d00b      	beq.n	800089a <vPortFreeMicroROS+0x66>
	__asm volatile
 8000882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000886:	f383 8811 	msr	BASEPRI, r3
 800088a:	f3bf 8f6f 	isb	sy
 800088e:	f3bf 8f4f 	dsb	sy
 8000892:	60bb      	str	r3, [r7, #8]
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	e7fd      	b.n	8000896 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <vPortFreeMicroROS+0xb0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4013      	ands	r3, r2
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d019      	beq.n	80008dc <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d115      	bne.n	80008dc <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <vPortFreeMicroROS+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	43db      	mvns	r3, r3
 80008ba:	401a      	ands	r2, r3
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008c0:	f006 fa40 	bl	8006d44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <vPortFreeMicroROS+0xb4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a06      	ldr	r2, [pc, #24]	@ (80008e8 <vPortFreeMicroROS+0xb4>)
 80008d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008d2:	6938      	ldr	r0, [r7, #16]
 80008d4:	f000 f8dc 	bl	8000a90 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008d8:	f006 fa42 	bl	8006d60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008dc:	bf00      	nop
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20003e18 	.word	0x20003e18
 80008e8:	20003e10 	.word	0x20003e10

080008ec <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008f8:	2308      	movs	r3, #8
 80008fa:	425b      	negs	r3, r3
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	4413      	add	r3, r2
 8000900:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <getBlockSize+0x38>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	43db      	mvns	r3, r3
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

	return count;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	4618      	mov	r0, r3
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20003e18 	.word	0x20003e18

08000928 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000932:	f006 fa07 	bl	8006d44 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000936:	6838      	ldr	r0, [r7, #0]
 8000938:	f7ff feb4 	bl	80006a4 <pvPortMallocMicroROS>
 800093c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d017      	beq.n	8000974 <pvPortReallocMicroROS+0x4c>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d014      	beq.n	8000974 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffce 	bl	80008ec <getBlockSize>
 8000950:	4603      	mov	r3, r0
 8000952:	2208      	movs	r2, #8
 8000954:	1a9b      	subs	r3, r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	429a      	cmp	r2, r3
 800095e:	d201      	bcs.n	8000964 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	68b8      	ldr	r0, [r7, #8]
 800096a:	f015 ff78 	bl	801685e <memcpy>

		vPortFreeMicroROS(pv);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff60 	bl	8000834 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000974:	f006 f9f4 	bl	8006d60 <xTaskResumeAll>

	return newmem;
 8000978:	68bb      	ldr	r3, [r7, #8]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800098c:	f006 f9da 	bl	8006d44 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	fb02 f303 	mul.w	r3, r2, r3
 8000998:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800099a:	6978      	ldr	r0, [r7, #20]
 800099c:	f7ff fe82 	bl	80006a4 <pvPortMallocMicroROS>
 80009a0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009a6:	e004      	b.n	80009b2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	613a      	str	r2, [r7, #16]
 80009ae:	2200      	movs	r2, #0
 80009b0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	617a      	str	r2, [r7, #20]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f5      	bne.n	80009a8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009bc:	f006 f9d0 	bl	8006d60 <xTaskResumeAll>
  	return mem;
 80009c0:	68fb      	ldr	r3, [r7, #12]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <prvHeapInit+0xac>)
 80009da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00c      	beq.n	8000a00 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3307      	adds	r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 0307 	bic.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <prvHeapInit+0xac>)
 80009fc:	4413      	add	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a04:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <prvHeapInit+0xb0>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <prvHeapInit+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4413      	add	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a18:	2208      	movs	r2, #8
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1a9b      	subs	r3, r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f023 0307 	bic.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a2c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	1ad2      	subs	r2, r2, r3
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <prvHeapInit+0xb4>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <prvHeapInit+0xb8>)
 8000a5a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <prvHeapInit+0xbc>)
 8000a62:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <prvHeapInit+0xc0>)
 8000a66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	20003204 	.word	0x20003204
 8000a7c:	20003e04 	.word	0x20003e04
 8000a80:	20003e0c 	.word	0x20003e0c
 8000a84:	20003e14 	.word	0x20003e14
 8000a88:	20003e10 	.word	0x20003e10
 8000a8c:	20003e18 	.word	0x20003e18

08000a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <prvInsertBlockIntoFreeList+0xac>)
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e002      	b.n	8000aa4 <prvInsertBlockIntoFreeList+0x14>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d8f7      	bhi.n	8000a9e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d108      	bne.n	8000ad2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	441a      	add	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	441a      	add	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d118      	bne.n	8000b18 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <prvInsertBlockIntoFreeList+0xb0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d00d      	beq.n	8000b0e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	441a      	add	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e008      	b.n	8000b20 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <prvInsertBlockIntoFreeList+0xb0>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e003      	b.n	8000b20 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d002      	beq.n	8000b2e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20003e04 	.word	0x20003e04
 8000b40:	20003e0c 	.word	0x20003e0c

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <MX_DMA_Init+0x60>)
 8000b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	200b      	movs	r0, #11
 8000b80:	f001 f850 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b84:	200b      	movs	r0, #11
 8000b86:	f001 f867 	bl	8001c58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	200c      	movs	r0, #12
 8000b90:	f001 f848 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b94:	200c      	movs	r0, #12
 8000b96:	f001 f85f 	bl	8001c58 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000bb6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bbc:	4904      	ldr	r1, [pc, #16]	@ (8000bd0 <cubemx_transport_open+0x28>)
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f003 fa4a 	bl	8004058 <HAL_UART_Receive_DMA>
    return true;
 8000bc4:	2301      	movs	r3, #1
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20003e1c 	.word	0x20003e1c

08000bd4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000be2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f003 fa83 	bl	80040f0 <HAL_UART_DMAStop>
    return true;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c08:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c10:	2b20      	cmp	r3, #32
 8000c12:	d11b      	bne.n	8000c4c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	6978      	ldr	r0, [r7, #20]
 8000c1e:	f003 f99b 	bl	8003f58 <HAL_UART_Transmit_DMA>
 8000c22:	4603      	mov	r3, r0
 8000c24:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c26:	e002      	b.n	8000c2e <cubemx_transport_write+0x3a>
            osDelay(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f005 f849 	bl	8005cc0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c2e:	7cfb      	ldrb	r3, [r7, #19]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <cubemx_transport_write+0x4a>
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3a:	2b20      	cmp	r3, #32
 8000c3c:	d1f4      	bne.n	8000c28 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c3e:	7cfb      	ldrb	r3, [r7, #19]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <cubemx_transport_write+0x54>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	e002      	b.n	8000c4e <cubemx_transport_write+0x5a>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e000      	b.n	8000c4e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000c4c:	2300      	movs	r3, #0
    }
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000c6c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c72:	b672      	cpsid	i
}
 8000c74:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <cubemx_transport_read+0x9c>)
 8000c86:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c88:	b662      	cpsie	i
}
 8000c8a:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f005 f814 	bl	8005cc0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <cubemx_transport_read+0x9c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d103      	bne.n	8000cac <cubemx_transport_read+0x54>
 8000ca4:	69fa      	ldr	r2, [r7, #28]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbe2      	blt.n	8000c72 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cb0:	e011      	b.n	8000cd6 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	440b      	add	r3, r1
 8000cbc:	490f      	ldr	r1, [pc, #60]	@ (8000cfc <cubemx_transport_read+0xa4>)
 8000cbe:	5c8a      	ldrb	r2, [r1, r2]
 8000cc0:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cce:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <cubemx_transport_read+0xa0>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <cubemx_transport_read+0x9c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d003      	beq.n	8000cea <cubemx_transport_read+0x92>
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3e3      	bcc.n	8000cb2 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8000cea:	69bb      	ldr	r3, [r7, #24]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20004620 	.word	0x20004620
 8000cf8:	2000461c 	.word	0x2000461c
 8000cfc:	20003e1c 	.word	0x20003e1c

08000d00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2e:	4b29      	ldr	r3, [pc, #164]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a28      	ldr	r2, [pc, #160]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b26      	ldr	r3, [pc, #152]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a22      	ldr	r2, [pc, #136]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2120      	movs	r1, #32
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d7e:	f001 fc39 	bl	80025f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d9a:	f001 faa9 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d9e:	2320      	movs	r3, #32
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db8:	f001 fa9a 	bl	80022f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	2028      	movs	r0, #40	@ 0x28
 8000dc2:	f000 ff2f 	bl	8001c24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc6:	2028      	movs	r0, #40	@ 0x28
 8000dc8:	f000 ff46 	bl	8001c58 <HAL_NVIC_EnableIRQ>

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	@ 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000800 	.word	0x48000800

08000ddc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000de0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <MX_IWDG_Init+0x34>)
 8000de2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e14 <MX_IWDG_Init+0x38>)
 8000de4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <MX_IWDG_Init+0x34>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000dec:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <MX_IWDG_Init+0x34>)
 8000dee:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000df2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_IWDG_Init+0x34>)
 8000df6:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000dfa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_IWDG_Init+0x34>)
 8000dfe:	f001 fc4e 	bl	800269e <HAL_IWDG_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000e08:	f000 f9c6 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20004624 	.word	0x20004624
 8000e14:	40003000 	.word	0x40003000

08000e18 <timer_callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL) {
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00e      	beq.n	8000e48 <timer_callback+0x30>

		pub_msg.data += step;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <timer_callback+0x38>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <timer_callback+0x3c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a06      	ldr	r2, [pc, #24]	@ (8000e50 <timer_callback+0x38>)
 8000e36:	6013      	str	r3, [r2, #0]
		rcl_publish(&publisher, &pub_msg, NULL);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4905      	ldr	r1, [pc, #20]	@ (8000e50 <timer_callback+0x38>)
 8000e3c:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <timer_callback+0x40>)
 8000e3e:	f009 f8b9 	bl	8009fb4 <rcl_publish>
		HAL_IWDG_Refresh(&hiwdg);
 8000e42:	4806      	ldr	r0, [pc, #24]	@ (8000e5c <timer_callback+0x44>)
 8000e44:	f001 fc7a 	bl	800273c <HAL_IWDG_Refresh>

	}

}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20004714 	.word	0x20004714
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20004710 	.word	0x20004710
 8000e5c:	20004624 	.word	0x20004624

08000e60 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  // Cast received message to used type
  const std_msgs__msg__Int32 * sub_msg = (const std_msgs__msg__Int32 *)msgin;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	60fb      	str	r3, [r7, #12]
  step = sub_msg->data;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a03      	ldr	r2, [pc, #12]	@ (8000e80 <subscription_callback+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000000 	.word	0x20000000

08000e84 <service_callback>:

void service_callback(const void * request_msg, void * response_msg){
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  // Cast messages to expected types
  example_interfaces__srv__AddTwoInts_Request * req_in = (example_interfaces__srv__AddTwoInts_Request *) request_msg;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]
  example_interfaces__srv__AddTwoInts_Response * res_in = (example_interfaces__srv__AddTwoInts_Response *) response_msg;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	60bb      	str	r3, [r7, #8]


  res_in->sum = req_in->a + req_in->b;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ea2:	1884      	adds	r4, r0, r2
 8000ea4:	eb41 0503 	adc.w	r5, r1, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	e9c3 4500 	strd	r4, r5, [r3]
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000eae:	2120      	movs	r1, #32
 8000eb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb4:	f001 fbb6 	bl	8002624 <HAL_GPIO_TogglePin>
}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bdb0      	pop	{r4, r5, r7, pc}

08000ec0 <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b0b4      	sub	sp, #208	@ 0xd0
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8000eca:	4b59      	ldr	r3, [pc, #356]	@ (8001030 <StartDefaultTask+0x170>)
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	4b59      	ldr	r3, [pc, #356]	@ (8001034 <StartDefaultTask+0x174>)
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	4b59      	ldr	r3, [pc, #356]	@ (8001038 <StartDefaultTask+0x178>)
 8000ed4:	4a59      	ldr	r2, [pc, #356]	@ (800103c <StartDefaultTask+0x17c>)
 8000ed6:	495a      	ldr	r1, [pc, #360]	@ (8001040 <StartDefaultTask+0x180>)
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f00a f961 	bl	800b1a0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000ede:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f00a f878 	bl	800afd8 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8000ee8:	4b56      	ldr	r3, [pc, #344]	@ (8001044 <StartDefaultTask+0x184>)
 8000eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 8000eee:	4b56      	ldr	r3, [pc, #344]	@ (8001048 <StartDefaultTask+0x188>)
 8000ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 8000ef4:	4b55      	ldr	r3, [pc, #340]	@ (800104c <StartDefaultTask+0x18c>)
 8000ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000efa:	4b55      	ldr	r3, [pc, #340]	@ (8001050 <StartDefaultTask+0x190>)
 8000efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00a f875 	bl	800aff4 <rcutils_set_default_allocator>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <StartDefaultTask+0x5e>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8000f16:	2190      	movs	r1, #144	@ 0x90
 8000f18:	484e      	ldr	r0, [pc, #312]	@ (8001054 <StartDefaultTask+0x194>)
 8000f1a:	f015 faeb 	bl	80164f4 <iprintf>
  }

  // micro-ROS app

  allocator = rcl_get_default_allocator();
 8000f1e:	4c4e      	ldr	r4, [pc, #312]	@ (8001058 <StartDefaultTask+0x198>)
 8000f20:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00a f883 	bl	800b030 <rcutils_get_default_allocator>
 8000f2a:	4625      	mov	r5, r4
 8000f2c:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8000f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	602b      	str	r3, [r5, #0]

  //create init_options
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8000f38:	f008 fe6c 	bl	8009c14 <rcl_get_zero_initialized_init_options>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rcl_init_options_init(&init_options, allocator);
 8000f42:	4b45      	ldr	r3, [pc, #276]	@ (8001058 <StartDefaultTask+0x198>)
 8000f44:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8000f48:	466d      	mov	r5, sp
 8000f4a:	f103 020c 	add.w	r2, r3, #12
 8000f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f008 fe5d 	bl	8009c18 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, 69);
 8000f5e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000f62:	2145      	movs	r1, #69	@ 0x45
 8000f64:	4618      	mov	r0, r3
 8000f66:	f008 ff53 	bl	8009e10 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8000f6a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000f6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001058 <StartDefaultTask+0x198>)
 8000f70:	9200      	str	r2, [sp, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	4839      	ldr	r0, [pc, #228]	@ (800105c <StartDefaultTask+0x19c>)
 8000f78:	f009 feea 	bl	800ad50 <rclc_support_init_with_options>

  // create node
  rclc_node_init_default(&node, "cubemx_09_node", "", &support);
 8000f7c:	4b37      	ldr	r3, [pc, #220]	@ (800105c <StartDefaultTask+0x19c>)
 8000f7e:	4a38      	ldr	r2, [pc, #224]	@ (8001060 <StartDefaultTask+0x1a0>)
 8000f80:	4938      	ldr	r1, [pc, #224]	@ (8001064 <StartDefaultTask+0x1a4>)
 8000f82:	4839      	ldr	r0, [pc, #228]	@ (8001068 <StartDefaultTask+0x1a8>)
 8000f84:	f009 ff18 	bl	800adb8 <rclc_node_init_default>

  //create publisher
  // Get message type support
  const rosidl_message_type_support_t * type_support =
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32);
 8000f88:	f00b fd4c 	bl	800ca24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000f8c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

  // Creates a reliable rcl publisher
  rcl_ret_t rc = rclc_publisher_init_default(
 8000f90:	4b36      	ldr	r3, [pc, #216]	@ (800106c <StartDefaultTask+0x1ac>)
 8000f92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000f96:	4934      	ldr	r1, [pc, #208]	@ (8001068 <StartDefaultTask+0x1a8>)
 8000f98:	4835      	ldr	r0, [pc, #212]	@ (8001070 <StartDefaultTask+0x1b0>)
 8000f9a:	f009 ff49 	bl	800ae30 <rclc_publisher_init_default>
 8000f9e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
    &publisher, &node,
    type_support, "cubemx_publisher");

  // create message
  pub_msg.data = 0;
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <StartDefaultTask+0x1b4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

  // create timer
  rclc_timer_init_default(
 8000fa8:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <StartDefaultTask+0x1b8>)
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4a33      	ldr	r2, [pc, #204]	@ (800107c <StartDefaultTask+0x1bc>)
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	492a      	ldr	r1, [pc, #168]	@ (800105c <StartDefaultTask+0x19c>)
 8000fb4:	4832      	ldr	r0, [pc, #200]	@ (8001080 <StartDefaultTask+0x1c0>)
 8000fb6:	f009 ffd7 	bl	800af68 <rclc_timer_init_default>
		  RCL_MS_TO_NS(10),
		  timer_callback
		  );

  // create subscriber
  rclc_subscription_init_default(
 8000fba:	4b32      	ldr	r3, [pc, #200]	@ (8001084 <StartDefaultTask+0x1c4>)
 8000fbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000fc0:	4929      	ldr	r1, [pc, #164]	@ (8001068 <StartDefaultTask+0x1a8>)
 8000fc2:	4831      	ldr	r0, [pc, #196]	@ (8001088 <StartDefaultTask+0x1c8>)
 8000fc4:	f009 ff9c 	bl	800af00 <rclc_subscription_init_default>
    &subscriber, &node,
    type_support, "cubemx_sub");

  // create service server
  rclc_service_init_default(
 8000fc8:	f007 fb46 	bl	8008658 <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b2f      	ldr	r3, [pc, #188]	@ (800108c <StartDefaultTask+0x1cc>)
 8000fd0:	4925      	ldr	r1, [pc, #148]	@ (8001068 <StartDefaultTask+0x1a8>)
 8000fd2:	482f      	ldr	r0, [pc, #188]	@ (8001090 <StartDefaultTask+0x1d0>)
 8000fd4:	f009 ff60 	bl	800ae98 <rclc_service_init_default>
	&node,
	ROSIDL_GET_SRV_TYPE_SUPPORT(example_interfaces, srv, AddTwoInts),
	"cubemx_addtwoints");

  //executor
  executor = rclc_executor_get_zero_initialized_executor();
 8000fd8:	4c2e      	ldr	r4, [pc, #184]	@ (8001094 <StartDefaultTask+0x1d4>)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f009 fb77 	bl	800a6d0 <rclc_executor_get_zero_initialized_executor>
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2288      	movs	r2, #136	@ 0x88
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f015 fc38 	bl	801685e <memcpy>
  rclc_executor_init(&executor, &support.context, 3, &allocator);
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <StartDefaultTask+0x198>)
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	491a      	ldr	r1, [pc, #104]	@ (800105c <StartDefaultTask+0x19c>)
 8000ff4:	4827      	ldr	r0, [pc, #156]	@ (8001094 <StartDefaultTask+0x1d4>)
 8000ff6:	f009 fb77 	bl	800a6e8 <rclc_executor_init>

  rclc_executor_add_subscription(
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <StartDefaultTask+0x1d8>)
 8001000:	4a26      	ldr	r2, [pc, #152]	@ (800109c <StartDefaultTask+0x1dc>)
 8001002:	4921      	ldr	r1, [pc, #132]	@ (8001088 <StartDefaultTask+0x1c8>)
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <StartDefaultTask+0x1d4>)
 8001006:	f009 fbdf 	bl	800a7c8 <rclc_executor_add_subscription>
    &executor, &subscriber, &sub_msg,
    &subscription_callback, ON_NEW_DATA);
  rclc_executor_add_timer(&executor, &timer);
 800100a:	491d      	ldr	r1, [pc, #116]	@ (8001080 <StartDefaultTask+0x1c0>)
 800100c:	4821      	ldr	r0, [pc, #132]	@ (8001094 <StartDefaultTask+0x1d4>)
 800100e:	f009 fc0f 	bl	800a830 <rclc_executor_add_timer>
  rclc_executor_add_service(
 8001012:	4b23      	ldr	r3, [pc, #140]	@ (80010a0 <StartDefaultTask+0x1e0>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	4b23      	ldr	r3, [pc, #140]	@ (80010a4 <StartDefaultTask+0x1e4>)
 8001018:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <StartDefaultTask+0x1e8>)
 800101a:	491d      	ldr	r1, [pc, #116]	@ (8001090 <StartDefaultTask+0x1d0>)
 800101c:	481d      	ldr	r0, [pc, #116]	@ (8001094 <StartDefaultTask+0x1d4>)
 800101e:	f009 fc31 	bl	800a884 <rclc_executor_add_service>
    &executor, &service, &service_request,
    &service_response, service_callback);
  rclc_executor_spin(&executor);
 8001022:	481c      	ldr	r0, [pc, #112]	@ (8001094 <StartDefaultTask+0x1d4>)
 8001024:	f009 fe54 	bl	800acd0 <rclc_executor_spin>

  for(;;)
  {
    osDelay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f004 fe49 	bl	8005cc0 <osDelay>
 800102e:	e7fb      	b.n	8001028 <StartDefaultTask+0x168>
 8001030:	08000c59 	.word	0x08000c59
 8001034:	08000bf5 	.word	0x08000bf5
 8001038:	08000bd5 	.word	0x08000bd5
 800103c:	08000ba9 	.word	0x08000ba9
 8001040:	200047a4 	.word	0x200047a4
 8001044:	080011a5 	.word	0x080011a5
 8001048:	080011e9 	.word	0x080011e9
 800104c:	08001221 	.word	0x08001221
 8001050:	0800128d 	.word	0x0800128d
 8001054:	0801762c 	.word	0x0801762c
 8001058:	20004668 	.word	0x20004668
 800105c:	20004634 	.word	0x20004634
 8001060:	08017654 	.word	0x08017654
 8001064:	08017658 	.word	0x08017658
 8001068:	2000467c 	.word	0x2000467c
 800106c:	08017668 	.word	0x08017668
 8001070:	20004710 	.word	0x20004710
 8001074:	20004714 	.word	0x20004714
 8001078:	08000e19 	.word	0x08000e19
 800107c:	00989680 	.word	0x00989680
 8001080:	20004684 	.word	0x20004684
 8001084:	0801767c 	.word	0x0801767c
 8001088:	2000471c 	.word	0x2000471c
 800108c:	08017688 	.word	0x08017688
 8001090:	20004720 	.word	0x20004720
 8001094:	20004688 	.word	0x20004688
 8001098:	08000e61 	.word	0x08000e61
 800109c:	20004718 	.word	0x20004718
 80010a0:	08000e85 	.word	0x08000e85
 80010a4:	20004728 	.word	0x20004728
 80010a8:	20004738 	.word	0x20004738

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f000 fcc9 	bl	8001a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f810 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f7ff fe22 	bl	8000d00 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f7ff fd42 	bl	8000b44 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010c0:	f000 fb90 	bl	80017e4 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 80010c4:	f7ff fe8a 	bl	8000ddc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010c8:	f004 fd1e 	bl	8005b08 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010cc:	f7ff fad8 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010d0:	f004 fd3e 	bl	8005b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <main+0x28>

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2238      	movs	r2, #56	@ 0x38
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f015 faf0 	bl	80166cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f001 fb2e 	bl	800275c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001100:	230a      	movs	r3, #10
 8001102:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	2340      	movs	r3, #64	@ 0x40
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800110e:	2301      	movs	r3, #1
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001112:	2302      	movs	r3, #2
 8001114:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001116:	2302      	movs	r3, #2
 8001118:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800111a:	2304      	movs	r3, #4
 800111c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800111e:	2355      	movs	r3, #85	@ 0x55
 8001120:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800112a:	2302      	movs	r3, #2
 800112c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fbc6 	bl	80028c4 <HAL_RCC_OscConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800113e:	f000 f82b 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	230f      	movs	r3, #15
 8001144:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001146:	2303      	movs	r3, #3
 8001148:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fec4 	bl	8002ee8 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001166:	f000 f817 	bl	8001198 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3750      	adds	r7, #80	@ 0x50
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001186:	f000 fc77 	bl	8001a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40012c00 	.word	0x40012c00

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <Error_Handler+0x8>

080011a4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <microros_allocate+0x3c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <microros_allocate+0x3c>)
 80011bc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <microros_allocate+0x40>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <microros_allocate+0x40>)
 80011cc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fa68 	bl	80006a4 <pvPortMallocMicroROS>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20004748 	.word	0x20004748
 80011e4:	2000474c 	.word	0x2000474c

080011e8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00c      	beq.n	8001212 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fb77 	bl	80008ec <getBlockSize>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <microros_deallocate+0x34>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	461a      	mov	r2, r3
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <microros_deallocate+0x34>)
 800120a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fb11 	bl	8000834 <vPortFreeMicroROS>
  }
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000474c 	.word	0x2000474c

08001220 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <microros_reallocate+0x64>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	4413      	add	r3, r2
 8001236:	461a      	mov	r2, r3
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <microros_reallocate+0x64>)
 800123a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <microros_reallocate+0x68>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4413      	add	r3, r2
 8001246:	461a      	mov	r2, r3
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <microros_reallocate+0x68>)
 800124a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d104      	bne.n	800125c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001252:	68b8      	ldr	r0, [r7, #8]
 8001254:	f7ff fa26 	bl	80006a4 <pvPortMallocMicroROS>
 8001258:	4603      	mov	r3, r0
 800125a:	e00e      	b.n	800127a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff fb45 	bl	80008ec <getBlockSize>
 8001262:	4603      	mov	r3, r0
 8001264:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <microros_reallocate+0x68>)
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	461a      	mov	r2, r3
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <microros_reallocate+0x68>)
 800126e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f7ff fb58 	bl	8000928 <pvPortReallocMicroROS>
 8001278:	4603      	mov	r3, r0
  }
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20004748 	.word	0x20004748
 8001288:	2000474c 	.word	0x2000474c

0800128c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	4a0c      	ldr	r2, [pc, #48]	@ (80012d4 <microros_zero_allocate+0x48>)
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	4413      	add	r3, r2
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <microros_zero_allocate+0x48>)
 80012aa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <microros_zero_allocate+0x4c>)
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <microros_zero_allocate+0x4c>)
 80012be:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff fb5d 	bl	8000982 <pvPortCallocMicroROS>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20004748 	.word	0x20004748
 80012d8:	2000474c 	.word	0x2000474c
 80012dc:	00000000 	.word	0x00000000

080012e0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80012e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80012f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012f6:	a320      	add	r3, pc, #128	@ (adr r3, 8001378 <UTILS_NanosecondsToTimespec+0x98>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f7fe fff8 	bl	80002f0 <__aeabi_ldivmod>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800130a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800130e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001378 <UTILS_NanosecondsToTimespec+0x98>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	f7fe ffec 	bl	80002f0 <__aeabi_ldivmod>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	da20      	bge.n	8001366 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <UTILS_NanosecondsToTimespec+0x90>)
 800132a:	fb82 1203 	smull	r1, r2, r2, r3
 800132e:	1712      	asrs	r2, r2, #28
 8001330:	17db      	asrs	r3, r3, #31
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	6979      	ldr	r1, [r7, #20]
 8001340:	17c8      	asrs	r0, r1, #31
 8001342:	460c      	mov	r4, r1
 8001344:	4605      	mov	r5, r0
 8001346:	ebb2 0804 	subs.w	r8, r2, r4
 800134a:	eb63 0905 	sbc.w	r9, r3, r5
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4906      	ldr	r1, [pc, #24]	@ (8001374 <UTILS_NanosecondsToTimespec+0x94>)
 800135c:	fb01 f303 	mul.w	r3, r1, r3
 8001360:	441a      	add	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
    }
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001370:	44b82fa1 	.word	0x44b82fa1
 8001374:	3b9aca00 	.word	0x3b9aca00
 8001378:	3b9aca00 	.word	0x3b9aca00
 800137c:	00000000 	.word	0x00000000

08001380 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001384:	b08e      	sub	sp, #56	@ 0x38
 8001386:	af00      	add	r7, sp, #0
 8001388:	6278      	str	r0, [r7, #36]	@ 0x24
 800138a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800138c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001390:	2300      	movs	r3, #0
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80013a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 ff56 	bl	8007258 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80013ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ae:	17da      	asrs	r2, r3, #31
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	61fa      	str	r2, [r7, #28]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	69b9      	ldr	r1, [r7, #24]
 80013be:	000b      	movs	r3, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80013c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013c8:	2200      	movs	r2, #0
 80013ca:	461c      	mov	r4, r3
 80013cc:	4615      	mov	r5, r2
 80013ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013d2:	1911      	adds	r1, r2, r4
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	416b      	adcs	r3, r5
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013de:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80013e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	f04f 0400 	mov.w	r4, #0
 80013ee:	f04f 0500 	mov.w	r5, #0
 80013f2:	015d      	lsls	r5, r3, #5
 80013f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80013f8:	0154      	lsls	r4, r2, #5
 80013fa:	4622      	mov	r2, r4
 80013fc:	462b      	mov	r3, r5
 80013fe:	ebb2 0800 	subs.w	r8, r2, r0
 8001402:	eb63 0901 	sbc.w	r9, r3, r1
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001412:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001416:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800141a:	4690      	mov	r8, r2
 800141c:	4699      	mov	r9, r3
 800141e:	eb18 0a00 	adds.w	sl, r8, r0
 8001422:	eb49 0b01 	adc.w	fp, r9, r1
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001432:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001436:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800143a:	ebb2 040a 	subs.w	r4, r2, sl
 800143e:	603c      	str	r4, [r7, #0]
 8001440:	eb63 030b 	sbc.w	r3, r3, fp
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800144a:	4623      	mov	r3, r4
 800144c:	181b      	adds	r3, r3, r0
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	462b      	mov	r3, r5
 8001452:	eb41 0303 	adc.w	r3, r1, r3
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800145e:	f7ff ff3f 	bl	80012e0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001462:	2300      	movs	r3, #0
 8001464:	4618      	mov	r0, r3
 8001466:	3738      	adds	r7, #56	@ 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_MspInit+0x50>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_MspInit+0x50>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6613      	str	r3, [r2, #96]	@ 0x60
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <HAL_MspInit+0x50>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	@ (80014c0 <HAL_MspInit+0x50>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <HAL_MspInit+0x50>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	6593      	str	r3, [r2, #88]	@ 0x58
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_MspInit+0x50>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	210f      	movs	r1, #15
 80014aa:	f06f 0001 	mvn.w	r0, #1
 80014ae:	f000 fbb9 	bl	8001c24 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014b2:	f001 f9f7 	bl	80028a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	@ 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <HAL_InitTick+0xc4>)
 80014d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001588 <HAL_InitTick+0xc4>)
 80014da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014de:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HAL_InitTick+0xc4>)
 80014e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ec:	f107 020c 	add.w	r2, r7, #12
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 fecc 	bl	8003294 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014fc:	f001 feb4 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 8001500:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001504:	4a21      	ldr	r2, [pc, #132]	@ (800158c <HAL_InitTick+0xc8>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0c9b      	lsrs	r3, r3, #18
 800150c:	3b01      	subs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <HAL_InitTick+0xcc>)
 8001512:	4a20      	ldr	r2, [pc, #128]	@ (8001594 <HAL_InitTick+0xd0>)
 8001514:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001516:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <HAL_InitTick+0xcc>)
 8001518:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800151c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <HAL_InitTick+0xcc>)
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_InitTick+0xcc>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_InitTick+0xcc>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001530:	4817      	ldr	r0, [pc, #92]	@ (8001590 <HAL_InitTick+0xcc>)
 8001532:	f002 f975 	bl	8003820 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800153c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11b      	bne.n	800157c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001544:	4812      	ldr	r0, [pc, #72]	@ (8001590 <HAL_InitTick+0xcc>)
 8001546:	f002 f9cd 	bl	80038e4 <HAL_TIM_Base_Start_IT>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001550:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001558:	2019      	movs	r0, #25
 800155a:	f000 fb7d 	bl	8001c58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d808      	bhi.n	8001576 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	2019      	movs	r0, #25
 800156a:	f000 fb5b 	bl	8001c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <HAL_InitTick+0xd4>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e002      	b.n	800157c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800157c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001580:	4618      	mov	r0, r3
 8001582:	3730      	adds	r7, #48	@ 0x30
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	431bde83 	.word	0x431bde83
 8001590:	20004750 	.word	0x20004750
 8001594:	40012c00 	.word	0x40012c00
 8001598:	2000000c 	.word	0x2000000c

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <NMI_Handler+0x4>

080015a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <MemManage_Handler+0x4>

080015b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <DMA1_Channel1_IRQHandler+0x10>)
 80015da:	f000 fd2e 	bl	800203a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20004838 	.word	0x20004838

080015e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Channel2_IRQHandler+0x10>)
 80015ee:	f000 fd24 	bl	800203a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20004898 	.word	0x20004898

080015fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001602:	f002 f9e7 	bl	80039d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20004750 	.word	0x20004750

08001610 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001614:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001618:	f001 f81e 	bl	8002658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <LPUART1_IRQHandler+0x10>)
 8001626:	f002 fdf9 	bl	800421c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200047a4 	.word	0x200047a4

08001634 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_kill>:

int _kill(int pid, int sig)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800164e:	f015 f8d1 	bl	80167f4 <__errno>
 8001652:	4603      	mov	r3, r0
 8001654:	2216      	movs	r2, #22
 8001656:	601a      	str	r2, [r3, #0]
  return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_exit>:

void _exit (int status)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ffe7 	bl	8001644 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001676:	bf00      	nop
 8001678:	e7fd      	b.n	8001676 <_exit+0x12>

0800167a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168c:	f3af 8000 	nop.w
 8001690:	4601      	mov	r1, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf0      	blt.n	800168c <_read+0x12>
  }

  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e009      	b.n	80016da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1c5a      	adds	r2, r3, #1
 80016ca:	60ba      	str	r2, [r7, #8]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbf1      	blt.n	80016c6 <_write+0x12>
  }
  return len;
 80016e2:	687b      	ldr	r3, [r7, #4]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_close>:

int _close(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001714:	605a      	str	r2, [r3, #4]
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_isatty>:

int _isatty(int file)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f015 f836 	bl	80167f4 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	@ (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20020000 	.word	0x20020000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200047a0 	.word	0x200047a0
 80017bc:	2000b0c8 	.word	0x2000b0c8

080017c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80017e8:	4b21      	ldr	r3, [pc, #132]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 80017ea:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <MX_LPUART1_UART_Init+0x90>)
 80017ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80017ee:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 80017f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001802:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 8001822:	2200      	movs	r2, #0
 8001824:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001826:	4812      	ldr	r0, [pc, #72]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 8001828:	f002 fb46 	bl	8003eb8 <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001832:	f7ff fcb1 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001836:	2100      	movs	r1, #0
 8001838:	480d      	ldr	r0, [pc, #52]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 800183a:	f004 f856 	bl	80058ea <HAL_UARTEx_SetTxFifoThreshold>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001844:	f7ff fca8 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4809      	ldr	r0, [pc, #36]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 800184c:	f004 f88b 	bl	8005966 <HAL_UARTEx_SetRxFifoThreshold>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001856:	f7ff fc9f 	bl	8001198 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <MX_LPUART1_UART_Init+0x8c>)
 800185c:	f004 f80c 	bl	8005878 <HAL_UARTEx_DisableFifoMode>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001866:	f7ff fc97 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200047a4 	.word	0x200047a4
 8001874:	40008000 	.word	0x40008000

08001878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b09e      	sub	sp, #120	@ 0x78
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	2254      	movs	r2, #84	@ 0x54
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f014 ff17 	bl	80166cc <memset>
  if(uartHandle->Instance==LPUART1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a4e      	ldr	r2, [pc, #312]	@ (80019dc <HAL_UART_MspInit+0x164>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	f040 8094 	bne.w	80019d2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018aa:	2320      	movs	r3, #32
 80018ac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fd64 	bl	8003384 <HAL_RCCEx_PeriphCLKConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018c2:	f7ff fc69 	bl	8001198 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018c6:	4b46      	ldr	r3, [pc, #280]	@ (80019e0 <HAL_UART_MspInit+0x168>)
 80018c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ca:	4a45      	ldr	r2, [pc, #276]	@ (80019e0 <HAL_UART_MspInit+0x168>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80018d2:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <HAL_UART_MspInit+0x168>)
 80018d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <HAL_UART_MspInit+0x168>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	4a3f      	ldr	r2, [pc, #252]	@ (80019e0 <HAL_UART_MspInit+0x168>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <HAL_UART_MspInit+0x168>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80018f6:	230c      	movs	r3, #12
 80018f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001906:	230c      	movs	r3, #12
 8001908:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001914:	f000 fcec 	bl	80022f0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001918:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 800191a:	4a33      	ldr	r2, [pc, #204]	@ (80019e8 <HAL_UART_MspInit+0x170>)
 800191c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001920:	2223      	movs	r2, #35	@ 0x23
 8001922:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001924:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001926:	2210      	movs	r2, #16
 8001928:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192a:	4b2e      	ldr	r3, [pc, #184]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001930:	4b2c      	ldr	r3, [pc, #176]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001938:	2200      	movs	r2, #0
 800193a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800193c:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001942:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001948:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 800194a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800194e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001950:	4824      	ldr	r0, [pc, #144]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001952:	f000 f98f 	bl	8001c74 <HAL_DMA_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800195c:	f7ff fc1c 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a20      	ldr	r2, [pc, #128]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001964:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001966:	4a1f      	ldr	r2, [pc, #124]	@ (80019e4 <HAL_UART_MspInit+0x16c>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800196c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <HAL_UART_MspInit+0x174>)
 800196e:	4a20      	ldr	r2, [pc, #128]	@ (80019f0 <HAL_UART_MspInit+0x178>)
 8001970:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <HAL_UART_MspInit+0x174>)
 8001974:	2222      	movs	r2, #34	@ 0x22
 8001976:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001978:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <HAL_UART_MspInit+0x174>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_UART_MspInit+0x174>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_UART_MspInit+0x174>)
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800198a:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <HAL_UART_MspInit+0x174>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001990:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_UART_MspInit+0x174>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_UART_MspInit+0x174>)
 8001998:	2220      	movs	r2, #32
 800199a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <HAL_UART_MspInit+0x174>)
 800199e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80019a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80019a4:	4811      	ldr	r0, [pc, #68]	@ (80019ec <HAL_UART_MspInit+0x174>)
 80019a6:	f000 f965 	bl	8001c74 <HAL_DMA_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80019b0:	f7ff fbf2 	bl	8001198 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <HAL_UART_MspInit+0x174>)
 80019b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80019bc:	4a0b      	ldr	r2, [pc, #44]	@ (80019ec <HAL_UART_MspInit+0x174>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2105      	movs	r1, #5
 80019c6:	205b      	movs	r0, #91	@ 0x5b
 80019c8:	f000 f92c 	bl	8001c24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80019cc:	205b      	movs	r0, #91	@ 0x5b
 80019ce:	f000 f943 	bl	8001c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80019d2:	bf00      	nop
 80019d4:	3778      	adds	r7, #120	@ 0x78
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40008000 	.word	0x40008000
 80019e0:	40021000 	.word	0x40021000
 80019e4:	20004838 	.word	0x20004838
 80019e8:	40020008 	.word	0x40020008
 80019ec:	20004898 	.word	0x20004898
 80019f0:	4002001c 	.word	0x4002001c

080019f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f4:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f8:	f7ff fee2 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019fc:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80019fe:	490d      	ldr	r1, [pc, #52]	@ (8001a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a00:	4a0d      	ldr	r2, [pc, #52]	@ (8001a38 <LoopForever+0xe>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a14:	4c0a      	ldr	r4, [pc, #40]	@ (8001a40 <LoopForever+0x16>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a22:	f014 feed 	bl	8016800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a26:	f7ff fb41 	bl	80010ac <main>

08001a2a <LoopForever>:

LoopForever:
    b LoopForever
 8001a2a:	e7fe      	b.n	8001a2a <LoopForever>
  ldr   r0, =_estack
 8001a2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a34:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8001a38:	080188f8 	.word	0x080188f8
  ldr r2, =_sbss
 8001a3c:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8001a40:	2000b0c4 	.word	0x2000b0c4

08001a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_2_IRQHandler>

08001a46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f8dc 	bl	8001c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a56:	200f      	movs	r0, #15
 8001a58:	f7ff fd34 	bl	80014c4 <HAL_InitTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	e001      	b.n	8001a6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a68:	f7ff fd02 	bl	8001470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_IncTick+0x1c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_IncTick+0x20>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a03      	ldr	r2, [pc, #12]	@ (8001a94 <HAL_IncTick+0x1c>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	200048f8 	.word	0x200048f8
 8001a98:	20000010 	.word	0x20000010

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200048f8 	.word	0x200048f8

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	@ (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	@ (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	@ (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff4c 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c32:	f7ff ff63 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	6978      	ldr	r0, [r7, #20]
 8001c3e:	f7ff ffb3 	bl	8001ba8 <NVIC_EncodePriority>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff82 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ff56 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e08d      	b.n	8001da2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b47      	ldr	r3, [pc, #284]	@ (8001dac <HAL_DMA_Init+0x138>)
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d80f      	bhi.n	8001cb2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b45      	ldr	r3, [pc, #276]	@ (8001db0 <HAL_DMA_Init+0x13c>)
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a45      	ldr	r2, [pc, #276]	@ (8001db4 <HAL_DMA_Init+0x140>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	009a      	lsls	r2, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a42      	ldr	r2, [pc, #264]	@ (8001db8 <HAL_DMA_Init+0x144>)
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cb0:	e00e      	b.n	8001cd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <HAL_DMA_Init+0x148>)
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8001db4 <HAL_DMA_Init+0x140>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	009a      	lsls	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc0 <HAL_DMA_Init+0x14c>)
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fa82 	bl	800222c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d30:	d102      	bne.n	8001d38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d010      	beq.n	8001d78 <HAL_DMA_Init+0x104>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d80c      	bhi.n	8001d78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 faa2 	bl	80022a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	e008      	b.n	8001d8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40020407 	.word	0x40020407
 8001db0:	bffdfff8 	.word	0xbffdfff8
 8001db4:	cccccccd 	.word	0xcccccccd
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	bffdfbf8 	.word	0xbffdfbf8
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_DMA_Start_IT+0x20>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e066      	b.n	8001eb2 <HAL_DMA_Start_IT+0xee>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d155      	bne.n	8001ea4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f9c7 	bl	80021b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 020e 	orr.w	r2, r2, #14
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e00f      	b.n	8001e5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 020a 	orr.w	r2, r2, #10
 8001e5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e005      	b.n	8001eb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
 8001eae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d005      	beq.n	8001ede <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e037      	b.n	8001f4e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 020e 	bic.w	r2, r2, #14
 8001eec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001efc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0201 	bic.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f003 021f 	and.w	r2, r3, #31
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f2a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00c      	beq.n	8001f4e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f42:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f4c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d00d      	beq.n	8001fa0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2204      	movs	r2, #4
 8001f88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
 8001f9e:	e047      	b.n	8002030 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 020e 	bic.w	r2, r2, #14
 8001fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002004:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800200e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	4798      	blx	r3
    }
  }
  return status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2204      	movs	r2, #4
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d026      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x7a>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d021      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0204 	bic.w	r2, r2, #4
 800208c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	f003 021f 	and.w	r2, r3, #31
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	2104      	movs	r1, #4
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d071      	beq.n	800218e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80020b2:	e06c      	b.n	800218e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2202      	movs	r2, #2
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d02e      	beq.n	8002126 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d029      	beq.n	8002126 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 020a 	bic.w	r2, r2, #10
 80020ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	2102      	movs	r1, #2
 8002106:	fa01 f202 	lsl.w	r2, r1, r2
 800210a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d038      	beq.n	800218e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002124:	e033      	b.n	800218e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2208      	movs	r2, #8
 8002130:	409a      	lsls	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d02a      	beq.n	8002190 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d025      	beq.n	8002190 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 020e 	bic.w	r2, r2, #14
 8002152:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002182:	2b00      	cmp	r3, #0
 8002184:	d004      	beq.n	8002190 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800218e:	bf00      	nop
 8002190:	bf00      	nop
}
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f003 021f 	and.w	r2, r3, #31
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d108      	bne.n	8002210 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800220e:	e007      	b.n	8002220 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	60da      	str	r2, [r3, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800223c:	429a      	cmp	r2, r3
 800223e:	d802      	bhi.n	8002246 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002240:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e001      	b.n	800224a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002248:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3b08      	subs	r3, #8
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	009a      	lsls	r2, r3, #2
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a0b      	ldr	r2, [pc, #44]	@ (80022a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002276:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2201      	movs	r2, #1
 8002280:	409a      	lsls	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40020407 	.word	0x40020407
 8002298:	40020800 	.word	0x40020800
 800229c:	40020820 	.word	0x40020820
 80022a0:	cccccccd 	.word	0xcccccccd
 80022a4:	40020880 	.word	0x40020880

080022a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	461a      	mov	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a08      	ldr	r2, [pc, #32]	@ (80022ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022ca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	1000823f 	.word	0x1000823f
 80022ec:	40020940 	.word	0x40020940

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022fe:	e15a      	b.n	80025b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 814c 	beq.w	80025b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b01      	cmp	r3, #1
 8002322:	d005      	beq.n	8002330 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800232c:	2b02      	cmp	r3, #2
 800232e:	d130      	bne.n	8002392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002366:	2201      	movs	r2, #1
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f003 0201 	and.w	r2, r3, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b03      	cmp	r3, #3
 800239c:	d017      	beq.n	80023ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d123      	bne.n	8002422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	220f      	movs	r2, #15
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43db      	mvns	r3, r3
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	08da      	lsrs	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3208      	adds	r2, #8
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2203      	movs	r2, #3
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0203 	and.w	r2, r3, #3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80a6 	beq.w	80025b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002464:	4b5b      	ldr	r3, [pc, #364]	@ (80025d4 <HAL_GPIO_Init+0x2e4>)
 8002466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002468:	4a5a      	ldr	r2, [pc, #360]	@ (80025d4 <HAL_GPIO_Init+0x2e4>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002470:	4b58      	ldr	r3, [pc, #352]	@ (80025d4 <HAL_GPIO_Init+0x2e4>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247c:	4a56      	ldr	r2, [pc, #344]	@ (80025d8 <HAL_GPIO_Init+0x2e8>)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024a6:	d01f      	beq.n	80024e8 <HAL_GPIO_Init+0x1f8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a4c      	ldr	r2, [pc, #304]	@ (80025dc <HAL_GPIO_Init+0x2ec>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d019      	beq.n	80024e4 <HAL_GPIO_Init+0x1f4>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a4b      	ldr	r2, [pc, #300]	@ (80025e0 <HAL_GPIO_Init+0x2f0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_GPIO_Init+0x1f0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a4a      	ldr	r2, [pc, #296]	@ (80025e4 <HAL_GPIO_Init+0x2f4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00d      	beq.n	80024dc <HAL_GPIO_Init+0x1ec>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a49      	ldr	r2, [pc, #292]	@ (80025e8 <HAL_GPIO_Init+0x2f8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <HAL_GPIO_Init+0x1e8>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a48      	ldr	r2, [pc, #288]	@ (80025ec <HAL_GPIO_Init+0x2fc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <HAL_GPIO_Init+0x1e4>
 80024d0:	2305      	movs	r3, #5
 80024d2:	e00a      	b.n	80024ea <HAL_GPIO_Init+0x1fa>
 80024d4:	2306      	movs	r3, #6
 80024d6:	e008      	b.n	80024ea <HAL_GPIO_Init+0x1fa>
 80024d8:	2304      	movs	r3, #4
 80024da:	e006      	b.n	80024ea <HAL_GPIO_Init+0x1fa>
 80024dc:	2303      	movs	r3, #3
 80024de:	e004      	b.n	80024ea <HAL_GPIO_Init+0x1fa>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e002      	b.n	80024ea <HAL_GPIO_Init+0x1fa>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_GPIO_Init+0x1fa>
 80024e8:	2300      	movs	r3, #0
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	f002 0203 	and.w	r2, r2, #3
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	4093      	lsls	r3, r2
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fa:	4937      	ldr	r1, [pc, #220]	@ (80025d8 <HAL_GPIO_Init+0x2e8>)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002508:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800252c:	4a30      	ldr	r2, [pc, #192]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002532:	4b2f      	ldr	r3, [pc, #188]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002556:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002580:	4a1b      	ldr	r2, [pc, #108]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002586:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025aa:	4a11      	ldr	r2, [pc, #68]	@ (80025f0 <HAL_GPIO_Init+0x300>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3301      	adds	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f ae9d 	bne.w	8002300 <HAL_GPIO_Init+0x10>
  }
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40010000 	.word	0x40010000
 80025dc:	48000400 	.word	0x48000400
 80025e0:	48000800 	.word	0x48000800
 80025e4:	48000c00 	.word	0x48000c00
 80025e8:	48001000 	.word	0x48001000
 80025ec:	48001400 	.word	0x48001400
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
 8002600:	4613      	mov	r3, r2
 8002602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002604:	787b      	ldrb	r3, [r7, #1]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800260a:	887a      	ldrh	r2, [r7, #2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002610:	e002      	b.n	8002618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43d9      	mvns	r1, r3
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	400b      	ands	r3, r1
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002662:	4b08      	ldr	r3, [pc, #32]	@ (8002684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800266e:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f806 	bl	8002688 <HAL_GPIO_EXTI_Callback>
  }
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010400 	.word	0x40010400

08002688 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e041      	b.n	8002734 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80026b8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f245 5255 	movw	r2, #21845	@ 0x5555
 80026c2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6852      	ldr	r2, [r2, #4]
 80026cc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80026d8:	f7ff f9e0 	bl	8001a9c <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80026de:	e00f      	b.n	8002700 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80026e0:	f7ff f9dc 	bl	8001a9c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b31      	cmp	r3, #49	@ 0x31
 80026ec:	d908      	bls.n	8002700 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e019      	b.n	8002734 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1e8      	bne.n	80026e0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d005      	beq.n	8002728 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68d2      	ldr	r2, [r2, #12]
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	e004      	b.n	8002732 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800274c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d141      	bne.n	80027ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800276a:	4b4b      	ldr	r3, [pc, #300]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002776:	d131      	bne.n	80027dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002778:	4b47      	ldr	r3, [pc, #284]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800277e:	4a46      	ldr	r2, [pc, #280]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002788:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002790:	4a41      	ldr	r2, [pc, #260]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002796:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002798:	4b40      	ldr	r3, [pc, #256]	@ (800289c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2232      	movs	r2, #50	@ 0x32
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	4a3f      	ldr	r2, [pc, #252]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	0c9b      	lsrs	r3, r3, #18
 80027aa:	3301      	adds	r3, #1
 80027ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ae:	e002      	b.n	80027b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027b6:	4b38      	ldr	r3, [pc, #224]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027c2:	d102      	bne.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f2      	bne.n	80027b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ca:	4b33      	ldr	r3, [pc, #204]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d6:	d158      	bne.n	800288a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e057      	b.n	800288c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80027ec:	e04d      	b.n	800288a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f4:	d141      	bne.n	800287a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027f6:	4b28      	ldr	r3, [pc, #160]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002802:	d131      	bne.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002804:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800280a:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002810:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002814:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800281c:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002822:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002824:	4b1d      	ldr	r3, [pc, #116]	@ (800289c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2232      	movs	r2, #50	@ 0x32
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	0c9b      	lsrs	r3, r3, #18
 8002836:	3301      	adds	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800283a:	e002      	b.n	8002842 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b01      	subs	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284e:	d102      	bne.n	8002856 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f2      	bne.n	800283c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002862:	d112      	bne.n	800288a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e011      	b.n	800288c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002878:	e007      	b.n	800288a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002888:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	40007000 	.word	0x40007000
 800289c:	20000008 	.word	0x20000008
 80028a0:	431bde83 	.word	0x431bde83

080028a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b2:	6093      	str	r3, [r2, #8]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000

080028c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e2fe      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d075      	beq.n	80029ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e2:	4b97      	ldr	r3, [pc, #604]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ec:	4b94      	ldr	r3, [pc, #592]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d102      	bne.n	8002902 <HAL_RCC_OscConfig+0x3e>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d002      	beq.n	8002908 <HAL_RCC_OscConfig+0x44>
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d10b      	bne.n	8002920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002908:	4b8d      	ldr	r3, [pc, #564]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d05b      	beq.n	80029cc <HAL_RCC_OscConfig+0x108>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d157      	bne.n	80029cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e2d9      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002928:	d106      	bne.n	8002938 <HAL_RCC_OscConfig+0x74>
 800292a:	4b85      	ldr	r3, [pc, #532]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a84      	ldr	r2, [pc, #528]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e01d      	b.n	8002974 <HAL_RCC_OscConfig+0xb0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x98>
 8002942:	4b7f      	ldr	r3, [pc, #508]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7e      	ldr	r2, [pc, #504]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7b      	ldr	r2, [pc, #492]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0xb0>
 800295c:	4b78      	ldr	r3, [pc, #480]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a77      	ldr	r2, [pc, #476]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b75      	ldr	r3, [pc, #468]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a74      	ldr	r2, [pc, #464]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 800296e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d013      	beq.n	80029a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7ff f88e 	bl	8001a9c <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002984:	f7ff f88a 	bl	8001a9c <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	@ 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e29e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002996:	4b6a      	ldr	r3, [pc, #424]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0xc0>
 80029a2:	e014      	b.n	80029ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff f87a 	bl	8001a9c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff f876 	bl	8001a9c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	@ 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e28a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029be:	4b60      	ldr	r3, [pc, #384]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0xe8>
 80029ca:	e000      	b.n	80029ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d075      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029da:	4b59      	ldr	r3, [pc, #356]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e4:	4b56      	ldr	r3, [pc, #344]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_OscConfig+0x136>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_OscConfig+0x13c>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d11f      	bne.n	8002a40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a00:	4b4f      	ldr	r3, [pc, #316]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x154>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e25d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b49      	ldr	r3, [pc, #292]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	4946      	ldr	r1, [pc, #280]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a2c:	4b45      	ldr	r3, [pc, #276]	@ (8002b44 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe fd47 	bl	80014c4 <HAL_InitTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d043      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e249      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d023      	beq.n	8002a90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a48:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7ff f822 	bl	8001a9c <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5c:	f7ff f81e 	bl	8001a9c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e232      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6e:	4b34      	ldr	r3, [pc, #208]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	492d      	ldr	r1, [pc, #180]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
 8002a8e:	e01a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a90:	4b2b      	ldr	r3, [pc, #172]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2a      	ldr	r2, [pc, #168]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002a96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fffe 	bl	8001a9c <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7fe fffa 	bl	8001a9c <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e20e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab6:	4b22      	ldr	r3, [pc, #136]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x1e0>
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d041      	beq.n	8002b56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01c      	beq.n	8002b14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae0:	4a17      	ldr	r2, [pc, #92]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aea:	f7fe ffd7 	bl	8001a9c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af2:	f7fe ffd3 	bl	8001a9c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e1e7      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b04:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ef      	beq.n	8002af2 <HAL_RCC_OscConfig+0x22e>
 8002b12:	e020      	b.n	8002b56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b14:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1a:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <HAL_RCC_OscConfig+0x27c>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe ffba 	bl	8001a9c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b2a:	e00d      	b.n	8002b48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fe ffb6 	bl	8001a9c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d906      	bls.n	8002b48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1ca      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b48:	4b8c      	ldr	r3, [pc, #560]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ea      	bne.n	8002b2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a6 	beq.w	8002cb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b64:	2300      	movs	r3, #0
 8002b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b68:	4b84      	ldr	r3, [pc, #528]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x2b4>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x2b6>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	4a7e      	ldr	r2, [pc, #504]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b96:	2301      	movs	r3, #1
 8002b98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	4b79      	ldr	r3, [pc, #484]	@ (8002d80 <HAL_RCC_OscConfig+0x4bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d118      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba6:	4b76      	ldr	r3, [pc, #472]	@ (8002d80 <HAL_RCC_OscConfig+0x4bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a75      	ldr	r2, [pc, #468]	@ (8002d80 <HAL_RCC_OscConfig+0x4bc>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb2:	f7fe ff73 	bl	8001a9c <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7fe ff6f 	bl	8001a9c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e183      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8002d80 <HAL_RCC_OscConfig+0x4bc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d108      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x32e>
 8002be0:	4b66      	ldr	r3, [pc, #408]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be6:	4a65      	ldr	r2, [pc, #404]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bf0:	e024      	b.n	8002c3c <HAL_RCC_OscConfig+0x378>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d110      	bne.n	8002c1c <HAL_RCC_OscConfig+0x358>
 8002bfa:	4b60      	ldr	r3, [pc, #384]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c00:	4a5e      	ldr	r2, [pc, #376]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c10:	4a5a      	ldr	r2, [pc, #360]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c1a:	e00f      	b.n	8002c3c <HAL_RCC_OscConfig+0x378>
 8002c1c:	4b57      	ldr	r3, [pc, #348]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	4a56      	ldr	r2, [pc, #344]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c2c:	4b53      	ldr	r3, [pc, #332]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a52      	ldr	r2, [pc, #328]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d016      	beq.n	8002c72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7fe ff2a 	bl	8001a9c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe ff26 	bl	8001a9c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e138      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c62:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ed      	beq.n	8002c4c <HAL_RCC_OscConfig+0x388>
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe ff13 	bl	8001a9c <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe ff0f 	bl	8001a9c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e121      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c90:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ed      	bne.n	8002c7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca4:	4b35      	ldr	r3, [pc, #212]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	4a34      	ldr	r2, [pc, #208]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d03c      	beq.n	8002d36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cca:	4a2c      	ldr	r2, [pc, #176]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe fee2 	bl	8001a9c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cdc:	f7fe fede 	bl	8001a9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0f2      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cee:	4b23      	ldr	r3, [pc, #140]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ef      	beq.n	8002cdc <HAL_RCC_OscConfig+0x418>
 8002cfc:	e01b      	b.n	8002d36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d04:	4a1d      	ldr	r2, [pc, #116]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0e:	f7fe fec5 	bl	8001a9c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d16:	f7fe fec1 	bl	8001a9c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0d5      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1ef      	bne.n	8002d16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80c9 	beq.w	8002ed2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	f000 8083 	beq.w	8002e54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d15e      	bne.n	8002e14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	@ (8002d7c <HAL_RCC_OscConfig+0x4b8>)
 8002d5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fe9b 	bl	8001a9c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d68:	e00c      	b.n	8002d84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe fe97 	bl	8001a9c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d905      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0ab      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d84:	4b55      	ldr	r3, [pc, #340]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ec      	bne.n	8002d6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d90:	4b52      	ldr	r3, [pc, #328]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4b52      	ldr	r3, [pc, #328]	@ (8002ee0 <HAL_RCC_OscConfig+0x61c>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6a11      	ldr	r1, [r2, #32]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002da0:	3a01      	subs	r2, #1
 8002da2:	0112      	lsls	r2, r2, #4
 8002da4:	4311      	orrs	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002daa:	0212      	lsls	r2, r2, #8
 8002dac:	4311      	orrs	r1, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002db2:	0852      	lsrs	r2, r2, #1
 8002db4:	3a01      	subs	r2, #1
 8002db6:	0552      	lsls	r2, r2, #21
 8002db8:	4311      	orrs	r1, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002dbe:	0852      	lsrs	r2, r2, #1
 8002dc0:	3a01      	subs	r2, #1
 8002dc2:	0652      	lsls	r2, r2, #25
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dca:	06d2      	lsls	r2, r2, #27
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	4943      	ldr	r1, [pc, #268]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd4:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a40      	ldr	r2, [pc, #256]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002de0:	4b3e      	ldr	r3, [pc, #248]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a3d      	ldr	r2, [pc, #244]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe fe56 	bl	8001a9c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe fe52 	bl	8001a9c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e066      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	4b35      	ldr	r3, [pc, #212]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x530>
 8002e12:	e05e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e14:	4b31      	ldr	r3, [pc, #196]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a30      	ldr	r2, [pc, #192]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fe3c 	bl	8001a9c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fe38 	bl	8001a9c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e04c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3a:	4b28      	ldr	r3, [pc, #160]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e46:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	4924      	ldr	r1, [pc, #144]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002e4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ee4 <HAL_RCC_OscConfig+0x620>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
 8002e52:	e03e      	b.n	8002ed2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e039      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e60:	4b1e      	ldr	r3, [pc, #120]	@ (8002edc <HAL_RCC_OscConfig+0x618>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d12c      	bne.n	8002ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d123      	bne.n	8002ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d11b      	bne.n	8002ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d113      	bne.n	8002ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	085b      	lsrs	r3, r3, #1
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3720      	adds	r7, #32
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	019f800c 	.word	0x019f800c
 8002ee4:	feeefffc 	.word	0xfeeefffc

08002ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e11e      	b.n	800313e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f00:	4b91      	ldr	r3, [pc, #580]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d910      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b8e      	ldr	r3, [pc, #568]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	498c      	ldr	r1, [pc, #560]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e106      	b.n	800313e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d073      	beq.n	8003024 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	d129      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f44:	4b81      	ldr	r3, [pc, #516]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0f4      	b.n	800313e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f54:	f000 f9d0 	bl	80032f8 <RCC_GetSysClockFreqFromPLLSource>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003150 <HAL_RCC_ClockConfig+0x268>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d93f      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f62:	4b7a      	ldr	r3, [pc, #488]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d033      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d12f      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f82:	4b72      	ldr	r3, [pc, #456]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f8a:	4a70      	ldr	r2, [pc, #448]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e024      	b.n	8002fe2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0c6      	b.n	800313e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb0:	4b66      	ldr	r3, [pc, #408]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0be      	b.n	800313e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fc0:	f000 f8ce 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4a61      	ldr	r2, [pc, #388]	@ (8003150 <HAL_RCC_ClockConfig+0x268>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d909      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fce:	4b5f      	ldr	r3, [pc, #380]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fd6:	4a5d      	ldr	r2, [pc, #372]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 0203 	bic.w	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4957      	ldr	r1, [pc, #348]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fe fd52 	bl	8001a9c <HAL_GetTick>
 8002ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffc:	f7fe fd4e 	bl	8001a9c <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e095      	b.n	800313e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	4b4e      	ldr	r3, [pc, #312]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 020c 	and.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	429a      	cmp	r2, r3
 8003022:	d1eb      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d023      	beq.n	8003078 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b43      	ldr	r3, [pc, #268]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a42      	ldr	r2, [pc, #264]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003042:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003046:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003054:	4b3d      	ldr	r3, [pc, #244]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800305c:	4a3b      	ldr	r2, [pc, #236]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 800305e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003062:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	4b39      	ldr	r3, [pc, #228]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4936      	ldr	r1, [pc, #216]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
 8003076:	e008      	b.n	800308a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b80      	cmp	r3, #128	@ 0x80
 800307c:	d105      	bne.n	800308a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800307e:	4b33      	ldr	r3, [pc, #204]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4a32      	ldr	r2, [pc, #200]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003084:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003088:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800308a:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d21d      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003098:	4b2b      	ldr	r3, [pc, #172]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 020f 	bic.w	r2, r3, #15
 80030a0:	4929      	ldr	r1, [pc, #164]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fcf8 	bl	8001a9c <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe fcf4 	bl	8001a9c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e03b      	b.n	800313e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_RCC_ClockConfig+0x260>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1ed      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b1a      	ldr	r3, [pc, #104]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4917      	ldr	r1, [pc, #92]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b13      	ldr	r3, [pc, #76]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	490f      	ldr	r1, [pc, #60]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003112:	f000 f825 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8003116:	4602      	mov	r2, r0
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <HAL_RCC_ClockConfig+0x264>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	490c      	ldr	r1, [pc, #48]	@ (8003154 <HAL_RCC_ClockConfig+0x26c>)
 8003124:	5ccb      	ldrb	r3, [r1, r3]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a0a      	ldr	r2, [pc, #40]	@ (8003158 <HAL_RCC_ClockConfig+0x270>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003132:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <HAL_RCC_ClockConfig+0x274>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f9c4 	bl	80014c4 <HAL_InitTick>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	04c4b400 	.word	0x04c4b400
 8003154:	080176f4 	.word	0x080176f4
 8003158:	20000008 	.word	0x20000008
 800315c:	2000000c 	.word	0x2000000c

08003160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003166:	4b2c      	ldr	r3, [pc, #176]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d102      	bne.n	8003178 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003172:	4b2a      	ldr	r3, [pc, #168]	@ (800321c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	e047      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003178:	4b27      	ldr	r3, [pc, #156]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b08      	cmp	r3, #8
 8003182:	d102      	bne.n	800318a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003184:	4b26      	ldr	r3, [pc, #152]	@ (8003220 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	e03e      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800318a:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d136      	bne.n	8003204 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003196:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3301      	adds	r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031bc:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031be:	68d2      	ldr	r2, [r2, #12]
 80031c0:	0a12      	lsrs	r2, r2, #8
 80031c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	617b      	str	r3, [r7, #20]
      break;
 80031cc:	e00c      	b.n	80031e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ce:	4a13      	ldr	r2, [pc, #76]	@ (800321c <HAL_RCC_GetSysClockFreq+0xbc>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	4a10      	ldr	r2, [pc, #64]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d8:	68d2      	ldr	r2, [r2, #12]
 80031da:	0a12      	lsrs	r2, r2, #8
 80031dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
      break;
 80031e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0e5b      	lsrs	r3, r3, #25
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	3301      	adds	r3, #1
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	e001      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003208:	693b      	ldr	r3, [r7, #16]
}
 800320a:	4618      	mov	r0, r3
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	00f42400 	.word	0x00f42400
 8003220:	016e3600 	.word	0x016e3600

08003224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003228:	4b03      	ldr	r3, [pc, #12]	@ (8003238 <HAL_RCC_GetHCLKFreq+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000008 	.word	0x20000008

0800323c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003240:	f7ff fff0 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4904      	ldr	r1, [pc, #16]	@ (8003264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08017704 	.word	0x08017704

08003268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800326c:	f7ff ffda 	bl	8003224 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0adb      	lsrs	r3, r3, #11
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4904      	ldr	r1, [pc, #16]	@ (8003290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000
 8003290:	08017704 	.word	0x08017704

08003294 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	220f      	movs	r2, #15
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80032a4:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0203 	and.w	r2, r3, #3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80032b0:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80032c8:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <HAL_RCC_GetClockConfig+0x5c>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	08db      	lsrs	r3, r3, #3
 80032ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80032d6:	4b07      	ldr	r3, [pc, #28]	@ (80032f4 <HAL_RCC_GetClockConfig+0x60>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 020f 	and.w	r2, r3, #15
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	601a      	str	r2, [r3, #0]
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40022000 	.word	0x40022000

080032f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003308:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	3301      	adds	r3, #1
 8003314:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b03      	cmp	r3, #3
 800331a:	d10c      	bne.n	8003336 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800331c:	4a17      	ldr	r2, [pc, #92]	@ (800337c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003326:	68d2      	ldr	r2, [r2, #12]
 8003328:	0a12      	lsrs	r2, r2, #8
 800332a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	617b      	str	r3, [r7, #20]
    break;
 8003334:	e00c      	b.n	8003350 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003336:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	4a0e      	ldr	r2, [pc, #56]	@ (8003378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003340:	68d2      	ldr	r2, [r2, #12]
 8003342:	0a12      	lsrs	r2, r2, #8
 8003344:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	617b      	str	r3, [r7, #20]
    break;
 800334e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0e5b      	lsrs	r3, r3, #25
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	3301      	adds	r3, #1
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800336a:	687b      	ldr	r3, [r7, #4]
}
 800336c:	4618      	mov	r0, r3
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40021000 	.word	0x40021000
 800337c:	016e3600 	.word	0x016e3600
 8003380:	00f42400 	.word	0x00f42400

08003384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800338c:	2300      	movs	r3, #0
 800338e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003390:	2300      	movs	r3, #0
 8003392:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8098 	beq.w	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a6:	4b43      	ldr	r3, [pc, #268]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b40      	ldr	r3, [pc, #256]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	4a3f      	ldr	r2, [pc, #252]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033be:	4b3d      	ldr	r3, [pc, #244]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ce:	4b3a      	ldr	r3, [pc, #232]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a39      	ldr	r2, [pc, #228]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033da:	f7fe fb5f 	bl	8001a9c <HAL_GetTick>
 80033de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e0:	e009      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fe fb5b 	bl	8001a9c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d902      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	74fb      	strb	r3, [r7, #19]
        break;
 80033f4:	e005      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f6:	4b30      	ldr	r3, [pc, #192]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ef      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d159      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003408:	4b2a      	ldr	r3, [pc, #168]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003412:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01e      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	d019      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003424:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003430:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	4a1f      	ldr	r2, [pc, #124]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003440:	4b1c      	ldr	r3, [pc, #112]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	4a1b      	ldr	r2, [pc, #108]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003450:	4a18      	ldr	r2, [pc, #96]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe fb1b 	bl	8001a9c <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003468:	e00b      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346a:	f7fe fb17 	bl	8001a9c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003478:	4293      	cmp	r3, r2
 800347a:	d902      	bls.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	74fb      	strb	r3, [r7, #19]
            break;
 8003480:	e006      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003482:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ec      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003496:	4b07      	ldr	r3, [pc, #28]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a4:	4903      	ldr	r1, [pc, #12]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034ac:	e008      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	74bb      	strb	r3, [r7, #18]
 80034b2:	e005      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c0:	7c7b      	ldrb	r3, [r7, #17]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c6:	4ba7      	ldr	r3, [pc, #668]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	4aa6      	ldr	r2, [pc, #664]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034de:	4ba1      	ldr	r3, [pc, #644]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f023 0203 	bic.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	499d      	ldr	r1, [pc, #628]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003500:	4b98      	ldr	r3, [pc, #608]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f023 020c 	bic.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4995      	ldr	r1, [pc, #596]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003522:	4b90      	ldr	r3, [pc, #576]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	498c      	ldr	r1, [pc, #560]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003544:	4b87      	ldr	r3, [pc, #540]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	4984      	ldr	r1, [pc, #528]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003566:	4b7f      	ldr	r3, [pc, #508]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	497b      	ldr	r1, [pc, #492]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003588:	4b76      	ldr	r3, [pc, #472]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	4973      	ldr	r1, [pc, #460]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035aa:	4b6e      	ldr	r3, [pc, #440]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	496a      	ldr	r1, [pc, #424]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035cc:	4b65      	ldr	r3, [pc, #404]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	4962      	ldr	r1, [pc, #392]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	4959      	ldr	r1, [pc, #356]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003610:	4b54      	ldr	r3, [pc, #336]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003612:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361e:	4951      	ldr	r1, [pc, #324]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003632:	4b4c      	ldr	r3, [pc, #304]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	4948      	ldr	r1, [pc, #288]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003654:	4b43      	ldr	r3, [pc, #268]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	4940      	ldr	r1, [pc, #256]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003672:	d105      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003674:	4b3b      	ldr	r3, [pc, #236]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a3a      	ldr	r2, [pc, #232]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003688:	2b00      	cmp	r3, #0
 800368a:	d015      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800368c:	4b35      	ldr	r3, [pc, #212]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003692:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369a:	4932      	ldr	r1, [pc, #200]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036aa:	d105      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036c4:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d2:	4924      	ldr	r1, [pc, #144]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036e2:	d105      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036fc:	4b19      	ldr	r3, [pc, #100]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003702:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	4916      	ldr	r1, [pc, #88]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800371a:	d105      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4a10      	ldr	r2, [pc, #64]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003726:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d019      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	4908      	ldr	r1, [pc, #32]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003752:	d109      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a02      	ldr	r2, [pc, #8]	@ (8003764 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800375e:	60d3      	str	r3, [r2, #12]
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003774:	4b29      	ldr	r3, [pc, #164]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	4926      	ldr	r1, [pc, #152]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003792:	d105      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003794:	4b21      	ldr	r3, [pc, #132]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a20      	ldr	r2, [pc, #128]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800379a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800379e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ba:	4918      	ldr	r1, [pc, #96]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ca:	d105      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037cc:	4b13      	ldr	r3, [pc, #76]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4a12      	ldr	r2, [pc, #72]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037e4:	4b0d      	ldr	r3, [pc, #52]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f2:	490a      	ldr	r1, [pc, #40]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003802:	d105      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4a04      	ldr	r2, [pc, #16]	@ (800381c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800380a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800380e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003810:	7cbb      	ldrb	r3, [r7, #18]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e049      	b.n	80038c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f841 	bl	80038ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 fa30 	bl	8003cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e054      	b.n	80039a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a26      	ldr	r2, [pc, #152]	@ (80039b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d022      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003926:	d01d      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a22      	ldr	r2, [pc, #136]	@ (80039b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d018      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a21      	ldr	r2, [pc, #132]	@ (80039bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1f      	ldr	r2, [pc, #124]	@ (80039c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00e      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1e      	ldr	r2, [pc, #120]	@ (80039c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1c      	ldr	r2, [pc, #112]	@ (80039c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1b      	ldr	r2, [pc, #108]	@ (80039cc <HAL_TIM_Base_Start_IT+0xe8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d115      	bne.n	8003990 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <HAL_TIM_Base_Start_IT+0xec>)
 800396c:	4013      	ands	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b06      	cmp	r3, #6
 8003974:	d015      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0xbe>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800397c:	d011      	beq.n	80039a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	e008      	b.n	80039a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e000      	b.n	80039a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40015000 	.word	0x40015000
 80039d0:	00010007 	.word	0x00010007

080039d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d020      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0202 	mvn.w	r2, #2
 8003a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f931 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f923 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f934 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d020      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01b      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0204 	mvn.w	r2, #4
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f90b 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f8fd 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f90e 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01b      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0208 	mvn.w	r2, #8
 8003aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8e5 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 8003abc:	e005      	b.n	8003aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8d7 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8e8 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2208      	movs	r2, #8
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8bf 	bl	8003c86 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8b1 	bl	8003c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8c2 	bl	8003c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0201 	mvn.w	r2, #1
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fb1a 	bl	8001174 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d104      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00c      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f969 	bl	8003e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00c      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f961 	bl	8003e54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00c      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f87c 	bl	8003cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f06f 0220 	mvn.w	r2, #32
 8003bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f929 	bl	8003e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f935 	bl	8003e68 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f92d 	bl	8003e7c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f925 	bl	8003e90 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00c      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f91d 	bl	8003ea4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a4c      	ldr	r2, [pc, #304]	@ (8003e08 <TIM_Base_SetConfig+0x144>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d017      	beq.n	8003d0c <TIM_Base_SetConfig+0x48>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ce2:	d013      	beq.n	8003d0c <TIM_Base_SetConfig+0x48>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a49      	ldr	r2, [pc, #292]	@ (8003e0c <TIM_Base_SetConfig+0x148>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00f      	beq.n	8003d0c <TIM_Base_SetConfig+0x48>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a48      	ldr	r2, [pc, #288]	@ (8003e10 <TIM_Base_SetConfig+0x14c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00b      	beq.n	8003d0c <TIM_Base_SetConfig+0x48>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a47      	ldr	r2, [pc, #284]	@ (8003e14 <TIM_Base_SetConfig+0x150>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <TIM_Base_SetConfig+0x48>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a46      	ldr	r2, [pc, #280]	@ (8003e18 <TIM_Base_SetConfig+0x154>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_Base_SetConfig+0x48>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a45      	ldr	r2, [pc, #276]	@ (8003e1c <TIM_Base_SetConfig+0x158>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a39      	ldr	r2, [pc, #228]	@ (8003e08 <TIM_Base_SetConfig+0x144>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d023      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d2c:	d01f      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a36      	ldr	r2, [pc, #216]	@ (8003e0c <TIM_Base_SetConfig+0x148>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01b      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a35      	ldr	r2, [pc, #212]	@ (8003e10 <TIM_Base_SetConfig+0x14c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d017      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a34      	ldr	r2, [pc, #208]	@ (8003e14 <TIM_Base_SetConfig+0x150>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a33      	ldr	r2, [pc, #204]	@ (8003e18 <TIM_Base_SetConfig+0x154>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00f      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <TIM_Base_SetConfig+0x15c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <TIM_Base_SetConfig+0x160>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a31      	ldr	r2, [pc, #196]	@ (8003e28 <TIM_Base_SetConfig+0x164>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0xaa>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	@ (8003e1c <TIM_Base_SetConfig+0x158>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d108      	bne.n	8003d80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a18      	ldr	r2, [pc, #96]	@ (8003e08 <TIM_Base_SetConfig+0x144>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <TIM_Base_SetConfig+0x110>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <TIM_Base_SetConfig+0x154>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00f      	beq.n	8003dd4 <TIM_Base_SetConfig+0x110>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <TIM_Base_SetConfig+0x15c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00b      	beq.n	8003dd4 <TIM_Base_SetConfig+0x110>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <TIM_Base_SetConfig+0x160>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_Base_SetConfig+0x110>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <TIM_Base_SetConfig+0x164>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0x110>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a13      	ldr	r2, [pc, #76]	@ (8003e1c <TIM_Base_SetConfig+0x158>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d103      	bne.n	8003ddc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40013400 	.word	0x40013400
 8003e1c:	40015000 	.word	0x40015000
 8003e20:	40014000 	.word	0x40014000
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e042      	b.n	8003f50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7fd fccb 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2224      	movs	r2, #36	@ 0x24
 8003ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f001 f806 	bl	8004f14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fd07 	bl	800491c <UART_SetConfig>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e01b      	b.n	8003f50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f001 f885 	bl	8005058 <UART_CheckIdleState>
 8003f4e:	4603      	mov	r3, r0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	@ 0x28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d167      	bne.n	8004040 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Transmit_DMA+0x24>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e060      	b.n	8004042 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	88fa      	ldrh	r2, [r7, #6]
 8003f8a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2221      	movs	r2, #33	@ 0x21
 8003fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d028      	beq.n	8004000 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fb2:	4a26      	ldr	r2, [pc, #152]	@ (800404c <HAL_UART_Transmit_DMA+0xf4>)
 8003fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fba:	4a25      	ldr	r2, [pc, #148]	@ (8004050 <HAL_UART_Transmit_DMA+0xf8>)
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fc2:	4a24      	ldr	r2, [pc, #144]	@ (8004054 <HAL_UART_Transmit_DMA+0xfc>)
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fca:	2200      	movs	r2, #0
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3328      	adds	r3, #40	@ 0x28
 8003fde:	461a      	mov	r2, r3
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	f7fd feef 	bl	8001dc4 <HAL_DMA_Start_IT>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e020      	b.n	8004042 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2240      	movs	r2, #64	@ 0x40
 8004006:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3308      	adds	r3, #8
 800400e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	613b      	str	r3, [r7, #16]
   return(result);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	623a      	str	r2, [r7, #32]
 800402a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	69f9      	ldr	r1, [r7, #28]
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	61bb      	str	r3, [r7, #24]
   return(result);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e5      	bne.n	8004008 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	e000      	b.n	8004042 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004040:	2302      	movs	r3, #2
  }
}
 8004042:	4618      	mov	r0, r3
 8004044:	3728      	adds	r7, #40	@ 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	08005523 	.word	0x08005523
 8004050:	080055bd 	.word	0x080055bd
 8004054:	08005743 	.word	0x08005743

08004058 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	@ 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800406c:	2b20      	cmp	r3, #32
 800406e:	d137      	bne.n	80040e0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_UART_Receive_DMA+0x24>
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e030      	b.n	80040e2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a18      	ldr	r2, [pc, #96]	@ (80040ec <HAL_UART_Receive_DMA+0x94>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d01f      	beq.n	80040d0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d018      	beq.n	80040d0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	613b      	str	r3, [r7, #16]
   return(result);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	69f9      	ldr	r1, [r7, #28]
 80040c2:	6a3a      	ldr	r2, [r7, #32]
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e6      	bne.n	800409e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f001 f8d6 	bl	8005288 <UART_Start_Receive_DMA>
 80040dc:	4603      	mov	r3, r0
 80040de:	e000      	b.n	80040e2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3728      	adds	r7, #40	@ 0x28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40008000 	.word	0x40008000

080040f0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b090      	sub	sp, #64	@ 0x40
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004106:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004112:	2b80      	cmp	r3, #128	@ 0x80
 8004114:	d139      	bne.n	800418a <HAL_UART_DMAStop+0x9a>
 8004116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004118:	2b21      	cmp	r3, #33	@ 0x21
 800411a:	d136      	bne.n	800418a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3308      	adds	r3, #8
 8004122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	61fb      	str	r3, [r7, #28]
   return(result);
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3308      	adds	r3, #8
 800413a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800413c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800413e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e5      	bne.n	800411c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800415c:	4618      	mov	r0, r3
 800415e:	f7fd feac 	bl	8001eba <HAL_DMA_Abort>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe f813 	bl	8002198 <HAL_DMA_GetError>
 8004172:	4603      	mov	r3, r0
 8004174:	2b20      	cmp	r3, #32
 8004176:	d105      	bne.n	8004184 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2210      	movs	r2, #16
 800417c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e047      	b.n	8004214 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f001 f925 	bl	80053d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d13c      	bne.n	8004212 <HAL_UART_DMAStop+0x122>
 8004198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419a:	2b22      	cmp	r3, #34	@ 0x22
 800419c:	d139      	bne.n	8004212 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3308      	adds	r3, #8
 80041bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041be:	61ba      	str	r2, [r7, #24]
 80041c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6979      	ldr	r1, [r7, #20]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	613b      	str	r3, [r7, #16]
   return(result);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e5      	bne.n	800419e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d017      	beq.n	800420c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fe69 	bl	8001eba <HAL_DMA_Abort>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fd ffcf 	bl	8002198 <HAL_DMA_GetError>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d105      	bne.n	800420c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2210      	movs	r2, #16
 8004204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e003      	b.n	8004214 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 f922 	bl	8005456 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3740      	adds	r7, #64	@ 0x40
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b0ba      	sub	sp, #232	@ 0xe8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004242:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004246:	f640 030f 	movw	r3, #2063	@ 0x80f
 800424a:	4013      	ands	r3, r2
 800424c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11b      	bne.n	8004290 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d105      	bne.n	800427c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8300 	beq.w	8004886 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4798      	blx	r3
      }
      return;
 800428e:	e2fa      	b.n	8004886 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8123 	beq.w	80044e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800429a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800429e:	4b8d      	ldr	r3, [pc, #564]	@ (80044d4 <HAL_UART_IRQHandler+0x2b8>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80042a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80042aa:	4b8b      	ldr	r3, [pc, #556]	@ (80044d8 <HAL_UART_IRQHandler+0x2bc>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8116 	beq.w	80044e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d011      	beq.n	80042e4 <HAL_UART_IRQHandler+0xc8>
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2201      	movs	r2, #1
 80042d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d011      	beq.n	8004314 <HAL_UART_IRQHandler+0xf8>
 80042f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2202      	movs	r2, #2
 8004302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430a:	f043 0204 	orr.w	r2, r3, #4
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d011      	beq.n	8004344 <HAL_UART_IRQHandler+0x128>
 8004320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2204      	movs	r2, #4
 8004332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	f043 0202 	orr.w	r2, r3, #2
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d017      	beq.n	8004380 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800435c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004360:	4b5c      	ldr	r3, [pc, #368]	@ (80044d4 <HAL_UART_IRQHandler+0x2b8>)
 8004362:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00b      	beq.n	8004380 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2208      	movs	r2, #8
 800436e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	f043 0208 	orr.w	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004388:	2b00      	cmp	r3, #0
 800438a:	d012      	beq.n	80043b2 <HAL_UART_IRQHandler+0x196>
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004390:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8266 	beq.w	800488a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d013      	beq.n	80043f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b40      	cmp	r3, #64	@ 0x40
 8004408:	d005      	beq.n	8004416 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800440a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004412:	2b00      	cmp	r3, #0
 8004414:	d054      	beq.n	80044c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f81d 	bl	8005456 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	d146      	bne.n	80044b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3308      	adds	r3, #8
 8004452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004456:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800445a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800446e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1d9      	bne.n	800442a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800447c:	2b00      	cmp	r3, #0
 800447e:	d017      	beq.n	80044b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004486:	4a15      	ldr	r2, [pc, #84]	@ (80044dc <HAL_UART_IRQHandler+0x2c0>)
 8004488:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004490:	4618      	mov	r0, r3
 8004492:	f7fd fd6b 	bl	8001f6c <HAL_DMA_Abort_IT>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d019      	beq.n	80044d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80044aa:	4610      	mov	r0, r2
 80044ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ae:	e00f      	b.n	80044d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa1d 	bl	80048f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b6:	e00b      	b.n	80044d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fa19 	bl	80048f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044be:	e007      	b.n	80044d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa15 	bl	80048f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80044ce:	e1dc      	b.n	800488a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	bf00      	nop
    return;
 80044d2:	e1da      	b.n	800488a <HAL_UART_IRQHandler+0x66e>
 80044d4:	10000001 	.word	0x10000001
 80044d8:	04000120 	.word	0x04000120
 80044dc:	080057c3 	.word	0x080057c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	f040 8170 	bne.w	80047ca <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8169 	beq.w	80047ca <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8162 	beq.w	80047ca <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2210      	movs	r2, #16
 800450c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004518:	2b40      	cmp	r3, #64	@ 0x40
 800451a:	f040 80d8 	bne.w	80046ce <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800452c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80af 	beq.w	8004694 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800453c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004540:	429a      	cmp	r2, r3
 8004542:	f080 80a7 	bcs.w	8004694 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800454c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 8087 	bne.w	8004672 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004578:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800457c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800458e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004592:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800459a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1da      	bne.n	8004564 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3308      	adds	r3, #8
 80045b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e1      	bne.n	80045ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800460e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004610:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004614:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800461c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e3      	bne.n	80045ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800463e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004640:	f023 0310 	bic.w	r3, r3, #16
 8004644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004652:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004654:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e4      	bne.n	8004630 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800466c:	4618      	mov	r0, r3
 800466e:	f7fd fc24 	bl	8001eba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004684:	b29b      	uxth	r3, r3
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	b29b      	uxth	r3, r3
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f939 	bl	8004904 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004692:	e0fc      	b.n	800488e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800469a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800469e:	429a      	cmp	r2, r3
 80046a0:	f040 80f5 	bne.w	800488e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	f040 80eb 	bne.w	800488e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f91c 	bl	8004904 <HAL_UARTEx_RxEventCallback>
      return;
 80046cc:	e0df      	b.n	800488e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80d1 	beq.w	8004892 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80046f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80cc 	beq.w	8004892 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800470e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800471c:	647b      	str	r3, [r7, #68]	@ 0x44
 800471e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800472a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e4      	bne.n	80046fa <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3308      	adds	r3, #8
 8004736:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	623b      	str	r3, [r7, #32]
   return(result);
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004758:	633a      	str	r2, [r7, #48]	@ 0x30
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800475e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e1      	bne.n	8004730 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	60fb      	str	r3, [r7, #12]
   return(result);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f023 0310 	bic.w	r3, r3, #16
 8004794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	69b9      	ldr	r1, [r7, #24]
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	617b      	str	r3, [r7, #20]
   return(result);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e4      	bne.n	8004780 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2202      	movs	r2, #2
 80047ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f89e 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047c8:	e063      	b.n	8004892 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <HAL_UART_IRQHandler+0x5d8>
 80047d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80047ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 f825 	bl	800583c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047f2:	e051      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80047f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d014      	beq.n	800482a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800480c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004810:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800481c:	2b00      	cmp	r3, #0
 800481e:	d03a      	beq.n	8004896 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
    }
    return;
 8004828:	e035      	b.n	8004896 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800482a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_UART_IRQHandler+0x62e>
 8004836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 ffcf 	bl	80057e6 <UART_EndTransmit_IT>
    return;
 8004848:	e026      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_UART_IRQHandler+0x64e>
 8004856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fffe 	bl	8005864 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004868:	e016      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_UART_IRQHandler+0x67c>
 8004876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800487a:	2b00      	cmp	r3, #0
 800487c:	da0c      	bge.n	8004898 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 ffe6 	bl	8005850 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004884:	e008      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
      return;
 8004886:	bf00      	nop
 8004888:	e006      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
    return;
 800488a:	bf00      	nop
 800488c:	e004      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
      return;
 800488e:	bf00      	nop
 8004890:	e002      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
      return;
 8004892:	bf00      	nop
 8004894:	e000      	b.n	8004898 <HAL_UART_IRQHandler+0x67c>
    return;
 8004896:	bf00      	nop
  }
}
 8004898:	37e8      	adds	r7, #232	@ 0xe8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop

080048a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800491c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004920:	b08c      	sub	sp, #48	@ 0x30
 8004922:	af00      	add	r7, sp, #0
 8004924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	431a      	orrs	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	431a      	orrs	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	4313      	orrs	r3, r2
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4baa      	ldr	r3, [pc, #680]	@ (8004bf4 <UART_SetConfig+0x2d8>)
 800494c:	4013      	ands	r3, r2
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004954:	430b      	orrs	r3, r1
 8004956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a9f      	ldr	r2, [pc, #636]	@ (8004bf8 <UART_SetConfig+0x2dc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004984:	4313      	orrs	r3, r2
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004992:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800499c:	430b      	orrs	r3, r1
 800499e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a6:	f023 010f 	bic.w	r1, r3, #15
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a90      	ldr	r2, [pc, #576]	@ (8004bfc <UART_SetConfig+0x2e0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d125      	bne.n	8004a0c <UART_SetConfig+0xf0>
 80049c0:	4b8f      	ldr	r3, [pc, #572]	@ (8004c00 <UART_SetConfig+0x2e4>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d81a      	bhi.n	8004a04 <UART_SetConfig+0xe8>
 80049ce:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <UART_SetConfig+0xb8>)
 80049d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ea:	e116      	b.n	8004c1a <UART_SetConfig+0x2fe>
 80049ec:	2302      	movs	r3, #2
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e112      	b.n	8004c1a <UART_SetConfig+0x2fe>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fa:	e10e      	b.n	8004c1a <UART_SetConfig+0x2fe>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e10a      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e106      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7c      	ldr	r2, [pc, #496]	@ (8004c04 <UART_SetConfig+0x2e8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d138      	bne.n	8004a88 <UART_SetConfig+0x16c>
 8004a16:	4b7a      	ldr	r3, [pc, #488]	@ (8004c00 <UART_SetConfig+0x2e4>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d82d      	bhi.n	8004a80 <UART_SetConfig+0x164>
 8004a24:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <UART_SetConfig+0x110>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a81 	.word	0x08004a81
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a81 	.word	0x08004a81
 8004a48:	08004a81 	.word	0x08004a81
 8004a4c:	08004a69 	.word	0x08004a69
 8004a50:	08004a81 	.word	0x08004a81
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a66:	e0d8      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6e:	e0d4      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a76:	e0d0      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7e:	e0cc      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a86:	e0c8      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004c08 <UART_SetConfig+0x2ec>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d125      	bne.n	8004ade <UART_SetConfig+0x1c2>
 8004a92:	4b5b      	ldr	r3, [pc, #364]	@ (8004c00 <UART_SetConfig+0x2e4>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a9c:	2b30      	cmp	r3, #48	@ 0x30
 8004a9e:	d016      	beq.n	8004ace <UART_SetConfig+0x1b2>
 8004aa0:	2b30      	cmp	r3, #48	@ 0x30
 8004aa2:	d818      	bhi.n	8004ad6 <UART_SetConfig+0x1ba>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d00a      	beq.n	8004abe <UART_SetConfig+0x1a2>
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d814      	bhi.n	8004ad6 <UART_SetConfig+0x1ba>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <UART_SetConfig+0x19a>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d008      	beq.n	8004ac6 <UART_SetConfig+0x1aa>
 8004ab4:	e00f      	b.n	8004ad6 <UART_SetConfig+0x1ba>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004abc:	e0ad      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac4:	e0a9      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004acc:	e0a5      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004ace:	2308      	movs	r3, #8
 8004ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad4:	e0a1      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004adc:	e09d      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8004c0c <UART_SetConfig+0x2f0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d125      	bne.n	8004b34 <UART_SetConfig+0x218>
 8004ae8:	4b45      	ldr	r3, [pc, #276]	@ (8004c00 <UART_SetConfig+0x2e4>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af4:	d016      	beq.n	8004b24 <UART_SetConfig+0x208>
 8004af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af8:	d818      	bhi.n	8004b2c <UART_SetConfig+0x210>
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d00a      	beq.n	8004b14 <UART_SetConfig+0x1f8>
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d814      	bhi.n	8004b2c <UART_SetConfig+0x210>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <UART_SetConfig+0x1f0>
 8004b06:	2b40      	cmp	r3, #64	@ 0x40
 8004b08:	d008      	beq.n	8004b1c <UART_SetConfig+0x200>
 8004b0a:	e00f      	b.n	8004b2c <UART_SetConfig+0x210>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b12:	e082      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b1a:	e07e      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b22:	e07a      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2a:	e076      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b32:	e072      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	@ (8004c10 <UART_SetConfig+0x2f4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d12a      	bne.n	8004b94 <UART_SetConfig+0x278>
 8004b3e:	4b30      	ldr	r3, [pc, #192]	@ (8004c00 <UART_SetConfig+0x2e4>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4c:	d01a      	beq.n	8004b84 <UART_SetConfig+0x268>
 8004b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b52:	d81b      	bhi.n	8004b8c <UART_SetConfig+0x270>
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b58:	d00c      	beq.n	8004b74 <UART_SetConfig+0x258>
 8004b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b5e:	d815      	bhi.n	8004b8c <UART_SetConfig+0x270>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <UART_SetConfig+0x250>
 8004b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b68:	d008      	beq.n	8004b7c <UART_SetConfig+0x260>
 8004b6a:	e00f      	b.n	8004b8c <UART_SetConfig+0x270>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b72:	e052      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b74:	2302      	movs	r3, #2
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7a:	e04e      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b82:	e04a      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8a:	e046      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b92:	e042      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <UART_SetConfig+0x2dc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d13a      	bne.n	8004c14 <UART_SetConfig+0x2f8>
 8004b9e:	4b18      	ldr	r3, [pc, #96]	@ (8004c00 <UART_SetConfig+0x2e4>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bac:	d01a      	beq.n	8004be4 <UART_SetConfig+0x2c8>
 8004bae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bb2:	d81b      	bhi.n	8004bec <UART_SetConfig+0x2d0>
 8004bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb8:	d00c      	beq.n	8004bd4 <UART_SetConfig+0x2b8>
 8004bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bbe:	d815      	bhi.n	8004bec <UART_SetConfig+0x2d0>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <UART_SetConfig+0x2b0>
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc8:	d008      	beq.n	8004bdc <UART_SetConfig+0x2c0>
 8004bca:	e00f      	b.n	8004bec <UART_SetConfig+0x2d0>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd2:	e022      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bda:	e01e      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	e01a      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004be4:	2308      	movs	r3, #8
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bea:	e016      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004bec:	2310      	movs	r3, #16
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bf2:	e012      	b.n	8004c1a <UART_SetConfig+0x2fe>
 8004bf4:	cfff69f3 	.word	0xcfff69f3
 8004bf8:	40008000 	.word	0x40008000
 8004bfc:	40013800 	.word	0x40013800
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40004400 	.word	0x40004400
 8004c08:	40004800 	.word	0x40004800
 8004c0c:	40004c00 	.word	0x40004c00
 8004c10:	40005000 	.word	0x40005000
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4aae      	ldr	r2, [pc, #696]	@ (8004ed8 <UART_SetConfig+0x5bc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	f040 8097 	bne.w	8004d54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d823      	bhi.n	8004c76 <UART_SetConfig+0x35a>
 8004c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <UART_SetConfig+0x318>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c67 	.word	0x08004c67
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004c77 	.word	0x08004c77
 8004c54:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fe faf0 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8004c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c5e:	e010      	b.n	8004c82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b9e      	ldr	r3, [pc, #632]	@ (8004edc <UART_SetConfig+0x5c0>)
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7fe fa7b 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8004c6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c6c:	e009      	b.n	8004c82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c74:	e005      	b.n	8004c82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8130 	beq.w	8004eea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	4a94      	ldr	r2, [pc, #592]	@ (8004ee0 <UART_SetConfig+0x5c4>)
 8004c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c94:	461a      	mov	r2, r3
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d305      	bcc.n	8004cba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d903      	bls.n	8004cc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cc0:	e113      	b.n	8004eea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	60fa      	str	r2, [r7, #12]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cce:	4a84      	ldr	r2, [pc, #528]	@ (8004ee0 <UART_SetConfig+0x5c4>)
 8004cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ce4:	f7fb fb54 	bl	8000390 <__aeabi_uldivmod>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	460b      	mov	r3, r1
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	f04f 0300 	mov.w	r3, #0
 8004cf8:	020b      	lsls	r3, r1, #8
 8004cfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cfe:	0202      	lsls	r2, r0, #8
 8004d00:	6979      	ldr	r1, [r7, #20]
 8004d02:	6849      	ldr	r1, [r1, #4]
 8004d04:	0849      	lsrs	r1, r1, #1
 8004d06:	2000      	movs	r0, #0
 8004d08:	460c      	mov	r4, r1
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	eb12 0804 	adds.w	r8, r2, r4
 8004d10:	eb43 0905 	adc.w	r9, r3, r5
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	469a      	mov	sl, r3
 8004d1c:	4693      	mov	fp, r2
 8004d1e:	4652      	mov	r2, sl
 8004d20:	465b      	mov	r3, fp
 8004d22:	4640      	mov	r0, r8
 8004d24:	4649      	mov	r1, r9
 8004d26:	f7fb fb33 	bl	8000390 <__aeabi_uldivmod>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4613      	mov	r3, r2
 8004d30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d38:	d308      	bcc.n	8004d4c <UART_SetConfig+0x430>
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d40:	d204      	bcs.n	8004d4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e0ce      	b.n	8004eea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d52:	e0ca      	b.n	8004eea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d5c:	d166      	bne.n	8004e2c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d827      	bhi.n	8004db6 <UART_SetConfig+0x49a>
 8004d66:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <UART_SetConfig+0x450>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	08004db7 	.word	0x08004db7
 8004d84:	08004db7 	.word	0x08004db7
 8004d88:	08004db7 	.word	0x08004db7
 8004d8c:	08004daf 	.word	0x08004daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fe fa54 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8004d94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d96:	e014      	b.n	8004dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d98:	f7fe fa66 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d9e:	e010      	b.n	8004dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da0:	4b4e      	ldr	r3, [pc, #312]	@ (8004edc <UART_SetConfig+0x5c0>)
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004da4:	e00d      	b.n	8004dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da6:	f7fe f9db 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8004daa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dac:	e009      	b.n	8004dc2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004db4:	e005      	b.n	8004dc2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8090 	beq.w	8004eea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	4a44      	ldr	r2, [pc, #272]	@ (8004ee0 <UART_SetConfig+0x5c4>)
 8004dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ddc:	005a      	lsls	r2, r3, #1
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	441a      	add	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	2b0f      	cmp	r3, #15
 8004df4:	d916      	bls.n	8004e24 <UART_SetConfig+0x508>
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfc:	d212      	bcs.n	8004e24 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f023 030f 	bic.w	r3, r3, #15
 8004e06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	085b      	lsrs	r3, r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	8bfb      	ldrh	r3, [r7, #30]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	8bfa      	ldrh	r2, [r7, #30]
 8004e20:	60da      	str	r2, [r3, #12]
 8004e22:	e062      	b.n	8004eea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e2a:	e05e      	b.n	8004eea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d828      	bhi.n	8004e86 <UART_SetConfig+0x56a>
 8004e34:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <UART_SetConfig+0x520>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e69 	.word	0x08004e69
 8004e44:	08004e71 	.word	0x08004e71
 8004e48:	08004e87 	.word	0x08004e87
 8004e4c:	08004e77 	.word	0x08004e77
 8004e50:	08004e87 	.word	0x08004e87
 8004e54:	08004e87 	.word	0x08004e87
 8004e58:	08004e87 	.word	0x08004e87
 8004e5c:	08004e7f 	.word	0x08004e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e60:	f7fe f9ec 	bl	800323c <HAL_RCC_GetPCLK1Freq>
 8004e64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e66:	e014      	b.n	8004e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e68:	f7fe f9fe 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 8004e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e6e:	e010      	b.n	8004e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e70:	4b1a      	ldr	r3, [pc, #104]	@ (8004edc <UART_SetConfig+0x5c0>)
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e74:	e00d      	b.n	8004e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e76:	f7fe f973 	bl	8003160 <HAL_RCC_GetSysClockFreq>
 8004e7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e7c:	e009      	b.n	8004e92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e84:	e005      	b.n	8004e92 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e90:	bf00      	nop
    }

    if (pclk != 0U)
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d028      	beq.n	8004eea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	4a10      	ldr	r2, [pc, #64]	@ (8004ee0 <UART_SetConfig+0x5c4>)
 8004e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	441a      	add	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2b0f      	cmp	r3, #15
 8004ec0:	d910      	bls.n	8004ee4 <UART_SetConfig+0x5c8>
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec8:	d20c      	bcs.n	8004ee4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	e009      	b.n	8004eea <UART_SetConfig+0x5ce>
 8004ed6:	bf00      	nop
 8004ed8:	40008000 	.word	0x40008000
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	0801770c 	.word	0x0801770c
      }
      else
      {
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2200      	movs	r2, #0
 8004f04:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f06:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3730      	adds	r7, #48	@ 0x30
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01a      	beq.n	800502a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005012:	d10a      	bne.n	800502a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	605a      	str	r2, [r3, #4]
  }
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b098      	sub	sp, #96	@ 0x60
 800505c:	af02      	add	r7, sp, #8
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005068:	f7fc fd18 	bl	8001a9c <HAL_GetTick>
 800506c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b08      	cmp	r3, #8
 800507a:	d12f      	bne.n	80050dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005084:	2200      	movs	r2, #0
 8005086:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f88e 	bl	80051ac <UART_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d022      	beq.n	80050dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e063      	b.n	80051a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d149      	bne.n	800517e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f2:	2200      	movs	r2, #0
 80050f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f857 	bl	80051ac <UART_WaitOnFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d03c      	beq.n	800517e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	623b      	str	r3, [r7, #32]
   return(result);
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005118:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005122:	633b      	str	r3, [r7, #48]	@ 0x30
 8005124:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e6      	bne.n	8005104 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3308      	adds	r3, #8
 800513c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	60fb      	str	r3, [r7, #12]
   return(result);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3308      	adds	r3, #8
 8005154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005156:	61fa      	str	r2, [r7, #28]
 8005158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	69b9      	ldr	r1, [r7, #24]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	617b      	str	r3, [r7, #20]
   return(result);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e5      	bne.n	8005136 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e012      	b.n	80051a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3758      	adds	r7, #88	@ 0x58
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	603b      	str	r3, [r7, #0]
 80051b8:	4613      	mov	r3, r2
 80051ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051bc:	e04f      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051c4:	d04b      	beq.n	800525e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c6:	f7fc fc69 	bl	8001a9c <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <UART_WaitOnFlagUntilTimeout+0x30>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e04e      	b.n	800527e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d037      	beq.n	800525e <UART_WaitOnFlagUntilTimeout+0xb2>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b80      	cmp	r3, #128	@ 0x80
 80051f2:	d034      	beq.n	800525e <UART_WaitOnFlagUntilTimeout+0xb2>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b40      	cmp	r3, #64	@ 0x40
 80051f8:	d031      	beq.n	800525e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d110      	bne.n	800522a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2208      	movs	r2, #8
 800520e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f920 	bl	8005456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2208      	movs	r2, #8
 800521a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e029      	b.n	800527e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005238:	d111      	bne.n	800525e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f906 	bl	8005456 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e00f      	b.n	800527e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69da      	ldr	r2, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4013      	ands	r3, r2
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	429a      	cmp	r2, r3
 800526c:	bf0c      	ite	eq
 800526e:	2301      	moveq	r3, #1
 8005270:	2300      	movne	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	429a      	cmp	r2, r3
 800527a:	d0a0      	beq.n	80051be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b096      	sub	sp, #88	@ 0x58
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	88fa      	ldrh	r2, [r7, #6]
 80052a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2222      	movs	r2, #34	@ 0x22
 80052b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d02d      	beq.n	800531a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c4:	4a40      	ldr	r2, [pc, #256]	@ (80053c8 <UART_Start_Receive_DMA+0x140>)
 80052c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ce:	4a3f      	ldr	r2, [pc, #252]	@ (80053cc <UART_Start_Receive_DMA+0x144>)
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d8:	4a3d      	ldr	r2, [pc, #244]	@ (80053d0 <UART_Start_Receive_DMA+0x148>)
 80052da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e2:	2200      	movs	r2, #0
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3324      	adds	r3, #36	@ 0x24
 80052f2:	4619      	mov	r1, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f8:	461a      	mov	r2, r3
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	f7fc fd62 	bl	8001dc4 <HAL_DMA_Start_IT>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2210      	movs	r2, #16
 800530a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e051      	b.n	80053be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d018      	beq.n	8005354 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005336:	657b      	str	r3, [r7, #84]	@ 0x54
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005340:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005342:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800534e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e6      	bne.n	8005322 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005366:	f043 0301 	orr.w	r3, r3, #1
 800536a:	653b      	str	r3, [r7, #80]	@ 0x50
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3308      	adds	r3, #8
 8005372:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005374:	637a      	str	r2, [r7, #52]	@ 0x34
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800537a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e5      	bne.n	8005354 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	613b      	str	r3, [r7, #16]
   return(result);
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3308      	adds	r3, #8
 80053a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053a8:	623a      	str	r2, [r7, #32]
 80053aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	69f9      	ldr	r1, [r7, #28]
 80053ae:	6a3a      	ldr	r2, [r7, #32]
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e5      	bne.n	8005388 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3758      	adds	r7, #88	@ 0x58
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	080055d9 	.word	0x080055d9
 80053cc:	08005705 	.word	0x08005705
 80053d0:	08005743 	.word	0x08005743

080053d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b08f      	sub	sp, #60	@ 0x3c
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e6      	bne.n	80053dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	60bb      	str	r3, [r7, #8]
   return(result);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005424:	633b      	str	r3, [r7, #48]	@ 0x30
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3308      	adds	r3, #8
 800542c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800542e:	61ba      	str	r2, [r7, #24]
 8005430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	613b      	str	r3, [r7, #16]
   return(result);
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800544a:	bf00      	nop
 800544c:	373c      	adds	r7, #60	@ 0x3c
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005456:	b480      	push	{r7}
 8005458:	b095      	sub	sp, #84	@ 0x54
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800547c:	643b      	str	r3, [r7, #64]	@ 0x40
 800547e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005482:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3308      	adds	r3, #8
 8005496:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	61fb      	str	r3, [r7, #28]
   return(result);
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	f023 0301 	bic.w	r3, r3, #1
 80054aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3308      	adds	r3, #8
 80054b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e3      	bne.n	8005490 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d118      	bne.n	8005502 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	613b      	str	r3, [r7, #16]
   return(result);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e6      	bne.n	80054d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005516:	bf00      	nop
 8005518:	3754      	adds	r7, #84	@ 0x54
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b090      	sub	sp, #64	@ 0x40
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d137      	bne.n	80055ae <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005540:	2200      	movs	r2, #0
 8005542:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	623b      	str	r3, [r7, #32]
   return(result);
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800555c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800555e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005566:	633a      	str	r2, [r7, #48]	@ 0x30
 8005568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800556c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800557a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	60fb      	str	r3, [r7, #12]
   return(result);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	69b9      	ldr	r1, [r7, #24]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	617b      	str	r3, [r7, #20]
   return(result);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e6      	bne.n	800557a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055ac:	e002      	b.n	80055b4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80055ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80055b0:	f7ff f976 	bl	80048a0 <HAL_UART_TxCpltCallback>
}
 80055b4:	bf00      	nop
 80055b6:	3740      	adds	r7, #64	@ 0x40
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff f972 	bl	80048b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b09c      	sub	sp, #112	@ 0x70
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d171      	bne.n	80056d8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80055f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f6:	2200      	movs	r2, #0
 80055f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800560a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800560c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800561a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800561c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005620:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e6      	bne.n	80055fc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	667b      	str	r3, [r7, #100]	@ 0x64
 8005646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3308      	adds	r3, #8
 800564c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800564e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005650:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005656:	e841 2300 	strex	r3, r2, [r1]
 800565a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800565c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1e5      	bne.n	800562e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3308      	adds	r3, #8
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	623b      	str	r3, [r7, #32]
   return(result);
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005678:	663b      	str	r3, [r7, #96]	@ 0x60
 800567a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3308      	adds	r3, #8
 8005680:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005682:	633a      	str	r2, [r7, #48]	@ 0x30
 8005684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e5      	bne.n	8005662 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005698:	2220      	movs	r2, #32
 800569a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d118      	bne.n	80056d8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	617b      	str	r3, [r7, #20]
   return(result);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e6      	bne.n	80056a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056da:	2200      	movs	r2, #0
 80056dc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056ec:	4619      	mov	r1, r3
 80056ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056f0:	f7ff f908 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056f4:	e002      	b.n	80056fc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80056f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056f8:	f7ff f8e6 	bl	80048c8 <HAL_UART_RxCpltCallback>
}
 80056fc:	bf00      	nop
 80056fe:	3770      	adds	r7, #112	@ 0x70
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d109      	bne.n	8005734 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	b29b      	uxth	r3, r3
 800572a:	4619      	mov	r1, r3
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f7ff f8e9 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005732:	e002      	b.n	800573a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff f8d1 	bl	80048dc <HAL_UART_RxHalfCpltCallback>
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800575e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576a:	2b80      	cmp	r3, #128	@ 0x80
 800576c:	d109      	bne.n	8005782 <UART_DMAError+0x40>
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b21      	cmp	r3, #33	@ 0x21
 8005772:	d106      	bne.n	8005782 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800577c:	6978      	ldr	r0, [r7, #20]
 800577e:	f7ff fe29 	bl	80053d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b40      	cmp	r3, #64	@ 0x40
 800578e:	d109      	bne.n	80057a4 <UART_DMAError+0x62>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b22      	cmp	r3, #34	@ 0x22
 8005794:	d106      	bne.n	80057a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800579e:	6978      	ldr	r0, [r7, #20]
 80057a0:	f7ff fe59 	bl	8005456 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057aa:	f043 0210 	orr.w	r2, r3, #16
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057b4:	6978      	ldr	r0, [r7, #20]
 80057b6:	f7ff f89b 	bl	80048f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ba:	bf00      	nop
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff f889 	bl	80048f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b088      	sub	sp, #32
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005802:	61fb      	str	r3, [r7, #28]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6979      	ldr	r1, [r7, #20]
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	613b      	str	r3, [r7, #16]
   return(result);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff f836 	bl	80048a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005834:	bf00      	nop
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_UARTEx_DisableFifoMode+0x16>
 800588a:	2302      	movs	r3, #2
 800588c:	e027      	b.n	80058de <HAL_UARTEx_DisableFifoMode+0x66>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2224      	movs	r2, #36	@ 0x24
 800589a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0201 	bic.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80058bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058fe:	2302      	movs	r3, #2
 8005900:	e02d      	b.n	800595e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2224      	movs	r2, #36	@ 0x24
 800590e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f850 	bl	80059e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800597a:	2302      	movs	r3, #2
 800597c:	e02d      	b.n	80059da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2224      	movs	r2, #36	@ 0x24
 800598a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f812 	bl	80059e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d108      	bne.n	8005a06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a04:	e031      	b.n	8005a6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a06:	2308      	movs	r3, #8
 8005a08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	0e5b      	lsrs	r3, r3, #25
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	0f5b      	lsrs	r3, r3, #29
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	7b3a      	ldrb	r2, [r7, #12]
 8005a32:	4911      	ldr	r1, [pc, #68]	@ (8005a78 <UARTEx_SetNbDataToProcess+0x94>)
 8005a34:	5c8a      	ldrb	r2, [r1, r2]
 8005a36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a3a:	7b3a      	ldrb	r2, [r7, #12]
 8005a3c:	490f      	ldr	r1, [pc, #60]	@ (8005a7c <UARTEx_SetNbDataToProcess+0x98>)
 8005a3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a40:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	7b7a      	ldrb	r2, [r7, #13]
 8005a50:	4909      	ldr	r1, [pc, #36]	@ (8005a78 <UARTEx_SetNbDataToProcess+0x94>)
 8005a52:	5c8a      	ldrb	r2, [r1, r2]
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a58:	7b7a      	ldrb	r2, [r7, #13]
 8005a5a:	4908      	ldr	r1, [pc, #32]	@ (8005a7c <UARTEx_SetNbDataToProcess+0x98>)
 8005a5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	08017724 	.word	0x08017724
 8005a7c:	0801772c 	.word	0x0801772c

08005a80 <__NVIC_SetPriority>:
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	6039      	str	r1, [r7, #0]
 8005a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	db0a      	blt.n	8005aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	490c      	ldr	r1, [pc, #48]	@ (8005acc <__NVIC_SetPriority+0x4c>)
 8005a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a9e:	0112      	lsls	r2, r2, #4
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005aa8:	e00a      	b.n	8005ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4908      	ldr	r1, [pc, #32]	@ (8005ad0 <__NVIC_SetPriority+0x50>)
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	3b04      	subs	r3, #4
 8005ab8:	0112      	lsls	r2, r2, #4
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	440b      	add	r3, r1
 8005abe:	761a      	strb	r2, [r3, #24]
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	e000e100 	.word	0xe000e100
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <SysTick_Handler+0x1c>)
 8005ada:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005adc:	f001 fd40 	bl	8007560 <xTaskGetSchedulerState>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d001      	beq.n	8005aea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ae6:	f002 fb37 	bl	8008158 <xPortSysTickHandler>
  }
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	e000e010 	.word	0xe000e010

08005af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005af8:	2100      	movs	r1, #0
 8005afa:	f06f 0004 	mvn.w	r0, #4
 8005afe:	f7ff ffbf 	bl	8005a80 <__NVIC_SetPriority>
#endif
}
 8005b02:	bf00      	nop
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b0e:	f3ef 8305 	mrs	r3, IPSR
 8005b12:	603b      	str	r3, [r7, #0]
  return(result);
 8005b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b1a:	f06f 0305 	mvn.w	r3, #5
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	e00c      	b.n	8005b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b22:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <osKernelInitialize+0x44>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b2a:	4b08      	ldr	r3, [pc, #32]	@ (8005b4c <osKernelInitialize+0x44>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	e002      	b.n	8005b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b3c:	687b      	ldr	r3, [r7, #4]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	200048fc 	.word	0x200048fc

08005b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b56:	f3ef 8305 	mrs	r3, IPSR
 8005b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b62:	f06f 0305 	mvn.w	r3, #5
 8005b66:	607b      	str	r3, [r7, #4]
 8005b68:	e010      	b.n	8005b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b98 <osKernelStart+0x48>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d109      	bne.n	8005b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b72:	f7ff ffbf 	bl	8005af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b76:	4b08      	ldr	r3, [pc, #32]	@ (8005b98 <osKernelStart+0x48>)
 8005b78:	2202      	movs	r2, #2
 8005b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b7c:	f001 f87a 	bl	8006c74 <vTaskStartScheduler>
      stat = osOK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	607b      	str	r3, [r7, #4]
 8005b84:	e002      	b.n	8005b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b8c:	687b      	ldr	r3, [r7, #4]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	200048fc 	.word	0x200048fc

08005b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08e      	sub	sp, #56	@ 0x38
 8005ba0:	af04      	add	r7, sp, #16
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bac:	f3ef 8305 	mrs	r3, IPSR
 8005bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d17e      	bne.n	8005cb6 <osThreadNew+0x11a>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d07b      	beq.n	8005cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005bc2:	2318      	movs	r3, #24
 8005bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d045      	beq.n	8005c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <osThreadNew+0x48>
        name = attr->name;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <osThreadNew+0x6e>
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b38      	cmp	r3, #56	@ 0x38
 8005bfc:	d805      	bhi.n	8005c0a <osThreadNew+0x6e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <osThreadNew+0x72>
        return (NULL);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e054      	b.n	8005cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	089b      	lsrs	r3, r3, #2
 8005c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <osThreadNew+0xa8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2b5b      	cmp	r3, #91	@ 0x5b
 8005c2c:	d90a      	bls.n	8005c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d006      	beq.n	8005c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <osThreadNew+0xa8>
        mem = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
 8005c42:	e010      	b.n	8005c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10c      	bne.n	8005c66 <osThreadNew+0xca>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d108      	bne.n	8005c66 <osThreadNew+0xca>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <osThreadNew+0xca>
          mem = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e001      	b.n	8005c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d110      	bne.n	8005c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c74:	9202      	str	r2, [sp, #8]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6a3a      	ldr	r2, [r7, #32]
 8005c80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fe1a 	bl	80068bc <xTaskCreateStatic>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	e013      	b.n	8005cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d110      	bne.n	8005cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f107 0310 	add.w	r3, r7, #16
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fe68 	bl	800697c <xTaskCreate>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <osThreadNew+0x11a>
            hTask = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005cb6:	693b      	ldr	r3, [r7, #16]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3728      	adds	r7, #40	@ 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cc8:	f3ef 8305 	mrs	r3, IPSR
 8005ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <osDelay+0x1c>
    stat = osErrorISR;
 8005cd4:	f06f 0305 	mvn.w	r3, #5
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	e007      	b.n	8005cec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 ff8e 	bl	8006c08 <vTaskDelay>
    }
  }

  return (stat);
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
	...

08005cf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a07      	ldr	r2, [pc, #28]	@ (8005d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4a06      	ldr	r2, [pc, #24]	@ (8005d28 <vApplicationGetIdleTaskMemory+0x30>)
 8005d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2280      	movs	r2, #128	@ 0x80
 8005d14:	601a      	str	r2, [r3, #0]
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20004900 	.word	0x20004900
 8005d28:	2000495c 	.word	0x2000495c

08005d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a07      	ldr	r2, [pc, #28]	@ (8005d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4a06      	ldr	r2, [pc, #24]	@ (8005d5c <vApplicationGetTimerTaskMemory+0x30>)
 8005d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d4a:	601a      	str	r2, [r3, #0]
}
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20004b5c 	.word	0x20004b5c
 8005d5c:	20004bb8 	.word	0x20004bb8

08005d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f103 0208 	add.w	r2, r3, #8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f103 0208 	add.w	r2, r3, #8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f103 0208 	add.w	r2, r3, #8
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e18:	d103      	bne.n	8005e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e00c      	b.n	8005e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3308      	adds	r3, #8
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	e002      	b.n	8005e30 <vListInsert+0x2e>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d2f6      	bcs.n	8005e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	601a      	str	r2, [r3, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6892      	ldr	r2, [r2, #8]
 8005e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6852      	ldr	r2, [r2, #4]
 8005e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d103      	bne.n	8005ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	1e5a      	subs	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10b      	bne.n	8005ef4 <xQueueGenericReset+0x2c>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	60bb      	str	r3, [r7, #8]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ef4:	f002 f8a0 	bl	8008038 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	441a      	add	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f24:	3b01      	subs	r3, #1
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	441a      	add	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	22ff      	movs	r2, #255	@ 0xff
 8005f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	22ff      	movs	r2, #255	@ 0xff
 8005f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d114      	bne.n	8005f74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d01a      	beq.n	8005f88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3310      	adds	r3, #16
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f91a 	bl	8007190 <xTaskRemoveFromEventList>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d012      	beq.n	8005f88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f62:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <xQueueGenericReset+0xd0>)
 8005f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	e009      	b.n	8005f88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3310      	adds	r3, #16
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fef1 	bl	8005d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3324      	adds	r3, #36	@ 0x24
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff feec 	bl	8005d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f88:	f002 f888 	bl	800809c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f8c:	2301      	movs	r3, #1
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08e      	sub	sp, #56	@ 0x38
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10b      	bne.n	8005fc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fc2:	bf00      	nop
 8005fc4:	bf00      	nop
 8005fc6:	e7fd      	b.n	8005fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	e7fd      	b.n	8005fe2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <xQueueGenericCreateStatic+0x56>
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <xQueueGenericCreateStatic+0x5a>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e000      	b.n	8005ff8 <xQueueGenericCreateStatic+0x5c>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10b      	bne.n	8006014 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	623b      	str	r3, [r7, #32]
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <xQueueGenericCreateStatic+0x84>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <xQueueGenericCreateStatic+0x88>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <xQueueGenericCreateStatic+0x8a>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	61fb      	str	r3, [r7, #28]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006042:	2350      	movs	r3, #80	@ 0x50
 8006044:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b50      	cmp	r3, #80	@ 0x50
 800604a:	d00b      	beq.n	8006064 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	61bb      	str	r3, [r7, #24]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006064:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00d      	beq.n	800608c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006078:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800607c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	4613      	mov	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 f805 	bl	8006096 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800608c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800608e:	4618      	mov	r0, r3
 8006090:	3730      	adds	r7, #48	@ 0x30
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d103      	bne.n	80060b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e002      	b.n	80060b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060c4:	2101      	movs	r1, #1
 80060c6:	69b8      	ldr	r0, [r7, #24]
 80060c8:	f7ff fefe 	bl	8005ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	78fa      	ldrb	r2, [r7, #3]
 80060d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08e      	sub	sp, #56	@ 0x38
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060ea:	2300      	movs	r3, #0
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <xQueueGenericSend+0x34>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <xQueueGenericSend+0x42>
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <xQueueGenericSend+0x46>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xQueueGenericSend+0x48>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xQueueGenericSend+0x64>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d103      	bne.n	800614e <xQueueGenericSend+0x72>
 8006146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <xQueueGenericSend+0x76>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <xQueueGenericSend+0x78>
 8006152:	2300      	movs	r3, #0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <xQueueGenericSend+0x94>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	623b      	str	r3, [r7, #32]
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006170:	f001 f9f6 	bl	8007560 <xTaskGetSchedulerState>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <xQueueGenericSend+0xa4>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueGenericSend+0xa8>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueGenericSend+0xaa>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fb      	str	r3, [r7, #28]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061a2:	f001 ff49 	bl	8008038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d302      	bcc.n	80061b8 <xQueueGenericSend+0xdc>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d129      	bne.n	800620c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061be:	f000 fa0f 	bl	80065e0 <prvCopyDataToQueue>
 80061c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d010      	beq.n	80061ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	3324      	adds	r3, #36	@ 0x24
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 ffdd 	bl	8007190 <xTaskRemoveFromEventList>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d013      	beq.n	8006204 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061dc:	4b3f      	ldr	r3, [pc, #252]	@ (80062dc <xQueueGenericSend+0x200>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	e00a      	b.n	8006204 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061f4:	4b39      	ldr	r3, [pc, #228]	@ (80062dc <xQueueGenericSend+0x200>)
 80061f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006204:	f001 ff4a 	bl	800809c <vPortExitCritical>
				return pdPASS;
 8006208:	2301      	movs	r3, #1
 800620a:	e063      	b.n	80062d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006212:	f001 ff43 	bl	800809c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006216:	2300      	movs	r3, #0
 8006218:	e05c      	b.n	80062d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800621a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006220:	f107 0314 	add.w	r3, r7, #20
 8006224:	4618      	mov	r0, r3
 8006226:	f001 f83f 	bl	80072a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800622a:	2301      	movs	r3, #1
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800622e:	f001 ff35 	bl	800809c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006232:	f000 fd87 	bl	8006d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006236:	f001 feff 	bl	8008038 <vPortEnterCritical>
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006240:	b25b      	sxtb	r3, r3
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006246:	d103      	bne.n	8006250 <xQueueGenericSend+0x174>
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006256:	b25b      	sxtb	r3, r3
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800625c:	d103      	bne.n	8006266 <xQueueGenericSend+0x18a>
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006266:	f001 ff19 	bl	800809c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800626a:	1d3a      	adds	r2, r7, #4
 800626c:	f107 0314 	add.w	r3, r7, #20
 8006270:	4611      	mov	r1, r2
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f82e 	bl	80072d4 <xTaskCheckForTimeOut>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d124      	bne.n	80062c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800627e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006280:	f000 faa6 	bl	80067d0 <prvIsQueueFull>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d018      	beq.n	80062bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	3310      	adds	r3, #16
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4611      	mov	r1, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f000 ff2a 	bl	80070ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800629a:	f000 fa31 	bl	8006700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800629e:	f000 fd5f 	bl	8006d60 <xTaskResumeAll>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f47f af7c 	bne.w	80061a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062aa:	4b0c      	ldr	r3, [pc, #48]	@ (80062dc <xQueueGenericSend+0x200>)
 80062ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	e772      	b.n	80061a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062be:	f000 fa1f 	bl	8006700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062c2:	f000 fd4d 	bl	8006d60 <xTaskResumeAll>
 80062c6:	e76c      	b.n	80061a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062ca:	f000 fa19 	bl	8006700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ce:	f000 fd47 	bl	8006d60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3738      	adds	r7, #56	@ 0x38
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b090      	sub	sp, #64	@ 0x40
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	e7fd      	b.n	800630c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <xQueueGenericSendFromISR+0x3e>
 8006316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <xQueueGenericSendFromISR+0x42>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <xQueueGenericSendFromISR+0x44>
 8006322:	2300      	movs	r3, #0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d103      	bne.n	800634e <xQueueGenericSendFromISR+0x6e>
 8006346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <xQueueGenericSendFromISR+0x72>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <xQueueGenericSendFromISR+0x74>
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10b      	bne.n	8006370 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	623b      	str	r3, [r7, #32]
}
 800636a:	bf00      	nop
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006370:	f001 ff42 	bl	80081f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006374:	f3ef 8211 	mrs	r2, BASEPRI
 8006378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	61fa      	str	r2, [r7, #28]
 800638a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800638c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <xQueueGenericSendFromISR+0xc2>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d12f      	bne.n	8006402 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063b8:	f000 f912 	bl	80065e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063c4:	d112      	bne.n	80063ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	3324      	adds	r3, #36	@ 0x24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fedc 	bl	8007190 <xTaskRemoveFromEventList>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e007      	b.n	80063fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80063f0:	3301      	adds	r3, #1
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	b25a      	sxtb	r2, r3
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063fc:	2301      	movs	r3, #1
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006400:	e001      	b.n	8006406 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006408:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006410:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006414:	4618      	mov	r0, r3
 8006416:	3740      	adds	r7, #64	@ 0x40
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	@ 0x30
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <xQueueReceive+0x32>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	623b      	str	r3, [r7, #32]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d103      	bne.n	800645c <xQueueReceive+0x40>
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <xQueueReceive+0x44>
 800645c:	2301      	movs	r3, #1
 800645e:	e000      	b.n	8006462 <xQueueReceive+0x46>
 8006460:	2300      	movs	r3, #0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <xQueueReceive+0x62>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	61fb      	str	r3, [r7, #28]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800647e:	f001 f86f 	bl	8007560 <xTaskGetSchedulerState>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <xQueueReceive+0x72>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <xQueueReceive+0x76>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <xQueueReceive+0x78>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <xQueueReceive+0x94>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	61bb      	str	r3, [r7, #24]
}
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064b0:	f001 fdc2 	bl	8008038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01f      	beq.n	8006500 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064c4:	f000 f8f6 	bl	80066b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	1e5a      	subs	r2, r3, #1
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00f      	beq.n	80064f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	3310      	adds	r3, #16
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fe57 	bl	8007190 <xTaskRemoveFromEventList>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064e8:	4b3c      	ldr	r3, [pc, #240]	@ (80065dc <xQueueReceive+0x1c0>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064f8:	f001 fdd0 	bl	800809c <vPortExitCritical>
				return pdPASS;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e069      	b.n	80065d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d103      	bne.n	800650e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006506:	f001 fdc9 	bl	800809c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800650a:	2300      	movs	r3, #0
 800650c:	e062      	b.n	80065d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800650e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006514:	f107 0310 	add.w	r3, r7, #16
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fec5 	bl	80072a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800651e:	2301      	movs	r3, #1
 8006520:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006522:	f001 fdbb 	bl	800809c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006526:	f000 fc0d 	bl	8006d44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800652a:	f001 fd85 	bl	8008038 <vPortEnterCritical>
 800652e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006534:	b25b      	sxtb	r3, r3
 8006536:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800653a:	d103      	bne.n	8006544 <xQueueReceive+0x128>
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800654a:	b25b      	sxtb	r3, r3
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006550:	d103      	bne.n	800655a <xQueueReceive+0x13e>
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800655a:	f001 fd9f 	bl	800809c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800655e:	1d3a      	adds	r2, r7, #4
 8006560:	f107 0310 	add.w	r3, r7, #16
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f000 feb4 	bl	80072d4 <xTaskCheckForTimeOut>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d123      	bne.n	80065ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006574:	f000 f916 	bl	80067a4 <prvIsQueueEmpty>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	3324      	adds	r3, #36	@ 0x24
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4611      	mov	r1, r2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fdb0 	bl	80070ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800658c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800658e:	f000 f8b7 	bl	8006700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006592:	f000 fbe5 	bl	8006d60 <xTaskResumeAll>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d189      	bne.n	80064b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800659c:	4b0f      	ldr	r3, [pc, #60]	@ (80065dc <xQueueReceive+0x1c0>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	e780      	b.n	80064b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b0:	f000 f8a6 	bl	8006700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065b4:	f000 fbd4 	bl	8006d60 <xTaskResumeAll>
 80065b8:	e77a      	b.n	80064b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065bc:	f000 f8a0 	bl	8006700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065c0:	f000 fbce 	bl	8006d60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065c6:	f000 f8ed 	bl	80067a4 <prvIsQueueEmpty>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f43f af6f 	beq.w	80064b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3730      	adds	r7, #48	@ 0x30
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10d      	bne.n	800661a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d14d      	bne.n	80066a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 ffc6 	bl	800759c <xTaskPriorityDisinherit>
 8006610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	e043      	b.n	80066a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d119      	bne.n	8006654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6858      	ldr	r0, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006628:	461a      	mov	r2, r3
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	f010 f917 	bl	801685e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d32b      	bcc.n	80066a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	e026      	b.n	80066a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68d8      	ldr	r0, [r3, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665c:	461a      	mov	r2, r3
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	f010 f8fd 	bl	801685e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	425b      	negs	r3, r3
 800666e:	441a      	add	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d207      	bcs.n	8006690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006688:	425b      	negs	r3, r3
 800668a:	441a      	add	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d105      	bne.n	80066a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3b01      	subs	r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80066aa:	697b      	ldr	r3, [r7, #20]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d018      	beq.n	80066f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	441a      	add	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d303      	bcc.n	80066e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68d9      	ldr	r1, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f0:	461a      	mov	r2, r3
 80066f2:	6838      	ldr	r0, [r7, #0]
 80066f4:	f010 f8b3 	bl	801685e <memcpy>
	}
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006708:	f001 fc96 	bl	8008038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006714:	e011      	b.n	800673a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	d012      	beq.n	8006744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3324      	adds	r3, #36	@ 0x24
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fd34 	bl	8007190 <xTaskRemoveFromEventList>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800672e:	f000 fe35 	bl	800739c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	3b01      	subs	r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800673a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	dce9      	bgt.n	8006716 <prvUnlockQueue+0x16>
 8006742:	e000      	b.n	8006746 <prvUnlockQueue+0x46>
					break;
 8006744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	22ff      	movs	r2, #255	@ 0xff
 800674a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800674e:	f001 fca5 	bl	800809c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006752:	f001 fc71 	bl	8008038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800675c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800675e:	e011      	b.n	8006784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d012      	beq.n	800678e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3310      	adds	r3, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fd0f 	bl	8007190 <xTaskRemoveFromEventList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006778:	f000 fe10 	bl	800739c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	3b01      	subs	r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dce9      	bgt.n	8006760 <prvUnlockQueue+0x60>
 800678c:	e000      	b.n	8006790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800678e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	22ff      	movs	r2, #255	@ 0xff
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006798:	f001 fc80 	bl	800809c <vPortExitCritical>
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067ac:	f001 fc44 	bl	8008038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e001      	b.n	80067c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067c2:	f001 fc6b 	bl	800809c <vPortExitCritical>

	return xReturn;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067d8:	f001 fc2e 	bl	8008038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d102      	bne.n	80067ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e001      	b.n	80067f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067f2:	f001 fc53 	bl	800809c <vPortExitCritical>

	return xReturn;
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e014      	b.n	800683a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006810:	4a0f      	ldr	r2, [pc, #60]	@ (8006850 <vQueueAddToRegistry+0x50>)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10b      	bne.n	8006834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800681c:	490c      	ldr	r1, [pc, #48]	@ (8006850 <vQueueAddToRegistry+0x50>)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006826:	4a0a      	ldr	r2, [pc, #40]	@ (8006850 <vQueueAddToRegistry+0x50>)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	4413      	add	r3, r2
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006832:	e006      	b.n	8006842 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b07      	cmp	r3, #7
 800683e:	d9e7      	bls.n	8006810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006840:	bf00      	nop
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20004fb8 	.word	0x20004fb8

08006854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006864:	f001 fbe8 	bl	8008038 <vPortEnterCritical>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800686e:	b25b      	sxtb	r3, r3
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006874:	d103      	bne.n	800687e <vQueueWaitForMessageRestricted+0x2a>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006884:	b25b      	sxtb	r3, r3
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800688a:	d103      	bne.n	8006894 <vQueueWaitForMessageRestricted+0x40>
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006894:	f001 fc02 	bl	800809c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3324      	adds	r3, #36	@ 0x24
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fc45 	bl	8007138 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068ae:	6978      	ldr	r0, [r7, #20]
 80068b0:	f7ff ff26 	bl	8006700 <prvUnlockQueue>
	}
 80068b4:	bf00      	nop
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08e      	sub	sp, #56	@ 0x38
 80068c0:	af04      	add	r7, sp, #16
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	623b      	str	r3, [r7, #32]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10b      	bne.n	8006906 <xTaskCreateStatic+0x4a>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	61fb      	str	r3, [r7, #28]
}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	e7fd      	b.n	8006902 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006906:	235c      	movs	r3, #92	@ 0x5c
 8006908:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b5c      	cmp	r3, #92	@ 0x5c
 800690e:	d00b      	beq.n	8006928 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	61bb      	str	r3, [r7, #24]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006928:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01e      	beq.n	800696e <xTaskCreateStatic+0xb2>
 8006930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01b      	beq.n	800696e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006938:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	2202      	movs	r2, #2
 8006944:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006948:	2300      	movs	r3, #0
 800694a:	9303      	str	r3, [sp, #12]
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	9302      	str	r3, [sp, #8]
 8006950:	f107 0314 	add.w	r3, r7, #20
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f850 	bl	8006a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006968:	f000 f8de 	bl	8006b28 <prvAddNewTaskToReadyList>
 800696c:	e001      	b.n	8006972 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006972:	697b      	ldr	r3, [r7, #20]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	3728      	adds	r7, #40	@ 0x28
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	@ 0x30
 8006980:	af04      	add	r7, sp, #16
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800698c:	88fb      	ldrh	r3, [r7, #6]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fc73 	bl	800827c <pvPortMalloc>
 8006996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800699e:	205c      	movs	r0, #92	@ 0x5c
 80069a0:	f001 fc6c 	bl	800827c <pvPortMalloc>
 80069a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80069b2:	e005      	b.n	80069c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f001 fd2f 	bl	8008418 <vPortFree>
 80069ba:	e001      	b.n	80069c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d017      	beq.n	80069f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069ce:	88fa      	ldrh	r2, [r7, #6]
 80069d0:	2300      	movs	r3, #0
 80069d2:	9303      	str	r3, [sp, #12]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	9302      	str	r3, [sp, #8]
 80069d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f80e 	bl	8006a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ea:	69f8      	ldr	r0, [r7, #28]
 80069ec:	f000 f89c 	bl	8006b28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069f0:	2301      	movs	r3, #1
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e002      	b.n	80069fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069fc:	69bb      	ldr	r3, [r7, #24]
	}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b088      	sub	sp, #32
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	21a5      	movs	r1, #165	@ 0xa5
 8006a20:	f00f fe54 	bl	80166cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f023 0307 	bic.w	r3, r3, #7
 8006a3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	617b      	str	r3, [r7, #20]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01f      	beq.n	8006aa6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	e012      	b.n	8006a92 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	7819      	ldrb	r1, [r3, #0]
 8006a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	3334      	adds	r3, #52	@ 0x34
 8006a7c:	460a      	mov	r2, r1
 8006a7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d006      	beq.n	8006a9a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2b0f      	cmp	r3, #15
 8006a96:	d9e9      	bls.n	8006a6c <prvInitialiseNewTask+0x66>
 8006a98:	e000      	b.n	8006a9c <prvInitialiseNewTask+0x96>
			{
				break;
 8006a9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006aa4:	e003      	b.n	8006aae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	2b37      	cmp	r3, #55	@ 0x37
 8006ab2:	d901      	bls.n	8006ab8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ab4:	2337      	movs	r3, #55	@ 0x37
 8006ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006abc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	3304      	adds	r3, #4
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff f966 	bl	8005da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	3318      	adds	r3, #24
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff f961 	bl	8005da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	2200      	movs	r2, #0
 8006af8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68f9      	ldr	r1, [r7, #12]
 8006b06:	69b8      	ldr	r0, [r7, #24]
 8006b08:	f001 f966 	bl	8007dd8 <pxPortInitialiseStack>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b1e:	bf00      	nop
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b30:	f001 fa82 	bl	8008038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b34:	4b2d      	ldr	r3, [pc, #180]	@ (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b46:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b4c:	4b27      	ldr	r3, [pc, #156]	@ (8006bec <prvAddNewTaskToReadyList+0xc4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d110      	bne.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b54:	f000 fc46 	bl	80073e4 <prvInitialiseTaskLists>
 8006b58:	e00d      	b.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b5a:	4b26      	ldr	r3, [pc, #152]	@ (8006bf4 <prvAddNewTaskToReadyList+0xcc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b62:	4b23      	ldr	r3, [pc, #140]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d802      	bhi.n	8006b76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b70:	4a1f      	ldr	r2, [pc, #124]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b76:	4b20      	ldr	r3, [pc, #128]	@ (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b80:	4b1d      	ldr	r3, [pc, #116]	@ (8006bf8 <prvAddNewTaskToReadyList+0xd0>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bfc <prvAddNewTaskToReadyList+0xd4>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <prvAddNewTaskToReadyList+0x74>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	4a18      	ldr	r2, [pc, #96]	@ (8006bfc <prvAddNewTaskToReadyList+0xd4>)
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4a15      	ldr	r2, [pc, #84]	@ (8006c00 <prvAddNewTaskToReadyList+0xd8>)
 8006baa:	441a      	add	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	4610      	mov	r0, r2
 8006bb4:	f7ff f901 	bl	8005dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bb8:	f001 fa70 	bl	800809c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf4 <prvAddNewTaskToReadyList+0xcc>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf0 <prvAddNewTaskToReadyList+0xc8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d207      	bcs.n	8006be2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c04 <prvAddNewTaskToReadyList+0xdc>)
 8006bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be2:	bf00      	nop
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	200054cc 	.word	0x200054cc
 8006bf0:	20004ff8 	.word	0x20004ff8
 8006bf4:	200054d8 	.word	0x200054d8
 8006bf8:	200054e8 	.word	0x200054e8
 8006bfc:	200054d4 	.word	0x200054d4
 8006c00:	20004ffc 	.word	0x20004ffc
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d018      	beq.n	8006c4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c1a:	4b14      	ldr	r3, [pc, #80]	@ (8006c6c <vTaskDelay+0x64>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <vTaskDelay+0x32>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60bb      	str	r3, [r7, #8]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c3a:	f000 f883 	bl	8006d44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c3e:	2100      	movs	r1, #0
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fd1b 	bl	800767c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c46:	f000 f88b 	bl	8006d60 <xTaskResumeAll>
 8006c4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d107      	bne.n	8006c62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006c52:	4b07      	ldr	r3, [pc, #28]	@ (8006c70 <vTaskDelay+0x68>)
 8006c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200054f4 	.word	0x200054f4
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	@ 0x28
 8006c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c82:	463a      	mov	r2, r7
 8006c84:	1d39      	adds	r1, r7, #4
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff f834 	bl	8005cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	4922      	ldr	r1, [pc, #136]	@ (8006d2c <vTaskStartScheduler+0xb8>)
 8006ca4:	4822      	ldr	r0, [pc, #136]	@ (8006d30 <vTaskStartScheduler+0xbc>)
 8006ca6:	f7ff fe09 	bl	80068bc <xTaskCreateStatic>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4a21      	ldr	r2, [pc, #132]	@ (8006d34 <vTaskStartScheduler+0xc0>)
 8006cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cb0:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <vTaskStartScheduler+0xc0>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e001      	b.n	8006cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cc8:	f000 fd2c 	bl	8007724 <xTimerCreateTimerTask>
 8006ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d116      	bne.n	8006d02 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	613b      	str	r3, [r7, #16]
}
 8006ce6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ce8:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <vTaskStartScheduler+0xc4>)
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006cee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cf0:	4b12      	ldr	r3, [pc, #72]	@ (8006d3c <vTaskStartScheduler+0xc8>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cf6:	4b12      	ldr	r3, [pc, #72]	@ (8006d40 <vTaskStartScheduler+0xcc>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cfc:	f001 f8f8 	bl	8007ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d00:	e00f      	b.n	8006d22 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d08:	d10b      	bne.n	8006d22 <vTaskStartScheduler+0xae>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	60fb      	str	r3, [r7, #12]
}
 8006d1c:	bf00      	nop
 8006d1e:	bf00      	nop
 8006d20:	e7fd      	b.n	8006d1e <vTaskStartScheduler+0xaa>
}
 8006d22:	bf00      	nop
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	0801769c 	.word	0x0801769c
 8006d30:	080073b5 	.word	0x080073b5
 8006d34:	200054f0 	.word	0x200054f0
 8006d38:	200054ec 	.word	0x200054ec
 8006d3c:	200054d8 	.word	0x200054d8
 8006d40:	200054d0 	.word	0x200054d0

08006d44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d48:	4b04      	ldr	r3, [pc, #16]	@ (8006d5c <vTaskSuspendAll+0x18>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	4a03      	ldr	r2, [pc, #12]	@ (8006d5c <vTaskSuspendAll+0x18>)
 8006d50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	200054f4 	.word	0x200054f4

08006d60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d6e:	4b42      	ldr	r3, [pc, #264]	@ (8006e78 <xTaskResumeAll+0x118>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <xTaskResumeAll+0x2e>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	603b      	str	r3, [r7, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	e7fd      	b.n	8006d8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d8e:	f001 f953 	bl	8008038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d92:	4b39      	ldr	r3, [pc, #228]	@ (8006e78 <xTaskResumeAll+0x118>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3b01      	subs	r3, #1
 8006d98:	4a37      	ldr	r2, [pc, #220]	@ (8006e78 <xTaskResumeAll+0x118>)
 8006d9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9c:	4b36      	ldr	r3, [pc, #216]	@ (8006e78 <xTaskResumeAll+0x118>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d162      	bne.n	8006e6a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006da4:	4b35      	ldr	r3, [pc, #212]	@ (8006e7c <xTaskResumeAll+0x11c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d05e      	beq.n	8006e6a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dac:	e02f      	b.n	8006e0e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dae:	4b34      	ldr	r3, [pc, #208]	@ (8006e80 <xTaskResumeAll+0x120>)
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3318      	adds	r3, #24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff f85a 	bl	8005e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff f855 	bl	8005e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dce:	4b2d      	ldr	r3, [pc, #180]	@ (8006e84 <xTaskResumeAll+0x124>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d903      	bls.n	8006dde <xTaskResumeAll+0x7e>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	4a2a      	ldr	r2, [pc, #168]	@ (8006e84 <xTaskResumeAll+0x124>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4a27      	ldr	r2, [pc, #156]	@ (8006e88 <xTaskResumeAll+0x128>)
 8006dec:	441a      	add	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f7fe ffe0 	bl	8005dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfe:	4b23      	ldr	r3, [pc, #140]	@ (8006e8c <xTaskResumeAll+0x12c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d302      	bcc.n	8006e0e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006e08:	4b21      	ldr	r3, [pc, #132]	@ (8006e90 <xTaskResumeAll+0x130>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e80 <xTaskResumeAll+0x120>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1cb      	bne.n	8006dae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e1c:	f000 fb80 	bl	8007520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e20:	4b1c      	ldr	r3, [pc, #112]	@ (8006e94 <xTaskResumeAll+0x134>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d010      	beq.n	8006e4e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e2c:	f000 f846 	bl	8006ebc <xTaskIncrementTick>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006e36:	4b16      	ldr	r3, [pc, #88]	@ (8006e90 <xTaskResumeAll+0x130>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f1      	bne.n	8006e2c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006e48:	4b12      	ldr	r3, [pc, #72]	@ (8006e94 <xTaskResumeAll+0x134>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e4e:	4b10      	ldr	r3, [pc, #64]	@ (8006e90 <xTaskResumeAll+0x130>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <xTaskResumeAll+0x138>)
 8006e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e6a:	f001 f917 	bl	800809c <vPortExitCritical>

	return xAlreadyYielded;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	200054f4 	.word	0x200054f4
 8006e7c:	200054cc 	.word	0x200054cc
 8006e80:	2000548c 	.word	0x2000548c
 8006e84:	200054d4 	.word	0x200054d4
 8006e88:	20004ffc 	.word	0x20004ffc
 8006e8c:	20004ff8 	.word	0x20004ff8
 8006e90:	200054e0 	.word	0x200054e0
 8006e94:	200054dc 	.word	0x200054dc
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ea2:	4b05      	ldr	r3, [pc, #20]	@ (8006eb8 <xTaskGetTickCount+0x1c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ea8:	687b      	ldr	r3, [r7, #4]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	200054d0 	.word	0x200054d0

08006ebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8007004 <xTaskIncrementTick+0x148>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f040 8090 	bne.w	8006ff0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8007008 <xTaskIncrementTick+0x14c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8007008 <xTaskIncrementTick+0x14c>)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d121      	bne.n	8006f28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ee4:	4b49      	ldr	r3, [pc, #292]	@ (800700c <xTaskIncrementTick+0x150>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	603b      	str	r3, [r7, #0]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <xTaskIncrementTick+0x46>
 8006f06:	4b41      	ldr	r3, [pc, #260]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	4b40      	ldr	r3, [pc, #256]	@ (8007010 <xTaskIncrementTick+0x154>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a3e      	ldr	r2, [pc, #248]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	4a3e      	ldr	r2, [pc, #248]	@ (8007010 <xTaskIncrementTick+0x154>)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007014 <xTaskIncrementTick+0x158>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	4a3c      	ldr	r2, [pc, #240]	@ (8007014 <xTaskIncrementTick+0x158>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	f000 fafc 	bl	8007520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f28:	4b3b      	ldr	r3, [pc, #236]	@ (8007018 <xTaskIncrementTick+0x15c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d349      	bcc.n	8006fc6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f32:	4b36      	ldr	r3, [pc, #216]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3c:	4b36      	ldr	r3, [pc, #216]	@ (8007018 <xTaskIncrementTick+0x15c>)
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f42:	601a      	str	r2, [r3, #0]
					break;
 8006f44:	e03f      	b.n	8006fc6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f46:	4b31      	ldr	r3, [pc, #196]	@ (800700c <xTaskIncrementTick+0x150>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d203      	bcs.n	8006f66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8007018 <xTaskIncrementTick+0x15c>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f64:	e02f      	b.n	8006fc6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe ff82 	bl	8005e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe ff79 	bl	8005e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	4b25      	ldr	r3, [pc, #148]	@ (800701c <xTaskIncrementTick+0x160>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d903      	bls.n	8006f96 <xTaskIncrementTick+0xda>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	4a22      	ldr	r2, [pc, #136]	@ (800701c <xTaskIncrementTick+0x160>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <xTaskIncrementTick+0x164>)
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7fe ff04 	bl	8005dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8007024 <xTaskIncrementTick+0x168>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d3b8      	bcc.n	8006f32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fc4:	e7b5      	b.n	8006f32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fc6:	4b17      	ldr	r3, [pc, #92]	@ (8007024 <xTaskIncrementTick+0x168>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fcc:	4914      	ldr	r1, [pc, #80]	@ (8007020 <xTaskIncrementTick+0x164>)
 8006fce:	4613      	mov	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d901      	bls.n	8006fe2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fe2:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <xTaskIncrementTick+0x16c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006fea:	2301      	movs	r3, #1
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e004      	b.n	8006ffa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800702c <xTaskIncrementTick+0x170>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800702c <xTaskIncrementTick+0x170>)
 8006ff8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006ffa:	697b      	ldr	r3, [r7, #20]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	200054f4 	.word	0x200054f4
 8007008:	200054d0 	.word	0x200054d0
 800700c:	20005484 	.word	0x20005484
 8007010:	20005488 	.word	0x20005488
 8007014:	200054e4 	.word	0x200054e4
 8007018:	200054ec 	.word	0x200054ec
 800701c:	200054d4 	.word	0x200054d4
 8007020:	20004ffc 	.word	0x20004ffc
 8007024:	20004ff8 	.word	0x20004ff8
 8007028:	200054e0 	.word	0x200054e0
 800702c:	200054dc 	.word	0x200054dc

08007030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007036:	4b28      	ldr	r3, [pc, #160]	@ (80070d8 <vTaskSwitchContext+0xa8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800703e:	4b27      	ldr	r3, [pc, #156]	@ (80070dc <vTaskSwitchContext+0xac>)
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007044:	e042      	b.n	80070cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007046:	4b25      	ldr	r3, [pc, #148]	@ (80070dc <vTaskSwitchContext+0xac>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704c:	4b24      	ldr	r3, [pc, #144]	@ (80070e0 <vTaskSwitchContext+0xb0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e011      	b.n	8007078 <vTaskSwitchContext+0x48>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10b      	bne.n	8007072 <vTaskSwitchContext+0x42>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	607b      	str	r3, [r7, #4]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <vTaskSwitchContext+0x3e>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3b01      	subs	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	491a      	ldr	r1, [pc, #104]	@ (80070e4 <vTaskSwitchContext+0xb4>)
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0e3      	beq.n	8007054 <vTaskSwitchContext+0x24>
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4a13      	ldr	r2, [pc, #76]	@ (80070e4 <vTaskSwitchContext+0xb4>)
 8007098:	4413      	add	r3, r2
 800709a:	60bb      	str	r3, [r7, #8]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	605a      	str	r2, [r3, #4]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	3308      	adds	r3, #8
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d104      	bne.n	80070bc <vTaskSwitchContext+0x8c>
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	605a      	str	r2, [r3, #4]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	4a09      	ldr	r2, [pc, #36]	@ (80070e8 <vTaskSwitchContext+0xb8>)
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	4a06      	ldr	r2, [pc, #24]	@ (80070e0 <vTaskSwitchContext+0xb0>)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6013      	str	r3, [r2, #0]
}
 80070cc:	bf00      	nop
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	200054f4 	.word	0x200054f4
 80070dc:	200054e0 	.word	0x200054e0
 80070e0:	200054d4 	.word	0x200054d4
 80070e4:	20004ffc 	.word	0x20004ffc
 80070e8:	20004ff8 	.word	0x20004ff8

080070ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	bf00      	nop
 8007112:	e7fd      	b.n	8007110 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007114:	4b07      	ldr	r3, [pc, #28]	@ (8007134 <vTaskPlaceOnEventList+0x48>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3318      	adds	r3, #24
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fe fe70 	bl	8005e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007122:	2101      	movs	r1, #1
 8007124:	6838      	ldr	r0, [r7, #0]
 8007126:	f000 faa9 	bl	800767c <prvAddCurrentTaskToDelayedList>
}
 800712a:	bf00      	nop
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20004ff8 	.word	0x20004ff8

08007138 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	617b      	str	r3, [r7, #20]
}
 800715c:	bf00      	nop
 800715e:	bf00      	nop
 8007160:	e7fd      	b.n	800715e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007162:	4b0a      	ldr	r3, [pc, #40]	@ (800718c <vTaskPlaceOnEventListRestricted+0x54>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3318      	adds	r3, #24
 8007168:	4619      	mov	r1, r3
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f7fe fe25 	bl	8005dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007176:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800717a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	68b8      	ldr	r0, [r7, #8]
 8007180:	f000 fa7c 	bl	800767c <prvAddCurrentTaskToDelayedList>
	}
 8007184:	bf00      	nop
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20004ff8 	.word	0x20004ff8

08007190 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3318      	adds	r3, #24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fe56 	bl	8005e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007240 <xTaskRemoveFromEventList+0xb0>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11d      	bne.n	800720c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fe4d 	bl	8005e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071de:	4b19      	ldr	r3, [pc, #100]	@ (8007244 <xTaskRemoveFromEventList+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d903      	bls.n	80071ee <xTaskRemoveFromEventList+0x5e>
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	4a16      	ldr	r2, [pc, #88]	@ (8007244 <xTaskRemoveFromEventList+0xb4>)
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4a13      	ldr	r2, [pc, #76]	@ (8007248 <xTaskRemoveFromEventList+0xb8>)
 80071fc:	441a      	add	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f7fe fdd8 	bl	8005dba <vListInsertEnd>
 800720a:	e005      	b.n	8007218 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	3318      	adds	r3, #24
 8007210:	4619      	mov	r1, r3
 8007212:	480e      	ldr	r0, [pc, #56]	@ (800724c <xTaskRemoveFromEventList+0xbc>)
 8007214:	f7fe fdd1 	bl	8005dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721c:	4b0c      	ldr	r3, [pc, #48]	@ (8007250 <xTaskRemoveFromEventList+0xc0>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	429a      	cmp	r2, r3
 8007224:	d905      	bls.n	8007232 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007226:	2301      	movs	r3, #1
 8007228:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800722a:	4b0a      	ldr	r3, [pc, #40]	@ (8007254 <xTaskRemoveFromEventList+0xc4>)
 800722c:	2201      	movs	r2, #1
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	e001      	b.n	8007236 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007236:	697b      	ldr	r3, [r7, #20]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	200054f4 	.word	0x200054f4
 8007244:	200054d4 	.word	0x200054d4
 8007248:	20004ffc 	.word	0x20004ffc
 800724c:	2000548c 	.word	0x2000548c
 8007250:	20004ff8 	.word	0x20004ff8
 8007254:	200054e0 	.word	0x200054e0

08007258 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10b      	bne.n	800727e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726a:	f383 8811 	msr	BASEPRI, r3
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	60fb      	str	r3, [r7, #12]
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	e7fd      	b.n	800727a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800727e:	f000 fedb 	bl	8008038 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007282:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <vTaskSetTimeOutState+0x48>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <vTaskSetTimeOutState+0x4c>)
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007292:	f000 ff03 	bl	800809c <vPortExitCritical>
}
 8007296:	bf00      	nop
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200054e4 	.word	0x200054e4
 80072a4:	200054d0 	.word	0x200054d0

080072a8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072b0:	4b06      	ldr	r3, [pc, #24]	@ (80072cc <vTaskInternalSetTimeOutState+0x24>)
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072b8:	4b05      	ldr	r3, [pc, #20]	@ (80072d0 <vTaskInternalSetTimeOutState+0x28>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	605a      	str	r2, [r3, #4]
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	200054e4 	.word	0x200054e4
 80072d0:	200054d0 	.word	0x200054d0

080072d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10b      	bne.n	80072fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	613b      	str	r3, [r7, #16]
}
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	e7fd      	b.n	80072f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	60fb      	str	r3, [r7, #12]
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	e7fd      	b.n	8007316 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800731a:	f000 fe8d 	bl	8008038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800731e:	4b1d      	ldr	r3, [pc, #116]	@ (8007394 <xTaskCheckForTimeOut+0xc0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007336:	d102      	bne.n	800733e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	61fb      	str	r3, [r7, #28]
 800733c:	e023      	b.n	8007386 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b15      	ldr	r3, [pc, #84]	@ (8007398 <xTaskCheckForTimeOut+0xc4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d007      	beq.n	800735a <xTaskCheckForTimeOut+0x86>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	d302      	bcc.n	800735a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	61fb      	str	r3, [r7, #28]
 8007358:	e015      	b.n	8007386 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	429a      	cmp	r2, r3
 8007362:	d20b      	bcs.n	800737c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff ff99 	bl	80072a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007376:	2300      	movs	r3, #0
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	e004      	b.n	8007386 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007382:	2301      	movs	r3, #1
 8007384:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007386:	f000 fe89 	bl	800809c <vPortExitCritical>

	return xReturn;
 800738a:	69fb      	ldr	r3, [r7, #28]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	200054d0 	.word	0x200054d0
 8007398:	200054e4 	.word	0x200054e4

0800739c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073a0:	4b03      	ldr	r3, [pc, #12]	@ (80073b0 <vTaskMissedYield+0x14>)
 80073a2:	2201      	movs	r2, #1
 80073a4:	601a      	str	r2, [r3, #0]
}
 80073a6:	bf00      	nop
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	200054e0 	.word	0x200054e0

080073b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073bc:	f000 f852 	bl	8007464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073c0:	4b06      	ldr	r3, [pc, #24]	@ (80073dc <prvIdleTask+0x28>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d9f9      	bls.n	80073bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <prvIdleTask+0x2c>)
 80073ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073d8:	e7f0      	b.n	80073bc <prvIdleTask+0x8>
 80073da:	bf00      	nop
 80073dc:	20004ffc 	.word	0x20004ffc
 80073e0:	e000ed04 	.word	0xe000ed04

080073e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073ea:	2300      	movs	r3, #0
 80073ec:	607b      	str	r3, [r7, #4]
 80073ee:	e00c      	b.n	800740a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4a12      	ldr	r2, [pc, #72]	@ (8007444 <prvInitialiseTaskLists+0x60>)
 80073fc:	4413      	add	r3, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fcae 	bl	8005d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	3301      	adds	r3, #1
 8007408:	607b      	str	r3, [r7, #4]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b37      	cmp	r3, #55	@ 0x37
 800740e:	d9ef      	bls.n	80073f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007410:	480d      	ldr	r0, [pc, #52]	@ (8007448 <prvInitialiseTaskLists+0x64>)
 8007412:	f7fe fca5 	bl	8005d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007416:	480d      	ldr	r0, [pc, #52]	@ (800744c <prvInitialiseTaskLists+0x68>)
 8007418:	f7fe fca2 	bl	8005d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800741c:	480c      	ldr	r0, [pc, #48]	@ (8007450 <prvInitialiseTaskLists+0x6c>)
 800741e:	f7fe fc9f 	bl	8005d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007422:	480c      	ldr	r0, [pc, #48]	@ (8007454 <prvInitialiseTaskLists+0x70>)
 8007424:	f7fe fc9c 	bl	8005d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007428:	480b      	ldr	r0, [pc, #44]	@ (8007458 <prvInitialiseTaskLists+0x74>)
 800742a:	f7fe fc99 	bl	8005d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800742e:	4b0b      	ldr	r3, [pc, #44]	@ (800745c <prvInitialiseTaskLists+0x78>)
 8007430:	4a05      	ldr	r2, [pc, #20]	@ (8007448 <prvInitialiseTaskLists+0x64>)
 8007432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007434:	4b0a      	ldr	r3, [pc, #40]	@ (8007460 <prvInitialiseTaskLists+0x7c>)
 8007436:	4a05      	ldr	r2, [pc, #20]	@ (800744c <prvInitialiseTaskLists+0x68>)
 8007438:	601a      	str	r2, [r3, #0]
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20004ffc 	.word	0x20004ffc
 8007448:	2000545c 	.word	0x2000545c
 800744c:	20005470 	.word	0x20005470
 8007450:	2000548c 	.word	0x2000548c
 8007454:	200054a0 	.word	0x200054a0
 8007458:	200054b8 	.word	0x200054b8
 800745c:	20005484 	.word	0x20005484
 8007460:	20005488 	.word	0x20005488

08007464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800746a:	e019      	b.n	80074a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800746c:	f000 fde4 	bl	8008038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007470:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <prvCheckTasksWaitingTermination+0x50>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe fcf9 	bl	8005e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007482:	4b0d      	ldr	r3, [pc, #52]	@ (80074b8 <prvCheckTasksWaitingTermination+0x54>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3b01      	subs	r3, #1
 8007488:	4a0b      	ldr	r2, [pc, #44]	@ (80074b8 <prvCheckTasksWaitingTermination+0x54>)
 800748a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800748c:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <prvCheckTasksWaitingTermination+0x58>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3b01      	subs	r3, #1
 8007492:	4a0a      	ldr	r2, [pc, #40]	@ (80074bc <prvCheckTasksWaitingTermination+0x58>)
 8007494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007496:	f000 fe01 	bl	800809c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f810 	bl	80074c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074a0:	4b06      	ldr	r3, [pc, #24]	@ (80074bc <prvCheckTasksWaitingTermination+0x58>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e1      	bne.n	800746c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	200054a0 	.word	0x200054a0
 80074b8:	200054cc 	.word	0x200054cc
 80074bc:	200054b4 	.word	0x200054b4

080074c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d108      	bne.n	80074e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 ff9e 	bl	8008418 <vPortFree>
				vPortFree( pxTCB );
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 ff9b 	bl	8008418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074e2:	e019      	b.n	8007518 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d103      	bne.n	80074f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 ff92 	bl	8008418 <vPortFree>
	}
 80074f4:	e010      	b.n	8007518 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d00b      	beq.n	8007518 <prvDeleteTCB+0x58>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <prvDeleteTCB+0x54>
	}
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007526:	4b0c      	ldr	r3, [pc, #48]	@ (8007558 <prvResetNextTaskUnblockTime+0x38>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007530:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <prvResetNextTaskUnblockTime+0x3c>)
 8007532:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007536:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007538:	e008      	b.n	800754c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753a:	4b07      	ldr	r3, [pc, #28]	@ (8007558 <prvResetNextTaskUnblockTime+0x38>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	4a04      	ldr	r2, [pc, #16]	@ (800755c <prvResetNextTaskUnblockTime+0x3c>)
 800754a:	6013      	str	r3, [r2, #0]
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20005484 	.word	0x20005484
 800755c:	200054ec 	.word	0x200054ec

08007560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007566:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <xTaskGetSchedulerState+0x34>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800756e:	2301      	movs	r3, #1
 8007570:	607b      	str	r3, [r7, #4]
 8007572:	e008      	b.n	8007586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007574:	4b08      	ldr	r3, [pc, #32]	@ (8007598 <xTaskGetSchedulerState+0x38>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800757c:	2302      	movs	r3, #2
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	e001      	b.n	8007586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007582:	2300      	movs	r3, #0
 8007584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007586:	687b      	ldr	r3, [r7, #4]
	}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	200054d8 	.word	0x200054d8
 8007598:	200054f4 	.word	0x200054f4

0800759c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d058      	beq.n	8007664 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007670 <xTaskPriorityDisinherit+0xd4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d00b      	beq.n	80075d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60fb      	str	r3, [r7, #12]
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10b      	bne.n	80075f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60bb      	str	r3, [r7, #8]
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f8:	1e5a      	subs	r2, r3, #1
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007606:	429a      	cmp	r2, r3
 8007608:	d02c      	beq.n	8007664 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800760e:	2b00      	cmp	r3, #0
 8007610:	d128      	bne.n	8007664 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	3304      	adds	r3, #4
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fc2c 	bl	8005e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007634:	4b0f      	ldr	r3, [pc, #60]	@ (8007674 <xTaskPriorityDisinherit+0xd8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d903      	bls.n	8007644 <xTaskPriorityDisinherit+0xa8>
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	4a0c      	ldr	r2, [pc, #48]	@ (8007674 <xTaskPriorityDisinherit+0xd8>)
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4a09      	ldr	r2, [pc, #36]	@ (8007678 <xTaskPriorityDisinherit+0xdc>)
 8007652:	441a      	add	r2, r3
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	3304      	adds	r3, #4
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7fe fbad 	bl	8005dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007664:	697b      	ldr	r3, [r7, #20]
	}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20004ff8 	.word	0x20004ff8
 8007674:	200054d4 	.word	0x200054d4
 8007678:	20004ffc 	.word	0x20004ffc

0800767c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007686:	4b21      	ldr	r3, [pc, #132]	@ (800770c <prvAddCurrentTaskToDelayedList+0x90>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800768c:	4b20      	ldr	r3, [pc, #128]	@ (8007710 <prvAddCurrentTaskToDelayedList+0x94>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3304      	adds	r3, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fbee 	bl	8005e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800769e:	d10a      	bne.n	80076b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4819      	ldr	r0, [pc, #100]	@ (8007714 <prvAddCurrentTaskToDelayedList+0x98>)
 80076b0:	f7fe fb83 	bl	8005dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076b4:	e026      	b.n	8007704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4413      	add	r3, r2
 80076bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076be:	4b14      	ldr	r3, [pc, #80]	@ (8007710 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d209      	bcs.n	80076e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076ce:	4b12      	ldr	r3, [pc, #72]	@ (8007718 <prvAddCurrentTaskToDelayedList+0x9c>)
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007710 <prvAddCurrentTaskToDelayedList+0x94>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe fb91 	bl	8005e02 <vListInsert>
}
 80076e0:	e010      	b.n	8007704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076e2:	4b0e      	ldr	r3, [pc, #56]	@ (800771c <prvAddCurrentTaskToDelayedList+0xa0>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007710 <prvAddCurrentTaskToDelayedList+0x94>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f7fe fb87 	bl	8005e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007720 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d202      	bcs.n	8007704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076fe:	4a08      	ldr	r2, [pc, #32]	@ (8007720 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	6013      	str	r3, [r2, #0]
}
 8007704:	bf00      	nop
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200054d0 	.word	0x200054d0
 8007710:	20004ff8 	.word	0x20004ff8
 8007714:	200054b8 	.word	0x200054b8
 8007718:	20005488 	.word	0x20005488
 800771c:	20005484 	.word	0x20005484
 8007720:	200054ec 	.word	0x200054ec

08007724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	@ 0x28
 8007728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800772e:	f000 fb13 	bl	8007d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007732:	4b1d      	ldr	r3, [pc, #116]	@ (80077a8 <xTimerCreateTimerTask+0x84>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d021      	beq.n	800777e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007742:	1d3a      	adds	r2, r7, #4
 8007744:	f107 0108 	add.w	r1, r7, #8
 8007748:	f107 030c 	add.w	r3, r7, #12
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe faed 	bl	8005d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	9202      	str	r2, [sp, #8]
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	2302      	movs	r3, #2
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	2300      	movs	r3, #0
 8007762:	460a      	mov	r2, r1
 8007764:	4911      	ldr	r1, [pc, #68]	@ (80077ac <xTimerCreateTimerTask+0x88>)
 8007766:	4812      	ldr	r0, [pc, #72]	@ (80077b0 <xTimerCreateTimerTask+0x8c>)
 8007768:	f7ff f8a8 	bl	80068bc <xTaskCreateStatic>
 800776c:	4603      	mov	r3, r0
 800776e:	4a11      	ldr	r2, [pc, #68]	@ (80077b4 <xTimerCreateTimerTask+0x90>)
 8007770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007772:	4b10      	ldr	r3, [pc, #64]	@ (80077b4 <xTimerCreateTimerTask+0x90>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800777a:	2301      	movs	r3, #1
 800777c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10b      	bne.n	800779c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	613b      	str	r3, [r7, #16]
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	e7fd      	b.n	8007798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800779c:	697b      	ldr	r3, [r7, #20]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20005528 	.word	0x20005528
 80077ac:	080176a4 	.word	0x080176a4
 80077b0:	080078f1 	.word	0x080078f1
 80077b4:	2000552c 	.word	0x2000552c

080077b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	@ 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
 80077c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10b      	bne.n	80077e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	623b      	str	r3, [r7, #32]
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	e7fd      	b.n	80077e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077e8:	4b19      	ldr	r3, [pc, #100]	@ (8007850 <xTimerGenericCommand+0x98>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d02a      	beq.n	8007846 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b05      	cmp	r3, #5
 8007800:	dc18      	bgt.n	8007834 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007802:	f7ff fead 	bl	8007560 <xTaskGetSchedulerState>
 8007806:	4603      	mov	r3, r0
 8007808:	2b02      	cmp	r3, #2
 800780a:	d109      	bne.n	8007820 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800780c:	4b10      	ldr	r3, [pc, #64]	@ (8007850 <xTimerGenericCommand+0x98>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	f107 0110 	add.w	r1, r7, #16
 8007814:	2300      	movs	r3, #0
 8007816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007818:	f7fe fc60 	bl	80060dc <xQueueGenericSend>
 800781c:	6278      	str	r0, [r7, #36]	@ 0x24
 800781e:	e012      	b.n	8007846 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007820:	4b0b      	ldr	r3, [pc, #44]	@ (8007850 <xTimerGenericCommand+0x98>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	f107 0110 	add.w	r1, r7, #16
 8007828:	2300      	movs	r3, #0
 800782a:	2200      	movs	r2, #0
 800782c:	f7fe fc56 	bl	80060dc <xQueueGenericSend>
 8007830:	6278      	str	r0, [r7, #36]	@ 0x24
 8007832:	e008      	b.n	8007846 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007834:	4b06      	ldr	r3, [pc, #24]	@ (8007850 <xTimerGenericCommand+0x98>)
 8007836:	6818      	ldr	r0, [r3, #0]
 8007838:	f107 0110 	add.w	r1, r7, #16
 800783c:	2300      	movs	r3, #0
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	f7fe fd4e 	bl	80062e0 <xQueueGenericSendFromISR>
 8007844:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007848:	4618      	mov	r0, r3
 800784a:	3728      	adds	r7, #40	@ 0x28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20005528 	.word	0x20005528

08007854 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800785e:	4b23      	ldr	r3, [pc, #140]	@ (80078ec <prvProcessExpiredTimer+0x98>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	3304      	adds	r3, #4
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fb01 	bl	8005e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d023      	beq.n	80078c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	699a      	ldr	r2, [r3, #24]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	18d1      	adds	r1, r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	6978      	ldr	r0, [r7, #20]
 800788e:	f000 f8d5 	bl	8007a3c <prvInsertTimerInActiveList>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007898:	2300      	movs	r3, #0
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	2300      	movs	r3, #0
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	2100      	movs	r1, #0
 80078a2:	6978      	ldr	r0, [r7, #20]
 80078a4:	f7ff ff88 	bl	80077b8 <xTimerGenericCommand>
 80078a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d114      	bne.n	80078da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	60fb      	str	r3, [r7, #12]
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	4798      	blx	r3
}
 80078e2:	bf00      	nop
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20005520 	.word	0x20005520

080078f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 f859 	bl	80079b4 <prvGetNextExpireTime>
 8007902:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4619      	mov	r1, r3
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f805 	bl	8007918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800790e:	f000 f8d7 	bl	8007ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007912:	bf00      	nop
 8007914:	e7f0      	b.n	80078f8 <prvTimerTask+0x8>
	...

08007918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007922:	f7ff fa0f 	bl	8006d44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007926:	f107 0308 	add.w	r3, r7, #8
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f866 	bl	80079fc <prvSampleTimeNow>
 8007930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d130      	bne.n	800799a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <prvProcessTimerOrBlockTask+0x3c>
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	429a      	cmp	r2, r3
 8007944:	d806      	bhi.n	8007954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007946:	f7ff fa0b 	bl	8006d60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ff81 	bl	8007854 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007952:	e024      	b.n	800799e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d008      	beq.n	800796c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800795a:	4b13      	ldr	r3, [pc, #76]	@ (80079a8 <prvProcessTimerOrBlockTask+0x90>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <prvProcessTimerOrBlockTask+0x50>
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <prvProcessTimerOrBlockTask+0x52>
 8007968:	2300      	movs	r3, #0
 800796a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800796c:	4b0f      	ldr	r3, [pc, #60]	@ (80079ac <prvProcessTimerOrBlockTask+0x94>)
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	f7fe ff6b 	bl	8006854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800797e:	f7ff f9ef 	bl	8006d60 <xTaskResumeAll>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007988:	4b09      	ldr	r3, [pc, #36]	@ (80079b0 <prvProcessTimerOrBlockTask+0x98>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
}
 8007998:	e001      	b.n	800799e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800799a:	f7ff f9e1 	bl	8006d60 <xTaskResumeAll>
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20005524 	.word	0x20005524
 80079ac:	20005528 	.word	0x20005528
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079bc:	4b0e      	ldr	r3, [pc, #56]	@ (80079f8 <prvGetNextExpireTime+0x44>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <prvGetNextExpireTime+0x16>
 80079c6:	2201      	movs	r2, #1
 80079c8:	e000      	b.n	80079cc <prvGetNextExpireTime+0x18>
 80079ca:	2200      	movs	r2, #0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079d8:	4b07      	ldr	r3, [pc, #28]	@ (80079f8 <prvGetNextExpireTime+0x44>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	e001      	b.n	80079e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079e8:	68fb      	ldr	r3, [r7, #12]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	20005520 	.word	0x20005520

080079fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a04:	f7ff fa4a 	bl	8006e9c <xTaskGetTickCount>
 8007a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a38 <prvSampleTimeNow+0x3c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d205      	bcs.n	8007a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a14:	f000 f93a 	bl	8007c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	e002      	b.n	8007a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a26:	4a04      	ldr	r2, [pc, #16]	@ (8007a38 <prvSampleTimeNow+0x3c>)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20005530 	.word	0x20005530

08007a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d812      	bhi.n	8007a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	1ad2      	subs	r2, r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d302      	bcc.n	8007a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a70:	2301      	movs	r3, #1
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	e01b      	b.n	8007aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a76:	4b10      	ldr	r3, [pc, #64]	@ (8007ab8 <prvInsertTimerInActiveList+0x7c>)
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	4610      	mov	r0, r2
 8007a82:	f7fe f9be 	bl	8005e02 <vListInsert>
 8007a86:	e012      	b.n	8007aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d206      	bcs.n	8007a9e <prvInsertTimerInActiveList+0x62>
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d302      	bcc.n	8007a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e007      	b.n	8007aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a9e:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <prvInsertTimerInActiveList+0x80>)
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fe f9aa 	bl	8005e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007aae:	697b      	ldr	r3, [r7, #20]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20005524 	.word	0x20005524
 8007abc:	20005520 	.word	0x20005520

08007ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	@ 0x38
 8007ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ac6:	e0ce      	b.n	8007c66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da19      	bge.n	8007b02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ace:	1d3b      	adds	r3, r7, #4
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	61fb      	str	r3, [r7, #28]
}
 8007aec:	bf00      	nop
 8007aee:	bf00      	nop
 8007af0:	e7fd      	b.n	8007aee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007af8:	6850      	ldr	r0, [r2, #4]
 8007afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007afc:	6892      	ldr	r2, [r2, #8]
 8007afe:	4611      	mov	r1, r2
 8007b00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f2c0 80ae 	blt.w	8007c66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d004      	beq.n	8007b20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe f9aa 	bl	8005e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b20:	463b      	mov	r3, r7
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff ff6a 	bl	80079fc <prvSampleTimeNow>
 8007b28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b09      	cmp	r3, #9
 8007b2e:	f200 8097 	bhi.w	8007c60 <prvProcessReceivedCommands+0x1a0>
 8007b32:	a201      	add	r2, pc, #4	@ (adr r2, 8007b38 <prvProcessReceivedCommands+0x78>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b61 	.word	0x08007b61
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b61 	.word	0x08007b61
 8007b44:	08007bd7 	.word	0x08007bd7
 8007b48:	08007beb 	.word	0x08007beb
 8007b4c:	08007c37 	.word	0x08007c37
 8007b50:	08007b61 	.word	0x08007b61
 8007b54:	08007b61 	.word	0x08007b61
 8007b58:	08007bd7 	.word	0x08007bd7
 8007b5c:	08007beb 	.word	0x08007beb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	18d1      	adds	r1, r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b80:	f7ff ff5c 	bl	8007a3c <prvInsertTimerInActiveList>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d06c      	beq.n	8007c64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d061      	beq.n	8007c64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	441a      	add	r2, r3
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	2100      	movs	r1, #0
 8007bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb2:	f7ff fe01 	bl	80077b8 <xTimerGenericCommand>
 8007bb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d152      	bne.n	8007c64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	61bb      	str	r3, [r7, #24]
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	e7fd      	b.n	8007bd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bdc:	f023 0301 	bic.w	r3, r3, #1
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007be8:	e03d      	b.n	8007c66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	617b      	str	r3, [r7, #20]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	18d1      	adds	r1, r2, r3
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c30:	f7ff ff04 	bl	8007a3c <prvInsertTimerInActiveList>
					break;
 8007c34:	e017      	b.n	8007c66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c3c:	f003 0302 	and.w	r3, r3, #2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d103      	bne.n	8007c4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c46:	f000 fbe7 	bl	8008418 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c4a:	e00c      	b.n	8007c66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c5e:	e002      	b.n	8007c66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007c60:	bf00      	nop
 8007c62:	e000      	b.n	8007c66 <prvProcessReceivedCommands+0x1a6>
					break;
 8007c64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c66:	4b08      	ldr	r3, [pc, #32]	@ (8007c88 <prvProcessReceivedCommands+0x1c8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	1d39      	adds	r1, r7, #4
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fbd4 	bl	800641c <xQueueReceive>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f47f af26 	bne.w	8007ac8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	3730      	adds	r7, #48	@ 0x30
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20005528 	.word	0x20005528

08007c8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c92:	e049      	b.n	8007d28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c94:	4b2e      	ldr	r3, [pc, #184]	@ (8007d50 <prvSwitchTimerLists+0xc4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8007d50 <prvSwitchTimerLists+0xc4>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe f8e1 	bl	8005e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cc0:	f003 0304 	and.w	r3, r3, #4
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02f      	beq.n	8007d28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4413      	add	r3, r2
 8007cd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d90e      	bls.n	8007cf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d50 <prvSwitchTimerLists+0xc4>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fe f886 	bl	8005e02 <vListInsert>
 8007cf6:	e017      	b.n	8007d28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	2100      	movs	r1, #0
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f7ff fd58 	bl	80077b8 <xTimerGenericCommand>
 8007d08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10b      	bne.n	8007d28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	603b      	str	r3, [r7, #0]
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	e7fd      	b.n	8007d24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d28:	4b09      	ldr	r3, [pc, #36]	@ (8007d50 <prvSwitchTimerLists+0xc4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1b0      	bne.n	8007c94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d32:	4b07      	ldr	r3, [pc, #28]	@ (8007d50 <prvSwitchTimerLists+0xc4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <prvSwitchTimerLists+0xc8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a04      	ldr	r2, [pc, #16]	@ (8007d50 <prvSwitchTimerLists+0xc4>)
 8007d3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d40:	4a04      	ldr	r2, [pc, #16]	@ (8007d54 <prvSwitchTimerLists+0xc8>)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6013      	str	r3, [r2, #0]
}
 8007d46:	bf00      	nop
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20005520 	.word	0x20005520
 8007d54:	20005524 	.word	0x20005524

08007d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d5e:	f000 f96b 	bl	8008038 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d62:	4b15      	ldr	r3, [pc, #84]	@ (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d120      	bne.n	8007dac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d6a:	4814      	ldr	r0, [pc, #80]	@ (8007dbc <prvCheckForValidListAndQueue+0x64>)
 8007d6c:	f7fd fff8 	bl	8005d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d70:	4813      	ldr	r0, [pc, #76]	@ (8007dc0 <prvCheckForValidListAndQueue+0x68>)
 8007d72:	f7fd fff5 	bl	8005d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d76:	4b13      	ldr	r3, [pc, #76]	@ (8007dc4 <prvCheckForValidListAndQueue+0x6c>)
 8007d78:	4a10      	ldr	r2, [pc, #64]	@ (8007dbc <prvCheckForValidListAndQueue+0x64>)
 8007d7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d7c:	4b12      	ldr	r3, [pc, #72]	@ (8007dc8 <prvCheckForValidListAndQueue+0x70>)
 8007d7e:	4a10      	ldr	r2, [pc, #64]	@ (8007dc0 <prvCheckForValidListAndQueue+0x68>)
 8007d80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d82:	2300      	movs	r3, #0
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4b11      	ldr	r3, [pc, #68]	@ (8007dcc <prvCheckForValidListAndQueue+0x74>)
 8007d88:	4a11      	ldr	r2, [pc, #68]	@ (8007dd0 <prvCheckForValidListAndQueue+0x78>)
 8007d8a:	2110      	movs	r1, #16
 8007d8c:	200a      	movs	r0, #10
 8007d8e:	f7fe f905 	bl	8005f9c <xQueueGenericCreateStatic>
 8007d92:	4603      	mov	r3, r0
 8007d94:	4a08      	ldr	r2, [pc, #32]	@ (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d98:	4b07      	ldr	r3, [pc, #28]	@ (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007da0:	4b05      	ldr	r3, [pc, #20]	@ (8007db8 <prvCheckForValidListAndQueue+0x60>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	490b      	ldr	r1, [pc, #44]	@ (8007dd4 <prvCheckForValidListAndQueue+0x7c>)
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fd2a 	bl	8006800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dac:	f000 f976 	bl	800809c <vPortExitCritical>
}
 8007db0:	bf00      	nop
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20005528 	.word	0x20005528
 8007dbc:	200054f8 	.word	0x200054f8
 8007dc0:	2000550c 	.word	0x2000550c
 8007dc4:	20005520 	.word	0x20005520
 8007dc8:	20005524 	.word	0x20005524
 8007dcc:	200055d4 	.word	0x200055d4
 8007dd0:	20005534 	.word	0x20005534
 8007dd4:	080176ac 	.word	0x080176ac

08007dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3b04      	subs	r3, #4
 8007de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f023 0201 	bic.w	r2, r3, #1
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3b04      	subs	r3, #4
 8007e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e08:	4a0c      	ldr	r2, [pc, #48]	@ (8007e3c <pxPortInitialiseStack+0x64>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3b14      	subs	r3, #20
 8007e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3b04      	subs	r3, #4
 8007e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f06f 0202 	mvn.w	r2, #2
 8007e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3b20      	subs	r3, #32
 8007e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	08007e41 	.word	0x08007e41

08007e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e4a:	4b13      	ldr	r3, [pc, #76]	@ (8007e98 <prvTaskExitError+0x58>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e52:	d00b      	beq.n	8007e6c <prvTaskExitError+0x2c>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	60fb      	str	r3, [r7, #12]
}
 8007e66:	bf00      	nop
 8007e68:	bf00      	nop
 8007e6a:	e7fd      	b.n	8007e68 <prvTaskExitError+0x28>
	__asm volatile
 8007e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	60bb      	str	r3, [r7, #8]
}
 8007e7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e80:	bf00      	nop
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0fc      	beq.n	8007e82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	20000014 	.word	0x20000014
 8007e9c:	00000000 	.word	0x00000000

08007ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ea0:	4b07      	ldr	r3, [pc, #28]	@ (8007ec0 <pxCurrentTCBConst2>)
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	6808      	ldr	r0, [r1, #0]
 8007ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eaa:	f380 8809 	msr	PSP, r0
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f04f 0000 	mov.w	r0, #0
 8007eb6:	f380 8811 	msr	BASEPRI, r0
 8007eba:	4770      	bx	lr
 8007ebc:	f3af 8000 	nop.w

08007ec0 <pxCurrentTCBConst2>:
 8007ec0:	20004ff8 	.word	0x20004ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop

08007ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ec8:	4808      	ldr	r0, [pc, #32]	@ (8007eec <prvPortStartFirstTask+0x24>)
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	6800      	ldr	r0, [r0, #0]
 8007ece:	f380 8808 	msr	MSP, r0
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	f380 8814 	msr	CONTROL, r0
 8007eda:	b662      	cpsie	i
 8007edc:	b661      	cpsie	f
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	df00      	svc	0
 8007ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007eea:	bf00      	nop
 8007eec:	e000ed08 	.word	0xe000ed08

08007ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ef6:	4b47      	ldr	r3, [pc, #284]	@ (8008014 <xPortStartScheduler+0x124>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a47      	ldr	r2, [pc, #284]	@ (8008018 <xPortStartScheduler+0x128>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10b      	bne.n	8007f18 <xPortStartScheduler+0x28>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	613b      	str	r3, [r7, #16]
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	e7fd      	b.n	8007f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f18:	4b3e      	ldr	r3, [pc, #248]	@ (8008014 <xPortStartScheduler+0x124>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800801c <xPortStartScheduler+0x12c>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d10b      	bne.n	8007f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	60fb      	str	r3, [r7, #12]
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop
 8007f38:	e7fd      	b.n	8007f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f3a:	4b39      	ldr	r3, [pc, #228]	@ (8008020 <xPortStartScheduler+0x130>)
 8007f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	22ff      	movs	r2, #255	@ 0xff
 8007f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	4b31      	ldr	r3, [pc, #196]	@ (8008024 <xPortStartScheduler+0x134>)
 8007f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f62:	4b31      	ldr	r3, [pc, #196]	@ (8008028 <xPortStartScheduler+0x138>)
 8007f64:	2207      	movs	r2, #7
 8007f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f68:	e009      	b.n	8007f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8008028 <xPortStartScheduler+0x138>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	4a2d      	ldr	r2, [pc, #180]	@ (8008028 <xPortStartScheduler+0x138>)
 8007f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f7e:	78fb      	ldrb	r3, [r7, #3]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f86:	2b80      	cmp	r3, #128	@ 0x80
 8007f88:	d0ef      	beq.n	8007f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f8a:	4b27      	ldr	r3, [pc, #156]	@ (8008028 <xPortStartScheduler+0x138>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1c3 0307 	rsb	r3, r3, #7
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d00b      	beq.n	8007fae <xPortStartScheduler+0xbe>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	60bb      	str	r3, [r7, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	e7fd      	b.n	8007faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fae:	4b1e      	ldr	r3, [pc, #120]	@ (8008028 <xPortStartScheduler+0x138>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008028 <xPortStartScheduler+0x138>)
 8007fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8008028 <xPortStartScheduler+0x138>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007fc0:	4a19      	ldr	r2, [pc, #100]	@ (8008028 <xPortStartScheduler+0x138>)
 8007fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fcc:	4b17      	ldr	r3, [pc, #92]	@ (800802c <xPortStartScheduler+0x13c>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a16      	ldr	r2, [pc, #88]	@ (800802c <xPortStartScheduler+0x13c>)
 8007fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007fd8:	4b14      	ldr	r3, [pc, #80]	@ (800802c <xPortStartScheduler+0x13c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a13      	ldr	r2, [pc, #76]	@ (800802c <xPortStartScheduler+0x13c>)
 8007fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007fe4:	f000 f8da 	bl	800819c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007fe8:	4b11      	ldr	r3, [pc, #68]	@ (8008030 <xPortStartScheduler+0x140>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007fee:	f000 f8f9 	bl	80081e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ff2:	4b10      	ldr	r3, [pc, #64]	@ (8008034 <xPortStartScheduler+0x144>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8008034 <xPortStartScheduler+0x144>)
 8007ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ffe:	f7ff ff63 	bl	8007ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008002:	f7ff f815 	bl	8007030 <vTaskSwitchContext>
	prvTaskExitError();
 8008006:	f7ff ff1b 	bl	8007e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	e000ed00 	.word	0xe000ed00
 8008018:	410fc271 	.word	0x410fc271
 800801c:	410fc270 	.word	0x410fc270
 8008020:	e000e400 	.word	0xe000e400
 8008024:	20005624 	.word	0x20005624
 8008028:	20005628 	.word	0x20005628
 800802c:	e000ed20 	.word	0xe000ed20
 8008030:	20000014 	.word	0x20000014
 8008034:	e000ef34 	.word	0xe000ef34

08008038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	607b      	str	r3, [r7, #4]
}
 8008050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008052:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <vPortEnterCritical+0x5c>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	4a0e      	ldr	r2, [pc, #56]	@ (8008094 <vPortEnterCritical+0x5c>)
 800805a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800805c:	4b0d      	ldr	r3, [pc, #52]	@ (8008094 <vPortEnterCritical+0x5c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d110      	bne.n	8008086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008064:	4b0c      	ldr	r3, [pc, #48]	@ (8008098 <vPortEnterCritical+0x60>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <vPortEnterCritical+0x4e>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	603b      	str	r3, [r7, #0]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <vPortEnterCritical+0x4a>
	}
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000014 	.word	0x20000014
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080a2:	4b12      	ldr	r3, [pc, #72]	@ (80080ec <vPortExitCritical+0x50>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10b      	bne.n	80080c2 <vPortExitCritical+0x26>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	607b      	str	r3, [r7, #4]
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	e7fd      	b.n	80080be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080c2:	4b0a      	ldr	r3, [pc, #40]	@ (80080ec <vPortExitCritical+0x50>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	4a08      	ldr	r2, [pc, #32]	@ (80080ec <vPortExitCritical+0x50>)
 80080ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080cc:	4b07      	ldr	r3, [pc, #28]	@ (80080ec <vPortExitCritical+0x50>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <vPortExitCritical+0x44>
 80080d4:	2300      	movs	r3, #0
 80080d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	f383 8811 	msr	BASEPRI, r3
}
 80080de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000014 	.word	0x20000014

080080f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80080f0:	f3ef 8009 	mrs	r0, PSP
 80080f4:	f3bf 8f6f 	isb	sy
 80080f8:	4b15      	ldr	r3, [pc, #84]	@ (8008150 <pxCurrentTCBConst>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	f01e 0f10 	tst.w	lr, #16
 8008100:	bf08      	it	eq
 8008102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	6010      	str	r0, [r2, #0]
 800810c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008114:	f380 8811 	msr	BASEPRI, r0
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f7fe ff86 	bl	8007030 <vTaskSwitchContext>
 8008124:	f04f 0000 	mov.w	r0, #0
 8008128:	f380 8811 	msr	BASEPRI, r0
 800812c:	bc09      	pop	{r0, r3}
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008136:	f01e 0f10 	tst.w	lr, #16
 800813a:	bf08      	it	eq
 800813c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008140:	f380 8809 	msr	PSP, r0
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w

08008150 <pxCurrentTCBConst>:
 8008150:	20004ff8 	.word	0x20004ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop

08008158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	607b      	str	r3, [r7, #4]
}
 8008170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008172:	f7fe fea3 	bl	8006ebc <xTaskIncrementTick>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800817c:	4b06      	ldr	r3, [pc, #24]	@ (8008198 <xPortSysTickHandler+0x40>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	2300      	movs	r3, #0
 8008186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f383 8811 	msr	BASEPRI, r3
}
 800818e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	e000ed04 	.word	0xe000ed04

0800819c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081a0:	4b0b      	ldr	r3, [pc, #44]	@ (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <vPortSetupTimerInterrupt+0x38>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <vPortSetupTimerInterrupt+0x3c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a0a      	ldr	r2, [pc, #40]	@ (80081dc <vPortSetupTimerInterrupt+0x40>)
 80081b2:	fba2 2303 	umull	r2, r3, r2, r3
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	4a09      	ldr	r2, [pc, #36]	@ (80081e0 <vPortSetupTimerInterrupt+0x44>)
 80081ba:	3b01      	subs	r3, #1
 80081bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081be:	4b04      	ldr	r3, [pc, #16]	@ (80081d0 <vPortSetupTimerInterrupt+0x34>)
 80081c0:	2207      	movs	r2, #7
 80081c2:	601a      	str	r2, [r3, #0]
}
 80081c4:	bf00      	nop
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	e000e010 	.word	0xe000e010
 80081d4:	e000e018 	.word	0xe000e018
 80081d8:	20000008 	.word	0x20000008
 80081dc:	10624dd3 	.word	0x10624dd3
 80081e0:	e000e014 	.word	0xe000e014

080081e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80081f4 <vPortEnableVFP+0x10>
 80081e8:	6801      	ldr	r1, [r0, #0]
 80081ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80081ee:	6001      	str	r1, [r0, #0]
 80081f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081f2:	bf00      	nop
 80081f4:	e000ed88 	.word	0xe000ed88

080081f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081fe:	f3ef 8305 	mrs	r3, IPSR
 8008202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b0f      	cmp	r3, #15
 8008208:	d915      	bls.n	8008236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800820a:	4a18      	ldr	r2, [pc, #96]	@ (800826c <vPortValidateInterruptPriority+0x74>)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008214:	4b16      	ldr	r3, [pc, #88]	@ (8008270 <vPortValidateInterruptPriority+0x78>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	7afa      	ldrb	r2, [r7, #11]
 800821a:	429a      	cmp	r2, r3
 800821c:	d20b      	bcs.n	8008236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008236:	4b0f      	ldr	r3, [pc, #60]	@ (8008274 <vPortValidateInterruptPriority+0x7c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800823e:	4b0e      	ldr	r3, [pc, #56]	@ (8008278 <vPortValidateInterruptPriority+0x80>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d90b      	bls.n	800825e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	603b      	str	r3, [r7, #0]
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	e7fd      	b.n	800825a <vPortValidateInterruptPriority+0x62>
	}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	e000e3f0 	.word	0xe000e3f0
 8008270:	20005624 	.word	0x20005624
 8008274:	e000ed0c 	.word	0xe000ed0c
 8008278:	20005628 	.word	0x20005628

0800827c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	@ 0x28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008284:	2300      	movs	r3, #0
 8008286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008288:	f7fe fd5c 	bl	8006d44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800828c:	4b5c      	ldr	r3, [pc, #368]	@ (8008400 <pvPortMalloc+0x184>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008294:	f000 f924 	bl	80084e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008298:	4b5a      	ldr	r3, [pc, #360]	@ (8008404 <pvPortMalloc+0x188>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4013      	ands	r3, r2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f040 8095 	bne.w	80083d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01e      	beq.n	80082ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082ac:	2208      	movs	r2, #8
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d015      	beq.n	80082ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f023 0307 	bic.w	r3, r3, #7
 80082c4:	3308      	adds	r3, #8
 80082c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <pvPortMalloc+0x6e>
	__asm volatile
 80082d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d6:	f383 8811 	msr	BASEPRI, r3
 80082da:	f3bf 8f6f 	isb	sy
 80082de:	f3bf 8f4f 	dsb	sy
 80082e2:	617b      	str	r3, [r7, #20]
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop
 80082e8:	e7fd      	b.n	80082e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d06f      	beq.n	80083d0 <pvPortMalloc+0x154>
 80082f0:	4b45      	ldr	r3, [pc, #276]	@ (8008408 <pvPortMalloc+0x18c>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d86a      	bhi.n	80083d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082fa:	4b44      	ldr	r3, [pc, #272]	@ (800840c <pvPortMalloc+0x190>)
 80082fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082fe:	4b43      	ldr	r3, [pc, #268]	@ (800840c <pvPortMalloc+0x190>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008304:	e004      	b.n	8008310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d903      	bls.n	8008322 <pvPortMalloc+0xa6>
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f1      	bne.n	8008306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008322:	4b37      	ldr	r3, [pc, #220]	@ (8008400 <pvPortMalloc+0x184>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008328:	429a      	cmp	r2, r3
 800832a:	d051      	beq.n	80083d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2208      	movs	r2, #8
 8008332:	4413      	add	r3, r2
 8008334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	1ad2      	subs	r2, r2, r3
 8008346:	2308      	movs	r3, #8
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	429a      	cmp	r2, r3
 800834c:	d920      	bls.n	8008390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800834e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4413      	add	r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	f003 0307 	and.w	r3, r3, #7
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00b      	beq.n	8008378 <pvPortMalloc+0xfc>
	__asm volatile
 8008360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	613b      	str	r3, [r7, #16]
}
 8008372:	bf00      	nop
 8008374:	bf00      	nop
 8008376:	e7fd      	b.n	8008374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800838a:	69b8      	ldr	r0, [r7, #24]
 800838c:	f000 f90a 	bl	80085a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008390:	4b1d      	ldr	r3, [pc, #116]	@ (8008408 <pvPortMalloc+0x18c>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	4a1b      	ldr	r2, [pc, #108]	@ (8008408 <pvPortMalloc+0x18c>)
 800839c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800839e:	4b1a      	ldr	r3, [pc, #104]	@ (8008408 <pvPortMalloc+0x18c>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008410 <pvPortMalloc+0x194>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d203      	bcs.n	80083b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083aa:	4b17      	ldr	r3, [pc, #92]	@ (8008408 <pvPortMalloc+0x18c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a18      	ldr	r2, [pc, #96]	@ (8008410 <pvPortMalloc+0x194>)
 80083b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	4b13      	ldr	r3, [pc, #76]	@ (8008404 <pvPortMalloc+0x188>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	431a      	orrs	r2, r3
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083c6:	4b13      	ldr	r3, [pc, #76]	@ (8008414 <pvPortMalloc+0x198>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3301      	adds	r3, #1
 80083cc:	4a11      	ldr	r2, [pc, #68]	@ (8008414 <pvPortMalloc+0x198>)
 80083ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083d0:	f7fe fcc6 	bl	8006d60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	f003 0307 	and.w	r3, r3, #7
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <pvPortMalloc+0x17a>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	60fb      	str	r3, [r7, #12]
}
 80083f0:	bf00      	nop
 80083f2:	bf00      	nop
 80083f4:	e7fd      	b.n	80083f2 <pvPortMalloc+0x176>
	return pvReturn;
 80083f6:	69fb      	ldr	r3, [r7, #28]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3728      	adds	r7, #40	@ 0x28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20006234 	.word	0x20006234
 8008404:	20006248 	.word	0x20006248
 8008408:	20006238 	.word	0x20006238
 800840c:	2000622c 	.word	0x2000622c
 8008410:	2000623c 	.word	0x2000623c
 8008414:	20006240 	.word	0x20006240

08008418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d04f      	beq.n	80084ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800842a:	2308      	movs	r3, #8
 800842c:	425b      	negs	r3, r3
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	4413      	add	r3, r2
 8008432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	4b25      	ldr	r3, [pc, #148]	@ (80084d4 <vPortFree+0xbc>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4013      	ands	r3, r2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <vPortFree+0x46>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60fb      	str	r3, [r7, #12]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00b      	beq.n	800847e <vPortFree+0x66>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	60bb      	str	r3, [r7, #8]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	4b14      	ldr	r3, [pc, #80]	@ (80084d4 <vPortFree+0xbc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4013      	ands	r3, r2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01e      	beq.n	80084ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d11a      	bne.n	80084ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	685a      	ldr	r2, [r3, #4]
 8008498:	4b0e      	ldr	r3, [pc, #56]	@ (80084d4 <vPortFree+0xbc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	43db      	mvns	r3, r3
 800849e:	401a      	ands	r2, r3
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084a4:	f7fe fc4e 	bl	8006d44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	4b0a      	ldr	r3, [pc, #40]	@ (80084d8 <vPortFree+0xc0>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4413      	add	r3, r2
 80084b2:	4a09      	ldr	r2, [pc, #36]	@ (80084d8 <vPortFree+0xc0>)
 80084b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084b6:	6938      	ldr	r0, [r7, #16]
 80084b8:	f000 f874 	bl	80085a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084bc:	4b07      	ldr	r3, [pc, #28]	@ (80084dc <vPortFree+0xc4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3301      	adds	r3, #1
 80084c2:	4a06      	ldr	r2, [pc, #24]	@ (80084dc <vPortFree+0xc4>)
 80084c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084c6:	f7fe fc4b 	bl	8006d60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ca:	bf00      	nop
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20006248 	.word	0x20006248
 80084d8:	20006238 	.word	0x20006238
 80084dc:	20006244 	.word	0x20006244

080084e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80084ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084ec:	4b27      	ldr	r3, [pc, #156]	@ (800858c <prvHeapInit+0xac>)
 80084ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f003 0307 	and.w	r3, r3, #7
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	3307      	adds	r3, #7
 80084fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0307 	bic.w	r3, r3, #7
 8008506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	4a1f      	ldr	r2, [pc, #124]	@ (800858c <prvHeapInit+0xac>)
 8008510:	4413      	add	r3, r2
 8008512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008518:	4a1d      	ldr	r2, [pc, #116]	@ (8008590 <prvHeapInit+0xb0>)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800851e:	4b1c      	ldr	r3, [pc, #112]	@ (8008590 <prvHeapInit+0xb0>)
 8008520:	2200      	movs	r2, #0
 8008522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4413      	add	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800852c:	2208      	movs	r2, #8
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0307 	bic.w	r3, r3, #7
 800853a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4a15      	ldr	r2, [pc, #84]	@ (8008594 <prvHeapInit+0xb4>)
 8008540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008542:	4b14      	ldr	r3, [pc, #80]	@ (8008594 <prvHeapInit+0xb4>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800854a:	4b12      	ldr	r3, [pc, #72]	@ (8008594 <prvHeapInit+0xb4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	1ad2      	subs	r2, r2, r3
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008560:	4b0c      	ldr	r3, [pc, #48]	@ (8008594 <prvHeapInit+0xb4>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	4a0a      	ldr	r2, [pc, #40]	@ (8008598 <prvHeapInit+0xb8>)
 800856e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4a09      	ldr	r2, [pc, #36]	@ (800859c <prvHeapInit+0xbc>)
 8008576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008578:	4b09      	ldr	r3, [pc, #36]	@ (80085a0 <prvHeapInit+0xc0>)
 800857a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800857e:	601a      	str	r2, [r3, #0]
}
 8008580:	bf00      	nop
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	2000562c 	.word	0x2000562c
 8008590:	2000622c 	.word	0x2000622c
 8008594:	20006234 	.word	0x20006234
 8008598:	2000623c 	.word	0x2000623c
 800859c:	20006238 	.word	0x20006238
 80085a0:	20006248 	.word	0x20006248

080085a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085ac:	4b28      	ldr	r3, [pc, #160]	@ (8008650 <prvInsertBlockIntoFreeList+0xac>)
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	e002      	b.n	80085b8 <prvInsertBlockIntoFreeList+0x14>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d8f7      	bhi.n	80085b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	4413      	add	r3, r2
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d108      	bne.n	80085e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	441a      	add	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	441a      	add	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d118      	bne.n	800862c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b15      	ldr	r3, [pc, #84]	@ (8008654 <prvInsertBlockIntoFreeList+0xb0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d00d      	beq.n	8008622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	441a      	add	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	e008      	b.n	8008634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008622:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <prvInsertBlockIntoFreeList+0xb0>)
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e003      	b.n	8008634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	429a      	cmp	r2, r3
 800863a:	d002      	beq.n	8008642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008642:	bf00      	nop
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	2000622c 	.word	0x2000622c
 8008654:	20006234 	.word	0x20006234

08008658 <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>:
 8008658:	4b04      	ldr	r3, [pc, #16]	@ (800866c <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x14>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	b10a      	cbz	r2, 8008662 <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0xa>
 800865e:	4803      	ldr	r0, [pc, #12]	@ (800866c <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x14>)
 8008660:	4770      	bx	lr
 8008662:	4a03      	ldr	r2, [pc, #12]	@ (8008670 <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x18>)
 8008664:	4801      	ldr	r0, [pc, #4]	@ (800866c <rosidl_typesupport_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x14>)
 8008666:	6812      	ldr	r2, [r2, #0]
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	4770      	bx	lr
 800866c:	20000020 	.word	0x20000020
 8008670:	200001bc 	.word	0x200001bc

08008674 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request>:
 8008674:	4b04      	ldr	r3, [pc, #16]	@ (8008688 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x14>)
 8008676:	4805      	ldr	r0, [pc, #20]	@ (800868c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x18>)
 8008678:	4905      	ldr	r1, [pc, #20]	@ (8008690 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x1c>)
 800867a:	4a06      	ldr	r2, [pc, #24]	@ (8008694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x20>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6003      	str	r3, [r0, #0]
 8008680:	600b      	str	r3, [r1, #0]
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	200001bc 	.word	0x200001bc
 800868c:	2000003c 	.word	0x2000003c
 8008690:	20000048 	.word	0x20000048
 8008694:	20000020 	.word	0x20000020

08008698 <example_interfaces__srv__AddTwoInts_Request__rosidl_typesupport_introspection_c__AddTwoInts_Request_init_function>:
 8008698:	f004 ba1c 	b.w	800cad4 <example_interfaces__srv__AddTwoInts_Request__init>

0800869c <example_interfaces__srv__AddTwoInts_Request__rosidl_typesupport_introspection_c__AddTwoInts_Request_fini_function>:
 800869c:	f004 ba1e 	b.w	800cadc <example_interfaces__srv__AddTwoInts_Request__fini>

080086a0 <example_interfaces__srv__AddTwoInts_Response__rosidl_typesupport_introspection_c__AddTwoInts_Response_init_function>:
 80086a0:	f004 ba1e 	b.w	800cae0 <example_interfaces__srv__AddTwoInts_Response__init>

080086a4 <example_interfaces__srv__AddTwoInts_Response__rosidl_typesupport_introspection_c__AddTwoInts_Response_fini_function>:
 80086a4:	f004 ba20 	b.w	800cae8 <example_interfaces__srv__AddTwoInts_Response__fini>

080086a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request>:
 80086a8:	4b04      	ldr	r3, [pc, #16]	@ (80086bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x14>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	b10a      	cbz	r2, 80086b2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0xa>
 80086ae:	4803      	ldr	r0, [pc, #12]	@ (80086bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x14>)
 80086b0:	4770      	bx	lr
 80086b2:	4a03      	ldr	r2, [pc, #12]	@ (80086c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x18>)
 80086b4:	4801      	ldr	r0, [pc, #4]	@ (80086bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x14>)
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	4770      	bx	lr
 80086bc:	200000cc 	.word	0x200000cc
 80086c0:	200001c0 	.word	0x200001c0

080086c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response>:
 80086c4:	4b04      	ldr	r3, [pc, #16]	@ (80086d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response+0x14>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	b10a      	cbz	r2, 80086ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response+0xa>
 80086ca:	4803      	ldr	r0, [pc, #12]	@ (80086d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response+0x14>)
 80086cc:	4770      	bx	lr
 80086ce:	4a03      	ldr	r2, [pc, #12]	@ (80086dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response+0x18>)
 80086d0:	4801      	ldr	r0, [pc, #4]	@ (80086d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response+0x14>)
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	4770      	bx	lr
 80086d8:	20000114 	.word	0x20000114
 80086dc:	200001c0 	.word	0x200001c0

080086e0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>:
 80086e0:	4b13      	ldr	r3, [pc, #76]	@ (8008730 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x50>)
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	b132      	cbz	r2, 80086f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x14>
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	689a      	ldr	r2, [r3, #8]
 80086ea:	b152      	cbz	r2, 8008702 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x22>
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	b182      	cbz	r2, 8008712 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x32>
 80086f0:	480f      	ldr	r0, [pc, #60]	@ (8008730 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x50>)
 80086f2:	4770      	bx	lr
 80086f4:	4a0f      	ldr	r2, [pc, #60]	@ (8008734 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x54>)
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	2a00      	cmp	r2, #0
 8008700:	d1f4      	bne.n	80086ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0xc>
 8008702:	4a0d      	ldr	r2, [pc, #52]	@ (8008738 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x58>)
 8008704:	6811      	ldr	r1, [r2, #0]
 8008706:	b179      	cbz	r1, 8008728 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x48>
 8008708:	6852      	ldr	r2, [r2, #4]
 800870a:	609a      	str	r2, [r3, #8]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	2a00      	cmp	r2, #0
 8008710:	d1ee      	bne.n	80086f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x10>
 8008712:	4a0a      	ldr	r2, [pc, #40]	@ (800873c <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x5c>)
 8008714:	6811      	ldr	r1, [r2, #0]
 8008716:	b119      	cbz	r1, 8008720 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x40>
 8008718:	6852      	ldr	r2, [r2, #4]
 800871a:	4805      	ldr	r0, [pc, #20]	@ (8008730 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x50>)
 800871c:	60da      	str	r2, [r3, #12]
 800871e:	4770      	bx	lr
 8008720:	4904      	ldr	r1, [pc, #16]	@ (8008734 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x54>)
 8008722:	6809      	ldr	r1, [r1, #0]
 8008724:	6011      	str	r1, [r2, #0]
 8008726:	e7f7      	b.n	8008718 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x38>
 8008728:	4902      	ldr	r1, [pc, #8]	@ (8008734 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x54>)
 800872a:	6809      	ldr	r1, [r1, #0]
 800872c:	6011      	str	r1, [r2, #0]
 800872e:	e7eb      	b.n	8008708 <rosidl_typesupport_introspection_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x28>
 8008730:	20000130 	.word	0x20000130
 8008734:	200001c0 	.word	0x200001c0
 8008738:	200000cc 	.word	0x200000cc
 800873c:	20000114 	.word	0x20000114

08008740 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request>:
 8008740:	4800      	ldr	r0, [pc, #0]	@ (8008744 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Request+0x4>)
 8008742:	4770      	bx	lr
 8008744:	20000158 	.word	0x20000158

08008748 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response>:
 8008748:	4800      	ldr	r0, [pc, #0]	@ (800874c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__srv__AddTwoInts_Response+0x4>)
 800874a:	4770      	bx	lr
 800874c:	20000164 	.word	0x20000164

08008750 <_AddTwoInts_Response__max_serialized_size>:
 8008750:	b508      	push	{r3, lr}
 8008752:	2108      	movs	r1, #8
 8008754:	2000      	movs	r0, #0
 8008756:	f001 f9f1 	bl	8009b3c <ucdr_alignment>
 800875a:	3008      	adds	r0, #8
 800875c:	bd08      	pop	{r3, pc}
 800875e:	bf00      	nop

08008760 <_AddTwoInts_Response__cdr_deserialize>:
 8008760:	b109      	cbz	r1, 8008766 <_AddTwoInts_Response__cdr_deserialize+0x6>
 8008762:	f001 b8cd 	b.w	8009900 <ucdr_deserialize_int64_t>
 8008766:	4608      	mov	r0, r1
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop

0800876c <get_serialized_size_example_interfaces__srv__AddTwoInts_Request>:
 800876c:	b188      	cbz	r0, 8008792 <get_serialized_size_example_interfaces__srv__AddTwoInts_Request+0x26>
 800876e:	b538      	push	{r3, r4, r5, lr}
 8008770:	460d      	mov	r5, r1
 8008772:	4628      	mov	r0, r5
 8008774:	2108      	movs	r1, #8
 8008776:	f001 f9e1 	bl	8009b3c <ucdr_alignment>
 800877a:	f105 0308 	add.w	r3, r5, #8
 800877e:	181c      	adds	r4, r3, r0
 8008780:	2108      	movs	r1, #8
 8008782:	4620      	mov	r0, r4
 8008784:	f001 f9da 	bl	8009b3c <ucdr_alignment>
 8008788:	f1c5 0508 	rsb	r5, r5, #8
 800878c:	4428      	add	r0, r5
 800878e:	4420      	add	r0, r4
 8008790:	bd38      	pop	{r3, r4, r5, pc}
 8008792:	4770      	bx	lr

08008794 <_AddTwoInts_Response__get_serialized_size>:
 8008794:	b130      	cbz	r0, 80087a4 <_AddTwoInts_Response__get_serialized_size+0x10>
 8008796:	b508      	push	{r3, lr}
 8008798:	2108      	movs	r1, #8
 800879a:	2000      	movs	r0, #0
 800879c:	f001 f9ce 	bl	8009b3c <ucdr_alignment>
 80087a0:	3008      	adds	r0, #8
 80087a2:	bd08      	pop	{r3, pc}
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop

080087a8 <_AddTwoInts_Request__cdr_deserialize>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	460c      	mov	r4, r1
 80087ac:	b149      	cbz	r1, 80087c2 <_AddTwoInts_Request__cdr_deserialize+0x1a>
 80087ae:	4605      	mov	r5, r0
 80087b0:	f001 f8a6 	bl	8009900 <ucdr_deserialize_int64_t>
 80087b4:	f104 0108 	add.w	r1, r4, #8
 80087b8:	4628      	mov	r0, r5
 80087ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087be:	f001 b89f 	b.w	8009900 <ucdr_deserialize_int64_t>
 80087c2:	4608      	mov	r0, r1
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop

080087c8 <_AddTwoInts_Request__cdr_serialize>:
 80087c8:	b170      	cbz	r0, 80087e8 <_AddTwoInts_Request__cdr_serialize+0x20>
 80087ca:	b570      	push	{r4, r5, r6, lr}
 80087cc:	e9d0 2300 	ldrd	r2, r3, [r0]
 80087d0:	460d      	mov	r5, r1
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	f000 ffc3 	bl	8009760 <ucdr_serialize_int64_t>
 80087da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80087de:	4628      	mov	r0, r5
 80087e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087e4:	f000 bfbc 	b.w	8009760 <ucdr_serialize_int64_t>
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop

080087ec <_AddTwoInts_Response__cdr_serialize>:
 80087ec:	b120      	cbz	r0, 80087f8 <_AddTwoInts_Response__cdr_serialize+0xc>
 80087ee:	e9d0 2300 	ldrd	r2, r3, [r0]
 80087f2:	4608      	mov	r0, r1
 80087f4:	f000 bfb4 	b.w	8009760 <ucdr_serialize_int64_t>
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop

080087fc <get_serialized_size_example_interfaces__srv__AddTwoInts_Response>:
 80087fc:	b138      	cbz	r0, 800880e <get_serialized_size_example_interfaces__srv__AddTwoInts_Response+0x12>
 80087fe:	b508      	push	{r3, lr}
 8008800:	460b      	mov	r3, r1
 8008802:	4618      	mov	r0, r3
 8008804:	2108      	movs	r1, #8
 8008806:	f001 f999 	bl	8009b3c <ucdr_alignment>
 800880a:	3008      	adds	r0, #8
 800880c:	bd08      	pop	{r3, pc}
 800880e:	4770      	bx	lr

08008810 <_AddTwoInts_Request__get_serialized_size>:
 8008810:	b168      	cbz	r0, 800882e <_AddTwoInts_Request__get_serialized_size+0x1e>
 8008812:	b510      	push	{r4, lr}
 8008814:	2108      	movs	r1, #8
 8008816:	2000      	movs	r0, #0
 8008818:	f001 f990 	bl	8009b3c <ucdr_alignment>
 800881c:	f100 0408 	add.w	r4, r0, #8
 8008820:	2108      	movs	r1, #8
 8008822:	4620      	mov	r0, r4
 8008824:	f001 f98a 	bl	8009b3c <ucdr_alignment>
 8008828:	3008      	adds	r0, #8
 800882a:	4420      	add	r0, r4
 800882c:	bd10      	pop	{r4, pc}
 800882e:	4770      	bx	lr

08008830 <_AddTwoInts_Request__max_serialized_size>:
 8008830:	b510      	push	{r4, lr}
 8008832:	2108      	movs	r1, #8
 8008834:	2000      	movs	r0, #0
 8008836:	f001 f981 	bl	8009b3c <ucdr_alignment>
 800883a:	f100 0408 	add.w	r4, r0, #8
 800883e:	2108      	movs	r1, #8
 8008840:	4620      	mov	r0, r4
 8008842:	f001 f97b 	bl	8009b3c <ucdr_alignment>
 8008846:	3008      	adds	r0, #8
 8008848:	4420      	add	r0, r4
 800884a:	bd10      	pop	{r4, pc}

0800884c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts>:
 800884c:	4800      	ldr	r0, [pc, #0]	@ (8008850 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__example_interfaces__srv__AddTwoInts+0x4>)
 800884e:	4770      	bx	lr
 8008850:	2000014c 	.word	0x2000014c

08008854 <ucdr_serialize_bool>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	460d      	mov	r5, r1
 8008858:	2101      	movs	r1, #1
 800885a:	4604      	mov	r4, r0
 800885c:	f001 f922 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008860:	b148      	cbz	r0, 8008876 <ucdr_serialize_bool+0x22>
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	701d      	strb	r5, [r3, #0]
 8008866:	68a2      	ldr	r2, [r4, #8]
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	2101      	movs	r1, #1
 800886c:	440a      	add	r2, r1
 800886e:	440b      	add	r3, r1
 8008870:	60a2      	str	r2, [r4, #8]
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	7561      	strb	r1, [r4, #21]
 8008876:	7da0      	ldrb	r0, [r4, #22]
 8008878:	f080 0001 	eor.w	r0, r0, #1
 800887c:	bd38      	pop	{r3, r4, r5, pc}
 800887e:	bf00      	nop

08008880 <ucdr_deserialize_bool>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	460d      	mov	r5, r1
 8008884:	2101      	movs	r1, #1
 8008886:	4604      	mov	r4, r0
 8008888:	f001 f90c 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 800888c:	b160      	cbz	r0, 80088a8 <ucdr_deserialize_bool+0x28>
 800888e:	68a2      	ldr	r2, [r4, #8]
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008896:	3900      	subs	r1, #0
 8008898:	bf18      	it	ne
 800889a:	2101      	movne	r1, #1
 800889c:	7029      	strb	r1, [r5, #0]
 800889e:	3301      	adds	r3, #1
 80088a0:	2101      	movs	r1, #1
 80088a2:	60a2      	str	r2, [r4, #8]
 80088a4:	6123      	str	r3, [r4, #16]
 80088a6:	7561      	strb	r1, [r4, #21]
 80088a8:	7da0      	ldrb	r0, [r4, #22]
 80088aa:	f080 0001 	eor.w	r0, r0, #1
 80088ae:	bd38      	pop	{r3, r4, r5, pc}

080088b0 <ucdr_serialize_uint8_t>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	460d      	mov	r5, r1
 80088b4:	2101      	movs	r1, #1
 80088b6:	4604      	mov	r4, r0
 80088b8:	f001 f8f4 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80088bc:	b148      	cbz	r0, 80088d2 <ucdr_serialize_uint8_t+0x22>
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	701d      	strb	r5, [r3, #0]
 80088c2:	68a2      	ldr	r2, [r4, #8]
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	2101      	movs	r1, #1
 80088c8:	440a      	add	r2, r1
 80088ca:	440b      	add	r3, r1
 80088cc:	60a2      	str	r2, [r4, #8]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	7561      	strb	r1, [r4, #21]
 80088d2:	7da0      	ldrb	r0, [r4, #22]
 80088d4:	f080 0001 	eor.w	r0, r0, #1
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop

080088dc <ucdr_deserialize_uint8_t>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	460d      	mov	r5, r1
 80088e0:	2101      	movs	r1, #1
 80088e2:	4604      	mov	r4, r0
 80088e4:	f001 f8de 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80088e8:	b150      	cbz	r0, 8008900 <ucdr_deserialize_uint8_t+0x24>
 80088ea:	68a3      	ldr	r3, [r4, #8]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	702b      	strb	r3, [r5, #0]
 80088f0:	68a2      	ldr	r2, [r4, #8]
 80088f2:	6923      	ldr	r3, [r4, #16]
 80088f4:	2101      	movs	r1, #1
 80088f6:	440a      	add	r2, r1
 80088f8:	440b      	add	r3, r1
 80088fa:	60a2      	str	r2, [r4, #8]
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	7561      	strb	r1, [r4, #21]
 8008900:	7da0      	ldrb	r0, [r4, #22]
 8008902:	f080 0001 	eor.w	r0, r0, #1
 8008906:	bd38      	pop	{r3, r4, r5, pc}

08008908 <ucdr_serialize_uint16_t>:
 8008908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	460b      	mov	r3, r1
 8008910:	2102      	movs	r1, #2
 8008912:	4604      	mov	r4, r0
 8008914:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008918:	f001 f918 	bl	8009b4c <ucdr_buffer_alignment>
 800891c:	4601      	mov	r1, r0
 800891e:	4620      	mov	r0, r4
 8008920:	7d67      	ldrb	r7, [r4, #21]
 8008922:	f001 f957 	bl	8009bd4 <ucdr_advance_buffer>
 8008926:	2102      	movs	r1, #2
 8008928:	4620      	mov	r0, r4
 800892a:	f001 f8af 	bl	8009a8c <ucdr_check_buffer_available_for>
 800892e:	bb78      	cbnz	r0, 8008990 <ucdr_serialize_uint16_t+0x88>
 8008930:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008934:	42ab      	cmp	r3, r5
 8008936:	d926      	bls.n	8008986 <ucdr_serialize_uint16_t+0x7e>
 8008938:	1b5e      	subs	r6, r3, r5
 800893a:	60a3      	str	r3, [r4, #8]
 800893c:	6923      	ldr	r3, [r4, #16]
 800893e:	f1c6 0802 	rsb	r8, r6, #2
 8008942:	4433      	add	r3, r6
 8008944:	6123      	str	r3, [r4, #16]
 8008946:	4641      	mov	r1, r8
 8008948:	4620      	mov	r0, r4
 800894a:	f001 f8ab 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 800894e:	2800      	cmp	r0, #0
 8008950:	d03b      	beq.n	80089ca <ucdr_serialize_uint16_t+0xc2>
 8008952:	7d23      	ldrb	r3, [r4, #20]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d04a      	beq.n	80089ee <ucdr_serialize_uint16_t+0xe6>
 8008958:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800895c:	702b      	strb	r3, [r5, #0]
 800895e:	2e00      	cmp	r6, #0
 8008960:	d040      	beq.n	80089e4 <ucdr_serialize_uint16_t+0xdc>
 8008962:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008966:	706b      	strb	r3, [r5, #1]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	68a2      	ldr	r2, [r4, #8]
 800896c:	7da0      	ldrb	r0, [r4, #22]
 800896e:	3302      	adds	r3, #2
 8008970:	1b9e      	subs	r6, r3, r6
 8008972:	4442      	add	r2, r8
 8008974:	2302      	movs	r3, #2
 8008976:	f080 0001 	eor.w	r0, r0, #1
 800897a:	60a2      	str	r2, [r4, #8]
 800897c:	6126      	str	r6, [r4, #16]
 800897e:	7563      	strb	r3, [r4, #21]
 8008980:	b002      	add	sp, #8
 8008982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008986:	2102      	movs	r1, #2
 8008988:	4620      	mov	r0, r4
 800898a:	f001 f88b 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 800898e:	b190      	cbz	r0, 80089b6 <ucdr_serialize_uint16_t+0xae>
 8008990:	7d23      	ldrb	r3, [r4, #20]
 8008992:	2b01      	cmp	r3, #1
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	d014      	beq.n	80089c2 <ucdr_serialize_uint16_t+0xba>
 8008998:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089a4:	705a      	strb	r2, [r3, #1]
 80089a6:	68a2      	ldr	r2, [r4, #8]
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	3202      	adds	r2, #2
 80089ac:	3302      	adds	r3, #2
 80089ae:	2102      	movs	r1, #2
 80089b0:	60a2      	str	r2, [r4, #8]
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	7561      	strb	r1, [r4, #21]
 80089b6:	7da0      	ldrb	r0, [r4, #22]
 80089b8:	f080 0001 	eor.w	r0, r0, #1
 80089bc:	b002      	add	sp, #8
 80089be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80089c6:	801a      	strh	r2, [r3, #0]
 80089c8:	e7ed      	b.n	80089a6 <ucdr_serialize_uint16_t+0x9e>
 80089ca:	68a2      	ldr	r2, [r4, #8]
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	7da0      	ldrb	r0, [r4, #22]
 80089d0:	7567      	strb	r7, [r4, #21]
 80089d2:	1b92      	subs	r2, r2, r6
 80089d4:	1b9b      	subs	r3, r3, r6
 80089d6:	f080 0001 	eor.w	r0, r0, #1
 80089da:	60a2      	str	r2, [r4, #8]
 80089dc:	6123      	str	r3, [r4, #16]
 80089de:	b002      	add	sp, #8
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e4:	68a3      	ldr	r3, [r4, #8]
 80089e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	e7bc      	b.n	8008968 <ucdr_serialize_uint16_t+0x60>
 80089ee:	4628      	mov	r0, r5
 80089f0:	f10d 0506 	add.w	r5, sp, #6
 80089f4:	4629      	mov	r1, r5
 80089f6:	4632      	mov	r2, r6
 80089f8:	f00d ff31 	bl	801685e <memcpy>
 80089fc:	68a0      	ldr	r0, [r4, #8]
 80089fe:	4642      	mov	r2, r8
 8008a00:	19a9      	adds	r1, r5, r6
 8008a02:	f00d ff2c 	bl	801685e <memcpy>
 8008a06:	e7af      	b.n	8008968 <ucdr_serialize_uint16_t+0x60>

08008a08 <ucdr_serialize_endian_uint16_t>:
 8008a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	b083      	sub	sp, #12
 8008a0e:	460d      	mov	r5, r1
 8008a10:	2102      	movs	r1, #2
 8008a12:	4604      	mov	r4, r0
 8008a14:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008a18:	f001 f898 	bl	8009b4c <ucdr_buffer_alignment>
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008a24:	f001 f8d6 	bl	8009bd4 <ucdr_advance_buffer>
 8008a28:	2102      	movs	r1, #2
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f001 f82e 	bl	8009a8c <ucdr_check_buffer_available_for>
 8008a30:	bb70      	cbnz	r0, 8008a90 <ucdr_serialize_endian_uint16_t+0x88>
 8008a32:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008a36:	42be      	cmp	r6, r7
 8008a38:	d925      	bls.n	8008a86 <ucdr_serialize_endian_uint16_t+0x7e>
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	60a6      	str	r6, [r4, #8]
 8008a3e:	1bf6      	subs	r6, r6, r7
 8008a40:	4433      	add	r3, r6
 8008a42:	f1c6 0902 	rsb	r9, r6, #2
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f001 f82a 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d039      	beq.n	8008ac8 <ucdr_serialize_endian_uint16_t+0xc0>
 8008a54:	2d01      	cmp	r5, #1
 8008a56:	d04a      	beq.n	8008aee <ucdr_serialize_endian_uint16_t+0xe6>
 8008a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a5c:	703b      	strb	r3, [r7, #0]
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d040      	beq.n	8008ae4 <ucdr_serialize_endian_uint16_t+0xdc>
 8008a62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008a66:	707b      	strb	r3, [r7, #1]
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	68a2      	ldr	r2, [r4, #8]
 8008a6c:	7da0      	ldrb	r0, [r4, #22]
 8008a6e:	3302      	adds	r3, #2
 8008a70:	444a      	add	r2, r9
 8008a72:	1b9b      	subs	r3, r3, r6
 8008a74:	2102      	movs	r1, #2
 8008a76:	f080 0001 	eor.w	r0, r0, #1
 8008a7a:	60a2      	str	r2, [r4, #8]
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	7561      	strb	r1, [r4, #21]
 8008a80:	b003      	add	sp, #12
 8008a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a86:	2102      	movs	r1, #2
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f001 f80b 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008a8e:	b188      	cbz	r0, 8008ab4 <ucdr_serialize_endian_uint16_t+0xac>
 8008a90:	2d01      	cmp	r5, #1
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	d014      	beq.n	8008ac0 <ucdr_serialize_endian_uint16_t+0xb8>
 8008a96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	68a3      	ldr	r3, [r4, #8]
 8008a9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008aa2:	705a      	strb	r2, [r3, #1]
 8008aa4:	68a2      	ldr	r2, [r4, #8]
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	3202      	adds	r2, #2
 8008aaa:	3302      	adds	r3, #2
 8008aac:	2102      	movs	r1, #2
 8008aae:	60a2      	str	r2, [r4, #8]
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	7561      	strb	r1, [r4, #21]
 8008ab4:	7da0      	ldrb	r0, [r4, #22]
 8008ab6:	f080 0001 	eor.w	r0, r0, #1
 8008aba:	b003      	add	sp, #12
 8008abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ac0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008ac4:	801a      	strh	r2, [r3, #0]
 8008ac6:	e7ed      	b.n	8008aa4 <ucdr_serialize_endian_uint16_t+0x9c>
 8008ac8:	68a2      	ldr	r2, [r4, #8]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	7da0      	ldrb	r0, [r4, #22]
 8008ace:	f884 8015 	strb.w	r8, [r4, #21]
 8008ad2:	1b92      	subs	r2, r2, r6
 8008ad4:	1b9b      	subs	r3, r3, r6
 8008ad6:	f080 0001 	eor.w	r0, r0, #1
 8008ada:	60a2      	str	r2, [r4, #8]
 8008adc:	6123      	str	r3, [r4, #16]
 8008ade:	b003      	add	sp, #12
 8008ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ae4:	68a3      	ldr	r3, [r4, #8]
 8008ae6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	e7bc      	b.n	8008a68 <ucdr_serialize_endian_uint16_t+0x60>
 8008aee:	f10d 0506 	add.w	r5, sp, #6
 8008af2:	4629      	mov	r1, r5
 8008af4:	4632      	mov	r2, r6
 8008af6:	4638      	mov	r0, r7
 8008af8:	f00d feb1 	bl	801685e <memcpy>
 8008afc:	68a0      	ldr	r0, [r4, #8]
 8008afe:	464a      	mov	r2, r9
 8008b00:	19a9      	adds	r1, r5, r6
 8008b02:	f00d feac 	bl	801685e <memcpy>
 8008b06:	e7af      	b.n	8008a68 <ucdr_serialize_endian_uint16_t+0x60>

08008b08 <ucdr_deserialize_uint16_t>:
 8008b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	460d      	mov	r5, r1
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4604      	mov	r4, r0
 8008b12:	f001 f81b 	bl	8009b4c <ucdr_buffer_alignment>
 8008b16:	4601      	mov	r1, r0
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008b1e:	f001 f859 	bl	8009bd4 <ucdr_advance_buffer>
 8008b22:	2102      	movs	r1, #2
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 ffb1 	bl	8009a8c <ucdr_check_buffer_available_for>
 8008b2a:	bb60      	cbnz	r0, 8008b86 <ucdr_deserialize_uint16_t+0x7e>
 8008b2c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008b30:	42be      	cmp	r6, r7
 8008b32:	d923      	bls.n	8008b7c <ucdr_deserialize_uint16_t+0x74>
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	60a6      	str	r6, [r4, #8]
 8008b38:	1bf6      	subs	r6, r6, r7
 8008b3a:	4433      	add	r3, r6
 8008b3c:	f1c6 0902 	rsb	r9, r6, #2
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	4649      	mov	r1, r9
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 ffad 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d034      	beq.n	8008bb8 <ucdr_deserialize_uint16_t+0xb0>
 8008b4e:	7d23      	ldrb	r3, [r4, #20]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d042      	beq.n	8008bda <ucdr_deserialize_uint16_t+0xd2>
 8008b54:	787b      	ldrb	r3, [r7, #1]
 8008b56:	702b      	strb	r3, [r5, #0]
 8008b58:	2e00      	cmp	r6, #0
 8008b5a:	d03a      	beq.n	8008bd2 <ucdr_deserialize_uint16_t+0xca>
 8008b5c:	783b      	ldrb	r3, [r7, #0]
 8008b5e:	706b      	strb	r3, [r5, #1]
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	68a2      	ldr	r2, [r4, #8]
 8008b64:	7da0      	ldrb	r0, [r4, #22]
 8008b66:	2102      	movs	r1, #2
 8008b68:	3302      	adds	r3, #2
 8008b6a:	444a      	add	r2, r9
 8008b6c:	1b9b      	subs	r3, r3, r6
 8008b6e:	7561      	strb	r1, [r4, #21]
 8008b70:	60a2      	str	r2, [r4, #8]
 8008b72:	6123      	str	r3, [r4, #16]
 8008b74:	f080 0001 	eor.w	r0, r0, #1
 8008b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 ff90 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008b84:	b180      	cbz	r0, 8008ba8 <ucdr_deserialize_uint16_t+0xa0>
 8008b86:	7d23      	ldrb	r3, [r4, #20]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	d011      	beq.n	8008bb2 <ucdr_deserialize_uint16_t+0xaa>
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	702b      	strb	r3, [r5, #0]
 8008b92:	68a3      	ldr	r3, [r4, #8]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	706b      	strb	r3, [r5, #1]
 8008b98:	68a2      	ldr	r2, [r4, #8]
 8008b9a:	6923      	ldr	r3, [r4, #16]
 8008b9c:	3202      	adds	r2, #2
 8008b9e:	3302      	adds	r3, #2
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	60a2      	str	r2, [r4, #8]
 8008ba4:	6123      	str	r3, [r4, #16]
 8008ba6:	7561      	strb	r1, [r4, #21]
 8008ba8:	7da0      	ldrb	r0, [r4, #22]
 8008baa:	f080 0001 	eor.w	r0, r0, #1
 8008bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	802b      	strh	r3, [r5, #0]
 8008bb6:	e7ef      	b.n	8008b98 <ucdr_deserialize_uint16_t+0x90>
 8008bb8:	68a2      	ldr	r2, [r4, #8]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	7da0      	ldrb	r0, [r4, #22]
 8008bbe:	f884 8015 	strb.w	r8, [r4, #21]
 8008bc2:	1b92      	subs	r2, r2, r6
 8008bc4:	1b9b      	subs	r3, r3, r6
 8008bc6:	60a2      	str	r2, [r4, #8]
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	f080 0001 	eor.w	r0, r0, #1
 8008bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	706b      	strb	r3, [r5, #1]
 8008bd8:	e7c2      	b.n	8008b60 <ucdr_deserialize_uint16_t+0x58>
 8008bda:	4639      	mov	r1, r7
 8008bdc:	4632      	mov	r2, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	f00d fe3d 	bl	801685e <memcpy>
 8008be4:	68a1      	ldr	r1, [r4, #8]
 8008be6:	464a      	mov	r2, r9
 8008be8:	19a8      	adds	r0, r5, r6
 8008bea:	f00d fe38 	bl	801685e <memcpy>
 8008bee:	e7b7      	b.n	8008b60 <ucdr_deserialize_uint16_t+0x58>

08008bf0 <ucdr_deserialize_endian_uint16_t>:
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	460e      	mov	r6, r1
 8008bf6:	2102      	movs	r1, #2
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	4615      	mov	r5, r2
 8008bfc:	f000 ffa6 	bl	8009b4c <ucdr_buffer_alignment>
 8008c00:	4601      	mov	r1, r0
 8008c02:	4620      	mov	r0, r4
 8008c04:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008c08:	f000 ffe4 	bl	8009bd4 <ucdr_advance_buffer>
 8008c0c:	2102      	movs	r1, #2
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f000 ff3c 	bl	8009a8c <ucdr_check_buffer_available_for>
 8008c14:	bb70      	cbnz	r0, 8008c74 <ucdr_deserialize_endian_uint16_t+0x84>
 8008c16:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008c1a:	4547      	cmp	r7, r8
 8008c1c:	d925      	bls.n	8008c6a <ucdr_deserialize_endian_uint16_t+0x7a>
 8008c1e:	6923      	ldr	r3, [r4, #16]
 8008c20:	60a7      	str	r7, [r4, #8]
 8008c22:	eba7 0708 	sub.w	r7, r7, r8
 8008c26:	443b      	add	r3, r7
 8008c28:	f1c7 0a02 	rsb	sl, r7, #2
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	4651      	mov	r1, sl
 8008c30:	4620      	mov	r0, r4
 8008c32:	f000 ff37 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d034      	beq.n	8008ca4 <ucdr_deserialize_endian_uint16_t+0xb4>
 8008c3a:	2e01      	cmp	r6, #1
 8008c3c:	d043      	beq.n	8008cc6 <ucdr_deserialize_endian_uint16_t+0xd6>
 8008c3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008c42:	702b      	strb	r3, [r5, #0]
 8008c44:	2f00      	cmp	r7, #0
 8008c46:	d03a      	beq.n	8008cbe <ucdr_deserialize_endian_uint16_t+0xce>
 8008c48:	f898 3000 	ldrb.w	r3, [r8]
 8008c4c:	706b      	strb	r3, [r5, #1]
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	68a2      	ldr	r2, [r4, #8]
 8008c52:	7da0      	ldrb	r0, [r4, #22]
 8008c54:	2102      	movs	r1, #2
 8008c56:	3302      	adds	r3, #2
 8008c58:	4452      	add	r2, sl
 8008c5a:	1bdb      	subs	r3, r3, r7
 8008c5c:	7561      	strb	r1, [r4, #21]
 8008c5e:	60a2      	str	r2, [r4, #8]
 8008c60:	6123      	str	r3, [r4, #16]
 8008c62:	f080 0001 	eor.w	r0, r0, #1
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	2102      	movs	r1, #2
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f000 ff19 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008c72:	b178      	cbz	r0, 8008c94 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008c74:	2e01      	cmp	r6, #1
 8008c76:	68a3      	ldr	r3, [r4, #8]
 8008c78:	d011      	beq.n	8008c9e <ucdr_deserialize_endian_uint16_t+0xae>
 8008c7a:	785b      	ldrb	r3, [r3, #1]
 8008c7c:	702b      	strb	r3, [r5, #0]
 8008c7e:	68a3      	ldr	r3, [r4, #8]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	706b      	strb	r3, [r5, #1]
 8008c84:	68a2      	ldr	r2, [r4, #8]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	3202      	adds	r2, #2
 8008c8a:	3302      	adds	r3, #2
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	60a2      	str	r2, [r4, #8]
 8008c90:	6123      	str	r3, [r4, #16]
 8008c92:	7561      	strb	r1, [r4, #21]
 8008c94:	7da0      	ldrb	r0, [r4, #22]
 8008c96:	f080 0001 	eor.w	r0, r0, #1
 8008c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	802b      	strh	r3, [r5, #0]
 8008ca2:	e7ef      	b.n	8008c84 <ucdr_deserialize_endian_uint16_t+0x94>
 8008ca4:	68a2      	ldr	r2, [r4, #8]
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	7da0      	ldrb	r0, [r4, #22]
 8008caa:	f884 9015 	strb.w	r9, [r4, #21]
 8008cae:	1bd2      	subs	r2, r2, r7
 8008cb0:	1bdb      	subs	r3, r3, r7
 8008cb2:	60a2      	str	r2, [r4, #8]
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	f080 0001 	eor.w	r0, r0, #1
 8008cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cbe:	68a3      	ldr	r3, [r4, #8]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	706b      	strb	r3, [r5, #1]
 8008cc4:	e7c3      	b.n	8008c4e <ucdr_deserialize_endian_uint16_t+0x5e>
 8008cc6:	4641      	mov	r1, r8
 8008cc8:	463a      	mov	r2, r7
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f00d fdc7 	bl	801685e <memcpy>
 8008cd0:	68a1      	ldr	r1, [r4, #8]
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	19e8      	adds	r0, r5, r7
 8008cd6:	f00d fdc2 	bl	801685e <memcpy>
 8008cda:	e7b8      	b.n	8008c4e <ucdr_deserialize_endian_uint16_t+0x5e>

08008cdc <ucdr_serialize_uint32_t>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	9101      	str	r1, [sp, #4]
 8008ce6:	2104      	movs	r1, #4
 8008ce8:	f000 ff30 	bl	8009b4c <ucdr_buffer_alignment>
 8008cec:	4601      	mov	r1, r0
 8008cee:	4620      	mov	r0, r4
 8008cf0:	7d67      	ldrb	r7, [r4, #21]
 8008cf2:	f000 ff6f 	bl	8009bd4 <ucdr_advance_buffer>
 8008cf6:	2104      	movs	r1, #4
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fec7 	bl	8009a8c <ucdr_check_buffer_available_for>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d139      	bne.n	8008d76 <ucdr_serialize_uint32_t+0x9a>
 8008d02:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008d06:	42ab      	cmp	r3, r5
 8008d08:	d930      	bls.n	8008d6c <ucdr_serialize_uint32_t+0x90>
 8008d0a:	1b5e      	subs	r6, r3, r5
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	f1c6 0804 	rsb	r8, r6, #4
 8008d14:	4433      	add	r3, r6
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	4641      	mov	r1, r8
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 fec2 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d04c      	beq.n	8008dbe <ucdr_serialize_uint32_t+0xe2>
 8008d24:	7d23      	ldrb	r3, [r4, #20]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d063      	beq.n	8008df2 <ucdr_serialize_uint32_t+0x116>
 8008d2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008d2e:	702b      	strb	r3, [r5, #0]
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	d051      	beq.n	8008dd8 <ucdr_serialize_uint32_t+0xfc>
 8008d34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008d38:	706b      	strb	r3, [r5, #1]
 8008d3a:	2e01      	cmp	r6, #1
 8008d3c:	d050      	beq.n	8008de0 <ucdr_serialize_uint32_t+0x104>
 8008d3e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008d42:	70ab      	strb	r3, [r5, #2]
 8008d44:	2e02      	cmp	r6, #2
 8008d46:	d04f      	beq.n	8008de8 <ucdr_serialize_uint32_t+0x10c>
 8008d48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008d4c:	70eb      	strb	r3, [r5, #3]
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	68a2      	ldr	r2, [r4, #8]
 8008d52:	7da0      	ldrb	r0, [r4, #22]
 8008d54:	3304      	adds	r3, #4
 8008d56:	1b9e      	subs	r6, r3, r6
 8008d58:	4442      	add	r2, r8
 8008d5a:	2304      	movs	r3, #4
 8008d5c:	f080 0001 	eor.w	r0, r0, #1
 8008d60:	60a2      	str	r2, [r4, #8]
 8008d62:	6126      	str	r6, [r4, #16]
 8008d64:	7563      	strb	r3, [r4, #21]
 8008d66:	b002      	add	sp, #8
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	2104      	movs	r1, #4
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fe98 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008d74:	b1d0      	cbz	r0, 8008dac <ucdr_serialize_uint32_t+0xd0>
 8008d76:	7d23      	ldrb	r3, [r4, #20]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	68a3      	ldr	r3, [r4, #8]
 8008d7c:	d01c      	beq.n	8008db8 <ucdr_serialize_uint32_t+0xdc>
 8008d7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008d82:	701a      	strb	r2, [r3, #0]
 8008d84:	68a3      	ldr	r3, [r4, #8]
 8008d86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d8a:	705a      	strb	r2, [r3, #1]
 8008d8c:	68a3      	ldr	r3, [r4, #8]
 8008d8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d92:	709a      	strb	r2, [r3, #2]
 8008d94:	68a3      	ldr	r3, [r4, #8]
 8008d96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d9a:	70da      	strb	r2, [r3, #3]
 8008d9c:	68a2      	ldr	r2, [r4, #8]
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	3204      	adds	r2, #4
 8008da2:	3304      	adds	r3, #4
 8008da4:	2104      	movs	r1, #4
 8008da6:	60a2      	str	r2, [r4, #8]
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	7561      	strb	r1, [r4, #21]
 8008dac:	7da0      	ldrb	r0, [r4, #22]
 8008dae:	f080 0001 	eor.w	r0, r0, #1
 8008db2:	b002      	add	sp, #8
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	9a01      	ldr	r2, [sp, #4]
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e7ee      	b.n	8008d9c <ucdr_serialize_uint32_t+0xc0>
 8008dbe:	68a2      	ldr	r2, [r4, #8]
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	7da0      	ldrb	r0, [r4, #22]
 8008dc4:	7567      	strb	r7, [r4, #21]
 8008dc6:	1b92      	subs	r2, r2, r6
 8008dc8:	1b9b      	subs	r3, r3, r6
 8008dca:	f080 0001 	eor.w	r0, r0, #1
 8008dce:	60a2      	str	r2, [r4, #8]
 8008dd0:	6123      	str	r3, [r4, #16]
 8008dd2:	b002      	add	sp, #8
 8008dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd8:	68a3      	ldr	r3, [r4, #8]
 8008dda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	68a3      	ldr	r3, [r4, #8]
 8008de2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008de6:	701a      	strb	r2, [r3, #0]
 8008de8:	68a3      	ldr	r3, [r4, #8]
 8008dea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	e7ad      	b.n	8008d4e <ucdr_serialize_uint32_t+0x72>
 8008df2:	4628      	mov	r0, r5
 8008df4:	ad01      	add	r5, sp, #4
 8008df6:	4629      	mov	r1, r5
 8008df8:	4632      	mov	r2, r6
 8008dfa:	f00d fd30 	bl	801685e <memcpy>
 8008dfe:	68a0      	ldr	r0, [r4, #8]
 8008e00:	4642      	mov	r2, r8
 8008e02:	19a9      	adds	r1, r5, r6
 8008e04:	f00d fd2b 	bl	801685e <memcpy>
 8008e08:	e7a1      	b.n	8008d4e <ucdr_serialize_uint32_t+0x72>
 8008e0a:	bf00      	nop

08008e0c <ucdr_serialize_endian_uint32_t>:
 8008e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e10:	b083      	sub	sp, #12
 8008e12:	460d      	mov	r5, r1
 8008e14:	2104      	movs	r1, #4
 8008e16:	4604      	mov	r4, r0
 8008e18:	9201      	str	r2, [sp, #4]
 8008e1a:	f000 fe97 	bl	8009b4c <ucdr_buffer_alignment>
 8008e1e:	4601      	mov	r1, r0
 8008e20:	4620      	mov	r0, r4
 8008e22:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008e26:	f000 fed5 	bl	8009bd4 <ucdr_advance_buffer>
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f000 fe2d 	bl	8009a8c <ucdr_check_buffer_available_for>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d138      	bne.n	8008ea8 <ucdr_serialize_endian_uint32_t+0x9c>
 8008e36:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008e3a:	42b7      	cmp	r7, r6
 8008e3c:	d92f      	bls.n	8008e9e <ucdr_serialize_endian_uint32_t+0x92>
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	60a7      	str	r7, [r4, #8]
 8008e42:	1bbf      	subs	r7, r7, r6
 8008e44:	443b      	add	r3, r7
 8008e46:	f1c7 0904 	rsb	r9, r7, #4
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	4649      	mov	r1, r9
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f000 fe28 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d04a      	beq.n	8008eee <ucdr_serialize_endian_uint32_t+0xe2>
 8008e58:	2d01      	cmp	r5, #1
 8008e5a:	d063      	beq.n	8008f24 <ucdr_serialize_endian_uint32_t+0x118>
 8008e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e60:	7033      	strb	r3, [r6, #0]
 8008e62:	2f00      	cmp	r7, #0
 8008e64:	d051      	beq.n	8008f0a <ucdr_serialize_endian_uint32_t+0xfe>
 8008e66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e6a:	7073      	strb	r3, [r6, #1]
 8008e6c:	2f01      	cmp	r7, #1
 8008e6e:	d050      	beq.n	8008f12 <ucdr_serialize_endian_uint32_t+0x106>
 8008e70:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008e74:	70b3      	strb	r3, [r6, #2]
 8008e76:	2f02      	cmp	r7, #2
 8008e78:	d04f      	beq.n	8008f1a <ucdr_serialize_endian_uint32_t+0x10e>
 8008e7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008e7e:	70f3      	strb	r3, [r6, #3]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	68a2      	ldr	r2, [r4, #8]
 8008e84:	7da0      	ldrb	r0, [r4, #22]
 8008e86:	3304      	adds	r3, #4
 8008e88:	444a      	add	r2, r9
 8008e8a:	1bdb      	subs	r3, r3, r7
 8008e8c:	2104      	movs	r1, #4
 8008e8e:	f080 0001 	eor.w	r0, r0, #1
 8008e92:	60a2      	str	r2, [r4, #8]
 8008e94:	6123      	str	r3, [r4, #16]
 8008e96:	7561      	strb	r1, [r4, #21]
 8008e98:	b003      	add	sp, #12
 8008e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e9e:	2104      	movs	r1, #4
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f000 fdff 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008ea6:	b1c8      	cbz	r0, 8008edc <ucdr_serialize_endian_uint32_t+0xd0>
 8008ea8:	2d01      	cmp	r5, #1
 8008eaa:	68a3      	ldr	r3, [r4, #8]
 8008eac:	d01c      	beq.n	8008ee8 <ucdr_serialize_endian_uint32_t+0xdc>
 8008eae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008eb2:	701a      	strb	r2, [r3, #0]
 8008eb4:	68a3      	ldr	r3, [r4, #8]
 8008eb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008eba:	705a      	strb	r2, [r3, #1]
 8008ebc:	68a3      	ldr	r3, [r4, #8]
 8008ebe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008ec2:	709a      	strb	r2, [r3, #2]
 8008ec4:	68a3      	ldr	r3, [r4, #8]
 8008ec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008eca:	70da      	strb	r2, [r3, #3]
 8008ecc:	68a2      	ldr	r2, [r4, #8]
 8008ece:	6923      	ldr	r3, [r4, #16]
 8008ed0:	3204      	adds	r2, #4
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	2104      	movs	r1, #4
 8008ed6:	60a2      	str	r2, [r4, #8]
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	7561      	strb	r1, [r4, #21]
 8008edc:	7da0      	ldrb	r0, [r4, #22]
 8008ede:	f080 0001 	eor.w	r0, r0, #1
 8008ee2:	b003      	add	sp, #12
 8008ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee8:	9a01      	ldr	r2, [sp, #4]
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e7ee      	b.n	8008ecc <ucdr_serialize_endian_uint32_t+0xc0>
 8008eee:	68a2      	ldr	r2, [r4, #8]
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	7da0      	ldrb	r0, [r4, #22]
 8008ef4:	f884 8015 	strb.w	r8, [r4, #21]
 8008ef8:	1bd2      	subs	r2, r2, r7
 8008efa:	1bdb      	subs	r3, r3, r7
 8008efc:	f080 0001 	eor.w	r0, r0, #1
 8008f00:	60a2      	str	r2, [r4, #8]
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	b003      	add	sp, #12
 8008f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f10:	701a      	strb	r2, [r3, #0]
 8008f12:	68a3      	ldr	r3, [r4, #8]
 8008f14:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	68a3      	ldr	r3, [r4, #8]
 8008f1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	e7ad      	b.n	8008e80 <ucdr_serialize_endian_uint32_t+0x74>
 8008f24:	ad01      	add	r5, sp, #4
 8008f26:	4629      	mov	r1, r5
 8008f28:	463a      	mov	r2, r7
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f00d fc97 	bl	801685e <memcpy>
 8008f30:	68a0      	ldr	r0, [r4, #8]
 8008f32:	464a      	mov	r2, r9
 8008f34:	19e9      	adds	r1, r5, r7
 8008f36:	f00d fc92 	bl	801685e <memcpy>
 8008f3a:	e7a1      	b.n	8008e80 <ucdr_serialize_endian_uint32_t+0x74>

08008f3c <ucdr_deserialize_uint32_t>:
 8008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f40:	460d      	mov	r5, r1
 8008f42:	2104      	movs	r1, #4
 8008f44:	4604      	mov	r4, r0
 8008f46:	f000 fe01 	bl	8009b4c <ucdr_buffer_alignment>
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008f52:	f000 fe3f 	bl	8009bd4 <ucdr_advance_buffer>
 8008f56:	2104      	movs	r1, #4
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 fd97 	bl	8009a8c <ucdr_check_buffer_available_for>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d138      	bne.n	8008fd4 <ucdr_deserialize_uint32_t+0x98>
 8008f62:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008f66:	42b7      	cmp	r7, r6
 8008f68:	d92f      	bls.n	8008fca <ucdr_deserialize_uint32_t+0x8e>
 8008f6a:	6923      	ldr	r3, [r4, #16]
 8008f6c:	60a7      	str	r7, [r4, #8]
 8008f6e:	1bbf      	subs	r7, r7, r6
 8008f70:	443b      	add	r3, r7
 8008f72:	f1c7 0904 	rsb	r9, r7, #4
 8008f76:	6123      	str	r3, [r4, #16]
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 fd92 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d046      	beq.n	8009012 <ucdr_deserialize_uint32_t+0xd6>
 8008f84:	7d23      	ldrb	r3, [r4, #20]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d05c      	beq.n	8009044 <ucdr_deserialize_uint32_t+0x108>
 8008f8a:	78f3      	ldrb	r3, [r6, #3]
 8008f8c:	702b      	strb	r3, [r5, #0]
 8008f8e:	2f00      	cmp	r7, #0
 8008f90:	d04c      	beq.n	800902c <ucdr_deserialize_uint32_t+0xf0>
 8008f92:	78b3      	ldrb	r3, [r6, #2]
 8008f94:	706b      	strb	r3, [r5, #1]
 8008f96:	2f01      	cmp	r7, #1
 8008f98:	f105 0302 	add.w	r3, r5, #2
 8008f9c:	d04a      	beq.n	8009034 <ucdr_deserialize_uint32_t+0xf8>
 8008f9e:	7873      	ldrb	r3, [r6, #1]
 8008fa0:	70ab      	strb	r3, [r5, #2]
 8008fa2:	2f02      	cmp	r7, #2
 8008fa4:	f105 0303 	add.w	r3, r5, #3
 8008fa8:	d048      	beq.n	800903c <ucdr_deserialize_uint32_t+0x100>
 8008faa:	7833      	ldrb	r3, [r6, #0]
 8008fac:	70eb      	strb	r3, [r5, #3]
 8008fae:	6923      	ldr	r3, [r4, #16]
 8008fb0:	68a2      	ldr	r2, [r4, #8]
 8008fb2:	7da0      	ldrb	r0, [r4, #22]
 8008fb4:	2104      	movs	r1, #4
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	444a      	add	r2, r9
 8008fba:	1bdb      	subs	r3, r3, r7
 8008fbc:	7561      	strb	r1, [r4, #21]
 8008fbe:	60a2      	str	r2, [r4, #8]
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	f080 0001 	eor.w	r0, r0, #1
 8008fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fca:	2104      	movs	r1, #4
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fd69 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8008fd2:	b1b0      	cbz	r0, 8009002 <ucdr_deserialize_uint32_t+0xc6>
 8008fd4:	7d23      	ldrb	r3, [r4, #20]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	68a3      	ldr	r3, [r4, #8]
 8008fda:	d017      	beq.n	800900c <ucdr_deserialize_uint32_t+0xd0>
 8008fdc:	78db      	ldrb	r3, [r3, #3]
 8008fde:	702b      	strb	r3, [r5, #0]
 8008fe0:	68a3      	ldr	r3, [r4, #8]
 8008fe2:	789b      	ldrb	r3, [r3, #2]
 8008fe4:	706b      	strb	r3, [r5, #1]
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	785b      	ldrb	r3, [r3, #1]
 8008fea:	70ab      	strb	r3, [r5, #2]
 8008fec:	68a3      	ldr	r3, [r4, #8]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	70eb      	strb	r3, [r5, #3]
 8008ff2:	68a2      	ldr	r2, [r4, #8]
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	3204      	adds	r2, #4
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	2104      	movs	r1, #4
 8008ffc:	60a2      	str	r2, [r4, #8]
 8008ffe:	6123      	str	r3, [r4, #16]
 8009000:	7561      	strb	r1, [r4, #21]
 8009002:	7da0      	ldrb	r0, [r4, #22]
 8009004:	f080 0001 	eor.w	r0, r0, #1
 8009008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	602b      	str	r3, [r5, #0]
 8009010:	e7ef      	b.n	8008ff2 <ucdr_deserialize_uint32_t+0xb6>
 8009012:	68a2      	ldr	r2, [r4, #8]
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	7da0      	ldrb	r0, [r4, #22]
 8009018:	f884 8015 	strb.w	r8, [r4, #21]
 800901c:	1bd2      	subs	r2, r2, r7
 800901e:	1bdb      	subs	r3, r3, r7
 8009020:	60a2      	str	r2, [r4, #8]
 8009022:	6123      	str	r3, [r4, #16]
 8009024:	f080 0001 	eor.w	r0, r0, #1
 8009028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800902c:	68a3      	ldr	r3, [r4, #8]
 800902e:	789b      	ldrb	r3, [r3, #2]
 8009030:	706b      	strb	r3, [r5, #1]
 8009032:	1cab      	adds	r3, r5, #2
 8009034:	68a2      	ldr	r2, [r4, #8]
 8009036:	7852      	ldrb	r2, [r2, #1]
 8009038:	f803 2b01 	strb.w	r2, [r3], #1
 800903c:	68a2      	ldr	r2, [r4, #8]
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	701a      	strb	r2, [r3, #0]
 8009042:	e7b4      	b.n	8008fae <ucdr_deserialize_uint32_t+0x72>
 8009044:	4631      	mov	r1, r6
 8009046:	463a      	mov	r2, r7
 8009048:	4628      	mov	r0, r5
 800904a:	f00d fc08 	bl	801685e <memcpy>
 800904e:	68a1      	ldr	r1, [r4, #8]
 8009050:	464a      	mov	r2, r9
 8009052:	19e8      	adds	r0, r5, r7
 8009054:	f00d fc03 	bl	801685e <memcpy>
 8009058:	e7a9      	b.n	8008fae <ucdr_deserialize_uint32_t+0x72>
 800905a:	bf00      	nop

0800905c <ucdr_deserialize_endian_uint32_t>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	460e      	mov	r6, r1
 8009062:	2104      	movs	r1, #4
 8009064:	4604      	mov	r4, r0
 8009066:	4615      	mov	r5, r2
 8009068:	f000 fd70 	bl	8009b4c <ucdr_buffer_alignment>
 800906c:	4601      	mov	r1, r0
 800906e:	4620      	mov	r0, r4
 8009070:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009074:	f000 fdae 	bl	8009bd4 <ucdr_advance_buffer>
 8009078:	2104      	movs	r1, #4
 800907a:	4620      	mov	r0, r4
 800907c:	f000 fd06 	bl	8009a8c <ucdr_check_buffer_available_for>
 8009080:	2800      	cmp	r0, #0
 8009082:	d13c      	bne.n	80090fe <ucdr_deserialize_endian_uint32_t+0xa2>
 8009084:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8009088:	42bb      	cmp	r3, r7
 800908a:	d933      	bls.n	80090f4 <ucdr_deserialize_endian_uint32_t+0x98>
 800908c:	eba3 0807 	sub.w	r8, r3, r7
 8009090:	60a3      	str	r3, [r4, #8]
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	f1c8 0a04 	rsb	sl, r8, #4
 8009098:	4443      	add	r3, r8
 800909a:	6123      	str	r3, [r4, #16]
 800909c:	4651      	mov	r1, sl
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 fd00 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	d048      	beq.n	800913a <ucdr_deserialize_endian_uint32_t+0xde>
 80090a8:	2e01      	cmp	r6, #1
 80090aa:	d061      	beq.n	8009170 <ucdr_deserialize_endian_uint32_t+0x114>
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	702b      	strb	r3, [r5, #0]
 80090b0:	f1b8 0f00 	cmp.w	r8, #0
 80090b4:	d050      	beq.n	8009158 <ucdr_deserialize_endian_uint32_t+0xfc>
 80090b6:	78bb      	ldrb	r3, [r7, #2]
 80090b8:	706b      	strb	r3, [r5, #1]
 80090ba:	f1b8 0f01 	cmp.w	r8, #1
 80090be:	f105 0302 	add.w	r3, r5, #2
 80090c2:	d04d      	beq.n	8009160 <ucdr_deserialize_endian_uint32_t+0x104>
 80090c4:	787b      	ldrb	r3, [r7, #1]
 80090c6:	70ab      	strb	r3, [r5, #2]
 80090c8:	f1b8 0f02 	cmp.w	r8, #2
 80090cc:	f105 0303 	add.w	r3, r5, #3
 80090d0:	d04a      	beq.n	8009168 <ucdr_deserialize_endian_uint32_t+0x10c>
 80090d2:	783b      	ldrb	r3, [r7, #0]
 80090d4:	70eb      	strb	r3, [r5, #3]
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	68a2      	ldr	r2, [r4, #8]
 80090da:	7da0      	ldrb	r0, [r4, #22]
 80090dc:	2104      	movs	r1, #4
 80090de:	3304      	adds	r3, #4
 80090e0:	4452      	add	r2, sl
 80090e2:	eba3 0308 	sub.w	r3, r3, r8
 80090e6:	7561      	strb	r1, [r4, #21]
 80090e8:	60a2      	str	r2, [r4, #8]
 80090ea:	6123      	str	r3, [r4, #16]
 80090ec:	f080 0001 	eor.w	r0, r0, #1
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	2104      	movs	r1, #4
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 fcd4 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80090fc:	b1a8      	cbz	r0, 800912a <ucdr_deserialize_endian_uint32_t+0xce>
 80090fe:	2e01      	cmp	r6, #1
 8009100:	68a3      	ldr	r3, [r4, #8]
 8009102:	d017      	beq.n	8009134 <ucdr_deserialize_endian_uint32_t+0xd8>
 8009104:	78db      	ldrb	r3, [r3, #3]
 8009106:	702b      	strb	r3, [r5, #0]
 8009108:	68a3      	ldr	r3, [r4, #8]
 800910a:	789b      	ldrb	r3, [r3, #2]
 800910c:	706b      	strb	r3, [r5, #1]
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	785b      	ldrb	r3, [r3, #1]
 8009112:	70ab      	strb	r3, [r5, #2]
 8009114:	68a3      	ldr	r3, [r4, #8]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	70eb      	strb	r3, [r5, #3]
 800911a:	68a2      	ldr	r2, [r4, #8]
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	3204      	adds	r2, #4
 8009120:	3304      	adds	r3, #4
 8009122:	2104      	movs	r1, #4
 8009124:	60a2      	str	r2, [r4, #8]
 8009126:	6123      	str	r3, [r4, #16]
 8009128:	7561      	strb	r1, [r4, #21]
 800912a:	7da0      	ldrb	r0, [r4, #22]
 800912c:	f080 0001 	eor.w	r0, r0, #1
 8009130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	e7ef      	b.n	800911a <ucdr_deserialize_endian_uint32_t+0xbe>
 800913a:	68a2      	ldr	r2, [r4, #8]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	7da0      	ldrb	r0, [r4, #22]
 8009140:	f884 9015 	strb.w	r9, [r4, #21]
 8009144:	eba2 0208 	sub.w	r2, r2, r8
 8009148:	eba3 0308 	sub.w	r3, r3, r8
 800914c:	60a2      	str	r2, [r4, #8]
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	f080 0001 	eor.w	r0, r0, #1
 8009154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009158:	68a3      	ldr	r3, [r4, #8]
 800915a:	789b      	ldrb	r3, [r3, #2]
 800915c:	706b      	strb	r3, [r5, #1]
 800915e:	1cab      	adds	r3, r5, #2
 8009160:	68a2      	ldr	r2, [r4, #8]
 8009162:	7852      	ldrb	r2, [r2, #1]
 8009164:	f803 2b01 	strb.w	r2, [r3], #1
 8009168:	68a2      	ldr	r2, [r4, #8]
 800916a:	7812      	ldrb	r2, [r2, #0]
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e7b2      	b.n	80090d6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8009170:	4639      	mov	r1, r7
 8009172:	4642      	mov	r2, r8
 8009174:	4628      	mov	r0, r5
 8009176:	f00d fb72 	bl	801685e <memcpy>
 800917a:	68a1      	ldr	r1, [r4, #8]
 800917c:	4652      	mov	r2, sl
 800917e:	eb05 0008 	add.w	r0, r5, r8
 8009182:	f00d fb6c 	bl	801685e <memcpy>
 8009186:	e7a6      	b.n	80090d6 <ucdr_deserialize_endian_uint32_t+0x7a>

08009188 <ucdr_serialize_uint64_t>:
 8009188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918c:	2108      	movs	r1, #8
 800918e:	b082      	sub	sp, #8
 8009190:	4604      	mov	r4, r0
 8009192:	e9cd 2300 	strd	r2, r3, [sp]
 8009196:	f000 fcd9 	bl	8009b4c <ucdr_buffer_alignment>
 800919a:	4601      	mov	r1, r0
 800919c:	4620      	mov	r0, r4
 800919e:	7d67      	ldrb	r7, [r4, #21]
 80091a0:	f000 fd18 	bl	8009bd4 <ucdr_advance_buffer>
 80091a4:	2108      	movs	r1, #8
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fc70 	bl	8009a8c <ucdr_check_buffer_available_for>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	d14e      	bne.n	800924e <ucdr_serialize_uint64_t+0xc6>
 80091b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80091b4:	42ab      	cmp	r3, r5
 80091b6:	d945      	bls.n	8009244 <ucdr_serialize_uint64_t+0xbc>
 80091b8:	1b5e      	subs	r6, r3, r5
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	f1c6 0808 	rsb	r8, r6, #8
 80091c2:	4433      	add	r3, r6
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	4641      	mov	r1, r8
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fc6b 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d074      	beq.n	80092bc <ucdr_serialize_uint64_t+0x134>
 80091d2:	7d23      	ldrb	r3, [r4, #20]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	f000 809b 	beq.w	8009310 <ucdr_serialize_uint64_t+0x188>
 80091da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091de:	702b      	strb	r3, [r5, #0]
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	d078      	beq.n	80092d6 <ucdr_serialize_uint64_t+0x14e>
 80091e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80091e8:	706b      	strb	r3, [r5, #1]
 80091ea:	2e01      	cmp	r6, #1
 80091ec:	d077      	beq.n	80092de <ucdr_serialize_uint64_t+0x156>
 80091ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80091f2:	70ab      	strb	r3, [r5, #2]
 80091f4:	2e02      	cmp	r6, #2
 80091f6:	d076      	beq.n	80092e6 <ucdr_serialize_uint64_t+0x15e>
 80091f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80091fc:	70eb      	strb	r3, [r5, #3]
 80091fe:	2e03      	cmp	r6, #3
 8009200:	d075      	beq.n	80092ee <ucdr_serialize_uint64_t+0x166>
 8009202:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009206:	712b      	strb	r3, [r5, #4]
 8009208:	2e04      	cmp	r6, #4
 800920a:	d074      	beq.n	80092f6 <ucdr_serialize_uint64_t+0x16e>
 800920c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009210:	716b      	strb	r3, [r5, #5]
 8009212:	2e05      	cmp	r6, #5
 8009214:	d073      	beq.n	80092fe <ucdr_serialize_uint64_t+0x176>
 8009216:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800921a:	71ab      	strb	r3, [r5, #6]
 800921c:	2e06      	cmp	r6, #6
 800921e:	d072      	beq.n	8009306 <ucdr_serialize_uint64_t+0x17e>
 8009220:	f89d 3000 	ldrb.w	r3, [sp]
 8009224:	71eb      	strb	r3, [r5, #7]
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	68a2      	ldr	r2, [r4, #8]
 800922a:	7da0      	ldrb	r0, [r4, #22]
 800922c:	3308      	adds	r3, #8
 800922e:	1b9e      	subs	r6, r3, r6
 8009230:	4442      	add	r2, r8
 8009232:	2308      	movs	r3, #8
 8009234:	f080 0001 	eor.w	r0, r0, #1
 8009238:	60a2      	str	r2, [r4, #8]
 800923a:	6126      	str	r6, [r4, #16]
 800923c:	7563      	strb	r3, [r4, #21]
 800923e:	b002      	add	sp, #8
 8009240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009244:	2108      	movs	r1, #8
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fc2c 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 800924c:	b350      	cbz	r0, 80092a4 <ucdr_serialize_uint64_t+0x11c>
 800924e:	7d23      	ldrb	r3, [r4, #20]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d02d      	beq.n	80092b0 <ucdr_serialize_uint64_t+0x128>
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	68a3      	ldr	r3, [r4, #8]
 800925e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009262:	705a      	strb	r2, [r3, #1]
 8009264:	68a3      	ldr	r3, [r4, #8]
 8009266:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800926a:	709a      	strb	r2, [r3, #2]
 800926c:	68a3      	ldr	r3, [r4, #8]
 800926e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009272:	70da      	strb	r2, [r3, #3]
 8009274:	68a3      	ldr	r3, [r4, #8]
 8009276:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800927a:	711a      	strb	r2, [r3, #4]
 800927c:	68a3      	ldr	r3, [r4, #8]
 800927e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009282:	715a      	strb	r2, [r3, #5]
 8009284:	68a3      	ldr	r3, [r4, #8]
 8009286:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800928a:	719a      	strb	r2, [r3, #6]
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	f89d 2000 	ldrb.w	r2, [sp]
 8009292:	71da      	strb	r2, [r3, #7]
 8009294:	68a2      	ldr	r2, [r4, #8]
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	3208      	adds	r2, #8
 800929a:	3308      	adds	r3, #8
 800929c:	2108      	movs	r1, #8
 800929e:	60a2      	str	r2, [r4, #8]
 80092a0:	6123      	str	r3, [r4, #16]
 80092a2:	7561      	strb	r1, [r4, #21]
 80092a4:	7da0      	ldrb	r0, [r4, #22]
 80092a6:	f080 0001 	eor.w	r0, r0, #1
 80092aa:	b002      	add	sp, #8
 80092ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b0:	466b      	mov	r3, sp
 80092b2:	cb03      	ldmia	r3!, {r0, r1}
 80092b4:	68a3      	ldr	r3, [r4, #8]
 80092b6:	6018      	str	r0, [r3, #0]
 80092b8:	6059      	str	r1, [r3, #4]
 80092ba:	e7eb      	b.n	8009294 <ucdr_serialize_uint64_t+0x10c>
 80092bc:	68a2      	ldr	r2, [r4, #8]
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	7da0      	ldrb	r0, [r4, #22]
 80092c2:	7567      	strb	r7, [r4, #21]
 80092c4:	1b92      	subs	r2, r2, r6
 80092c6:	1b9b      	subs	r3, r3, r6
 80092c8:	f080 0001 	eor.w	r0, r0, #1
 80092cc:	60a2      	str	r2, [r4, #8]
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	b002      	add	sp, #8
 80092d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d6:	68a3      	ldr	r3, [r4, #8]
 80092d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80092dc:	701a      	strb	r2, [r3, #0]
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	68a3      	ldr	r3, [r4, #8]
 80092e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	68a3      	ldr	r3, [r4, #8]
 80092f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80092fc:	701a      	strb	r2, [r3, #0]
 80092fe:	68a3      	ldr	r3, [r4, #8]
 8009300:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009304:	701a      	strb	r2, [r3, #0]
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	f89d 2000 	ldrb.w	r2, [sp]
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	e78a      	b.n	8009226 <ucdr_serialize_uint64_t+0x9e>
 8009310:	4628      	mov	r0, r5
 8009312:	466d      	mov	r5, sp
 8009314:	4629      	mov	r1, r5
 8009316:	4632      	mov	r2, r6
 8009318:	f00d faa1 	bl	801685e <memcpy>
 800931c:	68a0      	ldr	r0, [r4, #8]
 800931e:	4642      	mov	r2, r8
 8009320:	19a9      	adds	r1, r5, r6
 8009322:	f00d fa9c 	bl	801685e <memcpy>
 8009326:	e77e      	b.n	8009226 <ucdr_serialize_uint64_t+0x9e>

08009328 <ucdr_serialize_int16_t>:
 8009328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800932c:	b082      	sub	sp, #8
 800932e:	460b      	mov	r3, r1
 8009330:	2102      	movs	r1, #2
 8009332:	4604      	mov	r4, r0
 8009334:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009338:	f000 fc08 	bl	8009b4c <ucdr_buffer_alignment>
 800933c:	4601      	mov	r1, r0
 800933e:	4620      	mov	r0, r4
 8009340:	7d67      	ldrb	r7, [r4, #21]
 8009342:	f000 fc47 	bl	8009bd4 <ucdr_advance_buffer>
 8009346:	2102      	movs	r1, #2
 8009348:	4620      	mov	r0, r4
 800934a:	f000 fb9f 	bl	8009a8c <ucdr_check_buffer_available_for>
 800934e:	bb78      	cbnz	r0, 80093b0 <ucdr_serialize_int16_t+0x88>
 8009350:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009354:	42ab      	cmp	r3, r5
 8009356:	d926      	bls.n	80093a6 <ucdr_serialize_int16_t+0x7e>
 8009358:	1b5e      	subs	r6, r3, r5
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	6923      	ldr	r3, [r4, #16]
 800935e:	f1c6 0802 	rsb	r8, r6, #2
 8009362:	4433      	add	r3, r6
 8009364:	6123      	str	r3, [r4, #16]
 8009366:	4641      	mov	r1, r8
 8009368:	4620      	mov	r0, r4
 800936a:	f000 fb9b 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 800936e:	2800      	cmp	r0, #0
 8009370:	d03b      	beq.n	80093ea <ucdr_serialize_int16_t+0xc2>
 8009372:	7d23      	ldrb	r3, [r4, #20]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d04a      	beq.n	800940e <ucdr_serialize_int16_t+0xe6>
 8009378:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800937c:	702b      	strb	r3, [r5, #0]
 800937e:	2e00      	cmp	r6, #0
 8009380:	d040      	beq.n	8009404 <ucdr_serialize_int16_t+0xdc>
 8009382:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009386:	706b      	strb	r3, [r5, #1]
 8009388:	6923      	ldr	r3, [r4, #16]
 800938a:	68a2      	ldr	r2, [r4, #8]
 800938c:	7da0      	ldrb	r0, [r4, #22]
 800938e:	3302      	adds	r3, #2
 8009390:	1b9e      	subs	r6, r3, r6
 8009392:	4442      	add	r2, r8
 8009394:	2302      	movs	r3, #2
 8009396:	f080 0001 	eor.w	r0, r0, #1
 800939a:	60a2      	str	r2, [r4, #8]
 800939c:	6126      	str	r6, [r4, #16]
 800939e:	7563      	strb	r3, [r4, #21]
 80093a0:	b002      	add	sp, #8
 80093a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a6:	2102      	movs	r1, #2
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 fb7b 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80093ae:	b190      	cbz	r0, 80093d6 <ucdr_serialize_int16_t+0xae>
 80093b0:	7d23      	ldrb	r3, [r4, #20]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	68a3      	ldr	r3, [r4, #8]
 80093b6:	d014      	beq.n	80093e2 <ucdr_serialize_int16_t+0xba>
 80093b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80093c4:	705a      	strb	r2, [r3, #1]
 80093c6:	68a2      	ldr	r2, [r4, #8]
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	3202      	adds	r2, #2
 80093cc:	3302      	adds	r3, #2
 80093ce:	2102      	movs	r1, #2
 80093d0:	60a2      	str	r2, [r4, #8]
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	7561      	strb	r1, [r4, #21]
 80093d6:	7da0      	ldrb	r0, [r4, #22]
 80093d8:	f080 0001 	eor.w	r0, r0, #1
 80093dc:	b002      	add	sp, #8
 80093de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	e7ed      	b.n	80093c6 <ucdr_serialize_int16_t+0x9e>
 80093ea:	68a2      	ldr	r2, [r4, #8]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	7da0      	ldrb	r0, [r4, #22]
 80093f0:	7567      	strb	r7, [r4, #21]
 80093f2:	1b92      	subs	r2, r2, r6
 80093f4:	1b9b      	subs	r3, r3, r6
 80093f6:	f080 0001 	eor.w	r0, r0, #1
 80093fa:	60a2      	str	r2, [r4, #8]
 80093fc:	6123      	str	r3, [r4, #16]
 80093fe:	b002      	add	sp, #8
 8009400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800940a:	701a      	strb	r2, [r3, #0]
 800940c:	e7bc      	b.n	8009388 <ucdr_serialize_int16_t+0x60>
 800940e:	4628      	mov	r0, r5
 8009410:	f10d 0506 	add.w	r5, sp, #6
 8009414:	4629      	mov	r1, r5
 8009416:	4632      	mov	r2, r6
 8009418:	f00d fa21 	bl	801685e <memcpy>
 800941c:	68a0      	ldr	r0, [r4, #8]
 800941e:	4642      	mov	r2, r8
 8009420:	19a9      	adds	r1, r5, r6
 8009422:	f00d fa1c 	bl	801685e <memcpy>
 8009426:	e7af      	b.n	8009388 <ucdr_serialize_int16_t+0x60>

08009428 <ucdr_deserialize_int16_t>:
 8009428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800942c:	460d      	mov	r5, r1
 800942e:	2102      	movs	r1, #2
 8009430:	4604      	mov	r4, r0
 8009432:	f000 fb8b 	bl	8009b4c <ucdr_buffer_alignment>
 8009436:	4601      	mov	r1, r0
 8009438:	4620      	mov	r0, r4
 800943a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800943e:	f000 fbc9 	bl	8009bd4 <ucdr_advance_buffer>
 8009442:	2102      	movs	r1, #2
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fb21 	bl	8009a8c <ucdr_check_buffer_available_for>
 800944a:	bb60      	cbnz	r0, 80094a6 <ucdr_deserialize_int16_t+0x7e>
 800944c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009450:	42be      	cmp	r6, r7
 8009452:	d923      	bls.n	800949c <ucdr_deserialize_int16_t+0x74>
 8009454:	6923      	ldr	r3, [r4, #16]
 8009456:	60a6      	str	r6, [r4, #8]
 8009458:	1bf6      	subs	r6, r6, r7
 800945a:	4433      	add	r3, r6
 800945c:	f1c6 0902 	rsb	r9, r6, #2
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	4649      	mov	r1, r9
 8009464:	4620      	mov	r0, r4
 8009466:	f000 fb1d 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 800946a:	2800      	cmp	r0, #0
 800946c:	d034      	beq.n	80094d8 <ucdr_deserialize_int16_t+0xb0>
 800946e:	7d23      	ldrb	r3, [r4, #20]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d042      	beq.n	80094fa <ucdr_deserialize_int16_t+0xd2>
 8009474:	787b      	ldrb	r3, [r7, #1]
 8009476:	702b      	strb	r3, [r5, #0]
 8009478:	2e00      	cmp	r6, #0
 800947a:	d03a      	beq.n	80094f2 <ucdr_deserialize_int16_t+0xca>
 800947c:	783b      	ldrb	r3, [r7, #0]
 800947e:	706b      	strb	r3, [r5, #1]
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	68a2      	ldr	r2, [r4, #8]
 8009484:	7da0      	ldrb	r0, [r4, #22]
 8009486:	2102      	movs	r1, #2
 8009488:	3302      	adds	r3, #2
 800948a:	444a      	add	r2, r9
 800948c:	1b9b      	subs	r3, r3, r6
 800948e:	7561      	strb	r1, [r4, #21]
 8009490:	60a2      	str	r2, [r4, #8]
 8009492:	6123      	str	r3, [r4, #16]
 8009494:	f080 0001 	eor.w	r0, r0, #1
 8009498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949c:	2102      	movs	r1, #2
 800949e:	4620      	mov	r0, r4
 80094a0:	f000 fb00 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80094a4:	b180      	cbz	r0, 80094c8 <ucdr_deserialize_int16_t+0xa0>
 80094a6:	7d23      	ldrb	r3, [r4, #20]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	68a3      	ldr	r3, [r4, #8]
 80094ac:	d011      	beq.n	80094d2 <ucdr_deserialize_int16_t+0xaa>
 80094ae:	785b      	ldrb	r3, [r3, #1]
 80094b0:	702b      	strb	r3, [r5, #0]
 80094b2:	68a3      	ldr	r3, [r4, #8]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	706b      	strb	r3, [r5, #1]
 80094b8:	68a2      	ldr	r2, [r4, #8]
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	3202      	adds	r2, #2
 80094be:	3302      	adds	r3, #2
 80094c0:	2102      	movs	r1, #2
 80094c2:	60a2      	str	r2, [r4, #8]
 80094c4:	6123      	str	r3, [r4, #16]
 80094c6:	7561      	strb	r1, [r4, #21]
 80094c8:	7da0      	ldrb	r0, [r4, #22]
 80094ca:	f080 0001 	eor.w	r0, r0, #1
 80094ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	802b      	strh	r3, [r5, #0]
 80094d6:	e7ef      	b.n	80094b8 <ucdr_deserialize_int16_t+0x90>
 80094d8:	68a2      	ldr	r2, [r4, #8]
 80094da:	6923      	ldr	r3, [r4, #16]
 80094dc:	7da0      	ldrb	r0, [r4, #22]
 80094de:	f884 8015 	strb.w	r8, [r4, #21]
 80094e2:	1b92      	subs	r2, r2, r6
 80094e4:	1b9b      	subs	r3, r3, r6
 80094e6:	60a2      	str	r2, [r4, #8]
 80094e8:	6123      	str	r3, [r4, #16]
 80094ea:	f080 0001 	eor.w	r0, r0, #1
 80094ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	706b      	strb	r3, [r5, #1]
 80094f8:	e7c2      	b.n	8009480 <ucdr_deserialize_int16_t+0x58>
 80094fa:	4639      	mov	r1, r7
 80094fc:	4632      	mov	r2, r6
 80094fe:	4628      	mov	r0, r5
 8009500:	f00d f9ad 	bl	801685e <memcpy>
 8009504:	68a1      	ldr	r1, [r4, #8]
 8009506:	464a      	mov	r2, r9
 8009508:	19a8      	adds	r0, r5, r6
 800950a:	f00d f9a8 	bl	801685e <memcpy>
 800950e:	e7b7      	b.n	8009480 <ucdr_deserialize_int16_t+0x58>

08009510 <ucdr_serialize_int32_t>:
 8009510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	4604      	mov	r4, r0
 8009518:	9101      	str	r1, [sp, #4]
 800951a:	2104      	movs	r1, #4
 800951c:	f000 fb16 	bl	8009b4c <ucdr_buffer_alignment>
 8009520:	4601      	mov	r1, r0
 8009522:	4620      	mov	r0, r4
 8009524:	7d67      	ldrb	r7, [r4, #21]
 8009526:	f000 fb55 	bl	8009bd4 <ucdr_advance_buffer>
 800952a:	2104      	movs	r1, #4
 800952c:	4620      	mov	r0, r4
 800952e:	f000 faad 	bl	8009a8c <ucdr_check_buffer_available_for>
 8009532:	2800      	cmp	r0, #0
 8009534:	d139      	bne.n	80095aa <ucdr_serialize_int32_t+0x9a>
 8009536:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800953a:	42ab      	cmp	r3, r5
 800953c:	d930      	bls.n	80095a0 <ucdr_serialize_int32_t+0x90>
 800953e:	1b5e      	subs	r6, r3, r5
 8009540:	60a3      	str	r3, [r4, #8]
 8009542:	6923      	ldr	r3, [r4, #16]
 8009544:	f1c6 0804 	rsb	r8, r6, #4
 8009548:	4433      	add	r3, r6
 800954a:	6123      	str	r3, [r4, #16]
 800954c:	4641      	mov	r1, r8
 800954e:	4620      	mov	r0, r4
 8009550:	f000 faa8 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8009554:	2800      	cmp	r0, #0
 8009556:	d04c      	beq.n	80095f2 <ucdr_serialize_int32_t+0xe2>
 8009558:	7d23      	ldrb	r3, [r4, #20]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d063      	beq.n	8009626 <ucdr_serialize_int32_t+0x116>
 800955e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009562:	702b      	strb	r3, [r5, #0]
 8009564:	2e00      	cmp	r6, #0
 8009566:	d051      	beq.n	800960c <ucdr_serialize_int32_t+0xfc>
 8009568:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800956c:	706b      	strb	r3, [r5, #1]
 800956e:	2e01      	cmp	r6, #1
 8009570:	d050      	beq.n	8009614 <ucdr_serialize_int32_t+0x104>
 8009572:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009576:	70ab      	strb	r3, [r5, #2]
 8009578:	2e02      	cmp	r6, #2
 800957a:	d04f      	beq.n	800961c <ucdr_serialize_int32_t+0x10c>
 800957c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009580:	70eb      	strb	r3, [r5, #3]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	68a2      	ldr	r2, [r4, #8]
 8009586:	7da0      	ldrb	r0, [r4, #22]
 8009588:	3304      	adds	r3, #4
 800958a:	1b9e      	subs	r6, r3, r6
 800958c:	4442      	add	r2, r8
 800958e:	2304      	movs	r3, #4
 8009590:	f080 0001 	eor.w	r0, r0, #1
 8009594:	60a2      	str	r2, [r4, #8]
 8009596:	6126      	str	r6, [r4, #16]
 8009598:	7563      	strb	r3, [r4, #21]
 800959a:	b002      	add	sp, #8
 800959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a0:	2104      	movs	r1, #4
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 fa7e 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80095a8:	b1d0      	cbz	r0, 80095e0 <ucdr_serialize_int32_t+0xd0>
 80095aa:	7d23      	ldrb	r3, [r4, #20]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	68a3      	ldr	r3, [r4, #8]
 80095b0:	d01c      	beq.n	80095ec <ucdr_serialize_int32_t+0xdc>
 80095b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	68a3      	ldr	r3, [r4, #8]
 80095ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80095be:	705a      	strb	r2, [r3, #1]
 80095c0:	68a3      	ldr	r3, [r4, #8]
 80095c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80095c6:	709a      	strb	r2, [r3, #2]
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80095ce:	70da      	strb	r2, [r3, #3]
 80095d0:	68a2      	ldr	r2, [r4, #8]
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	3204      	adds	r2, #4
 80095d6:	3304      	adds	r3, #4
 80095d8:	2104      	movs	r1, #4
 80095da:	60a2      	str	r2, [r4, #8]
 80095dc:	6123      	str	r3, [r4, #16]
 80095de:	7561      	strb	r1, [r4, #21]
 80095e0:	7da0      	ldrb	r0, [r4, #22]
 80095e2:	f080 0001 	eor.w	r0, r0, #1
 80095e6:	b002      	add	sp, #8
 80095e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ec:	9a01      	ldr	r2, [sp, #4]
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	e7ee      	b.n	80095d0 <ucdr_serialize_int32_t+0xc0>
 80095f2:	68a2      	ldr	r2, [r4, #8]
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	7da0      	ldrb	r0, [r4, #22]
 80095f8:	7567      	strb	r7, [r4, #21]
 80095fa:	1b92      	subs	r2, r2, r6
 80095fc:	1b9b      	subs	r3, r3, r6
 80095fe:	f080 0001 	eor.w	r0, r0, #1
 8009602:	60a2      	str	r2, [r4, #8]
 8009604:	6123      	str	r3, [r4, #16]
 8009606:	b002      	add	sp, #8
 8009608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960c:	68a3      	ldr	r3, [r4, #8]
 800960e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	68a3      	ldr	r3, [r4, #8]
 8009616:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800961a:	701a      	strb	r2, [r3, #0]
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	e7ad      	b.n	8009582 <ucdr_serialize_int32_t+0x72>
 8009626:	4628      	mov	r0, r5
 8009628:	ad01      	add	r5, sp, #4
 800962a:	4629      	mov	r1, r5
 800962c:	4632      	mov	r2, r6
 800962e:	f00d f916 	bl	801685e <memcpy>
 8009632:	68a0      	ldr	r0, [r4, #8]
 8009634:	4642      	mov	r2, r8
 8009636:	19a9      	adds	r1, r5, r6
 8009638:	f00d f911 	bl	801685e <memcpy>
 800963c:	e7a1      	b.n	8009582 <ucdr_serialize_int32_t+0x72>
 800963e:	bf00      	nop

08009640 <ucdr_deserialize_int32_t>:
 8009640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009644:	460d      	mov	r5, r1
 8009646:	2104      	movs	r1, #4
 8009648:	4604      	mov	r4, r0
 800964a:	f000 fa7f 	bl	8009b4c <ucdr_buffer_alignment>
 800964e:	4601      	mov	r1, r0
 8009650:	4620      	mov	r0, r4
 8009652:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009656:	f000 fabd 	bl	8009bd4 <ucdr_advance_buffer>
 800965a:	2104      	movs	r1, #4
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fa15 	bl	8009a8c <ucdr_check_buffer_available_for>
 8009662:	2800      	cmp	r0, #0
 8009664:	d138      	bne.n	80096d8 <ucdr_deserialize_int32_t+0x98>
 8009666:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800966a:	42b7      	cmp	r7, r6
 800966c:	d92f      	bls.n	80096ce <ucdr_deserialize_int32_t+0x8e>
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	60a7      	str	r7, [r4, #8]
 8009672:	1bbf      	subs	r7, r7, r6
 8009674:	443b      	add	r3, r7
 8009676:	f1c7 0904 	rsb	r9, r7, #4
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	4649      	mov	r1, r9
 800967e:	4620      	mov	r0, r4
 8009680:	f000 fa10 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8009684:	2800      	cmp	r0, #0
 8009686:	d046      	beq.n	8009716 <ucdr_deserialize_int32_t+0xd6>
 8009688:	7d23      	ldrb	r3, [r4, #20]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d05c      	beq.n	8009748 <ucdr_deserialize_int32_t+0x108>
 800968e:	78f3      	ldrb	r3, [r6, #3]
 8009690:	702b      	strb	r3, [r5, #0]
 8009692:	2f00      	cmp	r7, #0
 8009694:	d04c      	beq.n	8009730 <ucdr_deserialize_int32_t+0xf0>
 8009696:	78b3      	ldrb	r3, [r6, #2]
 8009698:	706b      	strb	r3, [r5, #1]
 800969a:	2f01      	cmp	r7, #1
 800969c:	f105 0302 	add.w	r3, r5, #2
 80096a0:	d04a      	beq.n	8009738 <ucdr_deserialize_int32_t+0xf8>
 80096a2:	7873      	ldrb	r3, [r6, #1]
 80096a4:	70ab      	strb	r3, [r5, #2]
 80096a6:	2f02      	cmp	r7, #2
 80096a8:	f105 0303 	add.w	r3, r5, #3
 80096ac:	d048      	beq.n	8009740 <ucdr_deserialize_int32_t+0x100>
 80096ae:	7833      	ldrb	r3, [r6, #0]
 80096b0:	70eb      	strb	r3, [r5, #3]
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	68a2      	ldr	r2, [r4, #8]
 80096b6:	7da0      	ldrb	r0, [r4, #22]
 80096b8:	2104      	movs	r1, #4
 80096ba:	3304      	adds	r3, #4
 80096bc:	444a      	add	r2, r9
 80096be:	1bdb      	subs	r3, r3, r7
 80096c0:	7561      	strb	r1, [r4, #21]
 80096c2:	60a2      	str	r2, [r4, #8]
 80096c4:	6123      	str	r3, [r4, #16]
 80096c6:	f080 0001 	eor.w	r0, r0, #1
 80096ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ce:	2104      	movs	r1, #4
 80096d0:	4620      	mov	r0, r4
 80096d2:	f000 f9e7 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80096d6:	b1b0      	cbz	r0, 8009706 <ucdr_deserialize_int32_t+0xc6>
 80096d8:	7d23      	ldrb	r3, [r4, #20]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	68a3      	ldr	r3, [r4, #8]
 80096de:	d017      	beq.n	8009710 <ucdr_deserialize_int32_t+0xd0>
 80096e0:	78db      	ldrb	r3, [r3, #3]
 80096e2:	702b      	strb	r3, [r5, #0]
 80096e4:	68a3      	ldr	r3, [r4, #8]
 80096e6:	789b      	ldrb	r3, [r3, #2]
 80096e8:	706b      	strb	r3, [r5, #1]
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	785b      	ldrb	r3, [r3, #1]
 80096ee:	70ab      	strb	r3, [r5, #2]
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	70eb      	strb	r3, [r5, #3]
 80096f6:	68a2      	ldr	r2, [r4, #8]
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	3204      	adds	r2, #4
 80096fc:	3304      	adds	r3, #4
 80096fe:	2104      	movs	r1, #4
 8009700:	60a2      	str	r2, [r4, #8]
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	7561      	strb	r1, [r4, #21]
 8009706:	7da0      	ldrb	r0, [r4, #22]
 8009708:	f080 0001 	eor.w	r0, r0, #1
 800970c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	e7ef      	b.n	80096f6 <ucdr_deserialize_int32_t+0xb6>
 8009716:	68a2      	ldr	r2, [r4, #8]
 8009718:	6923      	ldr	r3, [r4, #16]
 800971a:	7da0      	ldrb	r0, [r4, #22]
 800971c:	f884 8015 	strb.w	r8, [r4, #21]
 8009720:	1bd2      	subs	r2, r2, r7
 8009722:	1bdb      	subs	r3, r3, r7
 8009724:	60a2      	str	r2, [r4, #8]
 8009726:	6123      	str	r3, [r4, #16]
 8009728:	f080 0001 	eor.w	r0, r0, #1
 800972c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	789b      	ldrb	r3, [r3, #2]
 8009734:	706b      	strb	r3, [r5, #1]
 8009736:	1cab      	adds	r3, r5, #2
 8009738:	68a2      	ldr	r2, [r4, #8]
 800973a:	7852      	ldrb	r2, [r2, #1]
 800973c:	f803 2b01 	strb.w	r2, [r3], #1
 8009740:	68a2      	ldr	r2, [r4, #8]
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	701a      	strb	r2, [r3, #0]
 8009746:	e7b4      	b.n	80096b2 <ucdr_deserialize_int32_t+0x72>
 8009748:	4631      	mov	r1, r6
 800974a:	463a      	mov	r2, r7
 800974c:	4628      	mov	r0, r5
 800974e:	f00d f886 	bl	801685e <memcpy>
 8009752:	68a1      	ldr	r1, [r4, #8]
 8009754:	464a      	mov	r2, r9
 8009756:	19e8      	adds	r0, r5, r7
 8009758:	f00d f881 	bl	801685e <memcpy>
 800975c:	e7a9      	b.n	80096b2 <ucdr_deserialize_int32_t+0x72>
 800975e:	bf00      	nop

08009760 <ucdr_serialize_int64_t>:
 8009760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009764:	2108      	movs	r1, #8
 8009766:	b082      	sub	sp, #8
 8009768:	4604      	mov	r4, r0
 800976a:	e9cd 2300 	strd	r2, r3, [sp]
 800976e:	f000 f9ed 	bl	8009b4c <ucdr_buffer_alignment>
 8009772:	4601      	mov	r1, r0
 8009774:	4620      	mov	r0, r4
 8009776:	7d67      	ldrb	r7, [r4, #21]
 8009778:	f000 fa2c 	bl	8009bd4 <ucdr_advance_buffer>
 800977c:	2108      	movs	r1, #8
 800977e:	4620      	mov	r0, r4
 8009780:	f000 f984 	bl	8009a8c <ucdr_check_buffer_available_for>
 8009784:	2800      	cmp	r0, #0
 8009786:	d14e      	bne.n	8009826 <ucdr_serialize_int64_t+0xc6>
 8009788:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800978c:	42ab      	cmp	r3, r5
 800978e:	d945      	bls.n	800981c <ucdr_serialize_int64_t+0xbc>
 8009790:	1b5e      	subs	r6, r3, r5
 8009792:	60a3      	str	r3, [r4, #8]
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	f1c6 0808 	rsb	r8, r6, #8
 800979a:	4433      	add	r3, r6
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	4641      	mov	r1, r8
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 f97f 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d074      	beq.n	8009894 <ucdr_serialize_int64_t+0x134>
 80097aa:	7d23      	ldrb	r3, [r4, #20]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	f000 809b 	beq.w	80098e8 <ucdr_serialize_int64_t+0x188>
 80097b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80097b6:	702b      	strb	r3, [r5, #0]
 80097b8:	2e00      	cmp	r6, #0
 80097ba:	d078      	beq.n	80098ae <ucdr_serialize_int64_t+0x14e>
 80097bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80097c0:	706b      	strb	r3, [r5, #1]
 80097c2:	2e01      	cmp	r6, #1
 80097c4:	d077      	beq.n	80098b6 <ucdr_serialize_int64_t+0x156>
 80097c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80097ca:	70ab      	strb	r3, [r5, #2]
 80097cc:	2e02      	cmp	r6, #2
 80097ce:	d076      	beq.n	80098be <ucdr_serialize_int64_t+0x15e>
 80097d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80097d4:	70eb      	strb	r3, [r5, #3]
 80097d6:	2e03      	cmp	r6, #3
 80097d8:	d075      	beq.n	80098c6 <ucdr_serialize_int64_t+0x166>
 80097da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80097de:	712b      	strb	r3, [r5, #4]
 80097e0:	2e04      	cmp	r6, #4
 80097e2:	d074      	beq.n	80098ce <ucdr_serialize_int64_t+0x16e>
 80097e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80097e8:	716b      	strb	r3, [r5, #5]
 80097ea:	2e05      	cmp	r6, #5
 80097ec:	d073      	beq.n	80098d6 <ucdr_serialize_int64_t+0x176>
 80097ee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80097f2:	71ab      	strb	r3, [r5, #6]
 80097f4:	2e06      	cmp	r6, #6
 80097f6:	d072      	beq.n	80098de <ucdr_serialize_int64_t+0x17e>
 80097f8:	f89d 3000 	ldrb.w	r3, [sp]
 80097fc:	71eb      	strb	r3, [r5, #7]
 80097fe:	6923      	ldr	r3, [r4, #16]
 8009800:	68a2      	ldr	r2, [r4, #8]
 8009802:	7da0      	ldrb	r0, [r4, #22]
 8009804:	3308      	adds	r3, #8
 8009806:	1b9e      	subs	r6, r3, r6
 8009808:	4442      	add	r2, r8
 800980a:	2308      	movs	r3, #8
 800980c:	f080 0001 	eor.w	r0, r0, #1
 8009810:	60a2      	str	r2, [r4, #8]
 8009812:	6126      	str	r6, [r4, #16]
 8009814:	7563      	strb	r3, [r4, #21]
 8009816:	b002      	add	sp, #8
 8009818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981c:	2108      	movs	r1, #8
 800981e:	4620      	mov	r0, r4
 8009820:	f000 f940 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8009824:	b350      	cbz	r0, 800987c <ucdr_serialize_int64_t+0x11c>
 8009826:	7d23      	ldrb	r3, [r4, #20]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d02d      	beq.n	8009888 <ucdr_serialize_int64_t+0x128>
 800982c:	68a3      	ldr	r3, [r4, #8]
 800982e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009832:	701a      	strb	r2, [r3, #0]
 8009834:	68a3      	ldr	r3, [r4, #8]
 8009836:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800983a:	705a      	strb	r2, [r3, #1]
 800983c:	68a3      	ldr	r3, [r4, #8]
 800983e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009842:	709a      	strb	r2, [r3, #2]
 8009844:	68a3      	ldr	r3, [r4, #8]
 8009846:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800984a:	70da      	strb	r2, [r3, #3]
 800984c:	68a3      	ldr	r3, [r4, #8]
 800984e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009852:	711a      	strb	r2, [r3, #4]
 8009854:	68a3      	ldr	r3, [r4, #8]
 8009856:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800985a:	715a      	strb	r2, [r3, #5]
 800985c:	68a3      	ldr	r3, [r4, #8]
 800985e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009862:	719a      	strb	r2, [r3, #6]
 8009864:	68a3      	ldr	r3, [r4, #8]
 8009866:	f89d 2000 	ldrb.w	r2, [sp]
 800986a:	71da      	strb	r2, [r3, #7]
 800986c:	68a2      	ldr	r2, [r4, #8]
 800986e:	6923      	ldr	r3, [r4, #16]
 8009870:	3208      	adds	r2, #8
 8009872:	3308      	adds	r3, #8
 8009874:	2108      	movs	r1, #8
 8009876:	60a2      	str	r2, [r4, #8]
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	7561      	strb	r1, [r4, #21]
 800987c:	7da0      	ldrb	r0, [r4, #22]
 800987e:	f080 0001 	eor.w	r0, r0, #1
 8009882:	b002      	add	sp, #8
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	466b      	mov	r3, sp
 800988a:	cb03      	ldmia	r3!, {r0, r1}
 800988c:	68a3      	ldr	r3, [r4, #8]
 800988e:	6018      	str	r0, [r3, #0]
 8009890:	6059      	str	r1, [r3, #4]
 8009892:	e7eb      	b.n	800986c <ucdr_serialize_int64_t+0x10c>
 8009894:	68a2      	ldr	r2, [r4, #8]
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	7da0      	ldrb	r0, [r4, #22]
 800989a:	7567      	strb	r7, [r4, #21]
 800989c:	1b92      	subs	r2, r2, r6
 800989e:	1b9b      	subs	r3, r3, r6
 80098a0:	f080 0001 	eor.w	r0, r0, #1
 80098a4:	60a2      	str	r2, [r4, #8]
 80098a6:	6123      	str	r3, [r4, #16]
 80098a8:	b002      	add	sp, #8
 80098aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ae:	68a3      	ldr	r3, [r4, #8]
 80098b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	68a3      	ldr	r3, [r4, #8]
 80098b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	68a3      	ldr	r3, [r4, #8]
 80098e0:	f89d 2000 	ldrb.w	r2, [sp]
 80098e4:	701a      	strb	r2, [r3, #0]
 80098e6:	e78a      	b.n	80097fe <ucdr_serialize_int64_t+0x9e>
 80098e8:	4628      	mov	r0, r5
 80098ea:	466d      	mov	r5, sp
 80098ec:	4629      	mov	r1, r5
 80098ee:	4632      	mov	r2, r6
 80098f0:	f00c ffb5 	bl	801685e <memcpy>
 80098f4:	68a0      	ldr	r0, [r4, #8]
 80098f6:	4642      	mov	r2, r8
 80098f8:	19a9      	adds	r1, r5, r6
 80098fa:	f00c ffb0 	bl	801685e <memcpy>
 80098fe:	e77e      	b.n	80097fe <ucdr_serialize_int64_t+0x9e>

08009900 <ucdr_deserialize_int64_t>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	460d      	mov	r5, r1
 8009906:	2108      	movs	r1, #8
 8009908:	4604      	mov	r4, r0
 800990a:	f000 f91f 	bl	8009b4c <ucdr_buffer_alignment>
 800990e:	4601      	mov	r1, r0
 8009910:	4620      	mov	r0, r4
 8009912:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009916:	f000 f95d 	bl	8009bd4 <ucdr_advance_buffer>
 800991a:	2108      	movs	r1, #8
 800991c:	4620      	mov	r0, r4
 800991e:	f000 f8b5 	bl	8009a8c <ucdr_check_buffer_available_for>
 8009922:	2800      	cmp	r0, #0
 8009924:	d151      	bne.n	80099ca <ucdr_deserialize_int64_t+0xca>
 8009926:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800992a:	42be      	cmp	r6, r7
 800992c:	d948      	bls.n	80099c0 <ucdr_deserialize_int64_t+0xc0>
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	60a6      	str	r6, [r4, #8]
 8009932:	1bf6      	subs	r6, r6, r7
 8009934:	4433      	add	r3, r6
 8009936:	f1c6 0808 	rsb	r8, r6, #8
 800993a:	6123      	str	r3, [r4, #16]
 800993c:	4641      	mov	r1, r8
 800993e:	4620      	mov	r0, r4
 8009940:	f000 f8b0 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 8009944:	2800      	cmp	r0, #0
 8009946:	d06d      	beq.n	8009a24 <ucdr_deserialize_int64_t+0x124>
 8009948:	7d23      	ldrb	r3, [r4, #20]
 800994a:	2b01      	cmp	r3, #1
 800994c:	f000 8093 	beq.w	8009a76 <ucdr_deserialize_int64_t+0x176>
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	702b      	strb	r3, [r5, #0]
 8009954:	2e00      	cmp	r6, #0
 8009956:	d072      	beq.n	8009a3e <ucdr_deserialize_int64_t+0x13e>
 8009958:	79bb      	ldrb	r3, [r7, #6]
 800995a:	706b      	strb	r3, [r5, #1]
 800995c:	2e01      	cmp	r6, #1
 800995e:	f105 0302 	add.w	r3, r5, #2
 8009962:	d070      	beq.n	8009a46 <ucdr_deserialize_int64_t+0x146>
 8009964:	797b      	ldrb	r3, [r7, #5]
 8009966:	70ab      	strb	r3, [r5, #2]
 8009968:	2e02      	cmp	r6, #2
 800996a:	f105 0303 	add.w	r3, r5, #3
 800996e:	d06e      	beq.n	8009a4e <ucdr_deserialize_int64_t+0x14e>
 8009970:	793b      	ldrb	r3, [r7, #4]
 8009972:	70eb      	strb	r3, [r5, #3]
 8009974:	2e03      	cmp	r6, #3
 8009976:	f105 0304 	add.w	r3, r5, #4
 800997a:	d06c      	beq.n	8009a56 <ucdr_deserialize_int64_t+0x156>
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	712b      	strb	r3, [r5, #4]
 8009980:	2e04      	cmp	r6, #4
 8009982:	f105 0305 	add.w	r3, r5, #5
 8009986:	d06a      	beq.n	8009a5e <ucdr_deserialize_int64_t+0x15e>
 8009988:	78bb      	ldrb	r3, [r7, #2]
 800998a:	716b      	strb	r3, [r5, #5]
 800998c:	2e05      	cmp	r6, #5
 800998e:	f105 0306 	add.w	r3, r5, #6
 8009992:	d068      	beq.n	8009a66 <ucdr_deserialize_int64_t+0x166>
 8009994:	787b      	ldrb	r3, [r7, #1]
 8009996:	71ab      	strb	r3, [r5, #6]
 8009998:	2e06      	cmp	r6, #6
 800999a:	f105 0307 	add.w	r3, r5, #7
 800999e:	d066      	beq.n	8009a6e <ucdr_deserialize_int64_t+0x16e>
 80099a0:	783b      	ldrb	r3, [r7, #0]
 80099a2:	71eb      	strb	r3, [r5, #7]
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	68a2      	ldr	r2, [r4, #8]
 80099a8:	7da0      	ldrb	r0, [r4, #22]
 80099aa:	3308      	adds	r3, #8
 80099ac:	1b9e      	subs	r6, r3, r6
 80099ae:	2308      	movs	r3, #8
 80099b0:	4442      	add	r2, r8
 80099b2:	7563      	strb	r3, [r4, #21]
 80099b4:	60a2      	str	r2, [r4, #8]
 80099b6:	6126      	str	r6, [r4, #16]
 80099b8:	f080 0001 	eor.w	r0, r0, #1
 80099bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c0:	2108      	movs	r1, #8
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 f86e 	bl	8009aa4 <ucdr_check_final_buffer_behavior>
 80099c8:	b310      	cbz	r0, 8009a10 <ucdr_deserialize_int64_t+0x110>
 80099ca:	7d23      	ldrb	r3, [r4, #20]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	68a3      	ldr	r3, [r4, #8]
 80099d0:	d023      	beq.n	8009a1a <ucdr_deserialize_int64_t+0x11a>
 80099d2:	79db      	ldrb	r3, [r3, #7]
 80099d4:	702b      	strb	r3, [r5, #0]
 80099d6:	68a3      	ldr	r3, [r4, #8]
 80099d8:	799b      	ldrb	r3, [r3, #6]
 80099da:	706b      	strb	r3, [r5, #1]
 80099dc:	68a3      	ldr	r3, [r4, #8]
 80099de:	795b      	ldrb	r3, [r3, #5]
 80099e0:	70ab      	strb	r3, [r5, #2]
 80099e2:	68a3      	ldr	r3, [r4, #8]
 80099e4:	791b      	ldrb	r3, [r3, #4]
 80099e6:	70eb      	strb	r3, [r5, #3]
 80099e8:	68a3      	ldr	r3, [r4, #8]
 80099ea:	78db      	ldrb	r3, [r3, #3]
 80099ec:	712b      	strb	r3, [r5, #4]
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	789b      	ldrb	r3, [r3, #2]
 80099f2:	716b      	strb	r3, [r5, #5]
 80099f4:	68a3      	ldr	r3, [r4, #8]
 80099f6:	785b      	ldrb	r3, [r3, #1]
 80099f8:	71ab      	strb	r3, [r5, #6]
 80099fa:	68a3      	ldr	r3, [r4, #8]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	71eb      	strb	r3, [r5, #7]
 8009a00:	68a2      	ldr	r2, [r4, #8]
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	3208      	adds	r2, #8
 8009a06:	3308      	adds	r3, #8
 8009a08:	2108      	movs	r1, #8
 8009a0a:	60a2      	str	r2, [r4, #8]
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	7561      	strb	r1, [r4, #21]
 8009a10:	7da0      	ldrb	r0, [r4, #22]
 8009a12:	f080 0001 	eor.w	r0, r0, #1
 8009a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	606b      	str	r3, [r5, #4]
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	e7ed      	b.n	8009a00 <ucdr_deserialize_int64_t+0x100>
 8009a24:	68a2      	ldr	r2, [r4, #8]
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	7da0      	ldrb	r0, [r4, #22]
 8009a2a:	f884 9015 	strb.w	r9, [r4, #21]
 8009a2e:	1b92      	subs	r2, r2, r6
 8009a30:	1b9b      	subs	r3, r3, r6
 8009a32:	60a2      	str	r2, [r4, #8]
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	f080 0001 	eor.w	r0, r0, #1
 8009a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	799b      	ldrb	r3, [r3, #6]
 8009a42:	706b      	strb	r3, [r5, #1]
 8009a44:	1cab      	adds	r3, r5, #2
 8009a46:	68a2      	ldr	r2, [r4, #8]
 8009a48:	7952      	ldrb	r2, [r2, #5]
 8009a4a:	f803 2b01 	strb.w	r2, [r3], #1
 8009a4e:	68a2      	ldr	r2, [r4, #8]
 8009a50:	7912      	ldrb	r2, [r2, #4]
 8009a52:	f803 2b01 	strb.w	r2, [r3], #1
 8009a56:	68a2      	ldr	r2, [r4, #8]
 8009a58:	78d2      	ldrb	r2, [r2, #3]
 8009a5a:	f803 2b01 	strb.w	r2, [r3], #1
 8009a5e:	68a2      	ldr	r2, [r4, #8]
 8009a60:	7892      	ldrb	r2, [r2, #2]
 8009a62:	f803 2b01 	strb.w	r2, [r3], #1
 8009a66:	68a2      	ldr	r2, [r4, #8]
 8009a68:	7852      	ldrb	r2, [r2, #1]
 8009a6a:	f803 2b01 	strb.w	r2, [r3], #1
 8009a6e:	68a2      	ldr	r2, [r4, #8]
 8009a70:	7812      	ldrb	r2, [r2, #0]
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e796      	b.n	80099a4 <ucdr_deserialize_int64_t+0xa4>
 8009a76:	4639      	mov	r1, r7
 8009a78:	4632      	mov	r2, r6
 8009a7a:	4628      	mov	r0, r5
 8009a7c:	f00c feef 	bl	801685e <memcpy>
 8009a80:	68a1      	ldr	r1, [r4, #8]
 8009a82:	4642      	mov	r2, r8
 8009a84:	19a8      	adds	r0, r5, r6
 8009a86:	f00c feea 	bl	801685e <memcpy>
 8009a8a:	e78b      	b.n	80099a4 <ucdr_deserialize_int64_t+0xa4>

08009a8c <ucdr_check_buffer_available_for>:
 8009a8c:	7d83      	ldrb	r3, [r0, #22]
 8009a8e:	b93b      	cbnz	r3, 8009aa0 <ucdr_check_buffer_available_for+0x14>
 8009a90:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009a94:	4419      	add	r1, r3
 8009a96:	4288      	cmp	r0, r1
 8009a98:	bf34      	ite	cc
 8009a9a:	2000      	movcc	r0, #0
 8009a9c:	2001      	movcs	r0, #1
 8009a9e:	4770      	bx	lr
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	4770      	bx	lr

08009aa4 <ucdr_check_final_buffer_behavior>:
 8009aa4:	7d83      	ldrb	r3, [r0, #22]
 8009aa6:	b943      	cbnz	r3, 8009aba <ucdr_check_final_buffer_behavior+0x16>
 8009aa8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009aac:	4291      	cmp	r1, r2
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	d205      	bcs.n	8009ac0 <ucdr_check_final_buffer_behavior+0x1c>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	bd10      	pop	{r4, pc}
 8009aba:	2300      	movs	r3, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	4770      	bx	lr
 8009ac0:	6982      	ldr	r2, [r0, #24]
 8009ac2:	b13a      	cbz	r2, 8009ad4 <ucdr_check_final_buffer_behavior+0x30>
 8009ac4:	69c1      	ldr	r1, [r0, #28]
 8009ac6:	4790      	blx	r2
 8009ac8:	f080 0301 	eor.w	r3, r0, #1
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	75a0      	strb	r0, [r4, #22]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	bd10      	pop	{r4, pc}
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	75a0      	strb	r0, [r4, #22]
 8009ad8:	e7fa      	b.n	8009ad0 <ucdr_check_final_buffer_behavior+0x2c>
 8009ada:	bf00      	nop

08009adc <ucdr_set_on_full_buffer_callback>:
 8009adc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop

08009ae4 <ucdr_init_buffer_origin_offset_endian>:
 8009ae4:	b410      	push	{r4}
 8009ae6:	9c01      	ldr	r4, [sp, #4]
 8009ae8:	6001      	str	r1, [r0, #0]
 8009aea:	440a      	add	r2, r1
 8009aec:	6042      	str	r2, [r0, #4]
 8009aee:	190a      	adds	r2, r1, r4
 8009af0:	441c      	add	r4, r3
 8009af2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8009af6:	6082      	str	r2, [r0, #8]
 8009af8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009afc:	7503      	strb	r3, [r0, #20]
 8009afe:	2200      	movs	r2, #0
 8009b00:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b08:	7542      	strb	r2, [r0, #21]
 8009b0a:	7582      	strb	r2, [r0, #22]
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop

08009b10 <ucdr_init_buffer_origin_offset>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	9c04      	ldr	r4, [sp, #16]
 8009b16:	9400      	str	r4, [sp, #0]
 8009b18:	2401      	movs	r4, #1
 8009b1a:	9401      	str	r4, [sp, #4]
 8009b1c:	f7ff ffe2 	bl	8009ae4 <ucdr_init_buffer_origin_offset_endian>
 8009b20:	b002      	add	sp, #8
 8009b22:	bd10      	pop	{r4, pc}

08009b24 <ucdr_init_buffer_origin>:
 8009b24:	b510      	push	{r4, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	2400      	movs	r4, #0
 8009b2a:	9400      	str	r4, [sp, #0]
 8009b2c:	f7ff fff0 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 8009b30:	b002      	add	sp, #8
 8009b32:	bd10      	pop	{r4, pc}

08009b34 <ucdr_init_buffer>:
 8009b34:	2300      	movs	r3, #0
 8009b36:	f7ff bff5 	b.w	8009b24 <ucdr_init_buffer_origin>
 8009b3a:	bf00      	nop

08009b3c <ucdr_alignment>:
 8009b3c:	fbb0 f3f1 	udiv	r3, r0, r1
 8009b40:	fb03 0011 	mls	r0, r3, r1, r0
 8009b44:	1a08      	subs	r0, r1, r0
 8009b46:	3901      	subs	r1, #1
 8009b48:	4008      	ands	r0, r1
 8009b4a:	4770      	bx	lr

08009b4c <ucdr_buffer_alignment>:
 8009b4c:	7d43      	ldrb	r3, [r0, #21]
 8009b4e:	428b      	cmp	r3, r1
 8009b50:	d208      	bcs.n	8009b64 <ucdr_buffer_alignment+0x18>
 8009b52:	6900      	ldr	r0, [r0, #16]
 8009b54:	fbb0 f3f1 	udiv	r3, r0, r1
 8009b58:	fb01 0013 	mls	r0, r1, r3, r0
 8009b5c:	1a08      	subs	r0, r1, r0
 8009b5e:	3901      	subs	r1, #1
 8009b60:	4008      	ands	r0, r1
 8009b62:	4770      	bx	lr
 8009b64:	2000      	movs	r0, #0
 8009b66:	4770      	bx	lr

08009b68 <ucdr_align_to>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	460d      	mov	r5, r1
 8009b6e:	f7ff ffed 	bl	8009b4c <ucdr_buffer_alignment>
 8009b72:	68a3      	ldr	r3, [r4, #8]
 8009b74:	6921      	ldr	r1, [r4, #16]
 8009b76:	7565      	strb	r5, [r4, #21]
 8009b78:	181a      	adds	r2, r3, r0
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	4408      	add	r0, r1
 8009b80:	bf28      	it	cs
 8009b82:	4613      	movcs	r3, r2
 8009b84:	6120      	str	r0, [r4, #16]
 8009b86:	60a3      	str	r3, [r4, #8]
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
 8009b8a:	bf00      	nop

08009b8c <ucdr_buffer_length>:
 8009b8c:	6882      	ldr	r2, [r0, #8]
 8009b8e:	6800      	ldr	r0, [r0, #0]
 8009b90:	1a10      	subs	r0, r2, r0
 8009b92:	4770      	bx	lr

08009b94 <ucdr_buffer_remaining>:
 8009b94:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009b98:	1a10      	subs	r0, r2, r0
 8009b9a:	4770      	bx	lr

08009b9c <ucdr_check_final_buffer_behavior_array>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	7d83      	ldrb	r3, [r0, #22]
 8009ba0:	b963      	cbnz	r3, 8009bbc <ucdr_check_final_buffer_behavior_array+0x20>
 8009ba2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	4604      	mov	r4, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	d308      	bcc.n	8009bc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8009bae:	b139      	cbz	r1, 8009bc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8009bb0:	6983      	ldr	r3, [r0, #24]
 8009bb2:	b163      	cbz	r3, 8009bce <ucdr_check_final_buffer_behavior_array+0x32>
 8009bb4:	69c1      	ldr	r1, [r0, #28]
 8009bb6:	4798      	blx	r3
 8009bb8:	75a0      	strb	r0, [r4, #22]
 8009bba:	b108      	cbz	r0, 8009bc0 <ucdr_check_final_buffer_behavior_array+0x24>
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f7ff ffe7 	bl	8009b94 <ucdr_buffer_remaining>
 8009bc6:	42a8      	cmp	r0, r5
 8009bc8:	bf28      	it	cs
 8009bca:	4628      	movcs	r0, r5
 8009bcc:	bd38      	pop	{r3, r4, r5, pc}
 8009bce:	2301      	movs	r3, #1
 8009bd0:	7583      	strb	r3, [r0, #22]
 8009bd2:	e7f3      	b.n	8009bbc <ucdr_check_final_buffer_behavior_array+0x20>

08009bd4 <ucdr_advance_buffer>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	460d      	mov	r5, r1
 8009bda:	f7ff ff57 	bl	8009a8c <ucdr_check_buffer_available_for>
 8009bde:	b178      	cbz	r0, 8009c00 <ucdr_advance_buffer+0x2c>
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	68a2      	ldr	r2, [r4, #8]
 8009be4:	442b      	add	r3, r5
 8009be6:	6123      	str	r3, [r4, #16]
 8009be8:	2301      	movs	r3, #1
 8009bea:	442a      	add	r2, r5
 8009bec:	7563      	strb	r3, [r4, #21]
 8009bee:	60a2      	str	r2, [r4, #8]
 8009bf0:	bd38      	pop	{r3, r4, r5, pc}
 8009bf2:	68a2      	ldr	r2, [r4, #8]
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	4402      	add	r2, r0
 8009bf8:	4403      	add	r3, r0
 8009bfa:	1a2d      	subs	r5, r5, r0
 8009bfc:	60a2      	str	r2, [r4, #8]
 8009bfe:	6123      	str	r3, [r4, #16]
 8009c00:	4629      	mov	r1, r5
 8009c02:	2201      	movs	r2, #1
 8009c04:	4620      	mov	r0, r4
 8009c06:	f7ff ffc9 	bl	8009b9c <ucdr_check_final_buffer_behavior_array>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d1f1      	bne.n	8009bf2 <ucdr_advance_buffer+0x1e>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	7563      	strb	r3, [r4, #21]
 8009c12:	bd38      	pop	{r3, r4, r5, pc}

08009c14 <rcl_get_zero_initialized_init_options>:
 8009c14:	2000      	movs	r0, #0
 8009c16:	4770      	bx	lr

08009c18 <rcl_init_options_init>:
 8009c18:	b084      	sub	sp, #16
 8009c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c1c:	b097      	sub	sp, #92	@ 0x5c
 8009c1e:	ae1d      	add	r6, sp, #116	@ 0x74
 8009c20:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d058      	beq.n	8009cda <rcl_init_options_init+0xc2>
 8009c28:	6803      	ldr	r3, [r0, #0]
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	b133      	cbz	r3, 8009c3c <rcl_init_options_init+0x24>
 8009c2e:	2464      	movs	r4, #100	@ 0x64
 8009c30:	4620      	mov	r0, r4
 8009c32:	b017      	add	sp, #92	@ 0x5c
 8009c34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009c38:	b004      	add	sp, #16
 8009c3a:	4770      	bx	lr
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f001 fa05 	bl	800b04c <rcutils_allocator_is_valid>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d049      	beq.n	8009cda <rcl_init_options_init+0xc2>
 8009c46:	46b4      	mov	ip, r6
 8009c48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c4c:	ac11      	add	r4, sp, #68	@ 0x44
 8009c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c50:	f8dc 3000 	ldr.w	r3, [ip]
 8009c54:	6023      	str	r3, [r4, #0]
 8009c56:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8009c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c5a:	2050      	movs	r0, #80	@ 0x50
 8009c5c:	4798      	blx	r3
 8009c5e:	4604      	mov	r4, r0
 8009c60:	6028      	str	r0, [r5, #0]
 8009c62:	2800      	cmp	r0, #0
 8009c64:	d03b      	beq.n	8009cde <rcl_init_options_init+0xc6>
 8009c66:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8009c6a:	4686      	mov	lr, r0
 8009c6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c74:	f8dc 3000 	ldr.w	r3, [ip]
 8009c78:	f8ce 3000 	str.w	r3, [lr]
 8009c7c:	a802      	add	r0, sp, #8
 8009c7e:	f001 fa77 	bl	800b170 <rmw_get_zero_initialized_init_options>
 8009c82:	f10d 0e08 	add.w	lr, sp, #8
 8009c86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c8a:	f104 0c18 	add.w	ip, r4, #24
 8009c8e:	682f      	ldr	r7, [r5, #0]
 8009c90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009c98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009ca0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009ca4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009ca8:	ac20      	add	r4, sp, #128	@ 0x80
 8009caa:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009cb2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009cb6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8009cba:	f107 0018 	add.w	r0, r7, #24
 8009cbe:	f001 fa85 	bl	800b1cc <rmw_init_options_init>
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d0b3      	beq.n	8009c30 <rcl_init_options_init+0x18>
 8009cc8:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8009cca:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009ccc:	6828      	ldr	r0, [r5, #0]
 8009cce:	4798      	blx	r3
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f006 fd13 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	e7aa      	b.n	8009c30 <rcl_init_options_init+0x18>
 8009cda:	240b      	movs	r4, #11
 8009cdc:	e7a8      	b.n	8009c30 <rcl_init_options_init+0x18>
 8009cde:	240a      	movs	r4, #10
 8009ce0:	e7a6      	b.n	8009c30 <rcl_init_options_init+0x18>
 8009ce2:	bf00      	nop

08009ce4 <rcl_init_options_fini>:
 8009ce4:	b530      	push	{r4, r5, lr}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	b1f0      	cbz	r0, 8009d28 <rcl_init_options_fini+0x44>
 8009cea:	6803      	ldr	r3, [r0, #0]
 8009cec:	4604      	mov	r4, r0
 8009cee:	b1db      	cbz	r3, 8009d28 <rcl_init_options_fini+0x44>
 8009cf0:	469c      	mov	ip, r3
 8009cf2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009cf6:	f10d 0e04 	add.w	lr, sp, #4
 8009cfa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009cfe:	f8dc 3000 	ldr.w	r3, [ip]
 8009d02:	f8ce 3000 	str.w	r3, [lr]
 8009d06:	a801      	add	r0, sp, #4
 8009d08:	f001 f9a0 	bl	800b04c <rcutils_allocator_is_valid>
 8009d0c:	b160      	cbz	r0, 8009d28 <rcl_init_options_fini+0x44>
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	3018      	adds	r0, #24
 8009d12:	f001 fb0b 	bl	800b32c <rmw_init_options_fini>
 8009d16:	4605      	mov	r5, r0
 8009d18:	b950      	cbnz	r0, 8009d30 <rcl_init_options_fini+0x4c>
 8009d1a:	6820      	ldr	r0, [r4, #0]
 8009d1c:	9b02      	ldr	r3, [sp, #8]
 8009d1e:	9905      	ldr	r1, [sp, #20]
 8009d20:	4798      	blx	r3
 8009d22:	4628      	mov	r0, r5
 8009d24:	b007      	add	sp, #28
 8009d26:	bd30      	pop	{r4, r5, pc}
 8009d28:	250b      	movs	r5, #11
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	b007      	add	sp, #28
 8009d2e:	bd30      	pop	{r4, r5, pc}
 8009d30:	f006 fce4 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 8009d34:	4605      	mov	r5, r0
 8009d36:	e7f8      	b.n	8009d2a <rcl_init_options_fini+0x46>

08009d38 <rcl_init_options_copy>:
 8009d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3c:	b094      	sub	sp, #80	@ 0x50
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d058      	beq.n	8009df4 <rcl_init_options_copy+0xbc>
 8009d42:	4604      	mov	r4, r0
 8009d44:	6800      	ldr	r0, [r0, #0]
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d054      	beq.n	8009df4 <rcl_init_options_copy+0xbc>
 8009d4a:	460e      	mov	r6, r1
 8009d4c:	f001 f97e 	bl	800b04c <rcutils_allocator_is_valid>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d04f      	beq.n	8009df4 <rcl_init_options_copy+0xbc>
 8009d54:	2e00      	cmp	r6, #0
 8009d56:	d04d      	beq.n	8009df4 <rcl_init_options_copy+0xbc>
 8009d58:	6833      	ldr	r3, [r6, #0]
 8009d5a:	b123      	cbz	r3, 8009d66 <rcl_init_options_copy+0x2e>
 8009d5c:	2464      	movs	r4, #100	@ 0x64
 8009d5e:	4620      	mov	r0, r4
 8009d60:	b014      	add	sp, #80	@ 0x50
 8009d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d66:	6827      	ldr	r7, [r4, #0]
 8009d68:	46bc      	mov	ip, r7
 8009d6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d6e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8009d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d72:	f8dc 3000 	ldr.w	r3, [ip]
 8009d76:	f8d7 8000 	ldr.w	r8, [r7]
 8009d7a:	602b      	str	r3, [r5, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	2050      	movs	r0, #80	@ 0x50
 8009d80:	47c0      	blx	r8
 8009d82:	4605      	mov	r5, r0
 8009d84:	6030      	str	r0, [r6, #0]
 8009d86:	b3d0      	cbz	r0, 8009dfe <rcl_init_options_copy+0xc6>
 8009d88:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8009d8c:	4686      	mov	lr, r0
 8009d8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d96:	f8dc 3000 	ldr.w	r3, [ip]
 8009d9a:	f8ce 3000 	str.w	r3, [lr]
 8009d9e:	4668      	mov	r0, sp
 8009da0:	f001 f9e6 	bl	800b170 <rmw_get_zero_initialized_init_options>
 8009da4:	46ee      	mov	lr, sp
 8009da6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009daa:	f105 0c18 	add.w	ip, r5, #24
 8009dae:	6824      	ldr	r4, [r4, #0]
 8009db0:	6835      	ldr	r5, [r6, #0]
 8009db2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009db6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009dba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009dbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009dc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009dc6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009dca:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009dce:	f104 0018 	add.w	r0, r4, #24
 8009dd2:	f105 0118 	add.w	r1, r5, #24
 8009dd6:	f001 fa61 	bl	800b29c <rmw_init_options_copy>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d0be      	beq.n	8009d5e <rcl_init_options_copy+0x26>
 8009de0:	f001 f942 	bl	800b068 <rcutils_get_error_string>
 8009de4:	f001 f958 	bl	800b098 <rcutils_reset_error>
 8009de8:	4630      	mov	r0, r6
 8009dea:	f7ff ff7b 	bl	8009ce4 <rcl_init_options_fini>
 8009dee:	b140      	cbz	r0, 8009e02 <rcl_init_options_copy+0xca>
 8009df0:	4604      	mov	r4, r0
 8009df2:	e7b4      	b.n	8009d5e <rcl_init_options_copy+0x26>
 8009df4:	240b      	movs	r4, #11
 8009df6:	4620      	mov	r0, r4
 8009df8:	b014      	add	sp, #80	@ 0x50
 8009dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dfe:	240a      	movs	r4, #10
 8009e00:	e7ad      	b.n	8009d5e <rcl_init_options_copy+0x26>
 8009e02:	4620      	mov	r0, r4
 8009e04:	b014      	add	sp, #80	@ 0x50
 8009e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0a:	f006 bc77 	b.w	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 8009e0e:	bf00      	nop

08009e10 <rcl_init_options_set_domain_id>:
 8009e10:	b120      	cbz	r0, 8009e1c <rcl_init_options_set_domain_id+0xc>
 8009e12:	6803      	ldr	r3, [r0, #0]
 8009e14:	b113      	cbz	r3, 8009e1c <rcl_init_options_set_domain_id+0xc>
 8009e16:	6259      	str	r1, [r3, #36]	@ 0x24
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4770      	bx	lr
 8009e1c:	200b      	movs	r0, #11
 8009e1e:	4770      	bx	lr

08009e20 <rcl_get_zero_initialized_publisher>:
 8009e20:	4b01      	ldr	r3, [pc, #4]	@ (8009e28 <rcl_get_zero_initialized_publisher+0x8>)
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	08017b44 	.word	0x08017b44

08009e2c <rcl_publisher_init>:
 8009e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e30:	b088      	sub	sp, #32
 8009e32:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009e34:	2d00      	cmp	r5, #0
 8009e36:	d069      	beq.n	8009f0c <rcl_publisher_init+0xe0>
 8009e38:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	4648      	mov	r0, r9
 8009e40:	460e      	mov	r6, r1
 8009e42:	4690      	mov	r8, r2
 8009e44:	461f      	mov	r7, r3
 8009e46:	f001 f901 	bl	800b04c <rcutils_allocator_is_valid>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d05e      	beq.n	8009f0c <rcl_publisher_init+0xe0>
 8009e4e:	2c00      	cmp	r4, #0
 8009e50:	d05c      	beq.n	8009f0c <rcl_publisher_init+0xe0>
 8009e52:	f8d4 a000 	ldr.w	sl, [r4]
 8009e56:	f1ba 0f00 	cmp.w	sl, #0
 8009e5a:	d004      	beq.n	8009e66 <rcl_publisher_init+0x3a>
 8009e5c:	2764      	movs	r7, #100	@ 0x64
 8009e5e:	4638      	mov	r0, r7
 8009e60:	b008      	add	sp, #32
 8009e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e66:	4630      	mov	r0, r6
 8009e68:	f006 ff42 	bl	8010cf0 <rcl_node_is_valid>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d052      	beq.n	8009f16 <rcl_publisher_init+0xea>
 8009e70:	f1b8 0f00 	cmp.w	r8, #0
 8009e74:	d04a      	beq.n	8009f0c <rcl_publisher_init+0xe0>
 8009e76:	2f00      	cmp	r7, #0
 8009e78:	d048      	beq.n	8009f0c <rcl_publisher_init+0xe0>
 8009e7a:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8009e7e:	aa07      	add	r2, sp, #28
 8009e80:	9205      	str	r2, [sp, #20]
 8009e82:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8009e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e8a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009e8e:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e92:	4639      	mov	r1, r7
 8009e94:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f006 ff7d 	bl	8010d98 <rcl_node_resolve_name>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d14f      	bne.n	8009f44 <rcl_publisher_init+0x118>
 8009ea4:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8009ea6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009ea8:	20c8      	movs	r0, #200	@ 0xc8
 8009eaa:	4798      	blx	r3
 8009eac:	6020      	str	r0, [r4, #0]
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d04e      	beq.n	8009f50 <rcl_publisher_init+0x124>
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f006 ff3e 	bl	8010d34 <rcl_node_get_rmw_handle>
 8009eb8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	9a07      	ldr	r2, [sp, #28]
 8009ec0:	6827      	ldr	r7, [r4, #0]
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	4641      	mov	r1, r8
 8009ec6:	f001 fd59 	bl	800b97c <rmw_create_publisher>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8009ed0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009ed4:	b370      	cbz	r0, 8009f34 <rcl_publisher_init+0x108>
 8009ed6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8009eda:	f001 fe2d 	bl	800bb38 <rmw_publisher_get_actual_qos>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	b9d0      	cbnz	r0, 8009f1a <rcl_publisher_init+0xee>
 8009ee4:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8009ee8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8009eec:	4629      	mov	r1, r5
 8009eee:	2270      	movs	r2, #112	@ 0x70
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f00c fcb4 	bl	801685e <memcpy>
 8009ef6:	6832      	ldr	r2, [r6, #0]
 8009ef8:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8009efc:	9807      	ldr	r0, [sp, #28]
 8009efe:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009f00:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009f02:	4798      	blx	r3
 8009f04:	4638      	mov	r0, r7
 8009f06:	b008      	add	sp, #32
 8009f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0c:	270b      	movs	r7, #11
 8009f0e:	4638      	mov	r0, r7
 8009f10:	b008      	add	sp, #32
 8009f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f16:	27c8      	movs	r7, #200	@ 0xc8
 8009f18:	e7a1      	b.n	8009e5e <rcl_publisher_init+0x32>
 8009f1a:	b18b      	cbz	r3, 8009f40 <rcl_publisher_init+0x114>
 8009f1c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009f20:	b142      	cbz	r2, 8009f34 <rcl_publisher_init+0x108>
 8009f22:	4630      	mov	r0, r6
 8009f24:	f006 ff06 	bl	8010d34 <rcl_node_get_rmw_handle>
 8009f28:	6823      	ldr	r3, [r4, #0]
 8009f2a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009f2e:	f001 fe13 	bl	800bb58 <rmw_destroy_publisher>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8009f36:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009f38:	4618      	mov	r0, r3
 8009f3a:	4790      	blx	r2
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	2701      	movs	r7, #1
 8009f42:	e7db      	b.n	8009efc <rcl_publisher_init+0xd0>
 8009f44:	2867      	cmp	r0, #103	@ 0x67
 8009f46:	d0d9      	beq.n	8009efc <rcl_publisher_init+0xd0>
 8009f48:	2869      	cmp	r0, #105	@ 0x69
 8009f4a:	d003      	beq.n	8009f54 <rcl_publisher_init+0x128>
 8009f4c:	280a      	cmp	r0, #10
 8009f4e:	d1f7      	bne.n	8009f40 <rcl_publisher_init+0x114>
 8009f50:	270a      	movs	r7, #10
 8009f52:	e7d3      	b.n	8009efc <rcl_publisher_init+0xd0>
 8009f54:	2767      	movs	r7, #103	@ 0x67
 8009f56:	e7d1      	b.n	8009efc <rcl_publisher_init+0xd0>

08009f58 <rcl_publisher_get_default_options>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	4d14      	ldr	r5, [pc, #80]	@ (8009fac <rcl_publisher_get_default_options+0x54>)
 8009f5c:	4914      	ldr	r1, [pc, #80]	@ (8009fb0 <rcl_publisher_get_default_options+0x58>)
 8009f5e:	b088      	sub	sp, #32
 8009f60:	4604      	mov	r4, r0
 8009f62:	2250      	movs	r2, #80	@ 0x50
 8009f64:	4628      	mov	r0, r5
 8009f66:	f00c fc7a 	bl	801685e <memcpy>
 8009f6a:	a802      	add	r0, sp, #8
 8009f6c:	f001 f860 	bl	800b030 <rcutils_get_default_allocator>
 8009f70:	f10d 0c08 	add.w	ip, sp, #8
 8009f74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f78:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8009f7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f80:	466e      	mov	r6, sp
 8009f82:	f8dc 3000 	ldr.w	r3, [ip]
 8009f86:	f8ce 3000 	str.w	r3, [lr]
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f001 f900 	bl	800b190 <rmw_get_default_publisher_options>
 8009f90:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009f94:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009f98:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f9c:	2270      	movs	r2, #112	@ 0x70
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f00c fc5c 	bl	801685e <memcpy>
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	b008      	add	sp, #32
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	20006250 	.word	0x20006250
 8009fb0:	08017b48 	.word	0x08017b48

08009fb4 <rcl_publish>:
 8009fb4:	b1f8      	cbz	r0, 8009ff6 <rcl_publish+0x42>
 8009fb6:	6803      	ldr	r3, [r0, #0]
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	4604      	mov	r4, r0
 8009fbc:	b1b3      	cbz	r3, 8009fec <rcl_publish+0x38>
 8009fbe:	4616      	mov	r6, r2
 8009fc0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009fc4:	b192      	cbz	r2, 8009fec <rcl_publish+0x38>
 8009fc6:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009fca:	460d      	mov	r5, r1
 8009fcc:	f006 fbb4 	bl	8010738 <rcl_context_is_valid>
 8009fd0:	b160      	cbz	r0, 8009fec <rcl_publish+0x38>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009fd8:	b140      	cbz	r0, 8009fec <rcl_publish+0x38>
 8009fda:	b155      	cbz	r5, 8009ff2 <rcl_publish+0x3e>
 8009fdc:	4632      	mov	r2, r6
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f001 fc6c 	bl	800b8bc <rmw_publish>
 8009fe4:	3800      	subs	r0, #0
 8009fe6:	bf18      	it	ne
 8009fe8:	2001      	movne	r0, #1
 8009fea:	bd70      	pop	{r4, r5, r6, pc}
 8009fec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009ff0:	bd70      	pop	{r4, r5, r6, pc}
 8009ff2:	200b      	movs	r0, #11
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009ffa:	4770      	bx	lr

08009ffc <rcl_publisher_is_valid>:
 8009ffc:	b1a0      	cbz	r0, 800a028 <rcl_publisher_is_valid+0x2c>
 8009ffe:	6803      	ldr	r3, [r0, #0]
 800a000:	b510      	push	{r4, lr}
 800a002:	4604      	mov	r4, r0
 800a004:	b173      	cbz	r3, 800a024 <rcl_publisher_is_valid+0x28>
 800a006:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a00a:	b15a      	cbz	r2, 800a024 <rcl_publisher_is_valid+0x28>
 800a00c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a010:	f006 fb92 	bl	8010738 <rcl_context_is_valid>
 800a014:	b130      	cbz	r0, 800a024 <rcl_publisher_is_valid+0x28>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a01c:	3800      	subs	r0, #0
 800a01e:	bf18      	it	ne
 800a020:	2001      	movne	r0, #1
 800a022:	bd10      	pop	{r4, pc}
 800a024:	2000      	movs	r0, #0
 800a026:	bd10      	pop	{r4, pc}
 800a028:	2000      	movs	r0, #0
 800a02a:	4770      	bx	lr

0800a02c <rcl_publisher_is_valid_except_context>:
 800a02c:	b130      	cbz	r0, 800a03c <rcl_publisher_is_valid_except_context+0x10>
 800a02e:	6800      	ldr	r0, [r0, #0]
 800a030:	b120      	cbz	r0, 800a03c <rcl_publisher_is_valid_except_context+0x10>
 800a032:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a036:	3800      	subs	r0, #0
 800a038:	bf18      	it	ne
 800a03a:	2001      	movne	r0, #1
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop

0800a040 <_rclc_check_for_new_data>:
 800a040:	2800      	cmp	r0, #0
 800a042:	d046      	beq.n	800a0d2 <_rclc_check_for_new_data+0x92>
 800a044:	b510      	push	{r4, lr}
 800a046:	7802      	ldrb	r2, [r0, #0]
 800a048:	b084      	sub	sp, #16
 800a04a:	4603      	mov	r3, r0
 800a04c:	2a0a      	cmp	r2, #10
 800a04e:	d842      	bhi.n	800a0d6 <_rclc_check_for_new_data+0x96>
 800a050:	e8df f002 	tbb	[pc, r2]
 800a054:	14181212 	.word	0x14181212
 800a058:	06060614 	.word	0x06060614
 800a05c:	2e1a      	.short	0x2e1a
 800a05e:	16          	.byte	0x16
 800a05f:	00          	.byte	0x00
 800a060:	6a0a      	ldr	r2, [r1, #32]
 800a062:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a064:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a068:	2000      	movs	r0, #0
 800a06a:	1a12      	subs	r2, r2, r0
 800a06c:	bf18      	it	ne
 800a06e:	2201      	movne	r2, #1
 800a070:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a074:	b004      	add	sp, #16
 800a076:	bd10      	pop	{r4, pc}
 800a078:	680a      	ldr	r2, [r1, #0]
 800a07a:	e7f2      	b.n	800a062 <_rclc_check_for_new_data+0x22>
 800a07c:	698a      	ldr	r2, [r1, #24]
 800a07e:	e7f0      	b.n	800a062 <_rclc_check_for_new_data+0x22>
 800a080:	688a      	ldr	r2, [r1, #8]
 800a082:	e7ee      	b.n	800a062 <_rclc_check_for_new_data+0x22>
 800a084:	690a      	ldr	r2, [r1, #16]
 800a086:	e7ec      	b.n	800a062 <_rclc_check_for_new_data+0x22>
 800a088:	685c      	ldr	r4, [r3, #4]
 800a08a:	4608      	mov	r0, r1
 800a08c:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a090:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a094:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a098:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a0a2:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a0a6:	f104 0110 	add.w	r1, r4, #16
 800a0aa:	f008 fe01 	bl	8012cb0 <rcl_action_client_wait_set_get_entities_ready>
 800a0ae:	e7e1      	b.n	800a074 <_rclc_check_for_new_data+0x34>
 800a0b0:	685c      	ldr	r4, [r3, #4]
 800a0b2:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a0b6:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a0ba:	e9cd 3200 	strd	r3, r2, [sp]
 800a0be:	4608      	mov	r0, r1
 800a0c0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a0c4:	f104 0220 	add.w	r2, r4, #32
 800a0c8:	f104 0110 	add.w	r1, r4, #16
 800a0cc:	f009 f808 	bl	80130e0 <rcl_action_server_wait_set_get_entities_ready>
 800a0d0:	e7d0      	b.n	800a074 <_rclc_check_for_new_data+0x34>
 800a0d2:	200b      	movs	r0, #11
 800a0d4:	4770      	bx	lr
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e7cc      	b.n	800a074 <_rclc_check_for_new_data+0x34>
 800a0da:	bf00      	nop

0800a0dc <_rclc_take_new_data>:
 800a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0de:	b09b      	sub	sp, #108	@ 0x6c
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	f000 8088 	beq.w	800a1f6 <_rclc_take_new_data+0x11a>
 800a0e6:	7803      	ldrb	r3, [r0, #0]
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	2b0a      	cmp	r3, #10
 800a0ec:	f200 8167 	bhi.w	800a3be <_rclc_take_new_data+0x2e2>
 800a0f0:	e8df f003 	tbb	[pc, r3]
 800a0f4:	44152d2d 	.word	0x44152d2d
 800a0f8:	19191944 	.word	0x19191944
 800a0fc:	065a      	.short	0x065a
 800a0fe:	15          	.byte	0x15
 800a0ff:	00          	.byte	0x00
 800a100:	6840      	ldr	r0, [r0, #4]
 800a102:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f040 80b2 	bne.w	800a270 <_rclc_take_new_data+0x194>
 800a10c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a110:	2b00      	cmp	r3, #0
 800a112:	f040 80e4 	bne.w	800a2de <_rclc_take_new_data+0x202>
 800a116:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d16f      	bne.n	800a1fe <_rclc_take_new_data+0x122>
 800a11e:	2500      	movs	r5, #0
 800a120:	4628      	mov	r0, r5
 800a122:	b01b      	add	sp, #108	@ 0x6c
 800a124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a126:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a128:	6a0b      	ldr	r3, [r1, #32]
 800a12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0f5      	beq.n	800a11e <_rclc_take_new_data+0x42>
 800a132:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a136:	f104 0110 	add.w	r1, r4, #16
 800a13a:	f007 f889 	bl	8011250 <rcl_take_request>
 800a13e:	4605      	mov	r5, r0
 800a140:	2800      	cmp	r0, #0
 800a142:	d0ec      	beq.n	800a11e <_rclc_take_new_data+0x42>
 800a144:	f240 2359 	movw	r3, #601	@ 0x259
 800a148:	4298      	cmp	r0, r3
 800a14a:	d013      	beq.n	800a174 <_rclc_take_new_data+0x98>
 800a14c:	e029      	b.n	800a1a2 <_rclc_take_new_data+0xc6>
 800a14e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a150:	680b      	ldr	r3, [r1, #0]
 800a152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0e1      	beq.n	800a11e <_rclc_take_new_data+0x42>
 800a15a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a15e:	2300      	movs	r3, #0
 800a160:	aa0a      	add	r2, sp, #40	@ 0x28
 800a162:	f007 f9b3 	bl	80114cc <rcl_take>
 800a166:	4605      	mov	r5, r0
 800a168:	2800      	cmp	r0, #0
 800a16a:	d0d9      	beq.n	800a120 <_rclc_take_new_data+0x44>
 800a16c:	f240 1391 	movw	r3, #401	@ 0x191
 800a170:	4298      	cmp	r0, r3
 800a172:	d116      	bne.n	800a1a2 <_rclc_take_new_data+0xc6>
 800a174:	2300      	movs	r3, #0
 800a176:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a17a:	e7d1      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a17c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a17e:	698b      	ldr	r3, [r1, #24]
 800a180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d0ca      	beq.n	800a11e <_rclc_take_new_data+0x42>
 800a188:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a18c:	f104 0110 	add.w	r1, r4, #16
 800a190:	f006 fa62 	bl	8010658 <rcl_take_response>
 800a194:	4605      	mov	r5, r0
 800a196:	2800      	cmp	r0, #0
 800a198:	d0c1      	beq.n	800a11e <_rclc_take_new_data+0x42>
 800a19a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a19e:	4298      	cmp	r0, r3
 800a1a0:	d0be      	beq.n	800a120 <_rclc_take_new_data+0x44>
 800a1a2:	f000 ff79 	bl	800b098 <rcutils_reset_error>
 800a1a6:	e7bb      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a1a8:	6840      	ldr	r0, [r0, #4]
 800a1aa:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d17d      	bne.n	800a2ae <_rclc_take_new_data+0x1d2>
 800a1b2:	69c3      	ldr	r3, [r0, #28]
 800a1b4:	b11b      	cbz	r3, 800a1be <_rclc_take_new_data+0xe2>
 800a1b6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d144      	bne.n	800a248 <_rclc_take_new_data+0x16c>
 800a1be:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f040 80ac 	bne.w	800a320 <_rclc_take_new_data+0x244>
 800a1c8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d0a6      	beq.n	800a11e <_rclc_take_new_data+0x42>
 800a1d0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a1d2:	a90a      	add	r1, sp, #40	@ 0x28
 800a1d4:	3010      	adds	r0, #16
 800a1d6:	f008 fc43 	bl	8012a60 <rcl_action_take_result_response>
 800a1da:	4605      	mov	r5, r0
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d1e0      	bne.n	800a1a2 <_rclc_take_new_data+0xc6>
 800a1e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1e4:	6860      	ldr	r0, [r4, #4]
 800a1e6:	f009 f89f 	bl	8013328 <rclc_action_find_handle_by_result_request_sequence_number>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d098      	beq.n	800a120 <_rclc_take_new_data+0x44>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800a1f4:	e794      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a1f6:	250b      	movs	r5, #11
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	b01b      	add	sp, #108	@ 0x6c
 800a1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1fe:	ae04      	add	r6, sp, #16
 800a200:	aa0a      	add	r2, sp, #40	@ 0x28
 800a202:	3010      	adds	r0, #16
 800a204:	4631      	mov	r1, r6
 800a206:	f008 fe9f 	bl	8012f48 <rcl_action_take_cancel_request>
 800a20a:	4605      	mov	r5, r0
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d1c8      	bne.n	800a1a2 <_rclc_take_new_data+0xc6>
 800a210:	6860      	ldr	r0, [r4, #4]
 800a212:	a90a      	add	r1, sp, #40	@ 0x28
 800a214:	f009 f846 	bl	80132a4 <rclc_action_find_goal_handle_by_uuid>
 800a218:	4607      	mov	r7, r0
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f000 80bb 	beq.w	800a396 <_rclc_take_new_data+0x2ba>
 800a220:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800a224:	2101      	movs	r1, #1
 800a226:	f008 ffc7 	bl	80131b8 <rcl_action_transition_goal_state>
 800a22a:	2803      	cmp	r0, #3
 800a22c:	4684      	mov	ip, r0
 800a22e:	f040 80a7 	bne.w	800a380 <_rclc_take_new_data+0x2a4>
 800a232:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a234:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800a238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a23a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a23e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a242:	f887 c008 	strb.w	ip, [r7, #8]
 800a246:	e76b      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a248:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a24a:	3010      	adds	r0, #16
 800a24c:	f008 fc88 	bl	8012b60 <rcl_action_take_feedback>
 800a250:	4605      	mov	r5, r0
 800a252:	2800      	cmp	r0, #0
 800a254:	d1a5      	bne.n	800a1a2 <_rclc_take_new_data+0xc6>
 800a256:	6860      	ldr	r0, [r4, #4]
 800a258:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a25a:	f009 f823 	bl	80132a4 <rclc_action_find_goal_handle_by_uuid>
 800a25e:	4603      	mov	r3, r0
 800a260:	2800      	cmp	r0, #0
 800a262:	f000 80a3 	beq.w	800a3ac <_rclc_take_new_data+0x2d0>
 800a266:	2201      	movs	r2, #1
 800a268:	6860      	ldr	r0, [r4, #4]
 800a26a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800a26e:	e7a6      	b.n	800a1be <_rclc_take_new_data+0xe2>
 800a270:	f008 fff2 	bl	8013258 <rclc_action_take_goal_handle>
 800a274:	4606      	mov	r6, r0
 800a276:	6860      	ldr	r0, [r4, #4]
 800a278:	2e00      	cmp	r6, #0
 800a27a:	f43f af47 	beq.w	800a10c <_rclc_take_new_data+0x30>
 800a27e:	6070      	str	r0, [r6, #4]
 800a280:	69f2      	ldr	r2, [r6, #28]
 800a282:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800a286:	3010      	adds	r0, #16
 800a288:	f008 fda6 	bl	8012dd8 <rcl_action_take_goal_request>
 800a28c:	4605      	mov	r5, r0
 800a28e:	2800      	cmp	r0, #0
 800a290:	f040 808e 	bne.w	800a3b0 <_rclc_take_new_data+0x2d4>
 800a294:	69f7      	ldr	r7, [r6, #28]
 800a296:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a298:	7235      	strb	r5, [r6, #8]
 800a29a:	f8c6 0009 	str.w	r0, [r6, #9]
 800a29e:	f8c6 100d 	str.w	r1, [r6, #13]
 800a2a2:	6860      	ldr	r0, [r4, #4]
 800a2a4:	f8c6 2011 	str.w	r2, [r6, #17]
 800a2a8:	f8c6 3015 	str.w	r3, [r6, #21]
 800a2ac:	e72e      	b.n	800a10c <_rclc_take_new_data+0x30>
 800a2ae:	aa04      	add	r2, sp, #16
 800a2b0:	a90a      	add	r1, sp, #40	@ 0x28
 800a2b2:	3010      	adds	r0, #16
 800a2b4:	f008 fb5c 	bl	8012970 <rcl_action_take_goal_response>
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f47f af71 	bne.w	800a1a2 <_rclc_take_new_data+0xc6>
 800a2c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2c4:	6860      	ldr	r0, [r4, #4]
 800a2c6:	f009 f81d 	bl	8013304 <rclc_action_find_handle_by_goal_request_sequence_number>
 800a2ca:	b130      	cbz	r0, 800a2da <_rclc_take_new_data+0x1fe>
 800a2cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a2d0:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f880 2020 	strb.w	r2, [r0, #32]
 800a2da:	6860      	ldr	r0, [r4, #4]
 800a2dc:	e769      	b.n	800a1b2 <_rclc_take_new_data+0xd6>
 800a2de:	aa04      	add	r2, sp, #16
 800a2e0:	3010      	adds	r0, #16
 800a2e2:	a90a      	add	r1, sp, #40	@ 0x28
 800a2e4:	f008 fdf0 	bl	8012ec8 <rcl_action_take_result_request>
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	f47f af59 	bne.w	800a1a2 <_rclc_take_new_data+0xc6>
 800a2f0:	6860      	ldr	r0, [r4, #4]
 800a2f2:	a904      	add	r1, sp, #16
 800a2f4:	f008 ffd6 	bl	80132a4 <rclc_action_find_goal_handle_by_uuid>
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	b160      	cbz	r0, 800a316 <_rclc_take_new_data+0x23a>
 800a2fc:	ad0a      	add	r5, sp, #40	@ 0x28
 800a2fe:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800a302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a304:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a306:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a30a:	f04f 0c02 	mov.w	ip, #2
 800a30e:	e886 0003 	stmia.w	r6, {r0, r1}
 800a312:	f887 c008 	strb.w	ip, [r7, #8]
 800a316:	6860      	ldr	r0, [r4, #4]
 800a318:	2300      	movs	r3, #0
 800a31a:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800a31e:	e6fa      	b.n	800a116 <_rclc_take_new_data+0x3a>
 800a320:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800a324:	a90a      	add	r1, sp, #40	@ 0x28
 800a326:	3010      	adds	r0, #16
 800a328:	f008 fbda 	bl	8012ae0 <rcl_action_take_cancel_response>
 800a32c:	4605      	mov	r5, r0
 800a32e:	2800      	cmp	r0, #0
 800a330:	f47f af37 	bne.w	800a1a2 <_rclc_take_new_data+0xc6>
 800a334:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a338:	6860      	ldr	r0, [r4, #4]
 800a33a:	f009 f807 	bl	801334c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800a33e:	4606      	mov	r6, r0
 800a340:	6860      	ldr	r0, [r4, #4]
 800a342:	2e00      	cmp	r6, #0
 800a344:	f43f af40 	beq.w	800a1c8 <_rclc_take_new_data+0xec>
 800a348:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a34a:	2701      	movs	r7, #1
 800a34c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f43f af3a 	beq.w	800a1c8 <_rclc_take_new_data+0xec>
 800a354:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800a356:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a35a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a35e:	f008 ffa1 	bl	80132a4 <rclc_action_find_goal_handle_by_uuid>
 800a362:	b138      	cbz	r0, 800a374 <_rclc_take_new_data+0x298>
 800a364:	6860      	ldr	r0, [r4, #4]
 800a366:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a368:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a36c:	3501      	adds	r5, #1
 800a36e:	42ab      	cmp	r3, r5
 800a370:	d8f0      	bhi.n	800a354 <_rclc_take_new_data+0x278>
 800a372:	e729      	b.n	800a1c8 <_rclc_take_new_data+0xec>
 800a374:	6860      	ldr	r0, [r4, #4]
 800a376:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a378:	3501      	adds	r5, #1
 800a37a:	42ab      	cmp	r3, r5
 800a37c:	d8ea      	bhi.n	800a354 <_rclc_take_new_data+0x278>
 800a37e:	e723      	b.n	800a1c8 <_rclc_take_new_data+0xec>
 800a380:	ab06      	add	r3, sp, #24
 800a382:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a384:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a388:	2103      	movs	r1, #3
 800a38a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a38e:	6860      	ldr	r0, [r4, #4]
 800a390:	f009 f852 	bl	8013438 <rclc_action_server_goal_cancel_reject>
 800a394:	e6c4      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a396:	ab06      	add	r3, sp, #24
 800a398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a39a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a39e:	2102      	movs	r1, #2
 800a3a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a3a4:	6860      	ldr	r0, [r4, #4]
 800a3a6:	f009 f847 	bl	8013438 <rclc_action_server_goal_cancel_reject>
 800a3aa:	e6b9      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a3ac:	6860      	ldr	r0, [r4, #4]
 800a3ae:	e706      	b.n	800a1be <_rclc_take_new_data+0xe2>
 800a3b0:	6860      	ldr	r0, [r4, #4]
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	f008 ff60 	bl	8013278 <rclc_action_remove_used_goal_handle>
 800a3b8:	f000 fe6e 	bl	800b098 <rcutils_reset_error>
 800a3bc:	e6b0      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a3be:	2501      	movs	r5, #1
 800a3c0:	e6ae      	b.n	800a120 <_rclc_take_new_data+0x44>
 800a3c2:	bf00      	nop

0800a3c4 <_rclc_execute.part.0>:
 800a3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c6:	7803      	ldrb	r3, [r0, #0]
 800a3c8:	b087      	sub	sp, #28
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	2b0a      	cmp	r3, #10
 800a3ce:	f200 8136 	bhi.w	800a63e <_rclc_execute.part.0+0x27a>
 800a3d2:	e8df f003 	tbb	[pc, r3]
 800a3d6:	435e      	.short	0x435e
 800a3d8:	06a1664f 	.word	0x06a1664f
 800a3dc:	6c1e0606 	.word	0x6c1e0606
 800a3e0:	59          	.byte	0x59
 800a3e1:	00          	.byte	0x00
 800a3e2:	2b06      	cmp	r3, #6
 800a3e4:	f000 8122 	beq.w	800a62c <_rclc_execute.part.0+0x268>
 800a3e8:	2b07      	cmp	r3, #7
 800a3ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a3ec:	f040 8118 	bne.w	800a620 <_rclc_execute.part.0+0x25c>
 800a3f0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800a3f4:	6880      	ldr	r0, [r0, #8]
 800a3f6:	4798      	blx	r3
 800a3f8:	f104 0110 	add.w	r1, r4, #16
 800a3fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a3fe:	6860      	ldr	r0, [r4, #4]
 800a400:	f006 ff66 	bl	80112d0 <rcl_send_response>
 800a404:	2800      	cmp	r0, #0
 800a406:	d033      	beq.n	800a470 <_rclc_execute.part.0+0xac>
 800a408:	9005      	str	r0, [sp, #20]
 800a40a:	f000 fe45 	bl	800b098 <rcutils_reset_error>
 800a40e:	9805      	ldr	r0, [sp, #20]
 800a410:	e02e      	b.n	800a470 <_rclc_execute.part.0+0xac>
 800a412:	6840      	ldr	r0, [r0, #4]
 800a414:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 8086 	beq.w	800a52a <_rclc_execute.part.0+0x166>
 800a41e:	2600      	movs	r6, #0
 800a420:	2701      	movs	r7, #1
 800a422:	e004      	b.n	800a42e <_rclc_execute.part.0+0x6a>
 800a424:	f008 fef2 	bl	801320c <rclc_action_send_result_request>
 800a428:	b998      	cbnz	r0, 800a452 <_rclc_execute.part.0+0x8e>
 800a42a:	722f      	strb	r7, [r5, #8]
 800a42c:	6860      	ldr	r0, [r4, #4]
 800a42e:	f008 ff9f 	bl	8013370 <rclc_action_find_first_handle_with_goal_response>
 800a432:	4605      	mov	r5, r0
 800a434:	2800      	cmp	r0, #0
 800a436:	d077      	beq.n	800a528 <_rclc_execute.part.0+0x164>
 800a438:	6863      	ldr	r3, [r4, #4]
 800a43a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800a442:	f885 6020 	strb.w	r6, [r5, #32]
 800a446:	4798      	blx	r3
 800a448:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800a44c:	4628      	mov	r0, r5
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1e8      	bne.n	800a424 <_rclc_execute.part.0+0x60>
 800a452:	6860      	ldr	r0, [r4, #4]
 800a454:	4629      	mov	r1, r5
 800a456:	f008 ff0f 	bl	8013278 <rclc_action_remove_used_goal_handle>
 800a45a:	e7e7      	b.n	800a42c <_rclc_execute.part.0+0x68>
 800a45c:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a460:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800a464:	2d00      	cmp	r5, #0
 800a466:	f000 80c9 	beq.w	800a5fc <_rclc_execute.part.0+0x238>
 800a46a:	6880      	ldr	r0, [r0, #8]
 800a46c:	4798      	blx	r3
 800a46e:	2000      	movs	r0, #0
 800a470:	b007      	add	sp, #28
 800a472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a474:	6840      	ldr	r0, [r0, #4]
 800a476:	f007 fb39 	bl	8011aec <rcl_timer_call>
 800a47a:	f240 3321 	movw	r3, #801	@ 0x321
 800a47e:	4298      	cmp	r0, r3
 800a480:	d004      	beq.n	800a48c <_rclc_execute.part.0+0xc8>
 800a482:	2800      	cmp	r0, #0
 800a484:	d0f4      	beq.n	800a470 <_rclc_execute.part.0+0xac>
 800a486:	e7bf      	b.n	800a408 <_rclc_execute.part.0+0x44>
 800a488:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a48a:	4798      	blx	r3
 800a48c:	2000      	movs	r0, #0
 800a48e:	b007      	add	sp, #28
 800a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a492:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a496:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a498:	b925      	cbnz	r5, 800a4a4 <_rclc_execute.part.0+0xe0>
 800a49a:	4628      	mov	r0, r5
 800a49c:	4798      	blx	r3
 800a49e:	4628      	mov	r0, r5
 800a4a0:	e7e6      	b.n	800a470 <_rclc_execute.part.0+0xac>
 800a4a2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a4a4:	68a0      	ldr	r0, [r4, #8]
 800a4a6:	4798      	blx	r3
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	b007      	add	sp, #28
 800a4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ae:	6840      	ldr	r0, [r0, #4]
 800a4b0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a4b4:	bb3b      	cbnz	r3, 800a506 <_rclc_execute.part.0+0x142>
 800a4b6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d07b      	beq.n	800a5b6 <_rclc_execute.part.0+0x1f2>
 800a4be:	f640 0634 	movw	r6, #2100	@ 0x834
 800a4c2:	2701      	movs	r7, #1
 800a4c4:	e007      	b.n	800a4d6 <_rclc_execute.part.0+0x112>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f008 ff6a 	bl	80133a0 <rclc_action_server_response_goal_request>
 800a4cc:	6860      	ldr	r0, [r4, #4]
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f008 fed2 	bl	8013278 <rclc_action_remove_used_goal_handle>
 800a4d4:	6860      	ldr	r0, [r4, #4]
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	f008 fefc 	bl	80132d4 <rclc_action_find_first_handle_by_status>
 800a4dc:	4605      	mov	r5, r0
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d066      	beq.n	800a5b0 <_rclc_execute.part.0+0x1ec>
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	4798      	blx	r3
 800a4ea:	42b0      	cmp	r0, r6
 800a4ec:	f04f 0100 	mov.w	r1, #0
 800a4f0:	d1e9      	bne.n	800a4c6 <_rclc_execute.part.0+0x102>
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f008 ff53 	bl	80133a0 <rclc_action_server_response_goal_request>
 800a4fa:	722f      	strb	r7, [r5, #8]
 800a4fc:	e7ea      	b.n	800a4d4 <_rclc_execute.part.0+0x110>
 800a4fe:	6848      	ldr	r0, [r1, #4]
 800a500:	f008 feba 	bl	8013278 <rclc_action_remove_used_goal_handle>
 800a504:	6860      	ldr	r0, [r4, #4]
 800a506:	f008 fef1 	bl	80132ec <rclc_action_find_first_terminated_handle>
 800a50a:	4601      	mov	r1, r0
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d1f6      	bne.n	800a4fe <_rclc_execute.part.0+0x13a>
 800a510:	6860      	ldr	r0, [r4, #4]
 800a512:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800a516:	e7ce      	b.n	800a4b6 <_rclc_execute.part.0+0xf2>
 800a518:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a51a:	6880      	ldr	r0, [r0, #8]
 800a51c:	f104 0110 	add.w	r1, r4, #16
 800a520:	4798      	blx	r3
 800a522:	2000      	movs	r0, #0
 800a524:	b007      	add	sp, #28
 800a526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a528:	6860      	ldr	r0, [r4, #4]
 800a52a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a52e:	b18b      	cbz	r3, 800a554 <_rclc_execute.part.0+0x190>
 800a530:	68c5      	ldr	r5, [r0, #12]
 800a532:	b32d      	cbz	r5, 800a580 <_rclc_execute.part.0+0x1bc>
 800a534:	2600      	movs	r6, #0
 800a536:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800a53a:	b143      	cbz	r3, 800a54e <_rclc_execute.part.0+0x18a>
 800a53c:	69c3      	ldr	r3, [r0, #28]
 800a53e:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800a542:	b123      	cbz	r3, 800a54e <_rclc_execute.part.0+0x18a>
 800a544:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a546:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a548:	4628      	mov	r0, r5
 800a54a:	4798      	blx	r3
 800a54c:	6860      	ldr	r0, [r4, #4]
 800a54e:	682d      	ldr	r5, [r5, #0]
 800a550:	2d00      	cmp	r5, #0
 800a552:	d1f0      	bne.n	800a536 <_rclc_execute.part.0+0x172>
 800a554:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a558:	b193      	cbz	r3, 800a580 <_rclc_execute.part.0+0x1bc>
 800a55a:	68c5      	ldr	r5, [r0, #12]
 800a55c:	b185      	cbz	r5, 800a580 <_rclc_execute.part.0+0x1bc>
 800a55e:	2600      	movs	r6, #0
 800a560:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800a564:	b14b      	cbz	r3, 800a57a <_rclc_execute.part.0+0x1b6>
 800a566:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a568:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800a56c:	b12b      	cbz	r3, 800a57a <_rclc_execute.part.0+0x1b6>
 800a56e:	4628      	mov	r0, r5
 800a570:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800a574:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a576:	4798      	blx	r3
 800a578:	6860      	ldr	r0, [r4, #4]
 800a57a:	682d      	ldr	r5, [r5, #0]
 800a57c:	2d00      	cmp	r5, #0
 800a57e:	d1ef      	bne.n	800a560 <_rclc_execute.part.0+0x19c>
 800a580:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a584:	2b00      	cmp	r3, #0
 800a586:	d081      	beq.n	800a48c <_rclc_execute.part.0+0xc8>
 800a588:	2700      	movs	r7, #0
 800a58a:	e00b      	b.n	800a5a4 <_rclc_execute.part.0+0x1e0>
 800a58c:	6863      	ldr	r3, [r4, #4]
 800a58e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a590:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a592:	6a1e      	ldr	r6, [r3, #32]
 800a594:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a598:	47b0      	blx	r6
 800a59a:	6860      	ldr	r0, [r4, #4]
 800a59c:	4629      	mov	r1, r5
 800a59e:	f008 fe6b 	bl	8013278 <rclc_action_remove_used_goal_handle>
 800a5a2:	6860      	ldr	r0, [r4, #4]
 800a5a4:	f008 fef0 	bl	8013388 <rclc_action_find_first_handle_with_result_response>
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d1ee      	bne.n	800a58c <_rclc_execute.part.0+0x1c8>
 800a5ae:	e76d      	b.n	800a48c <_rclc_execute.part.0+0xc8>
 800a5b0:	6860      	ldr	r0, [r4, #4]
 800a5b2:	f880 5020 	strb.w	r5, [r0, #32]
 800a5b6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f43f af66 	beq.w	800a48c <_rclc_execute.part.0+0xc8>
 800a5c0:	68c5      	ldr	r5, [r0, #12]
 800a5c2:	b1b5      	cbz	r5, 800a5f2 <_rclc_execute.part.0+0x22e>
 800a5c4:	2602      	movs	r6, #2
 800a5c6:	e001      	b.n	800a5cc <_rclc_execute.part.0+0x208>
 800a5c8:	682d      	ldr	r5, [r5, #0]
 800a5ca:	b195      	cbz	r5, 800a5f2 <_rclc_execute.part.0+0x22e>
 800a5cc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d1f9      	bne.n	800a5c8 <_rclc_execute.part.0+0x204>
 800a5d4:	69c3      	ldr	r3, [r0, #28]
 800a5d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a5d8:	4628      	mov	r0, r5
 800a5da:	4798      	blx	r3
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a5e8:	b163      	cbz	r3, 800a604 <_rclc_execute.part.0+0x240>
 800a5ea:	f008 fef9 	bl	80133e0 <rclc_action_server_goal_cancel_accept>
 800a5ee:	6860      	ldr	r0, [r4, #4]
 800a5f0:	e7ea      	b.n	800a5c8 <_rclc_execute.part.0+0x204>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	e739      	b.n	800a470 <_rclc_execute.part.0+0xac>
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	4798      	blx	r3
 800a600:	4628      	mov	r0, r5
 800a602:	e735      	b.n	800a470 <_rclc_execute.part.0+0xac>
 800a604:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a606:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a60a:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800a60e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a612:	6860      	ldr	r0, [r4, #4]
 800a614:	2101      	movs	r1, #1
 800a616:	f008 ff0f 	bl	8013438 <rclc_action_server_goal_cancel_reject>
 800a61a:	722e      	strb	r6, [r5, #8]
 800a61c:	6860      	ldr	r0, [r4, #4]
 800a61e:	e7d3      	b.n	800a5c8 <_rclc_execute.part.0+0x204>
 800a620:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a622:	6880      	ldr	r0, [r0, #8]
 800a624:	4798      	blx	r3
 800a626:	f104 0110 	add.w	r1, r4, #16
 800a62a:	e6e7      	b.n	800a3fc <_rclc_execute.part.0+0x38>
 800a62c:	f100 0110 	add.w	r1, r0, #16
 800a630:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a632:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800a634:	6880      	ldr	r0, [r0, #8]
 800a636:	9105      	str	r1, [sp, #20]
 800a638:	4798      	blx	r3
 800a63a:	9905      	ldr	r1, [sp, #20]
 800a63c:	e6de      	b.n	800a3fc <_rclc_execute.part.0+0x38>
 800a63e:	2001      	movs	r0, #1
 800a640:	e716      	b.n	800a470 <_rclc_execute.part.0+0xac>
 800a642:	bf00      	nop

0800a644 <rclc_executor_trigger_any>:
 800a644:	2800      	cmp	r0, #0
 800a646:	d03f      	beq.n	800a6c8 <rclc_executor_trigger_any+0x84>
 800a648:	2900      	cmp	r1, #0
 800a64a:	d03e      	beq.n	800a6ca <rclc_executor_trigger_any+0x86>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800a652:	2200      	movs	r2, #0
 800a654:	2800      	cmp	r0, #0
 800a656:	d037      	beq.n	800a6c8 <rclc_executor_trigger_any+0x84>
 800a658:	b430      	push	{r4, r5}
 800a65a:	f893 c000 	ldrb.w	ip, [r3]
 800a65e:	f1bc 0f08 	cmp.w	ip, #8
 800a662:	d11e      	bne.n	800a6a2 <rclc_executor_trigger_any+0x5e>
 800a664:	685c      	ldr	r4, [r3, #4]
 800a666:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a668:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800a66c:	d105      	bne.n	800a67a <rclc_executor_trigger_any+0x36>
 800a66e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800a672:	b910      	cbnz	r0, 800a67a <rclc_executor_trigger_any+0x36>
 800a674:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800a678:	b128      	cbz	r0, 800a686 <rclc_executor_trigger_any+0x42>
 800a67a:	bc30      	pop	{r4, r5}
 800a67c:	4770      	bx	lr
 800a67e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800a682:	2800      	cmp	r0, #0
 800a684:	d1f9      	bne.n	800a67a <rclc_executor_trigger_any+0x36>
 800a686:	3201      	adds	r2, #1
 800a688:	4291      	cmp	r1, r2
 800a68a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a68e:	d018      	beq.n	800a6c2 <rclc_executor_trigger_any+0x7e>
 800a690:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800a694:	2800      	cmp	r0, #0
 800a696:	d0f0      	beq.n	800a67a <rclc_executor_trigger_any+0x36>
 800a698:	f893 c000 	ldrb.w	ip, [r3]
 800a69c:	f1bc 0f08 	cmp.w	ip, #8
 800a6a0:	d0e0      	beq.n	800a664 <rclc_executor_trigger_any+0x20>
 800a6a2:	f1bc 0f09 	cmp.w	ip, #9
 800a6a6:	d1ea      	bne.n	800a67e <rclc_executor_trigger_any+0x3a>
 800a6a8:	685c      	ldr	r4, [r3, #4]
 800a6aa:	6a25      	ldr	r5, [r4, #32]
 800a6ac:	2d00      	cmp	r5, #0
 800a6ae:	d1e4      	bne.n	800a67a <rclc_executor_trigger_any+0x36>
 800a6b0:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d1e0      	bne.n	800a67a <rclc_executor_trigger_any+0x36>
 800a6b8:	3201      	adds	r2, #1
 800a6ba:	4291      	cmp	r1, r2
 800a6bc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a6c0:	d1e6      	bne.n	800a690 <rclc_executor_trigger_any+0x4c>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	bc30      	pop	{r4, r5}
 800a6c6:	4770      	bx	lr
 800a6c8:	4770      	bx	lr
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop

0800a6d0 <rclc_executor_get_zero_initialized_executor>:
 800a6d0:	b510      	push	{r4, lr}
 800a6d2:	4903      	ldr	r1, [pc, #12]	@ (800a6e0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	2288      	movs	r2, #136	@ 0x88
 800a6d8:	f00c f8c1 	bl	801685e <memcpy>
 800a6dc:	4620      	mov	r0, r4
 800a6de:	bd10      	pop	{r4, pc}
 800a6e0:	08017b98 	.word	0x08017b98
 800a6e4:	00000000 	.word	0x00000000

0800a6e8 <rclc_executor_init>:
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d05f      	beq.n	800a7ac <rclc_executor_init+0xc4>
 800a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f0:	460c      	mov	r4, r1
 800a6f2:	b0b0      	sub	sp, #192	@ 0xc0
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	d051      	beq.n	800a79c <rclc_executor_init+0xb4>
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	4616      	mov	r6, r2
 800a6fe:	461f      	mov	r7, r3
 800a700:	f000 fca4 	bl	800b04c <rcutils_allocator_is_valid>
 800a704:	2800      	cmp	r0, #0
 800a706:	d049      	beq.n	800a79c <rclc_executor_init+0xb4>
 800a708:	2e00      	cmp	r6, #0
 800a70a:	d047      	beq.n	800a79c <rclc_executor_init+0xb4>
 800a70c:	492c      	ldr	r1, [pc, #176]	@ (800a7c0 <rclc_executor_init+0xd8>)
 800a70e:	2288      	movs	r2, #136	@ 0x88
 800a710:	a80e      	add	r0, sp, #56	@ 0x38
 800a712:	f00c f8a4 	bl	801685e <memcpy>
 800a716:	a90e      	add	r1, sp, #56	@ 0x38
 800a718:	2288      	movs	r2, #136	@ 0x88
 800a71a:	4628      	mov	r0, r5
 800a71c:	f00c f89f 	bl	801685e <memcpy>
 800a720:	602c      	str	r4, [r5, #0]
 800a722:	4668      	mov	r0, sp
 800a724:	60ae      	str	r6, [r5, #8]
 800a726:	466c      	mov	r4, sp
 800a728:	f007 fb52 	bl	8011dd0 <rcl_get_zero_initialized_wait_set>
 800a72c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a72e:	f105 0c14 	add.w	ip, r5, #20
 800a732:	f8d7 8000 	ldr.w	r8, [r7]
 800a736:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a73a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a73c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a742:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a746:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a7b8 <rclc_executor_init+0xd0>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	f8cc 3000 	str.w	r3, [ip]
 800a750:	6939      	ldr	r1, [r7, #16]
 800a752:	612f      	str	r7, [r5, #16]
 800a754:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800a758:	01b0      	lsls	r0, r6, #6
 800a75a:	47c0      	blx	r8
 800a75c:	6068      	str	r0, [r5, #4]
 800a75e:	b338      	cbz	r0, 800a7b0 <rclc_executor_init+0xc8>
 800a760:	2400      	movs	r4, #0
 800a762:	e000      	b.n	800a766 <rclc_executor_init+0x7e>
 800a764:	6868      	ldr	r0, [r5, #4]
 800a766:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a76a:	4631      	mov	r1, r6
 800a76c:	3401      	adds	r4, #1
 800a76e:	f000 fad7 	bl	800ad20 <rclc_executor_handle_init>
 800a772:	42a6      	cmp	r6, r4
 800a774:	d1f6      	bne.n	800a764 <rclc_executor_init+0x7c>
 800a776:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800a77a:	f000 fac7 	bl	800ad0c <rclc_executor_handle_counters_zero_init>
 800a77e:	4a11      	ldr	r2, [pc, #68]	@ (800a7c4 <rclc_executor_init+0xdc>)
 800a780:	686b      	ldr	r3, [r5, #4]
 800a782:	2000      	movs	r0, #0
 800a784:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800a788:	b163      	cbz	r3, 800a7a4 <rclc_executor_init+0xbc>
 800a78a:	692b      	ldr	r3, [r5, #16]
 800a78c:	b153      	cbz	r3, 800a7a4 <rclc_executor_init+0xbc>
 800a78e:	68ab      	ldr	r3, [r5, #8]
 800a790:	b143      	cbz	r3, 800a7a4 <rclc_executor_init+0xbc>
 800a792:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800a796:	b030      	add	sp, #192	@ 0xc0
 800a798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a79c:	200b      	movs	r0, #11
 800a79e:	b030      	add	sp, #192	@ 0xc0
 800a7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	b030      	add	sp, #192	@ 0xc0
 800a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7ac:	200b      	movs	r0, #11
 800a7ae:	4770      	bx	lr
 800a7b0:	200a      	movs	r0, #10
 800a7b2:	e7f4      	b.n	800a79e <rclc_executor_init+0xb6>
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	3b9aca00 	.word	0x3b9aca00
 800a7bc:	00000000 	.word	0x00000000
 800a7c0:	08017b98 	.word	0x08017b98
 800a7c4:	0800a645 	.word	0x0800a645

0800a7c8 <rclc_executor_add_subscription>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a7ce:	b338      	cbz	r0, 800a820 <rclc_executor_add_subscription+0x58>
 800a7d0:	b331      	cbz	r1, 800a820 <rclc_executor_add_subscription+0x58>
 800a7d2:	b32a      	cbz	r2, 800a820 <rclc_executor_add_subscription+0x58>
 800a7d4:	b323      	cbz	r3, 800a820 <rclc_executor_add_subscription+0x58>
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800a7dc:	42a8      	cmp	r0, r5
 800a7de:	d301      	bcc.n	800a7e4 <rclc_executor_add_subscription+0x1c>
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e4:	6866      	ldr	r6, [r4, #4]
 800a7e6:	0187      	lsls	r7, r0, #6
 800a7e8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a7ec:	2500      	movs	r5, #0
 800a7ee:	55f5      	strb	r5, [r6, r7]
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800a7f6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	f104 0514 	add.w	r5, r4, #20
 800a800:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a804:	f88c e001 	strb.w	lr, [ip, #1]
 800a808:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800a80c:	60e0      	str	r0, [r4, #12]
 800a80e:	4628      	mov	r0, r5
 800a810:	f007 faf2 	bl	8011df8 <rcl_wait_set_is_valid>
 800a814:	b930      	cbnz	r0, 800a824 <rclc_executor_add_subscription+0x5c>
 800a816:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a818:	3301      	adds	r3, #1
 800a81a:	2000      	movs	r0, #0
 800a81c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a820:	200b      	movs	r0, #11
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a824:	4628      	mov	r0, r5
 800a826:	f007 faed 	bl	8011e04 <rcl_wait_set_fini>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d0f3      	beq.n	800a816 <rclc_executor_add_subscription+0x4e>
 800a82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a830 <rclc_executor_add_timer>:
 800a830:	b300      	cbz	r0, 800a874 <rclc_executor_add_timer+0x44>
 800a832:	b1f9      	cbz	r1, 800a874 <rclc_executor_add_timer+0x44>
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800a83a:	4293      	cmp	r3, r2
 800a83c:	4604      	mov	r4, r0
 800a83e:	d301      	bcc.n	800a844 <rclc_executor_add_timer+0x14>
 800a840:	2001      	movs	r0, #1
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	6840      	ldr	r0, [r0, #4]
 800a846:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800a84a:	019d      	lsls	r5, r3, #6
 800a84c:	6051      	str	r1, [r2, #4]
 800a84e:	2102      	movs	r1, #2
 800a850:	5341      	strh	r1, [r0, r5]
 800a852:	3301      	adds	r3, #1
 800a854:	2000      	movs	r0, #0
 800a856:	2101      	movs	r1, #1
 800a858:	f104 0514 	add.w	r5, r4, #20
 800a85c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800a85e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800a860:	4628      	mov	r0, r5
 800a862:	60e3      	str	r3, [r4, #12]
 800a864:	f007 fac8 	bl	8011df8 <rcl_wait_set_is_valid>
 800a868:	b930      	cbnz	r0, 800a878 <rclc_executor_add_timer+0x48>
 800a86a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a86c:	3301      	adds	r3, #1
 800a86e:	2000      	movs	r0, #0
 800a870:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	200b      	movs	r0, #11
 800a876:	4770      	bx	lr
 800a878:	4628      	mov	r0, r5
 800a87a:	f007 fac3 	bl	8011e04 <rcl_wait_set_fini>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d0f3      	beq.n	800a86a <rclc_executor_add_timer+0x3a>
 800a882:	bd38      	pop	{r3, r4, r5, pc}

0800a884 <rclc_executor_add_service>:
 800a884:	b370      	cbz	r0, 800a8e4 <rclc_executor_add_service+0x60>
 800a886:	b369      	cbz	r1, 800a8e4 <rclc_executor_add_service+0x60>
 800a888:	b362      	cbz	r2, 800a8e4 <rclc_executor_add_service+0x60>
 800a88a:	b35b      	cbz	r3, 800a8e4 <rclc_executor_add_service+0x60>
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4604      	mov	r4, r0
 800a890:	9804      	ldr	r0, [sp, #16]
 800a892:	b378      	cbz	r0, 800a8f4 <rclc_executor_add_service+0x70>
 800a894:	e9d4 5002 	ldrd	r5, r0, [r4, #8]
 800a898:	42a8      	cmp	r0, r5
 800a89a:	d301      	bcc.n	800a8a0 <rclc_executor_add_service+0x1c>
 800a89c:	2001      	movs	r0, #1
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	6865      	ldr	r5, [r4, #4]
 800a8a2:	eb05 1c80 	add.w	ip, r5, r0, lsl #6
 800a8a6:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800a8aa:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800a8b4:	2305      	movs	r3, #5
 800a8b6:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	f825 300e 	strh.w	r3, [r5, lr]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f104 0514 	add.w	r5, r4, #20
 800a8c8:	f88c 2038 	strb.w	r2, [ip, #56]	@ 0x38
 800a8cc:	f8cc 302c 	str.w	r3, [ip, #44]	@ 0x2c
 800a8d0:	60e0      	str	r0, [r4, #12]
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f007 fa90 	bl	8011df8 <rcl_wait_set_is_valid>
 800a8d8:	b930      	cbnz	r0, 800a8e8 <rclc_executor_add_service+0x64>
 800a8da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a8dc:	3301      	adds	r3, #1
 800a8de:	2000      	movs	r0, #0
 800a8e0:	6563      	str	r3, [r4, #84]	@ 0x54
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	200b      	movs	r0, #11
 800a8e6:	4770      	bx	lr
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f007 fa8b 	bl	8011e04 <rcl_wait_set_fini>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d0f3      	beq.n	800a8da <rclc_executor_add_service+0x56>
 800a8f2:	e7d4      	b.n	800a89e <rclc_executor_add_service+0x1a>
 800a8f4:	200b      	movs	r0, #11
 800a8f6:	bd38      	pop	{r3, r4, r5, pc}

0800a8f8 <rclc_executor_prepare>:
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d044      	beq.n	800a986 <rclc_executor_prepare+0x8e>
 800a8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fe:	f100 0514 	add.w	r5, r0, #20
 800a902:	b09b      	sub	sp, #108	@ 0x6c
 800a904:	4604      	mov	r4, r0
 800a906:	4628      	mov	r0, r5
 800a908:	f007 fa76 	bl	8011df8 <rcl_wait_set_is_valid>
 800a90c:	b110      	cbz	r0, 800a914 <rclc_executor_prepare+0x1c>
 800a90e:	2000      	movs	r0, #0
 800a910:	b01b      	add	sp, #108	@ 0x6c
 800a912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a914:	4628      	mov	r0, r5
 800a916:	f007 fa75 	bl	8011e04 <rcl_wait_set_fini>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d130      	bne.n	800a980 <rclc_executor_prepare+0x88>
 800a91e:	a80c      	add	r0, sp, #48	@ 0x30
 800a920:	f007 fa56 	bl	8011dd0 <rcl_get_zero_initialized_wait_set>
 800a924:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a928:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a92c:	46ae      	mov	lr, r5
 800a92e:	6927      	ldr	r7, [r4, #16]
 800a930:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a934:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a938:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a93c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a940:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a944:	f8dc 3000 	ldr.w	r3, [ip]
 800a948:	f8ce 3000 	str.w	r3, [lr]
 800a94c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a94e:	ae04      	add	r6, sp, #16
 800a950:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	6822      	ldr	r2, [r4, #0]
 800a956:	6033      	str	r3, [r6, #0]
 800a958:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a95a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a95c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a960:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800a964:	e9cd 2100 	strd	r2, r1, [sp]
 800a968:	4628      	mov	r0, r5
 800a96a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a96c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a96e:	f007 fd47 	bl	8012400 <rcl_wait_set_init>
 800a972:	2800      	cmp	r0, #0
 800a974:	d0cc      	beq.n	800a910 <rclc_executor_prepare+0x18>
 800a976:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a978:	f000 fb8e 	bl	800b098 <rcutils_reset_error>
 800a97c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a97e:	e7c7      	b.n	800a910 <rclc_executor_prepare+0x18>
 800a980:	f000 fb8a 	bl	800b098 <rcutils_reset_error>
 800a984:	e7cb      	b.n	800a91e <rclc_executor_prepare+0x26>
 800a986:	200b      	movs	r0, #11
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop

0800a98c <rclc_executor_spin_some.part.0>:
 800a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a990:	f100 0614 	add.w	r6, r0, #20
 800a994:	b083      	sub	sp, #12
 800a996:	4691      	mov	r9, r2
 800a998:	4698      	mov	r8, r3
 800a99a:	4605      	mov	r5, r0
 800a99c:	f7ff ffac 	bl	800a8f8 <rclc_executor_prepare>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f007 fafb 	bl	8011f9c <rcl_wait_set_clear>
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f040 80ed 	bne.w	800ab88 <rclc_executor_spin_some.part.0+0x1fc>
 800a9ae:	68ab      	ldr	r3, [r5, #8]
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	b303      	cbz	r3, 800a9f6 <rclc_executor_spin_some.part.0+0x6a>
 800a9b4:	6869      	ldr	r1, [r5, #4]
 800a9b6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a9ba:	01a2      	lsls	r2, r4, #6
 800a9bc:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a9c0:	b1cb      	cbz	r3, 800a9f6 <rclc_executor_spin_some.part.0+0x6a>
 800a9c2:	5c8b      	ldrb	r3, [r1, r2]
 800a9c4:	2b0a      	cmp	r3, #10
 800a9c6:	f200 80d8 	bhi.w	800ab7a <rclc_executor_spin_some.part.0+0x1ee>
 800a9ca:	e8df f003 	tbb	[pc, r3]
 800a9ce:	9c9c      	.short	0x9c9c
 800a9d0:	068c8ca7 	.word	0x068c8ca7
 800a9d4:	bdc90606 	.word	0xbdc90606
 800a9d8:	b2          	.byte	0xb2
 800a9d9:	00          	.byte	0x00
 800a9da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a9de:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f007 fe22 	bl	801262c <rcl_wait_set_add_service>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f040 8086 	bne.w	800aafa <rclc_executor_spin_some.part.0+0x16e>
 800a9ee:	68ab      	ldr	r3, [r5, #8]
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	429c      	cmp	r4, r3
 800a9f4:	d3de      	bcc.n	800a9b4 <rclc_executor_spin_some.part.0+0x28>
 800a9f6:	4643      	mov	r3, r8
 800a9f8:	464a      	mov	r2, r9
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	f007 fe44 	bl	8012688 <rcl_wait>
 800aa00:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80c7 	beq.w	800ab98 <rclc_executor_spin_some.part.0+0x20c>
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	f040 80b5 	bne.w	800ab7a <rclc_executor_spin_some.part.0+0x1ee>
 800aa10:	68ab      	ldr	r3, [r5, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 8159 	beq.w	800acca <rclc_executor_spin_some.part.0+0x33e>
 800aa18:	2400      	movs	r4, #0
 800aa1a:	46a0      	mov	r8, r4
 800aa1c:	f240 1991 	movw	r9, #401	@ 0x191
 800aa20:	e00a      	b.n	800aa38 <rclc_executor_spin_some.part.0+0xac>
 800aa22:	f7ff fb0d 	bl	800a040 <_rclc_check_for_new_data>
 800aa26:	4604      	mov	r4, r0
 800aa28:	b110      	cbz	r0, 800aa30 <rclc_executor_spin_some.part.0+0xa4>
 800aa2a:	4548      	cmp	r0, r9
 800aa2c:	f040 80b2 	bne.w	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800aa30:	68ab      	ldr	r3, [r5, #8]
 800aa32:	4598      	cmp	r8, r3
 800aa34:	f080 8126 	bcs.w	800ac84 <rclc_executor_spin_some.part.0+0x2f8>
 800aa38:	686a      	ldr	r2, [r5, #4]
 800aa3a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800aa3e:	4631      	mov	r1, r6
 800aa40:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800aa44:	f108 0801 	add.w	r8, r8, #1
 800aa48:	f1bc 0f00 	cmp.w	ip, #0
 800aa4c:	d1e9      	bne.n	800aa22 <rclc_executor_spin_some.part.0+0x96>
 800aa4e:	4619      	mov	r1, r3
 800aa50:	4610      	mov	r0, r2
 800aa52:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800aa56:	4798      	blx	r3
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f000 809b 	beq.w	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800aa5e:	68ab      	ldr	r3, [r5, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 8097 	beq.w	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800aa66:	f04f 0800 	mov.w	r8, #0
 800aa6a:	f240 1991 	movw	r9, #401	@ 0x191
 800aa6e:	e009      	b.n	800aa84 <rclc_executor_spin_some.part.0+0xf8>
 800aa70:	f7ff fb34 	bl	800a0dc <_rclc_take_new_data>
 800aa74:	4604      	mov	r4, r0
 800aa76:	b110      	cbz	r0, 800aa7e <rclc_executor_spin_some.part.0+0xf2>
 800aa78:	4548      	cmp	r0, r9
 800aa7a:	f040 808b 	bne.w	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800aa7e:	68ab      	ldr	r3, [r5, #8]
 800aa80:	4598      	cmp	r8, r3
 800aa82:	d209      	bcs.n	800aa98 <rclc_executor_spin_some.part.0+0x10c>
 800aa84:	6868      	ldr	r0, [r5, #4]
 800aa86:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800aa8a:	4631      	mov	r1, r6
 800aa8c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800aa90:	f108 0801 	add.w	r8, r8, #1
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	d1eb      	bne.n	800aa70 <rclc_executor_spin_some.part.0+0xe4>
 800aa98:	2600      	movs	r6, #0
 800aa9a:	b97b      	cbnz	r3, 800aabc <rclc_executor_spin_some.part.0+0x130>
 800aa9c:	e07a      	b.n	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800aa9e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800aaa2:	2a08      	cmp	r2, #8
 800aaa4:	f000 80fd 	beq.w	800aca2 <rclc_executor_spin_some.part.0+0x316>
 800aaa8:	2a09      	cmp	r2, #9
 800aaaa:	f000 80ef 	beq.w	800ac8c <rclc_executor_spin_some.part.0+0x300>
 800aaae:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800aab2:	b98a      	cbnz	r2, 800aad8 <rclc_executor_spin_some.part.0+0x14c>
 800aab4:	3601      	adds	r6, #1
 800aab6:	429e      	cmp	r6, r3
 800aab8:	d262      	bcs.n	800ab80 <rclc_executor_spin_some.part.0+0x1f4>
 800aaba:	2400      	movs	r4, #0
 800aabc:	686a      	ldr	r2, [r5, #4]
 800aabe:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800aac2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800aac6:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800aaca:	2900      	cmp	r1, #0
 800aacc:	d062      	beq.n	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800aace:	7841      	ldrb	r1, [r0, #1]
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d0e4      	beq.n	800aa9e <rclc_executor_spin_some.part.0+0x112>
 800aad4:	2901      	cmp	r1, #1
 800aad6:	d1ed      	bne.n	800aab4 <rclc_executor_spin_some.part.0+0x128>
 800aad8:	f7ff fc74 	bl	800a3c4 <_rclc_execute.part.0>
 800aadc:	2800      	cmp	r0, #0
 800aade:	f040 80b6 	bne.w	800ac4e <rclc_executor_spin_some.part.0+0x2c2>
 800aae2:	68ab      	ldr	r3, [r5, #8]
 800aae4:	e7e6      	b.n	800aab4 <rclc_executor_spin_some.part.0+0x128>
 800aae6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800aaea:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f007 fd70 	bl	80125d4 <rcl_wait_set_add_client>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	f43f af7a 	beq.w	800a9ee <rclc_executor_spin_some.part.0+0x62>
 800aafa:	9001      	str	r0, [sp, #4]
 800aafc:	f000 facc 	bl	800b098 <rcutils_reset_error>
 800ab00:	9801      	ldr	r0, [sp, #4]
 800ab02:	4607      	mov	r7, r0
 800ab04:	e03c      	b.n	800ab80 <rclc_executor_spin_some.part.0+0x1f4>
 800ab06:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab0a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f007 fa18 	bl	8011f44 <rcl_wait_set_add_subscription>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	f43f af6a 	beq.w	800a9ee <rclc_executor_spin_some.part.0+0x62>
 800ab1a:	e7ee      	b.n	800aafa <rclc_executor_spin_some.part.0+0x16e>
 800ab1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab20:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab24:	4630      	mov	r0, r6
 800ab26:	f007 fd25 	bl	8012574 <rcl_wait_set_add_timer>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	f43f af5f 	beq.w	800a9ee <rclc_executor_spin_some.part.0+0x62>
 800ab30:	e7e3      	b.n	800aafa <rclc_executor_spin_some.part.0+0x16e>
 800ab32:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab36:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f007 fcee 	bl	801251c <rcl_wait_set_add_guard_condition>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	f43f af54 	beq.w	800a9ee <rclc_executor_spin_some.part.0+0x62>
 800ab46:	e7d8      	b.n	800aafa <rclc_executor_spin_some.part.0+0x16e>
 800ab48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab50:	3110      	adds	r1, #16
 800ab52:	4630      	mov	r0, r6
 800ab54:	f008 fa70 	bl	8013038 <rcl_action_wait_set_add_action_server>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f43f af48 	beq.w	800a9ee <rclc_executor_spin_some.part.0+0x62>
 800ab5e:	e7cc      	b.n	800aafa <rclc_executor_spin_some.part.0+0x16e>
 800ab60:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ab64:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ab68:	3110      	adds	r1, #16
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f008 f83b 	bl	8012be8 <rcl_action_wait_set_add_action_client>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f43f af3b 	beq.w	800a9ee <rclc_executor_spin_some.part.0+0x62>
 800ab78:	e7bf      	b.n	800aafa <rclc_executor_spin_some.part.0+0x16e>
 800ab7a:	f000 fa8d 	bl	800b098 <rcutils_reset_error>
 800ab7e:	2701      	movs	r7, #1
 800ab80:	4638      	mov	r0, r7
 800ab82:	b003      	add	sp, #12
 800ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab88:	f000 fa86 	bl	800b098 <rcutils_reset_error>
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	b003      	add	sp, #12
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	4627      	mov	r7, r4
 800ab96:	e7f3      	b.n	800ab80 <rclc_executor_spin_some.part.0+0x1f4>
 800ab98:	68ab      	ldr	r3, [r5, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 8092 	beq.w	800acc4 <rclc_executor_spin_some.part.0+0x338>
 800aba0:	2400      	movs	r4, #0
 800aba2:	46a0      	mov	r8, r4
 800aba4:	f240 1991 	movw	r9, #401	@ 0x191
 800aba8:	e008      	b.n	800abbc <rclc_executor_spin_some.part.0+0x230>
 800abaa:	f7ff fa49 	bl	800a040 <_rclc_check_for_new_data>
 800abae:	4604      	mov	r4, r0
 800abb0:	b108      	cbz	r0, 800abb6 <rclc_executor_spin_some.part.0+0x22a>
 800abb2:	4548      	cmp	r0, r9
 800abb4:	d1ee      	bne.n	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800abb6:	68ab      	ldr	r3, [r5, #8]
 800abb8:	4598      	cmp	r8, r3
 800abba:	d265      	bcs.n	800ac88 <rclc_executor_spin_some.part.0+0x2fc>
 800abbc:	686a      	ldr	r2, [r5, #4]
 800abbe:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800abc2:	4631      	mov	r1, r6
 800abc4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800abc8:	f108 0801 	add.w	r8, r8, #1
 800abcc:	f1bc 0f00 	cmp.w	ip, #0
 800abd0:	d1eb      	bne.n	800abaa <rclc_executor_spin_some.part.0+0x21e>
 800abd2:	4619      	mov	r1, r3
 800abd4:	4610      	mov	r0, r2
 800abd6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800abda:	4798      	blx	r3
 800abdc:	2800      	cmp	r0, #0
 800abde:	d0d9      	beq.n	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800abe0:	68ab      	ldr	r3, [r5, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0d6      	beq.n	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	f240 1991 	movw	r9, #401	@ 0x191
 800abee:	f240 2a59 	movw	sl, #601	@ 0x259
 800abf2:	e00e      	b.n	800ac12 <rclc_executor_spin_some.part.0+0x286>
 800abf4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d033      	beq.n	800ac64 <rclc_executor_spin_some.part.0+0x2d8>
 800abfc:	2b09      	cmp	r3, #9
 800abfe:	d028      	beq.n	800ac52 <rclc_executor_spin_some.part.0+0x2c6>
 800ac00:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ac04:	b9fb      	cbnz	r3, 800ac46 <rclc_executor_spin_some.part.0+0x2ba>
 800ac06:	68ab      	ldr	r3, [r5, #8]
 800ac08:	f108 0801 	add.w	r8, r8, #1
 800ac0c:	4598      	cmp	r8, r3
 800ac0e:	d2b7      	bcs.n	800ab80 <rclc_executor_spin_some.part.0+0x1f4>
 800ac10:	2400      	movs	r4, #0
 800ac12:	6868      	ldr	r0, [r5, #4]
 800ac14:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ac18:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800ac1c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d0b7      	beq.n	800ab94 <rclc_executor_spin_some.part.0+0x208>
 800ac24:	4631      	mov	r1, r6
 800ac26:	f7ff fa59 	bl	800a0dc <_rclc_take_new_data>
 800ac2a:	b118      	cbz	r0, 800ac34 <rclc_executor_spin_some.part.0+0x2a8>
 800ac2c:	4548      	cmp	r0, r9
 800ac2e:	d001      	beq.n	800ac34 <rclc_executor_spin_some.part.0+0x2a8>
 800ac30:	4550      	cmp	r0, sl
 800ac32:	d10c      	bne.n	800ac4e <rclc_executor_spin_some.part.0+0x2c2>
 800ac34:	686b      	ldr	r3, [r5, #4]
 800ac36:	eb13 000b 	adds.w	r0, r3, fp
 800ac3a:	d021      	beq.n	800ac80 <rclc_executor_spin_some.part.0+0x2f4>
 800ac3c:	7842      	ldrb	r2, [r0, #1]
 800ac3e:	2a00      	cmp	r2, #0
 800ac40:	d0d8      	beq.n	800abf4 <rclc_executor_spin_some.part.0+0x268>
 800ac42:	2a01      	cmp	r2, #1
 800ac44:	d1df      	bne.n	800ac06 <rclc_executor_spin_some.part.0+0x27a>
 800ac46:	f7ff fbbd 	bl	800a3c4 <_rclc_execute.part.0>
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	d0db      	beq.n	800ac06 <rclc_executor_spin_some.part.0+0x27a>
 800ac4e:	4607      	mov	r7, r0
 800ac50:	e796      	b.n	800ab80 <rclc_executor_spin_some.part.0+0x1f4>
 800ac52:	6843      	ldr	r3, [r0, #4]
 800ac54:	6a1a      	ldr	r2, [r3, #32]
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	d1f5      	bne.n	800ac46 <rclc_executor_spin_some.part.0+0x2ba>
 800ac5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0d1      	beq.n	800ac06 <rclc_executor_spin_some.part.0+0x27a>
 800ac62:	e7f0      	b.n	800ac46 <rclc_executor_spin_some.part.0+0x2ba>
 800ac64:	6843      	ldr	r3, [r0, #4]
 800ac66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac68:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800ac6c:	d1eb      	bne.n	800ac46 <rclc_executor_spin_some.part.0+0x2ba>
 800ac6e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	d1e7      	bne.n	800ac46 <rclc_executor_spin_some.part.0+0x2ba>
 800ac76:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0c3      	beq.n	800ac06 <rclc_executor_spin_some.part.0+0x27a>
 800ac7e:	e7e2      	b.n	800ac46 <rclc_executor_spin_some.part.0+0x2ba>
 800ac80:	270b      	movs	r7, #11
 800ac82:	e77d      	b.n	800ab80 <rclc_executor_spin_some.part.0+0x1f4>
 800ac84:	686a      	ldr	r2, [r5, #4]
 800ac86:	e6e2      	b.n	800aa4e <rclc_executor_spin_some.part.0+0xc2>
 800ac88:	686a      	ldr	r2, [r5, #4]
 800ac8a:	e7a2      	b.n	800abd2 <rclc_executor_spin_some.part.0+0x246>
 800ac8c:	6842      	ldr	r2, [r0, #4]
 800ac8e:	6a11      	ldr	r1, [r2, #32]
 800ac90:	2900      	cmp	r1, #0
 800ac92:	f47f af21 	bne.w	800aad8 <rclc_executor_spin_some.part.0+0x14c>
 800ac96:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	f43f af0a 	beq.w	800aab4 <rclc_executor_spin_some.part.0+0x128>
 800aca0:	e71a      	b.n	800aad8 <rclc_executor_spin_some.part.0+0x14c>
 800aca2:	6842      	ldr	r2, [r0, #4]
 800aca4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800aca6:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800acaa:	f47f af15 	bne.w	800aad8 <rclc_executor_spin_some.part.0+0x14c>
 800acae:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800acb2:	2900      	cmp	r1, #0
 800acb4:	f47f af10 	bne.w	800aad8 <rclc_executor_spin_some.part.0+0x14c>
 800acb8:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	f43f aef9 	beq.w	800aab4 <rclc_executor_spin_some.part.0+0x128>
 800acc2:	e709      	b.n	800aad8 <rclc_executor_spin_some.part.0+0x14c>
 800acc4:	686a      	ldr	r2, [r5, #4]
 800acc6:	461c      	mov	r4, r3
 800acc8:	e783      	b.n	800abd2 <rclc_executor_spin_some.part.0+0x246>
 800acca:	686a      	ldr	r2, [r5, #4]
 800accc:	461c      	mov	r4, r3
 800acce:	e6be      	b.n	800aa4e <rclc_executor_spin_some.part.0+0xc2>

0800acd0 <rclc_executor_spin>:
 800acd0:	b1d0      	cbz	r0, 800ad08 <rclc_executor_spin+0x38>
 800acd2:	b510      	push	{r4, lr}
 800acd4:	4604      	mov	r4, r0
 800acd6:	b082      	sub	sp, #8
 800acd8:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	e9cd 2300 	strd	r2, r3, [sp]
 800ace2:	f005 fd29 	bl	8010738 <rcl_context_is_valid>
 800ace6:	4601      	mov	r1, r0
 800ace8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acec:	4620      	mov	r0, r4
 800acee:	b131      	cbz	r1, 800acfe <rclc_executor_spin+0x2e>
 800acf0:	f7ff fe4c 	bl	800a98c <rclc_executor_spin_some.part.0>
 800acf4:	f030 0302 	bics.w	r3, r0, #2
 800acf8:	d0ee      	beq.n	800acd8 <rclc_executor_spin+0x8>
 800acfa:	b002      	add	sp, #8
 800acfc:	bd10      	pop	{r4, pc}
 800acfe:	f000 f9cb 	bl	800b098 <rcutils_reset_error>
 800ad02:	2001      	movs	r0, #1
 800ad04:	b002      	add	sp, #8
 800ad06:	bd10      	pop	{r4, pc}
 800ad08:	200b      	movs	r0, #11
 800ad0a:	4770      	bx	lr

0800ad0c <rclc_executor_handle_counters_zero_init>:
 800ad0c:	b130      	cbz	r0, 800ad1c <rclc_executor_handle_counters_zero_init+0x10>
 800ad0e:	b508      	push	{r3, lr}
 800ad10:	2220      	movs	r2, #32
 800ad12:	2100      	movs	r1, #0
 800ad14:	f00b fcda 	bl	80166cc <memset>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	bd08      	pop	{r3, pc}
 800ad1c:	200b      	movs	r0, #11
 800ad1e:	4770      	bx	lr

0800ad20 <rclc_executor_handle_init>:
 800ad20:	b168      	cbz	r0, 800ad3e <rclc_executor_handle_init+0x1e>
 800ad22:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800ad48 <rclc_executor_handle_init+0x28>
 800ad26:	2300      	movs	r3, #0
 800ad28:	220b      	movs	r2, #11
 800ad2a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800ad2e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ad32:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ad36:	8002      	strh	r2, [r0, #0]
 800ad38:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	4770      	bx	lr
 800ad3e:	200b      	movs	r0, #11
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	f3af 8000 	nop.w
	...

0800ad50 <rclc_support_init_with_options>:
 800ad50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad54:	b083      	sub	sp, #12
 800ad56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ad58:	b340      	cbz	r0, 800adac <rclc_support_init_with_options+0x5c>
 800ad5a:	461d      	mov	r5, r3
 800ad5c:	b333      	cbz	r3, 800adac <rclc_support_init_with_options+0x5c>
 800ad5e:	b32e      	cbz	r6, 800adac <rclc_support_init_with_options+0x5c>
 800ad60:	46e9      	mov	r9, sp
 800ad62:	4604      	mov	r4, r0
 800ad64:	4648      	mov	r0, r9
 800ad66:	460f      	mov	r7, r1
 800ad68:	4690      	mov	r8, r2
 800ad6a:	f005 fcdb 	bl	8010724 <rcl_get_zero_initialized_context>
 800ad6e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ad72:	462a      	mov	r2, r5
 800ad74:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad78:	4623      	mov	r3, r4
 800ad7a:	4641      	mov	r1, r8
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f005 fd41 	bl	8010804 <rcl_init>
 800ad82:	4605      	mov	r5, r0
 800ad84:	b960      	cbnz	r0, 800ada0 <rclc_support_init_with_options+0x50>
 800ad86:	60a6      	str	r6, [r4, #8]
 800ad88:	4632      	mov	r2, r6
 800ad8a:	f104 010c 	add.w	r1, r4, #12
 800ad8e:	2003      	movs	r0, #3
 800ad90:	f006 fc1c 	bl	80115cc <rcl_clock_init>
 800ad94:	4605      	mov	r5, r0
 800ad96:	b918      	cbnz	r0, 800ada0 <rclc_support_init_with_options+0x50>
 800ad98:	4628      	mov	r0, r5
 800ad9a:	b003      	add	sp, #12
 800ad9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ada0:	f000 f97a 	bl	800b098 <rcutils_reset_error>
 800ada4:	4628      	mov	r0, r5
 800ada6:	b003      	add	sp, #12
 800ada8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adac:	250b      	movs	r5, #11
 800adae:	4628      	mov	r0, r5
 800adb0:	b003      	add	sp, #12
 800adb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adb6:	bf00      	nop

0800adb8 <rclc_node_init_default>:
 800adb8:	b3b8      	cbz	r0, 800ae2a <rclc_node_init_default+0x72>
 800adba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adbe:	460d      	mov	r5, r1
 800adc0:	b0a1      	sub	sp, #132	@ 0x84
 800adc2:	b329      	cbz	r1, 800ae10 <rclc_node_init_default+0x58>
 800adc4:	4616      	mov	r6, r2
 800adc6:	b31a      	cbz	r2, 800ae10 <rclc_node_init_default+0x58>
 800adc8:	461f      	mov	r7, r3
 800adca:	b30b      	cbz	r3, 800ae10 <rclc_node_init_default+0x58>
 800adcc:	f10d 0810 	add.w	r8, sp, #16
 800add0:	4604      	mov	r4, r0
 800add2:	4640      	mov	r0, r8
 800add4:	f005 fe3c 	bl	8010a50 <rcl_get_zero_initialized_node>
 800add8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800addc:	f10d 0918 	add.w	r9, sp, #24
 800ade0:	e884 0003 	stmia.w	r4, {r0, r1}
 800ade4:	4648      	mov	r0, r9
 800ade6:	f005 ffab 	bl	8010d40 <rcl_node_get_default_options>
 800adea:	4640      	mov	r0, r8
 800adec:	f005 fe30 	bl	8010a50 <rcl_get_zero_initialized_node>
 800adf0:	f8cd 9000 	str.w	r9, [sp]
 800adf4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800adf8:	463b      	mov	r3, r7
 800adfa:	e884 0003 	stmia.w	r4, {r0, r1}
 800adfe:	4632      	mov	r2, r6
 800ae00:	4629      	mov	r1, r5
 800ae02:	4620      	mov	r0, r4
 800ae04:	f005 fe2e 	bl	8010a64 <rcl_node_init>
 800ae08:	b930      	cbnz	r0, 800ae18 <rclc_node_init_default+0x60>
 800ae0a:	b021      	add	sp, #132	@ 0x84
 800ae0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae10:	200b      	movs	r0, #11
 800ae12:	b021      	add	sp, #132	@ 0x84
 800ae14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae18:	9003      	str	r0, [sp, #12]
 800ae1a:	f000 f93d 	bl	800b098 <rcutils_reset_error>
 800ae1e:	f000 f93b 	bl	800b098 <rcutils_reset_error>
 800ae22:	9803      	ldr	r0, [sp, #12]
 800ae24:	b021      	add	sp, #132	@ 0x84
 800ae26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	200b      	movs	r0, #11
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop

0800ae30 <rclc_publisher_init_default>:
 800ae30:	b368      	cbz	r0, 800ae8e <rclc_publisher_init_default+0x5e>
 800ae32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae36:	460d      	mov	r5, r1
 800ae38:	b0a0      	sub	sp, #128	@ 0x80
 800ae3a:	b321      	cbz	r1, 800ae86 <rclc_publisher_init_default+0x56>
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	b312      	cbz	r2, 800ae86 <rclc_publisher_init_default+0x56>
 800ae40:	461f      	mov	r7, r3
 800ae42:	b303      	cbz	r3, 800ae86 <rclc_publisher_init_default+0x56>
 800ae44:	4604      	mov	r4, r0
 800ae46:	f7fe ffeb 	bl	8009e20 <rcl_get_zero_initialized_publisher>
 800ae4a:	f10d 0810 	add.w	r8, sp, #16
 800ae4e:	6020      	str	r0, [r4, #0]
 800ae50:	4640      	mov	r0, r8
 800ae52:	f7ff f881 	bl	8009f58 <rcl_publisher_get_default_options>
 800ae56:	490f      	ldr	r1, [pc, #60]	@ (800ae94 <rclc_publisher_init_default+0x64>)
 800ae58:	2250      	movs	r2, #80	@ 0x50
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	f00b fcff 	bl	801685e <memcpy>
 800ae60:	f8cd 8000 	str.w	r8, [sp]
 800ae64:	463b      	mov	r3, r7
 800ae66:	4632      	mov	r2, r6
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f7fe ffde 	bl	8009e2c <rcl_publisher_init>
 800ae70:	b910      	cbnz	r0, 800ae78 <rclc_publisher_init_default+0x48>
 800ae72:	b020      	add	sp, #128	@ 0x80
 800ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae78:	9003      	str	r0, [sp, #12]
 800ae7a:	f000 f90d 	bl	800b098 <rcutils_reset_error>
 800ae7e:	9803      	ldr	r0, [sp, #12]
 800ae80:	b020      	add	sp, #128	@ 0x80
 800ae82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae86:	200b      	movs	r0, #11
 800ae88:	b020      	add	sp, #128	@ 0x80
 800ae8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae8e:	200b      	movs	r0, #11
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	08017c20 	.word	0x08017c20

0800ae98 <rclc_service_init_default>:
 800ae98:	b368      	cbz	r0, 800aef6 <rclc_service_init_default+0x5e>
 800ae9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9e:	460d      	mov	r5, r1
 800aea0:	b09e      	sub	sp, #120	@ 0x78
 800aea2:	b321      	cbz	r1, 800aeee <rclc_service_init_default+0x56>
 800aea4:	4616      	mov	r6, r2
 800aea6:	b312      	cbz	r2, 800aeee <rclc_service_init_default+0x56>
 800aea8:	461f      	mov	r7, r3
 800aeaa:	b303      	cbz	r3, 800aeee <rclc_service_init_default+0x56>
 800aeac:	4604      	mov	r4, r0
 800aeae:	f006 f917 	bl	80110e0 <rcl_get_zero_initialized_service>
 800aeb2:	f10d 0810 	add.w	r8, sp, #16
 800aeb6:	6020      	str	r0, [r4, #0]
 800aeb8:	4640      	mov	r0, r8
 800aeba:	f006 f99f 	bl	80111fc <rcl_service_get_default_options>
 800aebe:	490f      	ldr	r1, [pc, #60]	@ (800aefc <rclc_service_init_default+0x64>)
 800aec0:	2250      	movs	r2, #80	@ 0x50
 800aec2:	4640      	mov	r0, r8
 800aec4:	f00b fccb 	bl	801685e <memcpy>
 800aec8:	f8cd 8000 	str.w	r8, [sp]
 800aecc:	463b      	mov	r3, r7
 800aece:	4632      	mov	r2, r6
 800aed0:	4629      	mov	r1, r5
 800aed2:	4620      	mov	r0, r4
 800aed4:	f006 f90a 	bl	80110ec <rcl_service_init>
 800aed8:	b910      	cbnz	r0, 800aee0 <rclc_service_init_default+0x48>
 800aeda:	b01e      	add	sp, #120	@ 0x78
 800aedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee0:	9003      	str	r0, [sp, #12]
 800aee2:	f000 f8d9 	bl	800b098 <rcutils_reset_error>
 800aee6:	9803      	ldr	r0, [sp, #12]
 800aee8:	b01e      	add	sp, #120	@ 0x78
 800aeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeee:	200b      	movs	r0, #11
 800aef0:	b01e      	add	sp, #120	@ 0x78
 800aef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef6:	200b      	movs	r0, #11
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	08017c70 	.word	0x08017c70

0800af00 <rclc_subscription_init_default>:
 800af00:	b368      	cbz	r0, 800af5e <rclc_subscription_init_default+0x5e>
 800af02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af06:	460d      	mov	r5, r1
 800af08:	b0a0      	sub	sp, #128	@ 0x80
 800af0a:	b321      	cbz	r1, 800af56 <rclc_subscription_init_default+0x56>
 800af0c:	4616      	mov	r6, r2
 800af0e:	b312      	cbz	r2, 800af56 <rclc_subscription_init_default+0x56>
 800af10:	461f      	mov	r7, r3
 800af12:	b303      	cbz	r3, 800af56 <rclc_subscription_init_default+0x56>
 800af14:	4604      	mov	r4, r0
 800af16:	f006 f9fd 	bl	8011314 <rcl_get_zero_initialized_subscription>
 800af1a:	f10d 0810 	add.w	r8, sp, #16
 800af1e:	6020      	str	r0, [r4, #0]
 800af20:	4640      	mov	r0, r8
 800af22:	f006 faa5 	bl	8011470 <rcl_subscription_get_default_options>
 800af26:	490f      	ldr	r1, [pc, #60]	@ (800af64 <rclc_subscription_init_default+0x64>)
 800af28:	2250      	movs	r2, #80	@ 0x50
 800af2a:	4640      	mov	r0, r8
 800af2c:	f00b fc97 	bl	801685e <memcpy>
 800af30:	f8cd 8000 	str.w	r8, [sp]
 800af34:	463b      	mov	r3, r7
 800af36:	4632      	mov	r2, r6
 800af38:	4629      	mov	r1, r5
 800af3a:	4620      	mov	r0, r4
 800af3c:	f006 f9f0 	bl	8011320 <rcl_subscription_init>
 800af40:	b910      	cbnz	r0, 800af48 <rclc_subscription_init_default+0x48>
 800af42:	b020      	add	sp, #128	@ 0x80
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	9003      	str	r0, [sp, #12]
 800af4a:	f000 f8a5 	bl	800b098 <rcutils_reset_error>
 800af4e:	9803      	ldr	r0, [sp, #12]
 800af50:	b020      	add	sp, #128	@ 0x80
 800af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af56:	200b      	movs	r0, #11
 800af58:	b020      	add	sp, #128	@ 0x80
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	200b      	movs	r0, #11
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	08017cc0 	.word	0x08017cc0

0800af68 <rclc_timer_init_default>:
 800af68:	b360      	cbz	r0, 800afc4 <rclc_timer_init_default+0x5c>
 800af6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	460e      	mov	r6, r1
 800af70:	b08a      	sub	sp, #40	@ 0x28
 800af72:	b319      	cbz	r1, 800afbc <rclc_timer_init_default+0x54>
 800af74:	4690      	mov	r8, r2
 800af76:	461f      	mov	r7, r3
 800af78:	4605      	mov	r5, r0
 800af7a:	f006 fd05 	bl	8011988 <rcl_get_zero_initialized_timer>
 800af7e:	68b4      	ldr	r4, [r6, #8]
 800af80:	6028      	str	r0, [r5, #0]
 800af82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af84:	f10d 0c0c 	add.w	ip, sp, #12
 800af88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	f8cc 3000 	str.w	r3, [ip]
 800af92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af94:	9302      	str	r3, [sp, #8]
 800af96:	e9cd 8700 	strd	r8, r7, [sp]
 800af9a:	4628      	mov	r0, r5
 800af9c:	4632      	mov	r2, r6
 800af9e:	f106 010c 	add.w	r1, r6, #12
 800afa2:	f006 fcf9 	bl	8011998 <rcl_timer_init>
 800afa6:	b910      	cbnz	r0, 800afae <rclc_timer_init_default+0x46>
 800afa8:	b00a      	add	sp, #40	@ 0x28
 800afaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afae:	9009      	str	r0, [sp, #36]	@ 0x24
 800afb0:	f000 f872 	bl	800b098 <rcutils_reset_error>
 800afb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afb6:	b00a      	add	sp, #40	@ 0x28
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	200b      	movs	r0, #11
 800afbe:	b00a      	add	sp, #40	@ 0x28
 800afc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc4:	200b      	movs	r0, #11
 800afc6:	4770      	bx	lr

0800afc8 <__default_zero_allocate>:
 800afc8:	f00a bf96 	b.w	8015ef8 <calloc>

0800afcc <__default_reallocate>:
 800afcc:	f00b b922 	b.w	8016214 <realloc>

0800afd0 <__default_deallocate>:
 800afd0:	f00a bffe 	b.w	8015fd0 <free>

0800afd4 <__default_allocate>:
 800afd4:	f00a bff4 	b.w	8015fc0 <malloc>

0800afd8 <rcutils_get_zero_initialized_allocator>:
 800afd8:	b510      	push	{r4, lr}
 800afda:	4c05      	ldr	r4, [pc, #20]	@ (800aff0 <rcutils_get_zero_initialized_allocator+0x18>)
 800afdc:	4686      	mov	lr, r0
 800afde:	4684      	mov	ip, r0
 800afe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	f8cc 3000 	str.w	r3, [ip]
 800afec:	4670      	mov	r0, lr
 800afee:	bd10      	pop	{r4, pc}
 800aff0:	08017d10 	.word	0x08017d10

0800aff4 <rcutils_set_default_allocator>:
 800aff4:	b1a8      	cbz	r0, 800b022 <rcutils_set_default_allocator+0x2e>
 800aff6:	6802      	ldr	r2, [r0, #0]
 800aff8:	b1a2      	cbz	r2, 800b024 <rcutils_set_default_allocator+0x30>
 800affa:	6841      	ldr	r1, [r0, #4]
 800affc:	b1a1      	cbz	r1, 800b028 <rcutils_set_default_allocator+0x34>
 800affe:	b410      	push	{r4}
 800b000:	68c4      	ldr	r4, [r0, #12]
 800b002:	b164      	cbz	r4, 800b01e <rcutils_set_default_allocator+0x2a>
 800b004:	6880      	ldr	r0, [r0, #8]
 800b006:	b138      	cbz	r0, 800b018 <rcutils_set_default_allocator+0x24>
 800b008:	4b08      	ldr	r3, [pc, #32]	@ (800b02c <rcutils_set_default_allocator+0x38>)
 800b00a:	601a      	str	r2, [r3, #0]
 800b00c:	2200      	movs	r2, #0
 800b00e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b012:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b016:	2001      	movs	r0, #1
 800b018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b01c:	4770      	bx	lr
 800b01e:	4620      	mov	r0, r4
 800b020:	e7fa      	b.n	800b018 <rcutils_set_default_allocator+0x24>
 800b022:	4770      	bx	lr
 800b024:	4610      	mov	r0, r2
 800b026:	4770      	bx	lr
 800b028:	4608      	mov	r0, r1
 800b02a:	4770      	bx	lr
 800b02c:	200001a8 	.word	0x200001a8

0800b030 <rcutils_get_default_allocator>:
 800b030:	b510      	push	{r4, lr}
 800b032:	4c05      	ldr	r4, [pc, #20]	@ (800b048 <rcutils_get_default_allocator+0x18>)
 800b034:	4686      	mov	lr, r0
 800b036:	4684      	mov	ip, r0
 800b038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b03a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b03e:	6823      	ldr	r3, [r4, #0]
 800b040:	f8cc 3000 	str.w	r3, [ip]
 800b044:	4670      	mov	r0, lr
 800b046:	bd10      	pop	{r4, pc}
 800b048:	200001a8 	.word	0x200001a8

0800b04c <rcutils_allocator_is_valid>:
 800b04c:	b158      	cbz	r0, 800b066 <rcutils_allocator_is_valid+0x1a>
 800b04e:	6803      	ldr	r3, [r0, #0]
 800b050:	b143      	cbz	r3, 800b064 <rcutils_allocator_is_valid+0x18>
 800b052:	6843      	ldr	r3, [r0, #4]
 800b054:	b133      	cbz	r3, 800b064 <rcutils_allocator_is_valid+0x18>
 800b056:	68c3      	ldr	r3, [r0, #12]
 800b058:	b123      	cbz	r3, 800b064 <rcutils_allocator_is_valid+0x18>
 800b05a:	6880      	ldr	r0, [r0, #8]
 800b05c:	3800      	subs	r0, #0
 800b05e:	bf18      	it	ne
 800b060:	2001      	movne	r0, #1
 800b062:	4770      	bx	lr
 800b064:	4618      	mov	r0, r3
 800b066:	4770      	bx	lr

0800b068 <rcutils_get_error_string>:
 800b068:	4b06      	ldr	r3, [pc, #24]	@ (800b084 <rcutils_get_error_string+0x1c>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b13b      	cbz	r3, 800b07e <rcutils_get_error_string+0x16>
 800b06e:	4b06      	ldr	r3, [pc, #24]	@ (800b088 <rcutils_get_error_string+0x20>)
 800b070:	781a      	ldrb	r2, [r3, #0]
 800b072:	b90a      	cbnz	r2, 800b078 <rcutils_get_error_string+0x10>
 800b074:	2201      	movs	r2, #1
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	4b04      	ldr	r3, [pc, #16]	@ (800b08c <rcutils_get_error_string+0x24>)
 800b07a:	7818      	ldrb	r0, [r3, #0]
 800b07c:	4770      	bx	lr
 800b07e:	4b04      	ldr	r3, [pc, #16]	@ (800b090 <rcutils_get_error_string+0x28>)
 800b080:	7818      	ldrb	r0, [r3, #0]
 800b082:	4770      	bx	lr
 800b084:	200062c0 	.word	0x200062c0
 800b088:	200062d9 	.word	0x200062d9
 800b08c:	200062d8 	.word	0x200062d8
 800b090:	080178d4 	.word	0x080178d4
 800b094:	00000000 	.word	0x00000000

0800b098 <rcutils_reset_error>:
 800b098:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b0b8 <rcutils_reset_error+0x20>
 800b09c:	4a08      	ldr	r2, [pc, #32]	@ (800b0c0 <rcutils_reset_error+0x28>)
 800b09e:	4809      	ldr	r0, [pc, #36]	@ (800b0c4 <rcutils_reset_error+0x2c>)
 800b0a0:	4909      	ldr	r1, [pc, #36]	@ (800b0c8 <rcutils_reset_error+0x30>)
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	8013      	strh	r3, [r2, #0]
 800b0a6:	ed82 7b02 	vstr	d7, [r2, #8]
 800b0aa:	4a08      	ldr	r2, [pc, #32]	@ (800b0cc <rcutils_reset_error+0x34>)
 800b0ac:	7003      	strb	r3, [r0, #0]
 800b0ae:	700b      	strb	r3, [r1, #0]
 800b0b0:	7013      	strb	r3, [r2, #0]
 800b0b2:	4770      	bx	lr
 800b0b4:	f3af 8000 	nop.w
	...
 800b0c0:	200062c8 	.word	0x200062c8
 800b0c4:	200062d9 	.word	0x200062d9
 800b0c8:	200062d8 	.word	0x200062d8
 800b0cc:	200062c0 	.word	0x200062c0

0800b0d0 <rcutils_system_time_now>:
 800b0d0:	b308      	cbz	r0, 800b116 <rcutils_system_time_now+0x46>
 800b0d2:	b570      	push	{r4, r5, r6, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4669      	mov	r1, sp
 800b0da:	2001      	movs	r0, #1
 800b0dc:	f7f6 f950 	bl	8001380 <clock_gettime>
 800b0e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b0e4:	2d00      	cmp	r5, #0
 800b0e6:	db13      	blt.n	800b110 <rcutils_system_time_now+0x40>
 800b0e8:	9902      	ldr	r1, [sp, #8]
 800b0ea:	2900      	cmp	r1, #0
 800b0ec:	db0d      	blt.n	800b10a <rcutils_system_time_now+0x3a>
 800b0ee:	4e0b      	ldr	r6, [pc, #44]	@ (800b11c <rcutils_system_time_now+0x4c>)
 800b0f0:	fba3 3206 	umull	r3, r2, r3, r6
 800b0f4:	185b      	adds	r3, r3, r1
 800b0f6:	fb06 2205 	mla	r2, r6, r5, r2
 800b0fa:	f04f 0000 	mov.w	r0, #0
 800b0fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b102:	e9c4 3200 	strd	r3, r2, [r4]
 800b106:	b004      	add	sp, #16
 800b108:	bd70      	pop	{r4, r5, r6, pc}
 800b10a:	ea53 0205 	orrs.w	r2, r3, r5
 800b10e:	d1ee      	bne.n	800b0ee <rcutils_system_time_now+0x1e>
 800b110:	2002      	movs	r0, #2
 800b112:	b004      	add	sp, #16
 800b114:	bd70      	pop	{r4, r5, r6, pc}
 800b116:	200b      	movs	r0, #11
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	3b9aca00 	.word	0x3b9aca00

0800b120 <rcutils_steady_time_now>:
 800b120:	b308      	cbz	r0, 800b166 <rcutils_steady_time_now+0x46>
 800b122:	b570      	push	{r4, r5, r6, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	4604      	mov	r4, r0
 800b128:	4669      	mov	r1, sp
 800b12a:	2000      	movs	r0, #0
 800b12c:	f7f6 f928 	bl	8001380 <clock_gettime>
 800b130:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b134:	2d00      	cmp	r5, #0
 800b136:	db13      	blt.n	800b160 <rcutils_steady_time_now+0x40>
 800b138:	9902      	ldr	r1, [sp, #8]
 800b13a:	2900      	cmp	r1, #0
 800b13c:	db0d      	blt.n	800b15a <rcutils_steady_time_now+0x3a>
 800b13e:	4e0b      	ldr	r6, [pc, #44]	@ (800b16c <rcutils_steady_time_now+0x4c>)
 800b140:	fba3 3206 	umull	r3, r2, r3, r6
 800b144:	185b      	adds	r3, r3, r1
 800b146:	fb06 2205 	mla	r2, r6, r5, r2
 800b14a:	f04f 0000 	mov.w	r0, #0
 800b14e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b152:	e9c4 3200 	strd	r3, r2, [r4]
 800b156:	b004      	add	sp, #16
 800b158:	bd70      	pop	{r4, r5, r6, pc}
 800b15a:	ea53 0205 	orrs.w	r2, r3, r5
 800b15e:	d1ee      	bne.n	800b13e <rcutils_steady_time_now+0x1e>
 800b160:	2002      	movs	r0, #2
 800b162:	b004      	add	sp, #16
 800b164:	bd70      	pop	{r4, r5, r6, pc}
 800b166:	200b      	movs	r0, #11
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	3b9aca00 	.word	0x3b9aca00

0800b170 <rmw_get_zero_initialized_init_options>:
 800b170:	b510      	push	{r4, lr}
 800b172:	2238      	movs	r2, #56	@ 0x38
 800b174:	4604      	mov	r4, r0
 800b176:	2100      	movs	r1, #0
 800b178:	f00b faa8 	bl	80166cc <memset>
 800b17c:	f104 0010 	add.w	r0, r4, #16
 800b180:	f000 f80a 	bl	800b198 <rmw_get_default_security_options>
 800b184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b188:	60e3      	str	r3, [r4, #12]
 800b18a:	4620      	mov	r0, r4
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop

0800b190 <rmw_get_default_publisher_options>:
 800b190:	2200      	movs	r2, #0
 800b192:	6002      	str	r2, [r0, #0]
 800b194:	7102      	strb	r2, [r0, #4]
 800b196:	4770      	bx	lr

0800b198 <rmw_get_default_security_options>:
 800b198:	2200      	movs	r2, #0
 800b19a:	7002      	strb	r2, [r0, #0]
 800b19c:	6042      	str	r2, [r0, #4]
 800b19e:	4770      	bx	lr

0800b1a0 <rmw_uros_set_custom_transport>:
 800b1a0:	b470      	push	{r4, r5, r6}
 800b1a2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b1a6:	b162      	cbz	r2, 800b1c2 <rmw_uros_set_custom_transport+0x22>
 800b1a8:	b15b      	cbz	r3, 800b1c2 <rmw_uros_set_custom_transport+0x22>
 800b1aa:	b155      	cbz	r5, 800b1c2 <rmw_uros_set_custom_transport+0x22>
 800b1ac:	b14e      	cbz	r6, 800b1c2 <rmw_uros_set_custom_transport+0x22>
 800b1ae:	4c06      	ldr	r4, [pc, #24]	@ (800b1c8 <rmw_uros_set_custom_transport+0x28>)
 800b1b0:	7020      	strb	r0, [r4, #0]
 800b1b2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b1b6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b1ba:	6166      	str	r6, [r4, #20]
 800b1bc:	2000      	movs	r0, #0
 800b1be:	bc70      	pop	{r4, r5, r6}
 800b1c0:	4770      	bx	lr
 800b1c2:	200b      	movs	r0, #11
 800b1c4:	bc70      	pop	{r4, r5, r6}
 800b1c6:	4770      	bx	lr
 800b1c8:	200062dc 	.word	0x200062dc

0800b1cc <rmw_init_options_init>:
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1d0:	b083      	sub	sp, #12
 800b1d2:	ad09      	add	r5, sp, #36	@ 0x24
 800b1d4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b1d8:	b130      	cbz	r0, 800b1e8 <rmw_init_options_init+0x1c>
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4628      	mov	r0, r5
 800b1de:	f7ff ff35 	bl	800b04c <rcutils_allocator_is_valid>
 800b1e2:	b108      	cbz	r0, 800b1e8 <rmw_init_options_init+0x1c>
 800b1e4:	68a6      	ldr	r6, [r4, #8]
 800b1e6:	b12e      	cbz	r6, 800b1f4 <rmw_init_options_init+0x28>
 800b1e8:	200b      	movs	r0, #11
 800b1ea:	b003      	add	sp, #12
 800b1ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b1f0:	b004      	add	sp, #16
 800b1f2:	4770      	bx	lr
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e9c4 2300 	strd	r2, r3, [r4]
 800b1fc:	4b22      	ldr	r3, [pc, #136]	@ (800b288 <rmw_init_options_init+0xbc>)
 800b1fe:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800b298 <rmw_init_options_init+0xcc>
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60a3      	str	r3, [r4, #8]
 800b206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b208:	f104 0c20 	add.w	ip, r4, #32
 800b20c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b210:	466f      	mov	r7, sp
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	f8cc 3000 	str.w	r3, [ip]
 800b218:	4638      	mov	r0, r7
 800b21a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800b21e:	60e6      	str	r6, [r4, #12]
 800b220:	f7ff ffba 	bl	800b198 <rmw_get_default_security_options>
 800b224:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b228:	f104 0310 	add.w	r3, r4, #16
 800b22c:	e883 0003 	stmia.w	r3, {r0, r1}
 800b230:	2203      	movs	r2, #3
 800b232:	4816      	ldr	r0, [pc, #88]	@ (800b28c <rmw_init_options_init+0xc0>)
 800b234:	4916      	ldr	r1, [pc, #88]	@ (800b290 <rmw_init_options_init+0xc4>)
 800b236:	7626      	strb	r6, [r4, #24]
 800b238:	f001 f880 	bl	800c33c <rmw_uxrce_init_init_options_impl_memory>
 800b23c:	4813      	ldr	r0, [pc, #76]	@ (800b28c <rmw_init_options_init+0xc0>)
 800b23e:	f008 ff4f 	bl	80140e0 <get_memory>
 800b242:	b1f0      	cbz	r0, 800b282 <rmw_init_options_init+0xb6>
 800b244:	4a13      	ldr	r2, [pc, #76]	@ (800b294 <rmw_init_options_init+0xc8>)
 800b246:	6883      	ldr	r3, [r0, #8]
 800b248:	6851      	ldr	r1, [r2, #4]
 800b24a:	7810      	ldrb	r0, [r2, #0]
 800b24c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b24e:	7418      	strb	r0, [r3, #16]
 800b250:	6159      	str	r1, [r3, #20]
 800b252:	68d1      	ldr	r1, [r2, #12]
 800b254:	61d9      	str	r1, [r3, #28]
 800b256:	6911      	ldr	r1, [r2, #16]
 800b258:	6219      	str	r1, [r3, #32]
 800b25a:	6951      	ldr	r1, [r2, #20]
 800b25c:	6892      	ldr	r2, [r2, #8]
 800b25e:	619a      	str	r2, [r3, #24]
 800b260:	6259      	str	r1, [r3, #36]	@ 0x24
 800b262:	f003 ff5f 	bl	800f124 <uxr_nanos>
 800b266:	f00a ff69 	bl	801613c <srand>
 800b26a:	f00a ff95 	bl	8016198 <rand>
 800b26e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b270:	6298      	str	r0, [r3, #40]	@ 0x28
 800b272:	2800      	cmp	r0, #0
 800b274:	d0f9      	beq.n	800b26a <rmw_init_options_init+0x9e>
 800b276:	2000      	movs	r0, #0
 800b278:	b003      	add	sp, #12
 800b27a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b27e:	b004      	add	sp, #16
 800b280:	4770      	bx	lr
 800b282:	2001      	movs	r0, #1
 800b284:	e7b1      	b.n	800b1ea <rmw_init_options_init+0x1e>
 800b286:	bf00      	nop
 800b288:	080186c0 	.word	0x080186c0
 800b28c:	2000ad34 	.word	0x2000ad34
 800b290:	200065d0 	.word	0x200065d0
 800b294:	200062dc 	.word	0x200062dc
 800b298:	08017d24 	.word	0x08017d24

0800b29c <rmw_init_options_copy>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	b158      	cbz	r0, 800b2b8 <rmw_init_options_copy+0x1c>
 800b2a0:	460d      	mov	r5, r1
 800b2a2:	b149      	cbz	r1, 800b2b8 <rmw_init_options_copy+0x1c>
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	6880      	ldr	r0, [r0, #8]
 800b2a8:	b120      	cbz	r0, 800b2b4 <rmw_init_options_copy+0x18>
 800b2aa:	4b1e      	ldr	r3, [pc, #120]	@ (800b324 <rmw_init_options_copy+0x88>)
 800b2ac:	6819      	ldr	r1, [r3, #0]
 800b2ae:	f7f4 ffb7 	bl	8000220 <strcmp>
 800b2b2:	bb90      	cbnz	r0, 800b31a <rmw_init_options_copy+0x7e>
 800b2b4:	68ab      	ldr	r3, [r5, #8]
 800b2b6:	b113      	cbz	r3, 800b2be <rmw_init_options_copy+0x22>
 800b2b8:	250b      	movs	r5, #11
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	bd70      	pop	{r4, r5, r6, pc}
 800b2be:	4623      	mov	r3, r4
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800b2c6:	f8d3 c000 	ldr.w	ip, [r3]
 800b2ca:	6858      	ldr	r0, [r3, #4]
 800b2cc:	6899      	ldr	r1, [r3, #8]
 800b2ce:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b2d2:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b2d6:	3310      	adds	r3, #16
 800b2d8:	42b3      	cmp	r3, r6
 800b2da:	f8c2 c000 	str.w	ip, [r2]
 800b2de:	6050      	str	r0, [r2, #4]
 800b2e0:	6091      	str	r1, [r2, #8]
 800b2e2:	f102 0210 	add.w	r2, r2, #16
 800b2e6:	d1ee      	bne.n	800b2c6 <rmw_init_options_copy+0x2a>
 800b2e8:	6819      	ldr	r1, [r3, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	480e      	ldr	r0, [pc, #56]	@ (800b328 <rmw_init_options_copy+0x8c>)
 800b2ee:	6053      	str	r3, [r2, #4]
 800b2f0:	6011      	str	r1, [r2, #0]
 800b2f2:	f008 fef5 	bl	80140e0 <get_memory>
 800b2f6:	b198      	cbz	r0, 800b320 <rmw_init_options_copy+0x84>
 800b2f8:	6883      	ldr	r3, [r0, #8]
 800b2fa:	636b      	str	r3, [r5, #52]	@ 0x34
 800b2fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b2fe:	f102 0c10 	add.w	ip, r2, #16
 800b302:	f103 0410 	add.w	r4, r3, #16
 800b306:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b30a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b30c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b310:	2500      	movs	r5, #0
 800b312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b316:	4628      	mov	r0, r5
 800b318:	bd70      	pop	{r4, r5, r6, pc}
 800b31a:	250c      	movs	r5, #12
 800b31c:	4628      	mov	r0, r5
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	2501      	movs	r5, #1
 800b322:	e7ca      	b.n	800b2ba <rmw_init_options_copy+0x1e>
 800b324:	080186c0 	.word	0x080186c0
 800b328:	2000ad34 	.word	0x2000ad34

0800b32c <rmw_init_options_fini>:
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d03d      	beq.n	800b3ac <rmw_init_options_fini+0x80>
 800b330:	b510      	push	{r4, lr}
 800b332:	4604      	mov	r4, r0
 800b334:	b08e      	sub	sp, #56	@ 0x38
 800b336:	3020      	adds	r0, #32
 800b338:	f7ff fe88 	bl	800b04c <rcutils_allocator_is_valid>
 800b33c:	b360      	cbz	r0, 800b398 <rmw_init_options_fini+0x6c>
 800b33e:	68a0      	ldr	r0, [r4, #8]
 800b340:	b120      	cbz	r0, 800b34c <rmw_init_options_fini+0x20>
 800b342:	4b1c      	ldr	r3, [pc, #112]	@ (800b3b4 <rmw_init_options_fini+0x88>)
 800b344:	6819      	ldr	r1, [r3, #0]
 800b346:	f7f4 ff6b 	bl	8000220 <strcmp>
 800b34a:	bb68      	cbnz	r0, 800b3a8 <rmw_init_options_fini+0x7c>
 800b34c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3b8 <rmw_init_options_fini+0x8c>)
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	b331      	cbz	r1, 800b3a0 <rmw_init_options_fini+0x74>
 800b352:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b354:	e001      	b.n	800b35a <rmw_init_options_fini+0x2e>
 800b356:	6849      	ldr	r1, [r1, #4]
 800b358:	b311      	cbz	r1, 800b3a0 <rmw_init_options_fini+0x74>
 800b35a:	688b      	ldr	r3, [r1, #8]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d1fa      	bne.n	800b356 <rmw_init_options_fini+0x2a>
 800b360:	4815      	ldr	r0, [pc, #84]	@ (800b3b8 <rmw_init_options_fini+0x8c>)
 800b362:	f008 fecd 	bl	8014100 <put_memory>
 800b366:	4668      	mov	r0, sp
 800b368:	f7ff ff02 	bl	800b170 <rmw_get_zero_initialized_init_options>
 800b36c:	46ee      	mov	lr, sp
 800b36e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b372:	46a4      	mov	ip, r4
 800b374:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b378:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b37c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b380:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b384:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b388:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800b38c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800b390:	2300      	movs	r3, #0
 800b392:	4618      	mov	r0, r3
 800b394:	b00e      	add	sp, #56	@ 0x38
 800b396:	bd10      	pop	{r4, pc}
 800b398:	230b      	movs	r3, #11
 800b39a:	4618      	mov	r0, r3
 800b39c:	b00e      	add	sp, #56	@ 0x38
 800b39e:	bd10      	pop	{r4, pc}
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	b00e      	add	sp, #56	@ 0x38
 800b3a6:	bd10      	pop	{r4, pc}
 800b3a8:	230c      	movs	r3, #12
 800b3aa:	e7f2      	b.n	800b392 <rmw_init_options_fini+0x66>
 800b3ac:	230b      	movs	r3, #11
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	080186c0 	.word	0x080186c0
 800b3b8:	2000ad34 	.word	0x2000ad34

0800b3bc <rmw_init>:
 800b3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c0:	b083      	sub	sp, #12
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	f000 80d3 	beq.w	800b56e <rmw_init+0x1b2>
 800b3c8:	460e      	mov	r6, r1
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	f000 80cf 	beq.w	800b56e <rmw_init+0x1b2>
 800b3d0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 80ca 	beq.w	800b56e <rmw_init+0x1b2>
 800b3da:	4b78      	ldr	r3, [pc, #480]	@ (800b5bc <rmw_init+0x200>)
 800b3dc:	6880      	ldr	r0, [r0, #8]
 800b3de:	681f      	ldr	r7, [r3, #0]
 800b3e0:	b128      	cbz	r0, 800b3ee <rmw_init+0x32>
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	f7f4 ff1c 	bl	8000220 <strcmp>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	f040 80ca 	bne.w	800b582 <rmw_init+0x1c6>
 800b3ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3f2:	4c73      	ldr	r4, [pc, #460]	@ (800b5c0 <rmw_init+0x204>)
 800b3f4:	4973      	ldr	r1, [pc, #460]	@ (800b5c4 <rmw_init+0x208>)
 800b3f6:	4874      	ldr	r0, [pc, #464]	@ (800b5c8 <rmw_init+0x20c>)
 800b3f8:	60b7      	str	r7, [r6, #8]
 800b3fa:	e9c6 2300 	strd	r2, r3, [r6]
 800b3fe:	68eb      	ldr	r3, [r5, #12]
 800b400:	64b3      	str	r3, [r6, #72]	@ 0x48
 800b402:	2201      	movs	r2, #1
 800b404:	f000 ff3a 	bl	800c27c <rmw_uxrce_init_session_memory>
 800b408:	4620      	mov	r0, r4
 800b40a:	4970      	ldr	r1, [pc, #448]	@ (800b5cc <rmw_init+0x210>)
 800b40c:	2204      	movs	r2, #4
 800b40e:	f000 ff75 	bl	800c2fc <rmw_uxrce_init_static_input_buffer_memory>
 800b412:	f04f 0800 	mov.w	r8, #0
 800b416:	486c      	ldr	r0, [pc, #432]	@ (800b5c8 <rmw_init+0x20c>)
 800b418:	f884 800d 	strb.w	r8, [r4, #13]
 800b41c:	f008 fe60 	bl	80140e0 <get_memory>
 800b420:	2800      	cmp	r0, #0
 800b422:	f000 80a9 	beq.w	800b578 <rmw_init+0x1bc>
 800b426:	6884      	ldr	r4, [r0, #8]
 800b428:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800b42a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800b42c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800b430:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b434:	9101      	str	r1, [sp, #4]
 800b436:	6a00      	ldr	r0, [r0, #32]
 800b438:	9000      	str	r0, [sp, #0]
 800b43a:	f104 0910 	add.w	r9, r4, #16
 800b43e:	4661      	mov	r1, ip
 800b440:	4648      	mov	r0, r9
 800b442:	f001 fe0b 	bl	800d05c <uxr_set_custom_transport_callbacks>
 800b446:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800b44a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b44e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800b452:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800b456:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800b45a:	495d      	ldr	r1, [pc, #372]	@ (800b5d0 <rmw_init+0x214>)
 800b45c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800b460:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800b464:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800b468:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800b46c:	4859      	ldr	r0, [pc, #356]	@ (800b5d4 <rmw_init+0x218>)
 800b46e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800b472:	2201      	movs	r2, #1
 800b474:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800b476:	f000 fee1 	bl	800c23c <rmw_uxrce_init_node_memory>
 800b47a:	4957      	ldr	r1, [pc, #348]	@ (800b5d8 <rmw_init+0x21c>)
 800b47c:	4857      	ldr	r0, [pc, #348]	@ (800b5dc <rmw_init+0x220>)
 800b47e:	2205      	movs	r2, #5
 800b480:	f000 febc 	bl	800c1fc <rmw_uxrce_init_subscription_memory>
 800b484:	4956      	ldr	r1, [pc, #344]	@ (800b5e0 <rmw_init+0x224>)
 800b486:	4857      	ldr	r0, [pc, #348]	@ (800b5e4 <rmw_init+0x228>)
 800b488:	220a      	movs	r2, #10
 800b48a:	f000 fe97 	bl	800c1bc <rmw_uxrce_init_publisher_memory>
 800b48e:	4956      	ldr	r1, [pc, #344]	@ (800b5e8 <rmw_init+0x22c>)
 800b490:	4856      	ldr	r0, [pc, #344]	@ (800b5ec <rmw_init+0x230>)
 800b492:	2201      	movs	r2, #1
 800b494:	f000 fe52 	bl	800c13c <rmw_uxrce_init_service_memory>
 800b498:	4955      	ldr	r1, [pc, #340]	@ (800b5f0 <rmw_init+0x234>)
 800b49a:	4856      	ldr	r0, [pc, #344]	@ (800b5f4 <rmw_init+0x238>)
 800b49c:	2201      	movs	r2, #1
 800b49e:	f000 fe6d 	bl	800c17c <rmw_uxrce_init_client_memory>
 800b4a2:	4955      	ldr	r1, [pc, #340]	@ (800b5f8 <rmw_init+0x23c>)
 800b4a4:	4855      	ldr	r0, [pc, #340]	@ (800b5fc <rmw_init+0x240>)
 800b4a6:	220f      	movs	r2, #15
 800b4a8:	f000 ff08 	bl	800c2bc <rmw_uxrce_init_topic_memory>
 800b4ac:	4954      	ldr	r1, [pc, #336]	@ (800b600 <rmw_init+0x244>)
 800b4ae:	4855      	ldr	r0, [pc, #340]	@ (800b604 <rmw_init+0x248>)
 800b4b0:	2203      	movs	r2, #3
 800b4b2:	f000 ff43 	bl	800c33c <rmw_uxrce_init_init_options_impl_memory>
 800b4b6:	4954      	ldr	r1, [pc, #336]	@ (800b608 <rmw_init+0x24c>)
 800b4b8:	4854      	ldr	r0, [pc, #336]	@ (800b60c <rmw_init+0x250>)
 800b4ba:	2204      	movs	r2, #4
 800b4bc:	f000 ff5e 	bl	800c37c <rmw_uxrce_init_wait_set_memory>
 800b4c0:	4953      	ldr	r1, [pc, #332]	@ (800b610 <rmw_init+0x254>)
 800b4c2:	4854      	ldr	r0, [pc, #336]	@ (800b614 <rmw_init+0x258>)
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	f000 ff79 	bl	800c3bc <rmw_uxrce_init_guard_condition_memory>
 800b4ca:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800b4cc:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800b4ce:	4642      	mov	r2, r8
 800b4d0:	f000 fe1c 	bl	800c10c <rmw_uxrce_transport_init>
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d158      	bne.n	800b58c <rmw_init+0x1d0>
 800b4da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b4dc:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800b4e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4e2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f001 ffee 	bl	800d4c8 <uxr_init_session>
 800b4ec:	494a      	ldr	r1, [pc, #296]	@ (800b618 <rmw_init+0x25c>)
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f002 f80d 	bl	800d510 <uxr_set_topic_callback>
 800b4f6:	4949      	ldr	r1, [pc, #292]	@ (800b61c <rmw_init+0x260>)
 800b4f8:	463a      	mov	r2, r7
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f002 f804 	bl	800d508 <uxr_set_status_callback>
 800b500:	4947      	ldr	r1, [pc, #284]	@ (800b620 <rmw_init+0x264>)
 800b502:	463a      	mov	r2, r7
 800b504:	4628      	mov	r0, r5
 800b506:	f002 f807 	bl	800d518 <uxr_set_request_callback>
 800b50a:	4946      	ldr	r1, [pc, #280]	@ (800b624 <rmw_init+0x268>)
 800b50c:	463a      	mov	r2, r7
 800b50e:	4628      	mov	r0, r5
 800b510:	f002 f806 	bl	800d520 <uxr_set_reply_callback>
 800b514:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b518:	2304      	movs	r3, #4
 800b51a:	0092      	lsls	r2, r2, #2
 800b51c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800b520:	4628      	mov	r0, r5
 800b522:	f002 f83b 	bl	800d59c <uxr_create_input_reliable_stream>
 800b526:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b52a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800b52e:	0092      	lsls	r2, r2, #2
 800b530:	2304      	movs	r3, #4
 800b532:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800b536:	4628      	mov	r0, r5
 800b538:	f002 f808 	bl	800d54c <uxr_create_output_reliable_stream>
 800b53c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800b540:	4628      	mov	r0, r5
 800b542:	f002 f825 	bl	800d590 <uxr_create_input_best_effort_stream>
 800b546:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800b54a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800b54e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800b552:	3114      	adds	r1, #20
 800b554:	4628      	mov	r0, r5
 800b556:	f001 ffe7 	bl	800d528 <uxr_create_output_best_effort_stream>
 800b55a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800b55e:	4628      	mov	r0, r5
 800b560:	f002 fd72 	bl	800e048 <uxr_create_session>
 800b564:	b1f8      	cbz	r0, 800b5a6 <rmw_init+0x1ea>
 800b566:	4638      	mov	r0, r7
 800b568:	b003      	add	sp, #12
 800b56a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b56e:	270b      	movs	r7, #11
 800b570:	4638      	mov	r0, r7
 800b572:	b003      	add	sp, #12
 800b574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b578:	2701      	movs	r7, #1
 800b57a:	4638      	mov	r0, r7
 800b57c:	b003      	add	sp, #12
 800b57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b582:	270c      	movs	r7, #12
 800b584:	4638      	mov	r0, r7
 800b586:	b003      	add	sp, #12
 800b588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b58c:	4648      	mov	r0, r9
 800b58e:	f001 fda7 	bl	800d0e0 <uxr_close_custom_transport>
 800b592:	480d      	ldr	r0, [pc, #52]	@ (800b5c8 <rmw_init+0x20c>)
 800b594:	4621      	mov	r1, r4
 800b596:	f008 fdb3 	bl	8014100 <put_memory>
 800b59a:	4638      	mov	r0, r7
 800b59c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800b5a0:	b003      	add	sp, #12
 800b5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5a6:	4648      	mov	r0, r9
 800b5a8:	f001 fd9a 	bl	800d0e0 <uxr_close_custom_transport>
 800b5ac:	4806      	ldr	r0, [pc, #24]	@ (800b5c8 <rmw_init+0x20c>)
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	f008 fda6 	bl	8014100 <put_memory>
 800b5b4:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800b5b6:	2701      	movs	r7, #1
 800b5b8:	e7d5      	b.n	800b566 <rmw_init+0x1aa>
 800b5ba:	bf00      	nop
 800b5bc:	080186c0 	.word	0x080186c0
 800b5c0:	2000ad84 	.word	0x2000ad84
 800b5c4:	20007030 	.word	0x20007030
 800b5c8:	2000ad74 	.word	0x2000ad74
 800b5cc:	200085d8 	.word	0x200085d8
 800b5d0:	20006654 	.word	0x20006654
 800b5d4:	2000ad44 	.word	0x2000ad44
 800b5d8:	2000a6d8 	.word	0x2000a6d8
 800b5dc:	2000ad94 	.word	0x2000ad94
 800b5e0:	200066f8 	.word	0x200066f8
 800b5e4:	2000ad54 	.word	0x2000ad54
 800b5e8:	20006f68 	.word	0x20006f68
 800b5ec:	2000ad64 	.word	0x2000ad64
 800b5f0:	20006488 	.word	0x20006488
 800b5f4:	20006474 	.word	0x20006474
 800b5f8:	2000ab10 	.word	0x2000ab10
 800b5fc:	2000ada4 	.word	0x2000ada4
 800b600:	200065d0 	.word	0x200065d0
 800b604:	2000ad34 	.word	0x2000ad34
 800b608:	2000acb4 	.word	0x2000acb4
 800b60c:	2000adb4 	.word	0x2000adb4
 800b610:	20006550 	.word	0x20006550
 800b614:	2000ad24 	.word	0x2000ad24
 800b618:	08013f19 	.word	0x08013f19
 800b61c:	08013f11 	.word	0x08013f11
 800b620:	08013fb1 	.word	0x08013fb1
 800b624:	0801404d 	.word	0x0801404d

0800b628 <rmw_context_fini>:
 800b628:	4b17      	ldr	r3, [pc, #92]	@ (800b688 <rmw_context_fini+0x60>)
 800b62a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800b62c:	b570      	push	{r4, r5, r6, lr}
 800b62e:	681c      	ldr	r4, [r3, #0]
 800b630:	4605      	mov	r5, r0
 800b632:	b334      	cbz	r4, 800b682 <rmw_context_fini+0x5a>
 800b634:	2600      	movs	r6, #0
 800b636:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800b63a:	6902      	ldr	r2, [r0, #16]
 800b63c:	428a      	cmp	r2, r1
 800b63e:	d018      	beq.n	800b672 <rmw_context_fini+0x4a>
 800b640:	2c00      	cmp	r4, #0
 800b642:	d1f8      	bne.n	800b636 <rmw_context_fini+0xe>
 800b644:	b189      	cbz	r1, 800b66a <rmw_context_fini+0x42>
 800b646:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800b64a:	789b      	ldrb	r3, [r3, #2]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800b652:	bf14      	ite	ne
 800b654:	210a      	movne	r1, #10
 800b656:	2100      	moveq	r1, #0
 800b658:	f002 fcce 	bl	800dff8 <uxr_delete_session_retries>
 800b65c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b65e:	f000 fecd 	bl	800c3fc <rmw_uxrce_fini_session_memory>
 800b662:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800b664:	3010      	adds	r0, #16
 800b666:	f001 fd3b 	bl	800d0e0 <uxr_close_custom_transport>
 800b66a:	2300      	movs	r3, #0
 800b66c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800b66e:	4630      	mov	r0, r6
 800b670:	bd70      	pop	{r4, r5, r6, pc}
 800b672:	3018      	adds	r0, #24
 800b674:	f000 f89c 	bl	800b7b0 <rmw_destroy_node>
 800b678:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b67a:	4606      	mov	r6, r0
 800b67c:	2c00      	cmp	r4, #0
 800b67e:	d1da      	bne.n	800b636 <rmw_context_fini+0xe>
 800b680:	e7e0      	b.n	800b644 <rmw_context_fini+0x1c>
 800b682:	4626      	mov	r6, r4
 800b684:	e7de      	b.n	800b644 <rmw_context_fini+0x1c>
 800b686:	bf00      	nop
 800b688:	2000ad44 	.word	0x2000ad44

0800b68c <create_node>:
 800b68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b690:	b083      	sub	sp, #12
 800b692:	2b00      	cmp	r3, #0
 800b694:	d05f      	beq.n	800b756 <create_node+0xca>
 800b696:	4606      	mov	r6, r0
 800b698:	4835      	ldr	r0, [pc, #212]	@ (800b770 <create_node+0xe4>)
 800b69a:	460f      	mov	r7, r1
 800b69c:	4690      	mov	r8, r2
 800b69e:	461d      	mov	r5, r3
 800b6a0:	f008 fd1e 	bl	80140e0 <get_memory>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d056      	beq.n	800b756 <create_node+0xca>
 800b6a8:	6884      	ldr	r4, [r0, #8]
 800b6aa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b6ac:	6123      	str	r3, [r4, #16]
 800b6ae:	f008 fd7f 	bl	80141b0 <rmw_get_implementation_identifier>
 800b6b2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800b6b6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b6ba:	f8c4 9020 	str.w	r9, [r4, #32]
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7f4 fdb8 	bl	8000234 <strlen>
 800b6c4:	1c42      	adds	r2, r0, #1
 800b6c6:	2a3c      	cmp	r2, #60	@ 0x3c
 800b6c8:	f104 0518 	add.w	r5, r4, #24
 800b6cc:	d840      	bhi.n	800b750 <create_node+0xc4>
 800b6ce:	4648      	mov	r0, r9
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800b6d6:	f00b f8c2 	bl	801685e <memcpy>
 800b6da:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800b6de:	4638      	mov	r0, r7
 800b6e0:	f7f4 fda8 	bl	8000234 <strlen>
 800b6e4:	1c42      	adds	r2, r0, #1
 800b6e6:	2a3c      	cmp	r2, #60	@ 0x3c
 800b6e8:	d832      	bhi.n	800b750 <create_node+0xc4>
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	4648      	mov	r0, r9
 800b6ee:	f00b f8b6 	bl	801685e <memcpy>
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800b6fe:	1842      	adds	r2, r0, r1
 800b700:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800b704:	f001 fcf0 	bl	800d0e8 <uxr_object_id>
 800b708:	6160      	str	r0, [r4, #20]
 800b70a:	783b      	ldrb	r3, [r7, #0]
 800b70c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b70e:	d127      	bne.n	800b760 <create_node+0xd4>
 800b710:	787b      	ldrb	r3, [r7, #1]
 800b712:	bb2b      	cbnz	r3, 800b760 <create_node+0xd4>
 800b714:	4a17      	ldr	r2, [pc, #92]	@ (800b774 <create_node+0xe8>)
 800b716:	4818      	ldr	r0, [pc, #96]	@ (800b778 <create_node+0xec>)
 800b718:	4633      	mov	r3, r6
 800b71a:	213c      	movs	r1, #60	@ 0x3c
 800b71c:	f00a fefc 	bl	8016518 <sniprintf>
 800b720:	6920      	ldr	r0, [r4, #16]
 800b722:	4915      	ldr	r1, [pc, #84]	@ (800b778 <create_node+0xec>)
 800b724:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800b728:	9100      	str	r1, [sp, #0]
 800b72a:	2106      	movs	r1, #6
 800b72c:	9101      	str	r1, [sp, #4]
 800b72e:	6811      	ldr	r1, [r2, #0]
 800b730:	6962      	ldr	r2, [r4, #20]
 800b732:	fa1f f388 	uxth.w	r3, r8
 800b736:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b73a:	f001 fa23 	bl	800cb84 <uxr_buffer_create_participant_bin>
 800b73e:	4602      	mov	r2, r0
 800b740:	6920      	ldr	r0, [r4, #16]
 800b742:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b746:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b74a:	f000 ffcf 	bl	800c6ec <run_xrce_session>
 800b74e:	b918      	cbnz	r0, 800b758 <create_node+0xcc>
 800b750:	4628      	mov	r0, r5
 800b752:	f000 fe59 	bl	800c408 <rmw_uxrce_fini_node_memory>
 800b756:	2500      	movs	r5, #0
 800b758:	4628      	mov	r0, r5
 800b75a:	b003      	add	sp, #12
 800b75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b760:	4a06      	ldr	r2, [pc, #24]	@ (800b77c <create_node+0xf0>)
 800b762:	9600      	str	r6, [sp, #0]
 800b764:	463b      	mov	r3, r7
 800b766:	213c      	movs	r1, #60	@ 0x3c
 800b768:	4803      	ldr	r0, [pc, #12]	@ (800b778 <create_node+0xec>)
 800b76a:	f00a fed5 	bl	8016518 <sniprintf>
 800b76e:	e7d7      	b.n	800b720 <create_node+0x94>
 800b770:	2000ad44 	.word	0x2000ad44
 800b774:	08017d40 	.word	0x08017d40
 800b778:	200062f8 	.word	0x200062f8
 800b77c:	08017d28 	.word	0x08017d28

0800b780 <rmw_create_node>:
 800b780:	b199      	cbz	r1, 800b7aa <rmw_create_node+0x2a>
 800b782:	780b      	ldrb	r3, [r1, #0]
 800b784:	468c      	mov	ip, r1
 800b786:	b183      	cbz	r3, 800b7aa <rmw_create_node+0x2a>
 800b788:	b410      	push	{r4}
 800b78a:	4614      	mov	r4, r2
 800b78c:	b14a      	cbz	r2, 800b7a2 <rmw_create_node+0x22>
 800b78e:	7813      	ldrb	r3, [r2, #0]
 800b790:	b13b      	cbz	r3, 800b7a2 <rmw_create_node+0x22>
 800b792:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800b794:	4603      	mov	r3, r0
 800b796:	4621      	mov	r1, r4
 800b798:	4660      	mov	r0, ip
 800b79a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b79e:	f7ff bf75 	b.w	800b68c <create_node>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	2000      	movs	r0, #0
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop

0800b7b0 <rmw_destroy_node>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	b328      	cbz	r0, 800b800 <rmw_destroy_node+0x50>
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	6800      	ldr	r0, [r0, #0]
 800b7b8:	b120      	cbz	r0, 800b7c4 <rmw_destroy_node+0x14>
 800b7ba:	4b36      	ldr	r3, [pc, #216]	@ (800b894 <rmw_destroy_node+0xe4>)
 800b7bc:	6819      	ldr	r1, [r3, #0]
 800b7be:	f7f4 fd2f 	bl	8000220 <strcmp>
 800b7c2:	b9e8      	cbnz	r0, 800b800 <rmw_destroy_node+0x50>
 800b7c4:	687d      	ldr	r5, [r7, #4]
 800b7c6:	b1dd      	cbz	r5, 800b800 <rmw_destroy_node+0x50>
 800b7c8:	4b33      	ldr	r3, [pc, #204]	@ (800b898 <rmw_destroy_node+0xe8>)
 800b7ca:	681c      	ldr	r4, [r3, #0]
 800b7cc:	2c00      	cmp	r4, #0
 800b7ce:	d05f      	beq.n	800b890 <rmw_destroy_node+0xe0>
 800b7d0:	2600      	movs	r6, #0
 800b7d2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b7d6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800b7da:	429d      	cmp	r5, r3
 800b7dc:	d013      	beq.n	800b806 <rmw_destroy_node+0x56>
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	d1f7      	bne.n	800b7d2 <rmw_destroy_node+0x22>
 800b7e2:	4b2e      	ldr	r3, [pc, #184]	@ (800b89c <rmw_destroy_node+0xec>)
 800b7e4:	681c      	ldr	r4, [r3, #0]
 800b7e6:	b1c4      	cbz	r4, 800b81a <rmw_destroy_node+0x6a>
 800b7e8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b7ec:	6a0b      	ldr	r3, [r1, #32]
 800b7ee:	429d      	cmp	r5, r3
 800b7f0:	d1f9      	bne.n	800b7e6 <rmw_destroy_node+0x36>
 800b7f2:	317c      	adds	r1, #124	@ 0x7c
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	f000 fc29 	bl	800c04c <rmw_destroy_subscription>
 800b7fa:	2801      	cmp	r0, #1
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	d1f2      	bne.n	800b7e6 <rmw_destroy_node+0x36>
 800b800:	2601      	movs	r6, #1
 800b802:	4630      	mov	r0, r6
 800b804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b806:	3184      	adds	r1, #132	@ 0x84
 800b808:	4638      	mov	r0, r7
 800b80a:	f000 f9a5 	bl	800bb58 <rmw_destroy_publisher>
 800b80e:	2801      	cmp	r0, #1
 800b810:	4606      	mov	r6, r0
 800b812:	d0f5      	beq.n	800b800 <rmw_destroy_node+0x50>
 800b814:	2c00      	cmp	r4, #0
 800b816:	d1dc      	bne.n	800b7d2 <rmw_destroy_node+0x22>
 800b818:	e7e3      	b.n	800b7e2 <rmw_destroy_node+0x32>
 800b81a:	4b21      	ldr	r3, [pc, #132]	@ (800b8a0 <rmw_destroy_node+0xf0>)
 800b81c:	681c      	ldr	r4, [r3, #0]
 800b81e:	b16c      	cbz	r4, 800b83c <rmw_destroy_node+0x8c>
 800b820:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b824:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b826:	429d      	cmp	r5, r3
 800b828:	d1f9      	bne.n	800b81e <rmw_destroy_node+0x6e>
 800b82a:	317c      	adds	r1, #124	@ 0x7c
 800b82c:	4638      	mov	r0, r7
 800b82e:	f000 fab7 	bl	800bda0 <rmw_destroy_service>
 800b832:	2801      	cmp	r0, #1
 800b834:	4606      	mov	r6, r0
 800b836:	d0e3      	beq.n	800b800 <rmw_destroy_node+0x50>
 800b838:	2c00      	cmp	r4, #0
 800b83a:	d1f1      	bne.n	800b820 <rmw_destroy_node+0x70>
 800b83c:	4b19      	ldr	r3, [pc, #100]	@ (800b8a4 <rmw_destroy_node+0xf4>)
 800b83e:	681c      	ldr	r4, [r3, #0]
 800b840:	b16c      	cbz	r4, 800b85e <rmw_destroy_node+0xae>
 800b842:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b846:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b848:	429d      	cmp	r5, r3
 800b84a:	d1f9      	bne.n	800b840 <rmw_destroy_node+0x90>
 800b84c:	317c      	adds	r1, #124	@ 0x7c
 800b84e:	4638      	mov	r0, r7
 800b850:	f008 fc6a 	bl	8014128 <rmw_destroy_client>
 800b854:	2801      	cmp	r0, #1
 800b856:	4606      	mov	r6, r0
 800b858:	d0d2      	beq.n	800b800 <rmw_destroy_node+0x50>
 800b85a:	2c00      	cmp	r4, #0
 800b85c:	d1f1      	bne.n	800b842 <rmw_destroy_node+0x92>
 800b85e:	6928      	ldr	r0, [r5, #16]
 800b860:	696a      	ldr	r2, [r5, #20]
 800b862:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b866:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b86a:	6819      	ldr	r1, [r3, #0]
 800b86c:	f001 f93e 	bl	800caec <uxr_buffer_delete_entity>
 800b870:	4602      	mov	r2, r0
 800b872:	6928      	ldr	r0, [r5, #16]
 800b874:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b878:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b87c:	f000 ff36 	bl	800c6ec <run_xrce_session>
 800b880:	2800      	cmp	r0, #0
 800b882:	bf08      	it	eq
 800b884:	2602      	moveq	r6, #2
 800b886:	4638      	mov	r0, r7
 800b888:	f000 fdbe 	bl	800c408 <rmw_uxrce_fini_node_memory>
 800b88c:	4630      	mov	r0, r6
 800b88e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b890:	4626      	mov	r6, r4
 800b892:	e7a6      	b.n	800b7e2 <rmw_destroy_node+0x32>
 800b894:	080186c0 	.word	0x080186c0
 800b898:	2000ad54 	.word	0x2000ad54
 800b89c:	2000ad94 	.word	0x2000ad94
 800b8a0:	2000ad64 	.word	0x2000ad64
 800b8a4:	20006474 	.word	0x20006474

0800b8a8 <rmw_node_get_graph_guard_condition>:
 800b8a8:	6843      	ldr	r3, [r0, #4]
 800b8aa:	6918      	ldr	r0, [r3, #16]
 800b8ac:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop

0800b8b4 <flush_session>:
 800b8b4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b8b6:	f002 ba57 	b.w	800dd68 <uxr_run_session_until_confirm_delivery>
 800b8ba:	bf00      	nop

0800b8bc <rmw_publish>:
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d053      	beq.n	800b968 <rmw_publish+0xac>
 800b8c0:	b570      	push	{r4, r5, r6, lr}
 800b8c2:	460d      	mov	r5, r1
 800b8c4:	b08e      	sub	sp, #56	@ 0x38
 800b8c6:	2900      	cmp	r1, #0
 800b8c8:	d04b      	beq.n	800b962 <rmw_publish+0xa6>
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	6800      	ldr	r0, [r0, #0]
 800b8ce:	f001 f827 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d045      	beq.n	800b962 <rmw_publish+0xa6>
 800b8d6:	6866      	ldr	r6, [r4, #4]
 800b8d8:	2e00      	cmp	r6, #0
 800b8da:	d042      	beq.n	800b962 <rmw_publish+0xa6>
 800b8dc:	69b4      	ldr	r4, [r6, #24]
 800b8de:	4628      	mov	r0, r5
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	4798      	blx	r3
 800b8e4:	69f3      	ldr	r3, [r6, #28]
 800b8e6:	9005      	str	r0, [sp, #20]
 800b8e8:	b113      	cbz	r3, 800b8f0 <rmw_publish+0x34>
 800b8ea:	a805      	add	r0, sp, #20
 800b8ec:	4798      	blx	r3
 800b8ee:	9805      	ldr	r0, [sp, #20]
 800b8f0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	9000      	str	r0, [sp, #0]
 800b8f8:	6972      	ldr	r2, [r6, #20]
 800b8fa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b8fc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b900:	ab06      	add	r3, sp, #24
 800b902:	f003 fcaf 	bl	800f264 <uxr_prepare_output_stream>
 800b906:	b1d8      	cbz	r0, 800b940 <rmw_publish+0x84>
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	a906      	add	r1, sp, #24
 800b90c:	4628      	mov	r0, r5
 800b90e:	4798      	blx	r3
 800b910:	6a33      	ldr	r3, [r6, #32]
 800b912:	4604      	mov	r4, r0
 800b914:	b10b      	cbz	r3, 800b91a <rmw_publish+0x5e>
 800b916:	a806      	add	r0, sp, #24
 800b918:	4798      	blx	r3
 800b91a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b91e:	2b01      	cmp	r3, #1
 800b920:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b924:	d022      	beq.n	800b96c <rmw_publish+0xb0>
 800b926:	6918      	ldr	r0, [r3, #16]
 800b928:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b92a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b92e:	f002 fa1b 	bl	800dd68 <uxr_run_session_until_confirm_delivery>
 800b932:	4020      	ands	r0, r4
 800b934:	b2c4      	uxtb	r4, r0
 800b936:	f084 0001 	eor.w	r0, r4, #1
 800b93a:	b2c0      	uxtb	r0, r0
 800b93c:	b00e      	add	sp, #56	@ 0x38
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b944:	6918      	ldr	r0, [r3, #16]
 800b946:	9b05      	ldr	r3, [sp, #20]
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	4b0b      	ldr	r3, [pc, #44]	@ (800b978 <rmw_publish+0xbc>)
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	9602      	str	r6, [sp, #8]
 800b950:	6972      	ldr	r2, [r6, #20]
 800b952:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b954:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b958:	ab06      	add	r3, sp, #24
 800b95a:	f003 fcb3 	bl	800f2c4 <uxr_prepare_output_stream_fragmented>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d1d2      	bne.n	800b908 <rmw_publish+0x4c>
 800b962:	2001      	movs	r0, #1
 800b964:	b00e      	add	sp, #56	@ 0x38
 800b966:	bd70      	pop	{r4, r5, r6, pc}
 800b968:	2001      	movs	r0, #1
 800b96a:	4770      	bx	lr
 800b96c:	6918      	ldr	r0, [r3, #16]
 800b96e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b972:	f001 fe39 	bl	800d5e8 <uxr_flash_output_streams>
 800b976:	e7de      	b.n	800b936 <rmw_publish+0x7a>
 800b978:	0800b8b5 	.word	0x0800b8b5

0800b97c <rmw_create_publisher>:
 800b97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b980:	b087      	sub	sp, #28
 800b982:	2800      	cmp	r0, #0
 800b984:	f000 80cc 	beq.w	800bb20 <rmw_create_publisher+0x1a4>
 800b988:	460e      	mov	r6, r1
 800b98a:	2900      	cmp	r1, #0
 800b98c:	f000 80c8 	beq.w	800bb20 <rmw_create_publisher+0x1a4>
 800b990:	4604      	mov	r4, r0
 800b992:	6800      	ldr	r0, [r0, #0]
 800b994:	4615      	mov	r5, r2
 800b996:	4698      	mov	r8, r3
 800b998:	f000 ffc2 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	f000 80bf 	beq.w	800bb20 <rmw_create_publisher+0x1a4>
 800b9a2:	2d00      	cmp	r5, #0
 800b9a4:	f000 80bc 	beq.w	800bb20 <rmw_create_publisher+0x1a4>
 800b9a8:	782b      	ldrb	r3, [r5, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 80b8 	beq.w	800bb20 <rmw_create_publisher+0x1a4>
 800b9b0:	f1b8 0f00 	cmp.w	r8, #0
 800b9b4:	f000 80b4 	beq.w	800bb20 <rmw_create_publisher+0x1a4>
 800b9b8:	485c      	ldr	r0, [pc, #368]	@ (800bb2c <rmw_create_publisher+0x1b0>)
 800b9ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b9be:	f008 fb8f 	bl	80140e0 <get_memory>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	f000 80ac 	beq.w	800bb20 <rmw_create_publisher+0x1a4>
 800b9c8:	6884      	ldr	r4, [r0, #8]
 800b9ca:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b9ce:	f008 fbef 	bl	80141b0 <rmw_get_implementation_identifier>
 800b9d2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b9d6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b9da:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f7f4 fc28 	bl	8000234 <strlen>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	283c      	cmp	r0, #60	@ 0x3c
 800b9e8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800b9ec:	f200 8091 	bhi.w	800bb12 <rmw_create_publisher+0x196>
 800b9f0:	4a4f      	ldr	r2, [pc, #316]	@ (800bb30 <rmw_create_publisher+0x1b4>)
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	213c      	movs	r1, #60	@ 0x3c
 800b9f6:	4650      	mov	r0, sl
 800b9f8:	f00a fd8e 	bl	8016518 <sniprintf>
 800b9fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ba00:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800ba02:	4641      	mov	r1, r8
 800ba04:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ba08:	2250      	movs	r2, #80	@ 0x50
 800ba0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ba0e:	f00a ff26 	bl	801685e <memcpy>
 800ba12:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ba16:	4947      	ldr	r1, [pc, #284]	@ (800bb34 <rmw_create_publisher+0x1b8>)
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba1e:	bf0c      	ite	eq
 800ba20:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ba24:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ba28:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ba30:	4630      	mov	r0, r6
 800ba32:	f000 ff83 	bl	800c93c <get_message_typesupport_handle>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d06b      	beq.n	800bb12 <rmw_create_publisher+0x196>
 800ba3a:	6842      	ldr	r2, [r0, #4]
 800ba3c:	61a2      	str	r2, [r4, #24]
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	d067      	beq.n	800bb12 <rmw_create_publisher+0x196>
 800ba42:	4629      	mov	r1, r5
 800ba44:	4643      	mov	r3, r8
 800ba46:	4648      	mov	r0, r9
 800ba48:	f008 fbb8 	bl	80141bc <create_topic>
 800ba4c:	6260      	str	r0, [r4, #36]	@ 0x24
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d063      	beq.n	800bb1a <rmw_create_publisher+0x19e>
 800ba52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba5a:	2103      	movs	r1, #3
 800ba5c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ba60:	1c42      	adds	r2, r0, #1
 800ba62:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ba66:	f001 fb3f 	bl	800d0e8 <uxr_object_id>
 800ba6a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ba6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba72:	6120      	str	r0, [r4, #16]
 800ba74:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ba78:	6910      	ldr	r0, [r2, #16]
 800ba7a:	2506      	movs	r5, #6
 800ba7c:	9500      	str	r5, [sp, #0]
 800ba7e:	6819      	ldr	r1, [r3, #0]
 800ba80:	6922      	ldr	r2, [r4, #16]
 800ba82:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ba86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ba8a:	f001 f8e3 	bl	800cc54 <uxr_buffer_create_publisher_bin>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ba94:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ba98:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ba9c:	f000 fe26 	bl	800c6ec <run_xrce_session>
 800baa0:	b3b8      	cbz	r0, 800bb12 <rmw_create_publisher+0x196>
 800baa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800baa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800baaa:	2105      	movs	r1, #5
 800baac:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800bab0:	1c42      	adds	r2, r0, #1
 800bab2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800bab6:	f001 fb17 	bl	800d0e8 <uxr_object_id>
 800baba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800babe:	6160      	str	r0, [r4, #20]
 800bac0:	691e      	ldr	r6, [r3, #16]
 800bac2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bac6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800baca:	f10d 0a10 	add.w	sl, sp, #16
 800bace:	4641      	mov	r1, r8
 800bad0:	4650      	mov	r0, sl
 800bad2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800bad6:	f000 fe25 	bl	800c724 <convert_qos_profile>
 800bada:	9503      	str	r5, [sp, #12]
 800badc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800bae0:	9001      	str	r0, [sp, #4]
 800bae2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bae6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800baf0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800baf4:	f8d8 1000 	ldr.w	r1, [r8]
 800baf8:	4630      	mov	r0, r6
 800bafa:	f001 f90b 	bl	800cd14 <uxr_buffer_create_datawriter_bin>
 800bafe:	4602      	mov	r2, r0
 800bb00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bb04:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bb08:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bb0c:	f000 fdee 	bl	800c6ec <run_xrce_session>
 800bb10:	b938      	cbnz	r0, 800bb22 <rmw_create_publisher+0x1a6>
 800bb12:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bb14:	b108      	cbz	r0, 800bb1a <rmw_create_publisher+0x19e>
 800bb16:	f000 fce7 	bl	800c4e8 <rmw_uxrce_fini_topic_memory>
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f000 fc8c 	bl	800c438 <rmw_uxrce_fini_publisher_memory>
 800bb20:	2700      	movs	r7, #0
 800bb22:	4638      	mov	r0, r7
 800bb24:	b007      	add	sp, #28
 800bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2a:	bf00      	nop
 800bb2c:	2000ad54 	.word	0x2000ad54
 800bb30:	08017d40 	.word	0x08017d40
 800bb34:	08017840 	.word	0x08017840

0800bb38 <rmw_publisher_get_actual_qos>:
 800bb38:	b150      	cbz	r0, 800bb50 <rmw_publisher_get_actual_qos+0x18>
 800bb3a:	b508      	push	{r3, lr}
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	b149      	cbz	r1, 800bb54 <rmw_publisher_get_actual_qos+0x1c>
 800bb40:	6841      	ldr	r1, [r0, #4]
 800bb42:	2250      	movs	r2, #80	@ 0x50
 800bb44:	3128      	adds	r1, #40	@ 0x28
 800bb46:	4618      	mov	r0, r3
 800bb48:	f00a fe89 	bl	801685e <memcpy>
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	bd08      	pop	{r3, pc}
 800bb50:	200b      	movs	r0, #11
 800bb52:	4770      	bx	lr
 800bb54:	200b      	movs	r0, #11
 800bb56:	bd08      	pop	{r3, pc}

0800bb58 <rmw_destroy_publisher>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	b128      	cbz	r0, 800bb68 <rmw_destroy_publisher+0x10>
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	6800      	ldr	r0, [r0, #0]
 800bb60:	460d      	mov	r5, r1
 800bb62:	f000 fedd 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800bb66:	b910      	cbnz	r0, 800bb6e <rmw_destroy_publisher+0x16>
 800bb68:	2401      	movs	r4, #1
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb6e:	6863      	ldr	r3, [r4, #4]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d0f9      	beq.n	800bb68 <rmw_destroy_publisher+0x10>
 800bb74:	2d00      	cmp	r5, #0
 800bb76:	d0f7      	beq.n	800bb68 <rmw_destroy_publisher+0x10>
 800bb78:	6828      	ldr	r0, [r5, #0]
 800bb7a:	f000 fed1 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0f2      	beq.n	800bb68 <rmw_destroy_publisher+0x10>
 800bb82:	686c      	ldr	r4, [r5, #4]
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	d0ef      	beq.n	800bb68 <rmw_destroy_publisher+0x10>
 800bb88:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bb8a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800bb8e:	f008 fb65 	bl	801425c <destroy_topic>
 800bb92:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bb96:	6962      	ldr	r2, [r4, #20]
 800bb98:	6918      	ldr	r0, [r3, #16]
 800bb9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bb9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bba2:	6819      	ldr	r1, [r3, #0]
 800bba4:	f000 ffa2 	bl	800caec <uxr_buffer_delete_entity>
 800bba8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bbac:	6922      	ldr	r2, [r4, #16]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	6809      	ldr	r1, [r1, #0]
 800bbb8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bbbc:	f000 ff96 	bl	800caec <uxr_buffer_delete_entity>
 800bbc0:	693e      	ldr	r6, [r7, #16]
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bbc8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bbcc:	4604      	mov	r4, r0
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f000 fd8c 	bl	800c6ec <run_xrce_session>
 800bbd4:	693e      	ldr	r6, [r7, #16]
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bbdc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f000 fd82 	bl	800c6ec <run_xrce_session>
 800bbe8:	b12c      	cbz	r4, 800bbf6 <rmw_destroy_publisher+0x9e>
 800bbea:	b120      	cbz	r0, 800bbf6 <rmw_destroy_publisher+0x9e>
 800bbec:	2400      	movs	r4, #0
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 fc22 	bl	800c438 <rmw_uxrce_fini_publisher_memory>
 800bbf4:	e7b9      	b.n	800bb6a <rmw_destroy_publisher+0x12>
 800bbf6:	2402      	movs	r4, #2
 800bbf8:	e7f9      	b.n	800bbee <rmw_destroy_publisher+0x96>
 800bbfa:	bf00      	nop

0800bbfc <rmw_create_service>:
 800bbfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc00:	b091      	sub	sp, #68	@ 0x44
 800bc02:	2800      	cmp	r0, #0
 800bc04:	f000 80ba 	beq.w	800bd7c <rmw_create_service+0x180>
 800bc08:	4689      	mov	r9, r1
 800bc0a:	2900      	cmp	r1, #0
 800bc0c:	f000 80b6 	beq.w	800bd7c <rmw_create_service+0x180>
 800bc10:	4606      	mov	r6, r0
 800bc12:	6800      	ldr	r0, [r0, #0]
 800bc14:	4614      	mov	r4, r2
 800bc16:	461d      	mov	r5, r3
 800bc18:	f000 fe82 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	f000 80ad 	beq.w	800bd7c <rmw_create_service+0x180>
 800bc22:	2c00      	cmp	r4, #0
 800bc24:	f000 80aa 	beq.w	800bd7c <rmw_create_service+0x180>
 800bc28:	7823      	ldrb	r3, [r4, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f000 80a6 	beq.w	800bd7c <rmw_create_service+0x180>
 800bc30:	2d00      	cmp	r5, #0
 800bc32:	f000 80a3 	beq.w	800bd7c <rmw_create_service+0x180>
 800bc36:	4854      	ldr	r0, [pc, #336]	@ (800bd88 <rmw_create_service+0x18c>)
 800bc38:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800bc3c:	f008 fa50 	bl	80140e0 <get_memory>
 800bc40:	4606      	mov	r6, r0
 800bc42:	2800      	cmp	r0, #0
 800bc44:	f000 809b 	beq.w	800bd7e <rmw_create_service+0x182>
 800bc48:	6887      	ldr	r7, [r0, #8]
 800bc4a:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800bc4e:	f008 faaf 	bl	80141b0 <rmw_get_implementation_identifier>
 800bc52:	f107 0a88 	add.w	sl, r7, #136	@ 0x88
 800bc56:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800bc58:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f7f4 fae9 	bl	8000234 <strlen>
 800bc62:	1c42      	adds	r2, r0, #1
 800bc64:	2a3c      	cmp	r2, #60	@ 0x3c
 800bc66:	f107 067c 	add.w	r6, r7, #124	@ 0x7c
 800bc6a:	f200 8084 	bhi.w	800bd76 <rmw_create_service+0x17a>
 800bc6e:	4621      	mov	r1, r4
 800bc70:	4650      	mov	r0, sl
 800bc72:	f00a fdf4 	bl	801685e <memcpy>
 800bc76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f8c7 8078 	str.w	r8, [r7, #120]	@ 0x78
 800bc80:	677b      	str	r3, [r7, #116]	@ 0x74
 800bc82:	2250      	movs	r2, #80	@ 0x50
 800bc84:	f107 0020 	add.w	r0, r7, #32
 800bc88:	f00a fde9 	bl	801685e <memcpy>
 800bc8c:	493f      	ldr	r1, [pc, #252]	@ (800bd8c <rmw_create_service+0x190>)
 800bc8e:	4648      	mov	r0, r9
 800bc90:	f000 fe60 	bl	800c954 <get_service_typesupport_handle>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d06e      	beq.n	800bd76 <rmw_create_service+0x17a>
 800bc98:	6843      	ldr	r3, [r0, #4]
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d06a      	beq.n	800bd76 <rmw_create_service+0x17a>
 800bca0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bca4:	f8df a0ec 	ldr.w	sl, [pc, #236]	@ 800bd94 <rmw_create_service+0x198>
 800bca8:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800bd98 <rmw_create_service+0x19c>
 800bcac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcb0:	2108      	movs	r1, #8
 800bcb2:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	@ 0x5a2
 800bcb6:	1c42      	adds	r2, r0, #1
 800bcb8:	f8a3 25a2 	strh.w	r2, [r3, #1442]	@ 0x5a2
 800bcbc:	f001 fa14 	bl	800d0e8 <uxr_object_id>
 800bcc0:	2364      	movs	r3, #100	@ 0x64
 800bcc2:	6138      	str	r0, [r7, #16]
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	6978      	ldr	r0, [r7, #20]
 800bcc8:	4649      	mov	r1, r9
 800bcca:	f000 fd77 	bl	800c7bc <generate_service_types>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d051      	beq.n	800bd76 <rmw_create_service+0x17a>
 800bcd2:	f8df b0c8 	ldr.w	fp, [pc, #200]	@ 800bd9c <rmw_create_service+0x1a0>
 800bcd6:	4a2e      	ldr	r2, [pc, #184]	@ (800bd90 <rmw_create_service+0x194>)
 800bcd8:	233c      	movs	r3, #60	@ 0x3c
 800bcda:	4659      	mov	r1, fp
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f000 fd3b 	bl	800c758 <generate_service_topics>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d047      	beq.n	800bd76 <rmw_create_service+0x17a>
 800bce6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bcea:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800bcee:	a80c      	add	r0, sp, #48	@ 0x30
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bcf6:	f000 fd15 	bl	800c724 <convert_qos_profile>
 800bcfa:	4a25      	ldr	r2, [pc, #148]	@ (800bd90 <rmw_create_service+0x194>)
 800bcfc:	9400      	str	r4, [sp, #0]
 800bcfe:	e9cd b203 	strd	fp, r2, [sp, #12]
 800bd02:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800bd06:	a80c      	add	r0, sp, #48	@ 0x30
 800bd08:	c803      	ldmia	r0, {r0, r1}
 800bd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd0c:	9005      	str	r0, [sp, #20]
 800bd0e:	9a08      	ldr	r2, [sp, #32]
 800bd10:	f8ad 1018 	strh.w	r1, [sp, #24]
 800bd14:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bd18:	2306      	movs	r3, #6
 800bd1a:	9307      	str	r3, [sp, #28]
 800bd1c:	6811      	ldr	r1, [r2, #0]
 800bd1e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	f001 f8e4 	bl	800cef0 <uxr_buffer_create_replier_bin>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800bd2e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bd32:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bd36:	f000 fcd9 	bl	800c6ec <run_xrce_session>
 800bd3a:	b1e0      	cbz	r0, 800bd76 <rmw_create_service+0x17a>
 800bd3c:	7a2b      	ldrb	r3, [r5, #8]
 800bd3e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800bd42:	2200      	movs	r2, #0
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800bd4a:	e9cd 120e 	strd	r1, r2, [sp, #56]	@ 0x38
 800bd4e:	bf0c      	ite	eq
 800bd50:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	@ 0x37c
 800bd54:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	@ 0x374
 800bd58:	673a      	str	r2, [r7, #112]	@ 0x70
 800bd5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd5c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800bd60:	ab0e      	add	r3, sp, #56	@ 0x38
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	6811      	ldr	r1, [r2, #0]
 800bd66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bd6e:	f001 f9eb 	bl	800d148 <uxr_buffer_request_data>
 800bd72:	8338      	strh	r0, [r7, #24]
 800bd74:	e003      	b.n	800bd7e <rmw_create_service+0x182>
 800bd76:	4630      	mov	r0, r6
 800bd78:	f000 fb8a 	bl	800c490 <rmw_uxrce_fini_service_memory>
 800bd7c:	2600      	movs	r6, #0
 800bd7e:	4630      	mov	r0, r6
 800bd80:	b011      	add	sp, #68	@ 0x44
 800bd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd86:	bf00      	nop
 800bd88:	2000ad64 	.word	0x2000ad64
 800bd8c:	08017840 	.word	0x08017840
 800bd90:	200063d4 	.word	0x200063d4
 800bd94:	20006410 	.word	0x20006410
 800bd98:	20006370 	.word	0x20006370
 800bd9c:	20006334 	.word	0x20006334

0800bda0 <rmw_destroy_service>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	b128      	cbz	r0, 800bdb0 <rmw_destroy_service+0x10>
 800bda4:	4604      	mov	r4, r0
 800bda6:	6800      	ldr	r0, [r0, #0]
 800bda8:	460d      	mov	r5, r1
 800bdaa:	f000 fdb9 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800bdae:	b910      	cbnz	r0, 800bdb6 <rmw_destroy_service+0x16>
 800bdb0:	2401      	movs	r4, #1
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	bd70      	pop	{r4, r5, r6, pc}
 800bdb6:	6863      	ldr	r3, [r4, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0f9      	beq.n	800bdb0 <rmw_destroy_service+0x10>
 800bdbc:	2d00      	cmp	r5, #0
 800bdbe:	d0f7      	beq.n	800bdb0 <rmw_destroy_service+0x10>
 800bdc0:	6828      	ldr	r0, [r5, #0]
 800bdc2:	f000 fdad 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d0f2      	beq.n	800bdb0 <rmw_destroy_service+0x10>
 800bdca:	686e      	ldr	r6, [r5, #4]
 800bdcc:	2e00      	cmp	r6, #0
 800bdce:	d0ef      	beq.n	800bdb0 <rmw_destroy_service+0x10>
 800bdd0:	6864      	ldr	r4, [r4, #4]
 800bdd2:	6932      	ldr	r2, [r6, #16]
 800bdd4:	6920      	ldr	r0, [r4, #16]
 800bdd6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bdda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bdde:	6819      	ldr	r1, [r3, #0]
 800bde0:	f001 f9ec 	bl	800d1bc <uxr_buffer_cancel_data>
 800bde4:	4602      	mov	r2, r0
 800bde6:	6920      	ldr	r0, [r4, #16]
 800bde8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bdec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bdf0:	f000 fc7c 	bl	800c6ec <run_xrce_session>
 800bdf4:	6920      	ldr	r0, [r4, #16]
 800bdf6:	6932      	ldr	r2, [r6, #16]
 800bdf8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bdfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be00:	6819      	ldr	r1, [r3, #0]
 800be02:	f000 fe73 	bl	800caec <uxr_buffer_delete_entity>
 800be06:	4602      	mov	r2, r0
 800be08:	6920      	ldr	r0, [r4, #16]
 800be0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800be0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800be12:	f000 fc6b 	bl	800c6ec <run_xrce_session>
 800be16:	2800      	cmp	r0, #0
 800be18:	4628      	mov	r0, r5
 800be1a:	bf14      	ite	ne
 800be1c:	2400      	movne	r4, #0
 800be1e:	2402      	moveq	r4, #2
 800be20:	f000 fb36 	bl	800c490 <rmw_uxrce_fini_service_memory>
 800be24:	e7c5      	b.n	800bdb2 <rmw_destroy_service+0x12>
 800be26:	bf00      	nop

0800be28 <rmw_service_response_publisher_get_actual_qos>:
 800be28:	b150      	cbz	r0, 800be40 <rmw_service_response_publisher_get_actual_qos+0x18>
 800be2a:	b508      	push	{r3, lr}
 800be2c:	460b      	mov	r3, r1
 800be2e:	b149      	cbz	r1, 800be44 <rmw_service_response_publisher_get_actual_qos+0x1c>
 800be30:	6841      	ldr	r1, [r0, #4]
 800be32:	2250      	movs	r2, #80	@ 0x50
 800be34:	3120      	adds	r1, #32
 800be36:	4618      	mov	r0, r3
 800be38:	f00a fd11 	bl	801685e <memcpy>
 800be3c:	2000      	movs	r0, #0
 800be3e:	bd08      	pop	{r3, pc}
 800be40:	200b      	movs	r0, #11
 800be42:	4770      	bx	lr
 800be44:	200b      	movs	r0, #11
 800be46:	bd08      	pop	{r3, pc}

0800be48 <rmw_service_request_subscription_get_actual_qos>:
 800be48:	b150      	cbz	r0, 800be60 <rmw_service_request_subscription_get_actual_qos+0x18>
 800be4a:	b508      	push	{r3, lr}
 800be4c:	460b      	mov	r3, r1
 800be4e:	b149      	cbz	r1, 800be64 <rmw_service_request_subscription_get_actual_qos+0x1c>
 800be50:	6841      	ldr	r1, [r0, #4]
 800be52:	2250      	movs	r2, #80	@ 0x50
 800be54:	3120      	adds	r1, #32
 800be56:	4618      	mov	r0, r3
 800be58:	f00a fd01 	bl	801685e <memcpy>
 800be5c:	2000      	movs	r0, #0
 800be5e:	bd08      	pop	{r3, pc}
 800be60:	200b      	movs	r0, #11
 800be62:	4770      	bx	lr
 800be64:	200b      	movs	r0, #11
 800be66:	bd08      	pop	{r3, pc}

0800be68 <rmw_create_subscription>:
 800be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	b08d      	sub	sp, #52	@ 0x34
 800be6e:	2800      	cmp	r0, #0
 800be70:	f000 80d1 	beq.w	800c016 <rmw_create_subscription+0x1ae>
 800be74:	460e      	mov	r6, r1
 800be76:	2900      	cmp	r1, #0
 800be78:	f000 80cd 	beq.w	800c016 <rmw_create_subscription+0x1ae>
 800be7c:	4604      	mov	r4, r0
 800be7e:	6800      	ldr	r0, [r0, #0]
 800be80:	4615      	mov	r5, r2
 800be82:	4698      	mov	r8, r3
 800be84:	f000 fd4c 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800be88:	2800      	cmp	r0, #0
 800be8a:	f000 80c4 	beq.w	800c016 <rmw_create_subscription+0x1ae>
 800be8e:	2d00      	cmp	r5, #0
 800be90:	f000 80c1 	beq.w	800c016 <rmw_create_subscription+0x1ae>
 800be94:	782b      	ldrb	r3, [r5, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 80bd 	beq.w	800c016 <rmw_create_subscription+0x1ae>
 800be9c:	f1b8 0f00 	cmp.w	r8, #0
 800bea0:	f000 80b9 	beq.w	800c016 <rmw_create_subscription+0x1ae>
 800bea4:	485e      	ldr	r0, [pc, #376]	@ (800c020 <rmw_create_subscription+0x1b8>)
 800bea6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800beaa:	f008 f919 	bl	80140e0 <get_memory>
 800beae:	4604      	mov	r4, r0
 800beb0:	2800      	cmp	r0, #0
 800beb2:	f000 80b1 	beq.w	800c018 <rmw_create_subscription+0x1b0>
 800beb6:	6887      	ldr	r7, [r0, #8]
 800beb8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800bebc:	f008 f978 	bl	80141b0 <rmw_get_implementation_identifier>
 800bec0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800bec4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800bec6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800beca:	4628      	mov	r0, r5
 800becc:	f7f4 f9b2 	bl	8000234 <strlen>
 800bed0:	3001      	adds	r0, #1
 800bed2:	283c      	cmp	r0, #60	@ 0x3c
 800bed4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800bed8:	f200 8096 	bhi.w	800c008 <rmw_create_subscription+0x1a0>
 800bedc:	4a51      	ldr	r2, [pc, #324]	@ (800c024 <rmw_create_subscription+0x1bc>)
 800bede:	462b      	mov	r3, r5
 800bee0:	213c      	movs	r1, #60	@ 0x3c
 800bee2:	4650      	mov	r0, sl
 800bee4:	f00a fb18 	bl	8016518 <sniprintf>
 800bee8:	4641      	mov	r1, r8
 800beea:	f8c7 9020 	str.w	r9, [r7, #32]
 800beee:	2250      	movs	r2, #80	@ 0x50
 800bef0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800bef4:	f00a fcb3 	bl	801685e <memcpy>
 800bef8:	494b      	ldr	r1, [pc, #300]	@ (800c028 <rmw_create_subscription+0x1c0>)
 800befa:	4630      	mov	r0, r6
 800befc:	f000 fd1e 	bl	800c93c <get_message_typesupport_handle>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f000 8081 	beq.w	800c008 <rmw_create_subscription+0x1a0>
 800bf06:	6842      	ldr	r2, [r0, #4]
 800bf08:	61ba      	str	r2, [r7, #24]
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	d07c      	beq.n	800c008 <rmw_create_subscription+0x1a0>
 800bf0e:	4629      	mov	r1, r5
 800bf10:	4643      	mov	r3, r8
 800bf12:	4648      	mov	r0, r9
 800bf14:	f008 f952 	bl	80141bc <create_topic>
 800bf18:	61f8      	str	r0, [r7, #28]
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d078      	beq.n	800c010 <rmw_create_subscription+0x1a8>
 800bf1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf26:	2104      	movs	r1, #4
 800bf28:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800bf2c:	1c42      	adds	r2, r0, #1
 800bf2e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800bf32:	f001 f8d9 	bl	800d0e8 <uxr_object_id>
 800bf36:	6138      	str	r0, [r7, #16]
 800bf38:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bf3c:	2506      	movs	r5, #6
 800bf3e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800bf42:	9500      	str	r5, [sp, #0]
 800bf44:	6819      	ldr	r1, [r3, #0]
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800bf4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf50:	f000 feb0 	bl	800ccb4 <uxr_buffer_create_subscriber_bin>
 800bf54:	4602      	mov	r2, r0
 800bf56:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bf5a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bf5e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bf62:	f000 fbc3 	bl	800c6ec <run_xrce_session>
 800bf66:	2800      	cmp	r0, #0
 800bf68:	d04e      	beq.n	800c008 <rmw_create_subscription+0x1a0>
 800bf6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf72:	4629      	mov	r1, r5
 800bf74:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800bf78:	1c42      	adds	r2, r0, #1
 800bf7a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800bf7e:	f001 f8b3 	bl	800d0e8 <uxr_object_id>
 800bf82:	ae08      	add	r6, sp, #32
 800bf84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	6178      	str	r0, [r7, #20]
 800bf8c:	4641      	mov	r1, r8
 800bf8e:	4630      	mov	r0, r6
 800bf90:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800bf94:	9305      	str	r3, [sp, #20]
 800bf96:	f000 fbc5 	bl	800c724 <convert_qos_profile>
 800bf9a:	9503      	str	r5, [sp, #12]
 800bf9c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bfa0:	9b05      	ldr	r3, [sp, #20]
 800bfa2:	9001      	str	r0, [sp, #4]
 800bfa4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800bfb0:	f8db 1000 	ldr.w	r1, [fp]
 800bfb4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800bfb8:	f000 ff22 	bl	800ce00 <uxr_buffer_create_datareader_bin>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bfc2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800bfc6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bfca:	f000 fb8f 	bl	800c6ec <run_xrce_session>
 800bfce:	b1d8      	cbz	r0, 800c008 <rmw_create_subscription+0x1a0>
 800bfd0:	f898 3008 	ldrb.w	r3, [r8, #8]
 800bfd4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bfd8:	2b02      	cmp	r3, #2
 800bfda:	bf0c      	ite	eq
 800bfdc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800bfe0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800bfe4:	9307      	str	r3, [sp, #28]
 800bfe6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800bfea:	2200      	movs	r2, #0
 800bfec:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800bff0:	ab0a      	add	r3, sp, #40	@ 0x28
 800bff2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	9b07      	ldr	r3, [sp, #28]
 800bffc:	6809      	ldr	r1, [r1, #0]
 800bffe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c002:	f001 f8a1 	bl	800d148 <uxr_buffer_request_data>
 800c006:	e007      	b.n	800c018 <rmw_create_subscription+0x1b0>
 800c008:	69f8      	ldr	r0, [r7, #28]
 800c00a:	b108      	cbz	r0, 800c010 <rmw_create_subscription+0x1a8>
 800c00c:	f000 fa6c 	bl	800c4e8 <rmw_uxrce_fini_topic_memory>
 800c010:	4620      	mov	r0, r4
 800c012:	f000 fa27 	bl	800c464 <rmw_uxrce_fini_subscription_memory>
 800c016:	2400      	movs	r4, #0
 800c018:	4620      	mov	r0, r4
 800c01a:	b00d      	add	sp, #52	@ 0x34
 800c01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c020:	2000ad94 	.word	0x2000ad94
 800c024:	08017d40 	.word	0x08017d40
 800c028:	08017840 	.word	0x08017840

0800c02c <rmw_subscription_get_actual_qos>:
 800c02c:	b150      	cbz	r0, 800c044 <rmw_subscription_get_actual_qos+0x18>
 800c02e:	b508      	push	{r3, lr}
 800c030:	460b      	mov	r3, r1
 800c032:	b149      	cbz	r1, 800c048 <rmw_subscription_get_actual_qos+0x1c>
 800c034:	6841      	ldr	r1, [r0, #4]
 800c036:	2250      	movs	r2, #80	@ 0x50
 800c038:	3128      	adds	r1, #40	@ 0x28
 800c03a:	4618      	mov	r0, r3
 800c03c:	f00a fc0f 	bl	801685e <memcpy>
 800c040:	2000      	movs	r0, #0
 800c042:	bd08      	pop	{r3, pc}
 800c044:	200b      	movs	r0, #11
 800c046:	4770      	bx	lr
 800c048:	200b      	movs	r0, #11
 800c04a:	bd08      	pop	{r3, pc}

0800c04c <rmw_destroy_subscription>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	b128      	cbz	r0, 800c05c <rmw_destroy_subscription+0x10>
 800c050:	4604      	mov	r4, r0
 800c052:	6800      	ldr	r0, [r0, #0]
 800c054:	460d      	mov	r5, r1
 800c056:	f000 fc63 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800c05a:	b910      	cbnz	r0, 800c062 <rmw_destroy_subscription+0x16>
 800c05c:	2401      	movs	r4, #1
 800c05e:	4620      	mov	r0, r4
 800c060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c062:	6863      	ldr	r3, [r4, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d0f9      	beq.n	800c05c <rmw_destroy_subscription+0x10>
 800c068:	2d00      	cmp	r5, #0
 800c06a:	d0f7      	beq.n	800c05c <rmw_destroy_subscription+0x10>
 800c06c:	6828      	ldr	r0, [r5, #0]
 800c06e:	f000 fc57 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 800c072:	2800      	cmp	r0, #0
 800c074:	d0f2      	beq.n	800c05c <rmw_destroy_subscription+0x10>
 800c076:	686c      	ldr	r4, [r5, #4]
 800c078:	2c00      	cmp	r4, #0
 800c07a:	d0ef      	beq.n	800c05c <rmw_destroy_subscription+0x10>
 800c07c:	6a26      	ldr	r6, [r4, #32]
 800c07e:	6962      	ldr	r2, [r4, #20]
 800c080:	6930      	ldr	r0, [r6, #16]
 800c082:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c086:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c08a:	6819      	ldr	r1, [r3, #0]
 800c08c:	f001 f896 	bl	800d1bc <uxr_buffer_cancel_data>
 800c090:	4602      	mov	r2, r0
 800c092:	6930      	ldr	r0, [r6, #16]
 800c094:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c098:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c09c:	f000 fb26 	bl	800c6ec <run_xrce_session>
 800c0a0:	69e0      	ldr	r0, [r4, #28]
 800c0a2:	f008 f8db 	bl	801425c <destroy_topic>
 800c0a6:	6a23      	ldr	r3, [r4, #32]
 800c0a8:	6962      	ldr	r2, [r4, #20]
 800c0aa:	6918      	ldr	r0, [r3, #16]
 800c0ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c0b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c0b4:	6819      	ldr	r1, [r3, #0]
 800c0b6:	f000 fd19 	bl	800caec <uxr_buffer_delete_entity>
 800c0ba:	6a23      	ldr	r3, [r4, #32]
 800c0bc:	6922      	ldr	r2, [r4, #16]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	6809      	ldr	r1, [r1, #0]
 800c0c8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c0cc:	f000 fd0e 	bl	800caec <uxr_buffer_delete_entity>
 800c0d0:	6937      	ldr	r7, [r6, #16]
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c0d8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c0dc:	4604      	mov	r4, r0
 800c0de:	4638      	mov	r0, r7
 800c0e0:	f000 fb04 	bl	800c6ec <run_xrce_session>
 800c0e4:	6936      	ldr	r6, [r6, #16]
 800c0e6:	4622      	mov	r2, r4
 800c0e8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c0ec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	4630      	mov	r0, r6
 800c0f4:	f000 fafa 	bl	800c6ec <run_xrce_session>
 800c0f8:	b12c      	cbz	r4, 800c106 <rmw_destroy_subscription+0xba>
 800c0fa:	b120      	cbz	r0, 800c106 <rmw_destroy_subscription+0xba>
 800c0fc:	2400      	movs	r4, #0
 800c0fe:	4628      	mov	r0, r5
 800c100:	f000 f9b0 	bl	800c464 <rmw_uxrce_fini_subscription_memory>
 800c104:	e7ab      	b.n	800c05e <rmw_destroy_subscription+0x12>
 800c106:	2402      	movs	r4, #2
 800c108:	e7f9      	b.n	800c0fe <rmw_destroy_subscription+0xb2>
 800c10a:	bf00      	nop

0800c10c <rmw_uxrce_transport_init>:
 800c10c:	b508      	push	{r3, lr}
 800c10e:	b108      	cbz	r0, 800c114 <rmw_uxrce_transport_init+0x8>
 800c110:	f100 0210 	add.w	r2, r0, #16
 800c114:	b139      	cbz	r1, 800c126 <rmw_uxrce_transport_init+0x1a>
 800c116:	6949      	ldr	r1, [r1, #20]
 800c118:	4610      	mov	r0, r2
 800c11a:	f000 ffad 	bl	800d078 <uxr_init_custom_transport>
 800c11e:	f080 0001 	eor.w	r0, r0, #1
 800c122:	b2c0      	uxtb	r0, r0
 800c124:	bd08      	pop	{r3, pc}
 800c126:	4b04      	ldr	r3, [pc, #16]	@ (800c138 <rmw_uxrce_transport_init+0x2c>)
 800c128:	4610      	mov	r0, r2
 800c12a:	6859      	ldr	r1, [r3, #4]
 800c12c:	f000 ffa4 	bl	800d078 <uxr_init_custom_transport>
 800c130:	f080 0001 	eor.w	r0, r0, #1
 800c134:	b2c0      	uxtb	r0, r0
 800c136:	bd08      	pop	{r3, pc}
 800c138:	200062dc 	.word	0x200062dc

0800c13c <rmw_uxrce_init_service_memory>:
 800c13c:	b1e2      	cbz	r2, 800c178 <rmw_uxrce_init_service_memory+0x3c>
 800c13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	7b05      	ldrb	r5, [r0, #12]
 800c144:	4606      	mov	r6, r0
 800c146:	b9ad      	cbnz	r5, 800c174 <rmw_uxrce_init_service_memory+0x38>
 800c148:	23c8      	movs	r3, #200	@ 0xc8
 800c14a:	e9c0 5500 	strd	r5, r5, [r0]
 800c14e:	6083      	str	r3, [r0, #8]
 800c150:	f240 1301 	movw	r3, #257	@ 0x101
 800c154:	4617      	mov	r7, r2
 800c156:	8183      	strh	r3, [r0, #12]
 800c158:	460c      	mov	r4, r1
 800c15a:	46a8      	mov	r8, r5
 800c15c:	4621      	mov	r1, r4
 800c15e:	4630      	mov	r0, r6
 800c160:	3501      	adds	r5, #1
 800c162:	f007 ffcd 	bl	8014100 <put_memory>
 800c166:	42af      	cmp	r7, r5
 800c168:	60a4      	str	r4, [r4, #8]
 800c16a:	f884 800c 	strb.w	r8, [r4, #12]
 800c16e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c172:	d1f3      	bne.n	800c15c <rmw_uxrce_init_service_memory+0x20>
 800c174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop

0800c17c <rmw_uxrce_init_client_memory>:
 800c17c:	b1e2      	cbz	r2, 800c1b8 <rmw_uxrce_init_client_memory+0x3c>
 800c17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	7b05      	ldrb	r5, [r0, #12]
 800c184:	4606      	mov	r6, r0
 800c186:	b9ad      	cbnz	r5, 800c1b4 <rmw_uxrce_init_client_memory+0x38>
 800c188:	23c8      	movs	r3, #200	@ 0xc8
 800c18a:	e9c0 5500 	strd	r5, r5, [r0]
 800c18e:	6083      	str	r3, [r0, #8]
 800c190:	f240 1301 	movw	r3, #257	@ 0x101
 800c194:	4617      	mov	r7, r2
 800c196:	8183      	strh	r3, [r0, #12]
 800c198:	460c      	mov	r4, r1
 800c19a:	46a8      	mov	r8, r5
 800c19c:	4621      	mov	r1, r4
 800c19e:	4630      	mov	r0, r6
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	f007 ffad 	bl	8014100 <put_memory>
 800c1a6:	42af      	cmp	r7, r5
 800c1a8:	60a4      	str	r4, [r4, #8]
 800c1aa:	f884 800c 	strb.w	r8, [r4, #12]
 800c1ae:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c1b2:	d1f3      	bne.n	800c19c <rmw_uxrce_init_client_memory+0x20>
 800c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop

0800c1bc <rmw_uxrce_init_publisher_memory>:
 800c1bc:	b1e2      	cbz	r2, 800c1f8 <rmw_uxrce_init_publisher_memory+0x3c>
 800c1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c2:	7b05      	ldrb	r5, [r0, #12]
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	b9ad      	cbnz	r5, 800c1f4 <rmw_uxrce_init_publisher_memory+0x38>
 800c1c8:	23d8      	movs	r3, #216	@ 0xd8
 800c1ca:	e9c0 5500 	strd	r5, r5, [r0]
 800c1ce:	6083      	str	r3, [r0, #8]
 800c1d0:	f240 1301 	movw	r3, #257	@ 0x101
 800c1d4:	4617      	mov	r7, r2
 800c1d6:	8183      	strh	r3, [r0, #12]
 800c1d8:	460c      	mov	r4, r1
 800c1da:	46a8      	mov	r8, r5
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4630      	mov	r0, r6
 800c1e0:	3501      	adds	r5, #1
 800c1e2:	f007 ff8d 	bl	8014100 <put_memory>
 800c1e6:	42af      	cmp	r7, r5
 800c1e8:	60a4      	str	r4, [r4, #8]
 800c1ea:	f884 800c 	strb.w	r8, [r4, #12]
 800c1ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c1f2:	d1f3      	bne.n	800c1dc <rmw_uxrce_init_publisher_memory+0x20>
 800c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop

0800c1fc <rmw_uxrce_init_subscription_memory>:
 800c1fc:	b1e2      	cbz	r2, 800c238 <rmw_uxrce_init_subscription_memory+0x3c>
 800c1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c202:	7b05      	ldrb	r5, [r0, #12]
 800c204:	4606      	mov	r6, r0
 800c206:	b9ad      	cbnz	r5, 800c234 <rmw_uxrce_init_subscription_memory+0x38>
 800c208:	23d8      	movs	r3, #216	@ 0xd8
 800c20a:	e9c0 5500 	strd	r5, r5, [r0]
 800c20e:	6083      	str	r3, [r0, #8]
 800c210:	f240 1301 	movw	r3, #257	@ 0x101
 800c214:	4617      	mov	r7, r2
 800c216:	8183      	strh	r3, [r0, #12]
 800c218:	460c      	mov	r4, r1
 800c21a:	46a8      	mov	r8, r5
 800c21c:	4621      	mov	r1, r4
 800c21e:	4630      	mov	r0, r6
 800c220:	3501      	adds	r5, #1
 800c222:	f007 ff6d 	bl	8014100 <put_memory>
 800c226:	42af      	cmp	r7, r5
 800c228:	60a4      	str	r4, [r4, #8]
 800c22a:	f884 800c 	strb.w	r8, [r4, #12]
 800c22e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c232:	d1f3      	bne.n	800c21c <rmw_uxrce_init_subscription_memory+0x20>
 800c234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop

0800c23c <rmw_uxrce_init_node_memory>:
 800c23c:	b1e2      	cbz	r2, 800c278 <rmw_uxrce_init_node_memory+0x3c>
 800c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c242:	7b05      	ldrb	r5, [r0, #12]
 800c244:	4606      	mov	r6, r0
 800c246:	b9ad      	cbnz	r5, 800c274 <rmw_uxrce_init_node_memory+0x38>
 800c248:	23a4      	movs	r3, #164	@ 0xa4
 800c24a:	e9c0 5500 	strd	r5, r5, [r0]
 800c24e:	6083      	str	r3, [r0, #8]
 800c250:	f240 1301 	movw	r3, #257	@ 0x101
 800c254:	4617      	mov	r7, r2
 800c256:	8183      	strh	r3, [r0, #12]
 800c258:	460c      	mov	r4, r1
 800c25a:	46a8      	mov	r8, r5
 800c25c:	4621      	mov	r1, r4
 800c25e:	4630      	mov	r0, r6
 800c260:	3501      	adds	r5, #1
 800c262:	f007 ff4d 	bl	8014100 <put_memory>
 800c266:	42af      	cmp	r7, r5
 800c268:	60a4      	str	r4, [r4, #8]
 800c26a:	f884 800c 	strb.w	r8, [r4, #12]
 800c26e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c272:	d1f3      	bne.n	800c25c <rmw_uxrce_init_node_memory+0x20>
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop

0800c27c <rmw_uxrce_init_session_memory>:
 800c27c:	b1ea      	cbz	r2, 800c2ba <rmw_uxrce_init_session_memory+0x3e>
 800c27e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c282:	7b05      	ldrb	r5, [r0, #12]
 800c284:	4606      	mov	r6, r0
 800c286:	b9b5      	cbnz	r5, 800c2b6 <rmw_uxrce_init_session_memory+0x3a>
 800c288:	e9c0 5500 	strd	r5, r5, [r0]
 800c28c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c290:	f240 1301 	movw	r3, #257	@ 0x101
 800c294:	4617      	mov	r7, r2
 800c296:	f8c0 8008 	str.w	r8, [r0, #8]
 800c29a:	460c      	mov	r4, r1
 800c29c:	8183      	strh	r3, [r0, #12]
 800c29e:	46a9      	mov	r9, r5
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	3501      	adds	r5, #1
 800c2a6:	f007 ff2b 	bl	8014100 <put_memory>
 800c2aa:	42af      	cmp	r7, r5
 800c2ac:	60a4      	str	r4, [r4, #8]
 800c2ae:	f884 900c 	strb.w	r9, [r4, #12]
 800c2b2:	4444      	add	r4, r8
 800c2b4:	d1f4      	bne.n	800c2a0 <rmw_uxrce_init_session_memory+0x24>
 800c2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ba:	4770      	bx	lr

0800c2bc <rmw_uxrce_init_topic_memory>:
 800c2bc:	b1e2      	cbz	r2, 800c2f8 <rmw_uxrce_init_topic_memory+0x3c>
 800c2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c2:	7b05      	ldrb	r5, [r0, #12]
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	b9ad      	cbnz	r5, 800c2f4 <rmw_uxrce_init_topic_memory+0x38>
 800c2c8:	231c      	movs	r3, #28
 800c2ca:	e9c0 5500 	strd	r5, r5, [r0]
 800c2ce:	6083      	str	r3, [r0, #8]
 800c2d0:	f240 1301 	movw	r3, #257	@ 0x101
 800c2d4:	4617      	mov	r7, r2
 800c2d6:	8183      	strh	r3, [r0, #12]
 800c2d8:	460c      	mov	r4, r1
 800c2da:	46a8      	mov	r8, r5
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4630      	mov	r0, r6
 800c2e0:	3501      	adds	r5, #1
 800c2e2:	f007 ff0d 	bl	8014100 <put_memory>
 800c2e6:	42af      	cmp	r7, r5
 800c2e8:	60a4      	str	r4, [r4, #8]
 800c2ea:	f884 800c 	strb.w	r8, [r4, #12]
 800c2ee:	f104 041c 	add.w	r4, r4, #28
 800c2f2:	d1f3      	bne.n	800c2dc <rmw_uxrce_init_topic_memory+0x20>
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop

0800c2fc <rmw_uxrce_init_static_input_buffer_memory>:
 800c2fc:	b1ea      	cbz	r2, 800c33a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c302:	7b05      	ldrb	r5, [r0, #12]
 800c304:	4606      	mov	r6, r0
 800c306:	b9b5      	cbnz	r5, 800c336 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c308:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c30c:	e9c0 5500 	strd	r5, r5, [r0]
 800c310:	6083      	str	r3, [r0, #8]
 800c312:	f240 1301 	movw	r3, #257	@ 0x101
 800c316:	4617      	mov	r7, r2
 800c318:	8183      	strh	r3, [r0, #12]
 800c31a:	460c      	mov	r4, r1
 800c31c:	46a8      	mov	r8, r5
 800c31e:	4621      	mov	r1, r4
 800c320:	4630      	mov	r0, r6
 800c322:	3501      	adds	r5, #1
 800c324:	f007 feec 	bl	8014100 <put_memory>
 800c328:	42af      	cmp	r7, r5
 800c32a:	60a4      	str	r4, [r4, #8]
 800c32c:	f884 800c 	strb.w	r8, [r4, #12]
 800c330:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c334:	d1f3      	bne.n	800c31e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c33a:	4770      	bx	lr

0800c33c <rmw_uxrce_init_init_options_impl_memory>:
 800c33c:	b1e2      	cbz	r2, 800c378 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c342:	7b05      	ldrb	r5, [r0, #12]
 800c344:	4606      	mov	r6, r0
 800c346:	b9ad      	cbnz	r5, 800c374 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c348:	232c      	movs	r3, #44	@ 0x2c
 800c34a:	e9c0 5500 	strd	r5, r5, [r0]
 800c34e:	6083      	str	r3, [r0, #8]
 800c350:	f240 1301 	movw	r3, #257	@ 0x101
 800c354:	4617      	mov	r7, r2
 800c356:	8183      	strh	r3, [r0, #12]
 800c358:	460c      	mov	r4, r1
 800c35a:	46a8      	mov	r8, r5
 800c35c:	4621      	mov	r1, r4
 800c35e:	4630      	mov	r0, r6
 800c360:	3501      	adds	r5, #1
 800c362:	f007 fecd 	bl	8014100 <put_memory>
 800c366:	42af      	cmp	r7, r5
 800c368:	60a4      	str	r4, [r4, #8]
 800c36a:	f884 800c 	strb.w	r8, [r4, #12]
 800c36e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c372:	d1f3      	bne.n	800c35c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop

0800c37c <rmw_uxrce_init_wait_set_memory>:
 800c37c:	b1e2      	cbz	r2, 800c3b8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c382:	7b05      	ldrb	r5, [r0, #12]
 800c384:	4606      	mov	r6, r0
 800c386:	b9ad      	cbnz	r5, 800c3b4 <rmw_uxrce_init_wait_set_memory+0x38>
 800c388:	231c      	movs	r3, #28
 800c38a:	e9c0 5500 	strd	r5, r5, [r0]
 800c38e:	6083      	str	r3, [r0, #8]
 800c390:	f240 1301 	movw	r3, #257	@ 0x101
 800c394:	4617      	mov	r7, r2
 800c396:	8183      	strh	r3, [r0, #12]
 800c398:	460c      	mov	r4, r1
 800c39a:	46a8      	mov	r8, r5
 800c39c:	4621      	mov	r1, r4
 800c39e:	4630      	mov	r0, r6
 800c3a0:	3501      	adds	r5, #1
 800c3a2:	f007 fead 	bl	8014100 <put_memory>
 800c3a6:	42af      	cmp	r7, r5
 800c3a8:	60a4      	str	r4, [r4, #8]
 800c3aa:	f884 800c 	strb.w	r8, [r4, #12]
 800c3ae:	f104 041c 	add.w	r4, r4, #28
 800c3b2:	d1f3      	bne.n	800c39c <rmw_uxrce_init_wait_set_memory+0x20>
 800c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop

0800c3bc <rmw_uxrce_init_guard_condition_memory>:
 800c3bc:	b1e2      	cbz	r2, 800c3f8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c2:	7b05      	ldrb	r5, [r0, #12]
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	b9ad      	cbnz	r5, 800c3f4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c3c8:	2320      	movs	r3, #32
 800c3ca:	e9c0 5500 	strd	r5, r5, [r0]
 800c3ce:	6083      	str	r3, [r0, #8]
 800c3d0:	f240 1301 	movw	r3, #257	@ 0x101
 800c3d4:	4617      	mov	r7, r2
 800c3d6:	8183      	strh	r3, [r0, #12]
 800c3d8:	460c      	mov	r4, r1
 800c3da:	46a8      	mov	r8, r5
 800c3dc:	4621      	mov	r1, r4
 800c3de:	4630      	mov	r0, r6
 800c3e0:	3501      	adds	r5, #1
 800c3e2:	f007 fe8d 	bl	8014100 <put_memory>
 800c3e6:	42af      	cmp	r7, r5
 800c3e8:	60a4      	str	r4, [r4, #8]
 800c3ea:	f884 800c 	strb.w	r8, [r4, #12]
 800c3ee:	f104 0420 	add.w	r4, r4, #32
 800c3f2:	d1f3      	bne.n	800c3dc <rmw_uxrce_init_guard_condition_memory+0x20>
 800c3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f8:	4770      	bx	lr
 800c3fa:	bf00      	nop

0800c3fc <rmw_uxrce_fini_session_memory>:
 800c3fc:	4601      	mov	r1, r0
 800c3fe:	4801      	ldr	r0, [pc, #4]	@ (800c404 <rmw_uxrce_fini_session_memory+0x8>)
 800c400:	f007 be7e 	b.w	8014100 <put_memory>
 800c404:	2000ad74 	.word	0x2000ad74

0800c408 <rmw_uxrce_fini_node_memory>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4604      	mov	r4, r0
 800c40c:	6800      	ldr	r0, [r0, #0]
 800c40e:	b128      	cbz	r0, 800c41c <rmw_uxrce_fini_node_memory+0x14>
 800c410:	4b07      	ldr	r3, [pc, #28]	@ (800c430 <rmw_uxrce_fini_node_memory+0x28>)
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	f7f3 ff04 	bl	8000220 <strcmp>
 800c418:	b940      	cbnz	r0, 800c42c <rmw_uxrce_fini_node_memory+0x24>
 800c41a:	6020      	str	r0, [r4, #0]
 800c41c:	6861      	ldr	r1, [r4, #4]
 800c41e:	b129      	cbz	r1, 800c42c <rmw_uxrce_fini_node_memory+0x24>
 800c420:	2500      	movs	r5, #0
 800c422:	4804      	ldr	r0, [pc, #16]	@ (800c434 <rmw_uxrce_fini_node_memory+0x2c>)
 800c424:	610d      	str	r5, [r1, #16]
 800c426:	f007 fe6b 	bl	8014100 <put_memory>
 800c42a:	6065      	str	r5, [r4, #4]
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
 800c42e:	bf00      	nop
 800c430:	080186c0 	.word	0x080186c0
 800c434:	2000ad44 	.word	0x2000ad44

0800c438 <rmw_uxrce_fini_publisher_memory>:
 800c438:	b510      	push	{r4, lr}
 800c43a:	4604      	mov	r4, r0
 800c43c:	6800      	ldr	r0, [r0, #0]
 800c43e:	b128      	cbz	r0, 800c44c <rmw_uxrce_fini_publisher_memory+0x14>
 800c440:	4b06      	ldr	r3, [pc, #24]	@ (800c45c <rmw_uxrce_fini_publisher_memory+0x24>)
 800c442:	6819      	ldr	r1, [r3, #0]
 800c444:	f7f3 feec 	bl	8000220 <strcmp>
 800c448:	b938      	cbnz	r0, 800c45a <rmw_uxrce_fini_publisher_memory+0x22>
 800c44a:	6020      	str	r0, [r4, #0]
 800c44c:	6861      	ldr	r1, [r4, #4]
 800c44e:	b121      	cbz	r1, 800c45a <rmw_uxrce_fini_publisher_memory+0x22>
 800c450:	4803      	ldr	r0, [pc, #12]	@ (800c460 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c452:	f007 fe55 	bl	8014100 <put_memory>
 800c456:	2300      	movs	r3, #0
 800c458:	6063      	str	r3, [r4, #4]
 800c45a:	bd10      	pop	{r4, pc}
 800c45c:	080186c0 	.word	0x080186c0
 800c460:	2000ad54 	.word	0x2000ad54

0800c464 <rmw_uxrce_fini_subscription_memory>:
 800c464:	b510      	push	{r4, lr}
 800c466:	4604      	mov	r4, r0
 800c468:	6800      	ldr	r0, [r0, #0]
 800c46a:	b128      	cbz	r0, 800c478 <rmw_uxrce_fini_subscription_memory+0x14>
 800c46c:	4b06      	ldr	r3, [pc, #24]	@ (800c488 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	f7f3 fed6 	bl	8000220 <strcmp>
 800c474:	b938      	cbnz	r0, 800c486 <rmw_uxrce_fini_subscription_memory+0x22>
 800c476:	6020      	str	r0, [r4, #0]
 800c478:	6861      	ldr	r1, [r4, #4]
 800c47a:	b121      	cbz	r1, 800c486 <rmw_uxrce_fini_subscription_memory+0x22>
 800c47c:	4803      	ldr	r0, [pc, #12]	@ (800c48c <rmw_uxrce_fini_subscription_memory+0x28>)
 800c47e:	f007 fe3f 	bl	8014100 <put_memory>
 800c482:	2300      	movs	r3, #0
 800c484:	6063      	str	r3, [r4, #4]
 800c486:	bd10      	pop	{r4, pc}
 800c488:	080186c0 	.word	0x080186c0
 800c48c:	2000ad94 	.word	0x2000ad94

0800c490 <rmw_uxrce_fini_service_memory>:
 800c490:	b510      	push	{r4, lr}
 800c492:	4604      	mov	r4, r0
 800c494:	6800      	ldr	r0, [r0, #0]
 800c496:	b128      	cbz	r0, 800c4a4 <rmw_uxrce_fini_service_memory+0x14>
 800c498:	4b06      	ldr	r3, [pc, #24]	@ (800c4b4 <rmw_uxrce_fini_service_memory+0x24>)
 800c49a:	6819      	ldr	r1, [r3, #0]
 800c49c:	f7f3 fec0 	bl	8000220 <strcmp>
 800c4a0:	b938      	cbnz	r0, 800c4b2 <rmw_uxrce_fini_service_memory+0x22>
 800c4a2:	6020      	str	r0, [r4, #0]
 800c4a4:	6861      	ldr	r1, [r4, #4]
 800c4a6:	b121      	cbz	r1, 800c4b2 <rmw_uxrce_fini_service_memory+0x22>
 800c4a8:	4803      	ldr	r0, [pc, #12]	@ (800c4b8 <rmw_uxrce_fini_service_memory+0x28>)
 800c4aa:	f007 fe29 	bl	8014100 <put_memory>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	6063      	str	r3, [r4, #4]
 800c4b2:	bd10      	pop	{r4, pc}
 800c4b4:	080186c0 	.word	0x080186c0
 800c4b8:	2000ad64 	.word	0x2000ad64

0800c4bc <rmw_uxrce_fini_client_memory>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	4604      	mov	r4, r0
 800c4c0:	6800      	ldr	r0, [r0, #0]
 800c4c2:	b128      	cbz	r0, 800c4d0 <rmw_uxrce_fini_client_memory+0x14>
 800c4c4:	4b06      	ldr	r3, [pc, #24]	@ (800c4e0 <rmw_uxrce_fini_client_memory+0x24>)
 800c4c6:	6819      	ldr	r1, [r3, #0]
 800c4c8:	f7f3 feaa 	bl	8000220 <strcmp>
 800c4cc:	b938      	cbnz	r0, 800c4de <rmw_uxrce_fini_client_memory+0x22>
 800c4ce:	6020      	str	r0, [r4, #0]
 800c4d0:	6861      	ldr	r1, [r4, #4]
 800c4d2:	b121      	cbz	r1, 800c4de <rmw_uxrce_fini_client_memory+0x22>
 800c4d4:	4803      	ldr	r0, [pc, #12]	@ (800c4e4 <rmw_uxrce_fini_client_memory+0x28>)
 800c4d6:	f007 fe13 	bl	8014100 <put_memory>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	6063      	str	r3, [r4, #4]
 800c4de:	bd10      	pop	{r4, pc}
 800c4e0:	080186c0 	.word	0x080186c0
 800c4e4:	20006474 	.word	0x20006474

0800c4e8 <rmw_uxrce_fini_topic_memory>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4803      	ldr	r0, [pc, #12]	@ (800c4fc <rmw_uxrce_fini_topic_memory+0x14>)
 800c4f0:	f007 fe06 	bl	8014100 <put_memory>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	61a3      	str	r3, [r4, #24]
 800c4f8:	bd10      	pop	{r4, pc}
 800c4fa:	bf00      	nop
 800c4fc:	2000ada4 	.word	0x2000ada4

0800c500 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c500:	b082      	sub	sp, #8
 800c502:	b530      	push	{r4, r5, lr}
 800c504:	4925      	ldr	r1, [pc, #148]	@ (800c59c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c506:	680d      	ldr	r5, [r1, #0]
 800c508:	ac03      	add	r4, sp, #12
 800c50a:	e884 000c 	stmia.w	r4, {r2, r3}
 800c50e:	461c      	mov	r4, r3
 800c510:	2d00      	cmp	r5, #0
 800c512:	d041      	beq.n	800c598 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c514:	462b      	mov	r3, r5
 800c516:	2100      	movs	r1, #0
 800c518:	689a      	ldr	r2, [r3, #8]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c520:	4290      	cmp	r0, r2
 800c522:	bf08      	it	eq
 800c524:	3101      	addeq	r1, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1f6      	bne.n	800c518 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c52a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c52e:	2b02      	cmp	r3, #2
 800c530:	d029      	beq.n	800c586 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c532:	d907      	bls.n	800c544 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c534:	2b03      	cmp	r3, #3
 800c536:	d005      	beq.n	800c544 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c538:	2100      	movs	r1, #0
 800c53a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c53e:	4608      	mov	r0, r1
 800c540:	b002      	add	sp, #8
 800c542:	4770      	bx	lr
 800c544:	b314      	cbz	r4, 800c58c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c546:	428c      	cmp	r4, r1
 800c548:	d820      	bhi.n	800c58c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c54a:	2d00      	cmp	r5, #0
 800c54c:	d0f4      	beq.n	800c538 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c54e:	2100      	movs	r1, #0
 800c550:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c554:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c558:	e002      	b.n	800c560 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c55a:	686d      	ldr	r5, [r5, #4]
 800c55c:	2d00      	cmp	r5, #0
 800c55e:	d0ec      	beq.n	800c53a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c560:	68ab      	ldr	r3, [r5, #8]
 800c562:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c566:	4290      	cmp	r0, r2
 800c568:	d1f7      	bne.n	800c55a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c56a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c56e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c572:	4562      	cmp	r2, ip
 800c574:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c578:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c57c:	daed      	bge.n	800c55a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c57e:	4694      	mov	ip, r2
 800c580:	461c      	mov	r4, r3
 800c582:	4629      	mov	r1, r5
 800c584:	e7e9      	b.n	800c55a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c586:	b10c      	cbz	r4, 800c58c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c588:	428c      	cmp	r4, r1
 800c58a:	d9d5      	bls.n	800c538 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c58c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c590:	4802      	ldr	r0, [pc, #8]	@ (800c59c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c592:	b002      	add	sp, #8
 800c594:	f007 bda4 	b.w	80140e0 <get_memory>
 800c598:	4629      	mov	r1, r5
 800c59a:	e7c6      	b.n	800c52a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c59c:	2000ad84 	.word	0x2000ad84

0800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c5a0:	4b11      	ldr	r3, [pc, #68]	@ (800c5e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	b530      	push	{r4, r5, lr}
 800c5a6:	b1e3      	cbz	r3, 800c5e2 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c5a8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c5ac:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c5b0:	2400      	movs	r4, #0
 800c5b2:	e001      	b.n	800c5b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	b193      	cbz	r3, 800c5de <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c5b8:	689a      	ldr	r2, [r3, #8]
 800c5ba:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c5be:	4288      	cmp	r0, r1
 800c5c0:	d1f8      	bne.n	800c5b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c5c2:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c5c6:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c5ca:	4571      	cmp	r1, lr
 800c5cc:	eb72 050c 	sbcs.w	r5, r2, ip
 800c5d0:	daf0      	bge.n	800c5b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c5d2:	461c      	mov	r4, r3
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	468e      	mov	lr, r1
 800c5d8:	4694      	mov	ip, r2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d1ec      	bne.n	800c5b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c5de:	4620      	mov	r0, r4
 800c5e0:	bd30      	pop	{r4, r5, pc}
 800c5e2:	461c      	mov	r4, r3
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	bd30      	pop	{r4, r5, pc}
 800c5e8:	2000ad84 	.word	0x2000ad84
 800c5ec:	00000000 	.word	0x00000000

0800c5f0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	4b3c      	ldr	r3, [pc, #240]	@ (800c6e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c5f6:	ed2d 8b06 	vpush	{d8-d10}
 800c5fa:	681f      	ldr	r7, [r3, #0]
 800c5fc:	b08d      	sub	sp, #52	@ 0x34
 800c5fe:	f008 f98b 	bl	8014918 <rmw_uros_epoch_nanos>
 800c602:	2f00      	cmp	r7, #0
 800c604:	d05d      	beq.n	800c6c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c606:	46b8      	mov	r8, r7
 800c608:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c6d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c60c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c610:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c614:	2b04      	cmp	r3, #4
 800c616:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c6d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c61a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c6e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c61e:	4681      	mov	r9, r0
 800c620:	468a      	mov	sl, r1
 800c622:	ac04      	add	r4, sp, #16
 800c624:	d03f      	beq.n	800c6a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c626:	2b05      	cmp	r3, #5
 800c628:	d044      	beq.n	800c6b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c62a:	2b03      	cmp	r3, #3
 800c62c:	d03b      	beq.n	800c6a6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c62e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c632:	ed8d ab06 	vstr	d10, [sp, #24]
 800c636:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c63a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c63e:	ab08      	add	r3, sp, #32
 800c640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c642:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c646:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c64a:	f007 fa95 	bl	8013b78 <rmw_time_equal>
 800c64e:	b118      	cbz	r0, 800c658 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c650:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c654:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c658:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c65c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c660:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c664:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c668:	f007 fada 	bl	8013c20 <rmw_time_total_nsec>
 800c66c:	1830      	adds	r0, r6, r0
 800c66e:	eb47 0101 	adc.w	r1, r7, r1
 800c672:	4548      	cmp	r0, r9
 800c674:	eb71 030a 	sbcs.w	r3, r1, sl
 800c678:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c67c:	db05      	blt.n	800c68a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c67e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c682:	4591      	cmp	r9, r2
 800c684:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c688:	da03      	bge.n	800c692 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c68a:	4817      	ldr	r0, [pc, #92]	@ (800c6e8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c68c:	4641      	mov	r1, r8
 800c68e:	f007 fd37 	bl	8014100 <put_memory>
 800c692:	f1bb 0f00 	cmp.w	fp, #0
 800c696:	d014      	beq.n	800c6c2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c698:	46d8      	mov	r8, fp
 800c69a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c69e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c6a2:	2b04      	cmp	r3, #4
 800c6a4:	d1bf      	bne.n	800c626 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c6a6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c6aa:	3340      	adds	r3, #64	@ 0x40
 800c6ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c6b2:	e7c0      	b.n	800c636 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c6b4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c6b8:	3348      	adds	r3, #72	@ 0x48
 800c6ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c6c0:	e7b9      	b.n	800c636 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c6c2:	b00d      	add	sp, #52	@ 0x34
 800c6c4:	ecbd 8b06 	vpop	{d8-d10}
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	f3af 8000 	nop.w
	...
 800c6d8:	00000001 	.word	0x00000001
 800c6dc:	00000000 	.word	0x00000000
 800c6e0:	0000001e 	.word	0x0000001e
 800c6e4:	00000000 	.word	0x00000000
 800c6e8:	2000ad84 	.word	0x2000ad84

0800c6ec <run_xrce_session>:
 800c6ec:	b510      	push	{r4, lr}
 800c6ee:	788c      	ldrb	r4, [r1, #2]
 800c6f0:	b086      	sub	sp, #24
 800c6f2:	2c01      	cmp	r4, #1
 800c6f4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c6f8:	d00c      	beq.n	800c714 <run_xrce_session+0x28>
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	f10d 020e 	add.w	r2, sp, #14
 800c704:	f10d 0317 	add.w	r3, sp, #23
 800c708:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c70c:	f001 fb52 	bl	800ddb4 <uxr_run_session_until_all_status>
 800c710:	b006      	add	sp, #24
 800c712:	bd10      	pop	{r4, pc}
 800c714:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c718:	f000 ff66 	bl	800d5e8 <uxr_flash_output_streams>
 800c71c:	4620      	mov	r0, r4
 800c71e:	b006      	add	sp, #24
 800c720:	bd10      	pop	{r4, pc}
 800c722:	bf00      	nop

0800c724 <convert_qos_profile>:
 800c724:	7a4a      	ldrb	r2, [r1, #9]
 800c726:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c72a:	2a02      	cmp	r2, #2
 800c72c:	bf18      	it	ne
 800c72e:	2200      	movne	r2, #0
 800c730:	7002      	strb	r2, [r0, #0]
 800c732:	780a      	ldrb	r2, [r1, #0]
 800c734:	8889      	ldrh	r1, [r1, #4]
 800c736:	8081      	strh	r1, [r0, #4]
 800c738:	f1ac 0c02 	sub.w	ip, ip, #2
 800c73c:	f1a2 0202 	sub.w	r2, r2, #2
 800c740:	fabc fc8c 	clz	ip, ip
 800c744:	fab2 f282 	clz	r2, r2
 800c748:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c74c:	0952      	lsrs	r2, r2, #5
 800c74e:	f880 c001 	strb.w	ip, [r0, #1]
 800c752:	7082      	strb	r2, [r0, #2]
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop

0800c758 <generate_service_topics>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	461c      	mov	r4, r3
 800c75e:	4b12      	ldr	r3, [pc, #72]	@ (800c7a8 <generate_service_topics+0x50>)
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	4605      	mov	r5, r0
 800c764:	4b11      	ldr	r3, [pc, #68]	@ (800c7ac <generate_service_topics+0x54>)
 800c766:	9000      	str	r0, [sp, #0]
 800c768:	4616      	mov	r6, r2
 800c76a:	4608      	mov	r0, r1
 800c76c:	4a10      	ldr	r2, [pc, #64]	@ (800c7b0 <generate_service_topics+0x58>)
 800c76e:	4621      	mov	r1, r4
 800c770:	f009 fed2 	bl	8016518 <sniprintf>
 800c774:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b4 <generate_service_topics+0x5c>)
 800c776:	9301      	str	r3, [sp, #4]
 800c778:	4601      	mov	r1, r0
 800c77a:	9500      	str	r5, [sp, #0]
 800c77c:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b8 <generate_service_topics+0x60>)
 800c77e:	4a0c      	ldr	r2, [pc, #48]	@ (800c7b0 <generate_service_topics+0x58>)
 800c780:	460d      	mov	r5, r1
 800c782:	4630      	mov	r0, r6
 800c784:	4621      	mov	r1, r4
 800c786:	f009 fec7 	bl	8016518 <sniprintf>
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	db01      	blt.n	800c792 <generate_service_topics+0x3a>
 800c78e:	42ac      	cmp	r4, r5
 800c790:	dc02      	bgt.n	800c798 <generate_service_topics+0x40>
 800c792:	2000      	movs	r0, #0
 800c794:	b002      	add	sp, #8
 800c796:	bd70      	pop	{r4, r5, r6, pc}
 800c798:	2800      	cmp	r0, #0
 800c79a:	dbfa      	blt.n	800c792 <generate_service_topics+0x3a>
 800c79c:	4284      	cmp	r4, r0
 800c79e:	bfd4      	ite	le
 800c7a0:	2000      	movle	r0, #0
 800c7a2:	2001      	movgt	r0, #1
 800c7a4:	b002      	add	sp, #8
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	08017d64 	.word	0x08017d64
 800c7ac:	08017d60 	.word	0x08017d60
 800c7b0:	08017d3c 	.word	0x08017d3c
 800c7b4:	08017d58 	.word	0x08017d58
 800c7b8:	08017d54 	.word	0x08017d54

0800c7bc <generate_service_types>:
 800c7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	6880      	ldr	r0, [r0, #8]
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	4617      	mov	r7, r2
 800c7ca:	461e      	mov	r6, r3
 800c7cc:	4780      	blx	r0
 800c7ce:	68eb      	ldr	r3, [r5, #12]
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	4798      	blx	r3
 800c7d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c7d8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	7023      	strb	r3, [r4, #0]
 800c7e0:	6813      	ldr	r3, [r2, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d042      	beq.n	800c86c <generate_service_types+0xb0>
 800c7e6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800c880 <generate_service_types+0xc4>
 800c7ea:	4641      	mov	r1, r8
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4c22      	ldr	r4, [pc, #136]	@ (800c878 <generate_service_types+0xbc>)
 800c7f0:	9405      	str	r4, [sp, #20]
 800c7f2:	6852      	ldr	r2, [r2, #4]
 800c7f4:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800c888 <generate_service_types+0xcc>
 800c7f8:	9204      	str	r2, [sp, #16]
 800c7fa:	9100      	str	r1, [sp, #0]
 800c7fc:	e9cd 4802 	strd	r4, r8, [sp, #8]
 800c800:	4a1e      	ldr	r2, [pc, #120]	@ (800c87c <generate_service_types+0xc0>)
 800c802:	f8cd a004 	str.w	sl, [sp, #4]
 800c806:	4631      	mov	r1, r6
 800c808:	f009 fe86 	bl	8016518 <sniprintf>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	db1f      	blt.n	800c850 <generate_service_types+0x94>
 800c810:	2300      	movs	r3, #0
 800c812:	703b      	strb	r3, [r7, #0]
 800c814:	f8d9 3000 	ldr.w	r3, [r9]
 800c818:	42b0      	cmp	r0, r6
 800c81a:	bfac      	ite	ge
 800c81c:	2500      	movge	r5, #0
 800c81e:	2501      	movlt	r5, #1
 800c820:	b1eb      	cbz	r3, 800c85e <generate_service_types+0xa2>
 800c822:	4a17      	ldr	r2, [pc, #92]	@ (800c880 <generate_service_types+0xc4>)
 800c824:	9405      	str	r4, [sp, #20]
 800c826:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c82a:	9200      	str	r2, [sp, #0]
 800c82c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800c830:	e9cd a401 	strd	sl, r4, [sp, #4]
 800c834:	4a11      	ldr	r2, [pc, #68]	@ (800c87c <generate_service_types+0xc0>)
 800c836:	4638      	mov	r0, r7
 800c838:	4631      	mov	r1, r6
 800c83a:	f009 fe6d 	bl	8016518 <sniprintf>
 800c83e:	2800      	cmp	r0, #0
 800c840:	db10      	blt.n	800c864 <generate_service_types+0xa8>
 800c842:	42b0      	cmp	r0, r6
 800c844:	bfb4      	ite	lt
 800c846:	4628      	movlt	r0, r5
 800c848:	2000      	movge	r0, #0
 800c84a:	b006      	add	sp, #24
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	2300      	movs	r3, #0
 800c852:	703b      	strb	r3, [r7, #0]
 800c854:	f8d9 3000 	ldr.w	r3, [r9]
 800c858:	2500      	movs	r5, #0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1e1      	bne.n	800c822 <generate_service_types+0x66>
 800c85e:	4b09      	ldr	r3, [pc, #36]	@ (800c884 <generate_service_types+0xc8>)
 800c860:	461a      	mov	r2, r3
 800c862:	e7df      	b.n	800c824 <generate_service_types+0x68>
 800c864:	2000      	movs	r0, #0
 800c866:	b006      	add	sp, #24
 800c868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c86c:	4b05      	ldr	r3, [pc, #20]	@ (800c884 <generate_service_types+0xc8>)
 800c86e:	f8df 8010 	ldr.w	r8, [pc, #16]	@ 800c880 <generate_service_types+0xc4>
 800c872:	4619      	mov	r1, r3
 800c874:	e7ba      	b.n	800c7ec <generate_service_types+0x30>
 800c876:	bf00      	nop
 800c878:	08017d44 	.word	0x08017d44
 800c87c:	08017d34 	.word	0x08017d34
 800c880:	08017d30 	.word	0x08017d30
 800c884:	08018498 	.word	0x08018498
 800c888:	08017d48 	.word	0x08017d48

0800c88c <generate_type_name>:
 800c88c:	b530      	push	{r4, r5, lr}
 800c88e:	2300      	movs	r3, #0
 800c890:	700b      	strb	r3, [r1, #0]
 800c892:	6803      	ldr	r3, [r0, #0]
 800c894:	b087      	sub	sp, #28
 800c896:	4614      	mov	r4, r2
 800c898:	b1d3      	cbz	r3, 800c8d0 <generate_type_name+0x44>
 800c89a:	4a0f      	ldr	r2, [pc, #60]	@ (800c8d8 <generate_type_name+0x4c>)
 800c89c:	4615      	mov	r5, r2
 800c89e:	9203      	str	r2, [sp, #12]
 800c8a0:	9500      	str	r5, [sp, #0]
 800c8a2:	6842      	ldr	r2, [r0, #4]
 800c8a4:	480d      	ldr	r0, [pc, #52]	@ (800c8dc <generate_type_name+0x50>)
 800c8a6:	9001      	str	r0, [sp, #4]
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	490d      	ldr	r1, [pc, #52]	@ (800c8e0 <generate_type_name+0x54>)
 800c8ac:	9204      	str	r2, [sp, #16]
 800c8ae:	9105      	str	r1, [sp, #20]
 800c8b0:	9102      	str	r1, [sp, #8]
 800c8b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c8e4 <generate_type_name+0x58>)
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	f009 fe2f 	bl	8016518 <sniprintf>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	db05      	blt.n	800c8ca <generate_type_name+0x3e>
 800c8be:	4284      	cmp	r4, r0
 800c8c0:	bfd4      	ite	le
 800c8c2:	2000      	movle	r0, #0
 800c8c4:	2001      	movgt	r0, #1
 800c8c6:	b007      	add	sp, #28
 800c8c8:	bd30      	pop	{r4, r5, pc}
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	b007      	add	sp, #28
 800c8ce:	bd30      	pop	{r4, r5, pc}
 800c8d0:	4b05      	ldr	r3, [pc, #20]	@ (800c8e8 <generate_type_name+0x5c>)
 800c8d2:	4a01      	ldr	r2, [pc, #4]	@ (800c8d8 <generate_type_name+0x4c>)
 800c8d4:	461d      	mov	r5, r3
 800c8d6:	e7e2      	b.n	800c89e <generate_type_name+0x12>
 800c8d8:	08017d30 	.word	0x08017d30
 800c8dc:	08017d48 	.word	0x08017d48
 800c8e0:	08017d44 	.word	0x08017d44
 800c8e4:	08017d34 	.word	0x08017d34
 800c8e8:	08018498 	.word	0x08018498

0800c8ec <generate_topic_name>:
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	9000      	str	r0, [sp, #0]
 800c8f4:	4b08      	ldr	r3, [pc, #32]	@ (800c918 <generate_topic_name+0x2c>)
 800c8f6:	4a09      	ldr	r2, [pc, #36]	@ (800c91c <generate_topic_name+0x30>)
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	f009 fe0c 	bl	8016518 <sniprintf>
 800c900:	2800      	cmp	r0, #0
 800c902:	db05      	blt.n	800c910 <generate_topic_name+0x24>
 800c904:	4284      	cmp	r4, r0
 800c906:	bfd4      	ite	le
 800c908:	2000      	movle	r0, #0
 800c90a:	2001      	movgt	r0, #1
 800c90c:	b002      	add	sp, #8
 800c90e:	bd10      	pop	{r4, pc}
 800c910:	2000      	movs	r0, #0
 800c912:	b002      	add	sp, #8
 800c914:	bd10      	pop	{r4, pc}
 800c916:	bf00      	nop
 800c918:	08017d6c 	.word	0x08017d6c
 800c91c:	08017d4c 	.word	0x08017d4c

0800c920 <is_uxrce_rmw_identifier_valid>:
 800c920:	b510      	push	{r4, lr}
 800c922:	4604      	mov	r4, r0
 800c924:	b140      	cbz	r0, 800c938 <is_uxrce_rmw_identifier_valid+0x18>
 800c926:	f007 fc43 	bl	80141b0 <rmw_get_implementation_identifier>
 800c92a:	4601      	mov	r1, r0
 800c92c:	4620      	mov	r0, r4
 800c92e:	f7f3 fc77 	bl	8000220 <strcmp>
 800c932:	fab0 f080 	clz	r0, r0
 800c936:	0940      	lsrs	r0, r0, #5
 800c938:	bd10      	pop	{r4, pc}
 800c93a:	bf00      	nop

0800c93c <get_message_typesupport_handle>:
 800c93c:	6883      	ldr	r3, [r0, #8]
 800c93e:	4718      	bx	r3

0800c940 <get_message_typesupport_handle_function>:
 800c940:	b510      	push	{r4, lr}
 800c942:	4604      	mov	r4, r0
 800c944:	6800      	ldr	r0, [r0, #0]
 800c946:	f7f3 fc6b 	bl	8000220 <strcmp>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	bf0c      	ite	eq
 800c94e:	4620      	moveq	r0, r4
 800c950:	2000      	movne	r0, #0
 800c952:	bd10      	pop	{r4, pc}

0800c954 <get_service_typesupport_handle>:
 800c954:	6883      	ldr	r3, [r0, #8]
 800c956:	4718      	bx	r3

0800c958 <get_service_typesupport_handle_function>:
 800c958:	b510      	push	{r4, lr}
 800c95a:	4604      	mov	r4, r0
 800c95c:	6800      	ldr	r0, [r0, #0]
 800c95e:	f7f3 fc5f 	bl	8000220 <strcmp>
 800c962:	2800      	cmp	r0, #0
 800c964:	bf0c      	ite	eq
 800c966:	4620      	moveq	r0, r4
 800c968:	2000      	movne	r0, #0
 800c96a:	bd10      	pop	{r4, pc}

0800c96c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800c96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	6805      	ldr	r5, [r0, #0]
 800c972:	4604      	mov	r4, r0
 800c974:	4628      	mov	r0, r5
 800c976:	460e      	mov	r6, r1
 800c978:	f7f3 fc52 	bl	8000220 <strcmp>
 800c97c:	b1c8      	cbz	r0, 800c9b2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800c97e:	4b11      	ldr	r3, [pc, #68]	@ (800c9c4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	429d      	cmp	r5, r3
 800c984:	d112      	bne.n	800c9ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c986:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c98a:	f8d8 4000 	ldr.w	r4, [r8]
 800c98e:	b16c      	cbz	r4, 800c9ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800c990:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c994:	2700      	movs	r7, #0
 800c996:	3d04      	subs	r5, #4
 800c998:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c99c:	4631      	mov	r1, r6
 800c99e:	f7f3 fc3f 	bl	8000220 <strcmp>
 800c9a2:	00bb      	lsls	r3, r7, #2
 800c9a4:	b140      	cbz	r0, 800c9b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800c9a6:	3701      	adds	r7, #1
 800c9a8:	42bc      	cmp	r4, r7
 800c9aa:	d1f5      	bne.n	800c998 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c0:	58d3      	ldr	r3, [r2, r3]
 800c9c2:	4718      	bx	r3
 800c9c4:	200001bc 	.word	0x200001bc

0800c9c8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9cc:	6805      	ldr	r5, [r0, #0]
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	460e      	mov	r6, r1
 800c9d4:	f7f3 fc24 	bl	8000220 <strcmp>
 800c9d8:	b1c8      	cbz	r0, 800ca0e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800c9da:	4b11      	ldr	r3, [pc, #68]	@ (800ca20 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	429d      	cmp	r5, r3
 800c9e0:	d112      	bne.n	800ca08 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c9e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800c9e6:	f8d8 4000 	ldr.w	r4, [r8]
 800c9ea:	b16c      	cbz	r4, 800ca08 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800c9ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c9f0:	2700      	movs	r7, #0
 800c9f2:	3d04      	subs	r5, #4
 800c9f4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800c9f8:	4631      	mov	r1, r6
 800c9fa:	f7f3 fc11 	bl	8000220 <strcmp>
 800c9fe:	00bb      	lsls	r3, r7, #2
 800ca00:	b140      	cbz	r0, 800ca14 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800ca02:	3701      	adds	r7, #1
 800ca04:	42bc      	cmp	r4, r7
 800ca06:	d1f5      	bne.n	800c9f4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800ca08:	2000      	movs	r0, #0
 800ca0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca0e:	4620      	mov	r0, r4
 800ca10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ca18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca1c:	58d3      	ldr	r3, [r2, r3]
 800ca1e:	4718      	bx	r3
 800ca20:	200001bc 	.word	0x200001bc

0800ca24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ca24:	4b04      	ldr	r3, [pc, #16]	@ (800ca38 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	b10a      	cbz	r2, 800ca2e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ca2a:	4803      	ldr	r0, [pc, #12]	@ (800ca38 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca2c:	4770      	bx	lr
 800ca2e:	4a03      	ldr	r2, [pc, #12]	@ (800ca3c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ca30:	4801      	ldr	r0, [pc, #4]	@ (800ca38 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca32:	6812      	ldr	r2, [r2, #0]
 800ca34:	601a      	str	r2, [r3, #0]
 800ca36:	4770      	bx	lr
 800ca38:	200001cc 	.word	0x200001cc
 800ca3c:	200001bc 	.word	0x200001bc

0800ca40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ca40:	4a02      	ldr	r2, [pc, #8]	@ (800ca4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800ca42:	4b03      	ldr	r3, [pc, #12]	@ (800ca50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800ca44:	6812      	ldr	r2, [r2, #0]
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	200001bc 	.word	0x200001bc
 800ca50:	200001cc 	.word	0x200001cc

0800ca54 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800ca54:	f007 bf6e 	b.w	8014934 <std_msgs__msg__Int32__init>

0800ca58 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800ca58:	f007 bf70 	b.w	801493c <std_msgs__msg__Int32__fini>

0800ca5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ca5c:	4b04      	ldr	r3, [pc, #16]	@ (800ca70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	b10a      	cbz	r2, 800ca66 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ca62:	4803      	ldr	r0, [pc, #12]	@ (800ca70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca64:	4770      	bx	lr
 800ca66:	4a03      	ldr	r2, [pc, #12]	@ (800ca74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ca68:	4801      	ldr	r0, [pc, #4]	@ (800ca70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca6a:	6812      	ldr	r2, [r2, #0]
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	4770      	bx	lr
 800ca70:	20000214 	.word	0x20000214
 800ca74:	200001c0 	.word	0x200001c0

0800ca78 <_Int32__max_serialized_size>:
 800ca78:	b508      	push	{r3, lr}
 800ca7a:	2104      	movs	r1, #4
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	f7fd f85d 	bl	8009b3c <ucdr_alignment>
 800ca82:	3004      	adds	r0, #4
 800ca84:	bd08      	pop	{r3, pc}
 800ca86:	bf00      	nop

0800ca88 <_Int32__cdr_deserialize>:
 800ca88:	b109      	cbz	r1, 800ca8e <_Int32__cdr_deserialize+0x6>
 800ca8a:	f7fc bdd9 	b.w	8009640 <ucdr_deserialize_int32_t>
 800ca8e:	4608      	mov	r0, r1
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop

0800ca94 <get_serialized_size_std_msgs__msg__Int32>:
 800ca94:	b138      	cbz	r0, 800caa6 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800ca96:	b508      	push	{r3, lr}
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	2104      	movs	r1, #4
 800ca9e:	f7fd f84d 	bl	8009b3c <ucdr_alignment>
 800caa2:	3004      	adds	r0, #4
 800caa4:	bd08      	pop	{r3, pc}
 800caa6:	4770      	bx	lr

0800caa8 <_Int32__cdr_serialize>:
 800caa8:	460a      	mov	r2, r1
 800caaa:	b118      	cbz	r0, 800cab4 <_Int32__cdr_serialize+0xc>
 800caac:	6801      	ldr	r1, [r0, #0]
 800caae:	4610      	mov	r0, r2
 800cab0:	f7fc bd2e 	b.w	8009510 <ucdr_serialize_int32_t>
 800cab4:	4770      	bx	lr
 800cab6:	bf00      	nop

0800cab8 <_Int32__get_serialized_size>:
 800cab8:	b130      	cbz	r0, 800cac8 <_Int32__get_serialized_size+0x10>
 800caba:	b508      	push	{r3, lr}
 800cabc:	2104      	movs	r1, #4
 800cabe:	2000      	movs	r0, #0
 800cac0:	f7fd f83c 	bl	8009b3c <ucdr_alignment>
 800cac4:	3004      	adds	r0, #4
 800cac6:	bd08      	pop	{r3, pc}
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop

0800cacc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800cacc:	4800      	ldr	r0, [pc, #0]	@ (800cad0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800cace:	4770      	bx	lr
 800cad0:	20000220 	.word	0x20000220

0800cad4 <example_interfaces__srv__AddTwoInts_Request__init>:
 800cad4:	3800      	subs	r0, #0
 800cad6:	bf18      	it	ne
 800cad8:	2001      	movne	r0, #1
 800cada:	4770      	bx	lr

0800cadc <example_interfaces__srv__AddTwoInts_Request__fini>:
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop

0800cae0 <example_interfaces__srv__AddTwoInts_Response__init>:
 800cae0:	3800      	subs	r0, #0
 800cae2:	bf18      	it	ne
 800cae4:	2001      	movne	r0, #1
 800cae6:	4770      	bx	lr

0800cae8 <example_interfaces__srv__AddTwoInts_Response__fini>:
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop

0800caec <uxr_buffer_delete_entity>:
 800caec:	b510      	push	{r4, lr}
 800caee:	2300      	movs	r3, #0
 800caf0:	b08e      	sub	sp, #56	@ 0x38
 800caf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800caf6:	2303      	movs	r3, #3
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	2204      	movs	r2, #4
 800cafc:	ab06      	add	r3, sp, #24
 800cafe:	4604      	mov	r4, r0
 800cb00:	9103      	str	r1, [sp, #12]
 800cb02:	f001 fb7f 	bl	800e204 <uxr_prepare_stream_to_write_submessage>
 800cb06:	b918      	cbnz	r0, 800cb10 <uxr_buffer_delete_entity+0x24>
 800cb08:	4604      	mov	r4, r0
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	b00e      	add	sp, #56	@ 0x38
 800cb0e:	bd10      	pop	{r4, pc}
 800cb10:	9902      	ldr	r1, [sp, #8]
 800cb12:	aa05      	add	r2, sp, #20
 800cb14:	4620      	mov	r0, r4
 800cb16:	f001 fcab 	bl	800e470 <uxr_init_base_object_request>
 800cb1a:	a905      	add	r1, sp, #20
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	a806      	add	r0, sp, #24
 800cb20:	f003 fbc2 	bl	80102a8 <uxr_serialize_DELETE_Payload>
 800cb24:	4620      	mov	r0, r4
 800cb26:	b00e      	add	sp, #56	@ 0x38
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	bf00      	nop

0800cb2c <uxr_common_create_entity>:
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800cb32:	b08c      	sub	sp, #48	@ 0x30
 800cb34:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cb38:	f1bc 0f01 	cmp.w	ip, #1
 800cb3c:	bf0c      	ite	eq
 800cb3e:	f003 0201 	andeq.w	r2, r3, #1
 800cb42:	2200      	movne	r2, #0
 800cb44:	330e      	adds	r3, #14
 800cb46:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800cb4a:	9101      	str	r1, [sp, #4]
 800cb4c:	441a      	add	r2, r3
 800cb4e:	2301      	movs	r3, #1
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	9903      	ldr	r1, [sp, #12]
 800cb54:	ab04      	add	r3, sp, #16
 800cb56:	b292      	uxth	r2, r2
 800cb58:	4604      	mov	r4, r0
 800cb5a:	f001 fb53 	bl	800e204 <uxr_prepare_stream_to_write_submessage>
 800cb5e:	b918      	cbnz	r0, 800cb68 <uxr_common_create_entity+0x3c>
 800cb60:	4604      	mov	r4, r0
 800cb62:	4620      	mov	r0, r4
 800cb64:	b00c      	add	sp, #48	@ 0x30
 800cb66:	bd10      	pop	{r4, pc}
 800cb68:	9902      	ldr	r1, [sp, #8]
 800cb6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	f001 fc7f 	bl	800e470 <uxr_init_base_object_request>
 800cb72:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb74:	4604      	mov	r4, r0
 800cb76:	a804      	add	r0, sp, #16
 800cb78:	f003 faf2 	bl	8010160 <uxr_serialize_CREATE_Payload>
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	b00c      	add	sp, #48	@ 0x30
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	bf00      	nop

0800cb84 <uxr_buffer_create_participant_bin>:
 800cb84:	b570      	push	{r4, r5, r6, lr}
 800cb86:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800cb8a:	ac11      	add	r4, sp, #68	@ 0x44
 800cb8c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800cb90:	2303      	movs	r3, #3
 800cb92:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cb96:	7223      	strb	r3, [r4, #8]
 800cb98:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800cb9a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800cb9e:	2201      	movs	r2, #1
 800cba0:	2100      	movs	r1, #0
 800cba2:	4605      	mov	r5, r0
 800cba4:	7122      	strb	r2, [r4, #4]
 800cba6:	f88d 1014 	strb.w	r1, [sp, #20]
 800cbaa:	b1cb      	cbz	r3, 800cbe0 <uxr_buffer_create_participant_bin+0x5c>
 800cbac:	f88d 201c 	strb.w	r2, [sp, #28]
 800cbb0:	9308      	str	r3, [sp, #32]
 800cbb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbb6:	a915      	add	r1, sp, #84	@ 0x54
 800cbb8:	a809      	add	r0, sp, #36	@ 0x24
 800cbba:	f7fc ffbb 	bl	8009b34 <ucdr_init_buffer>
 800cbbe:	a905      	add	r1, sp, #20
 800cbc0:	a809      	add	r0, sp, #36	@ 0x24
 800cbc2:	f002 fe7b 	bl	800f8bc <uxr_serialize_OBJK_DomainParticipant_Binary>
 800cbc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbc8:	9600      	str	r6, [sp, #0]
 800cbca:	9401      	str	r4, [sp, #4]
 800cbcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cbd0:	60e3      	str	r3, [r4, #12]
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	f7ff ffa9 	bl	800cb2c <uxr_common_create_entity>
 800cbda:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	f88d 301c 	strb.w	r3, [sp, #28]
 800cbe4:	e7e5      	b.n	800cbb2 <uxr_buffer_create_participant_bin+0x2e>
 800cbe6:	bf00      	nop

0800cbe8 <uxr_buffer_create_topic_bin>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800cbee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cbf2:	9105      	str	r1, [sp, #20]
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	a997      	add	r1, sp, #604	@ 0x25c
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	2302      	movs	r3, #2
 800cbfc:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800cc00:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800cc04:	f000 fa92 	bl	800d12c <uxr_object_id_to_raw>
 800cc08:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800cc0a:	9306      	str	r3, [sp, #24]
 800cc0c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800cc0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc10:	2303      	movs	r3, #3
 800cc12:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cc16:	2301      	movs	r3, #1
 800cc18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc1c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800cc20:	a917      	add	r1, sp, #92	@ 0x5c
 800cc22:	2300      	movs	r3, #0
 800cc24:	a80b      	add	r0, sp, #44	@ 0x2c
 800cc26:	f88d 301c 	strb.w	r3, [sp, #28]
 800cc2a:	f7fc ff83 	bl	8009b34 <ucdr_init_buffer>
 800cc2e:	a906      	add	r1, sp, #24
 800cc30:	a80b      	add	r0, sp, #44	@ 0x2c
 800cc32:	f002 fe65 	bl	800f900 <uxr_serialize_OBJK_Topic_Binary>
 800cc36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc38:	9316      	str	r3, [sp, #88]	@ 0x58
 800cc3a:	ac13      	add	r4, sp, #76	@ 0x4c
 800cc3c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cc40:	9600      	str	r6, [sp, #0]
 800cc42:	9401      	str	r4, [sp, #4]
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	4628      	mov	r0, r5
 800cc48:	f7ff ff70 	bl	800cb2c <uxr_common_create_entity>
 800cc4c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800cc50:	bd70      	pop	{r4, r5, r6, pc}
 800cc52:	bf00      	nop

0800cc54 <uxr_buffer_create_publisher_bin>:
 800cc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc56:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	9105      	str	r1, [sp, #20]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	2603      	movs	r6, #3
 800cc62:	a992      	add	r1, sp, #584	@ 0x248
 800cc64:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cc68:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800cc6c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800cc70:	f000 fa5c 	bl	800d12c <uxr_object_id_to_raw>
 800cc74:	2300      	movs	r3, #0
 800cc76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc7a:	a912      	add	r1, sp, #72	@ 0x48
 800cc7c:	a806      	add	r0, sp, #24
 800cc7e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800cc82:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800cc86:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800cc8a:	f7fc ff53 	bl	8009b34 <ucdr_init_buffer>
 800cc8e:	a993      	add	r1, sp, #588	@ 0x24c
 800cc90:	a806      	add	r0, sp, #24
 800cc92:	f002 fee9 	bl	800fa68 <uxr_serialize_OBJK_Publisher_Binary>
 800cc96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc98:	9311      	str	r3, [sp, #68]	@ 0x44
 800cc9a:	ac0e      	add	r4, sp, #56	@ 0x38
 800cc9c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cca0:	9700      	str	r7, [sp, #0]
 800cca2:	9401      	str	r4, [sp, #4]
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	4628      	mov	r0, r5
 800cca8:	f7ff ff40 	bl	800cb2c <uxr_common_create_entity>
 800ccac:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800ccb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb2:	bf00      	nop

0800ccb4 <uxr_buffer_create_subscriber_bin>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800ccba:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ccbe:	9105      	str	r1, [sp, #20]
 800ccc0:	4605      	mov	r5, r0
 800ccc2:	a992      	add	r1, sp, #584	@ 0x248
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	2304      	movs	r3, #4
 800ccc8:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800cccc:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800ccd0:	f000 fa2c 	bl	800d12c <uxr_object_id_to_raw>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccda:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ccde:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800cce2:	a912      	add	r1, sp, #72	@ 0x48
 800cce4:	2303      	movs	r3, #3
 800cce6:	a806      	add	r0, sp, #24
 800cce8:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800ccec:	f7fc ff22 	bl	8009b34 <ucdr_init_buffer>
 800ccf0:	a993      	add	r1, sp, #588	@ 0x24c
 800ccf2:	a806      	add	r0, sp, #24
 800ccf4:	f002 ff68 	bl	800fbc8 <uxr_serialize_OBJK_Subscriber_Binary>
 800ccf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccfa:	9311      	str	r3, [sp, #68]	@ 0x44
 800ccfc:	ac0e      	add	r4, sp, #56	@ 0x38
 800ccfe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cd02:	9600      	str	r6, [sp, #0]
 800cd04:	9401      	str	r4, [sp, #4]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f7ff ff0f 	bl	800cb2c <uxr_common_create_entity>
 800cd0e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800cd12:	bd70      	pop	{r4, r5, r6, pc}

0800cd14 <uxr_buffer_create_datawriter_bin>:
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd18:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800cd1c:	ac1d      	add	r4, sp, #116	@ 0x74
 800cd1e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd22:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800cd26:	9105      	str	r1, [sp, #20]
 800cd28:	4606      	mov	r6, r0
 800cd2a:	a9a1      	add	r1, sp, #644	@ 0x284
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	2305      	movs	r3, #5
 800cd30:	7123      	strb	r3, [r4, #4]
 800cd32:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800cd36:	2703      	movs	r7, #3
 800cd38:	f000 f9f8 	bl	800d12c <uxr_object_id_to_raw>
 800cd3c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800cd3e:	7227      	strb	r7, [r4, #8]
 800cd40:	a90e      	add	r1, sp, #56	@ 0x38
 800cd42:	f000 f9f3 	bl	800d12c <uxr_object_id_to_raw>
 800cd46:	2300      	movs	r3, #0
 800cd48:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800cd4c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800cd50:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800cd54:	3d00      	subs	r5, #0
 800cd56:	bf18      	it	ne
 800cd58:	2501      	movne	r5, #1
 800cd5a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800cd5e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800cd62:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cd66:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800cd70:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800cd74:	bb8a      	cbnz	r2, 800cdda <uxr_buffer_create_datawriter_bin+0xc6>
 800cd76:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cd7a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800cd7e:	f04f 0c13 	mov.w	ip, #19
 800cd82:	250b      	movs	r5, #11
 800cd84:	2221      	movs	r2, #33	@ 0x21
 800cd86:	2111      	movs	r1, #17
 800cd88:	2009      	movs	r0, #9
 800cd8a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800cd8e:	b923      	cbnz	r3, 800cd9a <uxr_buffer_create_datawriter_bin+0x86>
 800cd90:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800cd94:	4672      	mov	r2, lr
 800cd96:	4661      	mov	r1, ip
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d025      	beq.n	800cdee <uxr_buffer_create_datawriter_bin+0xda>
 800cda2:	2b03      	cmp	r3, #3
 800cda4:	d029      	beq.n	800cdfa <uxr_buffer_create_datawriter_bin+0xe6>
 800cda6:	b32b      	cbz	r3, 800cdf4 <uxr_buffer_create_datawriter_bin+0xe0>
 800cda8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdac:	a921      	add	r1, sp, #132	@ 0x84
 800cdae:	a806      	add	r0, sp, #24
 800cdb0:	f7fc fec0 	bl	8009b34 <ucdr_init_buffer>
 800cdb4:	a90e      	add	r1, sp, #56	@ 0x38
 800cdb6:	a806      	add	r0, sp, #24
 800cdb8:	f002 ffb8 	bl	800fd2c <uxr_serialize_OBJK_DataWriter_Binary>
 800cdbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdbe:	f8cd 8000 	str.w	r8, [sp]
 800cdc2:	9401      	str	r4, [sp, #4]
 800cdc4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cdc8:	60e3      	str	r3, [r4, #12]
 800cdca:	4630      	mov	r0, r6
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	f7ff fead 	bl	800cb2c <uxr_common_create_entity>
 800cdd2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800cdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdda:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800cdde:	f04f 0c12 	mov.w	ip, #18
 800cde2:	250a      	movs	r5, #10
 800cde4:	2220      	movs	r2, #32
 800cde6:	2110      	movs	r1, #16
 800cde8:	2008      	movs	r0, #8
 800cdea:	2702      	movs	r7, #2
 800cdec:	e7cd      	b.n	800cd8a <uxr_buffer_create_datawriter_bin+0x76>
 800cdee:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800cdf2:	e7d9      	b.n	800cda8 <uxr_buffer_create_datawriter_bin+0x94>
 800cdf4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800cdf8:	e7d6      	b.n	800cda8 <uxr_buffer_create_datawriter_bin+0x94>
 800cdfa:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800cdfe:	e7d3      	b.n	800cda8 <uxr_buffer_create_datawriter_bin+0x94>

0800ce00 <uxr_buffer_create_datareader_bin>:
 800ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce04:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ce08:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ce0a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ce0e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800ce12:	9105      	str	r1, [sp, #20]
 800ce14:	4606      	mov	r6, r0
 800ce16:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ce18:	4618      	mov	r0, r3
 800ce1a:	2306      	movs	r3, #6
 800ce1c:	7123      	strb	r3, [r4, #4]
 800ce1e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800ce22:	2703      	movs	r7, #3
 800ce24:	f000 f982 	bl	800d12c <uxr_object_id_to_raw>
 800ce28:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ce2a:	7227      	strb	r7, [r4, #8]
 800ce2c:	a90e      	add	r1, sp, #56	@ 0x38
 800ce2e:	f000 f97d 	bl	800d12c <uxr_object_id_to_raw>
 800ce32:	2300      	movs	r3, #0
 800ce34:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ce38:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800ce3c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800ce40:	3d00      	subs	r5, #0
 800ce42:	bf18      	it	ne
 800ce44:	2501      	movne	r5, #1
 800ce46:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ce4a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ce4e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ce52:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ce56:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800ce60:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800ce64:	bb8a      	cbnz	r2, 800ceca <uxr_buffer_create_datareader_bin+0xca>
 800ce66:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ce6a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ce6e:	f04f 0c13 	mov.w	ip, #19
 800ce72:	250b      	movs	r5, #11
 800ce74:	2221      	movs	r2, #33	@ 0x21
 800ce76:	2111      	movs	r1, #17
 800ce78:	2009      	movs	r0, #9
 800ce7a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800ce7e:	b923      	cbnz	r3, 800ce8a <uxr_buffer_create_datareader_bin+0x8a>
 800ce80:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ce84:	4672      	mov	r2, lr
 800ce86:	4661      	mov	r1, ip
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d025      	beq.n	800cede <uxr_buffer_create_datareader_bin+0xde>
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d029      	beq.n	800ceea <uxr_buffer_create_datareader_bin+0xea>
 800ce96:	b32b      	cbz	r3, 800cee4 <uxr_buffer_create_datareader_bin+0xe4>
 800ce98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce9c:	a923      	add	r1, sp, #140	@ 0x8c
 800ce9e:	a806      	add	r0, sp, #24
 800cea0:	f7fc fe48 	bl	8009b34 <ucdr_init_buffer>
 800cea4:	a90e      	add	r1, sp, #56	@ 0x38
 800cea6:	a806      	add	r0, sp, #24
 800cea8:	f002 ff04 	bl	800fcb4 <uxr_serialize_OBJK_DataReader_Binary>
 800ceac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ceae:	f8cd 8000 	str.w	r8, [sp]
 800ceb2:	9401      	str	r4, [sp, #4]
 800ceb4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ceb8:	60e3      	str	r3, [r4, #12]
 800ceba:	4630      	mov	r0, r6
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	f7ff fe35 	bl	800cb2c <uxr_common_create_entity>
 800cec2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceca:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800cece:	f04f 0c12 	mov.w	ip, #18
 800ced2:	250a      	movs	r5, #10
 800ced4:	2220      	movs	r2, #32
 800ced6:	2110      	movs	r1, #16
 800ced8:	2008      	movs	r0, #8
 800ceda:	2702      	movs	r7, #2
 800cedc:	e7cd      	b.n	800ce7a <uxr_buffer_create_datareader_bin+0x7a>
 800cede:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800cee2:	e7d9      	b.n	800ce98 <uxr_buffer_create_datareader_bin+0x98>
 800cee4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800cee8:	e7d6      	b.n	800ce98 <uxr_buffer_create_datareader_bin+0x98>
 800ceea:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ceee:	e7d3      	b.n	800ce98 <uxr_buffer_create_datareader_bin+0x98>

0800cef0 <uxr_buffer_create_replier_bin>:
 800cef0:	b570      	push	{r4, r5, r6, lr}
 800cef2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800cef6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cefa:	9105      	str	r1, [sp, #20]
 800cefc:	4605      	mov	r5, r0
 800cefe:	a999      	add	r1, sp, #612	@ 0x264
 800cf00:	4618      	mov	r0, r3
 800cf02:	2308      	movs	r3, #8
 800cf04:	f89d 6294 	ldrb.w	r6, [sp, #660]	@ 0x294
 800cf08:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
 800cf0c:	f000 f90e 	bl	800d12c <uxr_object_id_to_raw>
 800cf10:	9b9e      	ldr	r3, [sp, #632]	@ 0x278
 800cf12:	9306      	str	r3, [sp, #24]
 800cf14:	9b9f      	ldr	r3, [sp, #636]	@ 0x27c
 800cf16:	9307      	str	r3, [sp, #28]
 800cf18:	9ba0      	ldr	r3, [sp, #640]	@ 0x280
 800cf1a:	9308      	str	r3, [sp, #32]
 800cf1c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800cf1e:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf20:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cf22:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf24:	2301      	movs	r3, #1
 800cf26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf2a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800cf2e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800cf32:	a919      	add	r1, sp, #100	@ 0x64
 800cf34:	2303      	movs	r3, #3
 800cf36:	a80d      	add	r0, sp, #52	@ 0x34
 800cf38:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 800cf3c:	f7fc fdfa 	bl	8009b34 <ucdr_init_buffer>
 800cf40:	a906      	add	r1, sp, #24
 800cf42:	a80d      	add	r0, sp, #52	@ 0x34
 800cf44:	f002 ff1e 	bl	800fd84 <uxr_serialize_OBJK_Replier_Binary>
 800cf48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cf4a:	9318      	str	r3, [sp, #96]	@ 0x60
 800cf4c:	ac15      	add	r4, sp, #84	@ 0x54
 800cf4e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cf52:	9600      	str	r6, [sp, #0]
 800cf54:	9401      	str	r4, [sp, #4]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f7ff fde7 	bl	800cb2c <uxr_common_create_entity>
 800cf5e:	f50d 7d1a 	add.w	sp, sp, #616	@ 0x268
 800cf62:	bd70      	pop	{r4, r5, r6, pc}

0800cf64 <get_custom_error>:
 800cf64:	4b01      	ldr	r3, [pc, #4]	@ (800cf6c <get_custom_error+0x8>)
 800cf66:	7818      	ldrb	r0, [r3, #0]
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	2000adc4 	.word	0x2000adc4

0800cf70 <recv_custom_msg>:
 800cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf74:	4693      	mov	fp, r2
 800cf76:	b089      	sub	sp, #36	@ 0x24
 800cf78:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800cf7c:	9305      	str	r3, [sp, #20]
 800cf7e:	468a      	mov	sl, r1
 800cf80:	2100      	movs	r1, #0
 800cf82:	4604      	mov	r4, r0
 800cf84:	f88d 101e 	strb.w	r1, [sp, #30]
 800cf88:	b322      	cbz	r2, 800cfd4 <recv_custom_msg+0x64>
 800cf8a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800cf8e:	f10d 081f 	add.w	r8, sp, #31
 800cf92:	af05      	add	r7, sp, #20
 800cf94:	f10d 061e 	add.w	r6, sp, #30
 800cf98:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800cf9c:	e002      	b.n	800cfa4 <recv_custom_msg+0x34>
 800cf9e:	9b05      	ldr	r3, [sp, #20]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dd0f      	ble.n	800cfc4 <recv_custom_msg+0x54>
 800cfa4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800cfa8:	4623      	mov	r3, r4
 800cfaa:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800cfae:	e9cd 5600 	strd	r5, r6, [sp]
 800cfb2:	4622      	mov	r2, r4
 800cfb4:	4648      	mov	r0, r9
 800cfb6:	f001 fc89 	bl	800e8cc <uxr_read_framed_msg>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d0ef      	beq.n	800cf9e <recv_custom_msg+0x2e>
 800cfbe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cfc2:	b1b3      	cbz	r3, 800cff2 <recv_custom_msg+0x82>
 800cfc4:	4b0f      	ldr	r3, [pc, #60]	@ (800d004 <recv_custom_msg+0x94>)
 800cfc6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800cfca:	701a      	strb	r2, [r3, #0]
 800cfcc:	2000      	movs	r0, #0
 800cfce:	b009      	add	sp, #36	@ 0x24
 800cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd4:	f10d 021f 	add.w	r2, sp, #31
 800cfd8:	9200      	str	r2, [sp, #0]
 800cfda:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800cfde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	47a8      	blx	r5
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d0ec      	beq.n	800cfc4 <recv_custom_msg+0x54>
 800cfea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e8      	bne.n	800cfc4 <recv_custom_msg+0x54>
 800cff2:	f8cb 0000 	str.w	r0, [fp]
 800cff6:	2001      	movs	r0, #1
 800cff8:	f8ca 4000 	str.w	r4, [sl]
 800cffc:	b009      	add	sp, #36	@ 0x24
 800cffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d002:	bf00      	nop
 800d004:	2000adc4 	.word	0x2000adc4

0800d008 <send_custom_msg>:
 800d008:	b530      	push	{r4, r5, lr}
 800d00a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800d00e:	b087      	sub	sp, #28
 800d010:	4615      	mov	r5, r2
 800d012:	b974      	cbnz	r4, 800d032 <send_custom_msg+0x2a>
 800d014:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d018:	f10d 0317 	add.w	r3, sp, #23
 800d01c:	47a0      	blx	r4
 800d01e:	b108      	cbz	r0, 800d024 <send_custom_msg+0x1c>
 800d020:	42a8      	cmp	r0, r5
 800d022:	d015      	beq.n	800d050 <send_custom_msg+0x48>
 800d024:	4b0c      	ldr	r3, [pc, #48]	@ (800d058 <send_custom_msg+0x50>)
 800d026:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d02a:	701a      	strb	r2, [r3, #0]
 800d02c:	2000      	movs	r0, #0
 800d02e:	b007      	add	sp, #28
 800d030:	bd30      	pop	{r4, r5, pc}
 800d032:	460b      	mov	r3, r1
 800d034:	2200      	movs	r2, #0
 800d036:	f10d 0117 	add.w	r1, sp, #23
 800d03a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d03e:	4602      	mov	r2, r0
 800d040:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800d044:	9500      	str	r5, [sp, #0]
 800d046:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d04a:	f001 fa47 	bl	800e4dc <uxr_write_framed_msg>
 800d04e:	e7e6      	b.n	800d01e <send_custom_msg+0x16>
 800d050:	2001      	movs	r0, #1
 800d052:	b007      	add	sp, #28
 800d054:	bd30      	pop	{r4, r5, pc}
 800d056:	bf00      	nop
 800d058:	2000adc4 	.word	0x2000adc4

0800d05c <uxr_set_custom_transport_callbacks>:
 800d05c:	b410      	push	{r4}
 800d05e:	9c01      	ldr	r4, [sp, #4]
 800d060:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800d064:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d068:	9b02      	ldr	r3, [sp, #8]
 800d06a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d072:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800d076:	4770      	bx	lr

0800d078 <uxr_init_custom_transport>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d07e:	b303      	cbz	r3, 800d0c2 <uxr_init_custom_transport+0x4a>
 800d080:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d084:	4604      	mov	r4, r0
 800d086:	b1e2      	cbz	r2, 800d0c2 <uxr_init_custom_transport+0x4a>
 800d088:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d08c:	b1ca      	cbz	r2, 800d0c2 <uxr_init_custom_transport+0x4a>
 800d08e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d092:	b1b2      	cbz	r2, 800d0c2 <uxr_init_custom_transport+0x4a>
 800d094:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d098:	4798      	blx	r3
 800d09a:	4605      	mov	r5, r0
 800d09c:	b188      	cbz	r0, 800d0c2 <uxr_init_custom_transport+0x4a>
 800d09e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d0a2:	b98b      	cbnz	r3, 800d0c8 <uxr_init_custom_transport+0x50>
 800d0a4:	490b      	ldr	r1, [pc, #44]	@ (800d0d4 <uxr_init_custom_transport+0x5c>)
 800d0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d0d8 <uxr_init_custom_transport+0x60>)
 800d0a8:	4a0c      	ldr	r2, [pc, #48]	@ (800d0dc <uxr_init_custom_transport+0x64>)
 800d0aa:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800d0ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0b2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800d0b6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d0ba:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d0be:	4628      	mov	r0, r5
 800d0c0:	bd38      	pop	{r3, r4, r5, pc}
 800d0c2:	2500      	movs	r5, #0
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	bd38      	pop	{r3, r4, r5, pc}
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800d0ce:	f001 f9ff 	bl	800e4d0 <uxr_init_framing_io>
 800d0d2:	e7e7      	b.n	800d0a4 <uxr_init_custom_transport+0x2c>
 800d0d4:	0800d009 	.word	0x0800d009
 800d0d8:	0800cf71 	.word	0x0800cf71
 800d0dc:	0800cf65 	.word	0x0800cf65

0800d0e0 <uxr_close_custom_transport>:
 800d0e0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800d0e4:	4718      	bx	r3
 800d0e6:	bf00      	nop

0800d0e8 <uxr_object_id>:
 800d0e8:	b082      	sub	sp, #8
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f88d 1006 	strb.w	r1, [sp, #6]
 800d0f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d0f4:	f360 030f 	bfi	r3, r0, #0, #16
 800d0f8:	f362 431f 	bfi	r3, r2, #16, #16
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	b002      	add	sp, #8
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop

0800d104 <uxr_object_id_from_raw>:
 800d104:	7843      	ldrb	r3, [r0, #1]
 800d106:	7801      	ldrb	r1, [r0, #0]
 800d108:	b082      	sub	sp, #8
 800d10a:	f003 020f 	and.w	r2, r3, #15
 800d10e:	f88d 2006 	strb.w	r2, [sp, #6]
 800d112:	091b      	lsrs	r3, r3, #4
 800d114:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d118:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d11c:	2000      	movs	r0, #0
 800d11e:	f363 000f 	bfi	r0, r3, #0, #16
 800d122:	f362 401f 	bfi	r0, r2, #16, #16
 800d126:	b002      	add	sp, #8
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop

0800d12c <uxr_object_id_to_raw>:
 800d12c:	4602      	mov	r2, r0
 800d12e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d132:	b082      	sub	sp, #8
 800d134:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d138:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d13c:	f881 c000 	strb.w	ip, [r1]
 800d140:	7048      	strb	r0, [r1, #1]
 800d142:	b002      	add	sp, #8
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop

0800d148 <uxr_buffer_request_data>:
 800d148:	b530      	push	{r4, r5, lr}
 800d14a:	b095      	sub	sp, #84	@ 0x54
 800d14c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d150:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800d152:	9303      	str	r3, [sp, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	2d00      	cmp	r5, #0
 800d158:	bf14      	ite	ne
 800d15a:	2101      	movne	r1, #1
 800d15c:	4611      	moveq	r1, r2
 800d15e:	4604      	mov	r4, r0
 800d160:	f88d 301c 	strb.w	r3, [sp, #28]
 800d164:	f88d 201d 	strb.w	r2, [sp, #29]
 800d168:	f88d 201e 	strb.w	r2, [sp, #30]
 800d16c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800d170:	d021      	beq.n	800d1b6 <uxr_buffer_request_data+0x6e>
 800d172:	682a      	ldr	r2, [r5, #0]
 800d174:	686b      	ldr	r3, [r5, #4]
 800d176:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800d17a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d17e:	2210      	movs	r2, #16
 800d180:	2308      	movs	r3, #8
 800d182:	2100      	movs	r1, #0
 800d184:	e9cd 3100 	strd	r3, r1, [sp]
 800d188:	4620      	mov	r0, r4
 800d18a:	9905      	ldr	r1, [sp, #20]
 800d18c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d18e:	f001 f839 	bl	800e204 <uxr_prepare_stream_to_write_submessage>
 800d192:	b918      	cbnz	r0, 800d19c <uxr_buffer_request_data+0x54>
 800d194:	4604      	mov	r4, r0
 800d196:	4620      	mov	r0, r4
 800d198:	b015      	add	sp, #84	@ 0x54
 800d19a:	bd30      	pop	{r4, r5, pc}
 800d19c:	9904      	ldr	r1, [sp, #16]
 800d19e:	aa06      	add	r2, sp, #24
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f001 f965 	bl	800e470 <uxr_init_base_object_request>
 800d1a6:	a906      	add	r1, sp, #24
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	a80c      	add	r0, sp, #48	@ 0x30
 800d1ac:	f003 f926 	bl	80103fc <uxr_serialize_READ_DATA_Payload>
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	b015      	add	sp, #84	@ 0x54
 800d1b4:	bd30      	pop	{r4, r5, pc}
 800d1b6:	2208      	movs	r2, #8
 800d1b8:	e7e2      	b.n	800d180 <uxr_buffer_request_data+0x38>
 800d1ba:	bf00      	nop

0800d1bc <uxr_buffer_cancel_data>:
 800d1bc:	b510      	push	{r4, lr}
 800d1be:	b094      	sub	sp, #80	@ 0x50
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	9202      	str	r2, [sp, #8]
 800d1c4:	9205      	str	r2, [sp, #20]
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d1ce:	f88d 301e 	strb.w	r3, [sp, #30]
 800d1d2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800d1d6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800d1da:	2308      	movs	r3, #8
 800d1dc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	2210      	movs	r2, #16
 800d1e4:	ab0c      	add	r3, sp, #48	@ 0x30
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	9103      	str	r1, [sp, #12]
 800d1ea:	f001 f80b 	bl	800e204 <uxr_prepare_stream_to_write_submessage>
 800d1ee:	b918      	cbnz	r0, 800d1f8 <uxr_buffer_cancel_data+0x3c>
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	b014      	add	sp, #80	@ 0x50
 800d1f6:	bd10      	pop	{r4, pc}
 800d1f8:	9905      	ldr	r1, [sp, #20]
 800d1fa:	aa06      	add	r2, sp, #24
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f001 f937 	bl	800e470 <uxr_init_base_object_request>
 800d202:	a906      	add	r1, sp, #24
 800d204:	4604      	mov	r4, r0
 800d206:	a80c      	add	r0, sp, #48	@ 0x30
 800d208:	f003 f8f8 	bl	80103fc <uxr_serialize_READ_DATA_Payload>
 800d20c:	4620      	mov	r0, r4
 800d20e:	b014      	add	sp, #80	@ 0x50
 800d210:	bd10      	pop	{r4, pc}
 800d212:	bf00      	nop

0800d214 <read_submessage_format>:
 800d214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d218:	b095      	sub	sp, #84	@ 0x54
 800d21a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800d21e:	b113      	cbz	r3, 800d226 <read_submessage_format+0x12>
 800d220:	b015      	add	sp, #84	@ 0x54
 800d222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d226:	460c      	mov	r4, r1
 800d228:	4615      	mov	r5, r2
 800d22a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d22e:	4607      	mov	r7, r0
 800d230:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d232:	9004      	str	r0, [sp, #16]
 800d234:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800d236:	9005      	str	r0, [sp, #20]
 800d238:	1a52      	subs	r2, r2, r1
 800d23a:	a80c      	add	r0, sp, #48	@ 0x30
 800d23c:	4699      	mov	r9, r3
 800d23e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800d242:	f7fc fc77 	bl	8009b34 <ucdr_init_buffer>
 800d246:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d24a:	a80c      	add	r0, sp, #48	@ 0x30
 800d24c:	f7fc fc46 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 800d250:	69e2      	ldr	r2, [r4, #28]
 800d252:	b19a      	cbz	r2, 800d27c <read_submessage_format+0x68>
 800d254:	f1b8 0f07 	cmp.w	r8, #7
 800d258:	f882 9014 	strb.w	r9, [r2, #20]
 800d25c:	d040      	beq.n	800d2e0 <read_submessage_format+0xcc>
 800d25e:	f1b8 0f08 	cmp.w	r8, #8
 800d262:	d02e      	beq.n	800d2c2 <read_submessage_format+0xae>
 800d264:	f1b8 0f06 	cmp.w	r8, #6
 800d268:	d011      	beq.n	800d28e <read_submessage_format+0x7a>
 800d26a:	2301      	movs	r3, #1
 800d26c:	7513      	strb	r3, [r2, #20]
 800d26e:	4629      	mov	r1, r5
 800d270:	4620      	mov	r0, r4
 800d272:	f7fc fcaf 	bl	8009bd4 <ucdr_advance_buffer>
 800d276:	b015      	add	sp, #84	@ 0x54
 800d278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d27c:	f1b8 0f07 	cmp.w	r8, #7
 800d280:	d02e      	beq.n	800d2e0 <read_submessage_format+0xcc>
 800d282:	f1b8 0f08 	cmp.w	r8, #8
 800d286:	d01c      	beq.n	800d2c2 <read_submessage_format+0xae>
 800d288:	f1b8 0f06 	cmp.w	r8, #6
 800d28c:	d1ef      	bne.n	800d26e <read_submessage_format+0x5a>
 800d28e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800d292:	f1b8 0f00 	cmp.w	r8, #0
 800d296:	d011      	beq.n	800d2bc <read_submessage_format+0xa8>
 800d298:	ab0c      	add	r3, sp, #48	@ 0x30
 800d29a:	e9cd 3500 	strd	r3, r5, [sp]
 800d29e:	2306      	movs	r3, #6
 800d2a0:	f88d 3016 	strb.w	r3, [sp, #22]
 800d2a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2a8:	9302      	str	r3, [sp, #8]
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	47c0      	blx	r8
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	69e2      	ldr	r2, [r4, #28]
 800d2b8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d2bc:	2a00      	cmp	r2, #0
 800d2be:	d1d4      	bne.n	800d26a <read_submessage_format+0x56>
 800d2c0:	e7d5      	b.n	800d26e <read_submessage_format+0x5a>
 800d2c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d0f8      	beq.n	800d2bc <read_submessage_format+0xa8>
 800d2ca:	a906      	add	r1, sp, #24
 800d2cc:	a80c      	add	r0, sp, #48	@ 0x30
 800d2ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d2d2:	f003 f959 	bl	8010588 <uxr_deserialize_SampleIdentity>
 800d2d6:	b9a0      	cbnz	r0, 800d302 <read_submessage_format+0xee>
 800d2d8:	69e2      	ldr	r2, [r4, #28]
 800d2da:	2a00      	cmp	r2, #0
 800d2dc:	d1c5      	bne.n	800d26a <read_submessage_format+0x56>
 800d2de:	e7c6      	b.n	800d26e <read_submessage_format+0x5a>
 800d2e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2e4:	b13b      	cbz	r3, 800d2f6 <read_submessage_format+0xe2>
 800d2e6:	a906      	add	r1, sp, #24
 800d2e8:	a80c      	add	r0, sp, #48	@ 0x30
 800d2ea:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800d2ee:	f002 fe1f 	bl	800ff30 <uxr_deserialize_BaseObjectRequest>
 800d2f2:	bb60      	cbnz	r0, 800d34e <read_submessage_format+0x13a>
 800d2f4:	69e2      	ldr	r2, [r4, #28]
 800d2f6:	68a3      	ldr	r3, [r4, #8]
 800d2f8:	442b      	add	r3, r5
 800d2fa:	60a3      	str	r3, [r4, #8]
 800d2fc:	2a00      	cmp	r2, #0
 800d2fe:	d1b4      	bne.n	800d26a <read_submessage_format+0x56>
 800d300:	e7b5      	b.n	800d26e <read_submessage_format+0x5a>
 800d302:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d306:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d308:	1a52      	subs	r2, r2, r1
 800d30a:	eba8 0803 	sub.w	r8, r8, r3
 800d30e:	a80c      	add	r0, sp, #48	@ 0x30
 800d310:	f7fc fc10 	bl	8009b34 <ucdr_init_buffer>
 800d314:	44a8      	add	r8, r5
 800d316:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d31a:	a80c      	add	r0, sp, #48	@ 0x30
 800d31c:	f7fc fbde 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 800d320:	fa1f f888 	uxth.w	r8, r8
 800d324:	ab0c      	add	r3, sp, #48	@ 0x30
 800d326:	9300      	str	r3, [sp, #0]
 800d328:	f8cd 8004 	str.w	r8, [sp, #4]
 800d32c:	2108      	movs	r1, #8
 800d32e:	f88d 1016 	strb.w	r1, [sp, #22]
 800d332:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800d336:	9102      	str	r1, [sp, #8]
 800d338:	ab06      	add	r3, sp, #24
 800d33a:	4632      	mov	r2, r6
 800d33c:	9905      	ldr	r1, [sp, #20]
 800d33e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800d342:	4638      	mov	r0, r7
 800d344:	47b0      	blx	r6
 800d346:	2301      	movs	r3, #1
 800d348:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d34c:	e7c4      	b.n	800d2d8 <read_submessage_format+0xc4>
 800d34e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800d352:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d354:	1a52      	subs	r2, r2, r1
 800d356:	a80c      	add	r0, sp, #48	@ 0x30
 800d358:	eba8 0803 	sub.w	r8, r8, r3
 800d35c:	f7fc fbea 	bl	8009b34 <ucdr_init_buffer>
 800d360:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d364:	a80c      	add	r0, sp, #48	@ 0x30
 800d366:	f7fc fbb9 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 800d36a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800d372:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d376:	44a8      	add	r8, r5
 800d378:	fa1f f888 	uxth.w	r8, r8
 800d37c:	f8cd 8004 	str.w	r8, [sp, #4]
 800d380:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d384:	2107      	movs	r1, #7
 800d386:	f88d 1016 	strb.w	r1, [sp, #22]
 800d38a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800d38e:	9102      	str	r1, [sp, #8]
 800d390:	4632      	mov	r2, r6
 800d392:	b29b      	uxth	r3, r3
 800d394:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800d398:	9905      	ldr	r1, [sp, #20]
 800d39a:	4638      	mov	r0, r7
 800d39c:	47b0      	blx	r6
 800d39e:	2301      	movs	r3, #1
 800d3a0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800d3a4:	e7a6      	b.n	800d2f4 <read_submessage_format+0xe0>
 800d3a6:	bf00      	nop

0800d3a8 <on_get_fragmentation_info>:
 800d3a8:	b500      	push	{lr}
 800d3aa:	b08b      	sub	sp, #44	@ 0x2c
 800d3ac:	4601      	mov	r1, r0
 800d3ae:	2204      	movs	r2, #4
 800d3b0:	a802      	add	r0, sp, #8
 800d3b2:	f7fc fbbf 	bl	8009b34 <ucdr_init_buffer>
 800d3b6:	f10d 0305 	add.w	r3, sp, #5
 800d3ba:	f10d 0206 	add.w	r2, sp, #6
 800d3be:	a901      	add	r1, sp, #4
 800d3c0:	a802      	add	r0, sp, #8
 800d3c2:	f001 fe69 	bl	800f098 <uxr_read_submessage_header>
 800d3c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d3ca:	2b0d      	cmp	r3, #13
 800d3cc:	d003      	beq.n	800d3d6 <on_get_fragmentation_info+0x2e>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	b00b      	add	sp, #44	@ 0x2c
 800d3d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d3da:	f013 0f02 	tst.w	r3, #2
 800d3de:	bf14      	ite	ne
 800d3e0:	2002      	movne	r0, #2
 800d3e2:	2001      	moveq	r0, #1
 800d3e4:	b00b      	add	sp, #44	@ 0x2c
 800d3e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3ea:	bf00      	nop

0800d3ec <read_submessage_get_info>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	2500      	movs	r5, #0
 800d3f0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d3fa:	460e      	mov	r6, r1
 800d3fc:	a810      	add	r0, sp, #64	@ 0x40
 800d3fe:	4629      	mov	r1, r5
 800d400:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d404:	f009 f962 	bl	80166cc <memset>
 800d408:	a903      	add	r1, sp, #12
 800d40a:	4630      	mov	r0, r6
 800d40c:	f002 ff38 	bl	8010280 <uxr_deserialize_GET_INFO_Payload>
 800d410:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d414:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d418:	4620      	mov	r0, r4
 800d41a:	f001 f821 	bl	800e460 <uxr_session_header_offset>
 800d41e:	462b      	mov	r3, r5
 800d420:	9000      	str	r0, [sp, #0]
 800d422:	220c      	movs	r2, #12
 800d424:	a905      	add	r1, sp, #20
 800d426:	a808      	add	r0, sp, #32
 800d428:	f7fc fb72 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 800d42c:	a910      	add	r1, sp, #64	@ 0x40
 800d42e:	a808      	add	r0, sp, #32
 800d430:	f002 ff98 	bl	8010364 <uxr_serialize_INFO_Payload>
 800d434:	9b08      	ldr	r3, [sp, #32]
 800d436:	462a      	mov	r2, r5
 800d438:	4629      	mov	r1, r5
 800d43a:	4620      	mov	r0, r4
 800d43c:	f000 ffba 	bl	800e3b4 <uxr_stamp_session_header>
 800d440:	a808      	add	r0, sp, #32
 800d442:	f7fc fba3 	bl	8009b8c <ucdr_buffer_length>
 800d446:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d448:	4602      	mov	r2, r0
 800d44a:	a905      	add	r1, sp, #20
 800d44c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d450:	47a0      	blx	r4
 800d452:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d456:	bd70      	pop	{r4, r5, r6, pc}

0800d458 <write_submessage_acknack.isra.0>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	b092      	sub	sp, #72	@ 0x48
 800d45c:	4605      	mov	r5, r0
 800d45e:	460e      	mov	r6, r1
 800d460:	4614      	mov	r4, r2
 800d462:	f000 fffd 	bl	800e460 <uxr_session_header_offset>
 800d466:	a905      	add	r1, sp, #20
 800d468:	9000      	str	r0, [sp, #0]
 800d46a:	2300      	movs	r3, #0
 800d46c:	a80a      	add	r0, sp, #40	@ 0x28
 800d46e:	2211      	movs	r2, #17
 800d470:	f7fc fb4e 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 800d474:	2218      	movs	r2, #24
 800d476:	fb02 5404 	mla	r4, r2, r4, r5
 800d47a:	2300      	movs	r3, #0
 800d47c:	2205      	movs	r2, #5
 800d47e:	3450      	adds	r4, #80	@ 0x50
 800d480:	210a      	movs	r1, #10
 800d482:	a80a      	add	r0, sp, #40	@ 0x28
 800d484:	f001 fdee 	bl	800f064 <uxr_buffer_submessage_header>
 800d488:	a903      	add	r1, sp, #12
 800d48a:	4620      	mov	r0, r4
 800d48c:	f007 fd96 	bl	8014fbc <uxr_compute_acknack>
 800d490:	ba40      	rev16	r0, r0
 800d492:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d496:	a903      	add	r1, sp, #12
 800d498:	a80a      	add	r0, sp, #40	@ 0x28
 800d49a:	f88d 6010 	strb.w	r6, [sp, #16]
 800d49e:	f002 ffd1 	bl	8010444 <uxr_serialize_ACKNACK_Payload>
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f000 ff83 	bl	800e3b4 <uxr_stamp_session_header>
 800d4ae:	a80a      	add	r0, sp, #40	@ 0x28
 800d4b0:	f7fc fb6c 	bl	8009b8c <ucdr_buffer_length>
 800d4b4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d4b6:	4602      	mov	r2, r0
 800d4b8:	a905      	add	r1, sp, #20
 800d4ba:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d4be:	47a0      	blx	r4
 800d4c0:	b012      	add	sp, #72	@ 0x48
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}
 800d4c4:	0000      	movs	r0, r0
	...

0800d4c8 <uxr_init_session>:
 800d4c8:	b510      	push	{r4, lr}
 800d4ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d500 <uxr_init_session+0x38>
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d4da:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d4de:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d4e2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d4e6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d4ea:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d4ee:	2181      	movs	r1, #129	@ 0x81
 800d4f0:	f000 fecc 	bl	800e28c <uxr_init_session_info>
 800d4f4:	f104 0008 	add.w	r0, r4, #8
 800d4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4fc:	f001 bcce 	b.w	800ee9c <uxr_init_stream_storage>
	...

0800d508 <uxr_set_status_callback>:
 800d508:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop

0800d510 <uxr_set_topic_callback>:
 800d510:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop

0800d518 <uxr_set_request_callback>:
 800d518:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop

0800d520 <uxr_set_reply_callback>:
 800d520:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop

0800d528 <uxr_create_output_best_effort_stream>:
 800d528:	b510      	push	{r4, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	e9cd 2100 	strd	r2, r1, [sp]
 800d530:	4604      	mov	r4, r0
 800d532:	f000 ff95 	bl	800e460 <uxr_session_header_offset>
 800d536:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d53a:	4603      	mov	r3, r0
 800d53c:	f104 0008 	add.w	r0, r4, #8
 800d540:	b004      	add	sp, #16
 800d542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d546:	f001 bcf3 	b.w	800ef30 <uxr_add_output_best_effort_buffer>
 800d54a:	bf00      	nop

0800d54c <uxr_create_output_reliable_stream>:
 800d54c:	b510      	push	{r4, lr}
 800d54e:	b088      	sub	sp, #32
 800d550:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d554:	4604      	mov	r4, r0
 800d556:	9303      	str	r3, [sp, #12]
 800d558:	f000 ff82 	bl	800e460 <uxr_session_header_offset>
 800d55c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d560:	9000      	str	r0, [sp, #0]
 800d562:	9905      	ldr	r1, [sp, #20]
 800d564:	f104 0008 	add.w	r0, r4, #8
 800d568:	f001 fcf6 	bl	800ef58 <uxr_add_output_reliable_buffer>
 800d56c:	2200      	movs	r2, #0
 800d56e:	b2c3      	uxtb	r3, r0
 800d570:	f363 0207 	bfi	r2, r3, #0, #8
 800d574:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d578:	f363 220f 	bfi	r2, r3, #8, #8
 800d57c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d580:	f363 4217 	bfi	r2, r3, #16, #8
 800d584:	0e03      	lsrs	r3, r0, #24
 800d586:	f363 621f 	bfi	r2, r3, #24, #8
 800d58a:	4610      	mov	r0, r2
 800d58c:	b008      	add	sp, #32
 800d58e:	bd10      	pop	{r4, pc}

0800d590 <uxr_create_input_best_effort_stream>:
 800d590:	b082      	sub	sp, #8
 800d592:	3008      	adds	r0, #8
 800d594:	b002      	add	sp, #8
 800d596:	f001 bcf9 	b.w	800ef8c <uxr_add_input_best_effort_buffer>
 800d59a:	bf00      	nop

0800d59c <uxr_create_input_reliable_stream>:
 800d59c:	b510      	push	{r4, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	4c0b      	ldr	r4, [pc, #44]	@ (800d5d0 <uxr_create_input_reliable_stream+0x34>)
 800d5a2:	9400      	str	r4, [sp, #0]
 800d5a4:	3008      	adds	r0, #8
 800d5a6:	f001 fd07 	bl	800efb8 <uxr_add_input_reliable_buffer>
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	b2c3      	uxtb	r3, r0
 800d5ae:	f363 0207 	bfi	r2, r3, #0, #8
 800d5b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d5b6:	f363 220f 	bfi	r2, r3, #8, #8
 800d5ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d5be:	f363 4217 	bfi	r2, r3, #16, #8
 800d5c2:	0e03      	lsrs	r3, r0, #24
 800d5c4:	f363 621f 	bfi	r2, r3, #24, #8
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	b004      	add	sp, #16
 800d5cc:	bd10      	pop	{r4, pc}
 800d5ce:	bf00      	nop
 800d5d0:	0800d3a9 	.word	0x0800d3a9

0800d5d4 <uxr_epoch_nanos>:
 800d5d4:	b510      	push	{r4, lr}
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	f001 fda4 	bl	800f124 <uxr_nanos>
 800d5dc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d5e0:	1ac0      	subs	r0, r0, r3
 800d5e2:	eb61 0102 	sbc.w	r1, r1, r2
 800d5e6:	bd10      	pop	{r4, pc}

0800d5e8 <uxr_flash_output_streams>:
 800d5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ec:	7e03      	ldrb	r3, [r0, #24]
 800d5ee:	b084      	sub	sp, #16
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d035      	beq.n	800d662 <uxr_flash_output_streams+0x7a>
 800d5f6:	f04f 0900 	mov.w	r9, #0
 800d5fa:	4648      	mov	r0, r9
 800d5fc:	f10d 0802 	add.w	r8, sp, #2
 800d600:	af03      	add	r7, sp, #12
 800d602:	ae02      	add	r6, sp, #8
 800d604:	e006      	b.n	800d614 <uxr_flash_output_streams+0x2c>
 800d606:	7e23      	ldrb	r3, [r4, #24]
 800d608:	f109 0901 	add.w	r9, r9, #1
 800d60c:	fa5f f089 	uxtb.w	r0, r9
 800d610:	4283      	cmp	r3, r0
 800d612:	d926      	bls.n	800d662 <uxr_flash_output_streams+0x7a>
 800d614:	2201      	movs	r2, #1
 800d616:	4611      	mov	r1, r2
 800d618:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d61c:	f001 fbea 	bl	800edf4 <uxr_stream_id>
 800d620:	3508      	adds	r5, #8
 800d622:	4684      	mov	ip, r0
 800d624:	4643      	mov	r3, r8
 800d626:	463a      	mov	r2, r7
 800d628:	4631      	mov	r1, r6
 800d62a:	4628      	mov	r0, r5
 800d62c:	f8cd c004 	str.w	ip, [sp, #4]
 800d630:	f007 fd4a 	bl	80150c8 <uxr_prepare_best_effort_buffer_to_send>
 800d634:	2800      	cmp	r0, #0
 800d636:	d0e6      	beq.n	800d606 <uxr_flash_output_streams+0x1e>
 800d638:	9b02      	ldr	r3, [sp, #8]
 800d63a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d63e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d642:	4620      	mov	r0, r4
 800d644:	f000 feb6 	bl	800e3b4 <uxr_stamp_session_header>
 800d648:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d64a:	9a03      	ldr	r2, [sp, #12]
 800d64c:	685d      	ldr	r5, [r3, #4]
 800d64e:	6818      	ldr	r0, [r3, #0]
 800d650:	9902      	ldr	r1, [sp, #8]
 800d652:	47a8      	blx	r5
 800d654:	f109 0901 	add.w	r9, r9, #1
 800d658:	7e23      	ldrb	r3, [r4, #24]
 800d65a:	fa5f f089 	uxtb.w	r0, r9
 800d65e:	4283      	cmp	r3, r0
 800d660:	d8d8      	bhi.n	800d614 <uxr_flash_output_streams+0x2c>
 800d662:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d666:	b38b      	cbz	r3, 800d6cc <uxr_flash_output_streams+0xe4>
 800d668:	f04f 0900 	mov.w	r9, #0
 800d66c:	f10d 0802 	add.w	r8, sp, #2
 800d670:	af03      	add	r7, sp, #12
 800d672:	ae02      	add	r6, sp, #8
 800d674:	4648      	mov	r0, r9
 800d676:	2201      	movs	r2, #1
 800d678:	2102      	movs	r1, #2
 800d67a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d67e:	f001 fbb9 	bl	800edf4 <uxr_stream_id>
 800d682:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d686:	3520      	adds	r5, #32
 800d688:	9001      	str	r0, [sp, #4]
 800d68a:	e00d      	b.n	800d6a8 <uxr_flash_output_streams+0xc0>
 800d68c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d690:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d694:	9b02      	ldr	r3, [sp, #8]
 800d696:	f000 fe8d 	bl	800e3b4 <uxr_stamp_session_header>
 800d69a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d69c:	9a03      	ldr	r2, [sp, #12]
 800d69e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d6a2:	9902      	ldr	r1, [sp, #8]
 800d6a4:	6818      	ldr	r0, [r3, #0]
 800d6a6:	47d0      	blx	sl
 800d6a8:	4643      	mov	r3, r8
 800d6aa:	463a      	mov	r2, r7
 800d6ac:	4631      	mov	r1, r6
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f007 ff28 	bl	8015504 <uxr_prepare_next_reliable_buffer_to_send>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1e7      	bne.n	800d68c <uxr_flash_output_streams+0xa4>
 800d6bc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d6c0:	f109 0901 	add.w	r9, r9, #1
 800d6c4:	fa5f f089 	uxtb.w	r0, r9
 800d6c8:	4283      	cmp	r3, r0
 800d6ca:	d8d4      	bhi.n	800d676 <uxr_flash_output_streams+0x8e>
 800d6cc:	b004      	add	sp, #16
 800d6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d2:	bf00      	nop

0800d6d4 <read_submessage_info>:
 800d6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	460d      	mov	r5, r1
 800d6da:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d6de:	4669      	mov	r1, sp
 800d6e0:	4607      	mov	r7, r0
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f002 fcda 	bl	801009c <uxr_deserialize_BaseObjectReply>
 800d6e8:	a902      	add	r1, sp, #8
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d6f2:	f7fb f8c5 	bl	8008880 <ucdr_deserialize_bool>
 800d6f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d6fa:	4004      	ands	r4, r0
 800d6fc:	b2e4      	uxtb	r4, r4
 800d6fe:	b95b      	cbnz	r3, 800d718 <read_submessage_info+0x44>
 800d700:	a987      	add	r1, sp, #540	@ 0x21c
 800d702:	4628      	mov	r0, r5
 800d704:	f7fb f8bc 	bl	8008880 <ucdr_deserialize_bool>
 800d708:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d70c:	4606      	mov	r6, r0
 800d70e:	b94b      	cbnz	r3, 800d724 <read_submessage_info+0x50>
 800d710:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d718:	a903      	add	r1, sp, #12
 800d71a:	4628      	mov	r0, r5
 800d71c:	f002 fb66 	bl	800fdec <uxr_deserialize_ObjectVariant>
 800d720:	4004      	ands	r4, r0
 800d722:	e7ed      	b.n	800d700 <read_submessage_info+0x2c>
 800d724:	a988      	add	r1, sp, #544	@ 0x220
 800d726:	4628      	mov	r0, r5
 800d728:	f7fb f8d8 	bl	80088dc <ucdr_deserialize_uint8_t>
 800d72c:	4234      	tst	r4, r6
 800d72e:	d0ef      	beq.n	800d710 <read_submessage_info+0x3c>
 800d730:	2800      	cmp	r0, #0
 800d732:	d0ed      	beq.n	800d710 <read_submessage_info+0x3c>
 800d734:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d738:	2b0d      	cmp	r3, #13
 800d73a:	d1e9      	bne.n	800d710 <read_submessage_info+0x3c>
 800d73c:	a98a      	add	r1, sp, #552	@ 0x228
 800d73e:	4628      	mov	r0, r5
 800d740:	f7fb fe72 	bl	8009428 <ucdr_deserialize_int16_t>
 800d744:	b140      	cbz	r0, 800d758 <read_submessage_info+0x84>
 800d746:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	dd07      	ble.n	800d75e <read_submessage_info+0x8a>
 800d74e:	f1b8 0f00 	cmp.w	r8, #0
 800d752:	bf14      	ite	ne
 800d754:	2001      	movne	r0, #1
 800d756:	2002      	moveq	r0, #2
 800d758:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d75c:	e7d8      	b.n	800d710 <read_submessage_info+0x3c>
 800d75e:	2000      	movs	r0, #0
 800d760:	e7fa      	b.n	800d758 <read_submessage_info+0x84>
 800d762:	bf00      	nop

0800d764 <read_submessage_list>:
 800d764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	b097      	sub	sp, #92	@ 0x5c
 800d76a:	4ec1      	ldr	r6, [pc, #772]	@ (800da70 <read_submessage_list+0x30c>)
 800d76c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d76e:	4604      	mov	r4, r0
 800d770:	460d      	mov	r5, r1
 800d772:	f04f 0801 	mov.w	r8, #1
 800d776:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d77a:	aa0c      	add	r2, sp, #48	@ 0x30
 800d77c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d780:	4628      	mov	r0, r5
 800d782:	f001 fc89 	bl	800f098 <uxr_read_submessage_header>
 800d786:	2800      	cmp	r0, #0
 800d788:	f000 813e 	beq.w	800da08 <read_submessage_list+0x2a4>
 800d78c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d790:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d794:	3b02      	subs	r3, #2
 800d796:	2b0d      	cmp	r3, #13
 800d798:	d8ed      	bhi.n	800d776 <read_submessage_list+0x12>
 800d79a:	a101      	add	r1, pc, #4	@ (adr r1, 800d7a0 <read_submessage_list+0x3c>)
 800d79c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7a0:	0800d9ff 	.word	0x0800d9ff
 800d7a4:	0800d777 	.word	0x0800d777
 800d7a8:	0800d9ef 	.word	0x0800d9ef
 800d7ac:	0800d98d 	.word	0x0800d98d
 800d7b0:	0800d983 	.word	0x0800d983
 800d7b4:	0800d777 	.word	0x0800d777
 800d7b8:	0800d777 	.word	0x0800d777
 800d7bc:	0800d8e3 	.word	0x0800d8e3
 800d7c0:	0800d873 	.word	0x0800d873
 800d7c4:	0800d833 	.word	0x0800d833
 800d7c8:	0800d777 	.word	0x0800d777
 800d7cc:	0800d777 	.word	0x0800d777
 800d7d0:	0800d777 	.word	0x0800d777
 800d7d4:	0800d7d9 	.word	0x0800d7d9
 800d7d8:	a910      	add	r1, sp, #64	@ 0x40
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f002 fe82 	bl	80104e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d7e0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d7e4:	f1b9 0f00 	cmp.w	r9, #0
 800d7e8:	f000 8116 	beq.w	800da18 <read_submessage_list+0x2b4>
 800d7ec:	f001 fc9a 	bl	800f124 <uxr_nanos>
 800d7f0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	468c      	mov	ip, r1
 800d7fc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d800:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d804:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d806:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d808:	468c      	mov	ip, r1
 800d80a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d80e:	46e2      	mov	sl, ip
 800d810:	46bc      	mov	ip, r7
 800d812:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d816:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d81a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d81e:	e9cd 7100 	strd	r7, r1, [sp]
 800d822:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d826:	9106      	str	r1, [sp, #24]
 800d828:	4620      	mov	r0, r4
 800d82a:	47c8      	blx	r9
 800d82c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d830:	e7a1      	b.n	800d776 <read_submessage_list+0x12>
 800d832:	a910      	add	r1, sp, #64	@ 0x40
 800d834:	4628      	mov	r0, r5
 800d836:	f002 fe43 	bl	80104c0 <uxr_deserialize_HEARTBEAT_Payload>
 800d83a:	2100      	movs	r1, #0
 800d83c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d840:	f001 fb02 	bl	800ee48 <uxr_stream_id_from_raw>
 800d844:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d848:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d84a:	4639      	mov	r1, r7
 800d84c:	f104 0008 	add.w	r0, r4, #8
 800d850:	f001 fbe8 	bl	800f024 <uxr_get_input_reliable_stream>
 800d854:	2800      	cmp	r0, #0
 800d856:	d08e      	beq.n	800d776 <read_submessage_list+0x12>
 800d858:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d85c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d860:	f007 fba0 	bl	8014fa4 <uxr_process_heartbeat>
 800d864:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d868:	463a      	mov	r2, r7
 800d86a:	4620      	mov	r0, r4
 800d86c:	f7ff fdf4 	bl	800d458 <write_submessage_acknack.isra.0>
 800d870:	e781      	b.n	800d776 <read_submessage_list+0x12>
 800d872:	a910      	add	r1, sp, #64	@ 0x40
 800d874:	4628      	mov	r0, r5
 800d876:	f002 fdfb 	bl	8010470 <uxr_deserialize_ACKNACK_Payload>
 800d87a:	2100      	movs	r1, #0
 800d87c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d880:	f001 fae2 	bl	800ee48 <uxr_stream_id_from_raw>
 800d884:	900d      	str	r0, [sp, #52]	@ 0x34
 800d886:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d88a:	f104 0008 	add.w	r0, r4, #8
 800d88e:	f001 fbb5 	bl	800effc <uxr_get_output_reliable_stream>
 800d892:	4607      	mov	r7, r0
 800d894:	2800      	cmp	r0, #0
 800d896:	f43f af6e 	beq.w	800d776 <read_submessage_list+0x12>
 800d89a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d89e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d8a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d8a6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d8aa:	b289      	uxth	r1, r1
 800d8ac:	f007 fed4 	bl	8015658 <uxr_process_acknack>
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	f007 fe91 	bl	80155d8 <uxr_begin_output_nack_buffer_it>
 800d8b6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d8ba:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d8be:	e006      	b.n	800d8ce <read_submessage_list+0x16a>
 800d8c0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d8c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d8c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d8ca:	6818      	ldr	r0, [r3, #0]
 800d8cc:	47c8      	blx	r9
 800d8ce:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d8d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d8d4:	4651      	mov	r1, sl
 800d8d6:	4638      	mov	r0, r7
 800d8d8:	f007 fe80 	bl	80155dc <uxr_next_reliable_nack_buffer_to_send>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d1ef      	bne.n	800d8c0 <read_submessage_list+0x15c>
 800d8e0:	e749      	b.n	800d776 <read_submessage_list+0x12>
 800d8e2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d8e6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d8ea:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d8ee:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d8f2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d8f6:	4651      	mov	r1, sl
 800d8f8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d8fc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d900:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d904:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d908:	4628      	mov	r0, r5
 800d90a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d90e:	f002 fb0f 	bl	800ff30 <uxr_deserialize_BaseObjectRequest>
 800d912:	4650      	mov	r0, sl
 800d914:	a90f      	add	r1, sp, #60	@ 0x3c
 800d916:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d91a:	f000 fdc7 	bl	800e4ac <uxr_parse_base_object_request>
 800d91e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d922:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d924:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d928:	9110      	str	r1, [sp, #64]	@ 0x40
 800d92a:	3f04      	subs	r7, #4
 800d92c:	f009 090e 	and.w	r9, r9, #14
 800d930:	b2bf      	uxth	r7, r7
 800d932:	f1bb 0f00 	cmp.w	fp, #0
 800d936:	d006      	beq.n	800d946 <read_submessage_list+0x1e2>
 800d938:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	4652      	mov	r2, sl
 800d940:	2300      	movs	r3, #0
 800d942:	4620      	mov	r0, r4
 800d944:	47d8      	blx	fp
 800d946:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d948:	b16a      	cbz	r2, 800d966 <read_submessage_list+0x202>
 800d94a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d94c:	2100      	movs	r1, #0
 800d94e:	3802      	subs	r0, #2
 800d950:	e002      	b.n	800d958 <read_submessage_list+0x1f4>
 800d952:	3101      	adds	r1, #1
 800d954:	4291      	cmp	r1, r2
 800d956:	d006      	beq.n	800d966 <read_submessage_list+0x202>
 800d958:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d95c:	4553      	cmp	r3, sl
 800d95e:	d1f8      	bne.n	800d952 <read_submessage_list+0x1ee>
 800d960:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d962:	2200      	movs	r2, #0
 800d964:	545a      	strb	r2, [r3, r1]
 800d966:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d96a:	9102      	str	r1, [sp, #8]
 800d96c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d96e:	9101      	str	r1, [sp, #4]
 800d970:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d972:	9100      	str	r1, [sp, #0]
 800d974:	464b      	mov	r3, r9
 800d976:	463a      	mov	r2, r7
 800d978:	4629      	mov	r1, r5
 800d97a:	4620      	mov	r0, r4
 800d97c:	f7ff fc4a 	bl	800d214 <read_submessage_format>
 800d980:	e6f9      	b.n	800d776 <read_submessage_list+0x12>
 800d982:	4629      	mov	r1, r5
 800d984:	4620      	mov	r0, r4
 800d986:	f7ff fea5 	bl	800d6d4 <read_submessage_info>
 800d98a:	e6f4      	b.n	800d776 <read_submessage_list+0x12>
 800d98c:	2a00      	cmp	r2, #0
 800d98e:	d03e      	beq.n	800da0e <read_submessage_list+0x2aa>
 800d990:	a910      	add	r1, sp, #64	@ 0x40
 800d992:	4628      	mov	r0, r5
 800d994:	f002 fcc8 	bl	8010328 <uxr_deserialize_STATUS_Payload>
 800d998:	a90e      	add	r1, sp, #56	@ 0x38
 800d99a:	aa0d      	add	r2, sp, #52	@ 0x34
 800d99c:	a810      	add	r0, sp, #64	@ 0x40
 800d99e:	f000 fd85 	bl	800e4ac <uxr_parse_base_object_request>
 800d9a2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d9a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d9a8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d9ac:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d9b0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d9b2:	f1ba 0f00 	cmp.w	sl, #0
 800d9b6:	d006      	beq.n	800d9c6 <read_submessage_list+0x262>
 800d9b8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	463a      	mov	r2, r7
 800d9c0:	464b      	mov	r3, r9
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	47d0      	blx	sl
 800d9c6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d9c8:	2a00      	cmp	r2, #0
 800d9ca:	f43f aed4 	beq.w	800d776 <read_submessage_list+0x12>
 800d9ce:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	3802      	subs	r0, #2
 800d9d4:	e003      	b.n	800d9de <read_submessage_list+0x27a>
 800d9d6:	3101      	adds	r1, #1
 800d9d8:	4291      	cmp	r1, r2
 800d9da:	f43f aecc 	beq.w	800d776 <read_submessage_list+0x12>
 800d9de:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d9e2:	42bb      	cmp	r3, r7
 800d9e4:	d1f7      	bne.n	800d9d6 <read_submessage_list+0x272>
 800d9e6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d9e8:	f803 9001 	strb.w	r9, [r3, r1]
 800d9ec:	e6c3      	b.n	800d776 <read_submessage_list+0x12>
 800d9ee:	2a00      	cmp	r2, #0
 800d9f0:	f47f aec1 	bne.w	800d776 <read_submessage_list+0x12>
 800d9f4:	4629      	mov	r1, r5
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f000 fc9e 	bl	800e338 <uxr_read_create_session_status>
 800d9fc:	e6bb      	b.n	800d776 <read_submessage_list+0x12>
 800d9fe:	4629      	mov	r1, r5
 800da00:	4620      	mov	r0, r4
 800da02:	f7ff fcf3 	bl	800d3ec <read_submessage_get_info>
 800da06:	e6b6      	b.n	800d776 <read_submessage_list+0x12>
 800da08:	b017      	add	sp, #92	@ 0x5c
 800da0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0e:	4629      	mov	r1, r5
 800da10:	4620      	mov	r0, r4
 800da12:	f000 fc9d 	bl	800e350 <uxr_read_delete_session_status>
 800da16:	e6ae      	b.n	800d776 <read_submessage_list+0x12>
 800da18:	f001 fb84 	bl	800f124 <uxr_nanos>
 800da1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800da20:	464f      	mov	r7, r9
 800da22:	fbc3 2706 	smlal	r2, r7, r3, r6
 800da26:	1812      	adds	r2, r2, r0
 800da28:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da2a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800da2c:	eb47 0101 	adc.w	r1, r7, r1
 800da30:	464f      	mov	r7, r9
 800da32:	fbc3 0706 	smlal	r0, r7, r3, r6
 800da36:	463b      	mov	r3, r7
 800da38:	4684      	mov	ip, r0
 800da3a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800da3e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800da42:	eb1c 0c00 	adds.w	ip, ip, r0
 800da46:	464f      	mov	r7, r9
 800da48:	eb43 0307 	adc.w	r3, r3, r7
 800da4c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800da50:	eb61 0303 	sbc.w	r3, r1, r3
 800da54:	0fda      	lsrs	r2, r3, #31
 800da56:	eb12 020c 	adds.w	r2, r2, ip
 800da5a:	f143 0300 	adc.w	r3, r3, #0
 800da5e:	0852      	lsrs	r2, r2, #1
 800da60:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800da64:	105b      	asrs	r3, r3, #1
 800da66:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800da6a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800da6e:	e6dd      	b.n	800d82c <read_submessage_list+0xc8>
 800da70:	3b9aca00 	.word	0x3b9aca00

0800da74 <listen_message_reliably>:
 800da74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da78:	1e0b      	subs	r3, r1, #0
 800da7a:	b09d      	sub	sp, #116	@ 0x74
 800da7c:	bfb8      	it	lt
 800da7e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800da82:	4680      	mov	r8, r0
 800da84:	9305      	str	r3, [sp, #20]
 800da86:	f001 fb33 	bl	800f0f0 <uxr_millis>
 800da8a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800da8e:	4681      	mov	r9, r0
 800da90:	2a00      	cmp	r2, #0
 800da92:	f000 80a1 	beq.w	800dbd8 <listen_message_reliably+0x164>
 800da96:	2600      	movs	r6, #0
 800da98:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800da9c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800daa0:	9303      	str	r3, [sp, #12]
 800daa2:	4630      	mov	r0, r6
 800daa4:	460f      	mov	r7, r1
 800daa6:	e00f      	b.n	800dac8 <listen_message_reliably+0x54>
 800daa8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800daac:	9903      	ldr	r1, [sp, #12]
 800daae:	455a      	cmp	r2, fp
 800dab0:	f106 0601 	add.w	r6, r6, #1
 800dab4:	eb73 0101 	sbcs.w	r1, r3, r1
 800dab8:	b2f0      	uxtb	r0, r6
 800daba:	da01      	bge.n	800dac0 <listen_message_reliably+0x4c>
 800dabc:	4693      	mov	fp, r2
 800dabe:	9303      	str	r3, [sp, #12]
 800dac0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800dac4:	4283      	cmp	r3, r0
 800dac6:	d960      	bls.n	800db8a <listen_message_reliably+0x116>
 800dac8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800dacc:	2102      	movs	r1, #2
 800dace:	2201      	movs	r2, #1
 800dad0:	f001 f990 	bl	800edf4 <uxr_stream_id>
 800dad4:	00e4      	lsls	r4, r4, #3
 800dad6:	f104 0520 	add.w	r5, r4, #32
 800dada:	4445      	add	r5, r8
 800dadc:	4601      	mov	r1, r0
 800dade:	463b      	mov	r3, r7
 800dae0:	464a      	mov	r2, r9
 800dae2:	4628      	mov	r0, r5
 800dae4:	9109      	str	r1, [sp, #36]	@ 0x24
 800dae6:	f007 fd4d 	bl	8015584 <uxr_update_output_stream_heartbeat_timestamp>
 800daea:	eb08 0304 	add.w	r3, r8, r4
 800daee:	2800      	cmp	r0, #0
 800daf0:	d0da      	beq.n	800daa8 <listen_message_reliably+0x34>
 800daf2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800daf6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800dafa:	9304      	str	r3, [sp, #16]
 800dafc:	4640      	mov	r0, r8
 800dafe:	f000 fcaf 	bl	800e460 <uxr_session_header_offset>
 800db02:	3501      	adds	r5, #1
 800db04:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800db08:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800db0c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800db10:	2300      	movs	r3, #0
 800db12:	2211      	movs	r2, #17
 800db14:	9000      	str	r0, [sp, #0]
 800db16:	a90c      	add	r1, sp, #48	@ 0x30
 800db18:	4650      	mov	r0, sl
 800db1a:	f7fb fff9 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 800db1e:	2300      	movs	r3, #0
 800db20:	2205      	movs	r2, #5
 800db22:	210b      	movs	r1, #11
 800db24:	4650      	mov	r0, sl
 800db26:	f001 fa9d 	bl	800f064 <uxr_buffer_submessage_header>
 800db2a:	8968      	ldrh	r0, [r5, #10]
 800db2c:	2101      	movs	r1, #1
 800db2e:	f007 fdeb 	bl	8015708 <uxr_seq_num_add>
 800db32:	892b      	ldrh	r3, [r5, #8]
 800db34:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800db38:	4602      	mov	r2, r0
 800db3a:	9b04      	ldr	r3, [sp, #16]
 800db3c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800db40:	a90a      	add	r1, sp, #40	@ 0x28
 800db42:	4650      	mov	r0, sl
 800db44:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800db48:	f002 fca6 	bl	8010498 <uxr_serialize_HEARTBEAT_Payload>
 800db4c:	2200      	movs	r2, #0
 800db4e:	4611      	mov	r1, r2
 800db50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800db52:	4640      	mov	r0, r8
 800db54:	f000 fc2e 	bl	800e3b4 <uxr_stamp_session_header>
 800db58:	4650      	mov	r0, sl
 800db5a:	f7fc f817 	bl	8009b8c <ucdr_buffer_length>
 800db5e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800db62:	4602      	mov	r2, r0
 800db64:	a90c      	add	r1, sp, #48	@ 0x30
 800db66:	e9d3 0500 	ldrd	r0, r5, [r3]
 800db6a:	4444      	add	r4, r8
 800db6c:	47a8      	blx	r5
 800db6e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800db72:	9903      	ldr	r1, [sp, #12]
 800db74:	455a      	cmp	r2, fp
 800db76:	f106 0601 	add.w	r6, r6, #1
 800db7a:	eb73 0101 	sbcs.w	r1, r3, r1
 800db7e:	b2f0      	uxtb	r0, r6
 800db80:	db9c      	blt.n	800dabc <listen_message_reliably+0x48>
 800db82:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800db86:	4283      	cmp	r3, r0
 800db88:	d89e      	bhi.n	800dac8 <listen_message_reliably+0x54>
 800db8a:	9a03      	ldr	r2, [sp, #12]
 800db8c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800db90:	429a      	cmp	r2, r3
 800db92:	bf08      	it	eq
 800db94:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800db98:	d01e      	beq.n	800dbd8 <listen_message_reliably+0x164>
 800db9a:	ebab 0309 	sub.w	r3, fp, r9
 800db9e:	9905      	ldr	r1, [sp, #20]
 800dba0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	bf08      	it	eq
 800dba8:	2301      	moveq	r3, #1
 800dbaa:	4299      	cmp	r1, r3
 800dbac:	bfa8      	it	ge
 800dbae:	4619      	movge	r1, r3
 800dbb0:	6894      	ldr	r4, [r2, #8]
 800dbb2:	6810      	ldr	r0, [r2, #0]
 800dbb4:	4689      	mov	r9, r1
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	aa08      	add	r2, sp, #32
 800dbba:	a907      	add	r1, sp, #28
 800dbbc:	47a0      	blx	r4
 800dbbe:	b968      	cbnz	r0, 800dbdc <listen_message_reliably+0x168>
 800dbc0:	9b05      	ldr	r3, [sp, #20]
 800dbc2:	eba3 0309 	sub.w	r3, r3, r9
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	9305      	str	r3, [sp, #20]
 800dbca:	f73f af5c 	bgt.w	800da86 <listen_message_reliably+0x12>
 800dbce:	4604      	mov	r4, r0
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	b01d      	add	sp, #116	@ 0x74
 800dbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd8:	9b05      	ldr	r3, [sp, #20]
 800dbda:	e7e0      	b.n	800db9e <listen_message_reliably+0x12a>
 800dbdc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	a80c      	add	r0, sp, #48	@ 0x30
 800dbe4:	f7fb ffa6 	bl	8009b34 <ucdr_init_buffer>
 800dbe8:	2500      	movs	r5, #0
 800dbea:	f10d 031a 	add.w	r3, sp, #26
 800dbee:	aa06      	add	r2, sp, #24
 800dbf0:	a90c      	add	r1, sp, #48	@ 0x30
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	f88d 5018 	strb.w	r5, [sp, #24]
 800dbf8:	f000 fbf0 	bl	800e3dc <uxr_read_session_header>
 800dbfc:	b918      	cbnz	r0, 800dc06 <listen_message_reliably+0x192>
 800dbfe:	4620      	mov	r0, r4
 800dc00:	b01d      	add	sp, #116	@ 0x74
 800dc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc06:	4629      	mov	r1, r5
 800dc08:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800dc0c:	f001 f91c 	bl	800ee48 <uxr_stream_id_from_raw>
 800dc10:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800dc14:	2d01      	cmp	r5, #1
 800dc16:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800dc1a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800dc1e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dc22:	d04b      	beq.n	800dcbc <listen_message_reliably+0x248>
 800dc24:	2d02      	cmp	r5, #2
 800dc26:	d00f      	beq.n	800dc48 <listen_message_reliably+0x1d4>
 800dc28:	2d00      	cmp	r5, #0
 800dc2a:	d1e8      	bne.n	800dbfe <listen_message_reliably+0x18a>
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	4628      	mov	r0, r5
 800dc30:	f001 f90a 	bl	800ee48 <uxr_stream_id_from_raw>
 800dc34:	a90c      	add	r1, sp, #48	@ 0x30
 800dc36:	4602      	mov	r2, r0
 800dc38:	4640      	mov	r0, r8
 800dc3a:	920a      	str	r2, [sp, #40]	@ 0x28
 800dc3c:	f7ff fd92 	bl	800d764 <read_submessage_list>
 800dc40:	4620      	mov	r0, r4
 800dc42:	b01d      	add	sp, #116	@ 0x74
 800dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc48:	4631      	mov	r1, r6
 800dc4a:	f108 0008 	add.w	r0, r8, #8
 800dc4e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800dc52:	f001 f9e7 	bl	800f024 <uxr_get_input_reliable_stream>
 800dc56:	4607      	mov	r7, r0
 800dc58:	b338      	cbz	r0, 800dcaa <listen_message_reliably+0x236>
 800dc5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc5c:	9203      	str	r2, [sp, #12]
 800dc5e:	a80c      	add	r0, sp, #48	@ 0x30
 800dc60:	f7fb ff98 	bl	8009b94 <ucdr_buffer_remaining>
 800dc64:	4603      	mov	r3, r0
 800dc66:	f10d 0019 	add.w	r0, sp, #25
 800dc6a:	9000      	str	r0, [sp, #0]
 800dc6c:	9a03      	ldr	r2, [sp, #12]
 800dc6e:	4651      	mov	r1, sl
 800dc70:	4638      	mov	r0, r7
 800dc72:	f007 f89d 	bl	8014db0 <uxr_receive_reliable_message>
 800dc76:	b1c0      	cbz	r0, 800dcaa <listen_message_reliably+0x236>
 800dc78:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800dc7c:	b393      	cbz	r3, 800dce4 <listen_message_reliably+0x270>
 800dc7e:	ad14      	add	r5, sp, #80	@ 0x50
 800dc80:	f04f 0a02 	mov.w	sl, #2
 800dc84:	e00a      	b.n	800dc9c <listen_message_reliably+0x228>
 800dc86:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800dc8a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800dc8e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800dc92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc94:	4629      	mov	r1, r5
 800dc96:	4640      	mov	r0, r8
 800dc98:	f7ff fd64 	bl	800d764 <read_submessage_list>
 800dc9c:	2204      	movs	r2, #4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4638      	mov	r0, r7
 800dca2:	f007 f905 	bl	8014eb0 <uxr_next_input_reliable_buffer_available>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d1ed      	bne.n	800dc86 <listen_message_reliably+0x212>
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4632      	mov	r2, r6
 800dcae:	4649      	mov	r1, r9
 800dcb0:	f7ff fbd2 	bl	800d458 <write_submessage_acknack.isra.0>
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	b01d      	add	sp, #116	@ 0x74
 800dcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	f108 0008 	add.w	r0, r8, #8
 800dcc2:	f001 f9a5 	bl	800f010 <uxr_get_input_best_effort_stream>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d099      	beq.n	800dbfe <listen_message_reliably+0x18a>
 800dcca:	4651      	mov	r1, sl
 800dccc:	f006 ffdc 	bl	8014c88 <uxr_receive_best_effort_message>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d094      	beq.n	800dbfe <listen_message_reliably+0x18a>
 800dcd4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800dcd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcda:	a90c      	add	r1, sp, #48	@ 0x30
 800dcdc:	4640      	mov	r0, r8
 800dcde:	f7ff fd41 	bl	800d764 <read_submessage_list>
 800dce2:	e78c      	b.n	800dbfe <listen_message_reliably+0x18a>
 800dce4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800dce8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dcea:	a90c      	add	r1, sp, #48	@ 0x30
 800dcec:	4640      	mov	r0, r8
 800dcee:	f7ff fd39 	bl	800d764 <read_submessage_list>
 800dcf2:	e7c4      	b.n	800dc7e <listen_message_reliably+0x20a>

0800dcf4 <uxr_run_session_timeout>:
 800dcf4:	b570      	push	{r4, r5, r6, lr}
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	f001 f9f9 	bl	800f0f0 <uxr_millis>
 800dcfe:	4606      	mov	r6, r0
 800dd00:	4620      	mov	r0, r4
 800dd02:	f7ff fc71 	bl	800d5e8 <uxr_flash_output_streams>
 800dd06:	4629      	mov	r1, r5
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f7ff feb3 	bl	800da74 <listen_message_reliably>
 800dd0e:	f001 f9ef 	bl	800f0f0 <uxr_millis>
 800dd12:	1b83      	subs	r3, r0, r6
 800dd14:	1ae9      	subs	r1, r5, r3
 800dd16:	2900      	cmp	r1, #0
 800dd18:	dcf6      	bgt.n	800dd08 <uxr_run_session_timeout+0x14>
 800dd1a:	f104 0008 	add.w	r0, r4, #8
 800dd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd22:	f001 b989 	b.w	800f038 <uxr_output_streams_confirmed>
 800dd26:	bf00      	nop

0800dd28 <uxr_run_session_until_data>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	460d      	mov	r5, r1
 800dd2e:	f001 f9df 	bl	800f0f0 <uxr_millis>
 800dd32:	4606      	mov	r6, r0
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7ff fc57 	bl	800d5e8 <uxr_flash_output_streams>
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800dd40:	4629      	mov	r1, r5
 800dd42:	e005      	b.n	800dd50 <uxr_run_session_until_data+0x28>
 800dd44:	f001 f9d4 	bl	800f0f0 <uxr_millis>
 800dd48:	1b83      	subs	r3, r0, r6
 800dd4a:	1ae9      	subs	r1, r5, r3
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	dd07      	ble.n	800dd60 <uxr_run_session_until_data+0x38>
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7ff fe8f 	bl	800da74 <listen_message_reliably>
 800dd56:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d0f2      	beq.n	800dd44 <uxr_run_session_until_data+0x1c>
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}
 800dd60:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800dd64:	bd70      	pop	{r4, r5, r6, pc}
 800dd66:	bf00      	nop

0800dd68 <uxr_run_session_until_confirm_delivery>:
 800dd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	460d      	mov	r5, r1
 800dd70:	f001 f9be 	bl	800f0f0 <uxr_millis>
 800dd74:	4607      	mov	r7, r0
 800dd76:	4630      	mov	r0, r6
 800dd78:	f7ff fc36 	bl	800d5e8 <uxr_flash_output_streams>
 800dd7c:	2d00      	cmp	r5, #0
 800dd7e:	f106 0808 	add.w	r8, r6, #8
 800dd82:	bfa8      	it	ge
 800dd84:	462c      	movge	r4, r5
 800dd86:	da07      	bge.n	800dd98 <uxr_run_session_until_confirm_delivery+0x30>
 800dd88:	e00e      	b.n	800dda8 <uxr_run_session_until_confirm_delivery+0x40>
 800dd8a:	f7ff fe73 	bl	800da74 <listen_message_reliably>
 800dd8e:	f001 f9af 	bl	800f0f0 <uxr_millis>
 800dd92:	1bc3      	subs	r3, r0, r7
 800dd94:	1aec      	subs	r4, r5, r3
 800dd96:	d407      	bmi.n	800dda8 <uxr_run_session_until_confirm_delivery+0x40>
 800dd98:	4640      	mov	r0, r8
 800dd9a:	f001 f94d 	bl	800f038 <uxr_output_streams_confirmed>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4621      	mov	r1, r4
 800dda2:	4630      	mov	r0, r6
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d0f0      	beq.n	800dd8a <uxr_run_session_until_confirm_delivery+0x22>
 800dda8:	4640      	mov	r0, r8
 800ddaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddae:	f001 b943 	b.w	800f038 <uxr_output_streams_confirmed>
 800ddb2:	bf00      	nop

0800ddb4 <uxr_run_session_until_all_status>:
 800ddb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb8:	9c08      	ldr	r4, [sp, #32]
 800ddba:	4606      	mov	r6, r0
 800ddbc:	460f      	mov	r7, r1
 800ddbe:	4691      	mov	r9, r2
 800ddc0:	461d      	mov	r5, r3
 800ddc2:	f7ff fc11 	bl	800d5e8 <uxr_flash_output_streams>
 800ddc6:	b124      	cbz	r4, 800ddd2 <uxr_run_session_until_all_status+0x1e>
 800ddc8:	4622      	mov	r2, r4
 800ddca:	21ff      	movs	r1, #255	@ 0xff
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f008 fc7d 	bl	80166cc <memset>
 800ddd2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800ddd6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ddd8:	f001 f98a 	bl	800f0f0 <uxr_millis>
 800dddc:	3d01      	subs	r5, #1
 800ddde:	f1a9 0902 	sub.w	r9, r9, #2
 800dde2:	4680      	mov	r8, r0
 800dde4:	4639      	mov	r1, r7
 800dde6:	4630      	mov	r0, r6
 800dde8:	f7ff fe44 	bl	800da74 <listen_message_reliably>
 800ddec:	f001 f980 	bl	800f0f0 <uxr_millis>
 800ddf0:	eba0 0008 	sub.w	r0, r0, r8
 800ddf4:	1a39      	subs	r1, r7, r0
 800ddf6:	b344      	cbz	r4, 800de4a <uxr_run_session_until_all_status+0x96>
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	46ac      	mov	ip, r5
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e002      	b.n	800de06 <uxr_run_session_until_all_status+0x52>
 800de00:	42a3      	cmp	r3, r4
 800de02:	d20d      	bcs.n	800de20 <uxr_run_session_until_all_status+0x6c>
 800de04:	3301      	adds	r3, #1
 800de06:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800de0a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800de0e:	d1f7      	bne.n	800de00 <uxr_run_session_until_all_status+0x4c>
 800de10:	42a3      	cmp	r3, r4
 800de12:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800de16:	d213      	bcs.n	800de40 <uxr_run_session_until_all_status+0x8c>
 800de18:	2a00      	cmp	r2, #0
 800de1a:	d0f3      	beq.n	800de04 <uxr_run_session_until_all_status+0x50>
 800de1c:	2900      	cmp	r1, #0
 800de1e:	dce2      	bgt.n	800dde6 <uxr_run_session_until_all_status+0x32>
 800de20:	2300      	movs	r3, #0
 800de22:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800de24:	442c      	add	r4, r5
 800de26:	e001      	b.n	800de2c <uxr_run_session_until_all_status+0x78>
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d812      	bhi.n	800de52 <uxr_run_session_until_all_status+0x9e>
 800de2c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800de30:	4284      	cmp	r4, r0
 800de32:	d1f9      	bne.n	800de28 <uxr_run_session_until_all_status+0x74>
 800de34:	2b01      	cmp	r3, #1
 800de36:	bf8c      	ite	hi
 800de38:	2000      	movhi	r0, #0
 800de3a:	2001      	movls	r0, #1
 800de3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de40:	2900      	cmp	r1, #0
 800de42:	dded      	ble.n	800de20 <uxr_run_session_until_all_status+0x6c>
 800de44:	2a00      	cmp	r2, #0
 800de46:	d1ce      	bne.n	800dde6 <uxr_run_session_until_all_status+0x32>
 800de48:	e7ea      	b.n	800de20 <uxr_run_session_until_all_status+0x6c>
 800de4a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800de4c:	2001      	movs	r0, #1
 800de4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de52:	2000      	movs	r0, #0
 800de54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800de58 <wait_session_status>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	4604      	mov	r4, r0
 800de5e:	b09d      	sub	sp, #116	@ 0x74
 800de60:	20ff      	movs	r0, #255	@ 0xff
 800de62:	7160      	strb	r0, [r4, #5]
 800de64:	9303      	str	r3, [sp, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 80b6 	beq.w	800dfd8 <wait_session_status+0x180>
 800de6c:	468a      	mov	sl, r1
 800de6e:	4691      	mov	r9, r2
 800de70:	f04f 0b00 	mov.w	fp, #0
 800de74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800de76:	464a      	mov	r2, r9
 800de78:	e9d3 0500 	ldrd	r0, r5, [r3]
 800de7c:	4651      	mov	r1, sl
 800de7e:	47a8      	blx	r5
 800de80:	f001 f936 	bl	800f0f0 <uxr_millis>
 800de84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800de88:	4605      	mov	r5, r0
 800de8a:	e009      	b.n	800dea0 <wait_session_status+0x48>
 800de8c:	f001 f930 	bl	800f0f0 <uxr_millis>
 800de90:	1b40      	subs	r0, r0, r5
 800de92:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800de96:	2b00      	cmp	r3, #0
 800de98:	dd40      	ble.n	800df1c <wait_session_status+0xc4>
 800de9a:	7960      	ldrb	r0, [r4, #5]
 800de9c:	28ff      	cmp	r0, #255	@ 0xff
 800de9e:	d145      	bne.n	800df2c <wait_session_status+0xd4>
 800dea0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800dea2:	a908      	add	r1, sp, #32
 800dea4:	6896      	ldr	r6, [r2, #8]
 800dea6:	6810      	ldr	r0, [r2, #0]
 800dea8:	aa09      	add	r2, sp, #36	@ 0x24
 800deaa:	47b0      	blx	r6
 800deac:	2800      	cmp	r0, #0
 800deae:	d0ed      	beq.n	800de8c <wait_session_status+0x34>
 800deb0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800deb4:	a80c      	add	r0, sp, #48	@ 0x30
 800deb6:	f7fb fe3d 	bl	8009b34 <ucdr_init_buffer>
 800deba:	2600      	movs	r6, #0
 800debc:	f10d 031e 	add.w	r3, sp, #30
 800dec0:	aa07      	add	r2, sp, #28
 800dec2:	a90c      	add	r1, sp, #48	@ 0x30
 800dec4:	4620      	mov	r0, r4
 800dec6:	f88d 601c 	strb.w	r6, [sp, #28]
 800deca:	f000 fa87 	bl	800e3dc <uxr_read_session_header>
 800dece:	2800      	cmp	r0, #0
 800ded0:	d0dc      	beq.n	800de8c <wait_session_status+0x34>
 800ded2:	4631      	mov	r1, r6
 800ded4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ded8:	f000 ffb6 	bl	800ee48 <uxr_stream_id_from_raw>
 800dedc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800dee0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800dee4:	9302      	str	r3, [sp, #8]
 800dee6:	2f01      	cmp	r7, #1
 800dee8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800deec:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800def0:	d05c      	beq.n	800dfac <wait_session_status+0x154>
 800def2:	2f02      	cmp	r7, #2
 800def4:	d020      	beq.n	800df38 <wait_session_status+0xe0>
 800def6:	2f00      	cmp	r7, #0
 800def8:	d1c8      	bne.n	800de8c <wait_session_status+0x34>
 800defa:	4639      	mov	r1, r7
 800defc:	4638      	mov	r0, r7
 800defe:	f000 ffa3 	bl	800ee48 <uxr_stream_id_from_raw>
 800df02:	a90c      	add	r1, sp, #48	@ 0x30
 800df04:	4602      	mov	r2, r0
 800df06:	900b      	str	r0, [sp, #44]	@ 0x2c
 800df08:	4620      	mov	r0, r4
 800df0a:	f7ff fc2b 	bl	800d764 <read_submessage_list>
 800df0e:	f001 f8ef 	bl	800f0f0 <uxr_millis>
 800df12:	1b40      	subs	r0, r0, r5
 800df14:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800df18:	2b00      	cmp	r3, #0
 800df1a:	dcbe      	bgt.n	800de9a <wait_session_status+0x42>
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	7960      	ldrb	r0, [r4, #5]
 800df20:	f10b 0b01 	add.w	fp, fp, #1
 800df24:	455b      	cmp	r3, fp
 800df26:	d001      	beq.n	800df2c <wait_session_status+0xd4>
 800df28:	28ff      	cmp	r0, #255	@ 0xff
 800df2a:	d0a3      	beq.n	800de74 <wait_session_status+0x1c>
 800df2c:	38ff      	subs	r0, #255	@ 0xff
 800df2e:	bf18      	it	ne
 800df30:	2001      	movne	r0, #1
 800df32:	b01d      	add	sp, #116	@ 0x74
 800df34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df38:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800df3c:	9304      	str	r3, [sp, #16]
 800df3e:	4631      	mov	r1, r6
 800df40:	f104 0008 	add.w	r0, r4, #8
 800df44:	f001 f86e 	bl	800f024 <uxr_get_input_reliable_stream>
 800df48:	4680      	mov	r8, r0
 800df4a:	b348      	cbz	r0, 800dfa0 <wait_session_status+0x148>
 800df4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800df4e:	9205      	str	r2, [sp, #20]
 800df50:	a80c      	add	r0, sp, #48	@ 0x30
 800df52:	f7fb fe1f 	bl	8009b94 <ucdr_buffer_remaining>
 800df56:	4603      	mov	r3, r0
 800df58:	f10d 001d 	add.w	r0, sp, #29
 800df5c:	9000      	str	r0, [sp, #0]
 800df5e:	9a05      	ldr	r2, [sp, #20]
 800df60:	9902      	ldr	r1, [sp, #8]
 800df62:	4640      	mov	r0, r8
 800df64:	f006 ff24 	bl	8014db0 <uxr_receive_reliable_message>
 800df68:	b1d0      	cbz	r0, 800dfa0 <wait_session_status+0x148>
 800df6a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d03a      	beq.n	800dfe8 <wait_session_status+0x190>
 800df72:	9f04      	ldr	r7, [sp, #16]
 800df74:	e00a      	b.n	800df8c <wait_session_status+0x134>
 800df76:	f04f 0302 	mov.w	r3, #2
 800df7a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800df7e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800df82:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800df86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800df88:	f7ff fbec 	bl	800d764 <read_submessage_list>
 800df8c:	a914      	add	r1, sp, #80	@ 0x50
 800df8e:	2204      	movs	r2, #4
 800df90:	4640      	mov	r0, r8
 800df92:	f006 ff8d 	bl	8014eb0 <uxr_next_input_reliable_buffer_available>
 800df96:	4603      	mov	r3, r0
 800df98:	a914      	add	r1, sp, #80	@ 0x50
 800df9a:	4620      	mov	r0, r4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1ea      	bne.n	800df76 <wait_session_status+0x11e>
 800dfa0:	9904      	ldr	r1, [sp, #16]
 800dfa2:	4632      	mov	r2, r6
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7ff fa57 	bl	800d458 <write_submessage_acknack.isra.0>
 800dfaa:	e76f      	b.n	800de8c <wait_session_status+0x34>
 800dfac:	4631      	mov	r1, r6
 800dfae:	f104 0008 	add.w	r0, r4, #8
 800dfb2:	f001 f82d 	bl	800f010 <uxr_get_input_best_effort_stream>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	f43f af68 	beq.w	800de8c <wait_session_status+0x34>
 800dfbc:	9902      	ldr	r1, [sp, #8]
 800dfbe:	f006 fe63 	bl	8014c88 <uxr_receive_best_effort_message>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	f43f af62 	beq.w	800de8c <wait_session_status+0x34>
 800dfc8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dfcc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dfce:	a90c      	add	r1, sp, #48	@ 0x30
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f7ff fbc7 	bl	800d764 <read_submessage_list>
 800dfd6:	e759      	b.n	800de8c <wait_session_status+0x34>
 800dfd8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dfda:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dfde:	47a0      	blx	r4
 800dfe0:	2001      	movs	r0, #1
 800dfe2:	b01d      	add	sp, #116	@ 0x74
 800dfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dfec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dfee:	a90c      	add	r1, sp, #48	@ 0x30
 800dff0:	4620      	mov	r0, r4
 800dff2:	f7ff fbb7 	bl	800d764 <read_submessage_list>
 800dff6:	e7bc      	b.n	800df72 <wait_session_status+0x11a>

0800dff8 <uxr_delete_session_retries>:
 800dff8:	b530      	push	{r4, r5, lr}
 800dffa:	b08f      	sub	sp, #60	@ 0x3c
 800dffc:	4604      	mov	r4, r0
 800dffe:	460d      	mov	r5, r1
 800e000:	f000 fa2e 	bl	800e460 <uxr_session_header_offset>
 800e004:	2300      	movs	r3, #0
 800e006:	2210      	movs	r2, #16
 800e008:	9000      	str	r0, [sp, #0]
 800e00a:	a902      	add	r1, sp, #8
 800e00c:	a806      	add	r0, sp, #24
 800e00e:	f7fb fd7f 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 800e012:	a906      	add	r1, sp, #24
 800e014:	4620      	mov	r0, r4
 800e016:	f000 f973 	bl	800e300 <uxr_buffer_delete_session>
 800e01a:	2200      	movs	r2, #0
 800e01c:	4611      	mov	r1, r2
 800e01e:	9b06      	ldr	r3, [sp, #24]
 800e020:	4620      	mov	r0, r4
 800e022:	f000 f9c7 	bl	800e3b4 <uxr_stamp_session_header>
 800e026:	a806      	add	r0, sp, #24
 800e028:	f7fb fdb0 	bl	8009b8c <ucdr_buffer_length>
 800e02c:	462b      	mov	r3, r5
 800e02e:	4602      	mov	r2, r0
 800e030:	a902      	add	r1, sp, #8
 800e032:	4620      	mov	r0, r4
 800e034:	f7ff ff10 	bl	800de58 <wait_session_status>
 800e038:	b118      	cbz	r0, 800e042 <uxr_delete_session_retries+0x4a>
 800e03a:	7960      	ldrb	r0, [r4, #5]
 800e03c:	fab0 f080 	clz	r0, r0
 800e040:	0940      	lsrs	r0, r0, #5
 800e042:	b00f      	add	sp, #60	@ 0x3c
 800e044:	bd30      	pop	{r4, r5, pc}
 800e046:	bf00      	nop

0800e048 <uxr_create_session>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	f100 0b08 	add.w	fp, r0, #8
 800e050:	b0ab      	sub	sp, #172	@ 0xac
 800e052:	4604      	mov	r4, r0
 800e054:	4658      	mov	r0, fp
 800e056:	f000 ff2b 	bl	800eeb0 <uxr_reset_stream_storage>
 800e05a:	4620      	mov	r0, r4
 800e05c:	f000 fa00 	bl	800e460 <uxr_session_header_offset>
 800e060:	2300      	movs	r3, #0
 800e062:	9000      	str	r0, [sp, #0]
 800e064:	221c      	movs	r2, #28
 800e066:	a90b      	add	r1, sp, #44	@ 0x2c
 800e068:	a812      	add	r0, sp, #72	@ 0x48
 800e06a:	f7fb fd51 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 800e06e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e070:	8a1a      	ldrh	r2, [r3, #16]
 800e072:	3a04      	subs	r2, #4
 800e074:	b292      	uxth	r2, r2
 800e076:	a912      	add	r1, sp, #72	@ 0x48
 800e078:	4620      	mov	r0, r4
 800e07a:	f000 f917 	bl	800e2ac <uxr_buffer_create_session>
 800e07e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e080:	4620      	mov	r0, r4
 800e082:	f000 f983 	bl	800e38c <uxr_stamp_create_session_header>
 800e086:	a812      	add	r0, sp, #72	@ 0x48
 800e088:	f7fb fd80 	bl	8009b8c <ucdr_buffer_length>
 800e08c:	23ff      	movs	r3, #255	@ 0xff
 800e08e:	7163      	strb	r3, [r4, #5]
 800e090:	230a      	movs	r3, #10
 800e092:	46da      	mov	sl, fp
 800e094:	9303      	str	r3, [sp, #12]
 800e096:	4683      	mov	fp, r0
 800e098:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e09a:	465a      	mov	r2, fp
 800e09c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e0a0:	a90b      	add	r1, sp, #44	@ 0x2c
 800e0a2:	47a8      	blx	r5
 800e0a4:	f001 f824 	bl	800f0f0 <uxr_millis>
 800e0a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	e009      	b.n	800e0c4 <uxr_create_session+0x7c>
 800e0b0:	f001 f81e 	bl	800f0f0 <uxr_millis>
 800e0b4:	1b40      	subs	r0, r0, r5
 800e0b6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	7962      	ldrb	r2, [r4, #5]
 800e0be:	dd38      	ble.n	800e132 <uxr_create_session+0xea>
 800e0c0:	2aff      	cmp	r2, #255	@ 0xff
 800e0c2:	d13c      	bne.n	800e13e <uxr_create_session+0xf6>
 800e0c4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e0c6:	a907      	add	r1, sp, #28
 800e0c8:	6896      	ldr	r6, [r2, #8]
 800e0ca:	6810      	ldr	r0, [r2, #0]
 800e0cc:	aa08      	add	r2, sp, #32
 800e0ce:	47b0      	blx	r6
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0ed      	beq.n	800e0b0 <uxr_create_session+0x68>
 800e0d4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e0d8:	a81a      	add	r0, sp, #104	@ 0x68
 800e0da:	f7fb fd2b 	bl	8009b34 <ucdr_init_buffer>
 800e0de:	2600      	movs	r6, #0
 800e0e0:	f10d 031a 	add.w	r3, sp, #26
 800e0e4:	aa06      	add	r2, sp, #24
 800e0e6:	a91a      	add	r1, sp, #104	@ 0x68
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	f88d 6018 	strb.w	r6, [sp, #24]
 800e0ee:	f000 f975 	bl	800e3dc <uxr_read_session_header>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d0dc      	beq.n	800e0b0 <uxr_create_session+0x68>
 800e0f6:	4631      	mov	r1, r6
 800e0f8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e0fc:	f000 fea4 	bl	800ee48 <uxr_stream_id_from_raw>
 800e100:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800e104:	2e01      	cmp	r6, #1
 800e106:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e10a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800e10e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e112:	d053      	beq.n	800e1bc <uxr_create_session+0x174>
 800e114:	2e02      	cmp	r6, #2
 800e116:	d018      	beq.n	800e14a <uxr_create_session+0x102>
 800e118:	2e00      	cmp	r6, #0
 800e11a:	d1c9      	bne.n	800e0b0 <uxr_create_session+0x68>
 800e11c:	4631      	mov	r1, r6
 800e11e:	4630      	mov	r0, r6
 800e120:	f000 fe92 	bl	800ee48 <uxr_stream_id_from_raw>
 800e124:	a91a      	add	r1, sp, #104	@ 0x68
 800e126:	4602      	mov	r2, r0
 800e128:	900a      	str	r0, [sp, #40]	@ 0x28
 800e12a:	4620      	mov	r0, r4
 800e12c:	f7ff fb1a 	bl	800d764 <read_submessage_list>
 800e130:	e7be      	b.n	800e0b0 <uxr_create_session+0x68>
 800e132:	9b03      	ldr	r3, [sp, #12]
 800e134:	3b01      	subs	r3, #1
 800e136:	9303      	str	r3, [sp, #12]
 800e138:	d001      	beq.n	800e13e <uxr_create_session+0xf6>
 800e13a:	2aff      	cmp	r2, #255	@ 0xff
 800e13c:	d0ac      	beq.n	800e098 <uxr_create_session+0x50>
 800e13e:	2a00      	cmp	r2, #0
 800e140:	d051      	beq.n	800e1e6 <uxr_create_session+0x19e>
 800e142:	2000      	movs	r0, #0
 800e144:	b02b      	add	sp, #172	@ 0xac
 800e146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e14a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e14e:	9304      	str	r3, [sp, #16]
 800e150:	4639      	mov	r1, r7
 800e152:	4650      	mov	r0, sl
 800e154:	f000 ff66 	bl	800f024 <uxr_get_input_reliable_stream>
 800e158:	4680      	mov	r8, r0
 800e15a:	b348      	cbz	r0, 800e1b0 <uxr_create_session+0x168>
 800e15c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e15e:	9205      	str	r2, [sp, #20]
 800e160:	a81a      	add	r0, sp, #104	@ 0x68
 800e162:	f7fb fd17 	bl	8009b94 <ucdr_buffer_remaining>
 800e166:	4603      	mov	r3, r0
 800e168:	f10d 0019 	add.w	r0, sp, #25
 800e16c:	9000      	str	r0, [sp, #0]
 800e16e:	9a05      	ldr	r2, [sp, #20]
 800e170:	4649      	mov	r1, r9
 800e172:	4640      	mov	r0, r8
 800e174:	f006 fe1c 	bl	8014db0 <uxr_receive_reliable_message>
 800e178:	b1d0      	cbz	r0, 800e1b0 <uxr_create_session+0x168>
 800e17a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d038      	beq.n	800e1f4 <uxr_create_session+0x1ac>
 800e182:	9e04      	ldr	r6, [sp, #16]
 800e184:	e00a      	b.n	800e19c <uxr_create_session+0x154>
 800e186:	f04f 0302 	mov.w	r3, #2
 800e18a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800e18e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800e192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e196:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e198:	f7ff fae4 	bl	800d764 <read_submessage_list>
 800e19c:	a922      	add	r1, sp, #136	@ 0x88
 800e19e:	2204      	movs	r2, #4
 800e1a0:	4640      	mov	r0, r8
 800e1a2:	f006 fe85 	bl	8014eb0 <uxr_next_input_reliable_buffer_available>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	a922      	add	r1, sp, #136	@ 0x88
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1ea      	bne.n	800e186 <uxr_create_session+0x13e>
 800e1b0:	9904      	ldr	r1, [sp, #16]
 800e1b2:	463a      	mov	r2, r7
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f7ff f94f 	bl	800d458 <write_submessage_acknack.isra.0>
 800e1ba:	e779      	b.n	800e0b0 <uxr_create_session+0x68>
 800e1bc:	4639      	mov	r1, r7
 800e1be:	4650      	mov	r0, sl
 800e1c0:	f000 ff26 	bl	800f010 <uxr_get_input_best_effort_stream>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	f43f af73 	beq.w	800e0b0 <uxr_create_session+0x68>
 800e1ca:	4649      	mov	r1, r9
 800e1cc:	f006 fd5c 	bl	8014c88 <uxr_receive_best_effort_message>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	f43f af6d 	beq.w	800e0b0 <uxr_create_session+0x68>
 800e1d6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e1da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1dc:	a91a      	add	r1, sp, #104	@ 0x68
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f7ff fac0 	bl	800d764 <read_submessage_list>
 800e1e4:	e764      	b.n	800e0b0 <uxr_create_session+0x68>
 800e1e6:	4650      	mov	r0, sl
 800e1e8:	f000 fe62 	bl	800eeb0 <uxr_reset_stream_storage>
 800e1ec:	2001      	movs	r0, #1
 800e1ee:	b02b      	add	sp, #172	@ 0xac
 800e1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800e1f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1fa:	a91a      	add	r1, sp, #104	@ 0x68
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f7ff fab1 	bl	800d764 <read_submessage_list>
 800e202:	e7be      	b.n	800e182 <uxr_create_session+0x13a>

0800e204 <uxr_prepare_stream_to_write_submessage>:
 800e204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	b082      	sub	sp, #8
 800e20a:	4682      	mov	sl, r0
 800e20c:	4610      	mov	r0, r2
 800e20e:	4615      	mov	r5, r2
 800e210:	461e      	mov	r6, r3
 800e212:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800e216:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800e21a:	9101      	str	r1, [sp, #4]
 800e21c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e220:	f000 ff60 	bl	800f0e4 <uxr_submessage_padding>
 800e224:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e228:	f105 0904 	add.w	r9, r5, #4
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	4481      	add	r9, r0
 800e230:	d01d      	beq.n	800e26e <uxr_prepare_stream_to_write_submessage+0x6a>
 800e232:	2b02      	cmp	r3, #2
 800e234:	d116      	bne.n	800e264 <uxr_prepare_stream_to_write_submessage+0x60>
 800e236:	4621      	mov	r1, r4
 800e238:	f10a 0008 	add.w	r0, sl, #8
 800e23c:	f000 fede 	bl	800effc <uxr_get_output_reliable_stream>
 800e240:	4604      	mov	r4, r0
 800e242:	b158      	cbz	r0, 800e25c <uxr_prepare_stream_to_write_submessage+0x58>
 800e244:	4649      	mov	r1, r9
 800e246:	4632      	mov	r2, r6
 800e248:	f006 ffee 	bl	8015228 <uxr_prepare_reliable_buffer_to_write>
 800e24c:	4604      	mov	r4, r0
 800e24e:	b12c      	cbz	r4, 800e25c <uxr_prepare_stream_to_write_submessage+0x58>
 800e250:	4643      	mov	r3, r8
 800e252:	b2aa      	uxth	r2, r5
 800e254:	4639      	mov	r1, r7
 800e256:	4630      	mov	r0, r6
 800e258:	f000 ff04 	bl	800f064 <uxr_buffer_submessage_header>
 800e25c:	4620      	mov	r0, r4
 800e25e:	b002      	add	sp, #8
 800e260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e264:	2400      	movs	r4, #0
 800e266:	4620      	mov	r0, r4
 800e268:	b002      	add	sp, #8
 800e26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e26e:	4621      	mov	r1, r4
 800e270:	f10a 0008 	add.w	r0, sl, #8
 800e274:	f000 feba 	bl	800efec <uxr_get_output_best_effort_stream>
 800e278:	4604      	mov	r4, r0
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d0ee      	beq.n	800e25c <uxr_prepare_stream_to_write_submessage+0x58>
 800e27e:	4649      	mov	r1, r9
 800e280:	4632      	mov	r2, r6
 800e282:	f006 ff01 	bl	8015088 <uxr_prepare_best_effort_buffer_to_write>
 800e286:	4604      	mov	r4, r0
 800e288:	e7e1      	b.n	800e24e <uxr_prepare_stream_to_write_submessage+0x4a>
 800e28a:	bf00      	nop

0800e28c <uxr_init_session_info>:
 800e28c:	0e13      	lsrs	r3, r2, #24
 800e28e:	7043      	strb	r3, [r0, #1]
 800e290:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800e294:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e298:	7001      	strb	r1, [r0, #0]
 800e29a:	70c3      	strb	r3, [r0, #3]
 800e29c:	2109      	movs	r1, #9
 800e29e:	23ff      	movs	r3, #255	@ 0xff
 800e2a0:	f880 c002 	strb.w	ip, [r0, #2]
 800e2a4:	7102      	strb	r2, [r0, #4]
 800e2a6:	80c1      	strh	r1, [r0, #6]
 800e2a8:	7143      	strb	r3, [r0, #5]
 800e2aa:	4770      	bx	lr

0800e2ac <uxr_buffer_create_session>:
 800e2ac:	b530      	push	{r4, r5, lr}
 800e2ae:	b089      	sub	sp, #36	@ 0x24
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	4d12      	ldr	r5, [pc, #72]	@ (800e2fc <uxr_buffer_create_session+0x50>)
 800e2b4:	9307      	str	r3, [sp, #28]
 800e2b6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	80c2      	strh	r2, [r0, #6]
 800e2c0:	f88d 2004 	strb.w	r2, [sp, #4]
 800e2c4:	682a      	ldr	r2, [r5, #0]
 800e2c6:	9200      	str	r2, [sp, #0]
 800e2c8:	88aa      	ldrh	r2, [r5, #4]
 800e2ca:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e2ce:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e2d2:	9202      	str	r2, [sp, #8]
 800e2d4:	460c      	mov	r4, r1
 800e2d6:	7802      	ldrb	r2, [r0, #0]
 800e2d8:	9303      	str	r3, [sp, #12]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	f88d 200c 	strb.w	r2, [sp, #12]
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	2210      	movs	r2, #16
 800e2e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e2e8:	9306      	str	r3, [sp, #24]
 800e2ea:	f000 febb 	bl	800f064 <uxr_buffer_submessage_header>
 800e2ee:	4669      	mov	r1, sp
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f001 ff33 	bl	801015c <uxr_serialize_CREATE_CLIENT_Payload>
 800e2f6:	b009      	add	sp, #36	@ 0x24
 800e2f8:	bd30      	pop	{r4, r5, pc}
 800e2fa:	bf00      	nop
 800e2fc:	080176b4 	.word	0x080176b4

0800e300 <uxr_buffer_delete_session>:
 800e300:	b510      	push	{r4, lr}
 800e302:	4b0c      	ldr	r3, [pc, #48]	@ (800e334 <uxr_buffer_delete_session+0x34>)
 800e304:	b082      	sub	sp, #8
 800e306:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800e30a:	f8ad c006 	strh.w	ip, [sp, #6]
 800e30e:	460c      	mov	r4, r1
 800e310:	2202      	movs	r2, #2
 800e312:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e316:	80c2      	strh	r2, [r0, #6]
 800e318:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e31c:	2204      	movs	r2, #4
 800e31e:	2300      	movs	r3, #0
 800e320:	2103      	movs	r1, #3
 800e322:	4620      	mov	r0, r4
 800e324:	f000 fe9e 	bl	800f064 <uxr_buffer_submessage_header>
 800e328:	a901      	add	r1, sp, #4
 800e32a:	4620      	mov	r0, r4
 800e32c:	f001 ffbc 	bl	80102a8 <uxr_serialize_DELETE_Payload>
 800e330:	b002      	add	sp, #8
 800e332:	bd10      	pop	{r4, pc}
 800e334:	080176b4 	.word	0x080176b4

0800e338 <uxr_read_create_session_status>:
 800e338:	b510      	push	{r4, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	4604      	mov	r4, r0
 800e33e:	4608      	mov	r0, r1
 800e340:	a901      	add	r1, sp, #4
 800e342:	f001 ffc1 	bl	80102c8 <uxr_deserialize_STATUS_AGENT_Payload>
 800e346:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e34a:	7163      	strb	r3, [r4, #5]
 800e34c:	b008      	add	sp, #32
 800e34e:	bd10      	pop	{r4, pc}

0800e350 <uxr_read_delete_session_status>:
 800e350:	b510      	push	{r4, lr}
 800e352:	4604      	mov	r4, r0
 800e354:	b084      	sub	sp, #16
 800e356:	4608      	mov	r0, r1
 800e358:	a902      	add	r1, sp, #8
 800e35a:	f001 ffe5 	bl	8010328 <uxr_deserialize_STATUS_Payload>
 800e35e:	88e3      	ldrh	r3, [r4, #6]
 800e360:	2b02      	cmp	r3, #2
 800e362:	d001      	beq.n	800e368 <uxr_read_delete_session_status+0x18>
 800e364:	b004      	add	sp, #16
 800e366:	bd10      	pop	{r4, pc}
 800e368:	f10d 000a 	add.w	r0, sp, #10
 800e36c:	f7fe feca 	bl	800d104 <uxr_object_id_from_raw>
 800e370:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e374:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e378:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	2b02      	cmp	r3, #2
 800e380:	bf04      	itt	eq
 800e382:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e386:	7163      	strbeq	r3, [r4, #5]
 800e388:	b004      	add	sp, #16
 800e38a:	bd10      	pop	{r4, pc}

0800e38c <uxr_stamp_create_session_header>:
 800e38c:	b510      	push	{r4, lr}
 800e38e:	2208      	movs	r2, #8
 800e390:	b08a      	sub	sp, #40	@ 0x28
 800e392:	4604      	mov	r4, r0
 800e394:	eb0d 0002 	add.w	r0, sp, r2
 800e398:	f7fb fbcc 	bl	8009b34 <ucdr_init_buffer>
 800e39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3a0:	9400      	str	r4, [sp, #0]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e3aa:	a802      	add	r0, sp, #8
 800e3ac:	f001 f854 	bl	800f458 <uxr_serialize_message_header>
 800e3b0:	b00a      	add	sp, #40	@ 0x28
 800e3b2:	bd10      	pop	{r4, pc}

0800e3b4 <uxr_stamp_session_header>:
 800e3b4:	b530      	push	{r4, r5, lr}
 800e3b6:	b08d      	sub	sp, #52	@ 0x34
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	9203      	str	r2, [sp, #12]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	a804      	add	r0, sp, #16
 800e3c2:	2208      	movs	r2, #8
 800e3c4:	f7fb fbb6 	bl	8009b34 <ucdr_init_buffer>
 800e3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3cc:	9b03      	ldr	r3, [sp, #12]
 800e3ce:	9400      	str	r4, [sp, #0]
 800e3d0:	462a      	mov	r2, r5
 800e3d2:	a804      	add	r0, sp, #16
 800e3d4:	f001 f840 	bl	800f458 <uxr_serialize_message_header>
 800e3d8:	b00d      	add	sp, #52	@ 0x34
 800e3da:	bd30      	pop	{r4, r5, pc}

0800e3dc <uxr_read_session_header>:
 800e3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e0:	4607      	mov	r7, r0
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	4608      	mov	r0, r1
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	4615      	mov	r5, r2
 800e3ea:	461e      	mov	r6, r3
 800e3ec:	f7fb fbd2 	bl	8009b94 <ucdr_buffer_remaining>
 800e3f0:	2808      	cmp	r0, #8
 800e3f2:	d803      	bhi.n	800e3fc <uxr_read_session_header+0x20>
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	b004      	add	sp, #16
 800e3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3fc:	f10d 080c 	add.w	r8, sp, #12
 800e400:	4633      	mov	r3, r6
 800e402:	462a      	mov	r2, r5
 800e404:	f8cd 8000 	str.w	r8, [sp]
 800e408:	4620      	mov	r0, r4
 800e40a:	f10d 010b 	add.w	r1, sp, #11
 800e40e:	f001 f841 	bl	800f494 <uxr_deserialize_message_header>
 800e412:	783a      	ldrb	r2, [r7, #0]
 800e414:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e418:	4293      	cmp	r3, r2
 800e41a:	d1eb      	bne.n	800e3f4 <uxr_read_session_header+0x18>
 800e41c:	061b      	lsls	r3, r3, #24
 800e41e:	d41c      	bmi.n	800e45a <uxr_read_session_header+0x7e>
 800e420:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e424:	787b      	ldrb	r3, [r7, #1]
 800e426:	429a      	cmp	r2, r3
 800e428:	d003      	beq.n	800e432 <uxr_read_session_header+0x56>
 800e42a:	2001      	movs	r0, #1
 800e42c:	f080 0001 	eor.w	r0, r0, #1
 800e430:	e7e1      	b.n	800e3f6 <uxr_read_session_header+0x1a>
 800e432:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e436:	78bb      	ldrb	r3, [r7, #2]
 800e438:	429a      	cmp	r2, r3
 800e43a:	f107 0102 	add.w	r1, r7, #2
 800e43e:	d1f4      	bne.n	800e42a <uxr_read_session_header+0x4e>
 800e440:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e444:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e448:	429a      	cmp	r2, r3
 800e44a:	d1ee      	bne.n	800e42a <uxr_read_session_header+0x4e>
 800e44c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e450:	784b      	ldrb	r3, [r1, #1]
 800e452:	429a      	cmp	r2, r3
 800e454:	d1e9      	bne.n	800e42a <uxr_read_session_header+0x4e>
 800e456:	2000      	movs	r0, #0
 800e458:	e7e8      	b.n	800e42c <uxr_read_session_header+0x50>
 800e45a:	2001      	movs	r0, #1
 800e45c:	e7cb      	b.n	800e3f6 <uxr_read_session_header+0x1a>
 800e45e:	bf00      	nop

0800e460 <uxr_session_header_offset>:
 800e460:	f990 3000 	ldrsb.w	r3, [r0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	bfac      	ite	ge
 800e468:	2008      	movge	r0, #8
 800e46a:	2004      	movlt	r0, #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop

0800e470 <uxr_init_base_object_request>:
 800e470:	b510      	push	{r4, lr}
 800e472:	88c3      	ldrh	r3, [r0, #6]
 800e474:	b082      	sub	sp, #8
 800e476:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e47a:	9101      	str	r1, [sp, #4]
 800e47c:	f1a3 010a 	sub.w	r1, r3, #10
 800e480:	b289      	uxth	r1, r1
 800e482:	42a1      	cmp	r1, r4
 800e484:	d80e      	bhi.n	800e4a4 <uxr_init_base_object_request+0x34>
 800e486:	3301      	adds	r3, #1
 800e488:	b29c      	uxth	r4, r3
 800e48a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	80c4      	strh	r4, [r0, #6]
 800e492:	9801      	ldr	r0, [sp, #4]
 800e494:	7011      	strb	r1, [r2, #0]
 800e496:	7053      	strb	r3, [r2, #1]
 800e498:	1c91      	adds	r1, r2, #2
 800e49a:	f7fe fe47 	bl	800d12c <uxr_object_id_to_raw>
 800e49e:	4620      	mov	r0, r4
 800e4a0:	b002      	add	sp, #8
 800e4a2:	bd10      	pop	{r4, pc}
 800e4a4:	230a      	movs	r3, #10
 800e4a6:	2100      	movs	r1, #0
 800e4a8:	461c      	mov	r4, r3
 800e4aa:	e7f1      	b.n	800e490 <uxr_init_base_object_request+0x20>

0800e4ac <uxr_parse_base_object_request>:
 800e4ac:	b570      	push	{r4, r5, r6, lr}
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	3002      	adds	r0, #2
 800e4b2:	460d      	mov	r5, r1
 800e4b4:	4616      	mov	r6, r2
 800e4b6:	f7fe fe25 	bl	800d104 <uxr_object_id_from_raw>
 800e4ba:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e4be:	8028      	strh	r0, [r5, #0]
 800e4c0:	806b      	strh	r3, [r5, #2]
 800e4c2:	7822      	ldrb	r2, [r4, #0]
 800e4c4:	7863      	ldrb	r3, [r4, #1]
 800e4c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e4ca:	8033      	strh	r3, [r6, #0]
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}
 800e4ce:	bf00      	nop

0800e4d0 <uxr_init_framing_io>:
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	7041      	strb	r1, [r0, #1]
 800e4d4:	7003      	strb	r3, [r0, #0]
 800e4d6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop

0800e4dc <uxr_write_framed_msg>:
 800e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e0:	4617      	mov	r7, r2
 800e4e2:	7842      	ldrb	r2, [r0, #1]
 800e4e4:	b083      	sub	sp, #12
 800e4e6:	460e      	mov	r6, r1
 800e4e8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800e4ec:	469a      	mov	sl, r3
 800e4ee:	2901      	cmp	r1, #1
 800e4f0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800e4fa:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800e4fe:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800e502:	f240 8137 	bls.w	800e774 <uxr_write_framed_msg+0x298>
 800e506:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e50a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800e50e:	2901      	cmp	r1, #1
 800e510:	f04f 0202 	mov.w	r2, #2
 800e514:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e518:	f240 808f 	bls.w	800e63a <uxr_write_framed_msg+0x15e>
 800e51c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e51e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800e522:	b2dd      	uxtb	r5, r3
 800e524:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e528:	2203      	movs	r2, #3
 800e52a:	2901      	cmp	r1, #1
 800e52c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e530:	f240 809a 	bls.w	800e668 <uxr_write_framed_msg+0x18c>
 800e534:	18a1      	adds	r1, r4, r2
 800e536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e538:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e53c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e540:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e544:	3201      	adds	r2, #1
 800e546:	2801      	cmp	r0, #1
 800e548:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e54c:	f240 80a0 	bls.w	800e690 <uxr_write_framed_msg+0x1b4>
 800e550:	18a0      	adds	r0, r4, r2
 800e552:	3201      	adds	r2, #1
 800e554:	b2d2      	uxtb	r2, r2
 800e556:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e55a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e55e:	2b00      	cmp	r3, #0
 800e560:	f000 80a9 	beq.w	800e6b6 <uxr_write_framed_msg+0x1da>
 800e564:	f04f 0900 	mov.w	r9, #0
 800e568:	46c8      	mov	r8, r9
 800e56a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e56e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e572:	2901      	cmp	r1, #1
 800e574:	f240 80c3 	bls.w	800e6fe <uxr_write_framed_msg+0x222>
 800e578:	2a29      	cmp	r2, #41	@ 0x29
 800e57a:	f200 809f 	bhi.w	800e6bc <uxr_write_framed_msg+0x1e0>
 800e57e:	18a1      	adds	r1, r4, r2
 800e580:	3201      	adds	r2, #1
 800e582:	b2d2      	uxtb	r2, r2
 800e584:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e588:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e58c:	ea89 0303 	eor.w	r3, r9, r3
 800e590:	498c      	ldr	r1, [pc, #560]	@ (800e7c4 <uxr_write_framed_msg+0x2e8>)
 800e592:	b2db      	uxtb	r3, r3
 800e594:	f108 0801 	add.w	r8, r8, #1
 800e598:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e59c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800e5a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e5a2:	4543      	cmp	r3, r8
 800e5a4:	d8e1      	bhi.n	800e56a <uxr_write_framed_msg+0x8e>
 800e5a6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e5aa:	fa5f f889 	uxtb.w	r8, r9
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	f04f 0900 	mov.w	r9, #0
 800e5b4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800e5b8:	fa5f f18a 	uxtb.w	r1, sl
 800e5bc:	2901      	cmp	r1, #1
 800e5be:	d921      	bls.n	800e604 <uxr_write_framed_msg+0x128>
 800e5c0:	2a29      	cmp	r2, #41	@ 0x29
 800e5c2:	f240 80af 	bls.w	800e724 <uxr_write_framed_msg+0x248>
 800e5c6:	2500      	movs	r5, #0
 800e5c8:	e000      	b.n	800e5cc <uxr_write_framed_msg+0xf0>
 800e5ca:	b160      	cbz	r0, 800e5e6 <uxr_write_framed_msg+0x10a>
 800e5cc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e5d0:	1b52      	subs	r2, r2, r5
 800e5d2:	465b      	mov	r3, fp
 800e5d4:	4421      	add	r1, r4
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	47b0      	blx	r6
 800e5da:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e5de:	4405      	add	r5, r0
 800e5e0:	4295      	cmp	r5, r2
 800e5e2:	d3f2      	bcc.n	800e5ca <uxr_write_framed_msg+0xee>
 800e5e4:	d003      	beq.n	800e5ee <uxr_write_framed_msg+0x112>
 800e5e6:	2000      	movs	r0, #0
 800e5e8:	b003      	add	sp, #12
 800e5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ee:	fa5f f18a 	uxtb.w	r1, sl
 800e5f2:	f04f 0300 	mov.w	r3, #0
 800e5f6:	2901      	cmp	r1, #1
 800e5f8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e5fc:	f04f 0200 	mov.w	r2, #0
 800e600:	f200 8090 	bhi.w	800e724 <uxr_write_framed_msg+0x248>
 800e604:	1c51      	adds	r1, r2, #1
 800e606:	b2c9      	uxtb	r1, r1
 800e608:	2929      	cmp	r1, #41	@ 0x29
 800e60a:	d8dc      	bhi.n	800e5c6 <uxr_write_framed_msg+0xea>
 800e60c:	18a5      	adds	r5, r4, r2
 800e60e:	4421      	add	r1, r4
 800e610:	3202      	adds	r2, #2
 800e612:	f088 0820 	eor.w	r8, r8, #32
 800e616:	4648      	mov	r0, r9
 800e618:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800e61c:	b2d2      	uxtb	r2, r2
 800e61e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800e622:	f04f 0901 	mov.w	r9, #1
 800e626:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e62a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e62e:	2800      	cmp	r0, #0
 800e630:	f040 8085 	bne.w	800e73e <uxr_write_framed_msg+0x262>
 800e634:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e638:	e7bc      	b.n	800e5b4 <uxr_write_framed_msg+0xd8>
 800e63a:	4611      	mov	r1, r2
 800e63c:	f04f 0c03 	mov.w	ip, #3
 800e640:	2204      	movs	r2, #4
 800e642:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e644:	4421      	add	r1, r4
 800e646:	b2dd      	uxtb	r5, r3
 800e648:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800e64c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800e650:	44a4      	add	ip, r4
 800e652:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e656:	f080 0020 	eor.w	r0, r0, #32
 800e65a:	2901      	cmp	r1, #1
 800e65c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800e660:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e664:	f63f af66 	bhi.w	800e534 <uxr_write_framed_msg+0x58>
 800e668:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e66a:	18a0      	adds	r0, r4, r2
 800e66c:	f085 0520 	eor.w	r5, r5, #32
 800e670:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e674:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e678:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800e67c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800e680:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800e684:	3202      	adds	r2, #2
 800e686:	2801      	cmp	r0, #1
 800e688:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e68c:	f63f af60 	bhi.w	800e550 <uxr_write_framed_msg+0x74>
 800e690:	1c50      	adds	r0, r2, #1
 800e692:	18a5      	adds	r5, r4, r2
 800e694:	fa54 f080 	uxtab	r0, r4, r0
 800e698:	3202      	adds	r2, #2
 800e69a:	f081 0120 	eor.w	r1, r1, #32
 800e69e:	b2d2      	uxtb	r2, r2
 800e6a0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e6a4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800e6a8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e6ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f47f af57 	bne.w	800e564 <uxr_write_framed_msg+0x88>
 800e6b6:	9301      	str	r3, [sp, #4]
 800e6b8:	4698      	mov	r8, r3
 800e6ba:	e779      	b.n	800e5b0 <uxr_write_framed_msg+0xd4>
 800e6bc:	2500      	movs	r5, #0
 800e6be:	e001      	b.n	800e6c4 <uxr_write_framed_msg+0x1e8>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d090      	beq.n	800e5e6 <uxr_write_framed_msg+0x10a>
 800e6c4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e6c8:	1b52      	subs	r2, r2, r5
 800e6ca:	465b      	mov	r3, fp
 800e6cc:	4421      	add	r1, r4
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	47b0      	blx	r6
 800e6d2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e6d6:	4405      	add	r5, r0
 800e6d8:	4295      	cmp	r5, r2
 800e6da:	d3f1      	bcc.n	800e6c0 <uxr_write_framed_msg+0x1e4>
 800e6dc:	d183      	bne.n	800e5e6 <uxr_write_framed_msg+0x10a>
 800e6de:	f04f 0300 	mov.w	r3, #0
 800e6e2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e6e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e6e8:	4543      	cmp	r3, r8
 800e6ea:	d964      	bls.n	800e7b6 <uxr_write_framed_msg+0x2da>
 800e6ec:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800e6f0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e6f4:	2901      	cmp	r1, #1
 800e6f6:	f04f 0200 	mov.w	r2, #0
 800e6fa:	f63f af3d 	bhi.w	800e578 <uxr_write_framed_msg+0x9c>
 800e6fe:	1c51      	adds	r1, r2, #1
 800e700:	b2c9      	uxtb	r1, r1
 800e702:	2929      	cmp	r1, #41	@ 0x29
 800e704:	d8da      	bhi.n	800e6bc <uxr_write_framed_msg+0x1e0>
 800e706:	18a0      	adds	r0, r4, r2
 800e708:	4421      	add	r1, r4
 800e70a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800e70e:	3202      	adds	r2, #2
 800e710:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800e714:	b2d2      	uxtb	r2, r2
 800e716:	f083 0020 	eor.w	r0, r3, #32
 800e71a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800e71e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e722:	e733      	b.n	800e58c <uxr_write_framed_msg+0xb0>
 800e724:	18a1      	adds	r1, r4, r2
 800e726:	3201      	adds	r2, #1
 800e728:	4648      	mov	r0, r9
 800e72a:	b2d2      	uxtb	r2, r2
 800e72c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800e730:	f04f 0901 	mov.w	r9, #1
 800e734:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e738:	2800      	cmp	r0, #0
 800e73a:	f43f af7b 	beq.w	800e634 <uxr_write_framed_msg+0x158>
 800e73e:	2500      	movs	r5, #0
 800e740:	e002      	b.n	800e748 <uxr_write_framed_msg+0x26c>
 800e742:	2800      	cmp	r0, #0
 800e744:	f43f af4f 	beq.w	800e5e6 <uxr_write_framed_msg+0x10a>
 800e748:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e74c:	1b52      	subs	r2, r2, r5
 800e74e:	465b      	mov	r3, fp
 800e750:	4421      	add	r1, r4
 800e752:	4638      	mov	r0, r7
 800e754:	47b0      	blx	r6
 800e756:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e75a:	4405      	add	r5, r0
 800e75c:	4295      	cmp	r5, r2
 800e75e:	d3f0      	bcc.n	800e742 <uxr_write_framed_msg+0x266>
 800e760:	f47f af41 	bne.w	800e5e6 <uxr_write_framed_msg+0x10a>
 800e764:	2300      	movs	r3, #0
 800e766:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e76a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e76c:	b298      	uxth	r0, r3
 800e76e:	b003      	add	sp, #12
 800e770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e774:	217d      	movs	r1, #125	@ 0x7d
 800e776:	f082 0220 	eor.w	r2, r2, #32
 800e77a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800e77e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800e782:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800e786:	2901      	cmp	r1, #1
 800e788:	f04f 0203 	mov.w	r2, #3
 800e78c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e790:	d804      	bhi.n	800e79c <uxr_write_framed_msg+0x2c0>
 800e792:	4611      	mov	r1, r2
 800e794:	f04f 0c04 	mov.w	ip, #4
 800e798:	2205      	movs	r2, #5
 800e79a:	e752      	b.n	800e642 <uxr_write_framed_msg+0x166>
 800e79c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e79e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800e7a2:	b2dd      	uxtb	r5, r3
 800e7a4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800e7a8:	2204      	movs	r2, #4
 800e7aa:	2901      	cmp	r1, #1
 800e7ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e7b0:	f63f aec0 	bhi.w	800e534 <uxr_write_framed_msg+0x58>
 800e7b4:	e758      	b.n	800e668 <uxr_write_framed_msg+0x18c>
 800e7b6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800e7ba:	fa5f f889 	uxtb.w	r8, r9
 800e7be:	9301      	str	r3, [sp, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	e6f5      	b.n	800e5b0 <uxr_write_framed_msg+0xd4>
 800e7c4:	08017eb4 	.word	0x08017eb4

0800e7c8 <uxr_framing_read_transport>:
 800e7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	461f      	mov	r7, r3
 800e7d2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800e7d6:	4689      	mov	r9, r1
 800e7d8:	4692      	mov	sl, r2
 800e7da:	f000 fc89 	bl	800f0f0 <uxr_millis>
 800e7de:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e7e2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800e7e6:	42b3      	cmp	r3, r6
 800e7e8:	4680      	mov	r8, r0
 800e7ea:	d061      	beq.n	800e8b0 <uxr_framing_read_transport+0xe8>
 800e7ec:	d81c      	bhi.n	800e828 <uxr_framing_read_transport+0x60>
 800e7ee:	1e75      	subs	r5, r6, #1
 800e7f0:	1aed      	subs	r5, r5, r3
 800e7f2:	b2ed      	uxtb	r5, r5
 800e7f4:	2600      	movs	r6, #0
 800e7f6:	455d      	cmp	r5, fp
 800e7f8:	d81f      	bhi.n	800e83a <uxr_framing_read_transport+0x72>
 800e7fa:	19ab      	adds	r3, r5, r6
 800e7fc:	455b      	cmp	r3, fp
 800e7fe:	bf84      	itt	hi
 800e800:	ebab 0605 	subhi.w	r6, fp, r5
 800e804:	b2f6      	uxtbhi	r6, r6
 800e806:	b9ed      	cbnz	r5, 800e844 <uxr_framing_read_transport+0x7c>
 800e808:	f04f 0b00 	mov.w	fp, #0
 800e80c:	f000 fc70 	bl	800f0f0 <uxr_millis>
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	eba0 0808 	sub.w	r8, r0, r8
 800e816:	eba3 0308 	sub.w	r3, r3, r8
 800e81a:	4658      	mov	r0, fp
 800e81c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e820:	603b      	str	r3, [r7, #0]
 800e822:	b003      	add	sp, #12
 800e824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e828:	2e00      	cmp	r6, #0
 800e82a:	d049      	beq.n	800e8c0 <uxr_framing_read_transport+0xf8>
 800e82c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800e830:	b2ed      	uxtb	r5, r5
 800e832:	3e01      	subs	r6, #1
 800e834:	455d      	cmp	r5, fp
 800e836:	b2f6      	uxtb	r6, r6
 800e838:	d9df      	bls.n	800e7fa <uxr_framing_read_transport+0x32>
 800e83a:	fa5f f58b 	uxtb.w	r5, fp
 800e83e:	2600      	movs	r6, #0
 800e840:	2d00      	cmp	r5, #0
 800e842:	d0e1      	beq.n	800e808 <uxr_framing_read_transport+0x40>
 800e844:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e848:	3102      	adds	r1, #2
 800e84a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	4421      	add	r1, r4
 800e852:	462a      	mov	r2, r5
 800e854:	4650      	mov	r0, sl
 800e856:	47c8      	blx	r9
 800e858:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800e85c:	4a1a      	ldr	r2, [pc, #104]	@ (800e8c8 <uxr_framing_read_transport+0x100>)
 800e85e:	4403      	add	r3, r0
 800e860:	0859      	lsrs	r1, r3, #1
 800e862:	fba2 2101 	umull	r2, r1, r2, r1
 800e866:	0889      	lsrs	r1, r1, #2
 800e868:	222a      	movs	r2, #42	@ 0x2a
 800e86a:	fb02 3111 	mls	r1, r2, r1, r3
 800e86e:	4683      	mov	fp, r0
 800e870:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800e874:	2800      	cmp	r0, #0
 800e876:	d0c7      	beq.n	800e808 <uxr_framing_read_transport+0x40>
 800e878:	42a8      	cmp	r0, r5
 800e87a:	d1c7      	bne.n	800e80c <uxr_framing_read_transport+0x44>
 800e87c:	2e00      	cmp	r6, #0
 800e87e:	d0c5      	beq.n	800e80c <uxr_framing_read_transport+0x44>
 800e880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	3102      	adds	r1, #2
 800e886:	4632      	mov	r2, r6
 800e888:	4421      	add	r1, r4
 800e88a:	2300      	movs	r3, #0
 800e88c:	4650      	mov	r0, sl
 800e88e:	47c8      	blx	r9
 800e890:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e894:	4a0c      	ldr	r2, [pc, #48]	@ (800e8c8 <uxr_framing_read_transport+0x100>)
 800e896:	180b      	adds	r3, r1, r0
 800e898:	0859      	lsrs	r1, r3, #1
 800e89a:	fba2 1201 	umull	r1, r2, r2, r1
 800e89e:	0892      	lsrs	r2, r2, #2
 800e8a0:	212a      	movs	r1, #42	@ 0x2a
 800e8a2:	fb01 3312 	mls	r3, r1, r2, r3
 800e8a6:	eb00 0b05 	add.w	fp, r0, r5
 800e8aa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800e8ae:	e7ad      	b.n	800e80c <uxr_framing_read_transport+0x44>
 800e8b0:	2600      	movs	r6, #0
 800e8b2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800e8b6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800e8b8:	d9bf      	bls.n	800e83a <uxr_framing_read_transport+0x72>
 800e8ba:	2102      	movs	r1, #2
 800e8bc:	2529      	movs	r5, #41	@ 0x29
 800e8be:	e7c4      	b.n	800e84a <uxr_framing_read_transport+0x82>
 800e8c0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800e8c4:	b2ed      	uxtb	r5, r5
 800e8c6:	e796      	b.n	800e7f6 <uxr_framing_read_transport+0x2e>
 800e8c8:	30c30c31 	.word	0x30c30c31

0800e8cc <uxr_read_framed_msg>:
 800e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d0:	461e      	mov	r6, r3
 800e8d2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800e8d6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800e8da:	429d      	cmp	r5, r3
 800e8dc:	b083      	sub	sp, #12
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4688      	mov	r8, r1
 800e8e2:	4691      	mov	r9, r2
 800e8e4:	f000 8188 	beq.w	800ebf8 <uxr_read_framed_msg+0x32c>
 800e8e8:	7823      	ldrb	r3, [r4, #0]
 800e8ea:	4dc1      	ldr	r5, [pc, #772]	@ (800ebf0 <uxr_read_framed_msg+0x324>)
 800e8ec:	4fc1      	ldr	r7, [pc, #772]	@ (800ebf4 <uxr_read_framed_msg+0x328>)
 800e8ee:	2b07      	cmp	r3, #7
 800e8f0:	d8fd      	bhi.n	800e8ee <uxr_read_framed_msg+0x22>
 800e8f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e8f6:	0115      	.short	0x0115
 800e8f8:	00d600f6 	.word	0x00d600f6
 800e8fc:	009000b9 	.word	0x009000b9
 800e900:	0030004d 	.word	0x0030004d
 800e904:	0008      	.short	0x0008
 800e906:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e90a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e90e:	4299      	cmp	r1, r3
 800e910:	f000 814a 	beq.w	800eba8 <uxr_read_framed_msg+0x2dc>
 800e914:	18e2      	adds	r2, r4, r3
 800e916:	7892      	ldrb	r2, [r2, #2]
 800e918:	2a7d      	cmp	r2, #125	@ 0x7d
 800e91a:	f000 8199 	beq.w	800ec50 <uxr_read_framed_msg+0x384>
 800e91e:	3301      	adds	r3, #1
 800e920:	0858      	lsrs	r0, r3, #1
 800e922:	fba5 1000 	umull	r1, r0, r5, r0
 800e926:	0880      	lsrs	r0, r0, #2
 800e928:	212a      	movs	r1, #42	@ 0x2a
 800e92a:	fb01 3310 	mls	r3, r1, r0, r3
 800e92e:	2a7e      	cmp	r2, #126	@ 0x7e
 800e930:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e934:	f000 8252 	beq.w	800eddc <uxr_read_framed_msg+0x510>
 800e938:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e93a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800e93c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e940:	b29b      	uxth	r3, r3
 800e942:	2200      	movs	r2, #0
 800e944:	4299      	cmp	r1, r3
 800e946:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800e948:	7022      	strb	r2, [r4, #0]
 800e94a:	f000 8179 	beq.w	800ec40 <uxr_read_framed_msg+0x374>
 800e94e:	2000      	movs	r0, #0
 800e950:	b003      	add	sp, #12
 800e952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e956:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800e95a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800e95e:	4299      	cmp	r1, r3
 800e960:	f000 8131 	beq.w	800ebc6 <uxr_read_framed_msg+0x2fa>
 800e964:	18e2      	adds	r2, r4, r3
 800e966:	7890      	ldrb	r0, [r2, #2]
 800e968:	287d      	cmp	r0, #125	@ 0x7d
 800e96a:	f000 8190 	beq.w	800ec8e <uxr_read_framed_msg+0x3c2>
 800e96e:	3301      	adds	r3, #1
 800e970:	085a      	lsrs	r2, r3, #1
 800e972:	fba5 1202 	umull	r1, r2, r5, r2
 800e976:	0892      	lsrs	r2, r2, #2
 800e978:	212a      	movs	r1, #42	@ 0x2a
 800e97a:	fb01 3312 	mls	r3, r1, r2, r3
 800e97e:	287e      	cmp	r0, #126	@ 0x7e
 800e980:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800e984:	f000 821a 	beq.w	800edbc <uxr_read_framed_msg+0x4f0>
 800e988:	2307      	movs	r3, #7
 800e98a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800e98c:	7023      	strb	r3, [r4, #0]
 800e98e:	e7ae      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800e990:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e992:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e996:	459e      	cmp	lr, r3
 800e998:	d938      	bls.n	800ea0c <uxr_read_framed_msg+0x140>
 800e99a:	ee07 8a90 	vmov	s15, r8
 800e99e:	212a      	movs	r1, #42	@ 0x2a
 800e9a0:	e020      	b.n	800e9e4 <uxr_read_framed_msg+0x118>
 800e9a2:	f89b c002 	ldrb.w	ip, [fp, #2]
 800e9a6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800e9aa:	f000 80d4 	beq.w	800eb56 <uxr_read_framed_msg+0x28a>
 800e9ae:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800e9b2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800e9b6:	f000 8219 	beq.w	800edec <uxr_read_framed_msg+0x520>
 800e9ba:	f806 c003 	strb.w	ip, [r6, r3]
 800e9be:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800e9c2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800e9c4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800e9c8:	ea8a 000c 	eor.w	r0, sl, ip
 800e9cc:	b2c0      	uxtb	r0, r0
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800e9da:	4573      	cmp	r3, lr
 800e9dc:	8663      	strh	r3, [r4, #50]	@ 0x32
 800e9de:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800e9e0:	f080 8120 	bcs.w	800ec24 <uxr_read_framed_msg+0x358>
 800e9e4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800e9e8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800e9ec:	f100 0c01 	add.w	ip, r0, #1
 800e9f0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e9f4:	fba5 8202 	umull	r8, r2, r5, r2
 800e9f8:	0892      	lsrs	r2, r2, #2
 800e9fa:	4582      	cmp	sl, r0
 800e9fc:	eb04 0b00 	add.w	fp, r4, r0
 800ea00:	fb01 c212 	mls	r2, r1, r2, ip
 800ea04:	d1cd      	bne.n	800e9a2 <uxr_read_framed_msg+0xd6>
 800ea06:	ee17 8a90 	vmov	r8, s15
 800ea0a:	459e      	cmp	lr, r3
 800ea0c:	f040 8111 	bne.w	800ec32 <uxr_read_framed_msg+0x366>
 800ea10:	2306      	movs	r3, #6
 800ea12:	7023      	strb	r3, [r4, #0]
 800ea14:	e76b      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800ea16:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ea1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ea1e:	4298      	cmp	r0, r3
 800ea20:	f000 80c2 	beq.w	800eba8 <uxr_read_framed_msg+0x2dc>
 800ea24:	18e2      	adds	r2, r4, r3
 800ea26:	7891      	ldrb	r1, [r2, #2]
 800ea28:	297d      	cmp	r1, #125	@ 0x7d
 800ea2a:	f000 814c 	beq.w	800ecc6 <uxr_read_framed_msg+0x3fa>
 800ea2e:	3301      	adds	r3, #1
 800ea30:	085a      	lsrs	r2, r3, #1
 800ea32:	fba5 0202 	umull	r0, r2, r5, r2
 800ea36:	0892      	lsrs	r2, r2, #2
 800ea38:	202a      	movs	r0, #42	@ 0x2a
 800ea3a:	fb00 3312 	mls	r3, r0, r2, r3
 800ea3e:	297e      	cmp	r1, #126	@ 0x7e
 800ea40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ea44:	f000 81ca 	beq.w	800eddc <uxr_read_framed_msg+0x510>
 800ea48:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800ea4a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ea4e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	2000      	movs	r0, #0
 800ea54:	428b      	cmp	r3, r1
 800ea56:	8623      	strh	r3, [r4, #48]	@ 0x30
 800ea58:	8660      	strh	r0, [r4, #50]	@ 0x32
 800ea5a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800ea5c:	f240 80df 	bls.w	800ec1e <uxr_read_framed_msg+0x352>
 800ea60:	7020      	strb	r0, [r4, #0]
 800ea62:	b003      	add	sp, #12
 800ea64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea68:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ea6c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ea70:	4299      	cmp	r1, r3
 800ea72:	f000 80a8 	beq.w	800ebc6 <uxr_read_framed_msg+0x2fa>
 800ea76:	18e2      	adds	r2, r4, r3
 800ea78:	7890      	ldrb	r0, [r2, #2]
 800ea7a:	287d      	cmp	r0, #125	@ 0x7d
 800ea7c:	f000 8164 	beq.w	800ed48 <uxr_read_framed_msg+0x47c>
 800ea80:	3301      	adds	r3, #1
 800ea82:	085a      	lsrs	r2, r3, #1
 800ea84:	fba5 1202 	umull	r1, r2, r5, r2
 800ea88:	0892      	lsrs	r2, r2, #2
 800ea8a:	212a      	movs	r1, #42	@ 0x2a
 800ea8c:	fb01 3312 	mls	r3, r1, r2, r3
 800ea90:	287e      	cmp	r0, #126	@ 0x7e
 800ea92:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ea96:	f000 8191 	beq.w	800edbc <uxr_read_framed_msg+0x4f0>
 800ea9a:	2304      	movs	r3, #4
 800ea9c:	8620      	strh	r0, [r4, #48]	@ 0x30
 800ea9e:	7023      	strb	r3, [r4, #0]
 800eaa0:	e725      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800eaa2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800eaa6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eaaa:	4290      	cmp	r0, r2
 800eaac:	f000 80b3 	beq.w	800ec16 <uxr_read_framed_msg+0x34a>
 800eab0:	18a3      	adds	r3, r4, r2
 800eab2:	7899      	ldrb	r1, [r3, #2]
 800eab4:	297d      	cmp	r1, #125	@ 0x7d
 800eab6:	f000 8164 	beq.w	800ed82 <uxr_read_framed_msg+0x4b6>
 800eaba:	3201      	adds	r2, #1
 800eabc:	0850      	lsrs	r0, r2, #1
 800eabe:	fba5 3000 	umull	r3, r0, r5, r0
 800eac2:	0880      	lsrs	r0, r0, #2
 800eac4:	232a      	movs	r3, #42	@ 0x2a
 800eac6:	fb03 2210 	mls	r2, r3, r0, r2
 800eaca:	297e      	cmp	r1, #126	@ 0x7e
 800eacc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ead0:	f000 8188 	beq.w	800ede4 <uxr_read_framed_msg+0x518>
 800ead4:	7863      	ldrb	r3, [r4, #1]
 800ead6:	428b      	cmp	r3, r1
 800ead8:	bf0c      	ite	eq
 800eada:	2303      	moveq	r3, #3
 800eadc:	2300      	movne	r3, #0
 800eade:	7023      	strb	r3, [r4, #0]
 800eae0:	e705      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800eae2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800eae6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800eaea:	2200      	movs	r2, #0
 800eaec:	4299      	cmp	r1, r3
 800eaee:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800eaf2:	d06c      	beq.n	800ebce <uxr_read_framed_msg+0x302>
 800eaf4:	18e2      	adds	r2, r4, r3
 800eaf6:	7890      	ldrb	r0, [r2, #2]
 800eaf8:	287d      	cmp	r0, #125	@ 0x7d
 800eafa:	f000 8101 	beq.w	800ed00 <uxr_read_framed_msg+0x434>
 800eafe:	3301      	adds	r3, #1
 800eb00:	085a      	lsrs	r2, r3, #1
 800eb02:	fba5 1202 	umull	r1, r2, r5, r2
 800eb06:	0892      	lsrs	r2, r2, #2
 800eb08:	212a      	movs	r1, #42	@ 0x2a
 800eb0a:	fb01 3312 	mls	r3, r1, r2, r3
 800eb0e:	287e      	cmp	r0, #126	@ 0x7e
 800eb10:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800eb14:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800eb18:	d059      	beq.n	800ebce <uxr_read_framed_msg+0x302>
 800eb1a:	2302      	movs	r3, #2
 800eb1c:	7023      	strb	r3, [r4, #0]
 800eb1e:	e6e6      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800eb20:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800eb24:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eb28:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800eb2c:	1c51      	adds	r1, r2, #1
 800eb2e:	084b      	lsrs	r3, r1, #1
 800eb30:	fba5 c303 	umull	ip, r3, r5, r3
 800eb34:	089b      	lsrs	r3, r3, #2
 800eb36:	fb0e 1313 	mls	r3, lr, r3, r1
 800eb3a:	4592      	cmp	sl, r2
 800eb3c:	eb04 0002 	add.w	r0, r4, r2
 800eb40:	b2da      	uxtb	r2, r3
 800eb42:	f43f af04 	beq.w	800e94e <uxr_read_framed_msg+0x82>
 800eb46:	7883      	ldrb	r3, [r0, #2]
 800eb48:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800eb4c:	2b7e      	cmp	r3, #126	@ 0x7e
 800eb4e:	d1ed      	bne.n	800eb2c <uxr_read_framed_msg+0x260>
 800eb50:	2301      	movs	r3, #1
 800eb52:	7023      	strb	r3, [r4, #0]
 800eb54:	e6cb      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800eb56:	f100 0c01 	add.w	ip, r0, #1
 800eb5a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800eb5e:	fba5 8202 	umull	r8, r2, r5, r2
 800eb62:	0892      	lsrs	r2, r2, #2
 800eb64:	fb01 c212 	mls	r2, r1, r2, ip
 800eb68:	eb04 0c02 	add.w	ip, r4, r2
 800eb6c:	b2d2      	uxtb	r2, r2
 800eb6e:	4592      	cmp	sl, r2
 800eb70:	f100 0002 	add.w	r0, r0, #2
 800eb74:	f43f af47 	beq.w	800ea06 <uxr_read_framed_msg+0x13a>
 800eb78:	0842      	lsrs	r2, r0, #1
 800eb7a:	f89c a002 	ldrb.w	sl, [ip, #2]
 800eb7e:	fba5 8202 	umull	r8, r2, r5, r2
 800eb82:	0892      	lsrs	r2, r2, #2
 800eb84:	fb01 0012 	mls	r0, r1, r2, r0
 800eb88:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800eb8c:	f08a 0c20 	eor.w	ip, sl, #32
 800eb90:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800eb94:	f47f af11 	bne.w	800e9ba <uxr_read_framed_msg+0xee>
 800eb98:	459e      	cmp	lr, r3
 800eb9a:	ee17 8a90 	vmov	r8, s15
 800eb9e:	f43f af37 	beq.w	800ea10 <uxr_read_framed_msg+0x144>
 800eba2:	2301      	movs	r3, #1
 800eba4:	7023      	strb	r3, [r4, #0]
 800eba6:	e6a2      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800eba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	2301      	movs	r3, #1
 800ebae:	9301      	str	r3, [sp, #4]
 800ebb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebb2:	464a      	mov	r2, r9
 800ebb4:	4641      	mov	r1, r8
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	f7ff fe06 	bl	800e7c8 <uxr_framing_read_transport>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	f43f aec6 	beq.w	800e94e <uxr_read_framed_msg+0x82>
 800ebc2:	7823      	ldrb	r3, [r4, #0]
 800ebc4:	e693      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800ebc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	2302      	movs	r3, #2
 800ebcc:	e7ef      	b.n	800ebae <uxr_read_framed_msg+0x2e2>
 800ebce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	2304      	movs	r3, #4
 800ebd4:	9301      	str	r3, [sp, #4]
 800ebd6:	464a      	mov	r2, r9
 800ebd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebda:	4641      	mov	r1, r8
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f7ff fdf3 	bl	800e7c8 <uxr_framing_read_transport>
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d1ed      	bne.n	800ebc2 <uxr_read_framed_msg+0x2f6>
 800ebe6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ebea:	2b7e      	cmp	r3, #126	@ 0x7e
 800ebec:	d0e9      	beq.n	800ebc2 <uxr_read_framed_msg+0x2f6>
 800ebee:	e6ae      	b.n	800e94e <uxr_read_framed_msg+0x82>
 800ebf0:	30c30c31 	.word	0x30c30c31
 800ebf4:	08017eb4 	.word	0x08017eb4
 800ebf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	2305      	movs	r3, #5
 800ebfe:	9301      	str	r3, [sp, #4]
 800ec00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec02:	f7ff fde1 	bl	800e7c8 <uxr_framing_read_transport>
 800ec06:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ec0a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	f43f ae9d 	beq.w	800e94e <uxr_read_framed_msg+0x82>
 800ec14:	e668      	b.n	800e8e8 <uxr_read_framed_msg+0x1c>
 800ec16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	2303      	movs	r3, #3
 800ec1c:	e7c7      	b.n	800ebae <uxr_read_framed_msg+0x2e2>
 800ec1e:	2305      	movs	r3, #5
 800ec20:	7023      	strb	r3, [r4, #0]
 800ec22:	e664      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800ec24:	ee17 8a90 	vmov	r8, s15
 800ec28:	f43f aef2 	beq.w	800ea10 <uxr_read_framed_msg+0x144>
 800ec2c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800ec30:	d08e      	beq.n	800eb50 <uxr_read_framed_msg+0x284>
 800ec32:	ebae 0303 	sub.w	r3, lr, r3
 800ec36:	3302      	adds	r3, #2
 800ec38:	9301      	str	r3, [sp, #4]
 800ec3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	e7b7      	b.n	800ebb0 <uxr_read_framed_msg+0x2e4>
 800ec40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec42:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800ec46:	7013      	strb	r3, [r2, #0]
 800ec48:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800ec4a:	b003      	add	sp, #12
 800ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec50:	f103 0c01 	add.w	ip, r3, #1
 800ec54:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ec58:	fba5 0202 	umull	r0, r2, r5, r2
 800ec5c:	0892      	lsrs	r2, r2, #2
 800ec5e:	202a      	movs	r0, #42	@ 0x2a
 800ec60:	fb00 c212 	mls	r2, r0, r2, ip
 800ec64:	fa5f fc82 	uxtb.w	ip, r2
 800ec68:	4561      	cmp	r1, ip
 800ec6a:	d09d      	beq.n	800eba8 <uxr_read_framed_msg+0x2dc>
 800ec6c:	3302      	adds	r3, #2
 800ec6e:	4422      	add	r2, r4
 800ec70:	0859      	lsrs	r1, r3, #1
 800ec72:	7892      	ldrb	r2, [r2, #2]
 800ec74:	fba5 c101 	umull	ip, r1, r5, r1
 800ec78:	0889      	lsrs	r1, r1, #2
 800ec7a:	fb00 3311 	mls	r3, r0, r1, r3
 800ec7e:	2a7e      	cmp	r2, #126	@ 0x7e
 800ec80:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ec84:	f000 80aa 	beq.w	800eddc <uxr_read_framed_msg+0x510>
 800ec88:	f082 0220 	eor.w	r2, r2, #32
 800ec8c:	e654      	b.n	800e938 <uxr_read_framed_msg+0x6c>
 800ec8e:	1c58      	adds	r0, r3, #1
 800ec90:	0842      	lsrs	r2, r0, #1
 800ec92:	fba5 c202 	umull	ip, r2, r5, r2
 800ec96:	0892      	lsrs	r2, r2, #2
 800ec98:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ec9c:	fb0c 0212 	mls	r2, ip, r2, r0
 800eca0:	b2d0      	uxtb	r0, r2
 800eca2:	4281      	cmp	r1, r0
 800eca4:	d08f      	beq.n	800ebc6 <uxr_read_framed_msg+0x2fa>
 800eca6:	4422      	add	r2, r4
 800eca8:	3302      	adds	r3, #2
 800ecaa:	7890      	ldrb	r0, [r2, #2]
 800ecac:	085a      	lsrs	r2, r3, #1
 800ecae:	fba5 1202 	umull	r1, r2, r5, r2
 800ecb2:	0892      	lsrs	r2, r2, #2
 800ecb4:	fb0c 3312 	mls	r3, ip, r2, r3
 800ecb8:	287e      	cmp	r0, #126	@ 0x7e
 800ecba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ecbe:	d07d      	beq.n	800edbc <uxr_read_framed_msg+0x4f0>
 800ecc0:	f080 0020 	eor.w	r0, r0, #32
 800ecc4:	e660      	b.n	800e988 <uxr_read_framed_msg+0xbc>
 800ecc6:	1c59      	adds	r1, r3, #1
 800ecc8:	084a      	lsrs	r2, r1, #1
 800ecca:	fba5 c202 	umull	ip, r2, r5, r2
 800ecce:	0892      	lsrs	r2, r2, #2
 800ecd0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ecd4:	fb0c 1212 	mls	r2, ip, r2, r1
 800ecd8:	b2d1      	uxtb	r1, r2
 800ecda:	4288      	cmp	r0, r1
 800ecdc:	f43f af64 	beq.w	800eba8 <uxr_read_framed_msg+0x2dc>
 800ece0:	4422      	add	r2, r4
 800ece2:	3302      	adds	r3, #2
 800ece4:	7891      	ldrb	r1, [r2, #2]
 800ece6:	085a      	lsrs	r2, r3, #1
 800ece8:	fba5 0202 	umull	r0, r2, r5, r2
 800ecec:	0892      	lsrs	r2, r2, #2
 800ecee:	fb0c 3312 	mls	r3, ip, r2, r3
 800ecf2:	297e      	cmp	r1, #126	@ 0x7e
 800ecf4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ecf8:	d070      	beq.n	800eddc <uxr_read_framed_msg+0x510>
 800ecfa:	f081 0120 	eor.w	r1, r1, #32
 800ecfe:	e6a3      	b.n	800ea48 <uxr_read_framed_msg+0x17c>
 800ed00:	f103 0c01 	add.w	ip, r3, #1
 800ed04:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800ed08:	fba5 0202 	umull	r0, r2, r5, r2
 800ed0c:	0892      	lsrs	r2, r2, #2
 800ed0e:	202a      	movs	r0, #42	@ 0x2a
 800ed10:	fb00 c212 	mls	r2, r0, r2, ip
 800ed14:	fa5f fc82 	uxtb.w	ip, r2
 800ed18:	4561      	cmp	r1, ip
 800ed1a:	f43f af58 	beq.w	800ebce <uxr_read_framed_msg+0x302>
 800ed1e:	4422      	add	r2, r4
 800ed20:	3302      	adds	r3, #2
 800ed22:	7891      	ldrb	r1, [r2, #2]
 800ed24:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800ed28:	085a      	lsrs	r2, r3, #1
 800ed2a:	fba5 c202 	umull	ip, r2, r5, r2
 800ed2e:	0892      	lsrs	r2, r2, #2
 800ed30:	fb00 3312 	mls	r3, r0, r2, r3
 800ed34:	297e      	cmp	r1, #126	@ 0x7e
 800ed36:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ed3a:	f43f af48 	beq.w	800ebce <uxr_read_framed_msg+0x302>
 800ed3e:	f081 0120 	eor.w	r1, r1, #32
 800ed42:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800ed46:	e6e8      	b.n	800eb1a <uxr_read_framed_msg+0x24e>
 800ed48:	1c58      	adds	r0, r3, #1
 800ed4a:	0842      	lsrs	r2, r0, #1
 800ed4c:	fba5 c202 	umull	ip, r2, r5, r2
 800ed50:	0892      	lsrs	r2, r2, #2
 800ed52:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ed56:	fb0c 0212 	mls	r2, ip, r2, r0
 800ed5a:	b2d0      	uxtb	r0, r2
 800ed5c:	4281      	cmp	r1, r0
 800ed5e:	f43f af32 	beq.w	800ebc6 <uxr_read_framed_msg+0x2fa>
 800ed62:	4422      	add	r2, r4
 800ed64:	3302      	adds	r3, #2
 800ed66:	7890      	ldrb	r0, [r2, #2]
 800ed68:	085a      	lsrs	r2, r3, #1
 800ed6a:	fba5 1202 	umull	r1, r2, r5, r2
 800ed6e:	0892      	lsrs	r2, r2, #2
 800ed70:	fb0c 3312 	mls	r3, ip, r2, r3
 800ed74:	287e      	cmp	r0, #126	@ 0x7e
 800ed76:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ed7a:	d01f      	beq.n	800edbc <uxr_read_framed_msg+0x4f0>
 800ed7c:	f080 0020 	eor.w	r0, r0, #32
 800ed80:	e68b      	b.n	800ea9a <uxr_read_framed_msg+0x1ce>
 800ed82:	1c51      	adds	r1, r2, #1
 800ed84:	084b      	lsrs	r3, r1, #1
 800ed86:	fba5 c303 	umull	ip, r3, r5, r3
 800ed8a:	089b      	lsrs	r3, r3, #2
 800ed8c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800ed90:	fb0c 1313 	mls	r3, ip, r3, r1
 800ed94:	b2d9      	uxtb	r1, r3
 800ed96:	4288      	cmp	r0, r1
 800ed98:	f43f af3d 	beq.w	800ec16 <uxr_read_framed_msg+0x34a>
 800ed9c:	3202      	adds	r2, #2
 800ed9e:	4423      	add	r3, r4
 800eda0:	0850      	lsrs	r0, r2, #1
 800eda2:	789b      	ldrb	r3, [r3, #2]
 800eda4:	fba5 1000 	umull	r1, r0, r5, r0
 800eda8:	0880      	lsrs	r0, r0, #2
 800edaa:	fb0c 2210 	mls	r2, ip, r0, r2
 800edae:	2b7e      	cmp	r3, #126	@ 0x7e
 800edb0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800edb4:	d016      	beq.n	800ede4 <uxr_read_framed_msg+0x518>
 800edb6:	f083 0120 	eor.w	r1, r3, #32
 800edba:	e68b      	b.n	800ead4 <uxr_read_framed_msg+0x208>
 800edbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	2302      	movs	r3, #2
 800edc2:	9301      	str	r3, [sp, #4]
 800edc4:	464a      	mov	r2, r9
 800edc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edc8:	4641      	mov	r1, r8
 800edca:	4620      	mov	r0, r4
 800edcc:	f7ff fcfc 	bl	800e7c8 <uxr_framing_read_transport>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	f47f aef6 	bne.w	800ebc2 <uxr_read_framed_msg+0x2f6>
 800edd6:	2301      	movs	r3, #1
 800edd8:	7023      	strb	r3, [r4, #0]
 800edda:	e588      	b.n	800e8ee <uxr_read_framed_msg+0x22>
 800eddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	2301      	movs	r3, #1
 800ede2:	e7ee      	b.n	800edc2 <uxr_read_framed_msg+0x4f6>
 800ede4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	2303      	movs	r3, #3
 800edea:	e7ea      	b.n	800edc2 <uxr_read_framed_msg+0x4f6>
 800edec:	ee17 8a90 	vmov	r8, s15
 800edf0:	e6ae      	b.n	800eb50 <uxr_read_framed_msg+0x284>
 800edf2:	bf00      	nop

0800edf4 <uxr_stream_id>:
 800edf4:	2901      	cmp	r1, #1
 800edf6:	b082      	sub	sp, #8
 800edf8:	d01d      	beq.n	800ee36 <uxr_stream_id+0x42>
 800edfa:	2902      	cmp	r1, #2
 800edfc:	f04f 0c00 	mov.w	ip, #0
 800ee00:	d01e      	beq.n	800ee40 <uxr_stream_id+0x4c>
 800ee02:	2300      	movs	r3, #0
 800ee04:	f36c 0307 	bfi	r3, ip, #0, #8
 800ee08:	f360 230f 	bfi	r3, r0, #8, #8
 800ee0c:	f361 4317 	bfi	r3, r1, #16, #8
 800ee10:	f362 631f 	bfi	r3, r2, #24, #8
 800ee14:	b2da      	uxtb	r2, r3
 800ee16:	2000      	movs	r0, #0
 800ee18:	f362 0007 	bfi	r0, r2, #0, #8
 800ee1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ee20:	f362 200f 	bfi	r0, r2, #8, #8
 800ee24:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ee28:	f362 4017 	bfi	r0, r2, #16, #8
 800ee2c:	0e1b      	lsrs	r3, r3, #24
 800ee2e:	f363 601f 	bfi	r0, r3, #24, #8
 800ee32:	b002      	add	sp, #8
 800ee34:	4770      	bx	lr
 800ee36:	f100 0c01 	add.w	ip, r0, #1
 800ee3a:	fa5f fc8c 	uxtb.w	ip, ip
 800ee3e:	e7e0      	b.n	800ee02 <uxr_stream_id+0xe>
 800ee40:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800ee44:	e7dd      	b.n	800ee02 <uxr_stream_id+0xe>
 800ee46:	bf00      	nop

0800ee48 <uxr_stream_id_from_raw>:
 800ee48:	b082      	sub	sp, #8
 800ee4a:	b130      	cbz	r0, 800ee5a <uxr_stream_id_from_raw+0x12>
 800ee4c:	0603      	lsls	r3, r0, #24
 800ee4e:	d420      	bmi.n	800ee92 <uxr_stream_id_from_raw+0x4a>
 800ee50:	1e42      	subs	r2, r0, #1
 800ee52:	b2d2      	uxtb	r2, r2
 800ee54:	f04f 0c01 	mov.w	ip, #1
 800ee58:	e001      	b.n	800ee5e <uxr_stream_id_from_raw+0x16>
 800ee5a:	4684      	mov	ip, r0
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f360 0307 	bfi	r3, r0, #0, #8
 800ee64:	f362 230f 	bfi	r3, r2, #8, #8
 800ee68:	f36c 4317 	bfi	r3, ip, #16, #8
 800ee6c:	f361 631f 	bfi	r3, r1, #24, #8
 800ee70:	b2da      	uxtb	r2, r3
 800ee72:	2000      	movs	r0, #0
 800ee74:	f362 0007 	bfi	r0, r2, #0, #8
 800ee78:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ee7c:	f362 200f 	bfi	r0, r2, #8, #8
 800ee80:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ee84:	f362 4017 	bfi	r0, r2, #16, #8
 800ee88:	0e1b      	lsrs	r3, r3, #24
 800ee8a:	f363 601f 	bfi	r0, r3, #24, #8
 800ee8e:	b002      	add	sp, #8
 800ee90:	4770      	bx	lr
 800ee92:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800ee96:	f04f 0c02 	mov.w	ip, #2
 800ee9a:	e7e0      	b.n	800ee5e <uxr_stream_id_from_raw+0x16>

0800ee9c <uxr_init_stream_storage>:
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	7403      	strb	r3, [r0, #16]
 800eea0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800eea4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800eea8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <uxr_reset_stream_storage>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	7c03      	ldrb	r3, [r0, #16]
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	b153      	cbz	r3, 800eece <uxr_reset_stream_storage+0x1e>
 800eeb8:	4606      	mov	r6, r0
 800eeba:	2500      	movs	r5, #0
 800eebc:	4630      	mov	r0, r6
 800eebe:	f006 f8dd 	bl	801507c <uxr_reset_output_best_effort_stream>
 800eec2:	7c23      	ldrb	r3, [r4, #16]
 800eec4:	3501      	adds	r5, #1
 800eec6:	42ab      	cmp	r3, r5
 800eec8:	f106 0610 	add.w	r6, r6, #16
 800eecc:	d8f6      	bhi.n	800eebc <uxr_reset_stream_storage+0xc>
 800eece:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eed2:	b163      	cbz	r3, 800eeee <uxr_reset_stream_storage+0x3e>
 800eed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eed8:	2500      	movs	r5, #0
 800eeda:	4630      	mov	r0, r6
 800eedc:	f005 fed0 	bl	8014c80 <uxr_reset_input_best_effort_stream>
 800eee0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eee4:	3501      	adds	r5, #1
 800eee6:	42ab      	cmp	r3, r5
 800eee8:	f106 0602 	add.w	r6, r6, #2
 800eeec:	d8f5      	bhi.n	800eeda <uxr_reset_stream_storage+0x2a>
 800eeee:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800eef2:	b163      	cbz	r3, 800ef0e <uxr_reset_stream_storage+0x5e>
 800eef4:	f104 0618 	add.w	r6, r4, #24
 800eef8:	2500      	movs	r5, #0
 800eefa:	4630      	mov	r0, r6
 800eefc:	f006 f96a 	bl	80151d4 <uxr_reset_output_reliable_stream>
 800ef00:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ef04:	3501      	adds	r5, #1
 800ef06:	42ab      	cmp	r3, r5
 800ef08:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ef0c:	d8f5      	bhi.n	800eefa <uxr_reset_stream_storage+0x4a>
 800ef0e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ef12:	b163      	cbz	r3, 800ef2e <uxr_reset_stream_storage+0x7e>
 800ef14:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ef18:	2500      	movs	r5, #0
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	f005 ff24 	bl	8014d68 <uxr_reset_input_reliable_stream>
 800ef20:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ef24:	3501      	adds	r5, #1
 800ef26:	42ab      	cmp	r3, r5
 800ef28:	f106 0618 	add.w	r6, r6, #24
 800ef2c:	d8f5      	bhi.n	800ef1a <uxr_reset_stream_storage+0x6a>
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}

0800ef30 <uxr_add_output_best_effort_buffer>:
 800ef30:	b510      	push	{r4, lr}
 800ef32:	7c04      	ldrb	r4, [r0, #16]
 800ef34:	f104 0c01 	add.w	ip, r4, #1
 800ef38:	b082      	sub	sp, #8
 800ef3a:	f880 c010 	strb.w	ip, [r0, #16]
 800ef3e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ef42:	f006 f891 	bl	8015068 <uxr_init_output_best_effort_stream>
 800ef46:	2201      	movs	r2, #1
 800ef48:	4611      	mov	r1, r2
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	b002      	add	sp, #8
 800ef4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef52:	f7ff bf4f 	b.w	800edf4 <uxr_stream_id>
 800ef56:	bf00      	nop

0800ef58 <uxr_add_output_reliable_buffer>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	4684      	mov	ip, r0
 800ef5e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ef62:	9000      	str	r0, [sp, #0]
 800ef64:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ef68:	2028      	movs	r0, #40	@ 0x28
 800ef6a:	fb00 c004 	mla	r0, r0, r4, ip
 800ef6e:	f104 0e01 	add.w	lr, r4, #1
 800ef72:	3018      	adds	r0, #24
 800ef74:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ef78:	f006 f8f4 	bl	8015164 <uxr_init_output_reliable_stream>
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	2102      	movs	r1, #2
 800ef80:	4620      	mov	r0, r4
 800ef82:	b004      	add	sp, #16
 800ef84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef88:	f7ff bf34 	b.w	800edf4 <uxr_stream_id>

0800ef8c <uxr_add_input_best_effort_buffer>:
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800ef92:	4603      	mov	r3, r0
 800ef94:	1c62      	adds	r2, r4, #1
 800ef96:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800efa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efa4:	f005 fe68 	bl	8014c78 <uxr_init_input_best_effort_stream>
 800efa8:	2200      	movs	r2, #0
 800efaa:	2101      	movs	r1, #1
 800efac:	4620      	mov	r0, r4
 800efae:	b002      	add	sp, #8
 800efb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb4:	f7ff bf1e 	b.w	800edf4 <uxr_stream_id>

0800efb8 <uxr_add_input_reliable_buffer>:
 800efb8:	b510      	push	{r4, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	4684      	mov	ip, r0
 800efbe:	9806      	ldr	r0, [sp, #24]
 800efc0:	9000      	str	r0, [sp, #0]
 800efc2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800efc6:	2018      	movs	r0, #24
 800efc8:	fb00 c004 	mla	r0, r0, r4, ip
 800efcc:	f104 0e01 	add.w	lr, r4, #1
 800efd0:	3048      	adds	r0, #72	@ 0x48
 800efd2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800efd6:	f005 fe9b 	bl	8014d10 <uxr_init_input_reliable_stream>
 800efda:	2200      	movs	r2, #0
 800efdc:	2102      	movs	r1, #2
 800efde:	4620      	mov	r0, r4
 800efe0:	b004      	add	sp, #16
 800efe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efe6:	f7ff bf05 	b.w	800edf4 <uxr_stream_id>
 800efea:	bf00      	nop

0800efec <uxr_get_output_best_effort_stream>:
 800efec:	7c03      	ldrb	r3, [r0, #16]
 800efee:	428b      	cmp	r3, r1
 800eff0:	bf8c      	ite	hi
 800eff2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800eff6:	2000      	movls	r0, #0
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop

0800effc <uxr_get_output_reliable_stream>:
 800effc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f000:	428b      	cmp	r3, r1
 800f002:	bf83      	ittte	hi
 800f004:	2328      	movhi	r3, #40	@ 0x28
 800f006:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f00a:	3018      	addhi	r0, #24
 800f00c:	2000      	movls	r0, #0
 800f00e:	4770      	bx	lr

0800f010 <uxr_get_input_best_effort_stream>:
 800f010:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f014:	428b      	cmp	r3, r1
 800f016:	bf86      	itte	hi
 800f018:	3121      	addhi	r1, #33	@ 0x21
 800f01a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f01e:	2000      	movls	r0, #0
 800f020:	4770      	bx	lr
 800f022:	bf00      	nop

0800f024 <uxr_get_input_reliable_stream>:
 800f024:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800f028:	428b      	cmp	r3, r1
 800f02a:	bf83      	ittte	hi
 800f02c:	2318      	movhi	r3, #24
 800f02e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f032:	3048      	addhi	r0, #72	@ 0x48
 800f034:	2000      	movls	r0, #0
 800f036:	4770      	bx	lr

0800f038 <uxr_output_streams_confirmed>:
 800f038:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f03c:	b183      	cbz	r3, 800f060 <uxr_output_streams_confirmed+0x28>
 800f03e:	b570      	push	{r4, r5, r6, lr}
 800f040:	4606      	mov	r6, r0
 800f042:	f100 0518 	add.w	r5, r0, #24
 800f046:	2400      	movs	r4, #0
 800f048:	e001      	b.n	800f04e <uxr_output_streams_confirmed+0x16>
 800f04a:	3528      	adds	r5, #40	@ 0x28
 800f04c:	b138      	cbz	r0, 800f05e <uxr_output_streams_confirmed+0x26>
 800f04e:	4628      	mov	r0, r5
 800f050:	f006 fb30 	bl	80156b4 <uxr_is_output_up_to_date>
 800f054:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800f058:	3401      	adds	r4, #1
 800f05a:	42a3      	cmp	r3, r4
 800f05c:	d8f5      	bhi.n	800f04a <uxr_output_streams_confirmed+0x12>
 800f05e:	bd70      	pop	{r4, r5, r6, pc}
 800f060:	2001      	movs	r0, #1
 800f062:	4770      	bx	lr

0800f064 <uxr_buffer_submessage_header>:
 800f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	460e      	mov	r6, r1
 800f06a:	2104      	movs	r1, #4
 800f06c:	4615      	mov	r5, r2
 800f06e:	461f      	mov	r7, r3
 800f070:	f7fa fd7a 	bl	8009b68 <ucdr_align_to>
 800f074:	2301      	movs	r3, #1
 800f076:	ea47 0203 	orr.w	r2, r7, r3
 800f07a:	4631      	mov	r1, r6
 800f07c:	7523      	strb	r3, [r4, #20]
 800f07e:	4620      	mov	r0, r4
 800f080:	462b      	mov	r3, r5
 800f082:	f000 fa27 	bl	800f4d4 <uxr_serialize_submessage_header>
 800f086:	4620      	mov	r0, r4
 800f088:	f7fa fd84 	bl	8009b94 <ucdr_buffer_remaining>
 800f08c:	42a8      	cmp	r0, r5
 800f08e:	bf34      	ite	cc
 800f090:	2000      	movcc	r0, #0
 800f092:	2001      	movcs	r0, #1
 800f094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f096:	bf00      	nop

0800f098 <uxr_read_submessage_header>:
 800f098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f09c:	4604      	mov	r4, r0
 800f09e:	460d      	mov	r5, r1
 800f0a0:	2104      	movs	r1, #4
 800f0a2:	4616      	mov	r6, r2
 800f0a4:	4698      	mov	r8, r3
 800f0a6:	f7fa fd5f 	bl	8009b68 <ucdr_align_to>
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	f7fa fd72 	bl	8009b94 <ucdr_buffer_remaining>
 800f0b0:	2803      	cmp	r0, #3
 800f0b2:	bf8c      	ite	hi
 800f0b4:	2701      	movhi	r7, #1
 800f0b6:	2700      	movls	r7, #0
 800f0b8:	d802      	bhi.n	800f0c0 <uxr_read_submessage_header+0x28>
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c0:	4633      	mov	r3, r6
 800f0c2:	4642      	mov	r2, r8
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	f000 fa18 	bl	800f4fc <uxr_deserialize_submessage_header>
 800f0cc:	f898 3000 	ldrb.w	r3, [r8]
 800f0d0:	f003 0201 	and.w	r2, r3, #1
 800f0d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f0d8:	f888 3000 	strb.w	r3, [r8]
 800f0dc:	7522      	strb	r2, [r4, #20]
 800f0de:	4638      	mov	r0, r7
 800f0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f0e4 <uxr_submessage_padding>:
 800f0e4:	f010 0003 	ands.w	r0, r0, #3
 800f0e8:	bf18      	it	ne
 800f0ea:	f1c0 0004 	rsbne	r0, r0, #4
 800f0ee:	4770      	bx	lr

0800f0f0 <uxr_millis>:
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	4669      	mov	r1, sp
 800f0f6:	2001      	movs	r0, #1
 800f0f8:	f7f2 f942 	bl	8001380 <clock_gettime>
 800f0fc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f100:	4906      	ldr	r1, [pc, #24]	@ (800f11c <uxr_millis+0x2c>)
 800f102:	fba0 0301 	umull	r0, r3, r0, r1
 800f106:	1900      	adds	r0, r0, r4
 800f108:	fb01 3102 	mla	r1, r1, r2, r3
 800f10c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f110:	4a03      	ldr	r2, [pc, #12]	@ (800f120 <uxr_millis+0x30>)
 800f112:	2300      	movs	r3, #0
 800f114:	f7f1 f8ec 	bl	80002f0 <__aeabi_ldivmod>
 800f118:	b004      	add	sp, #16
 800f11a:	bd10      	pop	{r4, pc}
 800f11c:	3b9aca00 	.word	0x3b9aca00
 800f120:	000f4240 	.word	0x000f4240

0800f124 <uxr_nanos>:
 800f124:	b510      	push	{r4, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	4669      	mov	r1, sp
 800f12a:	2001      	movs	r0, #1
 800f12c:	f7f2 f928 	bl	8001380 <clock_gettime>
 800f130:	4a06      	ldr	r2, [pc, #24]	@ (800f14c <uxr_nanos+0x28>)
 800f132:	9800      	ldr	r0, [sp, #0]
 800f134:	9902      	ldr	r1, [sp, #8]
 800f136:	9c01      	ldr	r4, [sp, #4]
 800f138:	fba0 0302 	umull	r0, r3, r0, r2
 800f13c:	1840      	adds	r0, r0, r1
 800f13e:	fb02 3304 	mla	r3, r2, r4, r3
 800f142:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f146:	b004      	add	sp, #16
 800f148:	bd10      	pop	{r4, pc}
 800f14a:	bf00      	nop
 800f14c:	3b9aca00 	.word	0x3b9aca00

0800f150 <on_full_output_buffer_fragmented>:
 800f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f154:	460c      	mov	r4, r1
 800f156:	b08a      	sub	sp, #40	@ 0x28
 800f158:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800f15c:	4606      	mov	r6, r0
 800f15e:	f104 0008 	add.w	r0, r4, #8
 800f162:	f7ff ff4b 	bl	800effc <uxr_get_output_reliable_stream>
 800f166:	4605      	mov	r5, r0
 800f168:	f006 faae 	bl	80156c8 <get_available_free_slots>
 800f16c:	b968      	cbnz	r0, 800f18a <on_full_output_buffer_fragmented+0x3a>
 800f16e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800f172:	4620      	mov	r0, r4
 800f174:	4798      	blx	r3
 800f176:	b918      	cbnz	r0, 800f180 <on_full_output_buffer_fragmented+0x30>
 800f178:	2001      	movs	r0, #1
 800f17a:	b00a      	add	sp, #40	@ 0x28
 800f17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f180:	4628      	mov	r0, r5
 800f182:	f006 faa1 	bl	80156c8 <get_available_free_slots>
 800f186:	2800      	cmp	r0, #0
 800f188:	d0f6      	beq.n	800f178 <on_full_output_buffer_fragmented+0x28>
 800f18a:	8929      	ldrh	r1, [r5, #8]
 800f18c:	89eb      	ldrh	r3, [r5, #14]
 800f18e:	7b28      	ldrb	r0, [r5, #12]
 800f190:	686a      	ldr	r2, [r5, #4]
 800f192:	fbb2 f8f1 	udiv	r8, r2, r1
 800f196:	fbb3 f2f1 	udiv	r2, r3, r1
 800f19a:	fb01 3112 	mls	r1, r1, r2, r3
 800f19e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800f1a2:	b289      	uxth	r1, r1
 800f1a4:	fb08 f101 	mul.w	r1, r8, r1
 800f1a8:	30fc      	adds	r0, #252	@ 0xfc
 800f1aa:	f1a8 0804 	sub.w	r8, r8, #4
 800f1ae:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800f1b2:	4440      	add	r0, r8
 800f1b4:	b287      	uxth	r7, r0
 800f1b6:	1bdb      	subs	r3, r3, r7
 800f1b8:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800f1bc:	682b      	ldr	r3, [r5, #0]
 800f1be:	3104      	adds	r1, #4
 800f1c0:	4419      	add	r1, r3
 800f1c2:	4642      	mov	r2, r8
 800f1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	a802      	add	r0, sp, #8
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f7fa fc9f 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 800f1d2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f1d6:	f102 0308 	add.w	r3, r2, #8
 800f1da:	4543      	cmp	r3, r8
 800f1dc:	d928      	bls.n	800f230 <on_full_output_buffer_fragmented+0xe0>
 800f1de:	463a      	mov	r2, r7
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	210d      	movs	r1, #13
 800f1e4:	a802      	add	r0, sp, #8
 800f1e6:	f7ff ff3d 	bl	800f064 <uxr_buffer_submessage_header>
 800f1ea:	8929      	ldrh	r1, [r5, #8]
 800f1ec:	89eb      	ldrh	r3, [r5, #14]
 800f1ee:	fbb3 f2f1 	udiv	r2, r3, r1
 800f1f2:	fb01 3312 	mls	r3, r1, r2, r3
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	686a      	ldr	r2, [r5, #4]
 800f1fa:	fbb2 f2f1 	udiv	r2, r2, r1
 800f1fe:	fb02 f303 	mul.w	r3, r2, r3
 800f202:	682a      	ldr	r2, [r5, #0]
 800f204:	f842 8003 	str.w	r8, [r2, r3]
 800f208:	89e8      	ldrh	r0, [r5, #14]
 800f20a:	2101      	movs	r1, #1
 800f20c:	f006 fa7c 	bl	8015708 <uxr_seq_num_add>
 800f210:	9904      	ldr	r1, [sp, #16]
 800f212:	9a03      	ldr	r2, [sp, #12]
 800f214:	81e8      	strh	r0, [r5, #14]
 800f216:	1a52      	subs	r2, r2, r1
 800f218:	4630      	mov	r0, r6
 800f21a:	f7fa fc8b 	bl	8009b34 <ucdr_init_buffer>
 800f21e:	4630      	mov	r0, r6
 800f220:	490f      	ldr	r1, [pc, #60]	@ (800f260 <on_full_output_buffer_fragmented+0x110>)
 800f222:	4622      	mov	r2, r4
 800f224:	f7fa fc5a 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 800f228:	2000      	movs	r0, #0
 800f22a:	b00a      	add	sp, #40	@ 0x28
 800f22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f230:	b292      	uxth	r2, r2
 800f232:	2302      	movs	r3, #2
 800f234:	210d      	movs	r1, #13
 800f236:	a802      	add	r0, sp, #8
 800f238:	f7ff ff14 	bl	800f064 <uxr_buffer_submessage_header>
 800f23c:	8928      	ldrh	r0, [r5, #8]
 800f23e:	89eb      	ldrh	r3, [r5, #14]
 800f240:	fbb3 f1f0 	udiv	r1, r3, r0
 800f244:	fb00 3311 	mls	r3, r0, r1, r3
 800f248:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f24c:	6869      	ldr	r1, [r5, #4]
 800f24e:	fbb1 f1f0 	udiv	r1, r1, r0
 800f252:	b29b      	uxth	r3, r3
 800f254:	fb01 f303 	mul.w	r3, r1, r3
 800f258:	6829      	ldr	r1, [r5, #0]
 800f25a:	3208      	adds	r2, #8
 800f25c:	50ca      	str	r2, [r1, r3]
 800f25e:	e7d3      	b.n	800f208 <on_full_output_buffer_fragmented+0xb8>
 800f260:	0800f151 	.word	0x0800f151

0800f264 <uxr_prepare_output_stream>:
 800f264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f266:	b087      	sub	sp, #28
 800f268:	2707      	movs	r7, #7
 800f26a:	9202      	str	r2, [sp, #8]
 800f26c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f26e:	9103      	str	r1, [sp, #12]
 800f270:	2500      	movs	r5, #0
 800f272:	3204      	adds	r2, #4
 800f274:	e9cd 7500 	strd	r7, r5, [sp]
 800f278:	461c      	mov	r4, r3
 800f27a:	4606      	mov	r6, r0
 800f27c:	f7fe ffc2 	bl	800e204 <uxr_prepare_stream_to_write_submessage>
 800f280:	f080 0201 	eor.w	r2, r0, #1
 800f284:	b2d2      	uxtb	r2, r2
 800f286:	75a2      	strb	r2, [r4, #22]
 800f288:	b112      	cbz	r2, 800f290 <uxr_prepare_output_stream+0x2c>
 800f28a:	4628      	mov	r0, r5
 800f28c:	b007      	add	sp, #28
 800f28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f290:	aa05      	add	r2, sp, #20
 800f292:	9902      	ldr	r1, [sp, #8]
 800f294:	4630      	mov	r0, r6
 800f296:	f7ff f8eb 	bl	800e470 <uxr_init_base_object_request>
 800f29a:	a905      	add	r1, sp, #20
 800f29c:	4605      	mov	r5, r0
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f001 f8c0 	bl	8010424 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f2a4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f2a8:	69a6      	ldr	r6, [r4, #24]
 800f2aa:	69e7      	ldr	r7, [r4, #28]
 800f2ac:	1a52      	subs	r2, r2, r1
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f7fa fc40 	bl	8009b34 <ucdr_init_buffer>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	463a      	mov	r2, r7
 800f2b8:	4631      	mov	r1, r6
 800f2ba:	f7fa fc0f 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 800f2be:	4628      	mov	r0, r5
 800f2c0:	b007      	add	sp, #28
 800f2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2c4 <uxr_prepare_output_stream_fragmented>:
 800f2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c8:	b091      	sub	sp, #68	@ 0x44
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	9105      	str	r1, [sp, #20]
 800f2ce:	3008      	adds	r0, #8
 800f2d0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f2d4:	461e      	mov	r6, r3
 800f2d6:	9204      	str	r2, [sp, #16]
 800f2d8:	f7ff fe90 	bl	800effc <uxr_get_output_reliable_stream>
 800f2dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	f000 8091 	beq.w	800f408 <uxr_prepare_output_stream_fragmented+0x144>
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	f000 808d 	beq.w	800f408 <uxr_prepare_output_stream_fragmented+0x144>
 800f2ee:	f006 f9eb 	bl	80156c8 <get_available_free_slots>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	f000 8083 	beq.w	800f3fe <uxr_prepare_output_stream_fragmented+0x13a>
 800f2f8:	8922      	ldrh	r2, [r4, #8]
 800f2fa:	89e7      	ldrh	r7, [r4, #14]
 800f2fc:	fbb7 f9f2 	udiv	r9, r7, r2
 800f300:	fb02 7919 	mls	r9, r2, r9, r7
 800f304:	fa1f f989 	uxth.w	r9, r9
 800f308:	6863      	ldr	r3, [r4, #4]
 800f30a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	9203      	str	r2, [sp, #12]
 800f312:	fb02 f909 	mul.w	r9, r2, r9
 800f316:	f109 0904 	add.w	r9, r9, #4
 800f31a:	4499      	add	r9, r3
 800f31c:	7b23      	ldrb	r3, [r4, #12]
 800f31e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f322:	4543      	cmp	r3, r8
 800f324:	f1a2 0b04 	sub.w	fp, r2, #4
 800f328:	d37a      	bcc.n	800f420 <uxr_prepare_output_stream_fragmented+0x15c>
 800f32a:	f1ab 0a04 	sub.w	sl, fp, #4
 800f32e:	ebaa 0a03 	sub.w	sl, sl, r3
 800f332:	465a      	mov	r2, fp
 800f334:	2300      	movs	r3, #0
 800f336:	4649      	mov	r1, r9
 800f338:	a808      	add	r0, sp, #32
 800f33a:	f8cd 8000 	str.w	r8, [sp]
 800f33e:	f7fa fbe7 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 800f342:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f344:	fa1f fa8a 	uxth.w	sl, sl
 800f348:	4652      	mov	r2, sl
 800f34a:	f103 0a08 	add.w	sl, r3, #8
 800f34e:	45da      	cmp	sl, fp
 800f350:	bf34      	ite	cc
 800f352:	2302      	movcc	r3, #2
 800f354:	2300      	movcs	r3, #0
 800f356:	210d      	movs	r1, #13
 800f358:	a808      	add	r0, sp, #32
 800f35a:	f7ff fe83 	bl	800f064 <uxr_buffer_submessage_header>
 800f35e:	8921      	ldrh	r1, [r4, #8]
 800f360:	fbb7 f2f1 	udiv	r2, r7, r1
 800f364:	fb01 7212 	mls	r2, r1, r2, r7
 800f368:	b292      	uxth	r2, r2
 800f36a:	6863      	ldr	r3, [r4, #4]
 800f36c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f370:	fb02 f303 	mul.w	r3, r2, r3
 800f374:	6822      	ldr	r2, [r4, #0]
 800f376:	4638      	mov	r0, r7
 800f378:	f842 b003 	str.w	fp, [r2, r3]
 800f37c:	2101      	movs	r1, #1
 800f37e:	f006 f9c3 	bl	8015708 <uxr_seq_num_add>
 800f382:	9b03      	ldr	r3, [sp, #12]
 800f384:	f108 0104 	add.w	r1, r8, #4
 800f388:	f1a3 0208 	sub.w	r2, r3, #8
 800f38c:	eba2 0208 	sub.w	r2, r2, r8
 800f390:	4449      	add	r1, r9
 800f392:	4607      	mov	r7, r0
 800f394:	4630      	mov	r0, r6
 800f396:	f7fa fbcd 	bl	8009b34 <ucdr_init_buffer>
 800f39a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f39c:	81e7      	strh	r7, [r4, #14]
 800f39e:	1d1a      	adds	r2, r3, #4
 800f3a0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f3a4:	bf28      	it	cs
 800f3a6:	2200      	movcs	r2, #0
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	b292      	uxth	r2, r2
 800f3ac:	2107      	movs	r1, #7
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	f7ff fe58 	bl	800f064 <uxr_buffer_submessage_header>
 800f3b4:	9904      	ldr	r1, [sp, #16]
 800f3b6:	aa07      	add	r2, sp, #28
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	f7ff f859 	bl	800e470 <uxr_init_base_object_request>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	b318      	cbz	r0, 800f40a <uxr_prepare_output_stream_fragmented+0x146>
 800f3c2:	a907      	add	r1, sp, #28
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f001 f82d 	bl	8010424 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f3ca:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	1a52      	subs	r2, r2, r1
 800f3d2:	f7fa fbaf 	bl	8009b34 <ucdr_init_buffer>
 800f3d6:	9b05      	ldr	r3, [sp, #20]
 800f3d8:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f3dc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f3de:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f3e2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f3e4:	491b      	ldr	r1, [pc, #108]	@ (800f454 <uxr_prepare_output_stream_fragmented+0x190>)
 800f3e6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	f7fa fb73 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	b011      	add	sp, #68	@ 0x44
 800f3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800f400:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f402:	4628      	mov	r0, r5
 800f404:	4798      	blx	r3
 800f406:	b920      	cbnz	r0, 800f412 <uxr_prepare_output_stream_fragmented+0x14e>
 800f408:	2400      	movs	r4, #0
 800f40a:	4620      	mov	r0, r4
 800f40c:	b011      	add	sp, #68	@ 0x44
 800f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f412:	4620      	mov	r0, r4
 800f414:	f006 f958 	bl	80156c8 <get_available_free_slots>
 800f418:	2800      	cmp	r0, #0
 800f41a:	f47f af6d 	bne.w	800f2f8 <uxr_prepare_output_stream_fragmented+0x34>
 800f41e:	e7f3      	b.n	800f408 <uxr_prepare_output_stream_fragmented+0x144>
 800f420:	4638      	mov	r0, r7
 800f422:	2101      	movs	r1, #1
 800f424:	f006 f970 	bl	8015708 <uxr_seq_num_add>
 800f428:	8921      	ldrh	r1, [r4, #8]
 800f42a:	fbb0 f2f1 	udiv	r2, r0, r1
 800f42e:	fb01 0912 	mls	r9, r1, r2, r0
 800f432:	fa1f f289 	uxth.w	r2, r9
 800f436:	6863      	ldr	r3, [r4, #4]
 800f438:	fbb3 f9f1 	udiv	r9, r3, r1
 800f43c:	6823      	ldr	r3, [r4, #0]
 800f43e:	fb02 f909 	mul.w	r9, r2, r9
 800f442:	f109 0904 	add.w	r9, r9, #4
 800f446:	4499      	add	r9, r3
 800f448:	4607      	mov	r7, r0
 800f44a:	7b23      	ldrb	r3, [r4, #12]
 800f44c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f450:	e76b      	b.n	800f32a <uxr_prepare_output_stream_fragmented+0x66>
 800f452:	bf00      	nop
 800f454:	0800f151 	.word	0x0800f151

0800f458 <uxr_serialize_message_header>:
 800f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45a:	b083      	sub	sp, #12
 800f45c:	4616      	mov	r6, r2
 800f45e:	4604      	mov	r4, r0
 800f460:	9301      	str	r3, [sp, #4]
 800f462:	460d      	mov	r5, r1
 800f464:	9f08      	ldr	r7, [sp, #32]
 800f466:	f7f9 fa23 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f46a:	4631      	mov	r1, r6
 800f46c:	4620      	mov	r0, r4
 800f46e:	f7f9 fa1f 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f472:	9a01      	ldr	r2, [sp, #4]
 800f474:	2101      	movs	r1, #1
 800f476:	4620      	mov	r0, r4
 800f478:	f7f9 fac6 	bl	8008a08 <ucdr_serialize_endian_uint16_t>
 800f47c:	062b      	lsls	r3, r5, #24
 800f47e:	d501      	bpl.n	800f484 <uxr_serialize_message_header+0x2c>
 800f480:	b003      	add	sp, #12
 800f482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f484:	2204      	movs	r2, #4
 800f486:	4639      	mov	r1, r7
 800f488:	4620      	mov	r0, r4
 800f48a:	b003      	add	sp, #12
 800f48c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f490:	f005 baba 	b.w	8014a08 <ucdr_serialize_array_uint8_t>

0800f494 <uxr_deserialize_message_header>:
 800f494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f496:	b083      	sub	sp, #12
 800f498:	4616      	mov	r6, r2
 800f49a:	4604      	mov	r4, r0
 800f49c:	9301      	str	r3, [sp, #4]
 800f49e:	460d      	mov	r5, r1
 800f4a0:	9f08      	ldr	r7, [sp, #32]
 800f4a2:	f7f9 fa1b 	bl	80088dc <ucdr_deserialize_uint8_t>
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f7f9 fa17 	bl	80088dc <ucdr_deserialize_uint8_t>
 800f4ae:	9a01      	ldr	r2, [sp, #4]
 800f4b0:	2101      	movs	r1, #1
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f7f9 fb9c 	bl	8008bf0 <ucdr_deserialize_endian_uint16_t>
 800f4b8:	f995 3000 	ldrsb.w	r3, [r5]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	da01      	bge.n	800f4c4 <uxr_deserialize_message_header+0x30>
 800f4c0:	b003      	add	sp, #12
 800f4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4c4:	2204      	movs	r2, #4
 800f4c6:	4639      	mov	r1, r7
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	b003      	add	sp, #12
 800f4cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f4d0:	f005 bafe 	b.w	8014ad0 <ucdr_deserialize_array_uint8_t>

0800f4d4 <uxr_serialize_submessage_header>:
 800f4d4:	b530      	push	{r4, r5, lr}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	4615      	mov	r5, r2
 800f4da:	4604      	mov	r4, r0
 800f4dc:	9301      	str	r3, [sp, #4]
 800f4de:	f7f9 f9e7 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	f7f9 f9e3 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f4ea:	9a01      	ldr	r2, [sp, #4]
 800f4ec:	2101      	movs	r1, #1
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	b003      	add	sp, #12
 800f4f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4f6:	f7f9 ba87 	b.w	8008a08 <ucdr_serialize_endian_uint16_t>
 800f4fa:	bf00      	nop

0800f4fc <uxr_deserialize_submessage_header>:
 800f4fc:	b530      	push	{r4, r5, lr}
 800f4fe:	b083      	sub	sp, #12
 800f500:	4615      	mov	r5, r2
 800f502:	4604      	mov	r4, r0
 800f504:	9301      	str	r3, [sp, #4]
 800f506:	f7f9 f9e9 	bl	80088dc <ucdr_deserialize_uint8_t>
 800f50a:	4629      	mov	r1, r5
 800f50c:	4620      	mov	r0, r4
 800f50e:	f7f9 f9e5 	bl	80088dc <ucdr_deserialize_uint8_t>
 800f512:	9a01      	ldr	r2, [sp, #4]
 800f514:	2101      	movs	r1, #1
 800f516:	4620      	mov	r0, r4
 800f518:	b003      	add	sp, #12
 800f51a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f51e:	f7f9 bb67 	b.w	8008bf0 <ucdr_deserialize_endian_uint16_t>
 800f522:	bf00      	nop

0800f524 <uxr_serialize_CLIENT_Representation>:
 800f524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f528:	2204      	movs	r2, #4
 800f52a:	460e      	mov	r6, r1
 800f52c:	4605      	mov	r5, r0
 800f52e:	f005 fa6b 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f532:	2202      	movs	r2, #2
 800f534:	4607      	mov	r7, r0
 800f536:	1d31      	adds	r1, r6, #4
 800f538:	4628      	mov	r0, r5
 800f53a:	f005 fa65 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f53e:	4038      	ands	r0, r7
 800f540:	2202      	movs	r2, #2
 800f542:	1db1      	adds	r1, r6, #6
 800f544:	b2c7      	uxtb	r7, r0
 800f546:	4628      	mov	r0, r5
 800f548:	f005 fa5e 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f54c:	2204      	movs	r2, #4
 800f54e:	4007      	ands	r7, r0
 800f550:	f106 0108 	add.w	r1, r6, #8
 800f554:	4628      	mov	r0, r5
 800f556:	f005 fa57 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f55a:	7b31      	ldrb	r1, [r6, #12]
 800f55c:	4007      	ands	r7, r0
 800f55e:	4628      	mov	r0, r5
 800f560:	f7f9 f9a6 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f564:	7b71      	ldrb	r1, [r6, #13]
 800f566:	4007      	ands	r7, r0
 800f568:	4628      	mov	r0, r5
 800f56a:	f7f9 f973 	bl	8008854 <ucdr_serialize_bool>
 800f56e:	7b73      	ldrb	r3, [r6, #13]
 800f570:	ea07 0800 	and.w	r8, r7, r0
 800f574:	b93b      	cbnz	r3, 800f586 <uxr_serialize_CLIENT_Representation+0x62>
 800f576:	8bb1      	ldrh	r1, [r6, #28]
 800f578:	4628      	mov	r0, r5
 800f57a:	f7f9 f9c5 	bl	8008908 <ucdr_serialize_uint16_t>
 800f57e:	ea08 0000 	and.w	r0, r8, r0
 800f582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f586:	6931      	ldr	r1, [r6, #16]
 800f588:	4628      	mov	r0, r5
 800f58a:	f7f9 fba7 	bl	8008cdc <ucdr_serialize_uint32_t>
 800f58e:	6933      	ldr	r3, [r6, #16]
 800f590:	b1e3      	cbz	r3, 800f5cc <uxr_serialize_CLIENT_Representation+0xa8>
 800f592:	b1c0      	cbz	r0, 800f5c6 <uxr_serialize_CLIENT_Representation+0xa2>
 800f594:	4637      	mov	r7, r6
 800f596:	f04f 0900 	mov.w	r9, #0
 800f59a:	e001      	b.n	800f5a0 <uxr_serialize_CLIENT_Representation+0x7c>
 800f59c:	3708      	adds	r7, #8
 800f59e:	b194      	cbz	r4, 800f5c6 <uxr_serialize_CLIENT_Representation+0xa2>
 800f5a0:	6979      	ldr	r1, [r7, #20]
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f005 fb50 	bl	8014c48 <ucdr_serialize_string>
 800f5a8:	69b9      	ldr	r1, [r7, #24]
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f005 fb4b 	bl	8014c48 <ucdr_serialize_string>
 800f5b2:	6933      	ldr	r3, [r6, #16]
 800f5b4:	f109 0901 	add.w	r9, r9, #1
 800f5b8:	4004      	ands	r4, r0
 800f5ba:	4599      	cmp	r9, r3
 800f5bc:	b2e4      	uxtb	r4, r4
 800f5be:	d3ed      	bcc.n	800f59c <uxr_serialize_CLIENT_Representation+0x78>
 800f5c0:	ea08 0804 	and.w	r8, r8, r4
 800f5c4:	e7d7      	b.n	800f576 <uxr_serialize_CLIENT_Representation+0x52>
 800f5c6:	f04f 0800 	mov.w	r8, #0
 800f5ca:	e7d4      	b.n	800f576 <uxr_serialize_CLIENT_Representation+0x52>
 800f5cc:	ea08 0800 	and.w	r8, r8, r0
 800f5d0:	e7d1      	b.n	800f576 <uxr_serialize_CLIENT_Representation+0x52>
 800f5d2:	bf00      	nop

0800f5d4 <uxr_deserialize_CLIENT_Representation>:
 800f5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d8:	2204      	movs	r2, #4
 800f5da:	460c      	mov	r4, r1
 800f5dc:	4605      	mov	r5, r0
 800f5de:	f005 fa77 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	1d21      	adds	r1, r4, #4
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	f005 fa71 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800f5ee:	4038      	ands	r0, r7
 800f5f0:	2202      	movs	r2, #2
 800f5f2:	1da1      	adds	r1, r4, #6
 800f5f4:	b2c6      	uxtb	r6, r0
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f005 fa6a 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800f5fc:	2204      	movs	r2, #4
 800f5fe:	4006      	ands	r6, r0
 800f600:	f104 0108 	add.w	r1, r4, #8
 800f604:	4628      	mov	r0, r5
 800f606:	f005 fa63 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800f60a:	f104 010c 	add.w	r1, r4, #12
 800f60e:	4006      	ands	r6, r0
 800f610:	4628      	mov	r0, r5
 800f612:	f7f9 f963 	bl	80088dc <ucdr_deserialize_uint8_t>
 800f616:	f104 010d 	add.w	r1, r4, #13
 800f61a:	ea06 0700 	and.w	r7, r6, r0
 800f61e:	4628      	mov	r0, r5
 800f620:	f7f9 f92e 	bl	8008880 <ucdr_deserialize_bool>
 800f624:	7b63      	ldrb	r3, [r4, #13]
 800f626:	4007      	ands	r7, r0
 800f628:	b93b      	cbnz	r3, 800f63a <uxr_deserialize_CLIENT_Representation+0x66>
 800f62a:	f104 011c 	add.w	r1, r4, #28
 800f62e:	4628      	mov	r0, r5
 800f630:	f7f9 fa6a 	bl	8008b08 <ucdr_deserialize_uint16_t>
 800f634:	4038      	ands	r0, r7
 800f636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f63a:	f104 0110 	add.w	r1, r4, #16
 800f63e:	4628      	mov	r0, r5
 800f640:	f7f9 fc7c 	bl	8008f3c <ucdr_deserialize_uint32_t>
 800f644:	6923      	ldr	r3, [r4, #16]
 800f646:	2b01      	cmp	r3, #1
 800f648:	d903      	bls.n	800f652 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f64a:	2301      	movs	r3, #1
 800f64c:	75ab      	strb	r3, [r5, #22]
 800f64e:	2700      	movs	r7, #0
 800f650:	e7eb      	b.n	800f62a <uxr_deserialize_CLIENT_Representation+0x56>
 800f652:	b30b      	cbz	r3, 800f698 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f654:	2800      	cmp	r0, #0
 800f656:	d0fa      	beq.n	800f64e <uxr_deserialize_CLIENT_Representation+0x7a>
 800f658:	46a0      	mov	r8, r4
 800f65a:	f04f 0900 	mov.w	r9, #0
 800f65e:	e001      	b.n	800f664 <uxr_deserialize_CLIENT_Representation+0x90>
 800f660:	2e00      	cmp	r6, #0
 800f662:	d0f4      	beq.n	800f64e <uxr_deserialize_CLIENT_Representation+0x7a>
 800f664:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f66c:	4628      	mov	r0, r5
 800f66e:	f005 fafb 	bl	8014c68 <ucdr_deserialize_string>
 800f672:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f676:	4606      	mov	r6, r0
 800f678:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f67c:	4628      	mov	r0, r5
 800f67e:	f005 faf3 	bl	8014c68 <ucdr_deserialize_string>
 800f682:	6923      	ldr	r3, [r4, #16]
 800f684:	f109 0901 	add.w	r9, r9, #1
 800f688:	4006      	ands	r6, r0
 800f68a:	4599      	cmp	r9, r3
 800f68c:	f108 0808 	add.w	r8, r8, #8
 800f690:	b2f6      	uxtb	r6, r6
 800f692:	d3e5      	bcc.n	800f660 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f694:	4037      	ands	r7, r6
 800f696:	e7c8      	b.n	800f62a <uxr_deserialize_CLIENT_Representation+0x56>
 800f698:	4007      	ands	r7, r0
 800f69a:	e7c6      	b.n	800f62a <uxr_deserialize_CLIENT_Representation+0x56>

0800f69c <uxr_serialize_AGENT_Representation>:
 800f69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a0:	2204      	movs	r2, #4
 800f6a2:	460f      	mov	r7, r1
 800f6a4:	4605      	mov	r5, r0
 800f6a6:	f005 f9af 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f6aa:	2202      	movs	r2, #2
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	1d39      	adds	r1, r7, #4
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	f005 f9a9 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f6b6:	4020      	ands	r0, r4
 800f6b8:	2202      	movs	r2, #2
 800f6ba:	1db9      	adds	r1, r7, #6
 800f6bc:	b2c4      	uxtb	r4, r0
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f005 f9a2 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f6c4:	7a39      	ldrb	r1, [r7, #8]
 800f6c6:	4004      	ands	r4, r0
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	f7f9 f8c3 	bl	8008854 <ucdr_serialize_bool>
 800f6ce:	7a3b      	ldrb	r3, [r7, #8]
 800f6d0:	ea00 0804 	and.w	r8, r0, r4
 800f6d4:	b913      	cbnz	r3, 800f6dc <uxr_serialize_AGENT_Representation+0x40>
 800f6d6:	4640      	mov	r0, r8
 800f6d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6dc:	68f9      	ldr	r1, [r7, #12]
 800f6de:	4628      	mov	r0, r5
 800f6e0:	f7f9 fafc 	bl	8008cdc <ucdr_serialize_uint32_t>
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	b303      	cbz	r3, 800f72a <uxr_serialize_AGENT_Representation+0x8e>
 800f6e8:	b1d0      	cbz	r0, 800f720 <uxr_serialize_AGENT_Representation+0x84>
 800f6ea:	463e      	mov	r6, r7
 800f6ec:	f04f 0900 	mov.w	r9, #0
 800f6f0:	e001      	b.n	800f6f6 <uxr_serialize_AGENT_Representation+0x5a>
 800f6f2:	3608      	adds	r6, #8
 800f6f4:	b1a4      	cbz	r4, 800f720 <uxr_serialize_AGENT_Representation+0x84>
 800f6f6:	6931      	ldr	r1, [r6, #16]
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	f005 faa5 	bl	8014c48 <ucdr_serialize_string>
 800f6fe:	6971      	ldr	r1, [r6, #20]
 800f700:	4604      	mov	r4, r0
 800f702:	4628      	mov	r0, r5
 800f704:	f005 faa0 	bl	8014c48 <ucdr_serialize_string>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f109 0901 	add.w	r9, r9, #1
 800f70e:	4004      	ands	r4, r0
 800f710:	4599      	cmp	r9, r3
 800f712:	b2e4      	uxtb	r4, r4
 800f714:	d3ed      	bcc.n	800f6f2 <uxr_serialize_AGENT_Representation+0x56>
 800f716:	ea08 0804 	and.w	r8, r8, r4
 800f71a:	4640      	mov	r0, r8
 800f71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f720:	f04f 0800 	mov.w	r8, #0
 800f724:	4640      	mov	r0, r8
 800f726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f72a:	ea08 0800 	and.w	r8, r8, r0
 800f72e:	e7d2      	b.n	800f6d6 <uxr_serialize_AGENT_Representation+0x3a>

0800f730 <uxr_serialize_DATAWRITER_Representation>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	460d      	mov	r5, r1
 800f734:	7809      	ldrb	r1, [r1, #0]
 800f736:	4606      	mov	r6, r0
 800f738:	f7f9 f8ba 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f73c:	4604      	mov	r4, r0
 800f73e:	b130      	cbz	r0, 800f74e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f740:	782b      	ldrb	r3, [r5, #0]
 800f742:	2b02      	cmp	r3, #2
 800f744:	d00c      	beq.n	800f760 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f746:	2b03      	cmp	r3, #3
 800f748:	d010      	beq.n	800f76c <uxr_serialize_DATAWRITER_Representation+0x3c>
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d008      	beq.n	800f760 <uxr_serialize_DATAWRITER_Representation+0x30>
 800f74e:	2202      	movs	r2, #2
 800f750:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f754:	4630      	mov	r0, r6
 800f756:	f005 f957 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f75a:	4020      	ands	r0, r4
 800f75c:	b2c0      	uxtb	r0, r0
 800f75e:	bd70      	pop	{r4, r5, r6, pc}
 800f760:	6869      	ldr	r1, [r5, #4]
 800f762:	4630      	mov	r0, r6
 800f764:	f005 fa70 	bl	8014c48 <ucdr_serialize_string>
 800f768:	4604      	mov	r4, r0
 800f76a:	e7f0      	b.n	800f74e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f76c:	4629      	mov	r1, r5
 800f76e:	4630      	mov	r0, r6
 800f770:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800f774:	3104      	adds	r1, #4
 800f776:	f005 fa3b 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 800f77a:	4604      	mov	r4, r0
 800f77c:	e7e7      	b.n	800f74e <uxr_serialize_DATAWRITER_Representation+0x1e>
 800f77e:	bf00      	nop

0800f780 <uxr_serialize_ObjectVariant.part.0>:
 800f780:	b570      	push	{r4, r5, r6, lr}
 800f782:	780b      	ldrb	r3, [r1, #0]
 800f784:	3b01      	subs	r3, #1
 800f786:	460c      	mov	r4, r1
 800f788:	4605      	mov	r5, r0
 800f78a:	2b0d      	cmp	r3, #13
 800f78c:	d854      	bhi.n	800f838 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f78e:	e8df f003 	tbb	[pc, r3]
 800f792:	0730      	.short	0x0730
 800f794:	07071b1b 	.word	0x07071b1b
 800f798:	0c530707 	.word	0x0c530707
 800f79c:	494e0c0c 	.word	0x494e0c0c
 800f7a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7a4:	3104      	adds	r1, #4
 800f7a6:	f7ff bfc3 	b.w	800f730 <uxr_serialize_DATAWRITER_Representation>
 800f7aa:	7909      	ldrb	r1, [r1, #4]
 800f7ac:	f7f9 f880 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f7b0:	b1e8      	cbz	r0, 800f7ee <uxr_serialize_ObjectVariant.part.0+0x6e>
 800f7b2:	7923      	ldrb	r3, [r4, #4]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d001      	beq.n	800f7bc <uxr_serialize_ObjectVariant.part.0+0x3c>
 800f7b8:	2b02      	cmp	r3, #2
 800f7ba:	d13d      	bne.n	800f838 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800f7bc:	68a1      	ldr	r1, [r4, #8]
 800f7be:	4628      	mov	r0, r5
 800f7c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7c4:	f005 ba40 	b.w	8014c48 <ucdr_serialize_string>
 800f7c8:	7909      	ldrb	r1, [r1, #4]
 800f7ca:	f7f9 f871 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f7ce:	4606      	mov	r6, r0
 800f7d0:	b120      	cbz	r0, 800f7dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f7d2:	7923      	ldrb	r3, [r4, #4]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d039      	beq.n	800f84c <uxr_serialize_ObjectVariant.part.0+0xcc>
 800f7d8:	2b03      	cmp	r3, #3
 800f7da:	d02f      	beq.n	800f83c <uxr_serialize_ObjectVariant.part.0+0xbc>
 800f7dc:	2202      	movs	r2, #2
 800f7de:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	f005 f910 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800f7e8:	4030      	ands	r0, r6
 800f7ea:	b2c0      	uxtb	r0, r0
 800f7ec:	bd70      	pop	{r4, r5, r6, pc}
 800f7ee:	2000      	movs	r0, #0
 800f7f0:	bd70      	pop	{r4, r5, r6, pc}
 800f7f2:	7909      	ldrb	r1, [r1, #4]
 800f7f4:	f7f9 f85c 	bl	80088b0 <ucdr_serialize_uint8_t>
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	b158      	cbz	r0, 800f814 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f7fc:	7923      	ldrb	r3, [r4, #4]
 800f7fe:	2b02      	cmp	r3, #2
 800f800:	d003      	beq.n	800f80a <uxr_serialize_ObjectVariant.part.0+0x8a>
 800f802:	2b03      	cmp	r3, #3
 800f804:	d028      	beq.n	800f858 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800f806:	2b01      	cmp	r3, #1
 800f808:	d104      	bne.n	800f814 <uxr_serialize_ObjectVariant.part.0+0x94>
 800f80a:	68a1      	ldr	r1, [r4, #8]
 800f80c:	4628      	mov	r0, r5
 800f80e:	f005 fa1b 	bl	8014c48 <ucdr_serialize_string>
 800f812:	4606      	mov	r6, r0
 800f814:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800f818:	4628      	mov	r0, r5
 800f81a:	f7f9 fd85 	bl	8009328 <ucdr_serialize_int16_t>
 800f81e:	4030      	ands	r0, r6
 800f820:	b2c0      	uxtb	r0, r0
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f828:	3104      	adds	r1, #4
 800f82a:	f7ff be7b 	b.w	800f524 <uxr_serialize_CLIENT_Representation>
 800f82e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f832:	3104      	adds	r1, #4
 800f834:	f7ff bf32 	b.w	800f69c <uxr_serialize_AGENT_Representation>
 800f838:	2001      	movs	r0, #1
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
 800f83c:	68a2      	ldr	r2, [r4, #8]
 800f83e:	f104 010c 	add.w	r1, r4, #12
 800f842:	4628      	mov	r0, r5
 800f844:	f005 f9d4 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 800f848:	4606      	mov	r6, r0
 800f84a:	e7c7      	b.n	800f7dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f84c:	68a1      	ldr	r1, [r4, #8]
 800f84e:	4628      	mov	r0, r5
 800f850:	f005 f9fa 	bl	8014c48 <ucdr_serialize_string>
 800f854:	4606      	mov	r6, r0
 800f856:	e7c1      	b.n	800f7dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 800f858:	68a2      	ldr	r2, [r4, #8]
 800f85a:	f104 010c 	add.w	r1, r4, #12
 800f85e:	4628      	mov	r0, r5
 800f860:	f005 f9c6 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 800f864:	4606      	mov	r6, r0
 800f866:	e7d5      	b.n	800f814 <uxr_serialize_ObjectVariant.part.0+0x94>

0800f868 <uxr_deserialize_DATAWRITER_Representation>:
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	4606      	mov	r6, r0
 800f86c:	460d      	mov	r5, r1
 800f86e:	f7f9 f835 	bl	80088dc <ucdr_deserialize_uint8_t>
 800f872:	4604      	mov	r4, r0
 800f874:	b130      	cbz	r0, 800f884 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f876:	782b      	ldrb	r3, [r5, #0]
 800f878:	2b02      	cmp	r3, #2
 800f87a:	d00c      	beq.n	800f896 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d012      	beq.n	800f8a6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800f880:	2b01      	cmp	r3, #1
 800f882:	d008      	beq.n	800f896 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800f884:	2202      	movs	r2, #2
 800f886:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800f88a:	4630      	mov	r0, r6
 800f88c:	f005 f920 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800f890:	4020      	ands	r0, r4
 800f892:	b2c0      	uxtb	r0, r0
 800f894:	bd70      	pop	{r4, r5, r6, pc}
 800f896:	6869      	ldr	r1, [r5, #4]
 800f898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f89c:	4630      	mov	r0, r6
 800f89e:	f005 f9e3 	bl	8014c68 <ucdr_deserialize_string>
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	e7ee      	b.n	800f884 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f8a6:	1d2b      	adds	r3, r5, #4
 800f8a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8ac:	f105 0108 	add.w	r1, r5, #8
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f005 f9af 	bl	8014c14 <ucdr_deserialize_sequence_uint8_t>
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	e7e4      	b.n	800f884 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800f8ba:	bf00      	nop

0800f8bc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f8bc:	b570      	push	{r4, r5, r6, lr}
 800f8be:	460d      	mov	r5, r1
 800f8c0:	7809      	ldrb	r1, [r1, #0]
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	f7f8 ffc6 	bl	8008854 <ucdr_serialize_bool>
 800f8c8:	782b      	ldrb	r3, [r5, #0]
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	b94b      	cbnz	r3, 800f8e2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f8ce:	7a29      	ldrb	r1, [r5, #8]
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	f7f8 ffbf 	bl	8008854 <ucdr_serialize_bool>
 800f8d6:	7a2b      	ldrb	r3, [r5, #8]
 800f8d8:	4004      	ands	r4, r0
 800f8da:	b2e4      	uxtb	r4, r4
 800f8dc:	b943      	cbnz	r3, 800f8f0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f8de:	4620      	mov	r0, r4
 800f8e0:	bd70      	pop	{r4, r5, r6, pc}
 800f8e2:	6869      	ldr	r1, [r5, #4]
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f005 f9af 	bl	8014c48 <ucdr_serialize_string>
 800f8ea:	4004      	ands	r4, r0
 800f8ec:	b2e4      	uxtb	r4, r4
 800f8ee:	e7ee      	b.n	800f8ce <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f8f0:	68e9      	ldr	r1, [r5, #12]
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f005 f9a8 	bl	8014c48 <ucdr_serialize_string>
 800f8f8:	4004      	ands	r4, r0
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	bd70      	pop	{r4, r5, r6, pc}
 800f8fe:	bf00      	nop

0800f900 <uxr_serialize_OBJK_Topic_Binary>:
 800f900:	b570      	push	{r4, r5, r6, lr}
 800f902:	460d      	mov	r5, r1
 800f904:	6809      	ldr	r1, [r1, #0]
 800f906:	4606      	mov	r6, r0
 800f908:	f005 f99e 	bl	8014c48 <ucdr_serialize_string>
 800f90c:	7929      	ldrb	r1, [r5, #4]
 800f90e:	4604      	mov	r4, r0
 800f910:	4630      	mov	r0, r6
 800f912:	f7f8 ff9f 	bl	8008854 <ucdr_serialize_bool>
 800f916:	792b      	ldrb	r3, [r5, #4]
 800f918:	4004      	ands	r4, r0
 800f91a:	b2e4      	uxtb	r4, r4
 800f91c:	b943      	cbnz	r3, 800f930 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f91e:	7b29      	ldrb	r1, [r5, #12]
 800f920:	4630      	mov	r0, r6
 800f922:	f7f8 ff97 	bl	8008854 <ucdr_serialize_bool>
 800f926:	7b2b      	ldrb	r3, [r5, #12]
 800f928:	4004      	ands	r4, r0
 800f92a:	b93b      	cbnz	r3, 800f93c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f92c:	4620      	mov	r0, r4
 800f92e:	bd70      	pop	{r4, r5, r6, pc}
 800f930:	68a9      	ldr	r1, [r5, #8]
 800f932:	4630      	mov	r0, r6
 800f934:	f005 f988 	bl	8014c48 <ucdr_serialize_string>
 800f938:	4004      	ands	r4, r0
 800f93a:	e7f0      	b.n	800f91e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f93c:	6929      	ldr	r1, [r5, #16]
 800f93e:	4630      	mov	r0, r6
 800f940:	f005 f982 	bl	8014c48 <ucdr_serialize_string>
 800f944:	4004      	ands	r4, r0
 800f946:	b2e4      	uxtb	r4, r4
 800f948:	4620      	mov	r0, r4
 800f94a:	bd70      	pop	{r4, r5, r6, pc}

0800f94c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f950:	460c      	mov	r4, r1
 800f952:	7809      	ldrb	r1, [r1, #0]
 800f954:	4606      	mov	r6, r0
 800f956:	f7f8 ff7d 	bl	8008854 <ucdr_serialize_bool>
 800f95a:	7823      	ldrb	r3, [r4, #0]
 800f95c:	4605      	mov	r5, r0
 800f95e:	b96b      	cbnz	r3, 800f97c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f960:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800f964:	4630      	mov	r0, r6
 800f966:	f7f8 ff75 	bl	8008854 <ucdr_serialize_bool>
 800f96a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f96e:	4005      	ands	r5, r0
 800f970:	b2ed      	uxtb	r5, r5
 800f972:	2b00      	cmp	r3, #0
 800f974:	d169      	bne.n	800fa4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f976:	4628      	mov	r0, r5
 800f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f97c:	6861      	ldr	r1, [r4, #4]
 800f97e:	4630      	mov	r0, r6
 800f980:	f7f9 f9ac 	bl	8008cdc <ucdr_serialize_uint32_t>
 800f984:	6863      	ldr	r3, [r4, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d06b      	beq.n	800fa62 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d067      	beq.n	800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f98e:	68a1      	ldr	r1, [r4, #8]
 800f990:	4630      	mov	r0, r6
 800f992:	f005 f959 	bl	8014c48 <ucdr_serialize_string>
 800f996:	6863      	ldr	r3, [r4, #4]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d953      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f99c:	2800      	cmp	r0, #0
 800f99e:	d05e      	beq.n	800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9a0:	68e1      	ldr	r1, [r4, #12]
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	f005 f950 	bl	8014c48 <ucdr_serialize_string>
 800f9a8:	6863      	ldr	r3, [r4, #4]
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	d94a      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d055      	beq.n	800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9b2:	6921      	ldr	r1, [r4, #16]
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f005 f947 	bl	8014c48 <ucdr_serialize_string>
 800f9ba:	6863      	ldr	r3, [r4, #4]
 800f9bc:	2b03      	cmp	r3, #3
 800f9be:	d941      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d04c      	beq.n	800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9c4:	6961      	ldr	r1, [r4, #20]
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	f005 f93e 	bl	8014c48 <ucdr_serialize_string>
 800f9cc:	6863      	ldr	r3, [r4, #4]
 800f9ce:	2b04      	cmp	r3, #4
 800f9d0:	d938      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	d043      	beq.n	800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9d6:	69a1      	ldr	r1, [r4, #24]
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f005 f935 	bl	8014c48 <ucdr_serialize_string>
 800f9de:	6863      	ldr	r3, [r4, #4]
 800f9e0:	2b05      	cmp	r3, #5
 800f9e2:	d92f      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d03a      	beq.n	800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9e8:	69e1      	ldr	r1, [r4, #28]
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f005 f92c 	bl	8014c48 <ucdr_serialize_string>
 800f9f0:	6863      	ldr	r3, [r4, #4]
 800f9f2:	2b06      	cmp	r3, #6
 800f9f4:	d926      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f9f6:	b390      	cbz	r0, 800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f9f8:	6a21      	ldr	r1, [r4, #32]
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	f005 f924 	bl	8014c48 <ucdr_serialize_string>
 800fa00:	6863      	ldr	r3, [r4, #4]
 800fa02:	2b07      	cmp	r3, #7
 800fa04:	d91e      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fa06:	b350      	cbz	r0, 800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fa08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	f005 f91c 	bl	8014c48 <ucdr_serialize_string>
 800fa10:	6863      	ldr	r3, [r4, #4]
 800fa12:	2b08      	cmp	r3, #8
 800fa14:	d916      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fa16:	b310      	cbz	r0, 800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fa18:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f005 f914 	bl	8014c48 <ucdr_serialize_string>
 800fa20:	6863      	ldr	r3, [r4, #4]
 800fa22:	2b09      	cmp	r3, #9
 800fa24:	d90e      	bls.n	800fa44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fa26:	b1d0      	cbz	r0, 800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fa28:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800fa2c:	2709      	movs	r7, #9
 800fa2e:	e000      	b.n	800fa32 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800fa30:	b1a8      	cbz	r0, 800fa5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800fa32:	f858 1b04 	ldr.w	r1, [r8], #4
 800fa36:	4630      	mov	r0, r6
 800fa38:	f005 f906 	bl	8014c48 <ucdr_serialize_string>
 800fa3c:	6862      	ldr	r2, [r4, #4]
 800fa3e:	3701      	adds	r7, #1
 800fa40:	4297      	cmp	r7, r2
 800fa42:	d3f5      	bcc.n	800fa30 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800fa44:	4005      	ands	r5, r0
 800fa46:	b2ed      	uxtb	r5, r5
 800fa48:	e78a      	b.n	800f960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fa4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fa4c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fa50:	4630      	mov	r0, r6
 800fa52:	f005 f8cd 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 800fa56:	4005      	ands	r5, r0
 800fa58:	4628      	mov	r0, r5
 800fa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa5e:	2500      	movs	r5, #0
 800fa60:	e77e      	b.n	800f960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fa62:	4028      	ands	r0, r5
 800fa64:	b2c5      	uxtb	r5, r0
 800fa66:	e77b      	b.n	800f960 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800fa68 <uxr_serialize_OBJK_Publisher_Binary>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	460d      	mov	r5, r1
 800fa6c:	7809      	ldrb	r1, [r1, #0]
 800fa6e:	4606      	mov	r6, r0
 800fa70:	f7f8 fef0 	bl	8008854 <ucdr_serialize_bool>
 800fa74:	782b      	ldrb	r3, [r5, #0]
 800fa76:	4604      	mov	r4, r0
 800fa78:	b94b      	cbnz	r3, 800fa8e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800fa7a:	7a29      	ldrb	r1, [r5, #8]
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	f7f8 fee9 	bl	8008854 <ucdr_serialize_bool>
 800fa82:	7a2b      	ldrb	r3, [r5, #8]
 800fa84:	4004      	ands	r4, r0
 800fa86:	b2e4      	uxtb	r4, r4
 800fa88:	b943      	cbnz	r3, 800fa9c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	bd70      	pop	{r4, r5, r6, pc}
 800fa8e:	6869      	ldr	r1, [r5, #4]
 800fa90:	4630      	mov	r0, r6
 800fa92:	f005 f8d9 	bl	8014c48 <ucdr_serialize_string>
 800fa96:	4004      	ands	r4, r0
 800fa98:	b2e4      	uxtb	r4, r4
 800fa9a:	e7ee      	b.n	800fa7a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800fa9c:	f105 010c 	add.w	r1, r5, #12
 800faa0:	4630      	mov	r0, r6
 800faa2:	f7ff ff53 	bl	800f94c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800faa6:	4004      	ands	r4, r0
 800faa8:	4620      	mov	r0, r4
 800faaa:	bd70      	pop	{r4, r5, r6, pc}

0800faac <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800faac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab0:	460c      	mov	r4, r1
 800fab2:	7809      	ldrb	r1, [r1, #0]
 800fab4:	4606      	mov	r6, r0
 800fab6:	f7f8 fecd 	bl	8008854 <ucdr_serialize_bool>
 800faba:	7823      	ldrb	r3, [r4, #0]
 800fabc:	4605      	mov	r5, r0
 800fabe:	b96b      	cbnz	r3, 800fadc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800fac0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800fac4:	4630      	mov	r0, r6
 800fac6:	f7f8 fec5 	bl	8008854 <ucdr_serialize_bool>
 800faca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800face:	4005      	ands	r5, r0
 800fad0:	b2ed      	uxtb	r5, r5
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d169      	bne.n	800fbaa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800fad6:	4628      	mov	r0, r5
 800fad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fadc:	6861      	ldr	r1, [r4, #4]
 800fade:	4630      	mov	r0, r6
 800fae0:	f7f9 f8fc 	bl	8008cdc <ucdr_serialize_uint32_t>
 800fae4:	6863      	ldr	r3, [r4, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d06b      	beq.n	800fbc2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800faea:	2800      	cmp	r0, #0
 800faec:	d067      	beq.n	800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800faee:	68a1      	ldr	r1, [r4, #8]
 800faf0:	4630      	mov	r0, r6
 800faf2:	f005 f8a9 	bl	8014c48 <ucdr_serialize_string>
 800faf6:	6863      	ldr	r3, [r4, #4]
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d953      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d05e      	beq.n	800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb00:	68e1      	ldr	r1, [r4, #12]
 800fb02:	4630      	mov	r0, r6
 800fb04:	f005 f8a0 	bl	8014c48 <ucdr_serialize_string>
 800fb08:	6863      	ldr	r3, [r4, #4]
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	d94a      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	d055      	beq.n	800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb12:	6921      	ldr	r1, [r4, #16]
 800fb14:	4630      	mov	r0, r6
 800fb16:	f005 f897 	bl	8014c48 <ucdr_serialize_string>
 800fb1a:	6863      	ldr	r3, [r4, #4]
 800fb1c:	2b03      	cmp	r3, #3
 800fb1e:	d941      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d04c      	beq.n	800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb24:	6961      	ldr	r1, [r4, #20]
 800fb26:	4630      	mov	r0, r6
 800fb28:	f005 f88e 	bl	8014c48 <ucdr_serialize_string>
 800fb2c:	6863      	ldr	r3, [r4, #4]
 800fb2e:	2b04      	cmp	r3, #4
 800fb30:	d938      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d043      	beq.n	800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb36:	69a1      	ldr	r1, [r4, #24]
 800fb38:	4630      	mov	r0, r6
 800fb3a:	f005 f885 	bl	8014c48 <ucdr_serialize_string>
 800fb3e:	6863      	ldr	r3, [r4, #4]
 800fb40:	2b05      	cmp	r3, #5
 800fb42:	d92f      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d03a      	beq.n	800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb48:	69e1      	ldr	r1, [r4, #28]
 800fb4a:	4630      	mov	r0, r6
 800fb4c:	f005 f87c 	bl	8014c48 <ucdr_serialize_string>
 800fb50:	6863      	ldr	r3, [r4, #4]
 800fb52:	2b06      	cmp	r3, #6
 800fb54:	d926      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb56:	b390      	cbz	r0, 800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb58:	6a21      	ldr	r1, [r4, #32]
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	f005 f874 	bl	8014c48 <ucdr_serialize_string>
 800fb60:	6863      	ldr	r3, [r4, #4]
 800fb62:	2b07      	cmp	r3, #7
 800fb64:	d91e      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb66:	b350      	cbz	r0, 800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	f005 f86c 	bl	8014c48 <ucdr_serialize_string>
 800fb70:	6863      	ldr	r3, [r4, #4]
 800fb72:	2b08      	cmp	r3, #8
 800fb74:	d916      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb76:	b310      	cbz	r0, 800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	f005 f864 	bl	8014c48 <ucdr_serialize_string>
 800fb80:	6863      	ldr	r3, [r4, #4]
 800fb82:	2b09      	cmp	r3, #9
 800fb84:	d90e      	bls.n	800fba4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800fb86:	b1d0      	cbz	r0, 800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb88:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800fb8c:	2709      	movs	r7, #9
 800fb8e:	e000      	b.n	800fb92 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800fb90:	b1a8      	cbz	r0, 800fbbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800fb92:	f858 1b04 	ldr.w	r1, [r8], #4
 800fb96:	4630      	mov	r0, r6
 800fb98:	f005 f856 	bl	8014c48 <ucdr_serialize_string>
 800fb9c:	6862      	ldr	r2, [r4, #4]
 800fb9e:	3701      	adds	r7, #1
 800fba0:	4297      	cmp	r7, r2
 800fba2:	d3f5      	bcc.n	800fb90 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800fba4:	4005      	ands	r5, r0
 800fba6:	b2ed      	uxtb	r5, r5
 800fba8:	e78a      	b.n	800fac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800fbaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fbac:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f005 f81d 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 800fbb6:	4005      	ands	r5, r0
 800fbb8:	4628      	mov	r0, r5
 800fbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbbe:	2500      	movs	r5, #0
 800fbc0:	e77e      	b.n	800fac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800fbc2:	4028      	ands	r0, r5
 800fbc4:	b2c5      	uxtb	r5, r0
 800fbc6:	e77b      	b.n	800fac0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800fbc8 <uxr_serialize_OBJK_Subscriber_Binary>:
 800fbc8:	b570      	push	{r4, r5, r6, lr}
 800fbca:	460d      	mov	r5, r1
 800fbcc:	7809      	ldrb	r1, [r1, #0]
 800fbce:	4606      	mov	r6, r0
 800fbd0:	f7f8 fe40 	bl	8008854 <ucdr_serialize_bool>
 800fbd4:	782b      	ldrb	r3, [r5, #0]
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	b94b      	cbnz	r3, 800fbee <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800fbda:	7a29      	ldrb	r1, [r5, #8]
 800fbdc:	4630      	mov	r0, r6
 800fbde:	f7f8 fe39 	bl	8008854 <ucdr_serialize_bool>
 800fbe2:	7a2b      	ldrb	r3, [r5, #8]
 800fbe4:	4004      	ands	r4, r0
 800fbe6:	b2e4      	uxtb	r4, r4
 800fbe8:	b943      	cbnz	r3, 800fbfc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800fbea:	4620      	mov	r0, r4
 800fbec:	bd70      	pop	{r4, r5, r6, pc}
 800fbee:	6869      	ldr	r1, [r5, #4]
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f005 f829 	bl	8014c48 <ucdr_serialize_string>
 800fbf6:	4004      	ands	r4, r0
 800fbf8:	b2e4      	uxtb	r4, r4
 800fbfa:	e7ee      	b.n	800fbda <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800fbfc:	f105 010c 	add.w	r1, r5, #12
 800fc00:	4630      	mov	r0, r6
 800fc02:	f7ff ff53 	bl	800faac <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800fc06:	4004      	ands	r4, r0
 800fc08:	4620      	mov	r0, r4
 800fc0a:	bd70      	pop	{r4, r5, r6, pc}

0800fc0c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800fc0c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800fc10:	4688      	mov	r8, r1
 800fc12:	8809      	ldrh	r1, [r1, #0]
 800fc14:	4681      	mov	r9, r0
 800fc16:	f7f8 fe77 	bl	8008908 <ucdr_serialize_uint16_t>
 800fc1a:	f898 1002 	ldrb.w	r1, [r8, #2]
 800fc1e:	4606      	mov	r6, r0
 800fc20:	4648      	mov	r0, r9
 800fc22:	f7f8 fe17 	bl	8008854 <ucdr_serialize_bool>
 800fc26:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fc2a:	4006      	ands	r6, r0
 800fc2c:	b2f5      	uxtb	r5, r6
 800fc2e:	b9eb      	cbnz	r3, 800fc6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800fc30:	f898 1006 	ldrb.w	r1, [r8, #6]
 800fc34:	4648      	mov	r0, r9
 800fc36:	f7f8 fe0d 	bl	8008854 <ucdr_serialize_bool>
 800fc3a:	f898 3006 	ldrb.w	r3, [r8, #6]
 800fc3e:	4005      	ands	r5, r0
 800fc40:	bb7b      	cbnz	r3, 800fca2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800fc42:	f898 100c 	ldrb.w	r1, [r8, #12]
 800fc46:	4648      	mov	r0, r9
 800fc48:	f7f8 fe04 	bl	8008854 <ucdr_serialize_bool>
 800fc4c:	f898 300c 	ldrb.w	r3, [r8, #12]
 800fc50:	4005      	ands	r5, r0
 800fc52:	b9f3      	cbnz	r3, 800fc92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800fc54:	f898 1014 	ldrb.w	r1, [r8, #20]
 800fc58:	4648      	mov	r0, r9
 800fc5a:	f7f8 fdfb 	bl	8008854 <ucdr_serialize_bool>
 800fc5e:	f898 3014 	ldrb.w	r3, [r8, #20]
 800fc62:	4005      	ands	r5, r0
 800fc64:	b94b      	cbnz	r3, 800fc7a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800fc66:	4628      	mov	r0, r5
 800fc68:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fc6c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800fc70:	4648      	mov	r0, r9
 800fc72:	f7f8 fe49 	bl	8008908 <ucdr_serialize_uint16_t>
 800fc76:	4005      	ands	r5, r0
 800fc78:	e7da      	b.n	800fc30 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800fc7a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800fc7e:	f108 011c 	add.w	r1, r8, #28
 800fc82:	4648      	mov	r0, r9
 800fc84:	f004 ffb4 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 800fc88:	4028      	ands	r0, r5
 800fc8a:	b2c5      	uxtb	r5, r0
 800fc8c:	4628      	mov	r0, r5
 800fc8e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800fc92:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc96:	4648      	mov	r0, r9
 800fc98:	f7f9 f820 	bl	8008cdc <ucdr_serialize_uint32_t>
 800fc9c:	4028      	ands	r0, r5
 800fc9e:	b2c5      	uxtb	r5, r0
 800fca0:	e7d8      	b.n	800fc54 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800fca2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800fca6:	4648      	mov	r0, r9
 800fca8:	f7f9 f818 	bl	8008cdc <ucdr_serialize_uint32_t>
 800fcac:	4028      	ands	r0, r5
 800fcae:	b2c5      	uxtb	r5, r0
 800fcb0:	e7c7      	b.n	800fc42 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800fcb2:	bf00      	nop

0800fcb4 <uxr_serialize_OBJK_DataReader_Binary>:
 800fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcb6:	2202      	movs	r2, #2
 800fcb8:	460c      	mov	r4, r1
 800fcba:	4606      	mov	r6, r0
 800fcbc:	f004 fea4 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800fcc0:	78a1      	ldrb	r1, [r4, #2]
 800fcc2:	4605      	mov	r5, r0
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	f7f8 fdc5 	bl	8008854 <ucdr_serialize_bool>
 800fcca:	78a3      	ldrb	r3, [r4, #2]
 800fccc:	4005      	ands	r5, r0
 800fcce:	b2ed      	uxtb	r5, r5
 800fcd0:	b90b      	cbnz	r3, 800fcd6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcd6:	f104 0108 	add.w	r1, r4, #8
 800fcda:	4630      	mov	r0, r6
 800fcdc:	f7ff ff96 	bl	800fc0c <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fce0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fce4:	4607      	mov	r7, r0
 800fce6:	4630      	mov	r0, r6
 800fce8:	f7f8 fdb4 	bl	8008854 <ucdr_serialize_bool>
 800fcec:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fcf0:	4038      	ands	r0, r7
 800fcf2:	b2c7      	uxtb	r7, r0
 800fcf4:	b95b      	cbnz	r3, 800fd0e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800fcf6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	f7f8 fdaa 	bl	8008854 <ucdr_serialize_bool>
 800fd00:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800fd04:	4007      	ands	r7, r0
 800fd06:	b94b      	cbnz	r3, 800fd1c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800fd08:	403d      	ands	r5, r7
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd0e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800fd12:	4630      	mov	r0, r6
 800fd14:	f7f9 fa38 	bl	8009188 <ucdr_serialize_uint64_t>
 800fd18:	4007      	ands	r7, r0
 800fd1a:	e7ec      	b.n	800fcf6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800fd1c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800fd1e:	4630      	mov	r0, r6
 800fd20:	f004 ff92 	bl	8014c48 <ucdr_serialize_string>
 800fd24:	4007      	ands	r7, r0
 800fd26:	b2ff      	uxtb	r7, r7
 800fd28:	e7ee      	b.n	800fd08 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800fd2a:	bf00      	nop

0800fd2c <uxr_serialize_OBJK_DataWriter_Binary>:
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	2202      	movs	r2, #2
 800fd30:	460d      	mov	r5, r1
 800fd32:	4606      	mov	r6, r0
 800fd34:	f004 fe68 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 800fd38:	78a9      	ldrb	r1, [r5, #2]
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f7f8 fd89 	bl	8008854 <ucdr_serialize_bool>
 800fd42:	78ab      	ldrb	r3, [r5, #2]
 800fd44:	4004      	ands	r4, r0
 800fd46:	b2e4      	uxtb	r4, r4
 800fd48:	b90b      	cbnz	r3, 800fd4e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd4e:	f105 0108 	add.w	r1, r5, #8
 800fd52:	4630      	mov	r0, r6
 800fd54:	f7ff ff5a 	bl	800fc0c <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fd58:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800fd5c:	4607      	mov	r7, r0
 800fd5e:	4630      	mov	r0, r6
 800fd60:	f7f8 fd78 	bl	8008854 <ucdr_serialize_bool>
 800fd64:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800fd68:	4038      	ands	r0, r7
 800fd6a:	b2c7      	uxtb	r7, r0
 800fd6c:	b913      	cbnz	r3, 800fd74 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fd6e:	403c      	ands	r4, r7
 800fd70:	4620      	mov	r0, r4
 800fd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd74:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f7f9 fa05 	bl	8009188 <ucdr_serialize_uint64_t>
 800fd7e:	4007      	ands	r7, r0
 800fd80:	e7f5      	b.n	800fd6e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fd82:	bf00      	nop

0800fd84 <uxr_serialize_OBJK_Replier_Binary>:
 800fd84:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 800fd88:	460f      	mov	r7, r1
 800fd8a:	6809      	ldr	r1, [r1, #0]
 800fd8c:	4680      	mov	r8, r0
 800fd8e:	f004 ff5b 	bl	8014c48 <ucdr_serialize_string>
 800fd92:	6879      	ldr	r1, [r7, #4]
 800fd94:	4605      	mov	r5, r0
 800fd96:	4640      	mov	r0, r8
 800fd98:	f004 ff56 	bl	8014c48 <ucdr_serialize_string>
 800fd9c:	68b9      	ldr	r1, [r7, #8]
 800fd9e:	4005      	ands	r5, r0
 800fda0:	4640      	mov	r0, r8
 800fda2:	f004 ff51 	bl	8014c48 <ucdr_serialize_string>
 800fda6:	b2ec      	uxtb	r4, r5
 800fda8:	4004      	ands	r4, r0
 800fdaa:	7b39      	ldrb	r1, [r7, #12]
 800fdac:	4640      	mov	r0, r8
 800fdae:	f7f8 fd51 	bl	8008854 <ucdr_serialize_bool>
 800fdb2:	7b3b      	ldrb	r3, [r7, #12]
 800fdb4:	4004      	ands	r4, r0
 800fdb6:	b94b      	cbnz	r3, 800fdcc <uxr_serialize_OBJK_Replier_Binary+0x48>
 800fdb8:	7d39      	ldrb	r1, [r7, #20]
 800fdba:	4640      	mov	r0, r8
 800fdbc:	f7f8 fd4a 	bl	8008854 <ucdr_serialize_bool>
 800fdc0:	7d3b      	ldrb	r3, [r7, #20]
 800fdc2:	4004      	ands	r4, r0
 800fdc4:	b943      	cbnz	r3, 800fdd8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800fdcc:	6939      	ldr	r1, [r7, #16]
 800fdce:	4640      	mov	r0, r8
 800fdd0:	f004 ff3a 	bl	8014c48 <ucdr_serialize_string>
 800fdd4:	4004      	ands	r4, r0
 800fdd6:	e7ef      	b.n	800fdb8 <uxr_serialize_OBJK_Replier_Binary+0x34>
 800fdd8:	69b9      	ldr	r1, [r7, #24]
 800fdda:	4640      	mov	r0, r8
 800fddc:	f004 ff34 	bl	8014c48 <ucdr_serialize_string>
 800fde0:	4004      	ands	r4, r0
 800fde2:	b2e4      	uxtb	r4, r4
 800fde4:	4620      	mov	r0, r4
 800fde6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 800fdea:	bf00      	nop

0800fdec <uxr_deserialize_ObjectVariant>:
 800fdec:	b570      	push	{r4, r5, r6, lr}
 800fdee:	4605      	mov	r5, r0
 800fdf0:	460e      	mov	r6, r1
 800fdf2:	f7f8 fd73 	bl	80088dc <ucdr_deserialize_uint8_t>
 800fdf6:	b168      	cbz	r0, 800fe14 <uxr_deserialize_ObjectVariant+0x28>
 800fdf8:	7833      	ldrb	r3, [r6, #0]
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	2b0d      	cmp	r3, #13
 800fe00:	d809      	bhi.n	800fe16 <uxr_deserialize_ObjectVariant+0x2a>
 800fe02:	e8df f003 	tbb	[pc, r3]
 800fe06:	0a41      	.short	0x0a41
 800fe08:	0a0a2323 	.word	0x0a0a2323
 800fe0c:	10080a0a 	.word	0x10080a0a
 800fe10:	565c1010 	.word	0x565c1010
 800fe14:	2400      	movs	r4, #0
 800fe16:	4620      	mov	r0, r4
 800fe18:	bd70      	pop	{r4, r5, r6, pc}
 800fe1a:	1d31      	adds	r1, r6, #4
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe22:	f7ff bd21 	b.w	800f868 <uxr_deserialize_DATAWRITER_Representation>
 800fe26:	1d31      	adds	r1, r6, #4
 800fe28:	4628      	mov	r0, r5
 800fe2a:	f7f8 fd57 	bl	80088dc <ucdr_deserialize_uint8_t>
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0f0      	beq.n	800fe14 <uxr_deserialize_ObjectVariant+0x28>
 800fe32:	7933      	ldrb	r3, [r6, #4]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d001      	beq.n	800fe3c <uxr_deserialize_ObjectVariant+0x50>
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	d1ec      	bne.n	800fe16 <uxr_deserialize_ObjectVariant+0x2a>
 800fe3c:	68b1      	ldr	r1, [r6, #8]
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe48:	f004 bf0e 	b.w	8014c68 <ucdr_deserialize_string>
 800fe4c:	1d31      	adds	r1, r6, #4
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f7f8 fd44 	bl	80088dc <ucdr_deserialize_uint8_t>
 800fe54:	4604      	mov	r4, r0
 800fe56:	b170      	cbz	r0, 800fe76 <uxr_deserialize_ObjectVariant+0x8a>
 800fe58:	7933      	ldrb	r3, [r6, #4]
 800fe5a:	2b02      	cmp	r3, #2
 800fe5c:	d04c      	beq.n	800fef8 <uxr_deserialize_ObjectVariant+0x10c>
 800fe5e:	2b03      	cmp	r3, #3
 800fe60:	d109      	bne.n	800fe76 <uxr_deserialize_ObjectVariant+0x8a>
 800fe62:	f106 0308 	add.w	r3, r6, #8
 800fe66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe6a:	f106 010c 	add.w	r1, r6, #12
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f004 fed0 	bl	8014c14 <ucdr_deserialize_sequence_uint8_t>
 800fe74:	4604      	mov	r4, r0
 800fe76:	2202      	movs	r2, #2
 800fe78:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f004 fe27 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800fe82:	4020      	ands	r0, r4
 800fe84:	b2c4      	uxtb	r4, r0
 800fe86:	e7c6      	b.n	800fe16 <uxr_deserialize_ObjectVariant+0x2a>
 800fe88:	1d31      	adds	r1, r6, #4
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	f7f8 fd26 	bl	80088dc <ucdr_deserialize_uint8_t>
 800fe90:	4604      	mov	r4, r0
 800fe92:	b130      	cbz	r0, 800fea2 <uxr_deserialize_ObjectVariant+0xb6>
 800fe94:	7933      	ldrb	r3, [r6, #4]
 800fe96:	2b02      	cmp	r3, #2
 800fe98:	d036      	beq.n	800ff08 <uxr_deserialize_ObjectVariant+0x11c>
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d03c      	beq.n	800ff18 <uxr_deserialize_ObjectVariant+0x12c>
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	d032      	beq.n	800ff08 <uxr_deserialize_ObjectVariant+0x11c>
 800fea2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800fea6:	4628      	mov	r0, r5
 800fea8:	f7f9 fabe 	bl	8009428 <ucdr_deserialize_int16_t>
 800feac:	4020      	ands	r0, r4
 800feae:	b2c4      	uxtb	r4, r0
 800feb0:	e7b1      	b.n	800fe16 <uxr_deserialize_ObjectVariant+0x2a>
 800feb2:	1d31      	adds	r1, r6, #4
 800feb4:	4628      	mov	r0, r5
 800feb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feba:	f7ff bb8b 	b.w	800f5d4 <uxr_deserialize_CLIENT_Representation>
 800febe:	2204      	movs	r2, #4
 800fec0:	18b1      	adds	r1, r6, r2
 800fec2:	4628      	mov	r0, r5
 800fec4:	f004 fe04 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800fec8:	2202      	movs	r2, #2
 800feca:	f106 0108 	add.w	r1, r6, #8
 800fece:	4604      	mov	r4, r0
 800fed0:	4628      	mov	r0, r5
 800fed2:	f004 fdfd 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800fed6:	2202      	movs	r2, #2
 800fed8:	4004      	ands	r4, r0
 800feda:	f106 010a 	add.w	r1, r6, #10
 800fede:	4628      	mov	r0, r5
 800fee0:	f004 fdf6 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800fee4:	b2e4      	uxtb	r4, r4
 800fee6:	4603      	mov	r3, r0
 800fee8:	f106 010c 	add.w	r1, r6, #12
 800feec:	4628      	mov	r0, r5
 800feee:	401c      	ands	r4, r3
 800fef0:	f7f8 fcc6 	bl	8008880 <ucdr_deserialize_bool>
 800fef4:	4004      	ands	r4, r0
 800fef6:	e78e      	b.n	800fe16 <uxr_deserialize_ObjectVariant+0x2a>
 800fef8:	68b1      	ldr	r1, [r6, #8]
 800fefa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fefe:	4628      	mov	r0, r5
 800ff00:	f004 feb2 	bl	8014c68 <ucdr_deserialize_string>
 800ff04:	4604      	mov	r4, r0
 800ff06:	e7b6      	b.n	800fe76 <uxr_deserialize_ObjectVariant+0x8a>
 800ff08:	68b1      	ldr	r1, [r6, #8]
 800ff0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f004 feaa 	bl	8014c68 <ucdr_deserialize_string>
 800ff14:	4604      	mov	r4, r0
 800ff16:	e7c4      	b.n	800fea2 <uxr_deserialize_ObjectVariant+0xb6>
 800ff18:	f106 0308 	add.w	r3, r6, #8
 800ff1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff20:	f106 010c 	add.w	r1, r6, #12
 800ff24:	4628      	mov	r0, r5
 800ff26:	f004 fe75 	bl	8014c14 <ucdr_deserialize_sequence_uint8_t>
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	e7b9      	b.n	800fea2 <uxr_deserialize_ObjectVariant+0xb6>
 800ff2e:	bf00      	nop

0800ff30 <uxr_deserialize_BaseObjectRequest>:
 800ff30:	b570      	push	{r4, r5, r6, lr}
 800ff32:	2202      	movs	r2, #2
 800ff34:	4605      	mov	r5, r0
 800ff36:	460e      	mov	r6, r1
 800ff38:	f004 fdca 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	4604      	mov	r4, r0
 800ff40:	18b1      	adds	r1, r6, r2
 800ff42:	4628      	mov	r0, r5
 800ff44:	f004 fdc4 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 800ff48:	4020      	ands	r0, r4
 800ff4a:	b2c0      	uxtb	r0, r0
 800ff4c:	bd70      	pop	{r4, r5, r6, pc}
 800ff4e:	bf00      	nop

0800ff50 <uxr_serialize_ActivityInfoVariant>:
 800ff50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff54:	460d      	mov	r5, r1
 800ff56:	7809      	ldrb	r1, [r1, #0]
 800ff58:	4607      	mov	r7, r0
 800ff5a:	f7f8 fca9 	bl	80088b0 <ucdr_serialize_uint8_t>
 800ff5e:	4681      	mov	r9, r0
 800ff60:	b138      	cbz	r0, 800ff72 <uxr_serialize_ActivityInfoVariant+0x22>
 800ff62:	782b      	ldrb	r3, [r5, #0]
 800ff64:	2b06      	cmp	r3, #6
 800ff66:	f000 8082 	beq.w	801006e <uxr_serialize_ActivityInfoVariant+0x11e>
 800ff6a:	2b0d      	cmp	r3, #13
 800ff6c:	d016      	beq.n	800ff9c <uxr_serialize_ActivityInfoVariant+0x4c>
 800ff6e:	2b05      	cmp	r3, #5
 800ff70:	d002      	beq.n	800ff78 <uxr_serialize_ActivityInfoVariant+0x28>
 800ff72:	4648      	mov	r0, r9
 800ff74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff78:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ff7c:	4638      	mov	r0, r7
 800ff7e:	f7f9 f9d3 	bl	8009328 <ucdr_serialize_int16_t>
 800ff82:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ff86:	4681      	mov	r9, r0
 800ff88:	4638      	mov	r0, r7
 800ff8a:	f7f9 f8fd 	bl	8009188 <ucdr_serialize_uint64_t>
 800ff8e:	ea09 0000 	and.w	r0, r9, r0
 800ff92:	fa5f f980 	uxtb.w	r9, r0
 800ff96:	4648      	mov	r0, r9
 800ff98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff9c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ffa0:	4638      	mov	r0, r7
 800ffa2:	f7f9 f9c1 	bl	8009328 <ucdr_serialize_int16_t>
 800ffa6:	68e9      	ldr	r1, [r5, #12]
 800ffa8:	4681      	mov	r9, r0
 800ffaa:	4638      	mov	r0, r7
 800ffac:	f7f8 fe96 	bl	8008cdc <ucdr_serialize_uint32_t>
 800ffb0:	68eb      	ldr	r3, [r5, #12]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d0eb      	beq.n	800ff8e <uxr_serialize_ActivityInfoVariant+0x3e>
 800ffb6:	b320      	cbz	r0, 8010002 <uxr_serialize_ActivityInfoVariant+0xb2>
 800ffb8:	f105 080c 	add.w	r8, r5, #12
 800ffbc:	2600      	movs	r6, #0
 800ffbe:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ffc2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ffc6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ffca:	4638      	mov	r0, r7
 800ffcc:	f7f8 fc70 	bl	80088b0 <ucdr_serialize_uint8_t>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d053      	beq.n	801007c <uxr_serialize_ActivityInfoVariant+0x12c>
 800ffd4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ffd8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ffdc:	0074      	lsls	r4, r6, #1
 800ffde:	00c9      	lsls	r1, r1, #3
 800ffe0:	2b03      	cmp	r3, #3
 800ffe2:	d854      	bhi.n	801008e <uxr_serialize_ActivityInfoVariant+0x13e>
 800ffe4:	e8df f003 	tbb	[pc, r3]
 800ffe8:	02102132 	.word	0x02102132
 800ffec:	4441      	add	r1, r8
 800ffee:	4638      	mov	r0, r7
 800fff0:	6889      	ldr	r1, [r1, #8]
 800fff2:	f004 fe29 	bl	8014c48 <ucdr_serialize_string>
 800fff6:	68ea      	ldr	r2, [r5, #12]
 800fff8:	3601      	adds	r6, #1
 800fffa:	4296      	cmp	r6, r2
 800fffc:	d242      	bcs.n	8010084 <uxr_serialize_ActivityInfoVariant+0x134>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d1dd      	bne.n	800ffbe <uxr_serialize_ActivityInfoVariant+0x6e>
 8010002:	f04f 0900 	mov.w	r9, #0
 8010006:	e7b4      	b.n	800ff72 <uxr_serialize_ActivityInfoVariant+0x22>
 8010008:	3108      	adds	r1, #8
 801000a:	4441      	add	r1, r8
 801000c:	2210      	movs	r2, #16
 801000e:	4638      	mov	r0, r7
 8010010:	f004 fcfa 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010014:	4434      	add	r4, r6
 8010016:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801001a:	4604      	mov	r4, r0
 801001c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801001e:	4638      	mov	r0, r7
 8010020:	f7f8 fe5c 	bl	8008cdc <ucdr_serialize_uint32_t>
 8010024:	4020      	ands	r0, r4
 8010026:	b2c0      	uxtb	r0, r0
 8010028:	e7e5      	b.n	800fff6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801002a:	3108      	adds	r1, #8
 801002c:	4441      	add	r1, r8
 801002e:	2204      	movs	r2, #4
 8010030:	4638      	mov	r0, r7
 8010032:	f004 fce9 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010036:	4434      	add	r4, r6
 8010038:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801003c:	4604      	mov	r4, r0
 801003e:	8b19      	ldrh	r1, [r3, #24]
 8010040:	4638      	mov	r0, r7
 8010042:	f7f8 fc61 	bl	8008908 <ucdr_serialize_uint16_t>
 8010046:	4020      	ands	r0, r4
 8010048:	b2c0      	uxtb	r0, r0
 801004a:	e7d4      	b.n	800fff6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801004c:	3108      	adds	r1, #8
 801004e:	4441      	add	r1, r8
 8010050:	2202      	movs	r2, #2
 8010052:	4638      	mov	r0, r7
 8010054:	f004 fcd8 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010058:	4434      	add	r4, r6
 801005a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801005e:	4604      	mov	r4, r0
 8010060:	7d99      	ldrb	r1, [r3, #22]
 8010062:	4638      	mov	r0, r7
 8010064:	f7f8 fc24 	bl	80088b0 <ucdr_serialize_uint8_t>
 8010068:	4020      	ands	r0, r4
 801006a:	b2c0      	uxtb	r0, r0
 801006c:	e7c3      	b.n	800fff6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801006e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010072:	4638      	mov	r0, r7
 8010074:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010078:	f7f9 b956 	b.w	8009328 <ucdr_serialize_int16_t>
 801007c:	68ea      	ldr	r2, [r5, #12]
 801007e:	3601      	adds	r6, #1
 8010080:	42b2      	cmp	r2, r6
 8010082:	d8be      	bhi.n	8010002 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010084:	ea09 0900 	and.w	r9, r9, r0
 8010088:	fa5f f989 	uxtb.w	r9, r9
 801008c:	e771      	b.n	800ff72 <uxr_serialize_ActivityInfoVariant+0x22>
 801008e:	68eb      	ldr	r3, [r5, #12]
 8010090:	3601      	adds	r6, #1
 8010092:	429e      	cmp	r6, r3
 8010094:	f10a 0a18 	add.w	sl, sl, #24
 8010098:	d395      	bcc.n	800ffc6 <uxr_serialize_ActivityInfoVariant+0x76>
 801009a:	e76a      	b.n	800ff72 <uxr_serialize_ActivityInfoVariant+0x22>

0801009c <uxr_deserialize_BaseObjectReply>:
 801009c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a0:	2202      	movs	r2, #2
 80100a2:	4606      	mov	r6, r0
 80100a4:	460f      	mov	r7, r1
 80100a6:	f004 fd13 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 80100aa:	2202      	movs	r2, #2
 80100ac:	18b9      	adds	r1, r7, r2
 80100ae:	4605      	mov	r5, r0
 80100b0:	4630      	mov	r0, r6
 80100b2:	f004 fd0d 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 80100b6:	1d39      	adds	r1, r7, #4
 80100b8:	4680      	mov	r8, r0
 80100ba:	4630      	mov	r0, r6
 80100bc:	f7f8 fc0e 	bl	80088dc <ucdr_deserialize_uint8_t>
 80100c0:	1d79      	adds	r1, r7, #5
 80100c2:	4604      	mov	r4, r0
 80100c4:	4630      	mov	r0, r6
 80100c6:	f7f8 fc09 	bl	80088dc <ucdr_deserialize_uint8_t>
 80100ca:	ea05 0508 	and.w	r5, r5, r8
 80100ce:	402c      	ands	r4, r5
 80100d0:	4020      	ands	r0, r4
 80100d2:	b2c0      	uxtb	r0, r0
 80100d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100d8 <uxr_serialize_ReadSpecification>:
 80100d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100dc:	460e      	mov	r6, r1
 80100de:	7809      	ldrb	r1, [r1, #0]
 80100e0:	4607      	mov	r7, r0
 80100e2:	f7f8 fbe5 	bl	80088b0 <ucdr_serialize_uint8_t>
 80100e6:	7871      	ldrb	r1, [r6, #1]
 80100e8:	4604      	mov	r4, r0
 80100ea:	4638      	mov	r0, r7
 80100ec:	f7f8 fbe0 	bl	80088b0 <ucdr_serialize_uint8_t>
 80100f0:	78b1      	ldrb	r1, [r6, #2]
 80100f2:	4004      	ands	r4, r0
 80100f4:	4638      	mov	r0, r7
 80100f6:	f7f8 fbad 	bl	8008854 <ucdr_serialize_bool>
 80100fa:	78b3      	ldrb	r3, [r6, #2]
 80100fc:	b2e4      	uxtb	r4, r4
 80100fe:	4004      	ands	r4, r0
 8010100:	b94b      	cbnz	r3, 8010116 <uxr_serialize_ReadSpecification+0x3e>
 8010102:	7a31      	ldrb	r1, [r6, #8]
 8010104:	4638      	mov	r0, r7
 8010106:	f7f8 fba5 	bl	8008854 <ucdr_serialize_bool>
 801010a:	7a33      	ldrb	r3, [r6, #8]
 801010c:	4004      	ands	r4, r0
 801010e:	b943      	cbnz	r3, 8010122 <uxr_serialize_ReadSpecification+0x4a>
 8010110:	4620      	mov	r0, r4
 8010112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010116:	6871      	ldr	r1, [r6, #4]
 8010118:	4638      	mov	r0, r7
 801011a:	f004 fd95 	bl	8014c48 <ucdr_serialize_string>
 801011e:	4004      	ands	r4, r0
 8010120:	e7ef      	b.n	8010102 <uxr_serialize_ReadSpecification+0x2a>
 8010122:	8971      	ldrh	r1, [r6, #10]
 8010124:	4638      	mov	r0, r7
 8010126:	f7f8 fbef 	bl	8008908 <ucdr_serialize_uint16_t>
 801012a:	89b1      	ldrh	r1, [r6, #12]
 801012c:	4605      	mov	r5, r0
 801012e:	4638      	mov	r0, r7
 8010130:	f7f8 fbea 	bl	8008908 <ucdr_serialize_uint16_t>
 8010134:	89f1      	ldrh	r1, [r6, #14]
 8010136:	4005      	ands	r5, r0
 8010138:	4638      	mov	r0, r7
 801013a:	f7f8 fbe5 	bl	8008908 <ucdr_serialize_uint16_t>
 801013e:	8a31      	ldrh	r1, [r6, #16]
 8010140:	4680      	mov	r8, r0
 8010142:	4638      	mov	r0, r7
 8010144:	f7f8 fbe0 	bl	8008908 <ucdr_serialize_uint16_t>
 8010148:	b2ed      	uxtb	r5, r5
 801014a:	4025      	ands	r5, r4
 801014c:	ea08 0505 	and.w	r5, r8, r5
 8010150:	ea00 0405 	and.w	r4, r0, r5
 8010154:	4620      	mov	r0, r4
 8010156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801015a:	bf00      	nop

0801015c <uxr_serialize_CREATE_CLIENT_Payload>:
 801015c:	f7ff b9e2 	b.w	800f524 <uxr_serialize_CLIENT_Representation>

08010160 <uxr_serialize_CREATE_Payload>:
 8010160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010162:	2202      	movs	r2, #2
 8010164:	4607      	mov	r7, r0
 8010166:	460e      	mov	r6, r1
 8010168:	f004 fc4e 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 801016c:	2202      	movs	r2, #2
 801016e:	18b1      	adds	r1, r6, r2
 8010170:	4605      	mov	r5, r0
 8010172:	4638      	mov	r0, r7
 8010174:	f004 fc48 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010178:	7931      	ldrb	r1, [r6, #4]
 801017a:	4604      	mov	r4, r0
 801017c:	4638      	mov	r0, r7
 801017e:	f7f8 fb97 	bl	80088b0 <ucdr_serialize_uint8_t>
 8010182:	b170      	cbz	r0, 80101a2 <uxr_serialize_CREATE_Payload+0x42>
 8010184:	7933      	ldrb	r3, [r6, #4]
 8010186:	402c      	ands	r4, r5
 8010188:	3b01      	subs	r3, #1
 801018a:	b2e4      	uxtb	r4, r4
 801018c:	2b0d      	cmp	r3, #13
 801018e:	d809      	bhi.n	80101a4 <uxr_serialize_CREATE_Payload+0x44>
 8010190:	e8df f003 	tbb	[pc, r3]
 8010194:	23230a4c 	.word	0x23230a4c
 8010198:	0a0a0a0a 	.word	0x0a0a0a0a
 801019c:	12121208 	.word	0x12121208
 80101a0:	3e45      	.short	0x3e45
 80101a2:	2400      	movs	r4, #0
 80101a4:	4620      	mov	r0, r4
 80101a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101a8:	f106 0108 	add.w	r1, r6, #8
 80101ac:	4638      	mov	r0, r7
 80101ae:	f7ff fabf 	bl	800f730 <uxr_serialize_DATAWRITER_Representation>
 80101b2:	4004      	ands	r4, r0
 80101b4:	4620      	mov	r0, r4
 80101b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101b8:	7a31      	ldrb	r1, [r6, #8]
 80101ba:	4638      	mov	r0, r7
 80101bc:	f7f8 fb78 	bl	80088b0 <ucdr_serialize_uint8_t>
 80101c0:	2800      	cmp	r0, #0
 80101c2:	d0ee      	beq.n	80101a2 <uxr_serialize_CREATE_Payload+0x42>
 80101c4:	7a33      	ldrb	r3, [r6, #8]
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	d001      	beq.n	80101ce <uxr_serialize_CREATE_Payload+0x6e>
 80101ca:	2b02      	cmp	r3, #2
 80101cc:	d1ea      	bne.n	80101a4 <uxr_serialize_CREATE_Payload+0x44>
 80101ce:	68f1      	ldr	r1, [r6, #12]
 80101d0:	4638      	mov	r0, r7
 80101d2:	f004 fd39 	bl	8014c48 <ucdr_serialize_string>
 80101d6:	4004      	ands	r4, r0
 80101d8:	e7e4      	b.n	80101a4 <uxr_serialize_CREATE_Payload+0x44>
 80101da:	7a31      	ldrb	r1, [r6, #8]
 80101dc:	4638      	mov	r0, r7
 80101de:	f7f8 fb67 	bl	80088b0 <ucdr_serialize_uint8_t>
 80101e2:	4605      	mov	r5, r0
 80101e4:	b158      	cbz	r0, 80101fe <uxr_serialize_CREATE_Payload+0x9e>
 80101e6:	7a33      	ldrb	r3, [r6, #8]
 80101e8:	2b02      	cmp	r3, #2
 80101ea:	d034      	beq.n	8010256 <uxr_serialize_CREATE_Payload+0xf6>
 80101ec:	2b03      	cmp	r3, #3
 80101ee:	d106      	bne.n	80101fe <uxr_serialize_CREATE_Payload+0x9e>
 80101f0:	68f2      	ldr	r2, [r6, #12]
 80101f2:	f106 0110 	add.w	r1, r6, #16
 80101f6:	4638      	mov	r0, r7
 80101f8:	f004 fcfa 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 80101fc:	4605      	mov	r5, r0
 80101fe:	2202      	movs	r2, #2
 8010200:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010204:	4638      	mov	r0, r7
 8010206:	f004 fbff 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 801020a:	4028      	ands	r0, r5
 801020c:	4004      	ands	r4, r0
 801020e:	e7c9      	b.n	80101a4 <uxr_serialize_CREATE_Payload+0x44>
 8010210:	f106 0108 	add.w	r1, r6, #8
 8010214:	4638      	mov	r0, r7
 8010216:	f7ff f985 	bl	800f524 <uxr_serialize_CLIENT_Representation>
 801021a:	4004      	ands	r4, r0
 801021c:	e7c2      	b.n	80101a4 <uxr_serialize_CREATE_Payload+0x44>
 801021e:	f106 0108 	add.w	r1, r6, #8
 8010222:	4638      	mov	r0, r7
 8010224:	f7ff fa3a 	bl	800f69c <uxr_serialize_AGENT_Representation>
 8010228:	4004      	ands	r4, r0
 801022a:	e7bb      	b.n	80101a4 <uxr_serialize_CREATE_Payload+0x44>
 801022c:	7a31      	ldrb	r1, [r6, #8]
 801022e:	4638      	mov	r0, r7
 8010230:	f7f8 fb3e 	bl	80088b0 <ucdr_serialize_uint8_t>
 8010234:	4605      	mov	r5, r0
 8010236:	b130      	cbz	r0, 8010246 <uxr_serialize_CREATE_Payload+0xe6>
 8010238:	7a33      	ldrb	r3, [r6, #8]
 801023a:	2b02      	cmp	r3, #2
 801023c:	d011      	beq.n	8010262 <uxr_serialize_CREATE_Payload+0x102>
 801023e:	2b03      	cmp	r3, #3
 8010240:	d015      	beq.n	801026e <uxr_serialize_CREATE_Payload+0x10e>
 8010242:	2b01      	cmp	r3, #1
 8010244:	d00d      	beq.n	8010262 <uxr_serialize_CREATE_Payload+0x102>
 8010246:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801024a:	4638      	mov	r0, r7
 801024c:	f7f9 f86c 	bl	8009328 <ucdr_serialize_int16_t>
 8010250:	4028      	ands	r0, r5
 8010252:	4004      	ands	r4, r0
 8010254:	e7a6      	b.n	80101a4 <uxr_serialize_CREATE_Payload+0x44>
 8010256:	68f1      	ldr	r1, [r6, #12]
 8010258:	4638      	mov	r0, r7
 801025a:	f004 fcf5 	bl	8014c48 <ucdr_serialize_string>
 801025e:	4605      	mov	r5, r0
 8010260:	e7cd      	b.n	80101fe <uxr_serialize_CREATE_Payload+0x9e>
 8010262:	68f1      	ldr	r1, [r6, #12]
 8010264:	4638      	mov	r0, r7
 8010266:	f004 fcef 	bl	8014c48 <ucdr_serialize_string>
 801026a:	4605      	mov	r5, r0
 801026c:	e7eb      	b.n	8010246 <uxr_serialize_CREATE_Payload+0xe6>
 801026e:	68f2      	ldr	r2, [r6, #12]
 8010270:	f106 0110 	add.w	r1, r6, #16
 8010274:	4638      	mov	r0, r7
 8010276:	f004 fcbb 	bl	8014bf0 <ucdr_serialize_sequence_uint8_t>
 801027a:	4605      	mov	r5, r0
 801027c:	e7e3      	b.n	8010246 <uxr_serialize_CREATE_Payload+0xe6>
 801027e:	bf00      	nop

08010280 <uxr_deserialize_GET_INFO_Payload>:
 8010280:	b570      	push	{r4, r5, r6, lr}
 8010282:	2202      	movs	r2, #2
 8010284:	4605      	mov	r5, r0
 8010286:	460e      	mov	r6, r1
 8010288:	f004 fc22 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 801028c:	2202      	movs	r2, #2
 801028e:	18b1      	adds	r1, r6, r2
 8010290:	4604      	mov	r4, r0
 8010292:	4628      	mov	r0, r5
 8010294:	f004 fc1c 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8010298:	1d31      	adds	r1, r6, #4
 801029a:	4004      	ands	r4, r0
 801029c:	4628      	mov	r0, r5
 801029e:	f7f8 fe4d 	bl	8008f3c <ucdr_deserialize_uint32_t>
 80102a2:	b2e4      	uxtb	r4, r4
 80102a4:	4020      	ands	r0, r4
 80102a6:	bd70      	pop	{r4, r5, r6, pc}

080102a8 <uxr_serialize_DELETE_Payload>:
 80102a8:	b570      	push	{r4, r5, r6, lr}
 80102aa:	2202      	movs	r2, #2
 80102ac:	4605      	mov	r5, r0
 80102ae:	460e      	mov	r6, r1
 80102b0:	f004 fbaa 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 80102b4:	2202      	movs	r2, #2
 80102b6:	4604      	mov	r4, r0
 80102b8:	18b1      	adds	r1, r6, r2
 80102ba:	4628      	mov	r0, r5
 80102bc:	f004 fba4 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 80102c0:	4020      	ands	r0, r4
 80102c2:	b2c0      	uxtb	r0, r0
 80102c4:	bd70      	pop	{r4, r5, r6, pc}
 80102c6:	bf00      	nop

080102c8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80102c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102cc:	4605      	mov	r5, r0
 80102ce:	460e      	mov	r6, r1
 80102d0:	f7f8 fb04 	bl	80088dc <ucdr_deserialize_uint8_t>
 80102d4:	1c71      	adds	r1, r6, #1
 80102d6:	4604      	mov	r4, r0
 80102d8:	4628      	mov	r0, r5
 80102da:	f7f8 faff 	bl	80088dc <ucdr_deserialize_uint8_t>
 80102de:	2204      	movs	r2, #4
 80102e0:	18b1      	adds	r1, r6, r2
 80102e2:	4680      	mov	r8, r0
 80102e4:	4628      	mov	r0, r5
 80102e6:	f004 fbf3 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 80102ea:	f106 0108 	add.w	r1, r6, #8
 80102ee:	4607      	mov	r7, r0
 80102f0:	2202      	movs	r2, #2
 80102f2:	4628      	mov	r0, r5
 80102f4:	f004 fbec 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 80102f8:	ea04 0308 	and.w	r3, r4, r8
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	ea03 0407 	and.w	r4, r3, r7
 8010302:	2202      	movs	r2, #2
 8010304:	4607      	mov	r7, r0
 8010306:	f106 010a 	add.w	r1, r6, #10
 801030a:	4628      	mov	r0, r5
 801030c:	f004 fbe0 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8010310:	f106 010c 	add.w	r1, r6, #12
 8010314:	4603      	mov	r3, r0
 8010316:	4628      	mov	r0, r5
 8010318:	461d      	mov	r5, r3
 801031a:	f7f8 fab1 	bl	8008880 <ucdr_deserialize_bool>
 801031e:	403c      	ands	r4, r7
 8010320:	4025      	ands	r5, r4
 8010322:	4028      	ands	r0, r5
 8010324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010328 <uxr_deserialize_STATUS_Payload>:
 8010328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801032c:	2202      	movs	r2, #2
 801032e:	4606      	mov	r6, r0
 8010330:	460f      	mov	r7, r1
 8010332:	f004 fbcd 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8010336:	2202      	movs	r2, #2
 8010338:	18b9      	adds	r1, r7, r2
 801033a:	4605      	mov	r5, r0
 801033c:	4630      	mov	r0, r6
 801033e:	f004 fbc7 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8010342:	1d39      	adds	r1, r7, #4
 8010344:	4680      	mov	r8, r0
 8010346:	4630      	mov	r0, r6
 8010348:	f7f8 fac8 	bl	80088dc <ucdr_deserialize_uint8_t>
 801034c:	1d79      	adds	r1, r7, #5
 801034e:	4604      	mov	r4, r0
 8010350:	4630      	mov	r0, r6
 8010352:	f7f8 fac3 	bl	80088dc <ucdr_deserialize_uint8_t>
 8010356:	ea05 0508 	and.w	r5, r5, r8
 801035a:	402c      	ands	r4, r5
 801035c:	4020      	ands	r0, r4
 801035e:	b2c0      	uxtb	r0, r0
 8010360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010364 <uxr_serialize_INFO_Payload>:
 8010364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010368:	2202      	movs	r2, #2
 801036a:	460c      	mov	r4, r1
 801036c:	4605      	mov	r5, r0
 801036e:	f004 fb4b 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010372:	2202      	movs	r2, #2
 8010374:	18a1      	adds	r1, r4, r2
 8010376:	4680      	mov	r8, r0
 8010378:	4628      	mov	r0, r5
 801037a:	f004 fb45 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 801037e:	7921      	ldrb	r1, [r4, #4]
 8010380:	4607      	mov	r7, r0
 8010382:	4628      	mov	r0, r5
 8010384:	f7f8 fa94 	bl	80088b0 <ucdr_serialize_uint8_t>
 8010388:	7961      	ldrb	r1, [r4, #5]
 801038a:	4606      	mov	r6, r0
 801038c:	4628      	mov	r0, r5
 801038e:	f7f8 fa8f 	bl	80088b0 <ucdr_serialize_uint8_t>
 8010392:	ea08 0807 	and.w	r8, r8, r7
 8010396:	ea06 0608 	and.w	r6, r6, r8
 801039a:	4006      	ands	r6, r0
 801039c:	7a21      	ldrb	r1, [r4, #8]
 801039e:	4628      	mov	r0, r5
 80103a0:	f7f8 fa58 	bl	8008854 <ucdr_serialize_bool>
 80103a4:	7a23      	ldrb	r3, [r4, #8]
 80103a6:	b2f7      	uxtb	r7, r6
 80103a8:	4606      	mov	r6, r0
 80103aa:	b96b      	cbnz	r3, 80103c8 <uxr_serialize_INFO_Payload+0x64>
 80103ac:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80103b0:	4628      	mov	r0, r5
 80103b2:	f7f8 fa4f 	bl	8008854 <ucdr_serialize_bool>
 80103b6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80103ba:	4030      	ands	r0, r6
 80103bc:	b2c6      	uxtb	r6, r0
 80103be:	b983      	cbnz	r3, 80103e2 <uxr_serialize_INFO_Payload+0x7e>
 80103c0:	ea06 0007 	and.w	r0, r6, r7
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c8:	7b21      	ldrb	r1, [r4, #12]
 80103ca:	4628      	mov	r0, r5
 80103cc:	f7f8 fa70 	bl	80088b0 <ucdr_serialize_uint8_t>
 80103d0:	b188      	cbz	r0, 80103f6 <uxr_serialize_INFO_Payload+0x92>
 80103d2:	f104 010c 	add.w	r1, r4, #12
 80103d6:	4628      	mov	r0, r5
 80103d8:	f7ff f9d2 	bl	800f780 <uxr_serialize_ObjectVariant.part.0>
 80103dc:	4030      	ands	r0, r6
 80103de:	b2c6      	uxtb	r6, r0
 80103e0:	e7e4      	b.n	80103ac <uxr_serialize_INFO_Payload+0x48>
 80103e2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80103e6:	4628      	mov	r0, r5
 80103e8:	f7ff fdb2 	bl	800ff50 <uxr_serialize_ActivityInfoVariant>
 80103ec:	4006      	ands	r6, r0
 80103ee:	ea06 0007 	and.w	r0, r6, r7
 80103f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f6:	4606      	mov	r6, r0
 80103f8:	e7d8      	b.n	80103ac <uxr_serialize_INFO_Payload+0x48>
 80103fa:	bf00      	nop

080103fc <uxr_serialize_READ_DATA_Payload>:
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	2202      	movs	r2, #2
 8010400:	4605      	mov	r5, r0
 8010402:	460e      	mov	r6, r1
 8010404:	f004 fb00 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010408:	2202      	movs	r2, #2
 801040a:	18b1      	adds	r1, r6, r2
 801040c:	4604      	mov	r4, r0
 801040e:	4628      	mov	r0, r5
 8010410:	f004 fafa 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010414:	1d31      	adds	r1, r6, #4
 8010416:	4004      	ands	r4, r0
 8010418:	4628      	mov	r0, r5
 801041a:	f7ff fe5d 	bl	80100d8 <uxr_serialize_ReadSpecification>
 801041e:	b2e4      	uxtb	r4, r4
 8010420:	4020      	ands	r0, r4
 8010422:	bd70      	pop	{r4, r5, r6, pc}

08010424 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	2202      	movs	r2, #2
 8010428:	4605      	mov	r5, r0
 801042a:	460e      	mov	r6, r1
 801042c:	f004 faec 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010430:	2202      	movs	r2, #2
 8010432:	4604      	mov	r4, r0
 8010434:	18b1      	adds	r1, r6, r2
 8010436:	4628      	mov	r0, r5
 8010438:	f004 fae6 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 801043c:	4020      	ands	r0, r4
 801043e:	b2c0      	uxtb	r0, r0
 8010440:	bd70      	pop	{r4, r5, r6, pc}
 8010442:	bf00      	nop

08010444 <uxr_serialize_ACKNACK_Payload>:
 8010444:	b570      	push	{r4, r5, r6, lr}
 8010446:	460c      	mov	r4, r1
 8010448:	460e      	mov	r6, r1
 801044a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801044e:	4605      	mov	r5, r0
 8010450:	f7f8 fa5a 	bl	8008908 <ucdr_serialize_uint16_t>
 8010454:	2202      	movs	r2, #2
 8010456:	4621      	mov	r1, r4
 8010458:	4604      	mov	r4, r0
 801045a:	4628      	mov	r0, r5
 801045c:	f004 fad4 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010460:	7931      	ldrb	r1, [r6, #4]
 8010462:	4004      	ands	r4, r0
 8010464:	4628      	mov	r0, r5
 8010466:	f7f8 fa23 	bl	80088b0 <ucdr_serialize_uint8_t>
 801046a:	b2e4      	uxtb	r4, r4
 801046c:	4020      	ands	r0, r4
 801046e:	bd70      	pop	{r4, r5, r6, pc}

08010470 <uxr_deserialize_ACKNACK_Payload>:
 8010470:	b570      	push	{r4, r5, r6, lr}
 8010472:	4605      	mov	r5, r0
 8010474:	460e      	mov	r6, r1
 8010476:	f7f8 fb47 	bl	8008b08 <ucdr_deserialize_uint16_t>
 801047a:	2202      	movs	r2, #2
 801047c:	18b1      	adds	r1, r6, r2
 801047e:	4604      	mov	r4, r0
 8010480:	4628      	mov	r0, r5
 8010482:	f004 fb25 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8010486:	1d31      	adds	r1, r6, #4
 8010488:	4004      	ands	r4, r0
 801048a:	4628      	mov	r0, r5
 801048c:	f7f8 fa26 	bl	80088dc <ucdr_deserialize_uint8_t>
 8010490:	b2e4      	uxtb	r4, r4
 8010492:	4020      	ands	r0, r4
 8010494:	bd70      	pop	{r4, r5, r6, pc}
 8010496:	bf00      	nop

08010498 <uxr_serialize_HEARTBEAT_Payload>:
 8010498:	b570      	push	{r4, r5, r6, lr}
 801049a:	460d      	mov	r5, r1
 801049c:	8809      	ldrh	r1, [r1, #0]
 801049e:	4606      	mov	r6, r0
 80104a0:	f7f8 fa32 	bl	8008908 <ucdr_serialize_uint16_t>
 80104a4:	8869      	ldrh	r1, [r5, #2]
 80104a6:	4604      	mov	r4, r0
 80104a8:	4630      	mov	r0, r6
 80104aa:	f7f8 fa2d 	bl	8008908 <ucdr_serialize_uint16_t>
 80104ae:	7929      	ldrb	r1, [r5, #4]
 80104b0:	4004      	ands	r4, r0
 80104b2:	4630      	mov	r0, r6
 80104b4:	f7f8 f9fc 	bl	80088b0 <ucdr_serialize_uint8_t>
 80104b8:	b2e4      	uxtb	r4, r4
 80104ba:	4020      	ands	r0, r4
 80104bc:	bd70      	pop	{r4, r5, r6, pc}
 80104be:	bf00      	nop

080104c0 <uxr_deserialize_HEARTBEAT_Payload>:
 80104c0:	b570      	push	{r4, r5, r6, lr}
 80104c2:	4605      	mov	r5, r0
 80104c4:	460e      	mov	r6, r1
 80104c6:	f7f8 fb1f 	bl	8008b08 <ucdr_deserialize_uint16_t>
 80104ca:	1cb1      	adds	r1, r6, #2
 80104cc:	4604      	mov	r4, r0
 80104ce:	4628      	mov	r0, r5
 80104d0:	f7f8 fb1a 	bl	8008b08 <ucdr_deserialize_uint16_t>
 80104d4:	1d31      	adds	r1, r6, #4
 80104d6:	4004      	ands	r4, r0
 80104d8:	4628      	mov	r0, r5
 80104da:	f7f8 f9ff 	bl	80088dc <ucdr_deserialize_uint8_t>
 80104de:	b2e4      	uxtb	r4, r4
 80104e0:	4020      	ands	r0, r4
 80104e2:	bd70      	pop	{r4, r5, r6, pc}

080104e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80104e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e8:	4605      	mov	r5, r0
 80104ea:	460e      	mov	r6, r1
 80104ec:	f7f9 f8a8 	bl	8009640 <ucdr_deserialize_int32_t>
 80104f0:	1d31      	adds	r1, r6, #4
 80104f2:	4607      	mov	r7, r0
 80104f4:	4628      	mov	r0, r5
 80104f6:	f7f8 fd21 	bl	8008f3c <ucdr_deserialize_uint32_t>
 80104fa:	f106 0108 	add.w	r1, r6, #8
 80104fe:	4680      	mov	r8, r0
 8010500:	4628      	mov	r0, r5
 8010502:	f7f9 f89d 	bl	8009640 <ucdr_deserialize_int32_t>
 8010506:	f106 010c 	add.w	r1, r6, #12
 801050a:	4604      	mov	r4, r0
 801050c:	4628      	mov	r0, r5
 801050e:	f7f8 fd15 	bl	8008f3c <ucdr_deserialize_uint32_t>
 8010512:	ea07 0708 	and.w	r7, r7, r8
 8010516:	403c      	ands	r4, r7
 8010518:	f106 0110 	add.w	r1, r6, #16
 801051c:	4004      	ands	r4, r0
 801051e:	4628      	mov	r0, r5
 8010520:	f7f9 f88e 	bl	8009640 <ucdr_deserialize_int32_t>
 8010524:	f106 0114 	add.w	r1, r6, #20
 8010528:	4607      	mov	r7, r0
 801052a:	4628      	mov	r0, r5
 801052c:	f7f8 fd06 	bl	8008f3c <ucdr_deserialize_uint32_t>
 8010530:	b2e4      	uxtb	r4, r4
 8010532:	403c      	ands	r4, r7
 8010534:	4020      	ands	r0, r4
 8010536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801053a:	bf00      	nop

0801053c <uxr_serialize_SampleIdentity>:
 801053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010540:	220c      	movs	r2, #12
 8010542:	4604      	mov	r4, r0
 8010544:	460d      	mov	r5, r1
 8010546:	f004 fa5f 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 801054a:	2203      	movs	r2, #3
 801054c:	f105 010c 	add.w	r1, r5, #12
 8010550:	4607      	mov	r7, r0
 8010552:	4620      	mov	r0, r4
 8010554:	f004 fa58 	bl	8014a08 <ucdr_serialize_array_uint8_t>
 8010558:	7be9      	ldrb	r1, [r5, #15]
 801055a:	4680      	mov	r8, r0
 801055c:	4620      	mov	r0, r4
 801055e:	f7f8 f9a7 	bl	80088b0 <ucdr_serialize_uint8_t>
 8010562:	6929      	ldr	r1, [r5, #16]
 8010564:	4606      	mov	r6, r0
 8010566:	4620      	mov	r0, r4
 8010568:	f7f8 ffd2 	bl	8009510 <ucdr_serialize_int32_t>
 801056c:	6969      	ldr	r1, [r5, #20]
 801056e:	4603      	mov	r3, r0
 8010570:	4620      	mov	r0, r4
 8010572:	ea07 0708 	and.w	r7, r7, r8
 8010576:	461c      	mov	r4, r3
 8010578:	f7f8 fbb0 	bl	8008cdc <ucdr_serialize_uint32_t>
 801057c:	403e      	ands	r6, r7
 801057e:	4034      	ands	r4, r6
 8010580:	4020      	ands	r0, r4
 8010582:	b2c0      	uxtb	r0, r0
 8010584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010588 <uxr_deserialize_SampleIdentity>:
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	220c      	movs	r2, #12
 801058e:	4604      	mov	r4, r0
 8010590:	460d      	mov	r5, r1
 8010592:	f004 fa9d 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8010596:	2203      	movs	r2, #3
 8010598:	f105 010c 	add.w	r1, r5, #12
 801059c:	4607      	mov	r7, r0
 801059e:	4620      	mov	r0, r4
 80105a0:	f004 fa96 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 80105a4:	f105 010f 	add.w	r1, r5, #15
 80105a8:	4680      	mov	r8, r0
 80105aa:	4620      	mov	r0, r4
 80105ac:	f7f8 f996 	bl	80088dc <ucdr_deserialize_uint8_t>
 80105b0:	f105 0110 	add.w	r1, r5, #16
 80105b4:	4606      	mov	r6, r0
 80105b6:	4620      	mov	r0, r4
 80105b8:	f7f9 f842 	bl	8009640 <ucdr_deserialize_int32_t>
 80105bc:	f105 0114 	add.w	r1, r5, #20
 80105c0:	4603      	mov	r3, r0
 80105c2:	4620      	mov	r0, r4
 80105c4:	ea07 0708 	and.w	r7, r7, r8
 80105c8:	461c      	mov	r4, r3
 80105ca:	f7f8 fcb7 	bl	8008f3c <ucdr_deserialize_uint32_t>
 80105ce:	403e      	ands	r6, r7
 80105d0:	4034      	ands	r4, r6
 80105d2:	4020      	ands	r0, r4
 80105d4:	b2c0      	uxtb	r0, r0
 80105d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105da:	bf00      	nop

080105dc <rcl_client_get_rmw_handle>:
 80105dc:	b118      	cbz	r0, 80105e6 <rcl_client_get_rmw_handle+0xa>
 80105de:	6800      	ldr	r0, [r0, #0]
 80105e0:	b108      	cbz	r0, 80105e6 <rcl_client_get_rmw_handle+0xa>
 80105e2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80105e6:	4770      	bx	lr

080105e8 <rcl_send_request>:
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	b1e8      	cbz	r0, 801062a <rcl_send_request+0x42>
 80105ee:	4604      	mov	r4, r0
 80105f0:	6800      	ldr	r0, [r0, #0]
 80105f2:	b1d0      	cbz	r0, 801062a <rcl_send_request+0x42>
 80105f4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80105f8:	b1bb      	cbz	r3, 801062a <rcl_send_request+0x42>
 80105fa:	460e      	mov	r6, r1
 80105fc:	b1d1      	cbz	r1, 8010634 <rcl_send_request+0x4c>
 80105fe:	4615      	mov	r5, r2
 8010600:	b1c2      	cbz	r2, 8010634 <rcl_send_request+0x4c>
 8010602:	2105      	movs	r1, #5
 8010604:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010608:	f002 ff36 	bl	8013478 <__atomic_load_8>
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	e9c5 0100 	strd	r0, r1, [r5]
 8010612:	462a      	mov	r2, r5
 8010614:	4631      	mov	r1, r6
 8010616:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801061a:	f003 fe41 	bl	80142a0 <rmw_send_request>
 801061e:	4606      	mov	r6, r0
 8010620:	b160      	cbz	r0, 801063c <rcl_send_request+0x54>
 8010622:	2601      	movs	r6, #1
 8010624:	4630      	mov	r0, r6
 8010626:	b002      	add	sp, #8
 8010628:	bd70      	pop	{r4, r5, r6, pc}
 801062a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801062e:	4630      	mov	r0, r6
 8010630:	b002      	add	sp, #8
 8010632:	bd70      	pop	{r4, r5, r6, pc}
 8010634:	260b      	movs	r6, #11
 8010636:	4630      	mov	r0, r6
 8010638:	b002      	add	sp, #8
 801063a:	bd70      	pop	{r4, r5, r6, pc}
 801063c:	6820      	ldr	r0, [r4, #0]
 801063e:	2105      	movs	r1, #5
 8010640:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010644:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010648:	9100      	str	r1, [sp, #0]
 801064a:	f002 ff81 	bl	8013550 <__atomic_exchange_8>
 801064e:	4630      	mov	r0, r6
 8010650:	b002      	add	sp, #8
 8010652:	bd70      	pop	{r4, r5, r6, pc}
 8010654:	0000      	movs	r0, r0
	...

08010658 <rcl_take_response>:
 8010658:	b570      	push	{r4, r5, r6, lr}
 801065a:	468e      	mov	lr, r1
 801065c:	460c      	mov	r4, r1
 801065e:	4616      	mov	r6, r2
 8010660:	4605      	mov	r5, r0
 8010662:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010666:	b08c      	sub	sp, #48	@ 0x30
 8010668:	f10d 0c18 	add.w	ip, sp, #24
 801066c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010670:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010674:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010678:	b35d      	cbz	r5, 80106d2 <rcl_take_response+0x7a>
 801067a:	682b      	ldr	r3, [r5, #0]
 801067c:	b34b      	cbz	r3, 80106d2 <rcl_take_response+0x7a>
 801067e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010682:	b330      	cbz	r0, 80106d2 <rcl_take_response+0x7a>
 8010684:	b346      	cbz	r6, 80106d8 <rcl_take_response+0x80>
 8010686:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80106e0 <rcl_take_response+0x88>
 801068a:	2300      	movs	r3, #0
 801068c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010690:	4632      	mov	r2, r6
 8010692:	f10d 0307 	add.w	r3, sp, #7
 8010696:	a902      	add	r1, sp, #8
 8010698:	ed8d 7b02 	vstr	d7, [sp, #8]
 801069c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80106a0:	f003 ff06 	bl	80144b0 <rmw_take_response>
 80106a4:	4605      	mov	r5, r0
 80106a6:	b9c8      	cbnz	r0, 80106dc <rcl_take_response+0x84>
 80106a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80106ac:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80106b0:	2a00      	cmp	r2, #0
 80106b2:	bf08      	it	eq
 80106b4:	461d      	moveq	r5, r3
 80106b6:	f10d 0e18 	add.w	lr, sp, #24
 80106ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80106be:	46a4      	mov	ip, r4
 80106c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80106c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80106cc:	4628      	mov	r0, r5
 80106ce:	b00c      	add	sp, #48	@ 0x30
 80106d0:	bd70      	pop	{r4, r5, r6, pc}
 80106d2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80106d6:	e7ee      	b.n	80106b6 <rcl_take_response+0x5e>
 80106d8:	250b      	movs	r5, #11
 80106da:	e7ec      	b.n	80106b6 <rcl_take_response+0x5e>
 80106dc:	2501      	movs	r5, #1
 80106de:	e7ea      	b.n	80106b6 <rcl_take_response+0x5e>
	...

080106e8 <rcl_client_is_valid>:
 80106e8:	b130      	cbz	r0, 80106f8 <rcl_client_is_valid+0x10>
 80106ea:	6800      	ldr	r0, [r0, #0]
 80106ec:	b120      	cbz	r0, 80106f8 <rcl_client_is_valid+0x10>
 80106ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80106f2:	3800      	subs	r0, #0
 80106f4:	bf18      	it	ne
 80106f6:	2001      	movne	r0, #1
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop

080106fc <rcl_convert_rmw_ret_to_rcl_ret>:
 80106fc:	280b      	cmp	r0, #11
 80106fe:	dc0d      	bgt.n	801071c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010700:	2800      	cmp	r0, #0
 8010702:	db09      	blt.n	8010718 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010704:	280b      	cmp	r0, #11
 8010706:	d807      	bhi.n	8010718 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010708:	e8df f000 	tbb	[pc, r0]
 801070c:	07060607 	.word	0x07060607
 8010710:	06060606 	.word	0x06060606
 8010714:	07070606 	.word	0x07070606
 8010718:	2001      	movs	r0, #1
 801071a:	4770      	bx	lr
 801071c:	28cb      	cmp	r0, #203	@ 0xcb
 801071e:	bf18      	it	ne
 8010720:	2001      	movne	r0, #1
 8010722:	4770      	bx	lr

08010724 <rcl_get_zero_initialized_context>:
 8010724:	4a03      	ldr	r2, [pc, #12]	@ (8010734 <rcl_get_zero_initialized_context+0x10>)
 8010726:	4603      	mov	r3, r0
 8010728:	e892 0003 	ldmia.w	r2, {r0, r1}
 801072c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010730:	4618      	mov	r0, r3
 8010732:	4770      	bx	lr
 8010734:	080180b4 	.word	0x080180b4

08010738 <rcl_context_is_valid>:
 8010738:	b118      	cbz	r0, 8010742 <rcl_context_is_valid+0xa>
 801073a:	6840      	ldr	r0, [r0, #4]
 801073c:	3800      	subs	r0, #0
 801073e:	bf18      	it	ne
 8010740:	2001      	movne	r0, #1
 8010742:	4770      	bx	lr

08010744 <__cleanup_context>:
 8010744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010748:	4606      	mov	r6, r0
 801074a:	6800      	ldr	r0, [r0, #0]
 801074c:	2300      	movs	r3, #0
 801074e:	6073      	str	r3, [r6, #4]
 8010750:	2800      	cmp	r0, #0
 8010752:	d049      	beq.n	80107e8 <__cleanup_context+0xa4>
 8010754:	6947      	ldr	r7, [r0, #20]
 8010756:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801075a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801075e:	b137      	cbz	r7, 801076e <__cleanup_context+0x2a>
 8010760:	3014      	adds	r0, #20
 8010762:	f7f9 fabf 	bl	8009ce4 <rcl_init_options_fini>
 8010766:	4607      	mov	r7, r0
 8010768:	2800      	cmp	r0, #0
 801076a:	d144      	bne.n	80107f6 <__cleanup_context+0xb2>
 801076c:	6830      	ldr	r0, [r6, #0]
 801076e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010770:	b143      	cbz	r3, 8010784 <__cleanup_context+0x40>
 8010772:	3028      	adds	r0, #40	@ 0x28
 8010774:	f7fa ff58 	bl	800b628 <rmw_context_fini>
 8010778:	b118      	cbz	r0, 8010782 <__cleanup_context+0x3e>
 801077a:	2f00      	cmp	r7, #0
 801077c:	d03e      	beq.n	80107fc <__cleanup_context+0xb8>
 801077e:	f7fa fc8b 	bl	800b098 <rcutils_reset_error>
 8010782:	6830      	ldr	r0, [r6, #0]
 8010784:	6a03      	ldr	r3, [r0, #32]
 8010786:	b1db      	cbz	r3, 80107c0 <__cleanup_context+0x7c>
 8010788:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801078c:	2a01      	cmp	r2, #1
 801078e:	f17c 0100 	sbcs.w	r1, ip, #0
 8010792:	db11      	blt.n	80107b8 <__cleanup_context+0x74>
 8010794:	2400      	movs	r4, #0
 8010796:	4625      	mov	r5, r4
 8010798:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801079c:	4649      	mov	r1, r9
 801079e:	b1b8      	cbz	r0, 80107d0 <__cleanup_context+0x8c>
 80107a0:	47c0      	blx	r8
 80107a2:	6833      	ldr	r3, [r6, #0]
 80107a4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80107a8:	3401      	adds	r4, #1
 80107aa:	f145 0500 	adc.w	r5, r5, #0
 80107ae:	4294      	cmp	r4, r2
 80107b0:	eb75 010c 	sbcs.w	r1, r5, ip
 80107b4:	6a1b      	ldr	r3, [r3, #32]
 80107b6:	dbef      	blt.n	8010798 <__cleanup_context+0x54>
 80107b8:	4618      	mov	r0, r3
 80107ba:	4649      	mov	r1, r9
 80107bc:	47c0      	blx	r8
 80107be:	6830      	ldr	r0, [r6, #0]
 80107c0:	4649      	mov	r1, r9
 80107c2:	47c0      	blx	r8
 80107c4:	2300      	movs	r3, #0
 80107c6:	e9c6 3300 	strd	r3, r3, [r6]
 80107ca:	4638      	mov	r0, r7
 80107cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107d0:	3401      	adds	r4, #1
 80107d2:	f145 0500 	adc.w	r5, r5, #0
 80107d6:	4294      	cmp	r4, r2
 80107d8:	eb75 010c 	sbcs.w	r1, r5, ip
 80107dc:	dbdc      	blt.n	8010798 <__cleanup_context+0x54>
 80107de:	4618      	mov	r0, r3
 80107e0:	4649      	mov	r1, r9
 80107e2:	47c0      	blx	r8
 80107e4:	6830      	ldr	r0, [r6, #0]
 80107e6:	e7eb      	b.n	80107c0 <__cleanup_context+0x7c>
 80107e8:	4607      	mov	r7, r0
 80107ea:	2300      	movs	r3, #0
 80107ec:	e9c6 3300 	strd	r3, r3, [r6]
 80107f0:	4638      	mov	r0, r7
 80107f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107f6:	f7fa fc4f 	bl	800b098 <rcutils_reset_error>
 80107fa:	e7b7      	b.n	801076c <__cleanup_context+0x28>
 80107fc:	f7ff ff7e 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 8010800:	4607      	mov	r7, r0
 8010802:	e7bc      	b.n	801077e <__cleanup_context+0x3a>

08010804 <rcl_init>:
 8010804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010808:	1e05      	subs	r5, r0, #0
 801080a:	b09e      	sub	sp, #120	@ 0x78
 801080c:	460e      	mov	r6, r1
 801080e:	4690      	mov	r8, r2
 8010810:	461f      	mov	r7, r3
 8010812:	f340 809c 	ble.w	801094e <rcl_init+0x14a>
 8010816:	2900      	cmp	r1, #0
 8010818:	f000 809c 	beq.w	8010954 <rcl_init+0x150>
 801081c:	f1a1 0e04 	sub.w	lr, r1, #4
 8010820:	f04f 0c00 	mov.w	ip, #0
 8010824:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8010828:	f10c 0c01 	add.w	ip, ip, #1
 801082c:	2c00      	cmp	r4, #0
 801082e:	f000 8091 	beq.w	8010954 <rcl_init+0x150>
 8010832:	4565      	cmp	r5, ip
 8010834:	d1f6      	bne.n	8010824 <rcl_init+0x20>
 8010836:	f1b8 0f00 	cmp.w	r8, #0
 801083a:	f000 808b 	beq.w	8010954 <rcl_init+0x150>
 801083e:	f8d8 4000 	ldr.w	r4, [r8]
 8010842:	2c00      	cmp	r4, #0
 8010844:	f000 8086 	beq.w	8010954 <rcl_init+0x150>
 8010848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801084a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801084e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010852:	6823      	ldr	r3, [r4, #0]
 8010854:	f8cc 3000 	str.w	r3, [ip]
 8010858:	a819      	add	r0, sp, #100	@ 0x64
 801085a:	f7fa fbf7 	bl	800b04c <rcutils_allocator_is_valid>
 801085e:	2800      	cmp	r0, #0
 8010860:	d078      	beq.n	8010954 <rcl_init+0x150>
 8010862:	2f00      	cmp	r7, #0
 8010864:	d076      	beq.n	8010954 <rcl_init+0x150>
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d178      	bne.n	801095e <rcl_init+0x15a>
 801086c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8010870:	2178      	movs	r1, #120	@ 0x78
 8010872:	2001      	movs	r0, #1
 8010874:	4798      	blx	r3
 8010876:	4604      	mov	r4, r0
 8010878:	6038      	str	r0, [r7, #0]
 801087a:	2800      	cmp	r0, #0
 801087c:	f000 80b6 	beq.w	80109ec <rcl_init+0x1e8>
 8010880:	a802      	add	r0, sp, #8
 8010882:	f003 f949 	bl	8013b18 <rmw_get_zero_initialized_context>
 8010886:	a902      	add	r1, sp, #8
 8010888:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801088c:	2250      	movs	r2, #80	@ 0x50
 801088e:	ac19      	add	r4, sp, #100	@ 0x64
 8010890:	f005 ffe5 	bl	801685e <memcpy>
 8010894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010896:	f8d7 e000 	ldr.w	lr, [r7]
 801089a:	46f4      	mov	ip, lr
 801089c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	f8cc 3000 	str.w	r3, [ip]
 80108a6:	f10e 0114 	add.w	r1, lr, #20
 80108aa:	4640      	mov	r0, r8
 80108ac:	f7f9 fa44 	bl	8009d38 <rcl_init_options_copy>
 80108b0:	4604      	mov	r4, r0
 80108b2:	2800      	cmp	r0, #0
 80108b4:	d144      	bne.n	8010940 <rcl_init+0x13c>
 80108b6:	f8d7 9000 	ldr.w	r9, [r7]
 80108ba:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80108be:	f8c9 0020 	str.w	r0, [r9, #32]
 80108c2:	f8c9 5018 	str.w	r5, [r9, #24]
 80108c6:	f8c9 801c 	str.w	r8, [r9, #28]
 80108ca:	2d00      	cmp	r5, #0
 80108cc:	d04e      	beq.n	801096c <rcl_init+0x168>
 80108ce:	2e00      	cmp	r6, #0
 80108d0:	d04c      	beq.n	801096c <rcl_init+0x168>
 80108d2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80108d6:	2104      	movs	r1, #4
 80108d8:	4628      	mov	r0, r5
 80108da:	4798      	blx	r3
 80108dc:	f8c9 0020 	str.w	r0, [r9, #32]
 80108e0:	f8d7 9000 	ldr.w	r9, [r7]
 80108e4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80108e8:	46ca      	mov	sl, r9
 80108ea:	b343      	cbz	r3, 801093e <rcl_init+0x13a>
 80108ec:	2d01      	cmp	r5, #1
 80108ee:	f178 0300 	sbcs.w	r3, r8, #0
 80108f2:	db3b      	blt.n	801096c <rcl_init+0x168>
 80108f4:	2400      	movs	r4, #0
 80108f6:	3e04      	subs	r6, #4
 80108f8:	46a1      	mov	r9, r4
 80108fa:	e00b      	b.n	8010914 <rcl_init+0x110>
 80108fc:	6831      	ldr	r1, [r6, #0]
 80108fe:	f005 ffae 	bl	801685e <memcpy>
 8010902:	3401      	adds	r4, #1
 8010904:	f149 0900 	adc.w	r9, r9, #0
 8010908:	45c8      	cmp	r8, r9
 801090a:	bf08      	it	eq
 801090c:	42a5      	cmpeq	r5, r4
 801090e:	d02b      	beq.n	8010968 <rcl_init+0x164>
 8010910:	f8d7 a000 	ldr.w	sl, [r7]
 8010914:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8010918:	f7ef fc8c 	bl	8000234 <strlen>
 801091c:	1c42      	adds	r2, r0, #1
 801091e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010920:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8010922:	f8da a020 	ldr.w	sl, [sl, #32]
 8010926:	9201      	str	r2, [sp, #4]
 8010928:	4610      	mov	r0, r2
 801092a:	4798      	blx	r3
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8010932:	6a1b      	ldr	r3, [r3, #32]
 8010934:	9a01      	ldr	r2, [sp, #4]
 8010936:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801093a:	2800      	cmp	r0, #0
 801093c:	d1de      	bne.n	80108fc <rcl_init+0xf8>
 801093e:	240a      	movs	r4, #10
 8010940:	4638      	mov	r0, r7
 8010942:	f7ff feff 	bl	8010744 <__cleanup_context>
 8010946:	4620      	mov	r0, r4
 8010948:	b01e      	add	sp, #120	@ 0x78
 801094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801094e:	2900      	cmp	r1, #0
 8010950:	f43f af71 	beq.w	8010836 <rcl_init+0x32>
 8010954:	240b      	movs	r4, #11
 8010956:	4620      	mov	r0, r4
 8010958:	b01e      	add	sp, #120	@ 0x78
 801095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801095e:	2464      	movs	r4, #100	@ 0x64
 8010960:	4620      	mov	r0, r4
 8010962:	b01e      	add	sp, #120	@ 0x78
 8010964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010968:	f8d7 9000 	ldr.w	r9, [r7]
 801096c:	4926      	ldr	r1, [pc, #152]	@ (8010a08 <rcl_init+0x204>)
 801096e:	680b      	ldr	r3, [r1, #0]
 8010970:	3301      	adds	r3, #1
 8010972:	d036      	beq.n	80109e2 <rcl_init+0x1de>
 8010974:	600b      	str	r3, [r1, #0]
 8010976:	461a      	mov	r2, r3
 8010978:	2400      	movs	r4, #0
 801097a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801097e:	607b      	str	r3, [r7, #4]
 8010980:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010982:	3301      	adds	r3, #1
 8010984:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8010988:	d034      	beq.n	80109f4 <rcl_init+0x1f0>
 801098a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801098e:	b93b      	cbnz	r3, 80109a0 <rcl_init+0x19c>
 8010990:	3030      	adds	r0, #48	@ 0x30
 8010992:	f000 f83b 	bl	8010a0c <rcl_get_localhost_only>
 8010996:	4604      	mov	r4, r0
 8010998:	2800      	cmp	r0, #0
 801099a:	d1d1      	bne.n	8010940 <rcl_init+0x13c>
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	6958      	ldr	r0, [r3, #20]
 80109a0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80109a2:	aa18      	add	r2, sp, #96	@ 0x60
 80109a4:	a917      	add	r1, sp, #92	@ 0x5c
 80109a6:	f001 fa01 	bl	8011dac <rcl_validate_enclave_name>
 80109aa:	4604      	mov	r4, r0
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d1c7      	bne.n	8010940 <rcl_init+0x13c>
 80109b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80109b2:	b9eb      	cbnz	r3, 80109f0 <rcl_init+0x1ec>
 80109b4:	6839      	ldr	r1, [r7, #0]
 80109b6:	694b      	ldr	r3, [r1, #20]
 80109b8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80109ba:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80109be:	f000 fb3f 	bl	8011040 <rcl_get_security_options_from_environment>
 80109c2:	4604      	mov	r4, r0
 80109c4:	2800      	cmp	r0, #0
 80109c6:	d1bb      	bne.n	8010940 <rcl_init+0x13c>
 80109c8:	6839      	ldr	r1, [r7, #0]
 80109ca:	6948      	ldr	r0, [r1, #20]
 80109cc:	3128      	adds	r1, #40	@ 0x28
 80109ce:	3018      	adds	r0, #24
 80109d0:	f7fa fcf4 	bl	800b3bc <rmw_init>
 80109d4:	4604      	mov	r4, r0
 80109d6:	2800      	cmp	r0, #0
 80109d8:	d0bd      	beq.n	8010956 <rcl_init+0x152>
 80109da:	f7ff fe8f 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 80109de:	4604      	mov	r4, r0
 80109e0:	e7ae      	b.n	8010940 <rcl_init+0x13c>
 80109e2:	2201      	movs	r2, #1
 80109e4:	461c      	mov	r4, r3
 80109e6:	600a      	str	r2, [r1, #0]
 80109e8:	4613      	mov	r3, r2
 80109ea:	e7c6      	b.n	801097a <rcl_init+0x176>
 80109ec:	240a      	movs	r4, #10
 80109ee:	e7b2      	b.n	8010956 <rcl_init+0x152>
 80109f0:	2401      	movs	r4, #1
 80109f2:	e7a5      	b.n	8010940 <rcl_init+0x13c>
 80109f4:	3024      	adds	r0, #36	@ 0x24
 80109f6:	f004 fea7 	bl	8015748 <rcl_get_default_domain_id>
 80109fa:	4604      	mov	r4, r0
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d19f      	bne.n	8010940 <rcl_init+0x13c>
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	6958      	ldr	r0, [r3, #20]
 8010a04:	e7c1      	b.n	801098a <rcl_init+0x186>
 8010a06:	bf00      	nop
 8010a08:	2000adc8 	.word	0x2000adc8

08010a0c <rcl_get_localhost_only>:
 8010a0c:	b510      	push	{r4, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	2300      	movs	r3, #0
 8010a12:	9301      	str	r3, [sp, #4]
 8010a14:	b1b8      	cbz	r0, 8010a46 <rcl_get_localhost_only+0x3a>
 8010a16:	4604      	mov	r4, r0
 8010a18:	a901      	add	r1, sp, #4
 8010a1a:	480c      	ldr	r0, [pc, #48]	@ (8010a4c <rcl_get_localhost_only+0x40>)
 8010a1c:	f002 fdd0 	bl	80135c0 <rcutils_get_env>
 8010a20:	b110      	cbz	r0, 8010a28 <rcl_get_localhost_only+0x1c>
 8010a22:	2001      	movs	r0, #1
 8010a24:	b002      	add	sp, #8
 8010a26:	bd10      	pop	{r4, pc}
 8010a28:	9b01      	ldr	r3, [sp, #4]
 8010a2a:	b113      	cbz	r3, 8010a32 <rcl_get_localhost_only+0x26>
 8010a2c:	781a      	ldrb	r2, [r3, #0]
 8010a2e:	2a31      	cmp	r2, #49	@ 0x31
 8010a30:	d004      	beq.n	8010a3c <rcl_get_localhost_only+0x30>
 8010a32:	2302      	movs	r3, #2
 8010a34:	2000      	movs	r0, #0
 8010a36:	7023      	strb	r3, [r4, #0]
 8010a38:	b002      	add	sp, #8
 8010a3a:	bd10      	pop	{r4, pc}
 8010a3c:	785b      	ldrb	r3, [r3, #1]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1f7      	bne.n	8010a32 <rcl_get_localhost_only+0x26>
 8010a42:	2301      	movs	r3, #1
 8010a44:	e7f6      	b.n	8010a34 <rcl_get_localhost_only+0x28>
 8010a46:	200b      	movs	r0, #11
 8010a48:	b002      	add	sp, #8
 8010a4a:	bd10      	pop	{r4, pc}
 8010a4c:	080180bc 	.word	0x080180bc

08010a50 <rcl_get_zero_initialized_node>:
 8010a50:	4a03      	ldr	r2, [pc, #12]	@ (8010a60 <rcl_get_zero_initialized_node+0x10>)
 8010a52:	4603      	mov	r3, r0
 8010a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a58:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	4770      	bx	lr
 8010a60:	080180d8 	.word	0x080180d8

08010a64 <rcl_node_init>:
 8010a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a68:	b0a9      	sub	sp, #164	@ 0xa4
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8010a70:	a823      	add	r0, sp, #140	@ 0x8c
 8010a72:	460e      	mov	r6, r1
 8010a74:	4615      	mov	r5, r2
 8010a76:	461f      	mov	r7, r3
 8010a78:	f005 f8da 	bl	8015c30 <rcl_guard_condition_get_default_options>
 8010a7c:	f1b8 0f00 	cmp.w	r8, #0
 8010a80:	f000 80e6 	beq.w	8010c50 <rcl_node_init+0x1ec>
 8010a84:	4640      	mov	r0, r8
 8010a86:	f7fa fae1 	bl	800b04c <rcutils_allocator_is_valid>
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	f000 80e0 	beq.w	8010c50 <rcl_node_init+0x1ec>
 8010a90:	2e00      	cmp	r6, #0
 8010a92:	f000 80dd 	beq.w	8010c50 <rcl_node_init+0x1ec>
 8010a96:	2d00      	cmp	r5, #0
 8010a98:	f000 80da 	beq.w	8010c50 <rcl_node_init+0x1ec>
 8010a9c:	2c00      	cmp	r4, #0
 8010a9e:	f000 80d7 	beq.w	8010c50 <rcl_node_init+0x1ec>
 8010aa2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010aa6:	f1b9 0f00 	cmp.w	r9, #0
 8010aaa:	f040 80fd 	bne.w	8010ca8 <rcl_node_init+0x244>
 8010aae:	2f00      	cmp	r7, #0
 8010ab0:	f000 80ce 	beq.w	8010c50 <rcl_node_init+0x1ec>
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f7ff fe3f 	bl	8010738 <rcl_context_is_valid>
 8010aba:	4682      	mov	sl, r0
 8010abc:	2800      	cmp	r0, #0
 8010abe:	f000 80cd 	beq.w	8010c5c <rcl_node_init+0x1f8>
 8010ac2:	464a      	mov	r2, r9
 8010ac4:	a922      	add	r1, sp, #136	@ 0x88
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8010acc:	f003 f9c2 	bl	8013e54 <rmw_validate_node_name>
 8010ad0:	4681      	mov	r9, r0
 8010ad2:	2800      	cmp	r0, #0
 8010ad4:	f040 80be 	bne.w	8010c54 <rcl_node_init+0x1f0>
 8010ad8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010ada:	2800      	cmp	r0, #0
 8010adc:	f040 80f0 	bne.w	8010cc0 <rcl_node_init+0x25c>
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	f7ef fba7 	bl	8000234 <strlen>
 8010ae6:	2800      	cmp	r0, #0
 8010ae8:	f040 80bb 	bne.w	8010c62 <rcl_node_init+0x1fe>
 8010aec:	4d7c      	ldr	r5, [pc, #496]	@ (8010ce0 <rcl_node_init+0x27c>)
 8010aee:	a922      	add	r1, sp, #136	@ 0x88
 8010af0:	2200      	movs	r2, #0
 8010af2:	4628      	mov	r0, r5
 8010af4:	f003 f990 	bl	8013e18 <rmw_validate_namespace>
 8010af8:	4681      	mov	r9, r0
 8010afa:	2800      	cmp	r0, #0
 8010afc:	f040 80aa 	bne.w	8010c54 <rcl_node_init+0x1f0>
 8010b00:	4682      	mov	sl, r0
 8010b02:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8010b04:	2800      	cmp	r0, #0
 8010b06:	f040 80e0 	bne.w	8010cca <rcl_node_init+0x266>
 8010b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8010b0e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010b12:	2078      	movs	r0, #120	@ 0x78
 8010b14:	4798      	blx	r3
 8010b16:	4681      	mov	r9, r0
 8010b18:	6060      	str	r0, [r4, #4]
 8010b1a:	2800      	cmp	r0, #0
 8010b1c:	f000 80ca 	beq.w	8010cb4 <rcl_node_init+0x250>
 8010b20:	2200      	movs	r2, #0
 8010b22:	2300      	movs	r3, #0
 8010b24:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8010b28:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8010b2c:	a808      	add	r0, sp, #32
 8010b2e:	f000 f907 	bl	8010d40 <rcl_node_get_default_options>
 8010b32:	a908      	add	r1, sp, #32
 8010b34:	4648      	mov	r0, r9
 8010b36:	2268      	movs	r2, #104	@ 0x68
 8010b38:	f005 fe91 	bl	801685e <memcpy>
 8010b3c:	6861      	ldr	r1, [r4, #4]
 8010b3e:	6027      	str	r7, [r4, #0]
 8010b40:	4640      	mov	r0, r8
 8010b42:	f000 f90b 	bl	8010d5c <rcl_node_options_copy>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d158      	bne.n	8010bfc <rcl_node_init+0x198>
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f7ef fb72 	bl	8000234 <strlen>
 8010b50:	4428      	add	r0, r5
 8010b52:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010b56:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010b5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8010b5c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010b60:	9300      	str	r3, [sp, #0]
 8010b62:	bf0c      	ite	eq
 8010b64:	4b5f      	ldreq	r3, [pc, #380]	@ (8010ce4 <rcl_node_init+0x280>)
 8010b66:	4b60      	ldrne	r3, [pc, #384]	@ (8010ce8 <rcl_node_init+0x284>)
 8010b68:	9302      	str	r3, [sp, #8]
 8010b6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010b6e:	9301      	str	r3, [sp, #4]
 8010b70:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010b74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010b78:	f002 fd4a 	bl	8013610 <rcutils_format_string_limit>
 8010b7c:	6823      	ldr	r3, [r4, #0]
 8010b7e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8010b82:	6818      	ldr	r0, [r3, #0]
 8010b84:	4631      	mov	r1, r6
 8010b86:	3028      	adds	r0, #40	@ 0x28
 8010b88:	462a      	mov	r2, r5
 8010b8a:	6866      	ldr	r6, [r4, #4]
 8010b8c:	f7fa fdf8 	bl	800b780 <rmw_create_node>
 8010b90:	6863      	ldr	r3, [r4, #4]
 8010b92:	66b0      	str	r0, [r6, #104]	@ 0x68
 8010b94:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d032      	beq.n	8010c00 <rcl_node_init+0x19c>
 8010b9a:	f7fa fe85 	bl	800b8a8 <rmw_node_get_graph_guard_condition>
 8010b9e:	4681      	mov	r9, r0
 8010ba0:	b360      	cbz	r0, 8010bfc <rcl_node_init+0x198>
 8010ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8010ba6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010baa:	6866      	ldr	r6, [r4, #4]
 8010bac:	2008      	movs	r0, #8
 8010bae:	4798      	blx	r3
 8010bb0:	6863      	ldr	r3, [r4, #4]
 8010bb2:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8010bb4:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8010bb8:	f1bb 0f00 	cmp.w	fp, #0
 8010bbc:	d020      	beq.n	8010c00 <rcl_node_init+0x19c>
 8010bbe:	a806      	add	r0, sp, #24
 8010bc0:	f004 ff5a 	bl	8015a78 <rcl_get_zero_initialized_guard_condition>
 8010bc4:	a806      	add	r0, sp, #24
 8010bc6:	c803      	ldmia	r0, {r0, r1}
 8010bc8:	6863      	ldr	r3, [r4, #4]
 8010bca:	46c4      	mov	ip, r8
 8010bcc:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8010bd0:	e88b 0003 	stmia.w	fp, {r0, r1}
 8010bd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010bd8:	ae23      	add	r6, sp, #140	@ 0x8c
 8010bda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010bdc:	f8dc 3000 	ldr.w	r3, [ip]
 8010be0:	6033      	str	r3, [r6, #0]
 8010be2:	ab28      	add	r3, sp, #160	@ 0xa0
 8010be4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010be8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010bec:	4649      	mov	r1, r9
 8010bee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bf0:	463a      	mov	r2, r7
 8010bf2:	4670      	mov	r0, lr
 8010bf4:	f004 ff96 	bl	8015b24 <rcl_guard_condition_init_from_rmw>
 8010bf8:	4681      	mov	r9, r0
 8010bfa:	b328      	cbz	r0, 8010c48 <rcl_node_init+0x1e4>
 8010bfc:	6863      	ldr	r3, [r4, #4]
 8010bfe:	b1f3      	cbz	r3, 8010c3e <rcl_node_init+0x1da>
 8010c00:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010c02:	b128      	cbz	r0, 8010c10 <rcl_node_init+0x1ac>
 8010c04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c08:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c0c:	4798      	blx	r3
 8010c0e:	6863      	ldr	r3, [r4, #4]
 8010c10:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8010c12:	b110      	cbz	r0, 8010c1a <rcl_node_init+0x1b6>
 8010c14:	f7fa fdcc 	bl	800b7b0 <rmw_destroy_node>
 8010c18:	6863      	ldr	r3, [r4, #4]
 8010c1a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010c1c:	b148      	cbz	r0, 8010c32 <rcl_node_init+0x1ce>
 8010c1e:	f004 ffe1 	bl	8015be4 <rcl_guard_condition_fini>
 8010c22:	6863      	ldr	r3, [r4, #4]
 8010c24:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c28:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8010c2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c2e:	4798      	blx	r3
 8010c30:	6863      	ldr	r3, [r4, #4]
 8010c32:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c3c:	4798      	blx	r3
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e9c4 3300 	strd	r3, r3, [r4]
 8010c44:	f04f 0901 	mov.w	r9, #1
 8010c48:	f1ba 0f00 	cmp.w	sl, #0
 8010c4c:	d125      	bne.n	8010c9a <rcl_node_init+0x236>
 8010c4e:	e001      	b.n	8010c54 <rcl_node_init+0x1f0>
 8010c50:	f04f 090b 	mov.w	r9, #11
 8010c54:	4648      	mov	r0, r9
 8010c56:	b029      	add	sp, #164	@ 0xa4
 8010c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c5c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8010c60:	e7f8      	b.n	8010c54 <rcl_node_init+0x1f0>
 8010c62:	782b      	ldrb	r3, [r5, #0]
 8010c64:	2b2f      	cmp	r3, #47	@ 0x2f
 8010c66:	f43f af42 	beq.w	8010aee <rcl_node_init+0x8a>
 8010c6a:	9503      	str	r5, [sp, #12]
 8010c6c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010c70:	9300      	str	r3, [sp, #0]
 8010c72:	4b1e      	ldr	r3, [pc, #120]	@ (8010cec <rcl_node_init+0x288>)
 8010c74:	9302      	str	r3, [sp, #8]
 8010c76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c7a:	9301      	str	r3, [sp, #4]
 8010c7c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010c80:	f002 fcc6 	bl	8013610 <rcutils_format_string_limit>
 8010c84:	4605      	mov	r5, r0
 8010c86:	b340      	cbz	r0, 8010cda <rcl_node_init+0x276>
 8010c88:	2200      	movs	r2, #0
 8010c8a:	a922      	add	r1, sp, #136	@ 0x88
 8010c8c:	9222      	str	r2, [sp, #136]	@ 0x88
 8010c8e:	f003 f8c3 	bl	8013e18 <rmw_validate_namespace>
 8010c92:	4681      	mov	r9, r0
 8010c94:	2800      	cmp	r0, #0
 8010c96:	f43f af34 	beq.w	8010b02 <rcl_node_init+0x9e>
 8010c9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010c9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	4798      	blx	r3
 8010ca6:	e7d5      	b.n	8010c54 <rcl_node_init+0x1f0>
 8010ca8:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010cac:	4648      	mov	r0, r9
 8010cae:	b029      	add	sp, #164	@ 0xa4
 8010cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb4:	f04f 090a 	mov.w	r9, #10
 8010cb8:	f1ba 0f00 	cmp.w	sl, #0
 8010cbc:	d1ed      	bne.n	8010c9a <rcl_node_init+0x236>
 8010cbe:	e7c9      	b.n	8010c54 <rcl_node_init+0x1f0>
 8010cc0:	f003 f91a 	bl	8013ef8 <rmw_node_name_validation_result_string>
 8010cc4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8010cc8:	e7c4      	b.n	8010c54 <rcl_node_init+0x1f0>
 8010cca:	f003 f8b7 	bl	8013e3c <rmw_namespace_validation_result_string>
 8010cce:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8010cd2:	f1ba 0f00 	cmp.w	sl, #0
 8010cd6:	d1e0      	bne.n	8010c9a <rcl_node_init+0x236>
 8010cd8:	e7bc      	b.n	8010c54 <rcl_node_init+0x1f0>
 8010cda:	f04f 090a 	mov.w	r9, #10
 8010cde:	e7b9      	b.n	8010c54 <rcl_node_init+0x1f0>
 8010ce0:	08017d24 	.word	0x08017d24
 8010ce4:	08017d4c 	.word	0x08017d4c
 8010ce8:	08017d28 	.word	0x08017d28
 8010cec:	080180d4 	.word	0x080180d4

08010cf0 <rcl_node_is_valid>:
 8010cf0:	b130      	cbz	r0, 8010d00 <rcl_node_is_valid+0x10>
 8010cf2:	6843      	ldr	r3, [r0, #4]
 8010cf4:	b123      	cbz	r3, 8010d00 <rcl_node_is_valid+0x10>
 8010cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010cf8:	b113      	cbz	r3, 8010d00 <rcl_node_is_valid+0x10>
 8010cfa:	6800      	ldr	r0, [r0, #0]
 8010cfc:	f7ff bd1c 	b.w	8010738 <rcl_context_is_valid>
 8010d00:	2000      	movs	r0, #0
 8010d02:	4770      	bx	lr

08010d04 <rcl_node_get_name>:
 8010d04:	b120      	cbz	r0, 8010d10 <rcl_node_get_name+0xc>
 8010d06:	6840      	ldr	r0, [r0, #4]
 8010d08:	b110      	cbz	r0, 8010d10 <rcl_node_get_name+0xc>
 8010d0a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010d0c:	b100      	cbz	r0, 8010d10 <rcl_node_get_name+0xc>
 8010d0e:	6880      	ldr	r0, [r0, #8]
 8010d10:	4770      	bx	lr
 8010d12:	bf00      	nop

08010d14 <rcl_node_get_namespace>:
 8010d14:	b120      	cbz	r0, 8010d20 <rcl_node_get_namespace+0xc>
 8010d16:	6840      	ldr	r0, [r0, #4]
 8010d18:	b110      	cbz	r0, 8010d20 <rcl_node_get_namespace+0xc>
 8010d1a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010d1c:	b100      	cbz	r0, 8010d20 <rcl_node_get_namespace+0xc>
 8010d1e:	68c0      	ldr	r0, [r0, #12]
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop

08010d24 <rcl_node_get_options>:
 8010d24:	b128      	cbz	r0, 8010d32 <rcl_node_get_options+0xe>
 8010d26:	6840      	ldr	r0, [r0, #4]
 8010d28:	b118      	cbz	r0, 8010d32 <rcl_node_get_options+0xe>
 8010d2a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	bf08      	it	eq
 8010d30:	2000      	moveq	r0, #0
 8010d32:	4770      	bx	lr

08010d34 <rcl_node_get_rmw_handle>:
 8010d34:	b110      	cbz	r0, 8010d3c <rcl_node_get_rmw_handle+0x8>
 8010d36:	6840      	ldr	r0, [r0, #4]
 8010d38:	b100      	cbz	r0, 8010d3c <rcl_node_get_rmw_handle+0x8>
 8010d3a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop

08010d40 <rcl_node_get_default_options>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	2268      	movs	r2, #104	@ 0x68
 8010d44:	4604      	mov	r4, r0
 8010d46:	2100      	movs	r1, #0
 8010d48:	f005 fcc0 	bl	80166cc <memset>
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f7fa f96f 	bl	800b030 <rcutils_get_default_allocator>
 8010d52:	2301      	movs	r3, #1
 8010d54:	7523      	strb	r3, [r4, #20]
 8010d56:	4620      	mov	r0, r4
 8010d58:	bd10      	pop	{r4, pc}
 8010d5a:	bf00      	nop

08010d5c <rcl_node_options_copy>:
 8010d5c:	b1d0      	cbz	r0, 8010d94 <rcl_node_options_copy+0x38>
 8010d5e:	b570      	push	{r4, r5, r6, lr}
 8010d60:	460c      	mov	r4, r1
 8010d62:	b1a9      	cbz	r1, 8010d90 <rcl_node_options_copy+0x34>
 8010d64:	4288      	cmp	r0, r1
 8010d66:	4684      	mov	ip, r0
 8010d68:	d012      	beq.n	8010d90 <rcl_node_options_copy+0x34>
 8010d6a:	4605      	mov	r5, r0
 8010d6c:	8a86      	ldrh	r6, [r0, #20]
 8010d6e:	468e      	mov	lr, r1
 8010d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d76:	682b      	ldr	r3, [r5, #0]
 8010d78:	f8ce 3000 	str.w	r3, [lr]
 8010d7c:	f10c 0118 	add.w	r1, ip, #24
 8010d80:	2250      	movs	r2, #80	@ 0x50
 8010d82:	82a6      	strh	r6, [r4, #20]
 8010d84:	f104 0018 	add.w	r0, r4, #24
 8010d88:	f005 fd69 	bl	801685e <memcpy>
 8010d8c:	2000      	movs	r0, #0
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
 8010d90:	200b      	movs	r0, #11
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	200b      	movs	r0, #11
 8010d96:	4770      	bx	lr

08010d98 <rcl_node_resolve_name>:
 8010d98:	b082      	sub	sp, #8
 8010d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9e:	b091      	sub	sp, #68	@ 0x44
 8010da0:	ac1a      	add	r4, sp, #104	@ 0x68
 8010da2:	e884 000c 	stmia.w	r4, {r2, r3}
 8010da6:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d03b      	beq.n	8010e26 <rcl_node_resolve_name+0x8e>
 8010dae:	460c      	mov	r4, r1
 8010db0:	4605      	mov	r5, r0
 8010db2:	f7ff ffb7 	bl	8010d24 <rcl_node_get_options>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d037      	beq.n	8010e2a <rcl_node_resolve_name+0x92>
 8010dba:	4628      	mov	r0, r5
 8010dbc:	f7ff ffa2 	bl	8010d04 <rcl_node_get_name>
 8010dc0:	4606      	mov	r6, r0
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	f7ff ffa6 	bl	8010d14 <rcl_node_get_namespace>
 8010dc8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8010dcc:	4681      	mov	r9, r0
 8010dce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010dd2:	ad0b      	add	r5, sp, #44	@ 0x2c
 8010dd4:	46ac      	mov	ip, r5
 8010dd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010dda:	f8de 3000 	ldr.w	r3, [lr]
 8010dde:	f8cc 3000 	str.w	r3, [ip]
 8010de2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010de4:	b1fb      	cbz	r3, 8010e26 <rcl_node_resolve_name+0x8e>
 8010de6:	468a      	mov	sl, r1
 8010de8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8010dec:	f002 fd68 	bl	80138c0 <rcutils_get_zero_initialized_string_map>
 8010df0:	ab10      	add	r3, sp, #64	@ 0x40
 8010df2:	9008      	str	r0, [sp, #32]
 8010df4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010df8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010dfc:	2100      	movs	r1, #0
 8010dfe:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010e02:	a808      	add	r0, sp, #32
 8010e04:	f002 fdd4 	bl	80139b0 <rcutils_string_map_init>
 8010e08:	4607      	mov	r7, r0
 8010e0a:	b180      	cbz	r0, 8010e2e <rcl_node_resolve_name+0x96>
 8010e0c:	f7fa f92c 	bl	800b068 <rcutils_get_error_string>
 8010e10:	f7fa f942 	bl	800b098 <rcutils_reset_error>
 8010e14:	2f0a      	cmp	r7, #10
 8010e16:	bf18      	it	ne
 8010e18:	2701      	movne	r7, #1
 8010e1a:	4638      	mov	r0, r7
 8010e1c:	b011      	add	sp, #68	@ 0x44
 8010e1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e22:	b002      	add	sp, #8
 8010e24:	4770      	bx	lr
 8010e26:	270b      	movs	r7, #11
 8010e28:	e7f7      	b.n	8010e1a <rcl_node_resolve_name+0x82>
 8010e2a:	2701      	movs	r7, #1
 8010e2c:	e7f5      	b.n	8010e1a <rcl_node_resolve_name+0x82>
 8010e2e:	9009      	str	r0, [sp, #36]	@ 0x24
 8010e30:	9007      	str	r0, [sp, #28]
 8010e32:	a808      	add	r0, sp, #32
 8010e34:	f004 fe1a 	bl	8015a6c <rcl_get_default_topic_name_substitutions>
 8010e38:	4607      	mov	r7, r0
 8010e3a:	b1a8      	cbz	r0, 8010e68 <rcl_node_resolve_name+0xd0>
 8010e3c:	280a      	cmp	r0, #10
 8010e3e:	9c07      	ldr	r4, [sp, #28]
 8010e40:	d000      	beq.n	8010e44 <rcl_node_resolve_name+0xac>
 8010e42:	2701      	movs	r7, #1
 8010e44:	a808      	add	r0, sp, #32
 8010e46:	f002 fdf3 	bl	8013a30 <rcutils_string_map_fini>
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d13d      	bne.n	8010eca <rcl_node_resolve_name+0x132>
 8010e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e50:	4659      	mov	r1, fp
 8010e52:	47d0      	blx	sl
 8010e54:	4659      	mov	r1, fp
 8010e56:	4620      	mov	r0, r4
 8010e58:	47d0      	blx	sl
 8010e5a:	f1b8 0f00 	cmp.w	r8, #0
 8010e5e:	d0dc      	beq.n	8010e1a <rcl_node_resolve_name+0x82>
 8010e60:	2f67      	cmp	r7, #103	@ 0x67
 8010e62:	bf08      	it	eq
 8010e64:	2768      	moveq	r7, #104	@ 0x68
 8010e66:	e7d8      	b.n	8010e1a <rcl_node_resolve_name+0x82>
 8010e68:	ab09      	add	r3, sp, #36	@ 0x24
 8010e6a:	9305      	str	r3, [sp, #20]
 8010e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010e6e:	46ec      	mov	ip, sp
 8010e70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e74:	682b      	ldr	r3, [r5, #0]
 8010e76:	f8cc 3000 	str.w	r3, [ip]
 8010e7a:	464a      	mov	r2, r9
 8010e7c:	4631      	mov	r1, r6
 8010e7e:	4620      	mov	r0, r4
 8010e80:	ab08      	add	r3, sp, #32
 8010e82:	f004 fc95 	bl	80157b0 <rcl_expand_topic_name>
 8010e86:	4607      	mov	r7, r0
 8010e88:	b9b8      	cbnz	r0, 8010eba <rcl_node_resolve_name+0x122>
 8010e8a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010e8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8010e8e:	4602      	mov	r2, r0
 8010e90:	a90a      	add	r1, sp, #40	@ 0x28
 8010e92:	4620      	mov	r0, r4
 8010e94:	f002 fefc 	bl	8013c90 <rmw_validate_full_topic_name>
 8010e98:	b988      	cbnz	r0, 8010ebe <rcl_node_resolve_name+0x126>
 8010e9a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010e9c:	b9d5      	cbnz	r5, 8010ed4 <rcl_node_resolve_name+0x13c>
 8010e9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ea0:	a808      	add	r0, sp, #32
 8010ea2:	601c      	str	r4, [r3, #0]
 8010ea4:	f002 fdc4 	bl	8013a30 <rcutils_string_map_fini>
 8010ea8:	4607      	mov	r7, r0
 8010eaa:	b1a8      	cbz	r0, 8010ed8 <rcl_node_resolve_name+0x140>
 8010eac:	f7fa f8dc 	bl	800b068 <rcutils_get_error_string>
 8010eb0:	462c      	mov	r4, r5
 8010eb2:	f7fa f8f1 	bl	800b098 <rcutils_reset_error>
 8010eb6:	2701      	movs	r7, #1
 8010eb8:	e7c9      	b.n	8010e4e <rcl_node_resolve_name+0xb6>
 8010eba:	9c07      	ldr	r4, [sp, #28]
 8010ebc:	e7c2      	b.n	8010e44 <rcl_node_resolve_name+0xac>
 8010ebe:	f7fa f8d3 	bl	800b068 <rcutils_get_error_string>
 8010ec2:	2701      	movs	r7, #1
 8010ec4:	f7fa f8e8 	bl	800b098 <rcutils_reset_error>
 8010ec8:	e7bc      	b.n	8010e44 <rcl_node_resolve_name+0xac>
 8010eca:	f7fa f8cd 	bl	800b068 <rcutils_get_error_string>
 8010ece:	f7fa f8e3 	bl	800b098 <rcutils_reset_error>
 8010ed2:	e7bc      	b.n	8010e4e <rcl_node_resolve_name+0xb6>
 8010ed4:	2767      	movs	r7, #103	@ 0x67
 8010ed6:	e7b5      	b.n	8010e44 <rcl_node_resolve_name+0xac>
 8010ed8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010eda:	4659      	mov	r1, fp
 8010edc:	47d0      	blx	sl
 8010ede:	4659      	mov	r1, fp
 8010ee0:	4638      	mov	r0, r7
 8010ee2:	47d0      	blx	sl
 8010ee4:	e799      	b.n	8010e1a <rcl_node_resolve_name+0x82>
 8010ee6:	bf00      	nop

08010ee8 <exact_match_lookup>:
 8010ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eea:	f102 0708 	add.w	r7, r2, #8
 8010eee:	460b      	mov	r3, r1
 8010ef0:	4614      	mov	r4, r2
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010ef8:	b085      	sub	sp, #20
 8010efa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010efe:	4618      	mov	r0, r3
 8010f00:	4919      	ldr	r1, [pc, #100]	@ (8010f68 <exact_match_lookup+0x80>)
 8010f02:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010f06:	f002 fb75 	bl	80135f4 <rcutils_join_path>
 8010f0a:	7833      	ldrb	r3, [r6, #0]
 8010f0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f0e:	4605      	mov	r5, r0
 8010f10:	d023      	beq.n	8010f5a <exact_match_lookup+0x72>
 8010f12:	f104 030c 	add.w	r3, r4, #12
 8010f16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010f1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010f1e:	1c70      	adds	r0, r6, #1
 8010f20:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010f24:	f002 fb6c 	bl	8013600 <rcutils_to_native_path>
 8010f28:	4606      	mov	r6, r0
 8010f2a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010f2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010f32:	4631      	mov	r1, r6
 8010f34:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010f38:	4628      	mov	r0, r5
 8010f3a:	f002 fb5b 	bl	80135f4 <rcutils_join_path>
 8010f3e:	6862      	ldr	r2, [r4, #4]
 8010f40:	6921      	ldr	r1, [r4, #16]
 8010f42:	4603      	mov	r3, r0
 8010f44:	4630      	mov	r0, r6
 8010f46:	461e      	mov	r6, r3
 8010f48:	4790      	blx	r2
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	6863      	ldr	r3, [r4, #4]
 8010f4e:	6921      	ldr	r1, [r4, #16]
 8010f50:	4798      	blx	r3
 8010f52:	4635      	mov	r5, r6
 8010f54:	4628      	mov	r0, r5
 8010f56:	b005      	add	sp, #20
 8010f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f5a:	7873      	ldrb	r3, [r6, #1]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1d8      	bne.n	8010f12 <exact_match_lookup+0x2a>
 8010f60:	4628      	mov	r0, r5
 8010f62:	b005      	add	sp, #20
 8010f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f66:	bf00      	nop
 8010f68:	0801811c 	.word	0x0801811c

08010f6c <rcl_get_secure_root>:
 8010f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f70:	b085      	sub	sp, #20
 8010f72:	b168      	cbz	r0, 8010f90 <rcl_get_secure_root+0x24>
 8010f74:	4607      	mov	r7, r0
 8010f76:	4608      	mov	r0, r1
 8010f78:	460c      	mov	r4, r1
 8010f7a:	f7fa f867 	bl	800b04c <rcutils_allocator_is_valid>
 8010f7e:	b138      	cbz	r0, 8010f90 <rcl_get_secure_root+0x24>
 8010f80:	2300      	movs	r3, #0
 8010f82:	482d      	ldr	r0, [pc, #180]	@ (8011038 <rcl_get_secure_root+0xcc>)
 8010f84:	9303      	str	r3, [sp, #12]
 8010f86:	a903      	add	r1, sp, #12
 8010f88:	f002 fb1a 	bl	80135c0 <rcutils_get_env>
 8010f8c:	4605      	mov	r5, r0
 8010f8e:	b120      	cbz	r0, 8010f9a <rcl_get_secure_root+0x2e>
 8010f90:	2500      	movs	r5, #0
 8010f92:	4628      	mov	r0, r5
 8010f94:	b005      	add	sp, #20
 8010f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f9a:	9b03      	ldr	r3, [sp, #12]
 8010f9c:	781a      	ldrb	r2, [r3, #0]
 8010f9e:	2a00      	cmp	r2, #0
 8010fa0:	d0f6      	beq.n	8010f90 <rcl_get_secure_root+0x24>
 8010fa2:	f104 090c 	add.w	r9, r4, #12
 8010fa6:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010faa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010fb4:	f002 fc46 	bl	8013844 <rcutils_strdup>
 8010fb8:	4680      	mov	r8, r0
 8010fba:	2800      	cmp	r0, #0
 8010fbc:	d0e8      	beq.n	8010f90 <rcl_get_secure_root+0x24>
 8010fbe:	481f      	ldr	r0, [pc, #124]	@ (801103c <rcl_get_secure_root+0xd0>)
 8010fc0:	9503      	str	r5, [sp, #12]
 8010fc2:	a903      	add	r1, sp, #12
 8010fc4:	f002 fafc 	bl	80135c0 <rcutils_get_env>
 8010fc8:	b160      	cbz	r0, 8010fe4 <rcl_get_secure_root+0x78>
 8010fca:	2600      	movs	r6, #0
 8010fcc:	6863      	ldr	r3, [r4, #4]
 8010fce:	6921      	ldr	r1, [r4, #16]
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	4798      	blx	r3
 8010fd4:	4640      	mov	r0, r8
 8010fd6:	6863      	ldr	r3, [r4, #4]
 8010fd8:	6921      	ldr	r1, [r4, #16]
 8010fda:	4798      	blx	r3
 8010fdc:	4628      	mov	r0, r5
 8010fde:	b005      	add	sp, #20
 8010fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	781e      	ldrb	r6, [r3, #0]
 8010fe8:	b1f6      	cbz	r6, 8011028 <rcl_get_secure_root+0xbc>
 8010fea:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010fee:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010ff8:	f002 fc24 	bl	8013844 <rcutils_strdup>
 8010ffc:	4606      	mov	r6, r0
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d0e3      	beq.n	8010fca <rcl_get_secure_root+0x5e>
 8011002:	4622      	mov	r2, r4
 8011004:	4641      	mov	r1, r8
 8011006:	f7ff ff6f 	bl	8010ee8 <exact_match_lookup>
 801100a:	4605      	mov	r5, r0
 801100c:	2d00      	cmp	r5, #0
 801100e:	d0dd      	beq.n	8010fcc <rcl_get_secure_root+0x60>
 8011010:	4628      	mov	r0, r5
 8011012:	f002 faed 	bl	80135f0 <rcutils_is_directory>
 8011016:	4603      	mov	r3, r0
 8011018:	2800      	cmp	r0, #0
 801101a:	d1d7      	bne.n	8010fcc <rcl_get_secure_root+0x60>
 801101c:	4628      	mov	r0, r5
 801101e:	6921      	ldr	r1, [r4, #16]
 8011020:	461d      	mov	r5, r3
 8011022:	6863      	ldr	r3, [r4, #4]
 8011024:	4798      	blx	r3
 8011026:	e7d1      	b.n	8010fcc <rcl_get_secure_root+0x60>
 8011028:	4622      	mov	r2, r4
 801102a:	4638      	mov	r0, r7
 801102c:	4641      	mov	r1, r8
 801102e:	f7ff ff5b 	bl	8010ee8 <exact_match_lookup>
 8011032:	4605      	mov	r5, r0
 8011034:	e7ea      	b.n	801100c <rcl_get_secure_root+0xa0>
 8011036:	bf00      	nop
 8011038:	08018128 	.word	0x08018128
 801103c:	08018140 	.word	0x08018140

08011040 <rcl_get_security_options_from_environment>:
 8011040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011044:	b082      	sub	sp, #8
 8011046:	2300      	movs	r3, #0
 8011048:	4606      	mov	r6, r0
 801104a:	460f      	mov	r7, r1
 801104c:	4820      	ldr	r0, [pc, #128]	@ (80110d0 <rcl_get_security_options_from_environment+0x90>)
 801104e:	9301      	str	r3, [sp, #4]
 8011050:	a901      	add	r1, sp, #4
 8011052:	4690      	mov	r8, r2
 8011054:	f002 fab4 	bl	80135c0 <rcutils_get_env>
 8011058:	b120      	cbz	r0, 8011064 <rcl_get_security_options_from_environment+0x24>
 801105a:	2501      	movs	r5, #1
 801105c:	4628      	mov	r0, r5
 801105e:	b002      	add	sp, #8
 8011060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011064:	491b      	ldr	r1, [pc, #108]	@ (80110d4 <rcl_get_security_options_from_environment+0x94>)
 8011066:	4604      	mov	r4, r0
 8011068:	9801      	ldr	r0, [sp, #4]
 801106a:	f7ef f8d9 	bl	8000220 <strcmp>
 801106e:	4605      	mov	r5, r0
 8011070:	b9e8      	cbnz	r0, 80110ae <rcl_get_security_options_from_environment+0x6e>
 8011072:	9001      	str	r0, [sp, #4]
 8011074:	f1b8 0f00 	cmp.w	r8, #0
 8011078:	d020      	beq.n	80110bc <rcl_get_security_options_from_environment+0x7c>
 801107a:	4817      	ldr	r0, [pc, #92]	@ (80110d8 <rcl_get_security_options_from_environment+0x98>)
 801107c:	a901      	add	r1, sp, #4
 801107e:	f002 fa9f 	bl	80135c0 <rcutils_get_env>
 8011082:	2800      	cmp	r0, #0
 8011084:	d1e9      	bne.n	801105a <rcl_get_security_options_from_environment+0x1a>
 8011086:	4915      	ldr	r1, [pc, #84]	@ (80110dc <rcl_get_security_options_from_environment+0x9c>)
 8011088:	9801      	ldr	r0, [sp, #4]
 801108a:	f7ef f8c9 	bl	8000220 <strcmp>
 801108e:	fab0 f080 	clz	r0, r0
 8011092:	0940      	lsrs	r0, r0, #5
 8011094:	f888 0000 	strb.w	r0, [r8]
 8011098:	4639      	mov	r1, r7
 801109a:	4630      	mov	r0, r6
 801109c:	f7ff ff66 	bl	8010f6c <rcl_get_secure_root>
 80110a0:	b170      	cbz	r0, 80110c0 <rcl_get_security_options_from_environment+0x80>
 80110a2:	f8c8 0004 	str.w	r0, [r8, #4]
 80110a6:	4628      	mov	r0, r5
 80110a8:	b002      	add	sp, #8
 80110aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ae:	4625      	mov	r5, r4
 80110b0:	4628      	mov	r0, r5
 80110b2:	f888 4000 	strb.w	r4, [r8]
 80110b6:	b002      	add	sp, #8
 80110b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110bc:	250b      	movs	r5, #11
 80110be:	e7cd      	b.n	801105c <rcl_get_security_options_from_environment+0x1c>
 80110c0:	f898 5000 	ldrb.w	r5, [r8]
 80110c4:	f1a5 0501 	sub.w	r5, r5, #1
 80110c8:	fab5 f585 	clz	r5, r5
 80110cc:	096d      	lsrs	r5, r5, #5
 80110ce:	e7c5      	b.n	801105c <rcl_get_security_options_from_environment+0x1c>
 80110d0:	080180e0 	.word	0x080180e0
 80110d4:	080180f4 	.word	0x080180f4
 80110d8:	080180fc 	.word	0x080180fc
 80110dc:	08018114 	.word	0x08018114

080110e0 <rcl_get_zero_initialized_service>:
 80110e0:	4b01      	ldr	r3, [pc, #4]	@ (80110e8 <rcl_get_zero_initialized_service+0x8>)
 80110e2:	6818      	ldr	r0, [r3, #0]
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	08018160 	.word	0x08018160

080110ec <rcl_service_init>:
 80110ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110f0:	b089      	sub	sp, #36	@ 0x24
 80110f2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80110f4:	b1c5      	cbz	r5, 8011128 <rcl_service_init+0x3c>
 80110f6:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80110fa:	4604      	mov	r4, r0
 80110fc:	4648      	mov	r0, r9
 80110fe:	4688      	mov	r8, r1
 8011100:	4617      	mov	r7, r2
 8011102:	461e      	mov	r6, r3
 8011104:	f7f9 ffa2 	bl	800b04c <rcutils_allocator_is_valid>
 8011108:	b170      	cbz	r0, 8011128 <rcl_service_init+0x3c>
 801110a:	b16c      	cbz	r4, 8011128 <rcl_service_init+0x3c>
 801110c:	4640      	mov	r0, r8
 801110e:	f7ff fdef 	bl	8010cf0 <rcl_node_is_valid>
 8011112:	2800      	cmp	r0, #0
 8011114:	d058      	beq.n	80111c8 <rcl_service_init+0xdc>
 8011116:	b13f      	cbz	r7, 8011128 <rcl_service_init+0x3c>
 8011118:	b136      	cbz	r6, 8011128 <rcl_service_init+0x3c>
 801111a:	6823      	ldr	r3, [r4, #0]
 801111c:	b14b      	cbz	r3, 8011132 <rcl_service_init+0x46>
 801111e:	2664      	movs	r6, #100	@ 0x64
 8011120:	4630      	mov	r0, r6
 8011122:	b009      	add	sp, #36	@ 0x24
 8011124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011128:	260b      	movs	r6, #11
 801112a:	4630      	mov	r0, r6
 801112c:	b009      	add	sp, #36	@ 0x24
 801112e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011132:	aa07      	add	r2, sp, #28
 8011134:	9205      	str	r2, [sp, #20]
 8011136:	2201      	movs	r2, #1
 8011138:	9304      	str	r3, [sp, #16]
 801113a:	9203      	str	r2, [sp, #12]
 801113c:	9307      	str	r3, [sp, #28]
 801113e:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8011142:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011146:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801114a:	4631      	mov	r1, r6
 801114c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011150:	4640      	mov	r0, r8
 8011152:	f7ff fe21 	bl	8010d98 <rcl_node_resolve_name>
 8011156:	2800      	cmp	r0, #0
 8011158:	d145      	bne.n	80111e6 <rcl_service_init+0xfa>
 801115a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801115c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 801115e:	f44f 7088 	mov.w	r0, #272	@ 0x110
 8011162:	4798      	blx	r3
 8011164:	6020      	str	r0, [r4, #0]
 8011166:	2800      	cmp	r0, #0
 8011168:	d043      	beq.n	80111f2 <rcl_service_init+0x106>
 801116a:	4640      	mov	r0, r8
 801116c:	f7ff fde2 	bl	8010d34 <rcl_node_get_rmw_handle>
 8011170:	462b      	mov	r3, r5
 8011172:	9a07      	ldr	r2, [sp, #28]
 8011174:	6826      	ldr	r6, [r4, #0]
 8011176:	4639      	mov	r1, r7
 8011178:	f7fa fd40 	bl	800bbfc <rmw_create_service>
 801117c:	6823      	ldr	r3, [r4, #0]
 801117e:	f8c6 0108 	str.w	r0, [r6, #264]	@ 0x108
 8011182:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011186:	b330      	cbz	r0, 80111d6 <rcl_service_init+0xea>
 8011188:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 801118c:	f7fa fe5c 	bl	800be48 <rmw_service_request_subscription_get_actual_qos>
 8011190:	b9f8      	cbnz	r0, 80111d2 <rcl_service_init+0xe6>
 8011192:	6821      	ldr	r1, [r4, #0]
 8011194:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8011198:	31b8      	adds	r1, #184	@ 0xb8
 801119a:	f7fa fe45 	bl	800be28 <rmw_service_response_publisher_get_actual_qos>
 801119e:	4606      	mov	r6, r0
 80111a0:	b9b8      	cbnz	r0, 80111d2 <rcl_service_init+0xe6>
 80111a2:	6820      	ldr	r0, [r4, #0]
 80111a4:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 80111a8:	f880 30b0 	strb.w	r3, [r0, #176]	@ 0xb0
 80111ac:	f880 3100 	strb.w	r3, [r0, #256]	@ 0x100
 80111b0:	2268      	movs	r2, #104	@ 0x68
 80111b2:	4629      	mov	r1, r5
 80111b4:	f005 fb53 	bl	801685e <memcpy>
 80111b8:	9807      	ldr	r0, [sp, #28]
 80111ba:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80111bc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80111be:	4798      	blx	r3
 80111c0:	4630      	mov	r0, r6
 80111c2:	b009      	add	sp, #36	@ 0x24
 80111c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111c8:	26c8      	movs	r6, #200	@ 0xc8
 80111ca:	4630      	mov	r0, r6
 80111cc:	b009      	add	sp, #36	@ 0x24
 80111ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111d2:	6823      	ldr	r3, [r4, #0]
 80111d4:	b12b      	cbz	r3, 80111e2 <rcl_service_init+0xf6>
 80111d6:	4618      	mov	r0, r3
 80111d8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80111da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80111dc:	4790      	blx	r2
 80111de:	2300      	movs	r3, #0
 80111e0:	6023      	str	r3, [r4, #0]
 80111e2:	2601      	movs	r6, #1
 80111e4:	e7e8      	b.n	80111b8 <rcl_service_init+0xcc>
 80111e6:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d903      	bls.n	80111f6 <rcl_service_init+0x10a>
 80111ee:	280a      	cmp	r0, #10
 80111f0:	d1f7      	bne.n	80111e2 <rcl_service_init+0xf6>
 80111f2:	260a      	movs	r6, #10
 80111f4:	e7e0      	b.n	80111b8 <rcl_service_init+0xcc>
 80111f6:	2668      	movs	r6, #104	@ 0x68
 80111f8:	e7de      	b.n	80111b8 <rcl_service_init+0xcc>
 80111fa:	bf00      	nop

080111fc <rcl_service_get_default_options>:
 80111fc:	b530      	push	{r4, r5, lr}
 80111fe:	4d0f      	ldr	r5, [pc, #60]	@ (801123c <rcl_service_get_default_options+0x40>)
 8011200:	490f      	ldr	r1, [pc, #60]	@ (8011240 <rcl_service_get_default_options+0x44>)
 8011202:	b087      	sub	sp, #28
 8011204:	4604      	mov	r4, r0
 8011206:	2250      	movs	r2, #80	@ 0x50
 8011208:	4628      	mov	r0, r5
 801120a:	f005 fb28 	bl	801685e <memcpy>
 801120e:	4668      	mov	r0, sp
 8011210:	f7f9 ff0e 	bl	800b030 <rcutils_get_default_allocator>
 8011214:	46ec      	mov	ip, sp
 8011216:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801121a:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 801121e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011222:	2268      	movs	r2, #104	@ 0x68
 8011224:	f8dc 3000 	ldr.w	r3, [ip]
 8011228:	f8ce 3000 	str.w	r3, [lr]
 801122c:	4629      	mov	r1, r5
 801122e:	4620      	mov	r0, r4
 8011230:	f005 fb15 	bl	801685e <memcpy>
 8011234:	4620      	mov	r0, r4
 8011236:	b007      	add	sp, #28
 8011238:	bd30      	pop	{r4, r5, pc}
 801123a:	bf00      	nop
 801123c:	2000add0 	.word	0x2000add0
 8011240:	08018168 	.word	0x08018168

08011244 <rcl_service_get_rmw_handle>:
 8011244:	b118      	cbz	r0, 801124e <rcl_service_get_rmw_handle+0xa>
 8011246:	6800      	ldr	r0, [r0, #0]
 8011248:	b108      	cbz	r0, 801124e <rcl_service_get_rmw_handle+0xa>
 801124a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801124e:	4770      	bx	lr

08011250 <rcl_take_request>:
 8011250:	b570      	push	{r4, r5, r6, lr}
 8011252:	468e      	mov	lr, r1
 8011254:	460c      	mov	r4, r1
 8011256:	4616      	mov	r6, r2
 8011258:	4605      	mov	r5, r0
 801125a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801125e:	b08c      	sub	sp, #48	@ 0x30
 8011260:	f10d 0c18 	add.w	ip, sp, #24
 8011264:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011268:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801126c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011270:	b30d      	cbz	r5, 80112b6 <rcl_take_request+0x66>
 8011272:	682b      	ldr	r3, [r5, #0]
 8011274:	b1fb      	cbz	r3, 80112b6 <rcl_take_request+0x66>
 8011276:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801127a:	b1e0      	cbz	r0, 80112b6 <rcl_take_request+0x66>
 801127c:	b336      	cbz	r6, 80112cc <rcl_take_request+0x7c>
 801127e:	2300      	movs	r3, #0
 8011280:	f88d 3007 	strb.w	r3, [sp, #7]
 8011284:	4632      	mov	r2, r6
 8011286:	f10d 0307 	add.w	r3, sp, #7
 801128a:	a902      	add	r1, sp, #8
 801128c:	f003 f856 	bl	801433c <rmw_take_request>
 8011290:	4605      	mov	r5, r0
 8011292:	b198      	cbz	r0, 80112bc <rcl_take_request+0x6c>
 8011294:	280a      	cmp	r0, #10
 8011296:	bf18      	it	ne
 8011298:	2501      	movne	r5, #1
 801129a:	f10d 0e18 	add.w	lr, sp, #24
 801129e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80112a2:	46a4      	mov	ip, r4
 80112a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80112ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80112b0:	4628      	mov	r0, r5
 80112b2:	b00c      	add	sp, #48	@ 0x30
 80112b4:	bd70      	pop	{r4, r5, r6, pc}
 80112b6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80112ba:	e7ee      	b.n	801129a <rcl_take_request+0x4a>
 80112bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80112c0:	f240 2359 	movw	r3, #601	@ 0x259
 80112c4:	2a00      	cmp	r2, #0
 80112c6:	bf08      	it	eq
 80112c8:	461d      	moveq	r5, r3
 80112ca:	e7e6      	b.n	801129a <rcl_take_request+0x4a>
 80112cc:	250b      	movs	r5, #11
 80112ce:	e7e4      	b.n	801129a <rcl_take_request+0x4a>

080112d0 <rcl_send_response>:
 80112d0:	b170      	cbz	r0, 80112f0 <rcl_send_response+0x20>
 80112d2:	6800      	ldr	r0, [r0, #0]
 80112d4:	b160      	cbz	r0, 80112f0 <rcl_send_response+0x20>
 80112d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80112da:	b148      	cbz	r0, 80112f0 <rcl_send_response+0x20>
 80112dc:	b159      	cbz	r1, 80112f6 <rcl_send_response+0x26>
 80112de:	b510      	push	{r4, lr}
 80112e0:	b15a      	cbz	r2, 80112fa <rcl_send_response+0x2a>
 80112e2:	f003 f889 	bl	80143f8 <rmw_send_response>
 80112e6:	b110      	cbz	r0, 80112ee <rcl_send_response+0x1e>
 80112e8:	2802      	cmp	r0, #2
 80112ea:	bf18      	it	ne
 80112ec:	2001      	movne	r0, #1
 80112ee:	bd10      	pop	{r4, pc}
 80112f0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80112f4:	4770      	bx	lr
 80112f6:	200b      	movs	r0, #11
 80112f8:	4770      	bx	lr
 80112fa:	200b      	movs	r0, #11
 80112fc:	bd10      	pop	{r4, pc}
 80112fe:	bf00      	nop

08011300 <rcl_service_is_valid>:
 8011300:	b130      	cbz	r0, 8011310 <rcl_service_is_valid+0x10>
 8011302:	6800      	ldr	r0, [r0, #0]
 8011304:	b120      	cbz	r0, 8011310 <rcl_service_is_valid+0x10>
 8011306:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801130a:	3800      	subs	r0, #0
 801130c:	bf18      	it	ne
 801130e:	2001      	movne	r0, #1
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop

08011314 <rcl_get_zero_initialized_subscription>:
 8011314:	4b01      	ldr	r3, [pc, #4]	@ (801131c <rcl_get_zero_initialized_subscription+0x8>)
 8011316:	6818      	ldr	r0, [r3, #0]
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	080181b8 	.word	0x080181b8

08011320 <rcl_subscription_init>:
 8011320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011324:	b089      	sub	sp, #36	@ 0x24
 8011326:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8011328:	b1d6      	cbz	r6, 8011360 <rcl_subscription_init+0x40>
 801132a:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801132e:	4604      	mov	r4, r0
 8011330:	4648      	mov	r0, r9
 8011332:	460d      	mov	r5, r1
 8011334:	4690      	mov	r8, r2
 8011336:	461f      	mov	r7, r3
 8011338:	f7f9 fe88 	bl	800b04c <rcutils_allocator_is_valid>
 801133c:	b180      	cbz	r0, 8011360 <rcl_subscription_init+0x40>
 801133e:	b17c      	cbz	r4, 8011360 <rcl_subscription_init+0x40>
 8011340:	4628      	mov	r0, r5
 8011342:	f7ff fcd5 	bl	8010cf0 <rcl_node_is_valid>
 8011346:	2800      	cmp	r0, #0
 8011348:	d054      	beq.n	80113f4 <rcl_subscription_init+0xd4>
 801134a:	f1b8 0f00 	cmp.w	r8, #0
 801134e:	d007      	beq.n	8011360 <rcl_subscription_init+0x40>
 8011350:	b137      	cbz	r7, 8011360 <rcl_subscription_init+0x40>
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	b14b      	cbz	r3, 801136a <rcl_subscription_init+0x4a>
 8011356:	2764      	movs	r7, #100	@ 0x64
 8011358:	4638      	mov	r0, r7
 801135a:	b009      	add	sp, #36	@ 0x24
 801135c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011360:	270b      	movs	r7, #11
 8011362:	4638      	mov	r0, r7
 8011364:	b009      	add	sp, #36	@ 0x24
 8011366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801136a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801136e:	aa07      	add	r2, sp, #28
 8011370:	9205      	str	r2, [sp, #20]
 8011372:	9307      	str	r3, [sp, #28]
 8011374:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011378:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801137c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011380:	4639      	mov	r1, r7
 8011382:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011386:	4628      	mov	r0, r5
 8011388:	f7ff fd06 	bl	8010d98 <rcl_node_resolve_name>
 801138c:	4607      	mov	r7, r0
 801138e:	2800      	cmp	r0, #0
 8011390:	d15f      	bne.n	8011452 <rcl_subscription_init+0x132>
 8011392:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011396:	21c8      	movs	r1, #200	@ 0xc8
 8011398:	2001      	movs	r0, #1
 801139a:	4798      	blx	r3
 801139c:	6020      	str	r0, [r4, #0]
 801139e:	2800      	cmp	r0, #0
 80113a0:	d05d      	beq.n	801145e <rcl_subscription_init+0x13e>
 80113a2:	4628      	mov	r0, r5
 80113a4:	f7ff fcc6 	bl	8010d34 <rcl_node_get_rmw_handle>
 80113a8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	9a07      	ldr	r2, [sp, #28]
 80113b0:	6827      	ldr	r7, [r4, #0]
 80113b2:	4641      	mov	r1, r8
 80113b4:	4633      	mov	r3, r6
 80113b6:	f7fa fd57 	bl	800be68 <rmw_create_subscription>
 80113ba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80113be:	6827      	ldr	r7, [r4, #0]
 80113c0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80113c4:	b348      	cbz	r0, 801141a <rcl_subscription_init+0xfa>
 80113c6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80113ca:	f7fa fe2f 	bl	800c02c <rmw_subscription_get_actual_qos>
 80113ce:	4607      	mov	r7, r0
 80113d0:	b9a8      	cbnz	r0, 80113fe <rcl_subscription_init+0xde>
 80113d2:	6820      	ldr	r0, [r4, #0]
 80113d4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80113d8:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80113dc:	2270      	movs	r2, #112	@ 0x70
 80113de:	4631      	mov	r1, r6
 80113e0:	f005 fa3d 	bl	801685e <memcpy>
 80113e4:	9807      	ldr	r0, [sp, #28]
 80113e6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80113e8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80113ea:	4798      	blx	r3
 80113ec:	4638      	mov	r0, r7
 80113ee:	b009      	add	sp, #36	@ 0x24
 80113f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113f4:	27c8      	movs	r7, #200	@ 0xc8
 80113f6:	4638      	mov	r0, r7
 80113f8:	b009      	add	sp, #36	@ 0x24
 80113fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113fe:	6827      	ldr	r7, [r4, #0]
 8011400:	b32f      	cbz	r7, 801144e <rcl_subscription_init+0x12e>
 8011402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011406:	b14b      	cbz	r3, 801141c <rcl_subscription_init+0xfc>
 8011408:	4628      	mov	r0, r5
 801140a:	f7ff fc93 	bl	8010d34 <rcl_node_get_rmw_handle>
 801140e:	6823      	ldr	r3, [r4, #0]
 8011410:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8011414:	f7fa fe1a 	bl	800c04c <rmw_destroy_subscription>
 8011418:	6827      	ldr	r7, [r4, #0]
 801141a:	b197      	cbz	r7, 8011442 <rcl_subscription_init+0x122>
 801141c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8011420:	4628      	mov	r0, r5
 8011422:	f7f9 fe13 	bl	800b04c <rcutils_allocator_is_valid>
 8011426:	b158      	cbz	r0, 8011440 <rcl_subscription_init+0x120>
 8011428:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801142a:	b148      	cbz	r0, 8011440 <rcl_subscription_init+0x120>
 801142c:	4629      	mov	r1, r5
 801142e:	f002 fb83 	bl	8013b38 <rmw_subscription_content_filter_options_fini>
 8011432:	4605      	mov	r5, r0
 8011434:	b9b8      	cbnz	r0, 8011466 <rcl_subscription_init+0x146>
 8011436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011438:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801143a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801143c:	4798      	blx	r3
 801143e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8011440:	6827      	ldr	r7, [r4, #0]
 8011442:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011444:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011446:	4638      	mov	r0, r7
 8011448:	4798      	blx	r3
 801144a:	2300      	movs	r3, #0
 801144c:	6023      	str	r3, [r4, #0]
 801144e:	2701      	movs	r7, #1
 8011450:	e7c8      	b.n	80113e4 <rcl_subscription_init+0xc4>
 8011452:	2867      	cmp	r0, #103	@ 0x67
 8011454:	d0c6      	beq.n	80113e4 <rcl_subscription_init+0xc4>
 8011456:	2869      	cmp	r0, #105	@ 0x69
 8011458:	d003      	beq.n	8011462 <rcl_subscription_init+0x142>
 801145a:	280a      	cmp	r0, #10
 801145c:	d1f7      	bne.n	801144e <rcl_subscription_init+0x12e>
 801145e:	270a      	movs	r7, #10
 8011460:	e7c0      	b.n	80113e4 <rcl_subscription_init+0xc4>
 8011462:	2767      	movs	r7, #103	@ 0x67
 8011464:	e7be      	b.n	80113e4 <rcl_subscription_init+0xc4>
 8011466:	f7ff f949 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 801146a:	6827      	ldr	r7, [r4, #0]
 801146c:	e7e9      	b.n	8011442 <rcl_subscription_init+0x122>
 801146e:	bf00      	nop

08011470 <rcl_subscription_get_default_options>:
 8011470:	b570      	push	{r4, r5, r6, lr}
 8011472:	4d14      	ldr	r5, [pc, #80]	@ (80114c4 <rcl_subscription_get_default_options+0x54>)
 8011474:	4914      	ldr	r1, [pc, #80]	@ (80114c8 <rcl_subscription_get_default_options+0x58>)
 8011476:	b08a      	sub	sp, #40	@ 0x28
 8011478:	4604      	mov	r4, r0
 801147a:	2250      	movs	r2, #80	@ 0x50
 801147c:	4628      	mov	r0, r5
 801147e:	f005 f9ee 	bl	801685e <memcpy>
 8011482:	a804      	add	r0, sp, #16
 8011484:	f7f9 fdd4 	bl	800b030 <rcutils_get_default_allocator>
 8011488:	f10d 0c10 	add.w	ip, sp, #16
 801148c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011490:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011494:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011498:	466e      	mov	r6, sp
 801149a:	f8dc 3000 	ldr.w	r3, [ip]
 801149e:	f8ce 3000 	str.w	r3, [lr]
 80114a2:	4630      	mov	r0, r6
 80114a4:	f002 fb62 	bl	8013b6c <rmw_get_default_subscription_options>
 80114a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80114ac:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80114b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80114b4:	2270      	movs	r2, #112	@ 0x70
 80114b6:	4629      	mov	r1, r5
 80114b8:	4620      	mov	r0, r4
 80114ba:	f005 f9d0 	bl	801685e <memcpy>
 80114be:	4620      	mov	r0, r4
 80114c0:	b00a      	add	sp, #40	@ 0x28
 80114c2:	bd70      	pop	{r4, r5, r6, pc}
 80114c4:	2000ae38 	.word	0x2000ae38
 80114c8:	080181c0 	.word	0x080181c0

080114cc <rcl_take>:
 80114cc:	2800      	cmp	r0, #0
 80114ce:	d04a      	beq.n	8011566 <rcl_take+0x9a>
 80114d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114d4:	4604      	mov	r4, r0
 80114d6:	6800      	ldr	r0, [r0, #0]
 80114d8:	b0a4      	sub	sp, #144	@ 0x90
 80114da:	2800      	cmp	r0, #0
 80114dc:	d03b      	beq.n	8011556 <rcl_take+0x8a>
 80114de:	461f      	mov	r7, r3
 80114e0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d036      	beq.n	8011556 <rcl_take+0x8a>
 80114e8:	460e      	mov	r6, r1
 80114ea:	2900      	cmp	r1, #0
 80114ec:	d039      	beq.n	8011562 <rcl_take+0x96>
 80114ee:	4615      	mov	r5, r2
 80114f0:	2a00      	cmp	r2, #0
 80114f2:	d03c      	beq.n	801156e <rcl_take+0xa2>
 80114f4:	a802      	add	r0, sp, #8
 80114f6:	f002 fbc3 	bl	8013c80 <rmw_get_zero_initialized_message_info>
 80114fa:	f10d 0c08 	add.w	ip, sp, #8
 80114fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011502:	46ae      	mov	lr, r5
 8011504:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011508:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801150c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011510:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011514:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011518:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801151c:	f04f 0800 	mov.w	r8, #0
 8011520:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011524:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8011528:	6822      	ldr	r2, [r4, #0]
 801152a:	462b      	mov	r3, r5
 801152c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8011530:	9700      	str	r7, [sp, #0]
 8011532:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8011536:	4631      	mov	r1, r6
 8011538:	f003 f804 	bl	8014544 <rmw_take_with_info>
 801153c:	4603      	mov	r3, r0
 801153e:	b9c0      	cbnz	r0, 8011572 <rcl_take+0xa6>
 8011540:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8011544:	f240 1291 	movw	r2, #401	@ 0x191
 8011548:	2900      	cmp	r1, #0
 801154a:	bf08      	it	eq
 801154c:	4613      	moveq	r3, r2
 801154e:	4618      	mov	r0, r3
 8011550:	b024      	add	sp, #144	@ 0x90
 8011552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011556:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801155a:	4618      	mov	r0, r3
 801155c:	b024      	add	sp, #144	@ 0x90
 801155e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011562:	230b      	movs	r3, #11
 8011564:	e7f3      	b.n	801154e <rcl_take+0x82>
 8011566:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801156a:	4618      	mov	r0, r3
 801156c:	4770      	bx	lr
 801156e:	ad14      	add	r5, sp, #80	@ 0x50
 8011570:	e7c0      	b.n	80114f4 <rcl_take+0x28>
 8011572:	f7ff f8c3 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 8011576:	4603      	mov	r3, r0
 8011578:	e7e9      	b.n	801154e <rcl_take+0x82>
 801157a:	bf00      	nop

0801157c <rcl_subscription_get_rmw_handle>:
 801157c:	b118      	cbz	r0, 8011586 <rcl_subscription_get_rmw_handle+0xa>
 801157e:	6800      	ldr	r0, [r0, #0]
 8011580:	b108      	cbz	r0, 8011586 <rcl_subscription_get_rmw_handle+0xa>
 8011582:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011586:	4770      	bx	lr

08011588 <rcl_subscription_is_valid>:
 8011588:	b130      	cbz	r0, 8011598 <rcl_subscription_is_valid+0x10>
 801158a:	6800      	ldr	r0, [r0, #0]
 801158c:	b120      	cbz	r0, 8011598 <rcl_subscription_is_valid+0x10>
 801158e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011592:	3800      	subs	r0, #0
 8011594:	bf18      	it	ne
 8011596:	2001      	movne	r0, #1
 8011598:	4770      	bx	lr
 801159a:	bf00      	nop

0801159c <rcl_get_system_time>:
 801159c:	4608      	mov	r0, r1
 801159e:	f7f9 bd97 	b.w	800b0d0 <rcutils_system_time_now>
 80115a2:	bf00      	nop

080115a4 <rcl_get_steady_time>:
 80115a4:	4608      	mov	r0, r1
 80115a6:	f7f9 bdbb 	b.w	800b120 <rcutils_steady_time_now>
 80115aa:	bf00      	nop

080115ac <rcl_get_ros_time>:
 80115ac:	7a03      	ldrb	r3, [r0, #8]
 80115ae:	b510      	push	{r4, lr}
 80115b0:	460c      	mov	r4, r1
 80115b2:	b133      	cbz	r3, 80115c2 <rcl_get_ros_time+0x16>
 80115b4:	2105      	movs	r1, #5
 80115b6:	f001 ff5f 	bl	8013478 <__atomic_load_8>
 80115ba:	e9c4 0100 	strd	r0, r1, [r4]
 80115be:	2000      	movs	r0, #0
 80115c0:	bd10      	pop	{r4, pc}
 80115c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115c6:	4608      	mov	r0, r1
 80115c8:	f7f9 bd82 	b.w	800b0d0 <rcutils_system_time_now>

080115cc <rcl_clock_init>:
 80115cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ce:	4605      	mov	r5, r0
 80115d0:	4610      	mov	r0, r2
 80115d2:	4614      	mov	r4, r2
 80115d4:	460e      	mov	r6, r1
 80115d6:	f7f9 fd39 	bl	800b04c <rcutils_allocator_is_valid>
 80115da:	b128      	cbz	r0, 80115e8 <rcl_clock_init+0x1c>
 80115dc:	2d03      	cmp	r5, #3
 80115de:	d803      	bhi.n	80115e8 <rcl_clock_init+0x1c>
 80115e0:	e8df f005 	tbb	[pc, r5]
 80115e4:	06532e1d 	.word	0x06532e1d
 80115e8:	f04f 0c0b 	mov.w	ip, #11
 80115ec:	4660      	mov	r0, ip
 80115ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115f0:	2e00      	cmp	r6, #0
 80115f2:	d0f9      	beq.n	80115e8 <rcl_clock_init+0x1c>
 80115f4:	2c00      	cmp	r4, #0
 80115f6:	d0f7      	beq.n	80115e8 <rcl_clock_init+0x1c>
 80115f8:	2300      	movs	r3, #0
 80115fa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80115fe:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80116b4 <rcl_clock_init+0xe8>
 8011602:	6133      	str	r3, [r6, #16]
 8011604:	f106 0514 	add.w	r5, r6, #20
 8011608:	469c      	mov	ip, r3
 801160a:	2703      	movs	r7, #3
 801160c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801160e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011610:	6823      	ldr	r3, [r4, #0]
 8011612:	602b      	str	r3, [r5, #0]
 8011614:	7037      	strb	r7, [r6, #0]
 8011616:	f8c6 e00c 	str.w	lr, [r6, #12]
 801161a:	4660      	mov	r0, ip
 801161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161e:	2e00      	cmp	r6, #0
 8011620:	d0e2      	beq.n	80115e8 <rcl_clock_init+0x1c>
 8011622:	2300      	movs	r3, #0
 8011624:	7033      	strb	r3, [r6, #0]
 8011626:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801162a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801162e:	469c      	mov	ip, r3
 8011630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011632:	f106 0514 	add.w	r5, r6, #20
 8011636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	602b      	str	r3, [r5, #0]
 801163c:	4660      	mov	r0, ip
 801163e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011640:	2e00      	cmp	r6, #0
 8011642:	d0d1      	beq.n	80115e8 <rcl_clock_init+0x1c>
 8011644:	2c00      	cmp	r4, #0
 8011646:	d0cf      	beq.n	80115e8 <rcl_clock_init+0x1c>
 8011648:	2700      	movs	r7, #0
 801164a:	7037      	strb	r7, [r6, #0]
 801164c:	46a4      	mov	ip, r4
 801164e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011652:	f106 0514 	add.w	r5, r6, #20
 8011656:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801165a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801165e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011660:	f8dc 3000 	ldr.w	r3, [ip]
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	6921      	ldr	r1, [r4, #16]
 8011668:	6823      	ldr	r3, [r4, #0]
 801166a:	2010      	movs	r0, #16
 801166c:	4798      	blx	r3
 801166e:	6130      	str	r0, [r6, #16]
 8011670:	b1d0      	cbz	r0, 80116a8 <rcl_clock_init+0xdc>
 8011672:	2200      	movs	r2, #0
 8011674:	2300      	movs	r3, #0
 8011676:	e9c0 2300 	strd	r2, r3, [r0]
 801167a:	2301      	movs	r3, #1
 801167c:	7207      	strb	r7, [r0, #8]
 801167e:	4a0c      	ldr	r2, [pc, #48]	@ (80116b0 <rcl_clock_init+0xe4>)
 8011680:	7033      	strb	r3, [r6, #0]
 8011682:	46bc      	mov	ip, r7
 8011684:	60f2      	str	r2, [r6, #12]
 8011686:	4660      	mov	r0, ip
 8011688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801168a:	2e00      	cmp	r6, #0
 801168c:	d0ac      	beq.n	80115e8 <rcl_clock_init+0x1c>
 801168e:	2c00      	cmp	r4, #0
 8011690:	d0aa      	beq.n	80115e8 <rcl_clock_init+0x1c>
 8011692:	2300      	movs	r3, #0
 8011694:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011698:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80116b8 <rcl_clock_init+0xec>
 801169c:	6133      	str	r3, [r6, #16]
 801169e:	f106 0514 	add.w	r5, r6, #20
 80116a2:	469c      	mov	ip, r3
 80116a4:	2702      	movs	r7, #2
 80116a6:	e7b1      	b.n	801160c <rcl_clock_init+0x40>
 80116a8:	f04f 0c0a 	mov.w	ip, #10
 80116ac:	e79e      	b.n	80115ec <rcl_clock_init+0x20>
 80116ae:	bf00      	nop
 80116b0:	080115ad 	.word	0x080115ad
 80116b4:	080115a5 	.word	0x080115a5
 80116b8:	0801159d 	.word	0x0801159d

080116bc <rcl_clock_get_now>:
 80116bc:	b140      	cbz	r0, 80116d0 <rcl_clock_get_now+0x14>
 80116be:	b139      	cbz	r1, 80116d0 <rcl_clock_get_now+0x14>
 80116c0:	7803      	ldrb	r3, [r0, #0]
 80116c2:	b11b      	cbz	r3, 80116cc <rcl_clock_get_now+0x10>
 80116c4:	68c3      	ldr	r3, [r0, #12]
 80116c6:	b10b      	cbz	r3, 80116cc <rcl_clock_get_now+0x10>
 80116c8:	6900      	ldr	r0, [r0, #16]
 80116ca:	4718      	bx	r3
 80116cc:	2001      	movs	r0, #1
 80116ce:	4770      	bx	lr
 80116d0:	200b      	movs	r0, #11
 80116d2:	4770      	bx	lr

080116d4 <rcl_clock_add_jump_callback>:
 80116d4:	b082      	sub	sp, #8
 80116d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116da:	a906      	add	r1, sp, #24
 80116dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80116e0:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80116e4:	b320      	cbz	r0, 8011730 <rcl_clock_add_jump_callback+0x5c>
 80116e6:	4604      	mov	r4, r0
 80116e8:	3014      	adds	r0, #20
 80116ea:	f7f9 fcaf 	bl	800b04c <rcutils_allocator_is_valid>
 80116ee:	b1f8      	cbz	r0, 8011730 <rcl_clock_add_jump_callback+0x5c>
 80116f0:	b1f6      	cbz	r6, 8011730 <rcl_clock_add_jump_callback+0x5c>
 80116f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	db1b      	blt.n	8011730 <rcl_clock_add_jump_callback+0x5c>
 80116f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80116fc:	2a01      	cmp	r2, #1
 80116fe:	f173 0300 	sbcs.w	r3, r3, #0
 8011702:	da15      	bge.n	8011730 <rcl_clock_add_jump_callback+0x5c>
 8011704:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8011708:	2f00      	cmp	r7, #0
 801170a:	d042      	beq.n	8011792 <rcl_clock_add_jump_callback+0xbe>
 801170c:	2300      	movs	r3, #0
 801170e:	4602      	mov	r2, r0
 8011710:	e003      	b.n	801171a <rcl_clock_add_jump_callback+0x46>
 8011712:	42bb      	cmp	r3, r7
 8011714:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8011718:	d011      	beq.n	801173e <rcl_clock_add_jump_callback+0x6a>
 801171a:	6811      	ldr	r1, [r2, #0]
 801171c:	42b1      	cmp	r1, r6
 801171e:	f103 0301 	add.w	r3, r3, #1
 8011722:	d1f6      	bne.n	8011712 <rcl_clock_add_jump_callback+0x3e>
 8011724:	6a11      	ldr	r1, [r2, #32]
 8011726:	42a9      	cmp	r1, r5
 8011728:	d1f3      	bne.n	8011712 <rcl_clock_add_jump_callback+0x3e>
 801172a:	f04f 0e01 	mov.w	lr, #1
 801172e:	e001      	b.n	8011734 <rcl_clock_add_jump_callback+0x60>
 8011730:	f04f 0e0b 	mov.w	lr, #11
 8011734:	4670      	mov	r0, lr
 8011736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801173a:	b002      	add	sp, #8
 801173c:	4770      	bx	lr
 801173e:	3301      	adds	r3, #1
 8011740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011744:	00d9      	lsls	r1, r3, #3
 8011746:	69e3      	ldr	r3, [r4, #28]
 8011748:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801174a:	4798      	blx	r3
 801174c:	b1f0      	cbz	r0, 801178c <rcl_clock_add_jump_callback+0xb8>
 801174e:	68a3      	ldr	r3, [r4, #8]
 8011750:	6060      	str	r0, [r4, #4]
 8011752:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011756:	f10d 0c18 	add.w	ip, sp, #24
 801175a:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801175e:	f103 0801 	add.w	r8, r3, #1
 8011762:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8011766:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801176a:	f106 0708 	add.w	r7, r6, #8
 801176e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011770:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011774:	f04f 0e00 	mov.w	lr, #0
 8011778:	e887 0003 	stmia.w	r7, {r0, r1}
 801177c:	6235      	str	r5, [r6, #32]
 801177e:	4670      	mov	r0, lr
 8011780:	f8c4 8008 	str.w	r8, [r4, #8]
 8011784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011788:	b002      	add	sp, #8
 801178a:	4770      	bx	lr
 801178c:	f04f 0e0a 	mov.w	lr, #10
 8011790:	e7d0      	b.n	8011734 <rcl_clock_add_jump_callback+0x60>
 8011792:	2128      	movs	r1, #40	@ 0x28
 8011794:	e7d7      	b.n	8011746 <rcl_clock_add_jump_callback+0x72>
 8011796:	bf00      	nop

08011798 <rcl_clock_remove_jump_callback>:
 8011798:	2800      	cmp	r0, #0
 801179a:	d057      	beq.n	801184c <rcl_clock_remove_jump_callback+0xb4>
 801179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117a0:	4605      	mov	r5, r0
 80117a2:	3014      	adds	r0, #20
 80117a4:	4688      	mov	r8, r1
 80117a6:	4692      	mov	sl, r2
 80117a8:	f7f9 fc50 	bl	800b04c <rcutils_allocator_is_valid>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d03b      	beq.n	8011828 <rcl_clock_remove_jump_callback+0x90>
 80117b0:	f1b8 0f00 	cmp.w	r8, #0
 80117b4:	d038      	beq.n	8011828 <rcl_clock_remove_jump_callback+0x90>
 80117b6:	68ae      	ldr	r6, [r5, #8]
 80117b8:	b166      	cbz	r6, 80117d4 <rcl_clock_remove_jump_callback+0x3c>
 80117ba:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80117be:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80117c2:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80117c6:	464c      	mov	r4, r9
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	4543      	cmp	r3, r8
 80117cc:	d005      	beq.n	80117da <rcl_clock_remove_jump_callback+0x42>
 80117ce:	3428      	adds	r4, #40	@ 0x28
 80117d0:	42a7      	cmp	r7, r4
 80117d2:	d1f9      	bne.n	80117c8 <rcl_clock_remove_jump_callback+0x30>
 80117d4:	2001      	movs	r0, #1
 80117d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117da:	6a23      	ldr	r3, [r4, #32]
 80117dc:	3428      	adds	r4, #40	@ 0x28
 80117de:	42bc      	cmp	r4, r7
 80117e0:	d02d      	beq.n	801183e <rcl_clock_remove_jump_callback+0xa6>
 80117e2:	4553      	cmp	r3, sl
 80117e4:	d1f0      	bne.n	80117c8 <rcl_clock_remove_jump_callback+0x30>
 80117e6:	46a6      	mov	lr, r4
 80117e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117ec:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80117f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011800:	3428      	adds	r4, #40	@ 0x28
 8011802:	42a7      	cmp	r7, r4
 8011804:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011808:	d1ed      	bne.n	80117e6 <rcl_clock_remove_jump_callback+0x4e>
 801180a:	3e01      	subs	r6, #1
 801180c:	60ae      	str	r6, [r5, #8]
 801180e:	b176      	cbz	r6, 801182e <rcl_clock_remove_jump_callback+0x96>
 8011810:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8011814:	69eb      	ldr	r3, [r5, #28]
 8011816:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011818:	00f1      	lsls	r1, r6, #3
 801181a:	4648      	mov	r0, r9
 801181c:	4798      	blx	r3
 801181e:	b1b8      	cbz	r0, 8011850 <rcl_clock_remove_jump_callback+0xb8>
 8011820:	6068      	str	r0, [r5, #4]
 8011822:	2000      	movs	r0, #0
 8011824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011828:	200b      	movs	r0, #11
 801182a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801182e:	4648      	mov	r0, r9
 8011830:	69ab      	ldr	r3, [r5, #24]
 8011832:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8011834:	4798      	blx	r3
 8011836:	606e      	str	r6, [r5, #4]
 8011838:	4630      	mov	r0, r6
 801183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183e:	4553      	cmp	r3, sl
 8011840:	d1c8      	bne.n	80117d4 <rcl_clock_remove_jump_callback+0x3c>
 8011842:	3e01      	subs	r6, #1
 8011844:	60ae      	str	r6, [r5, #8]
 8011846:	2e00      	cmp	r6, #0
 8011848:	d1e2      	bne.n	8011810 <rcl_clock_remove_jump_callback+0x78>
 801184a:	e7f0      	b.n	801182e <rcl_clock_remove_jump_callback+0x96>
 801184c:	200b      	movs	r0, #11
 801184e:	4770      	bx	lr
 8011850:	200a      	movs	r0, #10
 8011852:	e7ea      	b.n	801182a <rcl_clock_remove_jump_callback+0x92>

08011854 <_rcl_timer_time_jump>:
 8011854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011858:	4605      	mov	r5, r0
 801185a:	b084      	sub	sp, #16
 801185c:	4614      	mov	r4, r2
 801185e:	b131      	cbz	r1, 801186e <_rcl_timer_time_jump+0x1a>
 8011860:	7803      	ldrb	r3, [r0, #0]
 8011862:	3b02      	subs	r3, #2
 8011864:	2b01      	cmp	r3, #1
 8011866:	d93f      	bls.n	80118e8 <_rcl_timer_time_jump+0x94>
 8011868:	b004      	add	sp, #16
 801186a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801186e:	6813      	ldr	r3, [r2, #0]
 8011870:	a902      	add	r1, sp, #8
 8011872:	6818      	ldr	r0, [r3, #0]
 8011874:	f7ff ff22 	bl	80116bc <rcl_clock_get_now>
 8011878:	2800      	cmp	r0, #0
 801187a:	d1f5      	bne.n	8011868 <_rcl_timer_time_jump+0x14>
 801187c:	6820      	ldr	r0, [r4, #0]
 801187e:	2105      	movs	r1, #5
 8011880:	3020      	adds	r0, #32
 8011882:	f001 fdf9 	bl	8013478 <__atomic_load_8>
 8011886:	6823      	ldr	r3, [r4, #0]
 8011888:	4681      	mov	r9, r0
 801188a:	4688      	mov	r8, r1
 801188c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8011890:	2105      	movs	r1, #5
 8011892:	f001 fdf1 	bl	8013478 <__atomic_load_8>
 8011896:	4607      	mov	r7, r0
 8011898:	6820      	ldr	r0, [r4, #0]
 801189a:	460e      	mov	r6, r1
 801189c:	3018      	adds	r0, #24
 801189e:	2105      	movs	r1, #5
 80118a0:	f001 fdea 	bl	8013478 <__atomic_load_8>
 80118a4:	782b      	ldrb	r3, [r5, #0]
 80118a6:	9a02      	ldr	r2, [sp, #8]
 80118a8:	3b02      	subs	r3, #2
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	460d      	mov	r5, r1
 80118ae:	9b03      	ldr	r3, [sp, #12]
 80118b0:	4682      	mov	sl, r0
 80118b2:	d937      	bls.n	8011924 <_rcl_timer_time_jump+0xd0>
 80118b4:	42ba      	cmp	r2, r7
 80118b6:	eb73 0106 	sbcs.w	r1, r3, r6
 80118ba:	da5f      	bge.n	801197c <_rcl_timer_time_jump+0x128>
 80118bc:	454a      	cmp	r2, r9
 80118be:	eb73 0108 	sbcs.w	r1, r3, r8
 80118c2:	dad1      	bge.n	8011868 <_rcl_timer_time_jump+0x14>
 80118c4:	6820      	ldr	r0, [r4, #0]
 80118c6:	eb1a 0202 	adds.w	r2, sl, r2
 80118ca:	eb43 0305 	adc.w	r3, r3, r5
 80118ce:	2505      	movs	r5, #5
 80118d0:	3028      	adds	r0, #40	@ 0x28
 80118d2:	9500      	str	r5, [sp, #0]
 80118d4:	f001 fe06 	bl	80134e4 <__atomic_store_8>
 80118d8:	6820      	ldr	r0, [r4, #0]
 80118da:	9500      	str	r5, [sp, #0]
 80118dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118e0:	3020      	adds	r0, #32
 80118e2:	f001 fdff 	bl	80134e4 <__atomic_store_8>
 80118e6:	e7bf      	b.n	8011868 <_rcl_timer_time_jump+0x14>
 80118e8:	6813      	ldr	r3, [r2, #0]
 80118ea:	a902      	add	r1, sp, #8
 80118ec:	6818      	ldr	r0, [r3, #0]
 80118ee:	f7ff fee5 	bl	80116bc <rcl_clock_get_now>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	d1b8      	bne.n	8011868 <_rcl_timer_time_jump+0x14>
 80118f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118fa:	4313      	orrs	r3, r2
 80118fc:	d0b4      	beq.n	8011868 <_rcl_timer_time_jump+0x14>
 80118fe:	6820      	ldr	r0, [r4, #0]
 8011900:	2105      	movs	r1, #5
 8011902:	3028      	adds	r0, #40	@ 0x28
 8011904:	f001 fdb8 	bl	8013478 <__atomic_load_8>
 8011908:	9d02      	ldr	r5, [sp, #8]
 801190a:	9b03      	ldr	r3, [sp, #12]
 801190c:	4602      	mov	r2, r0
 801190e:	6820      	ldr	r0, [r4, #0]
 8011910:	1b52      	subs	r2, r2, r5
 8011912:	f04f 0405 	mov.w	r4, #5
 8011916:	9400      	str	r4, [sp, #0]
 8011918:	eb61 0303 	sbc.w	r3, r1, r3
 801191c:	3030      	adds	r0, #48	@ 0x30
 801191e:	f001 fde1 	bl	80134e4 <__atomic_store_8>
 8011922:	e7a1      	b.n	8011868 <_rcl_timer_time_jump+0x14>
 8011924:	4313      	orrs	r3, r2
 8011926:	d09f      	beq.n	8011868 <_rcl_timer_time_jump+0x14>
 8011928:	6820      	ldr	r0, [r4, #0]
 801192a:	f04f 0805 	mov.w	r8, #5
 801192e:	2300      	movs	r3, #0
 8011930:	f8cd 8000 	str.w	r8, [sp]
 8011934:	3030      	adds	r0, #48	@ 0x30
 8011936:	2200      	movs	r2, #0
 8011938:	f001 fe0a 	bl	8013550 <__atomic_exchange_8>
 801193c:	ea51 0300 	orrs.w	r3, r1, r0
 8011940:	4606      	mov	r6, r0
 8011942:	460f      	mov	r7, r1
 8011944:	d090      	beq.n	8011868 <_rcl_timer_time_jump+0x14>
 8011946:	9a02      	ldr	r2, [sp, #8]
 8011948:	9b03      	ldr	r3, [sp, #12]
 801194a:	f8cd 8000 	str.w	r8, [sp]
 801194e:	1a12      	subs	r2, r2, r0
 8011950:	6820      	ldr	r0, [r4, #0]
 8011952:	eb63 0301 	sbc.w	r3, r3, r1
 8011956:	eb12 020a 	adds.w	r2, r2, sl
 801195a:	eb43 0305 	adc.w	r3, r3, r5
 801195e:	3028      	adds	r0, #40	@ 0x28
 8011960:	f001 fdc0 	bl	80134e4 <__atomic_store_8>
 8011964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011968:	f8cd 8000 	str.w	r8, [sp]
 801196c:	6820      	ldr	r0, [r4, #0]
 801196e:	1b92      	subs	r2, r2, r6
 8011970:	eb63 0307 	sbc.w	r3, r3, r7
 8011974:	3020      	adds	r0, #32
 8011976:	f001 fdb5 	bl	80134e4 <__atomic_store_8>
 801197a:	e775      	b.n	8011868 <_rcl_timer_time_jump+0x14>
 801197c:	6820      	ldr	r0, [r4, #0]
 801197e:	3008      	adds	r0, #8
 8011980:	f004 f972 	bl	8015c68 <rcl_trigger_guard_condition>
 8011984:	e770      	b.n	8011868 <_rcl_timer_time_jump+0x14>
 8011986:	bf00      	nop

08011988 <rcl_get_zero_initialized_timer>:
 8011988:	4b01      	ldr	r3, [pc, #4]	@ (8011990 <rcl_get_zero_initialized_timer+0x8>)
 801198a:	6818      	ldr	r0, [r3, #0]
 801198c:	4770      	bx	lr
 801198e:	bf00      	nop
 8011990:	08018210 	.word	0x08018210
 8011994:	00000000 	.word	0x00000000

08011998 <rcl_timer_init>:
 8011998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801199c:	b0aa      	sub	sp, #168	@ 0xa8
 801199e:	4604      	mov	r4, r0
 80119a0:	a835      	add	r0, sp, #212	@ 0xd4
 80119a2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80119a6:	460d      	mov	r5, r1
 80119a8:	4692      	mov	sl, r2
 80119aa:	f7f9 fb4f 	bl	800b04c <rcutils_allocator_is_valid>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d064      	beq.n	8011a7c <rcl_timer_init+0xe4>
 80119b2:	2c00      	cmp	r4, #0
 80119b4:	d062      	beq.n	8011a7c <rcl_timer_init+0xe4>
 80119b6:	2d00      	cmp	r5, #0
 80119b8:	d060      	beq.n	8011a7c <rcl_timer_init+0xe4>
 80119ba:	2f00      	cmp	r7, #0
 80119bc:	db5e      	blt.n	8011a7c <rcl_timer_init+0xe4>
 80119be:	6823      	ldr	r3, [r4, #0]
 80119c0:	b123      	cbz	r3, 80119cc <rcl_timer_init+0x34>
 80119c2:	2664      	movs	r6, #100	@ 0x64
 80119c4:	4630      	mov	r0, r6
 80119c6:	b02a      	add	sp, #168	@ 0xa8
 80119c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119cc:	a908      	add	r1, sp, #32
 80119ce:	4628      	mov	r0, r5
 80119d0:	f7ff fe74 	bl	80116bc <rcl_clock_get_now>
 80119d4:	4606      	mov	r6, r0
 80119d6:	2800      	cmp	r0, #0
 80119d8:	d1f4      	bne.n	80119c4 <rcl_timer_init+0x2c>
 80119da:	ae06      	add	r6, sp, #24
 80119dc:	4630      	mov	r0, r6
 80119de:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 80119e2:	f004 f849 	bl	8015a78 <rcl_get_zero_initialized_guard_condition>
 80119e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80119ea:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 80119ee:	ae0b      	add	r6, sp, #44	@ 0x2c
 80119f0:	e889 0003 	stmia.w	r9, {r0, r1}
 80119f4:	4630      	mov	r0, r6
 80119f6:	f004 f91b 	bl	8015c30 <rcl_guard_condition_get_default_options>
 80119fa:	ab0d      	add	r3, sp, #52	@ 0x34
 80119fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011a00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011a04:	4651      	mov	r1, sl
 8011a06:	e896 000c 	ldmia.w	r6, {r2, r3}
 8011a0a:	4648      	mov	r0, r9
 8011a0c:	f004 f83e 	bl	8015a8c <rcl_guard_condition_init>
 8011a10:	4606      	mov	r6, r0
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d1d6      	bne.n	80119c4 <rcl_timer_init+0x2c>
 8011a16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d033      	beq.n	8011a86 <rcl_timer_init+0xee>
 8011a1e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8011a20:	911a      	str	r1, [sp, #104]	@ 0x68
 8011a22:	4642      	mov	r2, r8
 8011a24:	463b      	mov	r3, r7
 8011a26:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8011a2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011a2e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8011ae0 <rcl_timer_init+0x148>
 8011a32:	eb12 0008 	adds.w	r0, r2, r8
 8011a36:	eb47 0103 	adc.w	r1, r7, r3
 8011a3a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8011a3e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8011a42:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8011a46:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8011a4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a4e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8011a52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a56:	f8de 3000 	ldr.w	r3, [lr]
 8011a5a:	f8cc 3000 	str.w	r3, [ip]
 8011a5e:	f04f 0a00 	mov.w	sl, #0
 8011a62:	4619      	mov	r1, r3
 8011a64:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8011a68:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8011a6a:	2050      	movs	r0, #80	@ 0x50
 8011a6c:	4798      	blx	r3
 8011a6e:	6020      	str	r0, [r4, #0]
 8011a70:	b358      	cbz	r0, 8011aca <rcl_timer_init+0x132>
 8011a72:	2250      	movs	r2, #80	@ 0x50
 8011a74:	a916      	add	r1, sp, #88	@ 0x58
 8011a76:	f004 fef2 	bl	801685e <memcpy>
 8011a7a:	e7a3      	b.n	80119c4 <rcl_timer_init+0x2c>
 8011a7c:	260b      	movs	r6, #11
 8011a7e:	4630      	mov	r0, r6
 8011a80:	b02a      	add	sp, #168	@ 0xa8
 8011a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a86:	2001      	movs	r0, #1
 8011a88:	2100      	movs	r1, #0
 8011a8a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8011a8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a92:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011a96:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8011a9a:	4a13      	ldr	r2, [pc, #76]	@ (8011ae8 <rcl_timer_init+0x150>)
 8011a9c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8011aa0:	9405      	str	r4, [sp, #20]
 8011aa2:	9204      	str	r2, [sp, #16]
 8011aa4:	ab12      	add	r3, sp, #72	@ 0x48
 8011aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011aa8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011aac:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011ab0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f7ff fe0d 	bl	80116d4 <rcl_clock_add_jump_callback>
 8011aba:	4682      	mov	sl, r0
 8011abc:	2800      	cmp	r0, #0
 8011abe:	d0ae      	beq.n	8011a1e <rcl_timer_init+0x86>
 8011ac0:	4648      	mov	r0, r9
 8011ac2:	f004 f88f 	bl	8015be4 <rcl_guard_condition_fini>
 8011ac6:	4656      	mov	r6, sl
 8011ac8:	e77c      	b.n	80119c4 <rcl_timer_init+0x2c>
 8011aca:	4648      	mov	r0, r9
 8011acc:	f004 f88a 	bl	8015be4 <rcl_guard_condition_fini>
 8011ad0:	4905      	ldr	r1, [pc, #20]	@ (8011ae8 <rcl_timer_init+0x150>)
 8011ad2:	4622      	mov	r2, r4
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	f7ff fe5f 	bl	8011798 <rcl_clock_remove_jump_callback>
 8011ada:	260a      	movs	r6, #10
 8011adc:	e772      	b.n	80119c4 <rcl_timer_init+0x2c>
 8011ade:	bf00      	nop
	...
 8011ae8:	08011855 	.word	0x08011855

08011aec <rcl_timer_call>:
 8011aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af0:	b087      	sub	sp, #28
 8011af2:	2800      	cmp	r0, #0
 8011af4:	d06d      	beq.n	8011bd2 <rcl_timer_call+0xe6>
 8011af6:	6803      	ldr	r3, [r0, #0]
 8011af8:	4604      	mov	r4, r0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d063      	beq.n	8011bc6 <rcl_timer_call+0xda>
 8011afe:	f3bf 8f5b 	dmb	ish
 8011b02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011b06:	f3bf 8f5b 	dmb	ish
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d150      	bne.n	8011bb0 <rcl_timer_call+0xc4>
 8011b0e:	6803      	ldr	r3, [r0, #0]
 8011b10:	a904      	add	r1, sp, #16
 8011b12:	6818      	ldr	r0, [r3, #0]
 8011b14:	f7ff fdd2 	bl	80116bc <rcl_clock_get_now>
 8011b18:	4605      	mov	r5, r0
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d14a      	bne.n	8011bb4 <rcl_timer_call+0xc8>
 8011b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	db4a      	blt.n	8011bbc <rcl_timer_call+0xd0>
 8011b26:	6820      	ldr	r0, [r4, #0]
 8011b28:	f04f 0a05 	mov.w	sl, #5
 8011b2c:	f8cd a000 	str.w	sl, [sp]
 8011b30:	3020      	adds	r0, #32
 8011b32:	f001 fd0d 	bl	8013550 <__atomic_exchange_8>
 8011b36:	6823      	ldr	r3, [r4, #0]
 8011b38:	f3bf 8f5b 	dmb	ish
 8011b3c:	4680      	mov	r8, r0
 8011b3e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8011b42:	f3bf 8f5b 	dmb	ish
 8011b46:	6820      	ldr	r0, [r4, #0]
 8011b48:	4689      	mov	r9, r1
 8011b4a:	3028      	adds	r0, #40	@ 0x28
 8011b4c:	4651      	mov	r1, sl
 8011b4e:	f001 fc93 	bl	8013478 <__atomic_load_8>
 8011b52:	4606      	mov	r6, r0
 8011b54:	6820      	ldr	r0, [r4, #0]
 8011b56:	460f      	mov	r7, r1
 8011b58:	3018      	adds	r0, #24
 8011b5a:	4651      	mov	r1, sl
 8011b5c:	f001 fc8c 	bl	8013478 <__atomic_load_8>
 8011b60:	1836      	adds	r6, r6, r0
 8011b62:	4602      	mov	r2, r0
 8011b64:	4682      	mov	sl, r0
 8011b66:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8011b6a:	eb47 0701 	adc.w	r7, r7, r1
 8011b6e:	4286      	cmp	r6, r0
 8011b70:	460b      	mov	r3, r1
 8011b72:	eb77 010c 	sbcs.w	r1, r7, ip
 8011b76:	da04      	bge.n	8011b82 <rcl_timer_call+0x96>
 8011b78:	ea53 0102 	orrs.w	r1, r3, r2
 8011b7c:	d12e      	bne.n	8011bdc <rcl_timer_call+0xf0>
 8011b7e:	4606      	mov	r6, r0
 8011b80:	4667      	mov	r7, ip
 8011b82:	6820      	ldr	r0, [r4, #0]
 8011b84:	2105      	movs	r1, #5
 8011b86:	4632      	mov	r2, r6
 8011b88:	463b      	mov	r3, r7
 8011b8a:	3028      	adds	r0, #40	@ 0x28
 8011b8c:	9100      	str	r1, [sp, #0]
 8011b8e:	f001 fca9 	bl	80134e4 <__atomic_store_8>
 8011b92:	f1bb 0f00 	cmp.w	fp, #0
 8011b96:	d00d      	beq.n	8011bb4 <rcl_timer_call+0xc8>
 8011b98:	9a04      	ldr	r2, [sp, #16]
 8011b9a:	9b05      	ldr	r3, [sp, #20]
 8011b9c:	ebb2 0208 	subs.w	r2, r2, r8
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	eb63 0309 	sbc.w	r3, r3, r9
 8011ba6:	47d8      	blx	fp
 8011ba8:	4628      	mov	r0, r5
 8011baa:	b007      	add	sp, #28
 8011bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb0:	f240 3521 	movw	r5, #801	@ 0x321
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	b007      	add	sp, #28
 8011bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bbc:	2501      	movs	r5, #1
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	b007      	add	sp, #28
 8011bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8011bca:	4628      	mov	r0, r5
 8011bcc:	b007      	add	sp, #28
 8011bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd2:	250b      	movs	r5, #11
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	b007      	add	sp, #28
 8011bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bdc:	1b80      	subs	r0, r0, r6
 8011bde:	eb6c 0107 	sbc.w	r1, ip, r7
 8011be2:	3801      	subs	r0, #1
 8011be4:	f161 0100 	sbc.w	r1, r1, #0
 8011be8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011bec:	f7ee fb80 	bl	80002f0 <__aeabi_ldivmod>
 8011bf0:	9b02      	ldr	r3, [sp, #8]
 8011bf2:	3001      	adds	r0, #1
 8011bf4:	f141 0100 	adc.w	r1, r1, #0
 8011bf8:	fb00 f303 	mul.w	r3, r0, r3
 8011bfc:	fb01 330a 	mla	r3, r1, sl, r3
 8011c00:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011c04:	1986      	adds	r6, r0, r6
 8011c06:	4453      	add	r3, sl
 8011c08:	eb43 0707 	adc.w	r7, r3, r7
 8011c0c:	e7b9      	b.n	8011b82 <rcl_timer_call+0x96>
 8011c0e:	bf00      	nop

08011c10 <rcl_timer_is_ready>:
 8011c10:	b570      	push	{r4, r5, r6, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	b378      	cbz	r0, 8011c76 <rcl_timer_is_ready+0x66>
 8011c16:	6803      	ldr	r3, [r0, #0]
 8011c18:	4604      	mov	r4, r0
 8011c1a:	b383      	cbz	r3, 8011c7e <rcl_timer_is_ready+0x6e>
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	b351      	cbz	r1, 8011c76 <rcl_timer_is_ready+0x66>
 8011c20:	f3bf 8f5b 	dmb	ish
 8011c24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011c28:	f3bf 8f5b 	dmb	ish
 8011c2c:	b953      	cbnz	r3, 8011c44 <rcl_timer_is_ready+0x34>
 8011c2e:	6803      	ldr	r3, [r0, #0]
 8011c30:	4669      	mov	r1, sp
 8011c32:	6818      	ldr	r0, [r3, #0]
 8011c34:	f7ff fd42 	bl	80116bc <rcl_clock_get_now>
 8011c38:	4606      	mov	r6, r0
 8011c3a:	b140      	cbz	r0, 8011c4e <rcl_timer_is_ready+0x3e>
 8011c3c:	f240 3321 	movw	r3, #801	@ 0x321
 8011c40:	4298      	cmp	r0, r3
 8011c42:	d101      	bne.n	8011c48 <rcl_timer_is_ready+0x38>
 8011c44:	2600      	movs	r6, #0
 8011c46:	702e      	strb	r6, [r5, #0]
 8011c48:	4630      	mov	r0, r6
 8011c4a:	b002      	add	sp, #8
 8011c4c:	bd70      	pop	{r4, r5, r6, pc}
 8011c4e:	6820      	ldr	r0, [r4, #0]
 8011c50:	2105      	movs	r1, #5
 8011c52:	3028      	adds	r0, #40	@ 0x28
 8011c54:	f001 fc10 	bl	8013478 <__atomic_load_8>
 8011c58:	9b00      	ldr	r3, [sp, #0]
 8011c5a:	1ac0      	subs	r0, r0, r3
 8011c5c:	9b01      	ldr	r3, [sp, #4]
 8011c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8011c62:	2801      	cmp	r0, #1
 8011c64:	f171 0300 	sbcs.w	r3, r1, #0
 8011c68:	bfb4      	ite	lt
 8011c6a:	2301      	movlt	r3, #1
 8011c6c:	2300      	movge	r3, #0
 8011c6e:	4630      	mov	r0, r6
 8011c70:	702b      	strb	r3, [r5, #0]
 8011c72:	b002      	add	sp, #8
 8011c74:	bd70      	pop	{r4, r5, r6, pc}
 8011c76:	260b      	movs	r6, #11
 8011c78:	4630      	mov	r0, r6
 8011c7a:	b002      	add	sp, #8
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
 8011c7e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011c82:	e7e1      	b.n	8011c48 <rcl_timer_is_ready+0x38>

08011c84 <rcl_timer_get_time_until_next_call>:
 8011c84:	b570      	push	{r4, r5, r6, lr}
 8011c86:	b082      	sub	sp, #8
 8011c88:	b330      	cbz	r0, 8011cd8 <rcl_timer_get_time_until_next_call+0x54>
 8011c8a:	6803      	ldr	r3, [r0, #0]
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	b33b      	cbz	r3, 8011ce0 <rcl_timer_get_time_until_next_call+0x5c>
 8011c90:	460d      	mov	r5, r1
 8011c92:	b309      	cbz	r1, 8011cd8 <rcl_timer_get_time_until_next_call+0x54>
 8011c94:	f3bf 8f5b 	dmb	ish
 8011c98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011c9c:	f3bf 8f5b 	dmb	ish
 8011ca0:	b9ab      	cbnz	r3, 8011cce <rcl_timer_get_time_until_next_call+0x4a>
 8011ca2:	6803      	ldr	r3, [r0, #0]
 8011ca4:	4669      	mov	r1, sp
 8011ca6:	6818      	ldr	r0, [r3, #0]
 8011ca8:	f7ff fd08 	bl	80116bc <rcl_clock_get_now>
 8011cac:	4606      	mov	r6, r0
 8011cae:	b958      	cbnz	r0, 8011cc8 <rcl_timer_get_time_until_next_call+0x44>
 8011cb0:	6820      	ldr	r0, [r4, #0]
 8011cb2:	2105      	movs	r1, #5
 8011cb4:	3028      	adds	r0, #40	@ 0x28
 8011cb6:	f001 fbdf 	bl	8013478 <__atomic_load_8>
 8011cba:	9b00      	ldr	r3, [sp, #0]
 8011cbc:	1ac0      	subs	r0, r0, r3
 8011cbe:	9b01      	ldr	r3, [sp, #4]
 8011cc0:	6028      	str	r0, [r5, #0]
 8011cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8011cc6:	6069      	str	r1, [r5, #4]
 8011cc8:	4630      	mov	r0, r6
 8011cca:	b002      	add	sp, #8
 8011ccc:	bd70      	pop	{r4, r5, r6, pc}
 8011cce:	f240 3621 	movw	r6, #801	@ 0x321
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	b002      	add	sp, #8
 8011cd6:	bd70      	pop	{r4, r5, r6, pc}
 8011cd8:	260b      	movs	r6, #11
 8011cda:	4630      	mov	r0, r6
 8011cdc:	b002      	add	sp, #8
 8011cde:	bd70      	pop	{r4, r5, r6, pc}
 8011ce0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8011ce4:	e7f0      	b.n	8011cc8 <rcl_timer_get_time_until_next_call+0x44>
 8011ce6:	bf00      	nop

08011ce8 <rcl_timer_get_guard_condition>:
 8011ce8:	b130      	cbz	r0, 8011cf8 <rcl_timer_get_guard_condition+0x10>
 8011cea:	6800      	ldr	r0, [r0, #0]
 8011cec:	b120      	cbz	r0, 8011cf8 <rcl_timer_get_guard_condition+0x10>
 8011cee:	68c3      	ldr	r3, [r0, #12]
 8011cf0:	b10b      	cbz	r3, 8011cf6 <rcl_timer_get_guard_condition+0xe>
 8011cf2:	3008      	adds	r0, #8
 8011cf4:	4770      	bx	lr
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	4770      	bx	lr
 8011cfa:	bf00      	nop

08011cfc <rcl_validate_enclave_name_with_size>:
 8011cfc:	b378      	cbz	r0, 8011d5e <rcl_validate_enclave_name_with_size+0x62>
 8011cfe:	b570      	push	{r4, r5, r6, lr}
 8011d00:	4615      	mov	r5, r2
 8011d02:	b0c2      	sub	sp, #264	@ 0x108
 8011d04:	b302      	cbz	r2, 8011d48 <rcl_validate_enclave_name_with_size+0x4c>
 8011d06:	461e      	mov	r6, r3
 8011d08:	466a      	mov	r2, sp
 8011d0a:	ab01      	add	r3, sp, #4
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	f002 f835 	bl	8013d7c <rmw_validate_namespace_with_size>
 8011d12:	4684      	mov	ip, r0
 8011d14:	b9e8      	cbnz	r0, 8011d52 <rcl_validate_enclave_name_with_size+0x56>
 8011d16:	9b00      	ldr	r3, [sp, #0]
 8011d18:	b923      	cbnz	r3, 8011d24 <rcl_validate_enclave_name_with_size+0x28>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	602b      	str	r3, [r5, #0]
 8011d1e:	4660      	mov	r0, ip
 8011d20:	b042      	add	sp, #264	@ 0x108
 8011d22:	bd70      	pop	{r4, r5, r6, pc}
 8011d24:	2b07      	cmp	r3, #7
 8011d26:	d007      	beq.n	8011d38 <rcl_validate_enclave_name_with_size+0x3c>
 8011d28:	1e5a      	subs	r2, r3, #1
 8011d2a:	2a05      	cmp	r2, #5
 8011d2c:	d833      	bhi.n	8011d96 <rcl_validate_enclave_name_with_size+0x9a>
 8011d2e:	e8df f002 	tbb	[pc, r2]
 8011d32:	2c2f      	.short	0x2c2f
 8011d34:	1a232629 	.word	0x1a232629
 8011d38:	2cff      	cmp	r4, #255	@ 0xff
 8011d3a:	d9ee      	bls.n	8011d1a <rcl_validate_enclave_name_with_size+0x1e>
 8011d3c:	602b      	str	r3, [r5, #0]
 8011d3e:	2e00      	cmp	r6, #0
 8011d40:	d0ed      	beq.n	8011d1e <rcl_validate_enclave_name_with_size+0x22>
 8011d42:	23fe      	movs	r3, #254	@ 0xfe
 8011d44:	6033      	str	r3, [r6, #0]
 8011d46:	e7ea      	b.n	8011d1e <rcl_validate_enclave_name_with_size+0x22>
 8011d48:	f04f 0c0b 	mov.w	ip, #11
 8011d4c:	4660      	mov	r0, ip
 8011d4e:	b042      	add	sp, #264	@ 0x108
 8011d50:	bd70      	pop	{r4, r5, r6, pc}
 8011d52:	f7fe fcd3 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 8011d56:	4684      	mov	ip, r0
 8011d58:	4660      	mov	r0, ip
 8011d5a:	b042      	add	sp, #264	@ 0x108
 8011d5c:	bd70      	pop	{r4, r5, r6, pc}
 8011d5e:	f04f 0c0b 	mov.w	ip, #11
 8011d62:	4660      	mov	r0, ip
 8011d64:	4770      	bx	lr
 8011d66:	2306      	movs	r3, #6
 8011d68:	602b      	str	r3, [r5, #0]
 8011d6a:	2e00      	cmp	r6, #0
 8011d6c:	d0d7      	beq.n	8011d1e <rcl_validate_enclave_name_with_size+0x22>
 8011d6e:	9b01      	ldr	r3, [sp, #4]
 8011d70:	6033      	str	r3, [r6, #0]
 8011d72:	4660      	mov	r0, ip
 8011d74:	b042      	add	sp, #264	@ 0x108
 8011d76:	bd70      	pop	{r4, r5, r6, pc}
 8011d78:	2305      	movs	r3, #5
 8011d7a:	602b      	str	r3, [r5, #0]
 8011d7c:	e7f5      	b.n	8011d6a <rcl_validate_enclave_name_with_size+0x6e>
 8011d7e:	2304      	movs	r3, #4
 8011d80:	602b      	str	r3, [r5, #0]
 8011d82:	e7f2      	b.n	8011d6a <rcl_validate_enclave_name_with_size+0x6e>
 8011d84:	2303      	movs	r3, #3
 8011d86:	602b      	str	r3, [r5, #0]
 8011d88:	e7ef      	b.n	8011d6a <rcl_validate_enclave_name_with_size+0x6e>
 8011d8a:	2302      	movs	r3, #2
 8011d8c:	602b      	str	r3, [r5, #0]
 8011d8e:	e7ec      	b.n	8011d6a <rcl_validate_enclave_name_with_size+0x6e>
 8011d90:	2301      	movs	r3, #1
 8011d92:	602b      	str	r3, [r5, #0]
 8011d94:	e7e9      	b.n	8011d6a <rcl_validate_enclave_name_with_size+0x6e>
 8011d96:	4a04      	ldr	r2, [pc, #16]	@ (8011da8 <rcl_validate_enclave_name_with_size+0xac>)
 8011d98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d9c:	a802      	add	r0, sp, #8
 8011d9e:	f001 fd25 	bl	80137ec <rcutils_snprintf>
 8011da2:	f04f 0c01 	mov.w	ip, #1
 8011da6:	e7ba      	b.n	8011d1e <rcl_validate_enclave_name_with_size+0x22>
 8011da8:	08018214 	.word	0x08018214

08011dac <rcl_validate_enclave_name>:
 8011dac:	b168      	cbz	r0, 8011dca <rcl_validate_enclave_name+0x1e>
 8011dae:	b570      	push	{r4, r5, r6, lr}
 8011db0:	460d      	mov	r5, r1
 8011db2:	4616      	mov	r6, r2
 8011db4:	4604      	mov	r4, r0
 8011db6:	f7ee fa3d 	bl	8000234 <strlen>
 8011dba:	4633      	mov	r3, r6
 8011dbc:	4601      	mov	r1, r0
 8011dbe:	462a      	mov	r2, r5
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011dc6:	f7ff bf99 	b.w	8011cfc <rcl_validate_enclave_name_with_size>
 8011dca:	200b      	movs	r0, #11
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop

08011dd0 <rcl_get_zero_initialized_wait_set>:
 8011dd0:	b510      	push	{r4, lr}
 8011dd2:	4c08      	ldr	r4, [pc, #32]	@ (8011df4 <rcl_get_zero_initialized_wait_set+0x24>)
 8011dd4:	4686      	mov	lr, r0
 8011dd6:	4684      	mov	ip, r0
 8011dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011dda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011de0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011de6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011dea:	6823      	ldr	r3, [r4, #0]
 8011dec:	f8cc 3000 	str.w	r3, [ip]
 8011df0:	4670      	mov	r0, lr
 8011df2:	bd10      	pop	{r4, pc}
 8011df4:	08018274 	.word	0x08018274

08011df8 <rcl_wait_set_is_valid>:
 8011df8:	b118      	cbz	r0, 8011e02 <rcl_wait_set_is_valid+0xa>
 8011dfa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011dfc:	3800      	subs	r0, #0
 8011dfe:	bf18      	it	ne
 8011e00:	2001      	movne	r0, #1
 8011e02:	4770      	bx	lr

08011e04 <rcl_wait_set_fini>:
 8011e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e08:	b082      	sub	sp, #8
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	f000 8095 	beq.w	8011f3a <rcl_wait_set_fini+0x136>
 8011e10:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8011e12:	4604      	mov	r4, r0
 8011e14:	2e00      	cmp	r6, #0
 8011e16:	f000 808c 	beq.w	8011f32 <rcl_wait_set_fini+0x12e>
 8011e1a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8011e1c:	f002 fd68 	bl	80148f0 <rmw_destroy_wait_set>
 8011e20:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011e22:	1e06      	subs	r6, r0, #0
 8011e24:	bf18      	it	ne
 8011e26:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8011e2a:	2d00      	cmp	r5, #0
 8011e2c:	f000 8081 	beq.w	8011f32 <rcl_wait_set_fini+0x12e>
 8011e30:	6820      	ldr	r0, [r4, #0]
 8011e32:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011e36:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011e38:	2700      	movs	r7, #0
 8011e3a:	6067      	str	r7, [r4, #4]
 8011e3c:	602f      	str	r7, [r5, #0]
 8011e3e:	b120      	cbz	r0, 8011e4a <rcl_wait_set_fini+0x46>
 8011e40:	9101      	str	r1, [sp, #4]
 8011e42:	47c0      	blx	r8
 8011e44:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011e46:	9901      	ldr	r1, [sp, #4]
 8011e48:	6027      	str	r7, [r4, #0]
 8011e4a:	68a8      	ldr	r0, [r5, #8]
 8011e4c:	b120      	cbz	r0, 8011e58 <rcl_wait_set_fini+0x54>
 8011e4e:	47c0      	blx	r8
 8011e50:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011e52:	2300      	movs	r3, #0
 8011e54:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011e58:	68a0      	ldr	r0, [r4, #8]
 8011e5a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011e5c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011e5e:	f04f 0800 	mov.w	r8, #0
 8011e62:	f8c4 800c 	str.w	r8, [r4, #12]
 8011e66:	f8c5 800c 	str.w	r8, [r5, #12]
 8011e6a:	b128      	cbz	r0, 8011e78 <rcl_wait_set_fini+0x74>
 8011e6c:	47b8      	blx	r7
 8011e6e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011e70:	f8c4 8008 	str.w	r8, [r4, #8]
 8011e74:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011e76:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011e78:	6968      	ldr	r0, [r5, #20]
 8011e7a:	f04f 0800 	mov.w	r8, #0
 8011e7e:	f8c5 8010 	str.w	r8, [r5, #16]
 8011e82:	b128      	cbz	r0, 8011e90 <rcl_wait_set_fini+0x8c>
 8011e84:	47b8      	blx	r7
 8011e86:	f8c5 8014 	str.w	r8, [r5, #20]
 8011e8a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011e8c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011e8e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011e90:	6920      	ldr	r0, [r4, #16]
 8011e92:	f04f 0800 	mov.w	r8, #0
 8011e96:	f8c4 8014 	str.w	r8, [r4, #20]
 8011e9a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8011e9e:	b128      	cbz	r0, 8011eac <rcl_wait_set_fini+0xa8>
 8011ea0:	47b8      	blx	r7
 8011ea2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011ea4:	f8c4 8010 	str.w	r8, [r4, #16]
 8011ea8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8011eaa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011eac:	69a0      	ldr	r0, [r4, #24]
 8011eae:	f04f 0800 	mov.w	r8, #0
 8011eb2:	f8c4 801c 	str.w	r8, [r4, #28]
 8011eb6:	f8c5 8018 	str.w	r8, [r5, #24]
 8011eba:	b128      	cbz	r0, 8011ec8 <rcl_wait_set_fini+0xc4>
 8011ebc:	9101      	str	r1, [sp, #4]
 8011ebe:	47b8      	blx	r7
 8011ec0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011ec2:	9901      	ldr	r1, [sp, #4]
 8011ec4:	f8c4 8018 	str.w	r8, [r4, #24]
 8011ec8:	6a28      	ldr	r0, [r5, #32]
 8011eca:	b120      	cbz	r0, 8011ed6 <rcl_wait_set_fini+0xd2>
 8011ecc:	47b8      	blx	r7
 8011ece:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011ed6:	6a20      	ldr	r0, [r4, #32]
 8011ed8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011edc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011ede:	2700      	movs	r7, #0
 8011ee0:	6267      	str	r7, [r4, #36]	@ 0x24
 8011ee2:	626f      	str	r7, [r5, #36]	@ 0x24
 8011ee4:	b120      	cbz	r0, 8011ef0 <rcl_wait_set_fini+0xec>
 8011ee6:	9101      	str	r1, [sp, #4]
 8011ee8:	47c0      	blx	r8
 8011eea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011eec:	9901      	ldr	r1, [sp, #4]
 8011eee:	6227      	str	r7, [r4, #32]
 8011ef0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8011ef2:	b120      	cbz	r0, 8011efe <rcl_wait_set_fini+0xfa>
 8011ef4:	47c0      	blx	r8
 8011ef6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011ef8:	2300      	movs	r3, #0
 8011efa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8011efe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011f00:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8011f04:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011f06:	2700      	movs	r7, #0
 8011f08:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8011f0a:	632f      	str	r7, [r5, #48]	@ 0x30
 8011f0c:	b120      	cbz	r0, 8011f18 <rcl_wait_set_fini+0x114>
 8011f0e:	9101      	str	r1, [sp, #4]
 8011f10:	47c0      	blx	r8
 8011f12:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011f14:	9901      	ldr	r1, [sp, #4]
 8011f16:	62a7      	str	r7, [r4, #40]	@ 0x28
 8011f18:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8011f1a:	b120      	cbz	r0, 8011f26 <rcl_wait_set_fini+0x122>
 8011f1c:	47c0      	blx	r8
 8011f1e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8011f20:	2300      	movs	r3, #0
 8011f22:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8011f26:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011f28:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	4798      	blx	r3
 8011f2e:	2300      	movs	r3, #0
 8011f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8011f32:	4630      	mov	r0, r6
 8011f34:	b002      	add	sp, #8
 8011f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f3a:	260b      	movs	r6, #11
 8011f3c:	4630      	mov	r0, r6
 8011f3e:	b002      	add	sp, #8
 8011f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f44 <rcl_wait_set_add_subscription>:
 8011f44:	b318      	cbz	r0, 8011f8e <rcl_wait_set_add_subscription+0x4a>
 8011f46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011f48:	b570      	push	{r4, r5, r6, lr}
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	b30b      	cbz	r3, 8011f92 <rcl_wait_set_add_subscription+0x4e>
 8011f4e:	b319      	cbz	r1, 8011f98 <rcl_wait_set_add_subscription+0x54>
 8011f50:	681d      	ldr	r5, [r3, #0]
 8011f52:	6840      	ldr	r0, [r0, #4]
 8011f54:	4285      	cmp	r5, r0
 8011f56:	d217      	bcs.n	8011f88 <rcl_wait_set_add_subscription+0x44>
 8011f58:	6820      	ldr	r0, [r4, #0]
 8011f5a:	1c6e      	adds	r6, r5, #1
 8011f5c:	601e      	str	r6, [r3, #0]
 8011f5e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011f62:	b102      	cbz	r2, 8011f66 <rcl_wait_set_add_subscription+0x22>
 8011f64:	6015      	str	r5, [r2, #0]
 8011f66:	4608      	mov	r0, r1
 8011f68:	f7ff fb08 	bl	801157c <rcl_subscription_get_rmw_handle>
 8011f6c:	b150      	cbz	r0, 8011f84 <rcl_wait_set_add_subscription+0x40>
 8011f6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011f70:	6842      	ldr	r2, [r0, #4]
 8011f72:	689b      	ldr	r3, [r3, #8]
 8011f74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f78:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011f7a:	6853      	ldr	r3, [r2, #4]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	2000      	movs	r0, #0
 8011f80:	6053      	str	r3, [r2, #4]
 8011f82:	bd70      	pop	{r4, r5, r6, pc}
 8011f84:	2001      	movs	r0, #1
 8011f86:	bd70      	pop	{r4, r5, r6, pc}
 8011f88:	f240 3086 	movw	r0, #902	@ 0x386
 8011f8c:	bd70      	pop	{r4, r5, r6, pc}
 8011f8e:	200b      	movs	r0, #11
 8011f90:	4770      	bx	lr
 8011f92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	200b      	movs	r0, #11
 8011f9a:	bd70      	pop	{r4, r5, r6, pc}

08011f9c <rcl_wait_set_clear>:
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	d073      	beq.n	8012088 <rcl_wait_set_clear+0xec>
 8011fa0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011fa2:	b510      	push	{r4, lr}
 8011fa4:	4604      	mov	r4, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d070      	beq.n	801208c <rcl_wait_set_clear+0xf0>
 8011faa:	6800      	ldr	r0, [r0, #0]
 8011fac:	b138      	cbz	r0, 8011fbe <rcl_wait_set_clear+0x22>
 8011fae:	6862      	ldr	r2, [r4, #4]
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	0092      	lsls	r2, r2, #2
 8011fb4:	f004 fb8a 	bl	80166cc <memset>
 8011fb8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011fba:	2200      	movs	r2, #0
 8011fbc:	601a      	str	r2, [r3, #0]
 8011fbe:	68a0      	ldr	r0, [r4, #8]
 8011fc0:	b138      	cbz	r0, 8011fd2 <rcl_wait_set_clear+0x36>
 8011fc2:	68e2      	ldr	r2, [r4, #12]
 8011fc4:	2100      	movs	r1, #0
 8011fc6:	0092      	lsls	r2, r2, #2
 8011fc8:	f004 fb80 	bl	80166cc <memset>
 8011fcc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011fce:	2200      	movs	r2, #0
 8011fd0:	60da      	str	r2, [r3, #12]
 8011fd2:	69a0      	ldr	r0, [r4, #24]
 8011fd4:	b138      	cbz	r0, 8011fe6 <rcl_wait_set_clear+0x4a>
 8011fd6:	69e2      	ldr	r2, [r4, #28]
 8011fd8:	2100      	movs	r1, #0
 8011fda:	0092      	lsls	r2, r2, #2
 8011fdc:	f004 fb76 	bl	80166cc <memset>
 8011fe0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	619a      	str	r2, [r3, #24]
 8011fe6:	6a20      	ldr	r0, [r4, #32]
 8011fe8:	b138      	cbz	r0, 8011ffa <rcl_wait_set_clear+0x5e>
 8011fea:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011fec:	2100      	movs	r1, #0
 8011fee:	0092      	lsls	r2, r2, #2
 8011ff0:	f004 fb6c 	bl	80166cc <memset>
 8011ff4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	625a      	str	r2, [r3, #36]	@ 0x24
 8011ffa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8011ffc:	b138      	cbz	r0, 801200e <rcl_wait_set_clear+0x72>
 8011ffe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012000:	2100      	movs	r1, #0
 8012002:	0092      	lsls	r2, r2, #2
 8012004:	f004 fb62 	bl	80166cc <memset>
 8012008:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801200a:	2200      	movs	r2, #0
 801200c:	631a      	str	r2, [r3, #48]	@ 0x30
 801200e:	6920      	ldr	r0, [r4, #16]
 8012010:	b138      	cbz	r0, 8012022 <rcl_wait_set_clear+0x86>
 8012012:	6962      	ldr	r2, [r4, #20]
 8012014:	2100      	movs	r1, #0
 8012016:	0092      	lsls	r2, r2, #2
 8012018:	f004 fb58 	bl	80166cc <memset>
 801201c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801201e:	2200      	movs	r2, #0
 8012020:	641a      	str	r2, [r3, #64]	@ 0x40
 8012022:	6898      	ldr	r0, [r3, #8]
 8012024:	b138      	cbz	r0, 8012036 <rcl_wait_set_clear+0x9a>
 8012026:	685a      	ldr	r2, [r3, #4]
 8012028:	2100      	movs	r1, #0
 801202a:	0092      	lsls	r2, r2, #2
 801202c:	f004 fb4e 	bl	80166cc <memset>
 8012030:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012032:	2200      	movs	r2, #0
 8012034:	605a      	str	r2, [r3, #4]
 8012036:	6958      	ldr	r0, [r3, #20]
 8012038:	b138      	cbz	r0, 801204a <rcl_wait_set_clear+0xae>
 801203a:	691a      	ldr	r2, [r3, #16]
 801203c:	2100      	movs	r1, #0
 801203e:	0092      	lsls	r2, r2, #2
 8012040:	f004 fb44 	bl	80166cc <memset>
 8012044:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012046:	2200      	movs	r2, #0
 8012048:	611a      	str	r2, [r3, #16]
 801204a:	6a18      	ldr	r0, [r3, #32]
 801204c:	b138      	cbz	r0, 801205e <rcl_wait_set_clear+0xc2>
 801204e:	69da      	ldr	r2, [r3, #28]
 8012050:	2100      	movs	r1, #0
 8012052:	0092      	lsls	r2, r2, #2
 8012054:	f004 fb3a 	bl	80166cc <memset>
 8012058:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801205a:	2200      	movs	r2, #0
 801205c:	61da      	str	r2, [r3, #28]
 801205e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012060:	b138      	cbz	r0, 8012072 <rcl_wait_set_clear+0xd6>
 8012062:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012064:	2100      	movs	r1, #0
 8012066:	0092      	lsls	r2, r2, #2
 8012068:	f004 fb30 	bl	80166cc <memset>
 801206c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801206e:	2200      	movs	r2, #0
 8012070:	629a      	str	r2, [r3, #40]	@ 0x28
 8012072:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012074:	b138      	cbz	r0, 8012086 <rcl_wait_set_clear+0xea>
 8012076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012078:	2100      	movs	r1, #0
 801207a:	0092      	lsls	r2, r2, #2
 801207c:	f004 fb26 	bl	80166cc <memset>
 8012080:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012082:	2000      	movs	r0, #0
 8012084:	6358      	str	r0, [r3, #52]	@ 0x34
 8012086:	bd10      	pop	{r4, pc}
 8012088:	200b      	movs	r0, #11
 801208a:	4770      	bx	lr
 801208c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012090:	bd10      	pop	{r4, pc}
 8012092:	bf00      	nop

08012094 <rcl_wait_set_resize>:
 8012094:	2800      	cmp	r0, #0
 8012096:	f000 8185 	beq.w	80123a4 <rcl_wait_set_resize+0x310>
 801209a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801209e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80120a0:	b083      	sub	sp, #12
 80120a2:	4605      	mov	r5, r0
 80120a4:	2c00      	cmp	r4, #0
 80120a6:	f000 817f 	beq.w	80123a8 <rcl_wait_set_resize+0x314>
 80120aa:	f04f 0900 	mov.w	r9, #0
 80120ae:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80120b2:	461f      	mov	r7, r3
 80120b4:	4688      	mov	r8, r1
 80120b6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80120ba:	4616      	mov	r6, r2
 80120bc:	f8c0 9004 	str.w	r9, [r0, #4]
 80120c0:	f8c4 9000 	str.w	r9, [r4]
 80120c4:	2900      	cmp	r1, #0
 80120c6:	f000 80bd 	beq.w	8012244 <rcl_wait_set_resize+0x1b0>
 80120ca:	008c      	lsls	r4, r1, #2
 80120cc:	6800      	ldr	r0, [r0, #0]
 80120ce:	9301      	str	r3, [sp, #4]
 80120d0:	4652      	mov	r2, sl
 80120d2:	4621      	mov	r1, r4
 80120d4:	4798      	blx	r3
 80120d6:	9b01      	ldr	r3, [sp, #4]
 80120d8:	6028      	str	r0, [r5, #0]
 80120da:	2800      	cmp	r0, #0
 80120dc:	f000 80cb 	beq.w	8012276 <rcl_wait_set_resize+0x1e2>
 80120e0:	4622      	mov	r2, r4
 80120e2:	4649      	mov	r1, r9
 80120e4:	9301      	str	r3, [sp, #4]
 80120e6:	f004 faf1 	bl	80166cc <memset>
 80120ea:	f8c5 8004 	str.w	r8, [r5, #4]
 80120ee:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80120f2:	9b01      	ldr	r3, [sp, #4]
 80120f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80120f8:	f8c8 9004 	str.w	r9, [r8, #4]
 80120fc:	4652      	mov	r2, sl
 80120fe:	4621      	mov	r1, r4
 8012100:	4798      	blx	r3
 8012102:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012104:	f8c8 0008 	str.w	r0, [r8, #8]
 8012108:	689b      	ldr	r3, [r3, #8]
 801210a:	2b00      	cmp	r3, #0
 801210c:	f000 80ac 	beq.w	8012268 <rcl_wait_set_resize+0x1d4>
 8012110:	4622      	mov	r2, r4
 8012112:	4649      	mov	r1, r9
 8012114:	4618      	mov	r0, r3
 8012116:	f004 fad9 	bl	80166cc <memset>
 801211a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801211c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012120:	f04f 0800 	mov.w	r8, #0
 8012124:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8012128:	f8c5 800c 	str.w	r8, [r5, #12]
 801212c:	f8c4 800c 	str.w	r8, [r4, #12]
 8012130:	2e00      	cmp	r6, #0
 8012132:	f040 80a4 	bne.w	801227e <rcl_wait_set_resize+0x1ea>
 8012136:	68a8      	ldr	r0, [r5, #8]
 8012138:	b128      	cbz	r0, 8012146 <rcl_wait_set_resize+0xb2>
 801213a:	4649      	mov	r1, r9
 801213c:	4790      	blx	r2
 801213e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012140:	60ae      	str	r6, [r5, #8]
 8012142:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012146:	f04f 0800 	mov.w	r8, #0
 801214a:	19f6      	adds	r6, r6, r7
 801214c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012150:	f040 80ac 	bne.w	80122ac <rcl_wait_set_resize+0x218>
 8012154:	6960      	ldr	r0, [r4, #20]
 8012156:	b130      	cbz	r0, 8012166 <rcl_wait_set_resize+0xd2>
 8012158:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801215a:	4649      	mov	r1, r9
 801215c:	4798      	blx	r3
 801215e:	6166      	str	r6, [r4, #20]
 8012160:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012162:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012166:	2600      	movs	r6, #0
 8012168:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801216c:	616e      	str	r6, [r5, #20]
 801216e:	6426      	str	r6, [r4, #64]	@ 0x40
 8012170:	2f00      	cmp	r7, #0
 8012172:	f040 80ad 	bne.w	80122d0 <rcl_wait_set_resize+0x23c>
 8012176:	6928      	ldr	r0, [r5, #16]
 8012178:	b138      	cbz	r0, 801218a <rcl_wait_set_resize+0xf6>
 801217a:	4649      	mov	r1, r9
 801217c:	47d0      	blx	sl
 801217e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012180:	612f      	str	r7, [r5, #16]
 8012182:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012186:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801218a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801218c:	2600      	movs	r6, #0
 801218e:	61ee      	str	r6, [r5, #28]
 8012190:	61a6      	str	r6, [r4, #24]
 8012192:	2b00      	cmp	r3, #0
 8012194:	f040 80af 	bne.w	80122f6 <rcl_wait_set_resize+0x262>
 8012198:	69a8      	ldr	r0, [r5, #24]
 801219a:	b120      	cbz	r0, 80121a6 <rcl_wait_set_resize+0x112>
 801219c:	4649      	mov	r1, r9
 801219e:	47d0      	blx	sl
 80121a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80121a4:	61ab      	str	r3, [r5, #24]
 80121a6:	6a20      	ldr	r0, [r4, #32]
 80121a8:	b128      	cbz	r0, 80121b6 <rcl_wait_set_resize+0x122>
 80121aa:	4649      	mov	r1, r9
 80121ac:	47d0      	blx	sl
 80121ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80121b0:	2300      	movs	r3, #0
 80121b2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80121b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121b8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80121ba:	2600      	movs	r6, #0
 80121bc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80121c0:	626e      	str	r6, [r5, #36]	@ 0x24
 80121c2:	6266      	str	r6, [r4, #36]	@ 0x24
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f000 80b6 	beq.w	8012336 <rcl_wait_set_resize+0x2a2>
 80121ca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80121ce:	6a28      	ldr	r0, [r5, #32]
 80121d0:	463a      	mov	r2, r7
 80121d2:	4651      	mov	r1, sl
 80121d4:	47c8      	blx	r9
 80121d6:	6228      	str	r0, [r5, #32]
 80121d8:	2800      	cmp	r0, #0
 80121da:	d04c      	beq.n	8012276 <rcl_wait_set_resize+0x1e2>
 80121dc:	4652      	mov	r2, sl
 80121de:	4631      	mov	r1, r6
 80121e0:	f004 fa74 	bl	80166cc <memset>
 80121e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80121e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80121e8:	626b      	str	r3, [r5, #36]	@ 0x24
 80121ea:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80121ec:	62a6      	str	r6, [r4, #40]	@ 0x28
 80121ee:	463a      	mov	r2, r7
 80121f0:	4651      	mov	r1, sl
 80121f2:	47c8      	blx	r9
 80121f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80121f6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80121f8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80121fa:	2c00      	cmp	r4, #0
 80121fc:	f000 80f0 	beq.w	80123e0 <rcl_wait_set_resize+0x34c>
 8012200:	4620      	mov	r0, r4
 8012202:	4652      	mov	r2, sl
 8012204:	4631      	mov	r1, r6
 8012206:	f004 fa61 	bl	80166cc <memset>
 801220a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801220c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801220e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012210:	2600      	movs	r6, #0
 8012212:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012216:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8012218:	6326      	str	r6, [r4, #48]	@ 0x30
 801221a:	2b00      	cmp	r3, #0
 801221c:	f040 809d 	bne.w	801235a <rcl_wait_set_resize+0x2c6>
 8012220:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012222:	b120      	cbz	r0, 801222e <rcl_wait_set_resize+0x19a>
 8012224:	4639      	mov	r1, r7
 8012226:	47c0      	blx	r8
 8012228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801222a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801222c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801222e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012230:	b310      	cbz	r0, 8012278 <rcl_wait_set_resize+0x1e4>
 8012232:	4639      	mov	r1, r7
 8012234:	47c0      	blx	r8
 8012236:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012238:	2000      	movs	r0, #0
 801223a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801223e:	b003      	add	sp, #12
 8012240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012244:	6800      	ldr	r0, [r0, #0]
 8012246:	b120      	cbz	r0, 8012252 <rcl_wait_set_resize+0x1be>
 8012248:	4651      	mov	r1, sl
 801224a:	47d8      	blx	fp
 801224c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801224e:	f8c5 8000 	str.w	r8, [r5]
 8012252:	68a0      	ldr	r0, [r4, #8]
 8012254:	2800      	cmp	r0, #0
 8012256:	f43f af61 	beq.w	801211c <rcl_wait_set_resize+0x88>
 801225a:	4651      	mov	r1, sl
 801225c:	47d8      	blx	fp
 801225e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012260:	2300      	movs	r3, #0
 8012262:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8012266:	e759      	b.n	801211c <rcl_wait_set_resize+0x88>
 8012268:	6828      	ldr	r0, [r5, #0]
 801226a:	9301      	str	r3, [sp, #4]
 801226c:	4651      	mov	r1, sl
 801226e:	47d8      	blx	fp
 8012270:	9b01      	ldr	r3, [sp, #4]
 8012272:	e9c5 3300 	strd	r3, r3, [r5]
 8012276:	200a      	movs	r0, #10
 8012278:	b003      	add	sp, #12
 801227a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801227e:	00b4      	lsls	r4, r6, #2
 8012280:	68a8      	ldr	r0, [r5, #8]
 8012282:	464a      	mov	r2, r9
 8012284:	4621      	mov	r1, r4
 8012286:	4798      	blx	r3
 8012288:	60a8      	str	r0, [r5, #8]
 801228a:	2800      	cmp	r0, #0
 801228c:	d0f3      	beq.n	8012276 <rcl_wait_set_resize+0x1e2>
 801228e:	4622      	mov	r2, r4
 8012290:	4641      	mov	r1, r8
 8012292:	f004 fa1b 	bl	80166cc <memset>
 8012296:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012298:	60ee      	str	r6, [r5, #12]
 801229a:	f04f 0800 	mov.w	r8, #0
 801229e:	19f6      	adds	r6, r6, r7
 80122a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80122a4:	f8c4 8010 	str.w	r8, [r4, #16]
 80122a8:	f43f af54 	beq.w	8012154 <rcl_wait_set_resize+0xc0>
 80122ac:	00b6      	lsls	r6, r6, #2
 80122ae:	464a      	mov	r2, r9
 80122b0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80122b2:	6960      	ldr	r0, [r4, #20]
 80122b4:	4631      	mov	r1, r6
 80122b6:	4798      	blx	r3
 80122b8:	4681      	mov	r9, r0
 80122ba:	6160      	str	r0, [r4, #20]
 80122bc:	2800      	cmp	r0, #0
 80122be:	d076      	beq.n	80123ae <rcl_wait_set_resize+0x31a>
 80122c0:	4632      	mov	r2, r6
 80122c2:	4641      	mov	r1, r8
 80122c4:	f004 fa02 	bl	80166cc <memset>
 80122c8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80122ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80122ce:	e74a      	b.n	8012166 <rcl_wait_set_resize+0xd2>
 80122d0:	00bc      	lsls	r4, r7, #2
 80122d2:	6928      	ldr	r0, [r5, #16]
 80122d4:	464a      	mov	r2, r9
 80122d6:	4621      	mov	r1, r4
 80122d8:	47c0      	blx	r8
 80122da:	6128      	str	r0, [r5, #16]
 80122dc:	2800      	cmp	r0, #0
 80122de:	d0ca      	beq.n	8012276 <rcl_wait_set_resize+0x1e2>
 80122e0:	4622      	mov	r2, r4
 80122e2:	4631      	mov	r1, r6
 80122e4:	f004 f9f2 	bl	80166cc <memset>
 80122e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80122ea:	616f      	str	r7, [r5, #20]
 80122ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80122f0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80122f4:	e749      	b.n	801218a <rcl_wait_set_resize+0xf6>
 80122f6:	009c      	lsls	r4, r3, #2
 80122f8:	69a8      	ldr	r0, [r5, #24]
 80122fa:	464a      	mov	r2, r9
 80122fc:	4621      	mov	r1, r4
 80122fe:	47c0      	blx	r8
 8012300:	61a8      	str	r0, [r5, #24]
 8012302:	2800      	cmp	r0, #0
 8012304:	d0b7      	beq.n	8012276 <rcl_wait_set_resize+0x1e2>
 8012306:	4622      	mov	r2, r4
 8012308:	4631      	mov	r1, r6
 801230a:	f004 f9df 	bl	80166cc <memset>
 801230e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8012310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012312:	61eb      	str	r3, [r5, #28]
 8012314:	6a38      	ldr	r0, [r7, #32]
 8012316:	61fe      	str	r6, [r7, #28]
 8012318:	464a      	mov	r2, r9
 801231a:	4621      	mov	r1, r4
 801231c:	47c0      	blx	r8
 801231e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012320:	6238      	str	r0, [r7, #32]
 8012322:	6a1f      	ldr	r7, [r3, #32]
 8012324:	2f00      	cmp	r7, #0
 8012326:	d054      	beq.n	80123d2 <rcl_wait_set_resize+0x33e>
 8012328:	4622      	mov	r2, r4
 801232a:	4631      	mov	r1, r6
 801232c:	4638      	mov	r0, r7
 801232e:	f004 f9cd 	bl	80166cc <memset>
 8012332:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012334:	e73f      	b.n	80121b6 <rcl_wait_set_resize+0x122>
 8012336:	6a28      	ldr	r0, [r5, #32]
 8012338:	b120      	cbz	r0, 8012344 <rcl_wait_set_resize+0x2b0>
 801233a:	4639      	mov	r1, r7
 801233c:	47c0      	blx	r8
 801233e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012340:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012342:	622b      	str	r3, [r5, #32]
 8012344:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012346:	2800      	cmp	r0, #0
 8012348:	f43f af60 	beq.w	801220c <rcl_wait_set_resize+0x178>
 801234c:	4639      	mov	r1, r7
 801234e:	47c0      	blx	r8
 8012350:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012352:	2300      	movs	r3, #0
 8012354:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8012358:	e758      	b.n	801220c <rcl_wait_set_resize+0x178>
 801235a:	009c      	lsls	r4, r3, #2
 801235c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801235e:	463a      	mov	r2, r7
 8012360:	4621      	mov	r1, r4
 8012362:	47c8      	blx	r9
 8012364:	62a8      	str	r0, [r5, #40]	@ 0x28
 8012366:	2800      	cmp	r0, #0
 8012368:	d085      	beq.n	8012276 <rcl_wait_set_resize+0x1e2>
 801236a:	4622      	mov	r2, r4
 801236c:	4631      	mov	r1, r6
 801236e:	f004 f9ad 	bl	80166cc <memset>
 8012372:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8012376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012378:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801237a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801237e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8012382:	463a      	mov	r2, r7
 8012384:	4621      	mov	r1, r4
 8012386:	47c8      	blx	r9
 8012388:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801238a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801238e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012390:	b36b      	cbz	r3, 80123ee <rcl_wait_set_resize+0x35a>
 8012392:	4622      	mov	r2, r4
 8012394:	4631      	mov	r1, r6
 8012396:	4618      	mov	r0, r3
 8012398:	f004 f998 	bl	80166cc <memset>
 801239c:	4630      	mov	r0, r6
 801239e:	b003      	add	sp, #12
 80123a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a4:	200b      	movs	r0, #11
 80123a6:	4770      	bx	lr
 80123a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80123ac:	e764      	b.n	8012278 <rcl_wait_set_resize+0x1e4>
 80123ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80123b0:	68a8      	ldr	r0, [r5, #8]
 80123b2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80123b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123b6:	4798      	blx	r3
 80123b8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80123ba:	6928      	ldr	r0, [r5, #16]
 80123bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80123be:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80123c0:	f8c5 900c 	str.w	r9, [r5, #12]
 80123c4:	f8c5 9008 	str.w	r9, [r5, #8]
 80123c8:	4790      	blx	r2
 80123ca:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80123ce:	200a      	movs	r0, #10
 80123d0:	e752      	b.n	8012278 <rcl_wait_set_resize+0x1e4>
 80123d2:	69a8      	ldr	r0, [r5, #24]
 80123d4:	4649      	mov	r1, r9
 80123d6:	47d0      	blx	sl
 80123d8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80123dc:	200a      	movs	r0, #10
 80123de:	e74b      	b.n	8012278 <rcl_wait_set_resize+0x1e4>
 80123e0:	6a28      	ldr	r0, [r5, #32]
 80123e2:	4639      	mov	r1, r7
 80123e4:	47c0      	blx	r8
 80123e6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80123ea:	200a      	movs	r0, #10
 80123ec:	e744      	b.n	8012278 <rcl_wait_set_resize+0x1e4>
 80123ee:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80123f0:	9301      	str	r3, [sp, #4]
 80123f2:	4639      	mov	r1, r7
 80123f4:	47c0      	blx	r8
 80123f6:	9b01      	ldr	r3, [sp, #4]
 80123f8:	200a      	movs	r0, #10
 80123fa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80123fe:	e73b      	b.n	8012278 <rcl_wait_set_resize+0x1e4>

08012400 <rcl_wait_set_init>:
 8012400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012404:	b084      	sub	sp, #16
 8012406:	4604      	mov	r4, r0
 8012408:	a810      	add	r0, sp, #64	@ 0x40
 801240a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801240e:	460f      	mov	r7, r1
 8012410:	4690      	mov	r8, r2
 8012412:	4699      	mov	r9, r3
 8012414:	f7f8 fe1a 	bl	800b04c <rcutils_allocator_is_valid>
 8012418:	2800      	cmp	r0, #0
 801241a:	d06b      	beq.n	80124f4 <rcl_wait_set_init+0xf4>
 801241c:	2c00      	cmp	r4, #0
 801241e:	d069      	beq.n	80124f4 <rcl_wait_set_init+0xf4>
 8012420:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012422:	b125      	cbz	r5, 801242e <rcl_wait_set_init+0x2e>
 8012424:	2564      	movs	r5, #100	@ 0x64
 8012426:	4628      	mov	r0, r5
 8012428:	b004      	add	sp, #16
 801242a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801242e:	f1ba 0f00 	cmp.w	sl, #0
 8012432:	d05f      	beq.n	80124f4 <rcl_wait_set_init+0xf4>
 8012434:	4650      	mov	r0, sl
 8012436:	f7fe f97f 	bl	8010738 <rcl_context_is_valid>
 801243a:	2800      	cmp	r0, #0
 801243c:	d067      	beq.n	801250e <rcl_wait_set_init+0x10e>
 801243e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012440:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012442:	205c      	movs	r0, #92	@ 0x5c
 8012444:	4798      	blx	r3
 8012446:	6320      	str	r0, [r4, #48]	@ 0x30
 8012448:	2800      	cmp	r0, #0
 801244a:	d062      	beq.n	8012512 <rcl_wait_set_init+0x112>
 801244c:	4629      	mov	r1, r5
 801244e:	225c      	movs	r2, #92	@ 0x5c
 8012450:	f004 f93c 	bl	80166cc <memset>
 8012454:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012458:	eb03 0e02 	add.w	lr, r3, r2
 801245c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801245e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012460:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012464:	449e      	add	lr, r3
 8012466:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801246a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801246e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012472:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8012476:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801247a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801247e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8012482:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8012486:	f8da a000 	ldr.w	sl, [sl]
 801248a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801248c:	44c6      	add	lr, r8
 801248e:	f8dc 3000 	ldr.w	r3, [ip]
 8012492:	602b      	str	r3, [r5, #0]
 8012494:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8012498:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801249c:	f002 fa1e 	bl	80148dc <rmw_create_wait_set>
 80124a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124a2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80124a4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80124a6:	b350      	cbz	r0, 80124fe <rcl_wait_set_init+0xfe>
 80124a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124aa:	9302      	str	r3, [sp, #8]
 80124ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80124ae:	9301      	str	r3, [sp, #4]
 80124b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124b2:	9300      	str	r3, [sp, #0]
 80124b4:	4642      	mov	r2, r8
 80124b6:	464b      	mov	r3, r9
 80124b8:	4639      	mov	r1, r7
 80124ba:	4620      	mov	r0, r4
 80124bc:	f7ff fdea 	bl	8012094 <rcl_wait_set_resize>
 80124c0:	4605      	mov	r5, r0
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d0af      	beq.n	8012426 <rcl_wait_set_init+0x26>
 80124c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124c8:	bb2b      	cbnz	r3, 8012516 <rcl_wait_set_init+0x116>
 80124ca:	2600      	movs	r6, #0
 80124cc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80124d0:	9600      	str	r6, [sp, #0]
 80124d2:	4633      	mov	r3, r6
 80124d4:	4632      	mov	r2, r6
 80124d6:	4631      	mov	r1, r6
 80124d8:	4620      	mov	r0, r4
 80124da:	f7ff fddb 	bl	8012094 <rcl_wait_set_resize>
 80124de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d0a0      	beq.n	8012426 <rcl_wait_set_init+0x26>
 80124e4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80124e6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80124e8:	4798      	blx	r3
 80124ea:	4628      	mov	r0, r5
 80124ec:	6326      	str	r6, [r4, #48]	@ 0x30
 80124ee:	b004      	add	sp, #16
 80124f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f4:	250b      	movs	r5, #11
 80124f6:	4628      	mov	r0, r5
 80124f8:	b004      	add	sp, #16
 80124fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124fe:	2501      	movs	r5, #1
 8012500:	f002 f9f6 	bl	80148f0 <rmw_destroy_wait_set>
 8012504:	2800      	cmp	r0, #0
 8012506:	bf18      	it	ne
 8012508:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801250c:	e7dd      	b.n	80124ca <rcl_wait_set_init+0xca>
 801250e:	2565      	movs	r5, #101	@ 0x65
 8012510:	e789      	b.n	8012426 <rcl_wait_set_init+0x26>
 8012512:	250a      	movs	r5, #10
 8012514:	e787      	b.n	8012426 <rcl_wait_set_init+0x26>
 8012516:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012518:	e7f2      	b.n	8012500 <rcl_wait_set_init+0x100>
 801251a:	bf00      	nop

0801251c <rcl_wait_set_add_guard_condition>:
 801251c:	b318      	cbz	r0, 8012566 <rcl_wait_set_add_guard_condition+0x4a>
 801251e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012520:	b570      	push	{r4, r5, r6, lr}
 8012522:	4604      	mov	r4, r0
 8012524:	b30b      	cbz	r3, 801256a <rcl_wait_set_add_guard_condition+0x4e>
 8012526:	b319      	cbz	r1, 8012570 <rcl_wait_set_add_guard_condition+0x54>
 8012528:	68dd      	ldr	r5, [r3, #12]
 801252a:	68c0      	ldr	r0, [r0, #12]
 801252c:	4285      	cmp	r5, r0
 801252e:	d217      	bcs.n	8012560 <rcl_wait_set_add_guard_condition+0x44>
 8012530:	68a0      	ldr	r0, [r4, #8]
 8012532:	1c6e      	adds	r6, r5, #1
 8012534:	60de      	str	r6, [r3, #12]
 8012536:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801253a:	b102      	cbz	r2, 801253e <rcl_wait_set_add_guard_condition+0x22>
 801253c:	6015      	str	r5, [r2, #0]
 801253e:	4608      	mov	r0, r1
 8012540:	f003 fba2 	bl	8015c88 <rcl_guard_condition_get_rmw_handle>
 8012544:	b150      	cbz	r0, 801255c <rcl_wait_set_add_guard_condition+0x40>
 8012546:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012548:	6842      	ldr	r2, [r0, #4]
 801254a:	695b      	ldr	r3, [r3, #20]
 801254c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012550:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012552:	6913      	ldr	r3, [r2, #16]
 8012554:	3301      	adds	r3, #1
 8012556:	2000      	movs	r0, #0
 8012558:	6113      	str	r3, [r2, #16]
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	2001      	movs	r0, #1
 801255e:	bd70      	pop	{r4, r5, r6, pc}
 8012560:	f240 3086 	movw	r0, #902	@ 0x386
 8012564:	bd70      	pop	{r4, r5, r6, pc}
 8012566:	200b      	movs	r0, #11
 8012568:	4770      	bx	lr
 801256a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801256e:	bd70      	pop	{r4, r5, r6, pc}
 8012570:	200b      	movs	r0, #11
 8012572:	bd70      	pop	{r4, r5, r6, pc}

08012574 <rcl_wait_set_add_timer>:
 8012574:	b328      	cbz	r0, 80125c2 <rcl_wait_set_add_timer+0x4e>
 8012576:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012578:	b570      	push	{r4, r5, r6, lr}
 801257a:	4604      	mov	r4, r0
 801257c:	b31b      	cbz	r3, 80125c6 <rcl_wait_set_add_timer+0x52>
 801257e:	b329      	cbz	r1, 80125cc <rcl_wait_set_add_timer+0x58>
 8012580:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012582:	6965      	ldr	r5, [r4, #20]
 8012584:	42a8      	cmp	r0, r5
 8012586:	d219      	bcs.n	80125bc <rcl_wait_set_add_timer+0x48>
 8012588:	6925      	ldr	r5, [r4, #16]
 801258a:	1c46      	adds	r6, r0, #1
 801258c:	641e      	str	r6, [r3, #64]	@ 0x40
 801258e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012592:	b102      	cbz	r2, 8012596 <rcl_wait_set_add_timer+0x22>
 8012594:	6010      	str	r0, [r2, #0]
 8012596:	4608      	mov	r0, r1
 8012598:	f7ff fba6 	bl	8011ce8 <rcl_timer_get_guard_condition>
 801259c:	b168      	cbz	r0, 80125ba <rcl_wait_set_add_timer+0x46>
 801259e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80125a0:	68e3      	ldr	r3, [r4, #12]
 80125a2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80125a4:	3b01      	subs	r3, #1
 80125a6:	441d      	add	r5, r3
 80125a8:	f003 fb6e 	bl	8015c88 <rcl_guard_condition_get_rmw_handle>
 80125ac:	b180      	cbz	r0, 80125d0 <rcl_wait_set_add_timer+0x5c>
 80125ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125b0:	6842      	ldr	r2, [r0, #4]
 80125b2:	695b      	ldr	r3, [r3, #20]
 80125b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80125b8:	2000      	movs	r0, #0
 80125ba:	bd70      	pop	{r4, r5, r6, pc}
 80125bc:	f240 3086 	movw	r0, #902	@ 0x386
 80125c0:	bd70      	pop	{r4, r5, r6, pc}
 80125c2:	200b      	movs	r0, #11
 80125c4:	4770      	bx	lr
 80125c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80125ca:	bd70      	pop	{r4, r5, r6, pc}
 80125cc:	200b      	movs	r0, #11
 80125ce:	bd70      	pop	{r4, r5, r6, pc}
 80125d0:	2001      	movs	r0, #1
 80125d2:	bd70      	pop	{r4, r5, r6, pc}

080125d4 <rcl_wait_set_add_client>:
 80125d4:	b318      	cbz	r0, 801261e <rcl_wait_set_add_client+0x4a>
 80125d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80125d8:	b570      	push	{r4, r5, r6, lr}
 80125da:	4604      	mov	r4, r0
 80125dc:	b30b      	cbz	r3, 8012622 <rcl_wait_set_add_client+0x4e>
 80125de:	b319      	cbz	r1, 8012628 <rcl_wait_set_add_client+0x54>
 80125e0:	699d      	ldr	r5, [r3, #24]
 80125e2:	69c0      	ldr	r0, [r0, #28]
 80125e4:	4285      	cmp	r5, r0
 80125e6:	d217      	bcs.n	8012618 <rcl_wait_set_add_client+0x44>
 80125e8:	69a0      	ldr	r0, [r4, #24]
 80125ea:	1c6e      	adds	r6, r5, #1
 80125ec:	619e      	str	r6, [r3, #24]
 80125ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80125f2:	b102      	cbz	r2, 80125f6 <rcl_wait_set_add_client+0x22>
 80125f4:	6015      	str	r5, [r2, #0]
 80125f6:	4608      	mov	r0, r1
 80125f8:	f7fd fff0 	bl	80105dc <rcl_client_get_rmw_handle>
 80125fc:	b150      	cbz	r0, 8012614 <rcl_wait_set_add_client+0x40>
 80125fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012600:	6842      	ldr	r2, [r0, #4]
 8012602:	6a1b      	ldr	r3, [r3, #32]
 8012604:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012608:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801260a:	69d3      	ldr	r3, [r2, #28]
 801260c:	3301      	adds	r3, #1
 801260e:	2000      	movs	r0, #0
 8012610:	61d3      	str	r3, [r2, #28]
 8012612:	bd70      	pop	{r4, r5, r6, pc}
 8012614:	2001      	movs	r0, #1
 8012616:	bd70      	pop	{r4, r5, r6, pc}
 8012618:	f240 3086 	movw	r0, #902	@ 0x386
 801261c:	bd70      	pop	{r4, r5, r6, pc}
 801261e:	200b      	movs	r0, #11
 8012620:	4770      	bx	lr
 8012622:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	200b      	movs	r0, #11
 801262a:	bd70      	pop	{r4, r5, r6, pc}

0801262c <rcl_wait_set_add_service>:
 801262c:	b318      	cbz	r0, 8012676 <rcl_wait_set_add_service+0x4a>
 801262e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012630:	b570      	push	{r4, r5, r6, lr}
 8012632:	4604      	mov	r4, r0
 8012634:	b30b      	cbz	r3, 801267a <rcl_wait_set_add_service+0x4e>
 8012636:	b319      	cbz	r1, 8012680 <rcl_wait_set_add_service+0x54>
 8012638:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801263a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801263c:	4285      	cmp	r5, r0
 801263e:	d217      	bcs.n	8012670 <rcl_wait_set_add_service+0x44>
 8012640:	6a20      	ldr	r0, [r4, #32]
 8012642:	1c6e      	adds	r6, r5, #1
 8012644:	625e      	str	r6, [r3, #36]	@ 0x24
 8012646:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801264a:	b102      	cbz	r2, 801264e <rcl_wait_set_add_service+0x22>
 801264c:	6015      	str	r5, [r2, #0]
 801264e:	4608      	mov	r0, r1
 8012650:	f7fe fdf8 	bl	8011244 <rcl_service_get_rmw_handle>
 8012654:	b150      	cbz	r0, 801266c <rcl_wait_set_add_service+0x40>
 8012656:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012658:	6842      	ldr	r2, [r0, #4]
 801265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801265c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012660:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012662:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012664:	3301      	adds	r3, #1
 8012666:	2000      	movs	r0, #0
 8012668:	6293      	str	r3, [r2, #40]	@ 0x28
 801266a:	bd70      	pop	{r4, r5, r6, pc}
 801266c:	2001      	movs	r0, #1
 801266e:	bd70      	pop	{r4, r5, r6, pc}
 8012670:	f240 3086 	movw	r0, #902	@ 0x386
 8012674:	bd70      	pop	{r4, r5, r6, pc}
 8012676:	200b      	movs	r0, #11
 8012678:	4770      	bx	lr
 801267a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801267e:	bd70      	pop	{r4, r5, r6, pc}
 8012680:	200b      	movs	r0, #11
 8012682:	bd70      	pop	{r4, r5, r6, pc}
 8012684:	0000      	movs	r0, r0
	...

08012688 <rcl_wait>:
 8012688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268c:	ed2d 8b02 	vpush	{d8}
 8012690:	b08d      	sub	sp, #52	@ 0x34
 8012692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012696:	2800      	cmp	r0, #0
 8012698:	f000 8143 	beq.w	8012922 <rcl_wait+0x29a>
 801269c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801269e:	4605      	mov	r5, r0
 80126a0:	2e00      	cmp	r6, #0
 80126a2:	f000 8112 	beq.w	80128ca <rcl_wait+0x242>
 80126a6:	6843      	ldr	r3, [r0, #4]
 80126a8:	b983      	cbnz	r3, 80126cc <rcl_wait+0x44>
 80126aa:	68eb      	ldr	r3, [r5, #12]
 80126ac:	b973      	cbnz	r3, 80126cc <rcl_wait+0x44>
 80126ae:	696b      	ldr	r3, [r5, #20]
 80126b0:	b963      	cbnz	r3, 80126cc <rcl_wait+0x44>
 80126b2:	69eb      	ldr	r3, [r5, #28]
 80126b4:	b953      	cbnz	r3, 80126cc <rcl_wait+0x44>
 80126b6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80126b8:	b943      	cbnz	r3, 80126cc <rcl_wait+0x44>
 80126ba:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80126bc:	b933      	cbnz	r3, 80126cc <rcl_wait+0x44>
 80126be:	f240 3085 	movw	r0, #901	@ 0x385
 80126c2:	b00d      	add	sp, #52	@ 0x34
 80126c4:	ecbd 8b02 	vpop	{d8}
 80126c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126cc:	9b04      	ldr	r3, [sp, #16]
 80126ce:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	9b05      	ldr	r3, [sp, #20]
 80126d4:	f173 0300 	sbcs.w	r3, r3, #0
 80126d8:	f2c0 80f0 	blt.w	80128bc <rcl_wait+0x234>
 80126dc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80126e0:	4643      	mov	r3, r8
 80126e2:	2a00      	cmp	r2, #0
 80126e4:	f000 8133 	beq.w	801294e <rcl_wait+0x2c6>
 80126e8:	2400      	movs	r4, #0
 80126ea:	4613      	mov	r3, r2
 80126ec:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8012960 <rcl_wait+0x2d8>
 80126f0:	46a2      	mov	sl, r4
 80126f2:	46a3      	mov	fp, r4
 80126f4:	f240 3921 	movw	r9, #801	@ 0x321
 80126f8:	4632      	mov	r2, r6
 80126fa:	e014      	b.n	8012726 <rcl_wait+0x9e>
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d1e0      	bne.n	80126c2 <rcl_wait+0x3a>
 8012700:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012704:	4542      	cmp	r2, r8
 8012706:	eb73 0107 	sbcs.w	r1, r3, r7
 801270a:	da03      	bge.n	8012714 <rcl_wait+0x8c>
 801270c:	4690      	mov	r8, r2
 801270e:	461f      	mov	r7, r3
 8012710:	f04f 0b01 	mov.w	fp, #1
 8012714:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012716:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012718:	3401      	adds	r4, #1
 801271a:	f14a 0a00 	adc.w	sl, sl, #0
 801271e:	429c      	cmp	r4, r3
 8012720:	f17a 0100 	sbcs.w	r1, sl, #0
 8012724:	d228      	bcs.n	8012778 <rcl_wait+0xf0>
 8012726:	6928      	ldr	r0, [r5, #16]
 8012728:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801272c:	a908      	add	r1, sp, #32
 801272e:	00a6      	lsls	r6, r4, #2
 8012730:	2800      	cmp	r0, #0
 8012732:	d0f1      	beq.n	8012718 <rcl_wait+0x90>
 8012734:	68eb      	ldr	r3, [r5, #12]
 8012736:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801273a:	4423      	add	r3, r4
 801273c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012740:	f1be 0f00 	cmp.w	lr, #0
 8012744:	d006      	beq.n	8012754 <rcl_wait+0xcc>
 8012746:	6913      	ldr	r3, [r2, #16]
 8012748:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801274c:	3301      	adds	r3, #1
 801274e:	6113      	str	r3, [r2, #16]
 8012750:	692b      	ldr	r3, [r5, #16]
 8012752:	5998      	ldr	r0, [r3, r6]
 8012754:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012758:	f7ff fa94 	bl	8011c84 <rcl_timer_get_time_until_next_call>
 801275c:	4548      	cmp	r0, r9
 801275e:	d1cd      	bne.n	80126fc <rcl_wait+0x74>
 8012760:	692b      	ldr	r3, [r5, #16]
 8012762:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012764:	2100      	movs	r1, #0
 8012766:	5199      	str	r1, [r3, r6]
 8012768:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801276a:	3401      	adds	r4, #1
 801276c:	f14a 0a00 	adc.w	sl, sl, #0
 8012770:	429c      	cmp	r4, r3
 8012772:	f17a 0100 	sbcs.w	r1, sl, #0
 8012776:	d3d6      	bcc.n	8012726 <rcl_wait+0x9e>
 8012778:	4616      	mov	r6, r2
 801277a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801277e:	4313      	orrs	r3, r2
 8012780:	46d9      	mov	r9, fp
 8012782:	f040 80a9 	bne.w	80128d8 <rcl_wait+0x250>
 8012786:	2300      	movs	r3, #0
 8012788:	2200      	movs	r2, #0
 801278a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801278e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012792:	ab08      	add	r3, sp, #32
 8012794:	9302      	str	r3, [sp, #8]
 8012796:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8012798:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801279c:	e9cd 3200 	strd	r3, r2, [sp]
 80127a0:	f106 0110 	add.w	r1, r6, #16
 80127a4:	f106 031c 	add.w	r3, r6, #28
 80127a8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80127ac:	1d30      	adds	r0, r6, #4
 80127ae:	f001 ff1d 	bl	80145ec <rmw_wait>
 80127b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80127b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80127b6:	4680      	mov	r8, r0
 80127b8:	b1ca      	cbz	r2, 80127ee <rcl_wait+0x166>
 80127ba:	2400      	movs	r4, #0
 80127bc:	4627      	mov	r7, r4
 80127be:	692a      	ldr	r2, [r5, #16]
 80127c0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80127c4:	f10d 011f 	add.w	r1, sp, #31
 80127c8:	00a6      	lsls	r6, r4, #2
 80127ca:	b160      	cbz	r0, 80127e6 <rcl_wait+0x15e>
 80127cc:	f88d 701f 	strb.w	r7, [sp, #31]
 80127d0:	f7ff fa1e 	bl	8011c10 <rcl_timer_is_ready>
 80127d4:	2800      	cmp	r0, #0
 80127d6:	f47f af74 	bne.w	80126c2 <rcl_wait+0x3a>
 80127da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80127de:	b90b      	cbnz	r3, 80127e4 <rcl_wait+0x15c>
 80127e0:	692a      	ldr	r2, [r5, #16]
 80127e2:	5193      	str	r3, [r2, r6]
 80127e4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80127e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80127e8:	3401      	adds	r4, #1
 80127ea:	42a2      	cmp	r2, r4
 80127ec:	d8e7      	bhi.n	80127be <rcl_wait+0x136>
 80127ee:	f038 0002 	bics.w	r0, r8, #2
 80127f2:	f040 8090 	bne.w	8012916 <rcl_wait+0x28e>
 80127f6:	686e      	ldr	r6, [r5, #4]
 80127f8:	4602      	mov	r2, r0
 80127fa:	b91e      	cbnz	r6, 8012804 <rcl_wait+0x17c>
 80127fc:	e00d      	b.n	801281a <rcl_wait+0x192>
 80127fe:	3201      	adds	r2, #1
 8012800:	42b2      	cmp	r2, r6
 8012802:	d00a      	beq.n	801281a <rcl_wait+0x192>
 8012804:	6899      	ldr	r1, [r3, #8]
 8012806:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801280a:	2900      	cmp	r1, #0
 801280c:	d1f7      	bne.n	80127fe <rcl_wait+0x176>
 801280e:	682c      	ldr	r4, [r5, #0]
 8012810:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012814:	3201      	adds	r2, #1
 8012816:	42b2      	cmp	r2, r6
 8012818:	d1f4      	bne.n	8012804 <rcl_wait+0x17c>
 801281a:	68ee      	ldr	r6, [r5, #12]
 801281c:	2200      	movs	r2, #0
 801281e:	b91e      	cbnz	r6, 8012828 <rcl_wait+0x1a0>
 8012820:	e00d      	b.n	801283e <rcl_wait+0x1b6>
 8012822:	3201      	adds	r2, #1
 8012824:	42b2      	cmp	r2, r6
 8012826:	d00a      	beq.n	801283e <rcl_wait+0x1b6>
 8012828:	6959      	ldr	r1, [r3, #20]
 801282a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801282e:	2900      	cmp	r1, #0
 8012830:	d1f7      	bne.n	8012822 <rcl_wait+0x19a>
 8012832:	68ac      	ldr	r4, [r5, #8]
 8012834:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012838:	3201      	adds	r2, #1
 801283a:	42b2      	cmp	r2, r6
 801283c:	d1f4      	bne.n	8012828 <rcl_wait+0x1a0>
 801283e:	69ee      	ldr	r6, [r5, #28]
 8012840:	2200      	movs	r2, #0
 8012842:	b91e      	cbnz	r6, 801284c <rcl_wait+0x1c4>
 8012844:	e00d      	b.n	8012862 <rcl_wait+0x1da>
 8012846:	3201      	adds	r2, #1
 8012848:	42b2      	cmp	r2, r6
 801284a:	d00a      	beq.n	8012862 <rcl_wait+0x1da>
 801284c:	6a19      	ldr	r1, [r3, #32]
 801284e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012852:	2900      	cmp	r1, #0
 8012854:	d1f7      	bne.n	8012846 <rcl_wait+0x1be>
 8012856:	69ac      	ldr	r4, [r5, #24]
 8012858:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801285c:	3201      	adds	r2, #1
 801285e:	42b2      	cmp	r2, r6
 8012860:	d1f4      	bne.n	801284c <rcl_wait+0x1c4>
 8012862:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8012864:	2200      	movs	r2, #0
 8012866:	b91e      	cbnz	r6, 8012870 <rcl_wait+0x1e8>
 8012868:	e00d      	b.n	8012886 <rcl_wait+0x1fe>
 801286a:	3201      	adds	r2, #1
 801286c:	4296      	cmp	r6, r2
 801286e:	d00a      	beq.n	8012886 <rcl_wait+0x1fe>
 8012870:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012872:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012876:	2900      	cmp	r1, #0
 8012878:	d1f7      	bne.n	801286a <rcl_wait+0x1e2>
 801287a:	6a2c      	ldr	r4, [r5, #32]
 801287c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8012880:	3201      	adds	r2, #1
 8012882:	4296      	cmp	r6, r2
 8012884:	d1f4      	bne.n	8012870 <rcl_wait+0x1e8>
 8012886:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8012888:	2200      	movs	r2, #0
 801288a:	b91e      	cbnz	r6, 8012894 <rcl_wait+0x20c>
 801288c:	e00d      	b.n	80128aa <rcl_wait+0x222>
 801288e:	3201      	adds	r2, #1
 8012890:	42b2      	cmp	r2, r6
 8012892:	d00a      	beq.n	80128aa <rcl_wait+0x222>
 8012894:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012896:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801289a:	2900      	cmp	r1, #0
 801289c:	d1f7      	bne.n	801288e <rcl_wait+0x206>
 801289e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 80128a0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80128a4:	3201      	adds	r2, #1
 80128a6:	42b2      	cmp	r2, r6
 80128a8:	d1f4      	bne.n	8012894 <rcl_wait+0x20c>
 80128aa:	f1b8 0f02 	cmp.w	r8, #2
 80128ae:	f47f af08 	bne.w	80126c2 <rcl_wait+0x3a>
 80128b2:	464b      	mov	r3, r9
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	bf08      	it	eq
 80128b8:	2002      	moveq	r0, #2
 80128ba:	e702      	b.n	80126c2 <rcl_wait+0x3a>
 80128bc:	2a00      	cmp	r2, #0
 80128be:	d03a      	beq.n	8012936 <rcl_wait+0x2ae>
 80128c0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80128c4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80128c8:	e70e      	b.n	80126e8 <rcl_wait+0x60>
 80128ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80128ce:	b00d      	add	sp, #52	@ 0x34
 80128d0:	ecbd 8b02 	vpop	{d8}
 80128d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128d8:	9b04      	ldr	r3, [sp, #16]
 80128da:	2b01      	cmp	r3, #1
 80128dc:	9b05      	ldr	r3, [sp, #20]
 80128de:	f173 0300 	sbcs.w	r3, r3, #0
 80128e2:	db24      	blt.n	801292e <rcl_wait+0x2a6>
 80128e4:	2f00      	cmp	r7, #0
 80128e6:	bfbc      	itt	lt
 80128e8:	f04f 0800 	movlt.w	r8, #0
 80128ec:	4647      	movlt	r7, r8
 80128ee:	a31e      	add	r3, pc, #120	@ (adr r3, 8012968 <rcl_wait+0x2e0>)
 80128f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f4:	4640      	mov	r0, r8
 80128f6:	4639      	mov	r1, r7
 80128f8:	f7ed fcfa 	bl	80002f0 <__aeabi_ldivmod>
 80128fc:	a31a      	add	r3, pc, #104	@ (adr r3, 8012968 <rcl_wait+0x2e0>)
 80128fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012902:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012906:	4640      	mov	r0, r8
 8012908:	4639      	mov	r1, r7
 801290a:	f7ed fcf1 	bl	80002f0 <__aeabi_ldivmod>
 801290e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012912:	ab08      	add	r3, sp, #32
 8012914:	e73e      	b.n	8012794 <rcl_wait+0x10c>
 8012916:	2001      	movs	r0, #1
 8012918:	b00d      	add	sp, #52	@ 0x34
 801291a:	ecbd 8b02 	vpop	{d8}
 801291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012922:	200b      	movs	r0, #11
 8012924:	b00d      	add	sp, #52	@ 0x34
 8012926:	ecbd 8b02 	vpop	{d8}
 801292a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801292e:	465b      	mov	r3, fp
 8012930:	2b00      	cmp	r3, #0
 8012932:	d1d7      	bne.n	80128e4 <rcl_wait+0x25c>
 8012934:	e72e      	b.n	8012794 <rcl_wait+0x10c>
 8012936:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801293a:	430b      	orrs	r3, r1
 801293c:	bf08      	it	eq
 801293e:	4691      	moveq	r9, r2
 8012940:	f43f af21 	beq.w	8012786 <rcl_wait+0xfe>
 8012944:	9b04      	ldr	r3, [sp, #16]
 8012946:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801294a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801294e:	2b01      	cmp	r3, #1
 8012950:	9b05      	ldr	r3, [sp, #20]
 8012952:	f173 0300 	sbcs.w	r3, r3, #0
 8012956:	f04f 0300 	mov.w	r3, #0
 801295a:	4699      	mov	r9, r3
 801295c:	dac2      	bge.n	80128e4 <rcl_wait+0x25c>
 801295e:	e719      	b.n	8012794 <rcl_wait+0x10c>
 8012960:	ffffffff 	.word	0xffffffff
 8012964:	7fffffff 	.word	0x7fffffff
 8012968:	3b9aca00 	.word	0x3b9aca00
 801296c:	00000000 	.word	0x00000000

08012970 <rcl_action_take_goal_response>:
 8012970:	2800      	cmp	r0, #0
 8012972:	d039      	beq.n	80129e8 <rcl_action_take_goal_response+0x78>
 8012974:	b570      	push	{r4, r5, r6, lr}
 8012976:	4604      	mov	r4, r0
 8012978:	6800      	ldr	r0, [r0, #0]
 801297a:	b380      	cbz	r0, 80129de <rcl_action_take_goal_response+0x6e>
 801297c:	460d      	mov	r5, r1
 801297e:	4616      	mov	r6, r2
 8012980:	f7fd feb2 	bl	80106e8 <rcl_client_is_valid>
 8012984:	b330      	cbz	r0, 80129d4 <rcl_action_take_goal_response+0x64>
 8012986:	6820      	ldr	r0, [r4, #0]
 8012988:	3004      	adds	r0, #4
 801298a:	f7fd fead 	bl	80106e8 <rcl_client_is_valid>
 801298e:	b308      	cbz	r0, 80129d4 <rcl_action_take_goal_response+0x64>
 8012990:	6820      	ldr	r0, [r4, #0]
 8012992:	3008      	adds	r0, #8
 8012994:	f7fd fea8 	bl	80106e8 <rcl_client_is_valid>
 8012998:	b1e0      	cbz	r0, 80129d4 <rcl_action_take_goal_response+0x64>
 801299a:	6820      	ldr	r0, [r4, #0]
 801299c:	300c      	adds	r0, #12
 801299e:	f7fe fdf3 	bl	8011588 <rcl_subscription_is_valid>
 80129a2:	b1b8      	cbz	r0, 80129d4 <rcl_action_take_goal_response+0x64>
 80129a4:	6820      	ldr	r0, [r4, #0]
 80129a6:	3010      	adds	r0, #16
 80129a8:	f7fe fdee 	bl	8011588 <rcl_subscription_is_valid>
 80129ac:	b190      	cbz	r0, 80129d4 <rcl_action_take_goal_response+0x64>
 80129ae:	b1cd      	cbz	r5, 80129e4 <rcl_action_take_goal_response+0x74>
 80129b0:	b1c6      	cbz	r6, 80129e4 <rcl_action_take_goal_response+0x74>
 80129b2:	6820      	ldr	r0, [r4, #0]
 80129b4:	4632      	mov	r2, r6
 80129b6:	4629      	mov	r1, r5
 80129b8:	f7fd fe4e 	bl	8010658 <rcl_take_response>
 80129bc:	b148      	cbz	r0, 80129d2 <rcl_action_take_goal_response+0x62>
 80129be:	280a      	cmp	r0, #10
 80129c0:	d007      	beq.n	80129d2 <rcl_action_take_goal_response+0x62>
 80129c2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80129c6:	f640 0337 	movw	r3, #2103	@ 0x837
 80129ca:	4290      	cmp	r0, r2
 80129cc:	bf0c      	ite	eq
 80129ce:	4618      	moveq	r0, r3
 80129d0:	2001      	movne	r0, #1
 80129d2:	bd70      	pop	{r4, r5, r6, pc}
 80129d4:	f7f8 fb60 	bl	800b098 <rcutils_reset_error>
 80129d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80129dc:	bd70      	pop	{r4, r5, r6, pc}
 80129de:	f640 0036 	movw	r0, #2102	@ 0x836
 80129e2:	bd70      	pop	{r4, r5, r6, pc}
 80129e4:	200b      	movs	r0, #11
 80129e6:	bd70      	pop	{r4, r5, r6, pc}
 80129e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80129ec:	4770      	bx	lr
 80129ee:	bf00      	nop

080129f0 <rcl_action_send_result_request>:
 80129f0:	b390      	cbz	r0, 8012a58 <rcl_action_send_result_request+0x68>
 80129f2:	b570      	push	{r4, r5, r6, lr}
 80129f4:	4604      	mov	r4, r0
 80129f6:	6800      	ldr	r0, [r0, #0]
 80129f8:	b348      	cbz	r0, 8012a4e <rcl_action_send_result_request+0x5e>
 80129fa:	460d      	mov	r5, r1
 80129fc:	4616      	mov	r6, r2
 80129fe:	f7fd fe73 	bl	80106e8 <rcl_client_is_valid>
 8012a02:	b1f8      	cbz	r0, 8012a44 <rcl_action_send_result_request+0x54>
 8012a04:	6820      	ldr	r0, [r4, #0]
 8012a06:	3004      	adds	r0, #4
 8012a08:	f7fd fe6e 	bl	80106e8 <rcl_client_is_valid>
 8012a0c:	b1d0      	cbz	r0, 8012a44 <rcl_action_send_result_request+0x54>
 8012a0e:	6820      	ldr	r0, [r4, #0]
 8012a10:	3008      	adds	r0, #8
 8012a12:	f7fd fe69 	bl	80106e8 <rcl_client_is_valid>
 8012a16:	b1a8      	cbz	r0, 8012a44 <rcl_action_send_result_request+0x54>
 8012a18:	6820      	ldr	r0, [r4, #0]
 8012a1a:	300c      	adds	r0, #12
 8012a1c:	f7fe fdb4 	bl	8011588 <rcl_subscription_is_valid>
 8012a20:	b180      	cbz	r0, 8012a44 <rcl_action_send_result_request+0x54>
 8012a22:	6820      	ldr	r0, [r4, #0]
 8012a24:	3010      	adds	r0, #16
 8012a26:	f7fe fdaf 	bl	8011588 <rcl_subscription_is_valid>
 8012a2a:	b158      	cbz	r0, 8012a44 <rcl_action_send_result_request+0x54>
 8012a2c:	b195      	cbz	r5, 8012a54 <rcl_action_send_result_request+0x64>
 8012a2e:	b18e      	cbz	r6, 8012a54 <rcl_action_send_result_request+0x64>
 8012a30:	6820      	ldr	r0, [r4, #0]
 8012a32:	4632      	mov	r2, r6
 8012a34:	4629      	mov	r1, r5
 8012a36:	3008      	adds	r0, #8
 8012a38:	f7fd fdd6 	bl	80105e8 <rcl_send_request>
 8012a3c:	3800      	subs	r0, #0
 8012a3e:	bf18      	it	ne
 8012a40:	2001      	movne	r0, #1
 8012a42:	bd70      	pop	{r4, r5, r6, pc}
 8012a44:	f7f8 fb28 	bl	800b098 <rcutils_reset_error>
 8012a48:	f640 0036 	movw	r0, #2102	@ 0x836
 8012a4c:	bd70      	pop	{r4, r5, r6, pc}
 8012a4e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012a52:	bd70      	pop	{r4, r5, r6, pc}
 8012a54:	200b      	movs	r0, #11
 8012a56:	bd70      	pop	{r4, r5, r6, pc}
 8012a58:	f640 0036 	movw	r0, #2102	@ 0x836
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop

08012a60 <rcl_action_take_result_response>:
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d03a      	beq.n	8012ada <rcl_action_take_result_response+0x7a>
 8012a64:	b570      	push	{r4, r5, r6, lr}
 8012a66:	4604      	mov	r4, r0
 8012a68:	6800      	ldr	r0, [r0, #0]
 8012a6a:	b388      	cbz	r0, 8012ad0 <rcl_action_take_result_response+0x70>
 8012a6c:	460d      	mov	r5, r1
 8012a6e:	4616      	mov	r6, r2
 8012a70:	f7fd fe3a 	bl	80106e8 <rcl_client_is_valid>
 8012a74:	b338      	cbz	r0, 8012ac6 <rcl_action_take_result_response+0x66>
 8012a76:	6820      	ldr	r0, [r4, #0]
 8012a78:	3004      	adds	r0, #4
 8012a7a:	f7fd fe35 	bl	80106e8 <rcl_client_is_valid>
 8012a7e:	b310      	cbz	r0, 8012ac6 <rcl_action_take_result_response+0x66>
 8012a80:	6820      	ldr	r0, [r4, #0]
 8012a82:	3008      	adds	r0, #8
 8012a84:	f7fd fe30 	bl	80106e8 <rcl_client_is_valid>
 8012a88:	b1e8      	cbz	r0, 8012ac6 <rcl_action_take_result_response+0x66>
 8012a8a:	6820      	ldr	r0, [r4, #0]
 8012a8c:	300c      	adds	r0, #12
 8012a8e:	f7fe fd7b 	bl	8011588 <rcl_subscription_is_valid>
 8012a92:	b1c0      	cbz	r0, 8012ac6 <rcl_action_take_result_response+0x66>
 8012a94:	6820      	ldr	r0, [r4, #0]
 8012a96:	3010      	adds	r0, #16
 8012a98:	f7fe fd76 	bl	8011588 <rcl_subscription_is_valid>
 8012a9c:	b198      	cbz	r0, 8012ac6 <rcl_action_take_result_response+0x66>
 8012a9e:	b1d5      	cbz	r5, 8012ad6 <rcl_action_take_result_response+0x76>
 8012aa0:	b1ce      	cbz	r6, 8012ad6 <rcl_action_take_result_response+0x76>
 8012aa2:	6820      	ldr	r0, [r4, #0]
 8012aa4:	4632      	mov	r2, r6
 8012aa6:	4629      	mov	r1, r5
 8012aa8:	3008      	adds	r0, #8
 8012aaa:	f7fd fdd5 	bl	8010658 <rcl_take_response>
 8012aae:	b148      	cbz	r0, 8012ac4 <rcl_action_take_result_response+0x64>
 8012ab0:	280a      	cmp	r0, #10
 8012ab2:	d007      	beq.n	8012ac4 <rcl_action_take_result_response+0x64>
 8012ab4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012ab8:	f640 0337 	movw	r3, #2103	@ 0x837
 8012abc:	4290      	cmp	r0, r2
 8012abe:	bf0c      	ite	eq
 8012ac0:	4618      	moveq	r0, r3
 8012ac2:	2001      	movne	r0, #1
 8012ac4:	bd70      	pop	{r4, r5, r6, pc}
 8012ac6:	f7f8 fae7 	bl	800b098 <rcutils_reset_error>
 8012aca:	f640 0036 	movw	r0, #2102	@ 0x836
 8012ace:	bd70      	pop	{r4, r5, r6, pc}
 8012ad0:	f640 0036 	movw	r0, #2102	@ 0x836
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
 8012ad6:	200b      	movs	r0, #11
 8012ad8:	bd70      	pop	{r4, r5, r6, pc}
 8012ada:	f640 0036 	movw	r0, #2102	@ 0x836
 8012ade:	4770      	bx	lr

08012ae0 <rcl_action_take_cancel_response>:
 8012ae0:	2800      	cmp	r0, #0
 8012ae2:	d03a      	beq.n	8012b5a <rcl_action_take_cancel_response+0x7a>
 8012ae4:	b570      	push	{r4, r5, r6, lr}
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	6800      	ldr	r0, [r0, #0]
 8012aea:	b388      	cbz	r0, 8012b50 <rcl_action_take_cancel_response+0x70>
 8012aec:	460d      	mov	r5, r1
 8012aee:	4616      	mov	r6, r2
 8012af0:	f7fd fdfa 	bl	80106e8 <rcl_client_is_valid>
 8012af4:	b338      	cbz	r0, 8012b46 <rcl_action_take_cancel_response+0x66>
 8012af6:	6820      	ldr	r0, [r4, #0]
 8012af8:	3004      	adds	r0, #4
 8012afa:	f7fd fdf5 	bl	80106e8 <rcl_client_is_valid>
 8012afe:	b310      	cbz	r0, 8012b46 <rcl_action_take_cancel_response+0x66>
 8012b00:	6820      	ldr	r0, [r4, #0]
 8012b02:	3008      	adds	r0, #8
 8012b04:	f7fd fdf0 	bl	80106e8 <rcl_client_is_valid>
 8012b08:	b1e8      	cbz	r0, 8012b46 <rcl_action_take_cancel_response+0x66>
 8012b0a:	6820      	ldr	r0, [r4, #0]
 8012b0c:	300c      	adds	r0, #12
 8012b0e:	f7fe fd3b 	bl	8011588 <rcl_subscription_is_valid>
 8012b12:	b1c0      	cbz	r0, 8012b46 <rcl_action_take_cancel_response+0x66>
 8012b14:	6820      	ldr	r0, [r4, #0]
 8012b16:	3010      	adds	r0, #16
 8012b18:	f7fe fd36 	bl	8011588 <rcl_subscription_is_valid>
 8012b1c:	b198      	cbz	r0, 8012b46 <rcl_action_take_cancel_response+0x66>
 8012b1e:	b1d5      	cbz	r5, 8012b56 <rcl_action_take_cancel_response+0x76>
 8012b20:	b1ce      	cbz	r6, 8012b56 <rcl_action_take_cancel_response+0x76>
 8012b22:	6820      	ldr	r0, [r4, #0]
 8012b24:	4632      	mov	r2, r6
 8012b26:	4629      	mov	r1, r5
 8012b28:	3004      	adds	r0, #4
 8012b2a:	f7fd fd95 	bl	8010658 <rcl_take_response>
 8012b2e:	b148      	cbz	r0, 8012b44 <rcl_action_take_cancel_response+0x64>
 8012b30:	280a      	cmp	r0, #10
 8012b32:	d007      	beq.n	8012b44 <rcl_action_take_cancel_response+0x64>
 8012b34:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012b38:	f640 0337 	movw	r3, #2103	@ 0x837
 8012b3c:	4290      	cmp	r0, r2
 8012b3e:	bf0c      	ite	eq
 8012b40:	4618      	moveq	r0, r3
 8012b42:	2001      	movne	r0, #1
 8012b44:	bd70      	pop	{r4, r5, r6, pc}
 8012b46:	f7f8 faa7 	bl	800b098 <rcutils_reset_error>
 8012b4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8012b4e:	bd70      	pop	{r4, r5, r6, pc}
 8012b50:	f640 0036 	movw	r0, #2102	@ 0x836
 8012b54:	bd70      	pop	{r4, r5, r6, pc}
 8012b56:	200b      	movs	r0, #11
 8012b58:	bd70      	pop	{r4, r5, r6, pc}
 8012b5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8012b5e:	4770      	bx	lr

08012b60 <rcl_action_take_feedback>:
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d038      	beq.n	8012bd6 <rcl_action_take_feedback+0x76>
 8012b64:	b530      	push	{r4, r5, lr}
 8012b66:	4604      	mov	r4, r0
 8012b68:	6800      	ldr	r0, [r0, #0]
 8012b6a:	b091      	sub	sp, #68	@ 0x44
 8012b6c:	b378      	cbz	r0, 8012bce <rcl_action_take_feedback+0x6e>
 8012b6e:	460d      	mov	r5, r1
 8012b70:	f7fd fdba 	bl	80106e8 <rcl_client_is_valid>
 8012b74:	b328      	cbz	r0, 8012bc2 <rcl_action_take_feedback+0x62>
 8012b76:	6820      	ldr	r0, [r4, #0]
 8012b78:	3004      	adds	r0, #4
 8012b7a:	f7fd fdb5 	bl	80106e8 <rcl_client_is_valid>
 8012b7e:	b300      	cbz	r0, 8012bc2 <rcl_action_take_feedback+0x62>
 8012b80:	6820      	ldr	r0, [r4, #0]
 8012b82:	3008      	adds	r0, #8
 8012b84:	f7fd fdb0 	bl	80106e8 <rcl_client_is_valid>
 8012b88:	b1d8      	cbz	r0, 8012bc2 <rcl_action_take_feedback+0x62>
 8012b8a:	6820      	ldr	r0, [r4, #0]
 8012b8c:	300c      	adds	r0, #12
 8012b8e:	f7fe fcfb 	bl	8011588 <rcl_subscription_is_valid>
 8012b92:	b1b0      	cbz	r0, 8012bc2 <rcl_action_take_feedback+0x62>
 8012b94:	6820      	ldr	r0, [r4, #0]
 8012b96:	3010      	adds	r0, #16
 8012b98:	f7fe fcf6 	bl	8011588 <rcl_subscription_is_valid>
 8012b9c:	b188      	cbz	r0, 8012bc2 <rcl_action_take_feedback+0x62>
 8012b9e:	b1ed      	cbz	r5, 8012bdc <rcl_action_take_feedback+0x7c>
 8012ba0:	6820      	ldr	r0, [r4, #0]
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	466a      	mov	r2, sp
 8012ba6:	4629      	mov	r1, r5
 8012ba8:	300c      	adds	r0, #12
 8012baa:	f7fe fc8f 	bl	80114cc <rcl_take>
 8012bae:	b160      	cbz	r0, 8012bca <rcl_action_take_feedback+0x6a>
 8012bb0:	f240 1391 	movw	r3, #401	@ 0x191
 8012bb4:	4298      	cmp	r0, r3
 8012bb6:	d014      	beq.n	8012be2 <rcl_action_take_feedback+0x82>
 8012bb8:	280a      	cmp	r0, #10
 8012bba:	bf18      	it	ne
 8012bbc:	2001      	movne	r0, #1
 8012bbe:	b011      	add	sp, #68	@ 0x44
 8012bc0:	bd30      	pop	{r4, r5, pc}
 8012bc2:	f7f8 fa69 	bl	800b098 <rcutils_reset_error>
 8012bc6:	f640 0036 	movw	r0, #2102	@ 0x836
 8012bca:	b011      	add	sp, #68	@ 0x44
 8012bcc:	bd30      	pop	{r4, r5, pc}
 8012bce:	f640 0036 	movw	r0, #2102	@ 0x836
 8012bd2:	b011      	add	sp, #68	@ 0x44
 8012bd4:	bd30      	pop	{r4, r5, pc}
 8012bd6:	f640 0036 	movw	r0, #2102	@ 0x836
 8012bda:	4770      	bx	lr
 8012bdc:	200b      	movs	r0, #11
 8012bde:	b011      	add	sp, #68	@ 0x44
 8012be0:	bd30      	pop	{r4, r5, pc}
 8012be2:	f640 0037 	movw	r0, #2103	@ 0x837
 8012be6:	e7f0      	b.n	8012bca <rcl_action_take_feedback+0x6a>

08012be8 <rcl_action_wait_set_add_action_client>:
 8012be8:	2800      	cmp	r0, #0
 8012bea:	d048      	beq.n	8012c7e <rcl_action_wait_set_add_action_client+0x96>
 8012bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bee:	460c      	mov	r4, r1
 8012bf0:	2900      	cmp	r1, #0
 8012bf2:	d03c      	beq.n	8012c6e <rcl_action_wait_set_add_action_client+0x86>
 8012bf4:	4605      	mov	r5, r0
 8012bf6:	6808      	ldr	r0, [r1, #0]
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d038      	beq.n	8012c6e <rcl_action_wait_set_add_action_client+0x86>
 8012bfc:	4617      	mov	r7, r2
 8012bfe:	461e      	mov	r6, r3
 8012c00:	f7fd fd72 	bl	80106e8 <rcl_client_is_valid>
 8012c04:	b3b0      	cbz	r0, 8012c74 <rcl_action_wait_set_add_action_client+0x8c>
 8012c06:	6820      	ldr	r0, [r4, #0]
 8012c08:	3004      	adds	r0, #4
 8012c0a:	f7fd fd6d 	bl	80106e8 <rcl_client_is_valid>
 8012c0e:	b388      	cbz	r0, 8012c74 <rcl_action_wait_set_add_action_client+0x8c>
 8012c10:	6820      	ldr	r0, [r4, #0]
 8012c12:	3008      	adds	r0, #8
 8012c14:	f7fd fd68 	bl	80106e8 <rcl_client_is_valid>
 8012c18:	b360      	cbz	r0, 8012c74 <rcl_action_wait_set_add_action_client+0x8c>
 8012c1a:	6820      	ldr	r0, [r4, #0]
 8012c1c:	300c      	adds	r0, #12
 8012c1e:	f7fe fcb3 	bl	8011588 <rcl_subscription_is_valid>
 8012c22:	b338      	cbz	r0, 8012c74 <rcl_action_wait_set_add_action_client+0x8c>
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	3010      	adds	r0, #16
 8012c28:	f7fe fcae 	bl	8011588 <rcl_subscription_is_valid>
 8012c2c:	b310      	cbz	r0, 8012c74 <rcl_action_wait_set_add_action_client+0x8c>
 8012c2e:	6821      	ldr	r1, [r4, #0]
 8012c30:	4628      	mov	r0, r5
 8012c32:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8012c36:	f7ff fccd 	bl	80125d4 <rcl_wait_set_add_client>
 8012c3a:	b9b8      	cbnz	r0, 8012c6c <rcl_action_wait_set_add_action_client+0x84>
 8012c3c:	6821      	ldr	r1, [r4, #0]
 8012c3e:	4628      	mov	r0, r5
 8012c40:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8012c44:	3104      	adds	r1, #4
 8012c46:	f7ff fcc5 	bl	80125d4 <rcl_wait_set_add_client>
 8012c4a:	b978      	cbnz	r0, 8012c6c <rcl_action_wait_set_add_action_client+0x84>
 8012c4c:	6821      	ldr	r1, [r4, #0]
 8012c4e:	4628      	mov	r0, r5
 8012c50:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8012c54:	3108      	adds	r1, #8
 8012c56:	f7ff fcbd 	bl	80125d4 <rcl_wait_set_add_client>
 8012c5a:	b938      	cbnz	r0, 8012c6c <rcl_action_wait_set_add_action_client+0x84>
 8012c5c:	6821      	ldr	r1, [r4, #0]
 8012c5e:	4628      	mov	r0, r5
 8012c60:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8012c64:	310c      	adds	r1, #12
 8012c66:	f7ff f96d 	bl	8011f44 <rcl_wait_set_add_subscription>
 8012c6a:	b158      	cbz	r0, 8012c84 <rcl_action_wait_set_add_action_client+0x9c>
 8012c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8012c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c74:	f7f8 fa10 	bl	800b098 <rcutils_reset_error>
 8012c78:	f640 0036 	movw	r0, #2102	@ 0x836
 8012c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c82:	4770      	bx	lr
 8012c84:	6821      	ldr	r1, [r4, #0]
 8012c86:	4628      	mov	r0, r5
 8012c88:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8012c8c:	3110      	adds	r1, #16
 8012c8e:	f7ff f959 	bl	8011f44 <rcl_wait_set_add_subscription>
 8012c92:	2800      	cmp	r0, #0
 8012c94:	d1ea      	bne.n	8012c6c <rcl_action_wait_set_add_action_client+0x84>
 8012c96:	b11f      	cbz	r7, 8012ca0 <rcl_action_wait_set_add_action_client+0xb8>
 8012c98:	6823      	ldr	r3, [r4, #0]
 8012c9a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8012c9e:	603b      	str	r3, [r7, #0]
 8012ca0:	2e00      	cmp	r6, #0
 8012ca2:	d0e3      	beq.n	8012c6c <rcl_action_wait_set_add_action_client+0x84>
 8012ca4:	6823      	ldr	r3, [r4, #0]
 8012ca6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8012caa:	6033      	str	r3, [r6, #0]
 8012cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cae:	bf00      	nop

08012cb0 <rcl_action_client_wait_set_get_entities_ready>:
 8012cb0:	2800      	cmp	r0, #0
 8012cb2:	f000 808d 	beq.w	8012dd0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8012cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cba:	460c      	mov	r4, r1
 8012cbc:	2900      	cmp	r1, #0
 8012cbe:	d077      	beq.n	8012db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012cc0:	4605      	mov	r5, r0
 8012cc2:	6808      	ldr	r0, [r1, #0]
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	d073      	beq.n	8012db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012cc8:	4616      	mov	r6, r2
 8012cca:	461f      	mov	r7, r3
 8012ccc:	f7fd fd0c 	bl	80106e8 <rcl_client_is_valid>
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	d071      	beq.n	8012db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012cd4:	6820      	ldr	r0, [r4, #0]
 8012cd6:	3004      	adds	r0, #4
 8012cd8:	f7fd fd06 	bl	80106e8 <rcl_client_is_valid>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d06b      	beq.n	8012db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012ce0:	6820      	ldr	r0, [r4, #0]
 8012ce2:	3008      	adds	r0, #8
 8012ce4:	f7fd fd00 	bl	80106e8 <rcl_client_is_valid>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d065      	beq.n	8012db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012cec:	6820      	ldr	r0, [r4, #0]
 8012cee:	300c      	adds	r0, #12
 8012cf0:	f7fe fc4a 	bl	8011588 <rcl_subscription_is_valid>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d05f      	beq.n	8012db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012cf8:	6820      	ldr	r0, [r4, #0]
 8012cfa:	3010      	adds	r0, #16
 8012cfc:	f7fe fc44 	bl	8011588 <rcl_subscription_is_valid>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d059      	beq.n	8012db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8012d04:	2e00      	cmp	r6, #0
 8012d06:	d060      	beq.n	8012dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012d08:	2f00      	cmp	r7, #0
 8012d0a:	d05e      	beq.n	8012dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012d0c:	9b06      	ldr	r3, [sp, #24]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d05b      	beq.n	8012dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012d12:	9b07      	ldr	r3, [sp, #28]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d058      	beq.n	8012dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012d18:	9b08      	ldr	r3, [sp, #32]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d055      	beq.n	8012dca <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	686a      	ldr	r2, [r5, #4]
 8012d22:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8012d26:	428a      	cmp	r2, r1
 8012d28:	d94c      	bls.n	8012dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012d2a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8012d2e:	4282      	cmp	r2, r0
 8012d30:	d948      	bls.n	8012dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012d32:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8012d36:	69ea      	ldr	r2, [r5, #28]
 8012d38:	42a2      	cmp	r2, r4
 8012d3a:	d943      	bls.n	8012dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012d3c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012d40:	4562      	cmp	r2, ip
 8012d42:	d93f      	bls.n	8012dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012d44:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8012d48:	4572      	cmp	r2, lr
 8012d4a:	d93b      	bls.n	8012dc4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8012d4c:	69aa      	ldr	r2, [r5, #24]
 8012d4e:	682d      	ldr	r5, [r5, #0]
 8012d50:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8012d54:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8012d58:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8012d5c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8012d60:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8012d64:	f103 0c0c 	add.w	ip, r3, #12
 8012d68:	eba5 050c 	sub.w	r5, r5, ip
 8012d6c:	fab5 f585 	clz	r5, r5
 8012d70:	096d      	lsrs	r5, r5, #5
 8012d72:	7035      	strb	r5, [r6, #0]
 8012d74:	f103 0510 	add.w	r5, r3, #16
 8012d78:	1b64      	subs	r4, r4, r5
 8012d7a:	fab4 f484 	clz	r4, r4
 8012d7e:	0964      	lsrs	r4, r4, #5
 8012d80:	703c      	strb	r4, [r7, #0]
 8012d82:	eba3 0008 	sub.w	r0, r3, r8
 8012d86:	1d1c      	adds	r4, r3, #4
 8012d88:	3308      	adds	r3, #8
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	fab0 f080 	clz	r0, r0
 8012d90:	9a06      	ldr	r2, [sp, #24]
 8012d92:	0940      	lsrs	r0, r0, #5
 8012d94:	1b09      	subs	r1, r1, r4
 8012d96:	7010      	strb	r0, [r2, #0]
 8012d98:	fab1 f181 	clz	r1, r1
 8012d9c:	9a07      	ldr	r2, [sp, #28]
 8012d9e:	0949      	lsrs	r1, r1, #5
 8012da0:	7011      	strb	r1, [r2, #0]
 8012da2:	fab3 f383 	clz	r3, r3
 8012da6:	9a08      	ldr	r2, [sp, #32]
 8012da8:	095b      	lsrs	r3, r3, #5
 8012daa:	2000      	movs	r0, #0
 8012dac:	7013      	strb	r3, [r2, #0]
 8012dae:	e001      	b.n	8012db4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012db0:	f640 0036 	movw	r0, #2102	@ 0x836
 8012db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012db8:	f7f8 f96e 	bl	800b098 <rcutils_reset_error>
 8012dbc:	f640 0036 	movw	r0, #2102	@ 0x836
 8012dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc4:	2001      	movs	r0, #1
 8012dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dca:	200b      	movs	r0, #11
 8012dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dd0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012dd4:	4770      	bx	lr
 8012dd6:	bf00      	nop

08012dd8 <rcl_action_take_goal_request>:
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d039      	beq.n	8012e50 <rcl_action_take_goal_request+0x78>
 8012ddc:	b570      	push	{r4, r5, r6, lr}
 8012dde:	4604      	mov	r4, r0
 8012de0:	6800      	ldr	r0, [r0, #0]
 8012de2:	b380      	cbz	r0, 8012e46 <rcl_action_take_goal_request+0x6e>
 8012de4:	460d      	mov	r5, r1
 8012de6:	4616      	mov	r6, r2
 8012de8:	f7fe fa8a 	bl	8011300 <rcl_service_is_valid>
 8012dec:	b330      	cbz	r0, 8012e3c <rcl_action_take_goal_request+0x64>
 8012dee:	6820      	ldr	r0, [r4, #0]
 8012df0:	3004      	adds	r0, #4
 8012df2:	f7fe fa85 	bl	8011300 <rcl_service_is_valid>
 8012df6:	b308      	cbz	r0, 8012e3c <rcl_action_take_goal_request+0x64>
 8012df8:	6820      	ldr	r0, [r4, #0]
 8012dfa:	3008      	adds	r0, #8
 8012dfc:	f7fe fa80 	bl	8011300 <rcl_service_is_valid>
 8012e00:	b1e0      	cbz	r0, 8012e3c <rcl_action_take_goal_request+0x64>
 8012e02:	6820      	ldr	r0, [r4, #0]
 8012e04:	300c      	adds	r0, #12
 8012e06:	f7f7 f8f9 	bl	8009ffc <rcl_publisher_is_valid>
 8012e0a:	b1b8      	cbz	r0, 8012e3c <rcl_action_take_goal_request+0x64>
 8012e0c:	6820      	ldr	r0, [r4, #0]
 8012e0e:	3010      	adds	r0, #16
 8012e10:	f7f7 f8f4 	bl	8009ffc <rcl_publisher_is_valid>
 8012e14:	b190      	cbz	r0, 8012e3c <rcl_action_take_goal_request+0x64>
 8012e16:	b1cd      	cbz	r5, 8012e4c <rcl_action_take_goal_request+0x74>
 8012e18:	b1c6      	cbz	r6, 8012e4c <rcl_action_take_goal_request+0x74>
 8012e1a:	6820      	ldr	r0, [r4, #0]
 8012e1c:	4632      	mov	r2, r6
 8012e1e:	4629      	mov	r1, r5
 8012e20:	f7fe fa16 	bl	8011250 <rcl_take_request>
 8012e24:	b148      	cbz	r0, 8012e3a <rcl_action_take_goal_request+0x62>
 8012e26:	280a      	cmp	r0, #10
 8012e28:	d007      	beq.n	8012e3a <rcl_action_take_goal_request+0x62>
 8012e2a:	f240 2259 	movw	r2, #601	@ 0x259
 8012e2e:	f640 0399 	movw	r3, #2201	@ 0x899
 8012e32:	4290      	cmp	r0, r2
 8012e34:	bf0c      	ite	eq
 8012e36:	4618      	moveq	r0, r3
 8012e38:	2001      	movne	r0, #1
 8012e3a:	bd70      	pop	{r4, r5, r6, pc}
 8012e3c:	f7f8 f92c 	bl	800b098 <rcutils_reset_error>
 8012e40:	f640 0098 	movw	r0, #2200	@ 0x898
 8012e44:	bd70      	pop	{r4, r5, r6, pc}
 8012e46:	f640 0098 	movw	r0, #2200	@ 0x898
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}
 8012e4c:	200b      	movs	r0, #11
 8012e4e:	bd70      	pop	{r4, r5, r6, pc}
 8012e50:	f640 0098 	movw	r0, #2200	@ 0x898
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop

08012e58 <rcl_action_send_goal_response>:
 8012e58:	b390      	cbz	r0, 8012ec0 <rcl_action_send_goal_response+0x68>
 8012e5a:	b570      	push	{r4, r5, r6, lr}
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	6800      	ldr	r0, [r0, #0]
 8012e60:	b348      	cbz	r0, 8012eb6 <rcl_action_send_goal_response+0x5e>
 8012e62:	460d      	mov	r5, r1
 8012e64:	4616      	mov	r6, r2
 8012e66:	f7fe fa4b 	bl	8011300 <rcl_service_is_valid>
 8012e6a:	b1f8      	cbz	r0, 8012eac <rcl_action_send_goal_response+0x54>
 8012e6c:	6820      	ldr	r0, [r4, #0]
 8012e6e:	3004      	adds	r0, #4
 8012e70:	f7fe fa46 	bl	8011300 <rcl_service_is_valid>
 8012e74:	b1d0      	cbz	r0, 8012eac <rcl_action_send_goal_response+0x54>
 8012e76:	6820      	ldr	r0, [r4, #0]
 8012e78:	3008      	adds	r0, #8
 8012e7a:	f7fe fa41 	bl	8011300 <rcl_service_is_valid>
 8012e7e:	b1a8      	cbz	r0, 8012eac <rcl_action_send_goal_response+0x54>
 8012e80:	6820      	ldr	r0, [r4, #0]
 8012e82:	300c      	adds	r0, #12
 8012e84:	f7f7 f8ba 	bl	8009ffc <rcl_publisher_is_valid>
 8012e88:	b180      	cbz	r0, 8012eac <rcl_action_send_goal_response+0x54>
 8012e8a:	6820      	ldr	r0, [r4, #0]
 8012e8c:	3010      	adds	r0, #16
 8012e8e:	f7f7 f8b5 	bl	8009ffc <rcl_publisher_is_valid>
 8012e92:	b158      	cbz	r0, 8012eac <rcl_action_send_goal_response+0x54>
 8012e94:	b195      	cbz	r5, 8012ebc <rcl_action_send_goal_response+0x64>
 8012e96:	b18e      	cbz	r6, 8012ebc <rcl_action_send_goal_response+0x64>
 8012e98:	6820      	ldr	r0, [r4, #0]
 8012e9a:	4632      	mov	r2, r6
 8012e9c:	4629      	mov	r1, r5
 8012e9e:	f7fe fa17 	bl	80112d0 <rcl_send_response>
 8012ea2:	b110      	cbz	r0, 8012eaa <rcl_action_send_goal_response+0x52>
 8012ea4:	2802      	cmp	r0, #2
 8012ea6:	bf18      	it	ne
 8012ea8:	2001      	movne	r0, #1
 8012eaa:	bd70      	pop	{r4, r5, r6, pc}
 8012eac:	f7f8 f8f4 	bl	800b098 <rcutils_reset_error>
 8012eb0:	f640 0098 	movw	r0, #2200	@ 0x898
 8012eb4:	bd70      	pop	{r4, r5, r6, pc}
 8012eb6:	f640 0098 	movw	r0, #2200	@ 0x898
 8012eba:	bd70      	pop	{r4, r5, r6, pc}
 8012ebc:	200b      	movs	r0, #11
 8012ebe:	bd70      	pop	{r4, r5, r6, pc}
 8012ec0:	f640 0098 	movw	r0, #2200	@ 0x898
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop

08012ec8 <rcl_action_take_result_request>:
 8012ec8:	2800      	cmp	r0, #0
 8012eca:	d03a      	beq.n	8012f42 <rcl_action_take_result_request+0x7a>
 8012ecc:	b570      	push	{r4, r5, r6, lr}
 8012ece:	4604      	mov	r4, r0
 8012ed0:	6800      	ldr	r0, [r0, #0]
 8012ed2:	b388      	cbz	r0, 8012f38 <rcl_action_take_result_request+0x70>
 8012ed4:	460d      	mov	r5, r1
 8012ed6:	4616      	mov	r6, r2
 8012ed8:	f7fe fa12 	bl	8011300 <rcl_service_is_valid>
 8012edc:	b338      	cbz	r0, 8012f2e <rcl_action_take_result_request+0x66>
 8012ede:	6820      	ldr	r0, [r4, #0]
 8012ee0:	3004      	adds	r0, #4
 8012ee2:	f7fe fa0d 	bl	8011300 <rcl_service_is_valid>
 8012ee6:	b310      	cbz	r0, 8012f2e <rcl_action_take_result_request+0x66>
 8012ee8:	6820      	ldr	r0, [r4, #0]
 8012eea:	3008      	adds	r0, #8
 8012eec:	f7fe fa08 	bl	8011300 <rcl_service_is_valid>
 8012ef0:	b1e8      	cbz	r0, 8012f2e <rcl_action_take_result_request+0x66>
 8012ef2:	6820      	ldr	r0, [r4, #0]
 8012ef4:	300c      	adds	r0, #12
 8012ef6:	f7f7 f881 	bl	8009ffc <rcl_publisher_is_valid>
 8012efa:	b1c0      	cbz	r0, 8012f2e <rcl_action_take_result_request+0x66>
 8012efc:	6820      	ldr	r0, [r4, #0]
 8012efe:	3010      	adds	r0, #16
 8012f00:	f7f7 f87c 	bl	8009ffc <rcl_publisher_is_valid>
 8012f04:	b198      	cbz	r0, 8012f2e <rcl_action_take_result_request+0x66>
 8012f06:	b1d5      	cbz	r5, 8012f3e <rcl_action_take_result_request+0x76>
 8012f08:	b1ce      	cbz	r6, 8012f3e <rcl_action_take_result_request+0x76>
 8012f0a:	6820      	ldr	r0, [r4, #0]
 8012f0c:	4632      	mov	r2, r6
 8012f0e:	4629      	mov	r1, r5
 8012f10:	3008      	adds	r0, #8
 8012f12:	f7fe f99d 	bl	8011250 <rcl_take_request>
 8012f16:	b148      	cbz	r0, 8012f2c <rcl_action_take_result_request+0x64>
 8012f18:	280a      	cmp	r0, #10
 8012f1a:	d007      	beq.n	8012f2c <rcl_action_take_result_request+0x64>
 8012f1c:	f240 2259 	movw	r2, #601	@ 0x259
 8012f20:	f640 0399 	movw	r3, #2201	@ 0x899
 8012f24:	4290      	cmp	r0, r2
 8012f26:	bf0c      	ite	eq
 8012f28:	4618      	moveq	r0, r3
 8012f2a:	2001      	movne	r0, #1
 8012f2c:	bd70      	pop	{r4, r5, r6, pc}
 8012f2e:	f7f8 f8b3 	bl	800b098 <rcutils_reset_error>
 8012f32:	f640 0098 	movw	r0, #2200	@ 0x898
 8012f36:	bd70      	pop	{r4, r5, r6, pc}
 8012f38:	f640 0098 	movw	r0, #2200	@ 0x898
 8012f3c:	bd70      	pop	{r4, r5, r6, pc}
 8012f3e:	200b      	movs	r0, #11
 8012f40:	bd70      	pop	{r4, r5, r6, pc}
 8012f42:	f640 0098 	movw	r0, #2200	@ 0x898
 8012f46:	4770      	bx	lr

08012f48 <rcl_action_take_cancel_request>:
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d03a      	beq.n	8012fc2 <rcl_action_take_cancel_request+0x7a>
 8012f4c:	b570      	push	{r4, r5, r6, lr}
 8012f4e:	4604      	mov	r4, r0
 8012f50:	6800      	ldr	r0, [r0, #0]
 8012f52:	b388      	cbz	r0, 8012fb8 <rcl_action_take_cancel_request+0x70>
 8012f54:	460d      	mov	r5, r1
 8012f56:	4616      	mov	r6, r2
 8012f58:	f7fe f9d2 	bl	8011300 <rcl_service_is_valid>
 8012f5c:	b338      	cbz	r0, 8012fae <rcl_action_take_cancel_request+0x66>
 8012f5e:	6820      	ldr	r0, [r4, #0]
 8012f60:	3004      	adds	r0, #4
 8012f62:	f7fe f9cd 	bl	8011300 <rcl_service_is_valid>
 8012f66:	b310      	cbz	r0, 8012fae <rcl_action_take_cancel_request+0x66>
 8012f68:	6820      	ldr	r0, [r4, #0]
 8012f6a:	3008      	adds	r0, #8
 8012f6c:	f7fe f9c8 	bl	8011300 <rcl_service_is_valid>
 8012f70:	b1e8      	cbz	r0, 8012fae <rcl_action_take_cancel_request+0x66>
 8012f72:	6820      	ldr	r0, [r4, #0]
 8012f74:	300c      	adds	r0, #12
 8012f76:	f7f7 f841 	bl	8009ffc <rcl_publisher_is_valid>
 8012f7a:	b1c0      	cbz	r0, 8012fae <rcl_action_take_cancel_request+0x66>
 8012f7c:	6820      	ldr	r0, [r4, #0]
 8012f7e:	3010      	adds	r0, #16
 8012f80:	f7f7 f83c 	bl	8009ffc <rcl_publisher_is_valid>
 8012f84:	b198      	cbz	r0, 8012fae <rcl_action_take_cancel_request+0x66>
 8012f86:	b1d5      	cbz	r5, 8012fbe <rcl_action_take_cancel_request+0x76>
 8012f88:	b1ce      	cbz	r6, 8012fbe <rcl_action_take_cancel_request+0x76>
 8012f8a:	6820      	ldr	r0, [r4, #0]
 8012f8c:	4632      	mov	r2, r6
 8012f8e:	4629      	mov	r1, r5
 8012f90:	3004      	adds	r0, #4
 8012f92:	f7fe f95d 	bl	8011250 <rcl_take_request>
 8012f96:	b148      	cbz	r0, 8012fac <rcl_action_take_cancel_request+0x64>
 8012f98:	280a      	cmp	r0, #10
 8012f9a:	d007      	beq.n	8012fac <rcl_action_take_cancel_request+0x64>
 8012f9c:	f240 2259 	movw	r2, #601	@ 0x259
 8012fa0:	f640 0399 	movw	r3, #2201	@ 0x899
 8012fa4:	4290      	cmp	r0, r2
 8012fa6:	bf0c      	ite	eq
 8012fa8:	4618      	moveq	r0, r3
 8012faa:	2001      	movne	r0, #1
 8012fac:	bd70      	pop	{r4, r5, r6, pc}
 8012fae:	f7f8 f873 	bl	800b098 <rcutils_reset_error>
 8012fb2:	f640 0098 	movw	r0, #2200	@ 0x898
 8012fb6:	bd70      	pop	{r4, r5, r6, pc}
 8012fb8:	f640 0098 	movw	r0, #2200	@ 0x898
 8012fbc:	bd70      	pop	{r4, r5, r6, pc}
 8012fbe:	200b      	movs	r0, #11
 8012fc0:	bd70      	pop	{r4, r5, r6, pc}
 8012fc2:	f640 0098 	movw	r0, #2200	@ 0x898
 8012fc6:	4770      	bx	lr

08012fc8 <rcl_action_send_cancel_response>:
 8012fc8:	b398      	cbz	r0, 8013032 <rcl_action_send_cancel_response+0x6a>
 8012fca:	b570      	push	{r4, r5, r6, lr}
 8012fcc:	4604      	mov	r4, r0
 8012fce:	6800      	ldr	r0, [r0, #0]
 8012fd0:	b350      	cbz	r0, 8013028 <rcl_action_send_cancel_response+0x60>
 8012fd2:	460d      	mov	r5, r1
 8012fd4:	4616      	mov	r6, r2
 8012fd6:	f7fe f993 	bl	8011300 <rcl_service_is_valid>
 8012fda:	b300      	cbz	r0, 801301e <rcl_action_send_cancel_response+0x56>
 8012fdc:	6820      	ldr	r0, [r4, #0]
 8012fde:	3004      	adds	r0, #4
 8012fe0:	f7fe f98e 	bl	8011300 <rcl_service_is_valid>
 8012fe4:	b1d8      	cbz	r0, 801301e <rcl_action_send_cancel_response+0x56>
 8012fe6:	6820      	ldr	r0, [r4, #0]
 8012fe8:	3008      	adds	r0, #8
 8012fea:	f7fe f989 	bl	8011300 <rcl_service_is_valid>
 8012fee:	b1b0      	cbz	r0, 801301e <rcl_action_send_cancel_response+0x56>
 8012ff0:	6820      	ldr	r0, [r4, #0]
 8012ff2:	300c      	adds	r0, #12
 8012ff4:	f7f7 f802 	bl	8009ffc <rcl_publisher_is_valid>
 8012ff8:	b188      	cbz	r0, 801301e <rcl_action_send_cancel_response+0x56>
 8012ffa:	6820      	ldr	r0, [r4, #0]
 8012ffc:	3010      	adds	r0, #16
 8012ffe:	f7f6 fffd 	bl	8009ffc <rcl_publisher_is_valid>
 8013002:	b160      	cbz	r0, 801301e <rcl_action_send_cancel_response+0x56>
 8013004:	b19d      	cbz	r5, 801302e <rcl_action_send_cancel_response+0x66>
 8013006:	b196      	cbz	r6, 801302e <rcl_action_send_cancel_response+0x66>
 8013008:	6820      	ldr	r0, [r4, #0]
 801300a:	4632      	mov	r2, r6
 801300c:	4629      	mov	r1, r5
 801300e:	3004      	adds	r0, #4
 8013010:	f7fe f95e 	bl	80112d0 <rcl_send_response>
 8013014:	b110      	cbz	r0, 801301c <rcl_action_send_cancel_response+0x54>
 8013016:	2802      	cmp	r0, #2
 8013018:	bf18      	it	ne
 801301a:	2001      	movne	r0, #1
 801301c:	bd70      	pop	{r4, r5, r6, pc}
 801301e:	f7f8 f83b 	bl	800b098 <rcutils_reset_error>
 8013022:	f640 0098 	movw	r0, #2200	@ 0x898
 8013026:	bd70      	pop	{r4, r5, r6, pc}
 8013028:	f640 0098 	movw	r0, #2200	@ 0x898
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	200b      	movs	r0, #11
 8013030:	bd70      	pop	{r4, r5, r6, pc}
 8013032:	f640 0098 	movw	r0, #2200	@ 0x898
 8013036:	4770      	bx	lr

08013038 <rcl_action_wait_set_add_action_server>:
 8013038:	2800      	cmp	r0, #0
 801303a:	d04d      	beq.n	80130d8 <rcl_action_wait_set_add_action_server+0xa0>
 801303c:	b570      	push	{r4, r5, r6, lr}
 801303e:	460c      	mov	r4, r1
 8013040:	b159      	cbz	r1, 801305a <rcl_action_wait_set_add_action_server+0x22>
 8013042:	4605      	mov	r5, r0
 8013044:	6808      	ldr	r0, [r1, #0]
 8013046:	b140      	cbz	r0, 801305a <rcl_action_wait_set_add_action_server+0x22>
 8013048:	4616      	mov	r6, r2
 801304a:	f7fe f959 	bl	8011300 <rcl_service_is_valid>
 801304e:	b120      	cbz	r0, 801305a <rcl_action_wait_set_add_action_server+0x22>
 8013050:	6820      	ldr	r0, [r4, #0]
 8013052:	3004      	adds	r0, #4
 8013054:	f7fe f954 	bl	8011300 <rcl_service_is_valid>
 8013058:	b910      	cbnz	r0, 8013060 <rcl_action_wait_set_add_action_server+0x28>
 801305a:	f640 0098 	movw	r0, #2200	@ 0x898
 801305e:	bd70      	pop	{r4, r5, r6, pc}
 8013060:	6820      	ldr	r0, [r4, #0]
 8013062:	3008      	adds	r0, #8
 8013064:	f7fe f94c 	bl	8011300 <rcl_service_is_valid>
 8013068:	2800      	cmp	r0, #0
 801306a:	d0f6      	beq.n	801305a <rcl_action_wait_set_add_action_server+0x22>
 801306c:	6820      	ldr	r0, [r4, #0]
 801306e:	300c      	adds	r0, #12
 8013070:	f7f6 ffdc 	bl	800a02c <rcl_publisher_is_valid_except_context>
 8013074:	2800      	cmp	r0, #0
 8013076:	d0f0      	beq.n	801305a <rcl_action_wait_set_add_action_server+0x22>
 8013078:	6820      	ldr	r0, [r4, #0]
 801307a:	3010      	adds	r0, #16
 801307c:	f7f6 ffd6 	bl	800a02c <rcl_publisher_is_valid_except_context>
 8013080:	2800      	cmp	r0, #0
 8013082:	d0ea      	beq.n	801305a <rcl_action_wait_set_add_action_server+0x22>
 8013084:	6821      	ldr	r1, [r4, #0]
 8013086:	4628      	mov	r0, r5
 8013088:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801308c:	f7ff face 	bl	801262c <rcl_wait_set_add_service>
 8013090:	2800      	cmp	r0, #0
 8013092:	d1e4      	bne.n	801305e <rcl_action_wait_set_add_action_server+0x26>
 8013094:	6821      	ldr	r1, [r4, #0]
 8013096:	4628      	mov	r0, r5
 8013098:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801309c:	3104      	adds	r1, #4
 801309e:	f7ff fac5 	bl	801262c <rcl_wait_set_add_service>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d1db      	bne.n	801305e <rcl_action_wait_set_add_action_server+0x26>
 80130a6:	6821      	ldr	r1, [r4, #0]
 80130a8:	4628      	mov	r0, r5
 80130aa:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80130ae:	3108      	adds	r1, #8
 80130b0:	f7ff fabc 	bl	801262c <rcl_wait_set_add_service>
 80130b4:	2800      	cmp	r0, #0
 80130b6:	d1d2      	bne.n	801305e <rcl_action_wait_set_add_action_server+0x26>
 80130b8:	6821      	ldr	r1, [r4, #0]
 80130ba:	4628      	mov	r0, r5
 80130bc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80130c0:	3114      	adds	r1, #20
 80130c2:	f7ff fa57 	bl	8012574 <rcl_wait_set_add_timer>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d1c9      	bne.n	801305e <rcl_action_wait_set_add_action_server+0x26>
 80130ca:	2e00      	cmp	r6, #0
 80130cc:	d0c7      	beq.n	801305e <rcl_action_wait_set_add_action_server+0x26>
 80130ce:	6823      	ldr	r3, [r4, #0]
 80130d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80130d4:	6033      	str	r3, [r6, #0]
 80130d6:	bd70      	pop	{r4, r5, r6, pc}
 80130d8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80130dc:	4770      	bx	lr
 80130de:	bf00      	nop

080130e0 <rcl_action_server_wait_set_get_entities_ready>:
 80130e0:	2800      	cmp	r0, #0
 80130e2:	d05a      	beq.n	801319a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80130e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130e6:	460c      	mov	r4, r1
 80130e8:	b161      	cbz	r1, 8013104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80130ea:	4605      	mov	r5, r0
 80130ec:	6808      	ldr	r0, [r1, #0]
 80130ee:	b148      	cbz	r0, 8013104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80130f0:	4616      	mov	r6, r2
 80130f2:	461f      	mov	r7, r3
 80130f4:	f7fe f904 	bl	8011300 <rcl_service_is_valid>
 80130f8:	b120      	cbz	r0, 8013104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80130fa:	6820      	ldr	r0, [r4, #0]
 80130fc:	3004      	adds	r0, #4
 80130fe:	f7fe f8ff 	bl	8011300 <rcl_service_is_valid>
 8013102:	b910      	cbnz	r0, 801310a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8013104:	f640 0098 	movw	r0, #2200	@ 0x898
 8013108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801310a:	6820      	ldr	r0, [r4, #0]
 801310c:	3008      	adds	r0, #8
 801310e:	f7fe f8f7 	bl	8011300 <rcl_service_is_valid>
 8013112:	2800      	cmp	r0, #0
 8013114:	d0f6      	beq.n	8013104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013116:	6820      	ldr	r0, [r4, #0]
 8013118:	300c      	adds	r0, #12
 801311a:	f7f6 ff87 	bl	800a02c <rcl_publisher_is_valid_except_context>
 801311e:	2800      	cmp	r0, #0
 8013120:	d0f0      	beq.n	8013104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013122:	6820      	ldr	r0, [r4, #0]
 8013124:	3010      	adds	r0, #16
 8013126:	f7f6 ff81 	bl	800a02c <rcl_publisher_is_valid_except_context>
 801312a:	2800      	cmp	r0, #0
 801312c:	d0ea      	beq.n	8013104 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801312e:	b3be      	cbz	r6, 80131a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013130:	b3b7      	cbz	r7, 80131a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013132:	9b06      	ldr	r3, [sp, #24]
 8013134:	b3a3      	cbz	r3, 80131a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8013136:	9b07      	ldr	r3, [sp, #28]
 8013138:	b393      	cbz	r3, 80131a0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801313a:	6821      	ldr	r1, [r4, #0]
 801313c:	692a      	ldr	r2, [r5, #16]
 801313e:	6a2c      	ldr	r4, [r5, #32]
 8013140:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8013144:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8013148:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801314c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8013150:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8013154:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8013158:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801315c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013160:	1a64      	subs	r4, r4, r1
 8013162:	fab4 f484 	clz	r4, r4
 8013166:	0964      	lsrs	r4, r4, #5
 8013168:	7034      	strb	r4, [r6, #0]
 801316a:	1d0c      	adds	r4, r1, #4
 801316c:	1b1b      	subs	r3, r3, r4
 801316e:	fab3 f383 	clz	r3, r3
 8013172:	095b      	lsrs	r3, r3, #5
 8013174:	f101 0408 	add.w	r4, r1, #8
 8013178:	703b      	strb	r3, [r7, #0]
 801317a:	f101 0314 	add.w	r3, r1, #20
 801317e:	1b01      	subs	r1, r0, r4
 8013180:	1ad3      	subs	r3, r2, r3
 8013182:	fab1 f181 	clz	r1, r1
 8013186:	9a06      	ldr	r2, [sp, #24]
 8013188:	0949      	lsrs	r1, r1, #5
 801318a:	7011      	strb	r1, [r2, #0]
 801318c:	fab3 f383 	clz	r3, r3
 8013190:	9a07      	ldr	r2, [sp, #28]
 8013192:	095b      	lsrs	r3, r3, #5
 8013194:	2000      	movs	r0, #0
 8013196:	7013      	strb	r3, [r2, #0]
 8013198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801319a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801319e:	4770      	bx	lr
 80131a0:	200b      	movs	r0, #11
 80131a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080131a4 <_execute_event_handler>:
 80131a4:	2002      	movs	r0, #2
 80131a6:	4770      	bx	lr

080131a8 <_cancel_goal_event_handler>:
 80131a8:	2003      	movs	r0, #3
 80131aa:	4770      	bx	lr

080131ac <_succeed_event_handler>:
 80131ac:	2004      	movs	r0, #4
 80131ae:	4770      	bx	lr

080131b0 <_abort_event_handler>:
 80131b0:	2006      	movs	r0, #6
 80131b2:	4770      	bx	lr

080131b4 <_canceled_event_handler>:
 80131b4:	2005      	movs	r0, #5
 80131b6:	4770      	bx	lr

080131b8 <rcl_action_transition_goal_state>:
 80131b8:	b2c2      	uxtb	r2, r0
 80131ba:	2a06      	cmp	r2, #6
 80131bc:	d80c      	bhi.n	80131d8 <rcl_action_transition_goal_state+0x20>
 80131be:	2904      	cmp	r1, #4
 80131c0:	d80a      	bhi.n	80131d8 <rcl_action_transition_goal_state+0x20>
 80131c2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80131c6:	b410      	push	{r4}
 80131c8:	1853      	adds	r3, r2, r1
 80131ca:	4c06      	ldr	r4, [pc, #24]	@ (80131e4 <rcl_action_transition_goal_state+0x2c>)
 80131cc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80131d0:	b123      	cbz	r3, 80131dc <rcl_action_transition_goal_state+0x24>
 80131d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131d6:	4718      	bx	r3
 80131d8:	2000      	movs	r0, #0
 80131da:	4770      	bx	lr
 80131dc:	2000      	movs	r0, #0
 80131de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131e2:	4770      	bx	lr
 80131e4:	080182a8 	.word	0x080182a8

080131e8 <rcl_action_get_zero_initialized_cancel_response>:
 80131e8:	b510      	push	{r4, lr}
 80131ea:	4c07      	ldr	r4, [pc, #28]	@ (8013208 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80131ec:	4686      	mov	lr, r0
 80131ee:	4684      	mov	ip, r0
 80131f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80131fc:	6823      	ldr	r3, [r4, #0]
 80131fe:	f8cc 3000 	str.w	r3, [ip]
 8013202:	4670      	mov	r0, lr
 8013204:	bd10      	pop	{r4, pc}
 8013206:	bf00      	nop
 8013208:	08018334 	.word	0x08018334

0801320c <rclc_action_send_result_request>:
 801320c:	b1d0      	cbz	r0, 8013244 <rclc_action_send_result_request+0x38>
 801320e:	b500      	push	{lr}
 8013210:	4684      	mov	ip, r0
 8013212:	b087      	sub	sp, #28
 8013214:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013218:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801321c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013220:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013224:	f10d 0e08 	add.w	lr, sp, #8
 8013228:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801322c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013230:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8013234:	a902      	add	r1, sp, #8
 8013236:	3010      	adds	r0, #16
 8013238:	f7ff fbda 	bl	80129f0 <rcl_action_send_result_request>
 801323c:	b920      	cbnz	r0, 8013248 <rclc_action_send_result_request+0x3c>
 801323e:	b007      	add	sp, #28
 8013240:	f85d fb04 	ldr.w	pc, [sp], #4
 8013244:	200b      	movs	r0, #11
 8013246:	4770      	bx	lr
 8013248:	9001      	str	r0, [sp, #4]
 801324a:	f7f7 ff25 	bl	800b098 <rcutils_reset_error>
 801324e:	9801      	ldr	r0, [sp, #4]
 8013250:	b007      	add	sp, #28
 8013252:	f85d fb04 	ldr.w	pc, [sp], #4
 8013256:	bf00      	nop

08013258 <rclc_action_take_goal_handle>:
 8013258:	b160      	cbz	r0, 8013274 <rclc_action_take_goal_handle+0x1c>
 801325a:	6883      	ldr	r3, [r0, #8]
 801325c:	b143      	cbz	r3, 8013270 <rclc_action_take_goal_handle+0x18>
 801325e:	6819      	ldr	r1, [r3, #0]
 8013260:	6081      	str	r1, [r0, #8]
 8013262:	2200      	movs	r2, #0
 8013264:	721a      	strb	r2, [r3, #8]
 8013266:	68c1      	ldr	r1, [r0, #12]
 8013268:	6019      	str	r1, [r3, #0]
 801326a:	621a      	str	r2, [r3, #32]
 801326c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801326e:	60c3      	str	r3, [r0, #12]
 8013270:	4618      	mov	r0, r3
 8013272:	4770      	bx	lr
 8013274:	4603      	mov	r3, r0
 8013276:	e7fb      	b.n	8013270 <rclc_action_take_goal_handle+0x18>

08013278 <rclc_action_remove_used_goal_handle>:
 8013278:	b180      	cbz	r0, 801329c <rclc_action_remove_used_goal_handle+0x24>
 801327a:	b179      	cbz	r1, 801329c <rclc_action_remove_used_goal_handle+0x24>
 801327c:	68c3      	ldr	r3, [r0, #12]
 801327e:	4299      	cmp	r1, r3
 8013280:	d00d      	beq.n	801329e <rclc_action_remove_used_goal_handle+0x26>
 8013282:	b12b      	cbz	r3, 8013290 <rclc_action_remove_used_goal_handle+0x18>
 8013284:	681a      	ldr	r2, [r3, #0]
 8013286:	4291      	cmp	r1, r2
 8013288:	d003      	beq.n	8013292 <rclc_action_remove_used_goal_handle+0x1a>
 801328a:	4613      	mov	r3, r2
 801328c:	2b00      	cmp	r3, #0
 801328e:	d1f9      	bne.n	8013284 <rclc_action_remove_used_goal_handle+0xc>
 8013290:	4770      	bx	lr
 8013292:	680a      	ldr	r2, [r1, #0]
 8013294:	601a      	str	r2, [r3, #0]
 8013296:	6883      	ldr	r3, [r0, #8]
 8013298:	600b      	str	r3, [r1, #0]
 801329a:	6081      	str	r1, [r0, #8]
 801329c:	4770      	bx	lr
 801329e:	680b      	ldr	r3, [r1, #0]
 80132a0:	60c3      	str	r3, [r0, #12]
 80132a2:	e7f8      	b.n	8013296 <rclc_action_remove_used_goal_handle+0x1e>

080132a4 <rclc_action_find_goal_handle_by_uuid>:
 80132a4:	b538      	push	{r3, r4, r5, lr}
 80132a6:	b180      	cbz	r0, 80132ca <rclc_action_find_goal_handle_by_uuid+0x26>
 80132a8:	460d      	mov	r5, r1
 80132aa:	b181      	cbz	r1, 80132ce <rclc_action_find_goal_handle_by_uuid+0x2a>
 80132ac:	68c4      	ldr	r4, [r0, #12]
 80132ae:	b914      	cbnz	r4, 80132b6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80132b0:	e009      	b.n	80132c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80132b2:	6824      	ldr	r4, [r4, #0]
 80132b4:	b13c      	cbz	r4, 80132c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80132b6:	f104 0009 	add.w	r0, r4, #9
 80132ba:	2210      	movs	r2, #16
 80132bc:	4629      	mov	r1, r5
 80132be:	f003 f9db 	bl	8016678 <memcmp>
 80132c2:	2800      	cmp	r0, #0
 80132c4:	d1f5      	bne.n	80132b2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80132c6:	4620      	mov	r0, r4
 80132c8:	bd38      	pop	{r3, r4, r5, pc}
 80132ca:	4604      	mov	r4, r0
 80132cc:	e7fb      	b.n	80132c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80132ce:	460c      	mov	r4, r1
 80132d0:	e7f9      	b.n	80132c6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80132d2:	bf00      	nop

080132d4 <rclc_action_find_first_handle_by_status>:
 80132d4:	b140      	cbz	r0, 80132e8 <rclc_action_find_first_handle_by_status+0x14>
 80132d6:	68c0      	ldr	r0, [r0, #12]
 80132d8:	b910      	cbnz	r0, 80132e0 <rclc_action_find_first_handle_by_status+0xc>
 80132da:	e005      	b.n	80132e8 <rclc_action_find_first_handle_by_status+0x14>
 80132dc:	6800      	ldr	r0, [r0, #0]
 80132de:	b118      	cbz	r0, 80132e8 <rclc_action_find_first_handle_by_status+0x14>
 80132e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80132e4:	428b      	cmp	r3, r1
 80132e6:	d1f9      	bne.n	80132dc <rclc_action_find_first_handle_by_status+0x8>
 80132e8:	4770      	bx	lr
 80132ea:	bf00      	nop

080132ec <rclc_action_find_first_terminated_handle>:
 80132ec:	b140      	cbz	r0, 8013300 <rclc_action_find_first_terminated_handle+0x14>
 80132ee:	68c0      	ldr	r0, [r0, #12]
 80132f0:	b910      	cbnz	r0, 80132f8 <rclc_action_find_first_terminated_handle+0xc>
 80132f2:	e005      	b.n	8013300 <rclc_action_find_first_terminated_handle+0x14>
 80132f4:	6800      	ldr	r0, [r0, #0]
 80132f6:	b118      	cbz	r0, 8013300 <rclc_action_find_first_terminated_handle+0x14>
 80132f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80132fc:	2b03      	cmp	r3, #3
 80132fe:	ddf9      	ble.n	80132f4 <rclc_action_find_first_terminated_handle+0x8>
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop

08013304 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013304:	b170      	cbz	r0, 8013324 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013306:	68c0      	ldr	r0, [r0, #12]
 8013308:	b160      	cbz	r0, 8013324 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801330a:	b410      	push	{r4}
 801330c:	e001      	b.n	8013312 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801330e:	6800      	ldr	r0, [r0, #0]
 8013310:	b128      	cbz	r0, 801331e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013312:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8013316:	4299      	cmp	r1, r3
 8013318:	bf08      	it	eq
 801331a:	4294      	cmpeq	r4, r2
 801331c:	d1f7      	bne.n	801330e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801331e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013322:	4770      	bx	lr
 8013324:	4770      	bx	lr
 8013326:	bf00      	nop

08013328 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013328:	b170      	cbz	r0, 8013348 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801332a:	68c0      	ldr	r0, [r0, #12]
 801332c:	b160      	cbz	r0, 8013348 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801332e:	b410      	push	{r4}
 8013330:	e001      	b.n	8013336 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8013332:	6800      	ldr	r0, [r0, #0]
 8013334:	b128      	cbz	r0, 8013342 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8013336:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801333a:	4299      	cmp	r1, r3
 801333c:	bf08      	it	eq
 801333e:	4294      	cmpeq	r4, r2
 8013340:	d1f7      	bne.n	8013332 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8013342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013346:	4770      	bx	lr
 8013348:	4770      	bx	lr
 801334a:	bf00      	nop

0801334c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801334c:	b170      	cbz	r0, 801336c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801334e:	68c0      	ldr	r0, [r0, #12]
 8013350:	b160      	cbz	r0, 801336c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013352:	b410      	push	{r4}
 8013354:	e001      	b.n	801335a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8013356:	6800      	ldr	r0, [r0, #0]
 8013358:	b128      	cbz	r0, 8013366 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801335a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801335e:	4299      	cmp	r1, r3
 8013360:	bf08      	it	eq
 8013362:	4294      	cmpeq	r4, r2
 8013364:	d1f7      	bne.n	8013356 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8013366:	f85d 4b04 	ldr.w	r4, [sp], #4
 801336a:	4770      	bx	lr
 801336c:	4770      	bx	lr
 801336e:	bf00      	nop

08013370 <rclc_action_find_first_handle_with_goal_response>:
 8013370:	b140      	cbz	r0, 8013384 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013372:	68c0      	ldr	r0, [r0, #12]
 8013374:	b910      	cbnz	r0, 801337c <rclc_action_find_first_handle_with_goal_response+0xc>
 8013376:	e005      	b.n	8013384 <rclc_action_find_first_handle_with_goal_response+0x14>
 8013378:	6800      	ldr	r0, [r0, #0]
 801337a:	b118      	cbz	r0, 8013384 <rclc_action_find_first_handle_with_goal_response+0x14>
 801337c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d0f9      	beq.n	8013378 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013384:	4770      	bx	lr
 8013386:	bf00      	nop

08013388 <rclc_action_find_first_handle_with_result_response>:
 8013388:	b140      	cbz	r0, 801339c <rclc_action_find_first_handle_with_result_response+0x14>
 801338a:	68c0      	ldr	r0, [r0, #12]
 801338c:	b910      	cbnz	r0, 8013394 <rclc_action_find_first_handle_with_result_response+0xc>
 801338e:	e005      	b.n	801339c <rclc_action_find_first_handle_with_result_response+0x14>
 8013390:	6800      	ldr	r0, [r0, #0]
 8013392:	b118      	cbz	r0, 801339c <rclc_action_find_first_handle_with_result_response+0x14>
 8013394:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013398:	2b00      	cmp	r3, #0
 801339a:	d0f9      	beq.n	8013390 <rclc_action_find_first_handle_with_result_response+0x8>
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop

080133a0 <rclc_action_server_response_goal_request>:
 80133a0:	b198      	cbz	r0, 80133ca <rclc_action_server_response_goal_request+0x2a>
 80133a2:	b510      	push	{r4, lr}
 80133a4:	6844      	ldr	r4, [r0, #4]
 80133a6:	b086      	sub	sp, #24
 80133a8:	2200      	movs	r2, #0
 80133aa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80133ae:	460b      	mov	r3, r1
 80133b0:	9205      	str	r2, [sp, #20]
 80133b2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80133b6:	aa03      	add	r2, sp, #12
 80133b8:	f104 0010 	add.w	r0, r4, #16
 80133bc:	f88d 300c 	strb.w	r3, [sp, #12]
 80133c0:	f7ff fd4a 	bl	8012e58 <rcl_action_send_goal_response>
 80133c4:	b918      	cbnz	r0, 80133ce <rclc_action_server_response_goal_request+0x2e>
 80133c6:	b006      	add	sp, #24
 80133c8:	bd10      	pop	{r4, pc}
 80133ca:	200b      	movs	r0, #11
 80133cc:	4770      	bx	lr
 80133ce:	9001      	str	r0, [sp, #4]
 80133d0:	f7f7 fe62 	bl	800b098 <rcutils_reset_error>
 80133d4:	9801      	ldr	r0, [sp, #4]
 80133d6:	b006      	add	sp, #24
 80133d8:	bd10      	pop	{r4, pc}
 80133da:	bf00      	nop
 80133dc:	0000      	movs	r0, r0
	...

080133e0 <rclc_action_server_goal_cancel_accept>:
 80133e0:	b310      	cbz	r0, 8013428 <rclc_action_server_goal_cancel_accept+0x48>
 80133e2:	b510      	push	{r4, lr}
 80133e4:	b090      	sub	sp, #64	@ 0x40
 80133e6:	4604      	mov	r4, r0
 80133e8:	a806      	add	r0, sp, #24
 80133ea:	f7ff fefd 	bl	80131e8 <rcl_action_get_zero_initialized_cancel_response>
 80133ee:	2300      	movs	r3, #0
 80133f0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80133f4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80133f8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80133fc:	f88d 3018 	strb.w	r3, [sp, #24]
 8013400:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013404:	f8cd d01c 	str.w	sp, [sp, #28]
 8013408:	46ec      	mov	ip, sp
 801340a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801340e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013430 <rclc_action_server_goal_cancel_accept+0x50>
 8013412:	6860      	ldr	r0, [r4, #4]
 8013414:	aa06      	add	r2, sp, #24
 8013416:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801341a:	3010      	adds	r0, #16
 801341c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013420:	f7ff fdd2 	bl	8012fc8 <rcl_action_send_cancel_response>
 8013424:	b010      	add	sp, #64	@ 0x40
 8013426:	bd10      	pop	{r4, pc}
 8013428:	200b      	movs	r0, #11
 801342a:	4770      	bx	lr
 801342c:	f3af 8000 	nop.w
 8013430:	00000001 	.word	0x00000001
 8013434:	00000001 	.word	0x00000001

08013438 <rclc_action_server_goal_cancel_reject>:
 8013438:	b082      	sub	sp, #8
 801343a:	b530      	push	{r4, r5, lr}
 801343c:	b08b      	sub	sp, #44	@ 0x2c
 801343e:	ac0e      	add	r4, sp, #56	@ 0x38
 8013440:	e884 000c 	stmia.w	r4, {r2, r3}
 8013444:	b188      	cbz	r0, 801346a <rclc_action_server_goal_cancel_reject+0x32>
 8013446:	4604      	mov	r4, r0
 8013448:	a801      	add	r0, sp, #4
 801344a:	460d      	mov	r5, r1
 801344c:	f7ff fecc 	bl	80131e8 <rcl_action_get_zero_initialized_cancel_response>
 8013450:	aa01      	add	r2, sp, #4
 8013452:	a90e      	add	r1, sp, #56	@ 0x38
 8013454:	f104 0010 	add.w	r0, r4, #16
 8013458:	f88d 5004 	strb.w	r5, [sp, #4]
 801345c:	f7ff fdb4 	bl	8012fc8 <rcl_action_send_cancel_response>
 8013460:	b00b      	add	sp, #44	@ 0x2c
 8013462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013466:	b002      	add	sp, #8
 8013468:	4770      	bx	lr
 801346a:	200b      	movs	r0, #11
 801346c:	b00b      	add	sp, #44	@ 0x2c
 801346e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013472:	b002      	add	sp, #8
 8013474:	4770      	bx	lr
 8013476:	bf00      	nop

08013478 <__atomic_load_8>:
 8013478:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801347c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013480:	4a15      	ldr	r2, [pc, #84]	@ (80134d8 <__atomic_load_8+0x60>)
 8013482:	4b16      	ldr	r3, [pc, #88]	@ (80134dc <__atomic_load_8+0x64>)
 8013484:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013488:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801348c:	fb02 f101 	mul.w	r1, r2, r1
 8013490:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013494:	fba3 2301 	umull	r2, r3, r3, r1
 8013498:	091b      	lsrs	r3, r3, #4
 801349a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801349e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80134a2:	b4d0      	push	{r4, r6, r7}
 80134a4:	4c0e      	ldr	r4, [pc, #56]	@ (80134e0 <__atomic_load_8+0x68>)
 80134a6:	1ac9      	subs	r1, r1, r3
 80134a8:	1862      	adds	r2, r4, r1
 80134aa:	f04f 0c01 	mov.w	ip, #1
 80134ae:	e8d2 3f4f 	ldrexb	r3, [r2]
 80134b2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80134b6:	2e00      	cmp	r6, #0
 80134b8:	d1f9      	bne.n	80134ae <__atomic_load_8+0x36>
 80134ba:	f3bf 8f5b 	dmb	ish
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d1f4      	bne.n	80134ae <__atomic_load_8+0x36>
 80134c4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80134c8:	f3bf 8f5b 	dmb	ish
 80134cc:	5463      	strb	r3, [r4, r1]
 80134ce:	4630      	mov	r0, r6
 80134d0:	4639      	mov	r1, r7
 80134d2:	bcd0      	pop	{r4, r6, r7}
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	27d4eb2d 	.word	0x27d4eb2d
 80134dc:	b21642c9 	.word	0xb21642c9
 80134e0:	2000aea8 	.word	0x2000aea8

080134e4 <__atomic_store_8>:
 80134e4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80134e8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80134ec:	b570      	push	{r4, r5, r6, lr}
 80134ee:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80134f2:	4c14      	ldr	r4, [pc, #80]	@ (8013544 <__atomic_store_8+0x60>)
 80134f4:	4d14      	ldr	r5, [pc, #80]	@ (8013548 <__atomic_store_8+0x64>)
 80134f6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80134fa:	fb04 f101 	mul.w	r1, r4, r1
 80134fe:	4c13      	ldr	r4, [pc, #76]	@ (801354c <__atomic_store_8+0x68>)
 8013500:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013504:	fba4 4e01 	umull	r4, lr, r4, r1
 8013508:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801350c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013510:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013514:	eba1 0e0e 	sub.w	lr, r1, lr
 8013518:	eb05 0c0e 	add.w	ip, r5, lr
 801351c:	f04f 0401 	mov.w	r4, #1
 8013520:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013524:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013528:	2e00      	cmp	r6, #0
 801352a:	d1f9      	bne.n	8013520 <__atomic_store_8+0x3c>
 801352c:	f3bf 8f5b 	dmb	ish
 8013530:	b2c9      	uxtb	r1, r1
 8013532:	2900      	cmp	r1, #0
 8013534:	d1f4      	bne.n	8013520 <__atomic_store_8+0x3c>
 8013536:	e9c0 2300 	strd	r2, r3, [r0]
 801353a:	f3bf 8f5b 	dmb	ish
 801353e:	f805 100e 	strb.w	r1, [r5, lr]
 8013542:	bd70      	pop	{r4, r5, r6, pc}
 8013544:	27d4eb2d 	.word	0x27d4eb2d
 8013548:	2000aea8 	.word	0x2000aea8
 801354c:	b21642c9 	.word	0xb21642c9

08013550 <__atomic_exchange_8>:
 8013550:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8013554:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8013558:	4916      	ldr	r1, [pc, #88]	@ (80135b4 <__atomic_exchange_8+0x64>)
 801355a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801355e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8013562:	fb01 fc0c 	mul.w	ip, r1, ip
 8013566:	4914      	ldr	r1, [pc, #80]	@ (80135b8 <__atomic_exchange_8+0x68>)
 8013568:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801356c:	b570      	push	{r4, r5, r6, lr}
 801356e:	4605      	mov	r5, r0
 8013570:	fba1 010c 	umull	r0, r1, r1, ip
 8013574:	0909      	lsrs	r1, r1, #4
 8013576:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801357a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801357e:	4e0f      	ldr	r6, [pc, #60]	@ (80135bc <__atomic_exchange_8+0x6c>)
 8013580:	ebac 0c01 	sub.w	ip, ip, r1
 8013584:	eb06 010c 	add.w	r1, r6, ip
 8013588:	f04f 0e01 	mov.w	lr, #1
 801358c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013590:	e8c1 ef40 	strexb	r0, lr, [r1]
 8013594:	2800      	cmp	r0, #0
 8013596:	d1f9      	bne.n	801358c <__atomic_exchange_8+0x3c>
 8013598:	f3bf 8f5b 	dmb	ish
 801359c:	b2e4      	uxtb	r4, r4
 801359e:	2c00      	cmp	r4, #0
 80135a0:	d1f4      	bne.n	801358c <__atomic_exchange_8+0x3c>
 80135a2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80135a6:	e9c5 2300 	strd	r2, r3, [r5]
 80135aa:	f3bf 8f5b 	dmb	ish
 80135ae:	f806 400c 	strb.w	r4, [r6, ip]
 80135b2:	bd70      	pop	{r4, r5, r6, pc}
 80135b4:	27d4eb2d 	.word	0x27d4eb2d
 80135b8:	b21642c9 	.word	0xb21642c9
 80135bc:	2000aea8 	.word	0x2000aea8

080135c0 <rcutils_get_env>:
 80135c0:	b168      	cbz	r0, 80135de <rcutils_get_env+0x1e>
 80135c2:	b510      	push	{r4, lr}
 80135c4:	460c      	mov	r4, r1
 80135c6:	b129      	cbz	r1, 80135d4 <rcutils_get_env+0x14>
 80135c8:	f002 fcb2 	bl	8015f30 <getenv>
 80135cc:	b120      	cbz	r0, 80135d8 <rcutils_get_env+0x18>
 80135ce:	6020      	str	r0, [r4, #0]
 80135d0:	2000      	movs	r0, #0
 80135d2:	bd10      	pop	{r4, pc}
 80135d4:	4803      	ldr	r0, [pc, #12]	@ (80135e4 <rcutils_get_env+0x24>)
 80135d6:	bd10      	pop	{r4, pc}
 80135d8:	4b03      	ldr	r3, [pc, #12]	@ (80135e8 <rcutils_get_env+0x28>)
 80135da:	6023      	str	r3, [r4, #0]
 80135dc:	bd10      	pop	{r4, pc}
 80135de:	4803      	ldr	r0, [pc, #12]	@ (80135ec <rcutils_get_env+0x2c>)
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop
 80135e4:	08018374 	.word	0x08018374
 80135e8:	08018498 	.word	0x08018498
 80135ec:	08018358 	.word	0x08018358

080135f0 <rcutils_is_directory>:
 80135f0:	2000      	movs	r0, #0
 80135f2:	4770      	bx	lr

080135f4 <rcutils_join_path>:
 80135f4:	b082      	sub	sp, #8
 80135f6:	e88d 000c 	stmia.w	sp, {r2, r3}
 80135fa:	2000      	movs	r0, #0
 80135fc:	b002      	add	sp, #8
 80135fe:	4770      	bx	lr

08013600 <rcutils_to_native_path>:
 8013600:	b084      	sub	sp, #16
 8013602:	a801      	add	r0, sp, #4
 8013604:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013608:	b004      	add	sp, #16
 801360a:	2000      	movs	r0, #0
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop

08013610 <rcutils_format_string_limit>:
 8013610:	b40f      	push	{r0, r1, r2, r3}
 8013612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013614:	b083      	sub	sp, #12
 8013616:	ac08      	add	r4, sp, #32
 8013618:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801361a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801361e:	b34e      	cbz	r6, 8013674 <rcutils_format_string_limit+0x64>
 8013620:	a808      	add	r0, sp, #32
 8013622:	f7f7 fd13 	bl	800b04c <rcutils_allocator_is_valid>
 8013626:	b328      	cbz	r0, 8013674 <rcutils_format_string_limit+0x64>
 8013628:	2100      	movs	r1, #0
 801362a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801362c:	4632      	mov	r2, r6
 801362e:	4608      	mov	r0, r1
 8013630:	e9cd 3300 	strd	r3, r3, [sp]
 8013634:	f000 f8f4 	bl	8013820 <rcutils_vsnprintf>
 8013638:	1c43      	adds	r3, r0, #1
 801363a:	4605      	mov	r5, r0
 801363c:	d01a      	beq.n	8013674 <rcutils_format_string_limit+0x64>
 801363e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013640:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013642:	1c47      	adds	r7, r0, #1
 8013644:	429f      	cmp	r7, r3
 8013646:	bf84      	itt	hi
 8013648:	461f      	movhi	r7, r3
 801364a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801364e:	4638      	mov	r0, r7
 8013650:	9b08      	ldr	r3, [sp, #32]
 8013652:	4798      	blx	r3
 8013654:	4604      	mov	r4, r0
 8013656:	b168      	cbz	r0, 8013674 <rcutils_format_string_limit+0x64>
 8013658:	9b01      	ldr	r3, [sp, #4]
 801365a:	4632      	mov	r2, r6
 801365c:	4639      	mov	r1, r7
 801365e:	f000 f8df 	bl	8013820 <rcutils_vsnprintf>
 8013662:	2800      	cmp	r0, #0
 8013664:	db02      	blt.n	801366c <rcutils_format_string_limit+0x5c>
 8013666:	2300      	movs	r3, #0
 8013668:	5563      	strb	r3, [r4, r5]
 801366a:	e004      	b.n	8013676 <rcutils_format_string_limit+0x66>
 801366c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801366e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013670:	4620      	mov	r0, r4
 8013672:	4798      	blx	r3
 8013674:	2400      	movs	r4, #0
 8013676:	4620      	mov	r0, r4
 8013678:	b003      	add	sp, #12
 801367a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801367e:	b004      	add	sp, #16
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop

08013684 <rcutils_repl_str>:
 8013684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013688:	ed2d 8b02 	vpush	{d8}
 801368c:	b087      	sub	sp, #28
 801368e:	4680      	mov	r8, r0
 8013690:	4608      	mov	r0, r1
 8013692:	f8cd 8004 	str.w	r8, [sp, #4]
 8013696:	ee08 2a10 	vmov	s16, r2
 801369a:	468a      	mov	sl, r1
 801369c:	4699      	mov	r9, r3
 801369e:	f7ec fdc9 	bl	8000234 <strlen>
 80136a2:	2600      	movs	r6, #0
 80136a4:	4647      	mov	r7, r8
 80136a6:	9002      	str	r0, [sp, #8]
 80136a8:	46b3      	mov	fp, r6
 80136aa:	2510      	movs	r5, #16
 80136ac:	46b0      	mov	r8, r6
 80136ae:	e01d      	b.n	80136ec <rcutils_repl_str+0x68>
 80136b0:	f10b 0b01 	add.w	fp, fp, #1
 80136b4:	455e      	cmp	r6, fp
 80136b6:	d211      	bcs.n	80136dc <rcutils_repl_str+0x58>
 80136b8:	442e      	add	r6, r5
 80136ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80136be:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80136c2:	00b1      	lsls	r1, r6, #2
 80136c4:	4798      	blx	r3
 80136c6:	2800      	cmp	r0, #0
 80136c8:	f000 8088 	beq.w	80137dc <rcutils_repl_str+0x158>
 80136cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136d0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80136d4:	4680      	mov	r8, r0
 80136d6:	bf28      	it	cs
 80136d8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80136dc:	9a01      	ldr	r2, [sp, #4]
 80136de:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80136e2:	1aa2      	subs	r2, r4, r2
 80136e4:	f843 2c04 	str.w	r2, [r3, #-4]
 80136e8:	9b02      	ldr	r3, [sp, #8]
 80136ea:	18e7      	adds	r7, r4, r3
 80136ec:	4651      	mov	r1, sl
 80136ee:	4638      	mov	r0, r7
 80136f0:	f003 f813 	bl	801671a <strstr>
 80136f4:	4604      	mov	r4, r0
 80136f6:	4640      	mov	r0, r8
 80136f8:	2c00      	cmp	r4, #0
 80136fa:	d1d9      	bne.n	80136b0 <rcutils_repl_str+0x2c>
 80136fc:	46b8      	mov	r8, r7
 80136fe:	4607      	mov	r7, r0
 8013700:	4640      	mov	r0, r8
 8013702:	f7ec fd97 	bl	8000234 <strlen>
 8013706:	9b01      	ldr	r3, [sp, #4]
 8013708:	eba8 0303 	sub.w	r3, r8, r3
 801370c:	181c      	adds	r4, r3, r0
 801370e:	9404      	str	r4, [sp, #16]
 8013710:	f1bb 0f00 	cmp.w	fp, #0
 8013714:	d04a      	beq.n	80137ac <rcutils_repl_str+0x128>
 8013716:	ee18 0a10 	vmov	r0, s16
 801371a:	f7ec fd8b 	bl	8000234 <strlen>
 801371e:	9b02      	ldr	r3, [sp, #8]
 8013720:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013724:	1ac3      	subs	r3, r0, r3
 8013726:	fb0b 4303 	mla	r3, fp, r3, r4
 801372a:	461a      	mov	r2, r3
 801372c:	9305      	str	r3, [sp, #20]
 801372e:	4606      	mov	r6, r0
 8013730:	f8d9 3000 	ldr.w	r3, [r9]
 8013734:	1c50      	adds	r0, r2, #1
 8013736:	4798      	blx	r3
 8013738:	9003      	str	r0, [sp, #12]
 801373a:	2800      	cmp	r0, #0
 801373c:	d04f      	beq.n	80137de <rcutils_repl_str+0x15a>
 801373e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013742:	683a      	ldr	r2, [r7, #0]
 8013744:	4641      	mov	r1, r8
 8013746:	f003 f88a 	bl	801685e <memcpy>
 801374a:	683d      	ldr	r5, [r7, #0]
 801374c:	9b03      	ldr	r3, [sp, #12]
 801374e:	9701      	str	r7, [sp, #4]
 8013750:	46ba      	mov	sl, r7
 8013752:	441d      	add	r5, r3
 8013754:	9f02      	ldr	r7, [sp, #8]
 8013756:	f8cd 9008 	str.w	r9, [sp, #8]
 801375a:	2401      	movs	r4, #1
 801375c:	46d1      	mov	r9, sl
 801375e:	ee18 aa10 	vmov	sl, s16
 8013762:	e00a      	b.n	801377a <rcutils_repl_str+0xf6>
 8013764:	f8d9 5000 	ldr.w	r5, [r9]
 8013768:	1aaa      	subs	r2, r5, r2
 801376a:	1885      	adds	r5, r0, r2
 801376c:	f003 f877 	bl	801685e <memcpy>
 8013770:	45a3      	cmp	fp, r4
 8013772:	f104 0201 	add.w	r2, r4, #1
 8013776:	d935      	bls.n	80137e4 <rcutils_repl_str+0x160>
 8013778:	4614      	mov	r4, r2
 801377a:	4632      	mov	r2, r6
 801377c:	4651      	mov	r1, sl
 801377e:	4628      	mov	r0, r5
 8013780:	f003 f86d 	bl	801685e <memcpy>
 8013784:	f859 2b04 	ldr.w	r2, [r9], #4
 8013788:	45a3      	cmp	fp, r4
 801378a:	443a      	add	r2, r7
 801378c:	eb05 0006 	add.w	r0, r5, r6
 8013790:	eb08 0102 	add.w	r1, r8, r2
 8013794:	d1e6      	bne.n	8013764 <rcutils_repl_str+0xe0>
 8013796:	9b04      	ldr	r3, [sp, #16]
 8013798:	1a9a      	subs	r2, r3, r2
 801379a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801379e:	f003 f85e 	bl	801685e <memcpy>
 80137a2:	9a03      	ldr	r2, [sp, #12]
 80137a4:	9905      	ldr	r1, [sp, #20]
 80137a6:	2300      	movs	r3, #0
 80137a8:	5453      	strb	r3, [r2, r1]
 80137aa:	e00b      	b.n	80137c4 <rcutils_repl_str+0x140>
 80137ac:	4620      	mov	r0, r4
 80137ae:	f8d9 3000 	ldr.w	r3, [r9]
 80137b2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80137b6:	3001      	adds	r0, #1
 80137b8:	4798      	blx	r3
 80137ba:	9003      	str	r0, [sp, #12]
 80137bc:	b110      	cbz	r0, 80137c4 <rcutils_repl_str+0x140>
 80137be:	9901      	ldr	r1, [sp, #4]
 80137c0:	f003 f845 	bl	801684e <strcpy>
 80137c4:	4638      	mov	r0, r7
 80137c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80137ca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80137ce:	4798      	blx	r3
 80137d0:	9803      	ldr	r0, [sp, #12]
 80137d2:	b007      	add	sp, #28
 80137d4:	ecbd 8b02 	vpop	{d8}
 80137d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137dc:	4647      	mov	r7, r8
 80137de:	2300      	movs	r3, #0
 80137e0:	9303      	str	r3, [sp, #12]
 80137e2:	e7ef      	b.n	80137c4 <rcutils_repl_str+0x140>
 80137e4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80137e8:	e7db      	b.n	80137a2 <rcutils_repl_str+0x11e>
 80137ea:	bf00      	nop

080137ec <rcutils_snprintf>:
 80137ec:	b40c      	push	{r2, r3}
 80137ee:	b530      	push	{r4, r5, lr}
 80137f0:	b083      	sub	sp, #12
 80137f2:	ab06      	add	r3, sp, #24
 80137f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80137f8:	9301      	str	r3, [sp, #4]
 80137fa:	b152      	cbz	r2, 8013812 <rcutils_snprintf+0x26>
 80137fc:	b138      	cbz	r0, 801380e <rcutils_snprintf+0x22>
 80137fe:	b141      	cbz	r1, 8013812 <rcutils_snprintf+0x26>
 8013800:	f002 ff2c 	bl	801665c <vsniprintf>
 8013804:	b003      	add	sp, #12
 8013806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801380a:	b002      	add	sp, #8
 801380c:	4770      	bx	lr
 801380e:	2900      	cmp	r1, #0
 8013810:	d0f6      	beq.n	8013800 <rcutils_snprintf+0x14>
 8013812:	f002 ffef 	bl	80167f4 <__errno>
 8013816:	2316      	movs	r3, #22
 8013818:	6003      	str	r3, [r0, #0]
 801381a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801381e:	e7f1      	b.n	8013804 <rcutils_snprintf+0x18>

08013820 <rcutils_vsnprintf>:
 8013820:	b570      	push	{r4, r5, r6, lr}
 8013822:	b13a      	cbz	r2, 8013834 <rcutils_vsnprintf+0x14>
 8013824:	b120      	cbz	r0, 8013830 <rcutils_vsnprintf+0x10>
 8013826:	b129      	cbz	r1, 8013834 <rcutils_vsnprintf+0x14>
 8013828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801382c:	f002 bf16 	b.w	801665c <vsniprintf>
 8013830:	2900      	cmp	r1, #0
 8013832:	d0f9      	beq.n	8013828 <rcutils_vsnprintf+0x8>
 8013834:	f002 ffde 	bl	80167f4 <__errno>
 8013838:	2316      	movs	r3, #22
 801383a:	6003      	str	r3, [r0, #0]
 801383c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013840:	bd70      	pop	{r4, r5, r6, pc}
 8013842:	bf00      	nop

08013844 <rcutils_strdup>:
 8013844:	b084      	sub	sp, #16
 8013846:	b570      	push	{r4, r5, r6, lr}
 8013848:	b082      	sub	sp, #8
 801384a:	ac07      	add	r4, sp, #28
 801384c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8013850:	4605      	mov	r5, r0
 8013852:	b1b0      	cbz	r0, 8013882 <rcutils_strdup+0x3e>
 8013854:	f7ec fcee 	bl	8000234 <strlen>
 8013858:	1c42      	adds	r2, r0, #1
 801385a:	9b07      	ldr	r3, [sp, #28]
 801385c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801385e:	9201      	str	r2, [sp, #4]
 8013860:	4606      	mov	r6, r0
 8013862:	4610      	mov	r0, r2
 8013864:	4798      	blx	r3
 8013866:	4604      	mov	r4, r0
 8013868:	b128      	cbz	r0, 8013876 <rcutils_strdup+0x32>
 801386a:	9a01      	ldr	r2, [sp, #4]
 801386c:	4629      	mov	r1, r5
 801386e:	f002 fff6 	bl	801685e <memcpy>
 8013872:	2300      	movs	r3, #0
 8013874:	55a3      	strb	r3, [r4, r6]
 8013876:	4620      	mov	r0, r4
 8013878:	b002      	add	sp, #8
 801387a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801387e:	b004      	add	sp, #16
 8013880:	4770      	bx	lr
 8013882:	4604      	mov	r4, r0
 8013884:	e7f7      	b.n	8013876 <rcutils_strdup+0x32>
 8013886:	bf00      	nop

08013888 <rcutils_strndup>:
 8013888:	b082      	sub	sp, #8
 801388a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801388c:	ac06      	add	r4, sp, #24
 801388e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013892:	4605      	mov	r5, r0
 8013894:	b188      	cbz	r0, 80138ba <rcutils_strndup+0x32>
 8013896:	1c4f      	adds	r7, r1, #1
 8013898:	460e      	mov	r6, r1
 801389a:	4638      	mov	r0, r7
 801389c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801389e:	4790      	blx	r2
 80138a0:	4604      	mov	r4, r0
 80138a2:	b128      	cbz	r0, 80138b0 <rcutils_strndup+0x28>
 80138a4:	463a      	mov	r2, r7
 80138a6:	4629      	mov	r1, r5
 80138a8:	f002 ffd9 	bl	801685e <memcpy>
 80138ac:	2300      	movs	r3, #0
 80138ae:	55a3      	strb	r3, [r4, r6]
 80138b0:	4620      	mov	r0, r4
 80138b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80138b6:	b002      	add	sp, #8
 80138b8:	4770      	bx	lr
 80138ba:	4604      	mov	r4, r0
 80138bc:	e7f8      	b.n	80138b0 <rcutils_strndup+0x28>
 80138be:	bf00      	nop

080138c0 <rcutils_get_zero_initialized_string_map>:
 80138c0:	4b01      	ldr	r3, [pc, #4]	@ (80138c8 <rcutils_get_zero_initialized_string_map+0x8>)
 80138c2:	2000      	movs	r0, #0
 80138c4:	6018      	str	r0, [r3, #0]
 80138c6:	4770      	bx	lr
 80138c8:	2000aec0 	.word	0x2000aec0

080138cc <rcutils_string_map_reserve>:
 80138cc:	2800      	cmp	r0, #0
 80138ce:	d05f      	beq.n	8013990 <rcutils_string_map_reserve+0xc4>
 80138d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d4:	460c      	mov	r4, r1
 80138d6:	6801      	ldr	r1, [r0, #0]
 80138d8:	b082      	sub	sp, #8
 80138da:	4605      	mov	r5, r0
 80138dc:	b129      	cbz	r1, 80138ea <rcutils_string_map_reserve+0x1e>
 80138de:	68cb      	ldr	r3, [r1, #12]
 80138e0:	42a3      	cmp	r3, r4
 80138e2:	d906      	bls.n	80138f2 <rcutils_string_map_reserve+0x26>
 80138e4:	461c      	mov	r4, r3
 80138e6:	2900      	cmp	r1, #0
 80138e8:	d1f9      	bne.n	80138de <rcutils_string_map_reserve+0x12>
 80138ea:	201f      	movs	r0, #31
 80138ec:	b002      	add	sp, #8
 80138ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f2:	688b      	ldr	r3, [r1, #8]
 80138f4:	42a3      	cmp	r3, r4
 80138f6:	d047      	beq.n	8013988 <rcutils_string_map_reserve+0xbc>
 80138f8:	6a0e      	ldr	r6, [r1, #32]
 80138fa:	2c00      	cmp	r4, #0
 80138fc:	d034      	beq.n	8013968 <rcutils_string_map_reserve+0x9c>
 80138fe:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8013902:	d243      	bcs.n	801398c <rcutils_string_map_reserve+0xc0>
 8013904:	00a7      	lsls	r7, r4, #2
 8013906:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801390a:	6808      	ldr	r0, [r1, #0]
 801390c:	4632      	mov	r2, r6
 801390e:	4639      	mov	r1, r7
 8013910:	47c0      	blx	r8
 8013912:	2800      	cmp	r0, #0
 8013914:	d03a      	beq.n	801398c <rcutils_string_map_reserve+0xc0>
 8013916:	682b      	ldr	r3, [r5, #0]
 8013918:	4632      	mov	r2, r6
 801391a:	6018      	str	r0, [r3, #0]
 801391c:	4639      	mov	r1, r7
 801391e:	6858      	ldr	r0, [r3, #4]
 8013920:	47c0      	blx	r8
 8013922:	2800      	cmp	r0, #0
 8013924:	d032      	beq.n	801398c <rcutils_string_map_reserve+0xc0>
 8013926:	682d      	ldr	r5, [r5, #0]
 8013928:	68ab      	ldr	r3, [r5, #8]
 801392a:	6068      	str	r0, [r5, #4]
 801392c:	42a3      	cmp	r3, r4
 801392e:	d226      	bcs.n	801397e <rcutils_string_map_reserve+0xb2>
 8013930:	682a      	ldr	r2, [r5, #0]
 8013932:	eb00 0c07 	add.w	ip, r0, r7
 8013936:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801393a:	45e6      	cmp	lr, ip
 801393c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8013940:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8013944:	d203      	bcs.n	801394e <rcutils_string_map_reserve+0x82>
 8013946:	eb02 0c07 	add.w	ip, r2, r7
 801394a:	4566      	cmp	r6, ip
 801394c:	d322      	bcc.n	8013994 <rcutils_string_map_reserve+0xc8>
 801394e:	1ae3      	subs	r3, r4, r3
 8013950:	009a      	lsls	r2, r3, #2
 8013952:	4670      	mov	r0, lr
 8013954:	2100      	movs	r1, #0
 8013956:	9201      	str	r2, [sp, #4]
 8013958:	f002 feb8 	bl	80166cc <memset>
 801395c:	9a01      	ldr	r2, [sp, #4]
 801395e:	2100      	movs	r1, #0
 8013960:	4630      	mov	r0, r6
 8013962:	f002 feb3 	bl	80166cc <memset>
 8013966:	e00a      	b.n	801397e <rcutils_string_map_reserve+0xb2>
 8013968:	694f      	ldr	r7, [r1, #20]
 801396a:	6808      	ldr	r0, [r1, #0]
 801396c:	4631      	mov	r1, r6
 801396e:	47b8      	blx	r7
 8013970:	682b      	ldr	r3, [r5, #0]
 8013972:	4631      	mov	r1, r6
 8013974:	6858      	ldr	r0, [r3, #4]
 8013976:	601c      	str	r4, [r3, #0]
 8013978:	47b8      	blx	r7
 801397a:	682d      	ldr	r5, [r5, #0]
 801397c:	606c      	str	r4, [r5, #4]
 801397e:	2000      	movs	r0, #0
 8013980:	60ac      	str	r4, [r5, #8]
 8013982:	b002      	add	sp, #8
 8013984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013988:	2000      	movs	r0, #0
 801398a:	e7af      	b.n	80138ec <rcutils_string_map_reserve+0x20>
 801398c:	200a      	movs	r0, #10
 801398e:	e7ad      	b.n	80138ec <rcutils_string_map_reserve+0x20>
 8013990:	200b      	movs	r0, #11
 8013992:	4770      	bx	lr
 8013994:	1f0b      	subs	r3, r1, #4
 8013996:	4418      	add	r0, r3
 8013998:	4413      	add	r3, r2
 801399a:	3a04      	subs	r2, #4
 801399c:	4417      	add	r7, r2
 801399e:	2200      	movs	r2, #0
 80139a0:	f843 2f04 	str.w	r2, [r3, #4]!
 80139a4:	42bb      	cmp	r3, r7
 80139a6:	f840 2f04 	str.w	r2, [r0, #4]!
 80139aa:	d1f9      	bne.n	80139a0 <rcutils_string_map_reserve+0xd4>
 80139ac:	e7e7      	b.n	801397e <rcutils_string_map_reserve+0xb2>
 80139ae:	bf00      	nop

080139b0 <rcutils_string_map_init>:
 80139b0:	b082      	sub	sp, #8
 80139b2:	b570      	push	{r4, r5, r6, lr}
 80139b4:	ac04      	add	r4, sp, #16
 80139b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80139ba:	b380      	cbz	r0, 8013a1e <rcutils_string_map_init+0x6e>
 80139bc:	6806      	ldr	r6, [r0, #0]
 80139be:	4604      	mov	r4, r0
 80139c0:	b12e      	cbz	r6, 80139ce <rcutils_string_map_init+0x1e>
 80139c2:	251e      	movs	r5, #30
 80139c4:	4628      	mov	r0, r5
 80139c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80139ca:	b002      	add	sp, #8
 80139cc:	4770      	bx	lr
 80139ce:	a804      	add	r0, sp, #16
 80139d0:	460d      	mov	r5, r1
 80139d2:	f7f7 fb3b 	bl	800b04c <rcutils_allocator_is_valid>
 80139d6:	b310      	cbz	r0, 8013a1e <rcutils_string_map_init+0x6e>
 80139d8:	9b04      	ldr	r3, [sp, #16]
 80139da:	9908      	ldr	r1, [sp, #32]
 80139dc:	2024      	movs	r0, #36	@ 0x24
 80139de:	4798      	blx	r3
 80139e0:	6020      	str	r0, [r4, #0]
 80139e2:	b310      	cbz	r0, 8013a2a <rcutils_string_map_init+0x7a>
 80139e4:	f10d 0e10 	add.w	lr, sp, #16
 80139e8:	e9c0 6600 	strd	r6, r6, [r0]
 80139ec:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80139f0:	f100 0c10 	add.w	ip, r0, #16
 80139f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80139f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80139fc:	f8de 3000 	ldr.w	r3, [lr]
 8013a00:	f8cc 3000 	str.w	r3, [ip]
 8013a04:	4629      	mov	r1, r5
 8013a06:	4620      	mov	r0, r4
 8013a08:	f7ff ff60 	bl	80138cc <rcutils_string_map_reserve>
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d0d8      	beq.n	80139c4 <rcutils_string_map_init+0x14>
 8013a12:	9b05      	ldr	r3, [sp, #20]
 8013a14:	9908      	ldr	r1, [sp, #32]
 8013a16:	6820      	ldr	r0, [r4, #0]
 8013a18:	4798      	blx	r3
 8013a1a:	6026      	str	r6, [r4, #0]
 8013a1c:	e7d2      	b.n	80139c4 <rcutils_string_map_init+0x14>
 8013a1e:	250b      	movs	r5, #11
 8013a20:	4628      	mov	r0, r5
 8013a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a26:	b002      	add	sp, #8
 8013a28:	4770      	bx	lr
 8013a2a:	250a      	movs	r5, #10
 8013a2c:	e7ca      	b.n	80139c4 <rcutils_string_map_init+0x14>
 8013a2e:	bf00      	nop

08013a30 <rcutils_string_map_fini>:
 8013a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a34:	b082      	sub	sp, #8
 8013a36:	2800      	cmp	r0, #0
 8013a38:	d03a      	beq.n	8013ab0 <rcutils_string_map_fini+0x80>
 8013a3a:	6804      	ldr	r4, [r0, #0]
 8013a3c:	4606      	mov	r6, r0
 8013a3e:	2c00      	cmp	r4, #0
 8013a40:	d032      	beq.n	8013aa8 <rcutils_string_map_fini+0x78>
 8013a42:	68a3      	ldr	r3, [r4, #8]
 8013a44:	b32b      	cbz	r3, 8013a92 <rcutils_string_map_fini+0x62>
 8013a46:	2500      	movs	r5, #0
 8013a48:	6822      	ldr	r2, [r4, #0]
 8013a4a:	462f      	mov	r7, r5
 8013a4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013a50:	b1e0      	cbz	r0, 8013a8c <rcutils_string_map_fini+0x5c>
 8013a52:	6a21      	ldr	r1, [r4, #32]
 8013a54:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8013a58:	9101      	str	r1, [sp, #4]
 8013a5a:	47c0      	blx	r8
 8013a5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013a60:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013a64:	9901      	ldr	r1, [sp, #4]
 8013a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a6a:	47c0      	blx	r8
 8013a6c:	68e3      	ldr	r3, [r4, #12]
 8013a6e:	6862      	ldr	r2, [r4, #4]
 8013a70:	3b01      	subs	r3, #1
 8013a72:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8013a76:	60e3      	str	r3, [r4, #12]
 8013a78:	6834      	ldr	r4, [r6, #0]
 8013a7a:	68a3      	ldr	r3, [r4, #8]
 8013a7c:	3501      	adds	r5, #1
 8013a7e:	429d      	cmp	r5, r3
 8013a80:	d207      	bcs.n	8013a92 <rcutils_string_map_fini+0x62>
 8013a82:	6822      	ldr	r2, [r4, #0]
 8013a84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d1e2      	bne.n	8013a52 <rcutils_string_map_fini+0x22>
 8013a8c:	3501      	adds	r5, #1
 8013a8e:	429d      	cmp	r5, r3
 8013a90:	d3dc      	bcc.n	8013a4c <rcutils_string_map_fini+0x1c>
 8013a92:	2100      	movs	r1, #0
 8013a94:	4630      	mov	r0, r6
 8013a96:	f7ff ff19 	bl	80138cc <rcutils_string_map_reserve>
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	b920      	cbnz	r0, 8013aa8 <rcutils_string_map_fini+0x78>
 8013a9e:	6830      	ldr	r0, [r6, #0]
 8013aa0:	6943      	ldr	r3, [r0, #20]
 8013aa2:	6a01      	ldr	r1, [r0, #32]
 8013aa4:	4798      	blx	r3
 8013aa6:	6034      	str	r4, [r6, #0]
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	b002      	add	sp, #8
 8013aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ab0:	240b      	movs	r4, #11
 8013ab2:	4620      	mov	r0, r4
 8013ab4:	b002      	add	sp, #8
 8013ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aba:	bf00      	nop

08013abc <rcutils_string_map_getn>:
 8013abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac0:	b300      	cbz	r0, 8013b04 <rcutils_string_map_getn+0x48>
 8013ac2:	6807      	ldr	r7, [r0, #0]
 8013ac4:	b1ff      	cbz	r7, 8013b06 <rcutils_string_map_getn+0x4a>
 8013ac6:	4688      	mov	r8, r1
 8013ac8:	b1e1      	cbz	r1, 8013b04 <rcutils_string_map_getn+0x48>
 8013aca:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8013ace:	683e      	ldr	r6, [r7, #0]
 8013ad0:	f1ba 0f00 	cmp.w	sl, #0
 8013ad4:	d016      	beq.n	8013b04 <rcutils_string_map_getn+0x48>
 8013ad6:	4691      	mov	r9, r2
 8013ad8:	3e04      	subs	r6, #4
 8013ada:	2400      	movs	r4, #0
 8013adc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8013ae0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013ae4:	4628      	mov	r0, r5
 8013ae6:	3401      	adds	r4, #1
 8013ae8:	b155      	cbz	r5, 8013b00 <rcutils_string_map_getn+0x44>
 8013aea:	f7ec fba3 	bl	8000234 <strlen>
 8013aee:	4548      	cmp	r0, r9
 8013af0:	4602      	mov	r2, r0
 8013af2:	4629      	mov	r1, r5
 8013af4:	bf38      	it	cc
 8013af6:	464a      	movcc	r2, r9
 8013af8:	4640      	mov	r0, r8
 8013afa:	f002 fdfc 	bl	80166f6 <strncmp>
 8013afe:	b128      	cbz	r0, 8013b0c <rcutils_string_map_getn+0x50>
 8013b00:	45a2      	cmp	sl, r4
 8013b02:	d1eb      	bne.n	8013adc <rcutils_string_map_getn+0x20>
 8013b04:	2700      	movs	r7, #0
 8013b06:	4638      	mov	r0, r7
 8013b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f853 700b 	ldr.w	r7, [r3, fp]
 8013b12:	4638      	mov	r0, r7
 8013b14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b18 <rmw_get_zero_initialized_context>:
 8013b18:	b510      	push	{r4, lr}
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	3010      	adds	r0, #16
 8013b1e:	f7f7 fb27 	bl	800b170 <rmw_get_zero_initialized_init_options>
 8013b22:	2300      	movs	r3, #0
 8013b24:	2000      	movs	r0, #0
 8013b26:	2100      	movs	r1, #0
 8013b28:	e9c4 0100 	strd	r0, r1, [r4]
 8013b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8013b30:	60a3      	str	r3, [r4, #8]
 8013b32:	4620      	mov	r0, r4
 8013b34:	bd10      	pop	{r4, pc}
 8013b36:	bf00      	nop

08013b38 <rmw_subscription_content_filter_options_fini>:
 8013b38:	b1b0      	cbz	r0, 8013b68 <rmw_subscription_content_filter_options_fini+0x30>
 8013b3a:	b538      	push	{r3, r4, r5, lr}
 8013b3c:	4604      	mov	r4, r0
 8013b3e:	4608      	mov	r0, r1
 8013b40:	460d      	mov	r5, r1
 8013b42:	f7f7 fa83 	bl	800b04c <rcutils_allocator_is_valid>
 8013b46:	b168      	cbz	r0, 8013b64 <rmw_subscription_content_filter_options_fini+0x2c>
 8013b48:	6820      	ldr	r0, [r4, #0]
 8013b4a:	b120      	cbz	r0, 8013b56 <rmw_subscription_content_filter_options_fini+0x1e>
 8013b4c:	686b      	ldr	r3, [r5, #4]
 8013b4e:	6929      	ldr	r1, [r5, #16]
 8013b50:	4798      	blx	r3
 8013b52:	2300      	movs	r3, #0
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	1d20      	adds	r0, r4, #4
 8013b58:	f002 f96e 	bl	8015e38 <rcutils_string_array_fini>
 8013b5c:	3800      	subs	r0, #0
 8013b5e:	bf18      	it	ne
 8013b60:	2001      	movne	r0, #1
 8013b62:	bd38      	pop	{r3, r4, r5, pc}
 8013b64:	200b      	movs	r0, #11
 8013b66:	bd38      	pop	{r3, r4, r5, pc}
 8013b68:	200b      	movs	r0, #11
 8013b6a:	4770      	bx	lr

08013b6c <rmw_get_default_subscription_options>:
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	e9c0 2200 	strd	r2, r2, [r0]
 8013b72:	6082      	str	r2, [r0, #8]
 8013b74:	4770      	bx	lr
 8013b76:	bf00      	nop

08013b78 <rmw_time_equal>:
 8013b78:	b4f0      	push	{r4, r5, r6, r7}
 8013b7a:	b084      	sub	sp, #16
 8013b7c:	ac04      	add	r4, sp, #16
 8013b7e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013b82:	4603      	mov	r3, r0
 8013b84:	4924      	ldr	r1, [pc, #144]	@ (8013c18 <rmw_time_equal+0xa0>)
 8013b86:	9e03      	ldr	r6, [sp, #12]
 8013b88:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013b8c:	2202      	movs	r2, #2
 8013b8e:	4299      	cmp	r1, r3
 8013b90:	41aa      	sbcs	r2, r5
 8013b92:	d330      	bcc.n	8013bf6 <rmw_time_equal+0x7e>
 8013b94:	4c21      	ldr	r4, [pc, #132]	@ (8013c1c <rmw_time_equal+0xa4>)
 8013b96:	fba3 3204 	umull	r3, r2, r3, r4
 8013b9a:	fb04 2205 	mla	r2, r4, r5, r2
 8013b9e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013ba2:	43dd      	mvns	r5, r3
 8013ba4:	1a8c      	subs	r4, r1, r2
 8013ba6:	4285      	cmp	r5, r0
 8013ba8:	41b4      	sbcs	r4, r6
 8013baa:	d332      	bcc.n	8013c12 <rmw_time_equal+0x9a>
 8013bac:	eb10 0c03 	adds.w	ip, r0, r3
 8013bb0:	eb42 0106 	adc.w	r1, r2, r6
 8013bb4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8013bb8:	4817      	ldr	r0, [pc, #92]	@ (8013c18 <rmw_time_equal+0xa0>)
 8013bba:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8013bbc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8013bbe:	2202      	movs	r2, #2
 8013bc0:	4298      	cmp	r0, r3
 8013bc2:	41b2      	sbcs	r2, r6
 8013bc4:	d31c      	bcc.n	8013c00 <rmw_time_equal+0x88>
 8013bc6:	4c15      	ldr	r4, [pc, #84]	@ (8013c1c <rmw_time_equal+0xa4>)
 8013bc8:	fba3 3204 	umull	r3, r2, r3, r4
 8013bcc:	fb04 2206 	mla	r2, r4, r6, r2
 8013bd0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013bd4:	43de      	mvns	r6, r3
 8013bd6:	1a84      	subs	r4, r0, r2
 8013bd8:	42ae      	cmp	r6, r5
 8013bda:	41bc      	sbcs	r4, r7
 8013bdc:	d315      	bcc.n	8013c0a <rmw_time_equal+0x92>
 8013bde:	195b      	adds	r3, r3, r5
 8013be0:	eb42 0207 	adc.w	r2, r2, r7
 8013be4:	428a      	cmp	r2, r1
 8013be6:	bf08      	it	eq
 8013be8:	4563      	cmpeq	r3, ip
 8013bea:	bf0c      	ite	eq
 8013bec:	2001      	moveq	r0, #1
 8013bee:	2000      	movne	r0, #0
 8013bf0:	b004      	add	sp, #16
 8013bf2:	bcf0      	pop	{r4, r5, r6, r7}
 8013bf4:	4770      	bx	lr
 8013bf6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8013bfa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013bfe:	e7d9      	b.n	8013bb4 <rmw_time_equal+0x3c>
 8013c00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c04:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8013c08:	e7ec      	b.n	8013be4 <rmw_time_equal+0x6c>
 8013c0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c0e:	4602      	mov	r2, r0
 8013c10:	e7e8      	b.n	8013be4 <rmw_time_equal+0x6c>
 8013c12:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8013c16:	e7cd      	b.n	8013bb4 <rmw_time_equal+0x3c>
 8013c18:	25c17d04 	.word	0x25c17d04
 8013c1c:	3b9aca00 	.word	0x3b9aca00

08013c20 <rmw_time_total_nsec>:
 8013c20:	b470      	push	{r4, r5, r6}
 8013c22:	b085      	sub	sp, #20
 8013c24:	ac04      	add	r4, sp, #16
 8013c26:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	4912      	ldr	r1, [pc, #72]	@ (8013c78 <rmw_time_total_nsec+0x58>)
 8013c2e:	9e03      	ldr	r6, [sp, #12]
 8013c30:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8013c34:	2202      	movs	r2, #2
 8013c36:	4299      	cmp	r1, r3
 8013c38:	41aa      	sbcs	r2, r5
 8013c3a:	d311      	bcc.n	8013c60 <rmw_time_total_nsec+0x40>
 8013c3c:	4c0f      	ldr	r4, [pc, #60]	@ (8013c7c <rmw_time_total_nsec+0x5c>)
 8013c3e:	fba3 3204 	umull	r3, r2, r3, r4
 8013c42:	fb04 2205 	mla	r2, r4, r5, r2
 8013c46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013c4a:	43dd      	mvns	r5, r3
 8013c4c:	1a8c      	subs	r4, r1, r2
 8013c4e:	4285      	cmp	r5, r0
 8013c50:	41b4      	sbcs	r4, r6
 8013c52:	d30c      	bcc.n	8013c6e <rmw_time_total_nsec+0x4e>
 8013c54:	1818      	adds	r0, r3, r0
 8013c56:	eb42 0106 	adc.w	r1, r2, r6
 8013c5a:	b005      	add	sp, #20
 8013c5c:	bc70      	pop	{r4, r5, r6}
 8013c5e:	4770      	bx	lr
 8013c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013c68:	b005      	add	sp, #20
 8013c6a:	bc70      	pop	{r4, r5, r6}
 8013c6c:	4770      	bx	lr
 8013c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c72:	b005      	add	sp, #20
 8013c74:	bc70      	pop	{r4, r5, r6}
 8013c76:	4770      	bx	lr
 8013c78:	25c17d04 	.word	0x25c17d04
 8013c7c:	3b9aca00 	.word	0x3b9aca00

08013c80 <rmw_get_zero_initialized_message_info>:
 8013c80:	b510      	push	{r4, lr}
 8013c82:	2240      	movs	r2, #64	@ 0x40
 8013c84:	4604      	mov	r4, r0
 8013c86:	2100      	movs	r1, #0
 8013c88:	f002 fd20 	bl	80166cc <memset>
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	bd10      	pop	{r4, pc}

08013c90 <rmw_validate_full_topic_name>:
 8013c90:	2800      	cmp	r0, #0
 8013c92:	d057      	beq.n	8013d44 <rmw_validate_full_topic_name+0xb4>
 8013c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c98:	460d      	mov	r5, r1
 8013c9a:	2900      	cmp	r1, #0
 8013c9c:	d054      	beq.n	8013d48 <rmw_validate_full_topic_name+0xb8>
 8013c9e:	4616      	mov	r6, r2
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	f7ec fac7 	bl	8000234 <strlen>
 8013ca6:	b148      	cbz	r0, 8013cbc <rmw_validate_full_topic_name+0x2c>
 8013ca8:	7823      	ldrb	r3, [r4, #0]
 8013caa:	2b2f      	cmp	r3, #47	@ 0x2f
 8013cac:	d00d      	beq.n	8013cca <rmw_validate_full_topic_name+0x3a>
 8013cae:	2302      	movs	r3, #2
 8013cb0:	602b      	str	r3, [r5, #0]
 8013cb2:	b13e      	cbz	r6, 8013cc4 <rmw_validate_full_topic_name+0x34>
 8013cb4:	2000      	movs	r0, #0
 8013cb6:	6030      	str	r0, [r6, #0]
 8013cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	602b      	str	r3, [r5, #0]
 8013cc0:	2e00      	cmp	r6, #0
 8013cc2:	d1f7      	bne.n	8013cb4 <rmw_validate_full_topic_name+0x24>
 8013cc4:	2000      	movs	r0, #0
 8013cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cca:	1e43      	subs	r3, r0, #1
 8013ccc:	5ce2      	ldrb	r2, [r4, r3]
 8013cce:	2a2f      	cmp	r2, #47	@ 0x2f
 8013cd0:	d03c      	beq.n	8013d4c <rmw_validate_full_topic_name+0xbc>
 8013cd2:	1e63      	subs	r3, r4, #1
 8013cd4:	eb03 0800 	add.w	r8, r3, r0
 8013cd8:	f1c4 0e01 	rsb	lr, r4, #1
 8013cdc:	eb0e 0703 	add.w	r7, lr, r3
 8013ce0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8013ce4:	f021 0220 	bic.w	r2, r1, #32
 8013ce8:	3a41      	subs	r2, #65	@ 0x41
 8013cea:	2a19      	cmp	r2, #25
 8013cec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8013cf0:	d90b      	bls.n	8013d0a <rmw_validate_full_topic_name+0x7a>
 8013cf2:	295f      	cmp	r1, #95	@ 0x5f
 8013cf4:	d009      	beq.n	8013d0a <rmw_validate_full_topic_name+0x7a>
 8013cf6:	f1bc 0f0a 	cmp.w	ip, #10
 8013cfa:	d906      	bls.n	8013d0a <rmw_validate_full_topic_name+0x7a>
 8013cfc:	2304      	movs	r3, #4
 8013cfe:	602b      	str	r3, [r5, #0]
 8013d00:	2e00      	cmp	r6, #0
 8013d02:	d0df      	beq.n	8013cc4 <rmw_validate_full_topic_name+0x34>
 8013d04:	6037      	str	r7, [r6, #0]
 8013d06:	2000      	movs	r0, #0
 8013d08:	e7d6      	b.n	8013cb8 <rmw_validate_full_topic_name+0x28>
 8013d0a:	4543      	cmp	r3, r8
 8013d0c:	d1e6      	bne.n	8013cdc <rmw_validate_full_topic_name+0x4c>
 8013d0e:	4f1a      	ldr	r7, [pc, #104]	@ (8013d78 <rmw_validate_full_topic_name+0xe8>)
 8013d10:	2301      	movs	r3, #1
 8013d12:	e004      	b.n	8013d1e <rmw_validate_full_topic_name+0x8e>
 8013d14:	4298      	cmp	r0, r3
 8013d16:	f104 0401 	add.w	r4, r4, #1
 8013d1a:	d91c      	bls.n	8013d56 <rmw_validate_full_topic_name+0xc6>
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	4298      	cmp	r0, r3
 8013d20:	f103 0201 	add.w	r2, r3, #1
 8013d24:	d0f6      	beq.n	8013d14 <rmw_validate_full_topic_name+0x84>
 8013d26:	7821      	ldrb	r1, [r4, #0]
 8013d28:	292f      	cmp	r1, #47	@ 0x2f
 8013d2a:	d1f3      	bne.n	8013d14 <rmw_validate_full_topic_name+0x84>
 8013d2c:	7861      	ldrb	r1, [r4, #1]
 8013d2e:	292f      	cmp	r1, #47	@ 0x2f
 8013d30:	d01c      	beq.n	8013d6c <rmw_validate_full_topic_name+0xdc>
 8013d32:	5dc9      	ldrb	r1, [r1, r7]
 8013d34:	0749      	lsls	r1, r1, #29
 8013d36:	d5ed      	bpl.n	8013d14 <rmw_validate_full_topic_name+0x84>
 8013d38:	2206      	movs	r2, #6
 8013d3a:	602a      	str	r2, [r5, #0]
 8013d3c:	2e00      	cmp	r6, #0
 8013d3e:	d0c1      	beq.n	8013cc4 <rmw_validate_full_topic_name+0x34>
 8013d40:	6033      	str	r3, [r6, #0]
 8013d42:	e7bf      	b.n	8013cc4 <rmw_validate_full_topic_name+0x34>
 8013d44:	200b      	movs	r0, #11
 8013d46:	4770      	bx	lr
 8013d48:	200b      	movs	r0, #11
 8013d4a:	e7b5      	b.n	8013cb8 <rmw_validate_full_topic_name+0x28>
 8013d4c:	2203      	movs	r2, #3
 8013d4e:	602a      	str	r2, [r5, #0]
 8013d50:	2e00      	cmp	r6, #0
 8013d52:	d1f5      	bne.n	8013d40 <rmw_validate_full_topic_name+0xb0>
 8013d54:	e7b6      	b.n	8013cc4 <rmw_validate_full_topic_name+0x34>
 8013d56:	28f7      	cmp	r0, #247	@ 0xf7
 8013d58:	d802      	bhi.n	8013d60 <rmw_validate_full_topic_name+0xd0>
 8013d5a:	2000      	movs	r0, #0
 8013d5c:	6028      	str	r0, [r5, #0]
 8013d5e:	e7ab      	b.n	8013cb8 <rmw_validate_full_topic_name+0x28>
 8013d60:	2307      	movs	r3, #7
 8013d62:	602b      	str	r3, [r5, #0]
 8013d64:	2e00      	cmp	r6, #0
 8013d66:	d0ad      	beq.n	8013cc4 <rmw_validate_full_topic_name+0x34>
 8013d68:	23f6      	movs	r3, #246	@ 0xf6
 8013d6a:	e7e9      	b.n	8013d40 <rmw_validate_full_topic_name+0xb0>
 8013d6c:	2205      	movs	r2, #5
 8013d6e:	602a      	str	r2, [r5, #0]
 8013d70:	2e00      	cmp	r6, #0
 8013d72:	d1e5      	bne.n	8013d40 <rmw_validate_full_topic_name+0xb0>
 8013d74:	e7a6      	b.n	8013cc4 <rmw_validate_full_topic_name+0x34>
 8013d76:	bf00      	nop
 8013d78:	08018770 	.word	0x08018770

08013d7c <rmw_validate_namespace_with_size>:
 8013d7c:	b340      	cbz	r0, 8013dd0 <rmw_validate_namespace_with_size+0x54>
 8013d7e:	b570      	push	{r4, r5, r6, lr}
 8013d80:	4614      	mov	r4, r2
 8013d82:	b0c2      	sub	sp, #264	@ 0x108
 8013d84:	b332      	cbz	r2, 8013dd4 <rmw_validate_namespace_with_size+0x58>
 8013d86:	2901      	cmp	r1, #1
 8013d88:	460d      	mov	r5, r1
 8013d8a:	461e      	mov	r6, r3
 8013d8c:	d102      	bne.n	8013d94 <rmw_validate_namespace_with_size+0x18>
 8013d8e:	7803      	ldrb	r3, [r0, #0]
 8013d90:	2b2f      	cmp	r3, #47	@ 0x2f
 8013d92:	d012      	beq.n	8013dba <rmw_validate_namespace_with_size+0x3e>
 8013d94:	aa01      	add	r2, sp, #4
 8013d96:	4669      	mov	r1, sp
 8013d98:	f7ff ff7a 	bl	8013c90 <rmw_validate_full_topic_name>
 8013d9c:	b978      	cbnz	r0, 8013dbe <rmw_validate_namespace_with_size+0x42>
 8013d9e:	9b00      	ldr	r3, [sp, #0]
 8013da0:	b14b      	cbz	r3, 8013db6 <rmw_validate_namespace_with_size+0x3a>
 8013da2:	2b07      	cmp	r3, #7
 8013da4:	d007      	beq.n	8013db6 <rmw_validate_namespace_with_size+0x3a>
 8013da6:	1e5a      	subs	r2, r3, #1
 8013da8:	2a05      	cmp	r2, #5
 8013daa:	d82b      	bhi.n	8013e04 <rmw_validate_namespace_with_size+0x88>
 8013dac:	e8df f002 	tbb	[pc, r2]
 8013db0:	1e212427 	.word	0x1e212427
 8013db4:	141b      	.short	0x141b
 8013db6:	2df5      	cmp	r5, #245	@ 0xf5
 8013db8:	d803      	bhi.n	8013dc2 <rmw_validate_namespace_with_size+0x46>
 8013dba:	2000      	movs	r0, #0
 8013dbc:	6020      	str	r0, [r4, #0]
 8013dbe:	b042      	add	sp, #264	@ 0x108
 8013dc0:	bd70      	pop	{r4, r5, r6, pc}
 8013dc2:	2307      	movs	r3, #7
 8013dc4:	6023      	str	r3, [r4, #0]
 8013dc6:	2e00      	cmp	r6, #0
 8013dc8:	d0f9      	beq.n	8013dbe <rmw_validate_namespace_with_size+0x42>
 8013dca:	23f4      	movs	r3, #244	@ 0xf4
 8013dcc:	6033      	str	r3, [r6, #0]
 8013dce:	e7f6      	b.n	8013dbe <rmw_validate_namespace_with_size+0x42>
 8013dd0:	200b      	movs	r0, #11
 8013dd2:	4770      	bx	lr
 8013dd4:	200b      	movs	r0, #11
 8013dd6:	e7f2      	b.n	8013dbe <rmw_validate_namespace_with_size+0x42>
 8013dd8:	2306      	movs	r3, #6
 8013dda:	6023      	str	r3, [r4, #0]
 8013ddc:	2e00      	cmp	r6, #0
 8013dde:	d0ee      	beq.n	8013dbe <rmw_validate_namespace_with_size+0x42>
 8013de0:	9b01      	ldr	r3, [sp, #4]
 8013de2:	6033      	str	r3, [r6, #0]
 8013de4:	e7eb      	b.n	8013dbe <rmw_validate_namespace_with_size+0x42>
 8013de6:	2305      	movs	r3, #5
 8013de8:	6023      	str	r3, [r4, #0]
 8013dea:	e7f7      	b.n	8013ddc <rmw_validate_namespace_with_size+0x60>
 8013dec:	2304      	movs	r3, #4
 8013dee:	6023      	str	r3, [r4, #0]
 8013df0:	e7f4      	b.n	8013ddc <rmw_validate_namespace_with_size+0x60>
 8013df2:	2303      	movs	r3, #3
 8013df4:	6023      	str	r3, [r4, #0]
 8013df6:	e7f1      	b.n	8013ddc <rmw_validate_namespace_with_size+0x60>
 8013df8:	2302      	movs	r3, #2
 8013dfa:	6023      	str	r3, [r4, #0]
 8013dfc:	e7ee      	b.n	8013ddc <rmw_validate_namespace_with_size+0x60>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	6023      	str	r3, [r4, #0]
 8013e02:	e7eb      	b.n	8013ddc <rmw_validate_namespace_with_size+0x60>
 8013e04:	4a03      	ldr	r2, [pc, #12]	@ (8013e14 <rmw_validate_namespace_with_size+0x98>)
 8013e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8013e0a:	a802      	add	r0, sp, #8
 8013e0c:	f7ff fcee 	bl	80137ec <rcutils_snprintf>
 8013e10:	2001      	movs	r0, #1
 8013e12:	e7d4      	b.n	8013dbe <rmw_validate_namespace_with_size+0x42>
 8013e14:	08018390 	.word	0x08018390

08013e18 <rmw_validate_namespace>:
 8013e18:	b168      	cbz	r0, 8013e36 <rmw_validate_namespace+0x1e>
 8013e1a:	b570      	push	{r4, r5, r6, lr}
 8013e1c:	460d      	mov	r5, r1
 8013e1e:	4616      	mov	r6, r2
 8013e20:	4604      	mov	r4, r0
 8013e22:	f7ec fa07 	bl	8000234 <strlen>
 8013e26:	4633      	mov	r3, r6
 8013e28:	4601      	mov	r1, r0
 8013e2a:	462a      	mov	r2, r5
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e32:	f7ff bfa3 	b.w	8013d7c <rmw_validate_namespace_with_size>
 8013e36:	200b      	movs	r0, #11
 8013e38:	4770      	bx	lr
 8013e3a:	bf00      	nop

08013e3c <rmw_namespace_validation_result_string>:
 8013e3c:	2807      	cmp	r0, #7
 8013e3e:	bf9a      	itte	ls
 8013e40:	4b02      	ldrls	r3, [pc, #8]	@ (8013e4c <rmw_namespace_validation_result_string+0x10>)
 8013e42:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8013e46:	4802      	ldrhi	r0, [pc, #8]	@ (8013e50 <rmw_namespace_validation_result_string+0x14>)
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	08018588 	.word	0x08018588
 8013e50:	080183e0 	.word	0x080183e0

08013e54 <rmw_validate_node_name>:
 8013e54:	2800      	cmp	r0, #0
 8013e56:	d03b      	beq.n	8013ed0 <rmw_validate_node_name+0x7c>
 8013e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	460d      	mov	r5, r1
 8013e5e:	2900      	cmp	r1, #0
 8013e60:	d038      	beq.n	8013ed4 <rmw_validate_node_name+0x80>
 8013e62:	4616      	mov	r6, r2
 8013e64:	4604      	mov	r4, r0
 8013e66:	f7ec f9e5 	bl	8000234 <strlen>
 8013e6a:	b1e0      	cbz	r0, 8013ea6 <rmw_validate_node_name+0x52>
 8013e6c:	1e63      	subs	r3, r4, #1
 8013e6e:	eb03 0800 	add.w	r8, r3, r0
 8013e72:	f1c4 0101 	rsb	r1, r4, #1
 8013e76:	18cf      	adds	r7, r1, r3
 8013e78:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8013e7c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8013e80:	f02e 0c20 	bic.w	ip, lr, #32
 8013e84:	2a09      	cmp	r2, #9
 8013e86:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8013e8a:	d914      	bls.n	8013eb6 <rmw_validate_node_name+0x62>
 8013e8c:	f1bc 0f19 	cmp.w	ip, #25
 8013e90:	d911      	bls.n	8013eb6 <rmw_validate_node_name+0x62>
 8013e92:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8013e96:	d00e      	beq.n	8013eb6 <rmw_validate_node_name+0x62>
 8013e98:	2302      	movs	r3, #2
 8013e9a:	602b      	str	r3, [r5, #0]
 8013e9c:	b106      	cbz	r6, 8013ea0 <rmw_validate_node_name+0x4c>
 8013e9e:	6037      	str	r7, [r6, #0]
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	602b      	str	r3, [r5, #0]
 8013eaa:	2e00      	cmp	r6, #0
 8013eac:	d0f8      	beq.n	8013ea0 <rmw_validate_node_name+0x4c>
 8013eae:	2000      	movs	r0, #0
 8013eb0:	6030      	str	r0, [r6, #0]
 8013eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb6:	4543      	cmp	r3, r8
 8013eb8:	d1dd      	bne.n	8013e76 <rmw_validate_node_name+0x22>
 8013eba:	7822      	ldrb	r2, [r4, #0]
 8013ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8013ef4 <rmw_validate_node_name+0xa0>)
 8013ebe:	5cd3      	ldrb	r3, [r2, r3]
 8013ec0:	f013 0304 	ands.w	r3, r3, #4
 8013ec4:	d110      	bne.n	8013ee8 <rmw_validate_node_name+0x94>
 8013ec6:	28ff      	cmp	r0, #255	@ 0xff
 8013ec8:	d806      	bhi.n	8013ed8 <rmw_validate_node_name+0x84>
 8013eca:	602b      	str	r3, [r5, #0]
 8013ecc:	4618      	mov	r0, r3
 8013ece:	e7e8      	b.n	8013ea2 <rmw_validate_node_name+0x4e>
 8013ed0:	200b      	movs	r0, #11
 8013ed2:	4770      	bx	lr
 8013ed4:	200b      	movs	r0, #11
 8013ed6:	e7e4      	b.n	8013ea2 <rmw_validate_node_name+0x4e>
 8013ed8:	2204      	movs	r2, #4
 8013eda:	602a      	str	r2, [r5, #0]
 8013edc:	2e00      	cmp	r6, #0
 8013ede:	d0df      	beq.n	8013ea0 <rmw_validate_node_name+0x4c>
 8013ee0:	22fe      	movs	r2, #254	@ 0xfe
 8013ee2:	6032      	str	r2, [r6, #0]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	e7dc      	b.n	8013ea2 <rmw_validate_node_name+0x4e>
 8013ee8:	2303      	movs	r3, #3
 8013eea:	602b      	str	r3, [r5, #0]
 8013eec:	2e00      	cmp	r6, #0
 8013eee:	d1de      	bne.n	8013eae <rmw_validate_node_name+0x5a>
 8013ef0:	e7d6      	b.n	8013ea0 <rmw_validate_node_name+0x4c>
 8013ef2:	bf00      	nop
 8013ef4:	08018770 	.word	0x08018770

08013ef8 <rmw_node_name_validation_result_string>:
 8013ef8:	2804      	cmp	r0, #4
 8013efa:	bf9a      	itte	ls
 8013efc:	4b02      	ldrls	r3, [pc, #8]	@ (8013f08 <rmw_node_name_validation_result_string+0x10>)
 8013efe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8013f02:	4802      	ldrhi	r0, [pc, #8]	@ (8013f0c <rmw_node_name_validation_result_string+0x14>)
 8013f04:	4770      	bx	lr
 8013f06:	bf00      	nop
 8013f08:	08018694 	.word	0x08018694
 8013f0c:	080185a8 	.word	0x080185a8

08013f10 <on_status>:
 8013f10:	b082      	sub	sp, #8
 8013f12:	b002      	add	sp, #8
 8013f14:	4770      	bx	lr
 8013f16:	bf00      	nop

08013f18 <on_topic>:
 8013f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f1c:	4a22      	ldr	r2, [pc, #136]	@ (8013fa8 <on_topic+0x90>)
 8013f1e:	b094      	sub	sp, #80	@ 0x50
 8013f20:	6812      	ldr	r2, [r2, #0]
 8013f22:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8013f24:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013f28:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8013f2c:	b3c2      	cbz	r2, 8013fa0 <on_topic+0x88>
 8013f2e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8013f32:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8013f36:	e001      	b.n	8013f3c <on_topic+0x24>
 8013f38:	6852      	ldr	r2, [r2, #4]
 8013f3a:	b38a      	cbz	r2, 8013fa0 <on_topic+0x88>
 8013f3c:	6894      	ldr	r4, [r2, #8]
 8013f3e:	8aa3      	ldrh	r3, [r4, #20]
 8013f40:	428b      	cmp	r3, r1
 8013f42:	d1f9      	bne.n	8013f38 <on_topic+0x20>
 8013f44:	7da3      	ldrb	r3, [r4, #22]
 8013f46:	4283      	cmp	r3, r0
 8013f48:	d1f6      	bne.n	8013f38 <on_topic+0x20>
 8013f4a:	2248      	movs	r2, #72	@ 0x48
 8013f4c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013f50:	4668      	mov	r0, sp
 8013f52:	f002 fc84 	bl	801685e <memcpy>
 8013f56:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8013f5a:	cb0c      	ldmia	r3, {r2, r3}
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	f7f8 facf 	bl	800c500 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013f62:	4607      	mov	r7, r0
 8013f64:	b1e0      	cbz	r0, 8013fa0 <on_topic+0x88>
 8013f66:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8013f6a:	4632      	mov	r2, r6
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	f108 0110 	add.w	r1, r8, #16
 8013f72:	f000 fdad 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8013f76:	b930      	cbnz	r0, 8013f86 <on_topic+0x6e>
 8013f78:	480c      	ldr	r0, [pc, #48]	@ (8013fac <on_topic+0x94>)
 8013f7a:	4639      	mov	r1, r7
 8013f7c:	b014      	add	sp, #80	@ 0x50
 8013f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f82:	f000 b8bd 	b.w	8014100 <put_memory>
 8013f86:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8013f8a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8013f8e:	f000 fcc3 	bl	8014918 <rmw_uros_epoch_nanos>
 8013f92:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8013f96:	2305      	movs	r3, #5
 8013f98:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013f9c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8013fa0:	b014      	add	sp, #80	@ 0x50
 8013fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fa6:	bf00      	nop
 8013fa8:	2000ad94 	.word	0x2000ad94
 8013fac:	2000ad84 	.word	0x2000ad84

08013fb0 <on_request>:
 8013fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb4:	4823      	ldr	r0, [pc, #140]	@ (8014044 <on_request+0x94>)
 8013fb6:	b094      	sub	sp, #80	@ 0x50
 8013fb8:	6800      	ldr	r0, [r0, #0]
 8013fba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013fbc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013fc0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013fc2:	2800      	cmp	r0, #0
 8013fc4:	d03b      	beq.n	801403e <on_request+0x8e>
 8013fc6:	461d      	mov	r5, r3
 8013fc8:	e001      	b.n	8013fce <on_request+0x1e>
 8013fca:	6840      	ldr	r0, [r0, #4]
 8013fcc:	b3b8      	cbz	r0, 801403e <on_request+0x8e>
 8013fce:	6884      	ldr	r4, [r0, #8]
 8013fd0:	8b21      	ldrh	r1, [r4, #24]
 8013fd2:	4291      	cmp	r1, r2
 8013fd4:	d1f9      	bne.n	8013fca <on_request+0x1a>
 8013fd6:	2248      	movs	r2, #72	@ 0x48
 8013fd8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8013fdc:	4668      	mov	r0, sp
 8013fde:	f002 fc3e 	bl	801685e <memcpy>
 8013fe2:	f104 0320 	add.w	r3, r4, #32
 8013fe6:	cb0c      	ldmia	r3, {r2, r3}
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f7f8 fa89 	bl	800c500 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013fee:	4680      	mov	r8, r0
 8013ff0:	b328      	cbz	r0, 801403e <on_request+0x8e>
 8013ff2:	4638      	mov	r0, r7
 8013ff4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013ff8:	4632      	mov	r2, r6
 8013ffa:	f107 0110 	add.w	r1, r7, #16
 8013ffe:	f000 fd67 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 8014002:	b930      	cbnz	r0, 8014012 <on_request+0x62>
 8014004:	4810      	ldr	r0, [pc, #64]	@ (8014048 <on_request+0x98>)
 8014006:	4641      	mov	r1, r8
 8014008:	b014      	add	sp, #80	@ 0x50
 801400a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801400e:	f000 b877 	b.w	8014100 <put_memory>
 8014012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014014:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8014018:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801401c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014024:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014028:	e88c 0003 	stmia.w	ip, {r0, r1}
 801402c:	f000 fc74 	bl	8014918 <rmw_uros_epoch_nanos>
 8014030:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8014034:	2303      	movs	r3, #3
 8014036:	e942 0102 	strd	r0, r1, [r2, #-8]
 801403a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801403e:	b014      	add	sp, #80	@ 0x50
 8014040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014044:	2000ad64 	.word	0x2000ad64
 8014048:	2000ad84 	.word	0x2000ad84

0801404c <on_reply>:
 801404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014050:	4821      	ldr	r0, [pc, #132]	@ (80140d8 <on_reply+0x8c>)
 8014052:	b094      	sub	sp, #80	@ 0x50
 8014054:	6800      	ldr	r0, [r0, #0]
 8014056:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014058:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801405c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801405e:	b3b8      	cbz	r0, 80140d0 <on_reply+0x84>
 8014060:	461d      	mov	r5, r3
 8014062:	e001      	b.n	8014068 <on_reply+0x1c>
 8014064:	6840      	ldr	r0, [r0, #4]
 8014066:	b398      	cbz	r0, 80140d0 <on_reply+0x84>
 8014068:	6884      	ldr	r4, [r0, #8]
 801406a:	8b21      	ldrh	r1, [r4, #24]
 801406c:	4291      	cmp	r1, r2
 801406e:	d1f9      	bne.n	8014064 <on_reply+0x18>
 8014070:	2248      	movs	r2, #72	@ 0x48
 8014072:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014076:	4668      	mov	r0, sp
 8014078:	f002 fbf1 	bl	801685e <memcpy>
 801407c:	f104 0320 	add.w	r3, r4, #32
 8014080:	cb0c      	ldmia	r3, {r2, r3}
 8014082:	4620      	mov	r0, r4
 8014084:	f7f8 fa3c 	bl	800c500 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014088:	4680      	mov	r8, r0
 801408a:	b308      	cbz	r0, 80140d0 <on_reply+0x84>
 801408c:	4638      	mov	r0, r7
 801408e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014092:	4632      	mov	r2, r6
 8014094:	f107 0110 	add.w	r1, r7, #16
 8014098:	f000 fd1a 	bl	8014ad0 <ucdr_deserialize_array_uint8_t>
 801409c:	b930      	cbnz	r0, 80140ac <on_reply+0x60>
 801409e:	480f      	ldr	r0, [pc, #60]	@ (80140dc <on_reply+0x90>)
 80140a0:	4641      	mov	r1, r8
 80140a2:	b014      	add	sp, #80	@ 0x50
 80140a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140a8:	f000 b82a 	b.w	8014100 <put_memory>
 80140ac:	2200      	movs	r2, #0
 80140ae:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80140b2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80140b6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80140ba:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80140be:	f000 fc2b 	bl	8014918 <rmw_uros_epoch_nanos>
 80140c2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80140c6:	2304      	movs	r3, #4
 80140c8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80140cc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80140d0:	b014      	add	sp, #80	@ 0x50
 80140d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d6:	bf00      	nop
 80140d8:	20006474 	.word	0x20006474
 80140dc:	2000ad84 	.word	0x2000ad84

080140e0 <get_memory>:
 80140e0:	4603      	mov	r3, r0
 80140e2:	6840      	ldr	r0, [r0, #4]
 80140e4:	b158      	cbz	r0, 80140fe <get_memory+0x1e>
 80140e6:	6842      	ldr	r2, [r0, #4]
 80140e8:	605a      	str	r2, [r3, #4]
 80140ea:	b10a      	cbz	r2, 80140f0 <get_memory+0x10>
 80140ec:	2100      	movs	r1, #0
 80140ee:	6011      	str	r1, [r2, #0]
 80140f0:	681a      	ldr	r2, [r3, #0]
 80140f2:	6042      	str	r2, [r0, #4]
 80140f4:	b102      	cbz	r2, 80140f8 <get_memory+0x18>
 80140f6:	6010      	str	r0, [r2, #0]
 80140f8:	2200      	movs	r2, #0
 80140fa:	6002      	str	r2, [r0, #0]
 80140fc:	6018      	str	r0, [r3, #0]
 80140fe:	4770      	bx	lr

08014100 <put_memory>:
 8014100:	680b      	ldr	r3, [r1, #0]
 8014102:	b10b      	cbz	r3, 8014108 <put_memory+0x8>
 8014104:	684a      	ldr	r2, [r1, #4]
 8014106:	605a      	str	r2, [r3, #4]
 8014108:	684a      	ldr	r2, [r1, #4]
 801410a:	b102      	cbz	r2, 801410e <put_memory+0xe>
 801410c:	6013      	str	r3, [r2, #0]
 801410e:	6803      	ldr	r3, [r0, #0]
 8014110:	428b      	cmp	r3, r1
 8014112:	6843      	ldr	r3, [r0, #4]
 8014114:	bf08      	it	eq
 8014116:	6002      	streq	r2, [r0, #0]
 8014118:	604b      	str	r3, [r1, #4]
 801411a:	b103      	cbz	r3, 801411e <put_memory+0x1e>
 801411c:	6019      	str	r1, [r3, #0]
 801411e:	2300      	movs	r3, #0
 8014120:	600b      	str	r3, [r1, #0]
 8014122:	6041      	str	r1, [r0, #4]
 8014124:	4770      	bx	lr
 8014126:	bf00      	nop

08014128 <rmw_destroy_client>:
 8014128:	b570      	push	{r4, r5, r6, lr}
 801412a:	b128      	cbz	r0, 8014138 <rmw_destroy_client+0x10>
 801412c:	4604      	mov	r4, r0
 801412e:	6800      	ldr	r0, [r0, #0]
 8014130:	460d      	mov	r5, r1
 8014132:	f7f8 fbf5 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 8014136:	b910      	cbnz	r0, 801413e <rmw_destroy_client+0x16>
 8014138:	2401      	movs	r4, #1
 801413a:	4620      	mov	r0, r4
 801413c:	bd70      	pop	{r4, r5, r6, pc}
 801413e:	6863      	ldr	r3, [r4, #4]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d0f9      	beq.n	8014138 <rmw_destroy_client+0x10>
 8014144:	2d00      	cmp	r5, #0
 8014146:	d0f7      	beq.n	8014138 <rmw_destroy_client+0x10>
 8014148:	6828      	ldr	r0, [r5, #0]
 801414a:	f7f8 fbe9 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 801414e:	2800      	cmp	r0, #0
 8014150:	d0f2      	beq.n	8014138 <rmw_destroy_client+0x10>
 8014152:	686e      	ldr	r6, [r5, #4]
 8014154:	2e00      	cmp	r6, #0
 8014156:	d0ef      	beq.n	8014138 <rmw_destroy_client+0x10>
 8014158:	6864      	ldr	r4, [r4, #4]
 801415a:	6932      	ldr	r2, [r6, #16]
 801415c:	6920      	ldr	r0, [r4, #16]
 801415e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014162:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014166:	6819      	ldr	r1, [r3, #0]
 8014168:	f7f9 f828 	bl	800d1bc <uxr_buffer_cancel_data>
 801416c:	4602      	mov	r2, r0
 801416e:	6920      	ldr	r0, [r4, #16]
 8014170:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014174:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014178:	f7f8 fab8 	bl	800c6ec <run_xrce_session>
 801417c:	6920      	ldr	r0, [r4, #16]
 801417e:	6932      	ldr	r2, [r6, #16]
 8014180:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014184:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014188:	6819      	ldr	r1, [r3, #0]
 801418a:	f7f8 fcaf 	bl	800caec <uxr_buffer_delete_entity>
 801418e:	4602      	mov	r2, r0
 8014190:	6920      	ldr	r0, [r4, #16]
 8014192:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014196:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801419a:	f7f8 faa7 	bl	800c6ec <run_xrce_session>
 801419e:	2800      	cmp	r0, #0
 80141a0:	4628      	mov	r0, r5
 80141a2:	bf14      	ite	ne
 80141a4:	2400      	movne	r4, #0
 80141a6:	2402      	moveq	r4, #2
 80141a8:	f7f8 f988 	bl	800c4bc <rmw_uxrce_fini_client_memory>
 80141ac:	e7c5      	b.n	801413a <rmw_destroy_client+0x12>
 80141ae:	bf00      	nop

080141b0 <rmw_get_implementation_identifier>:
 80141b0:	4b01      	ldr	r3, [pc, #4]	@ (80141b8 <rmw_get_implementation_identifier+0x8>)
 80141b2:	6818      	ldr	r0, [r3, #0]
 80141b4:	4770      	bx	lr
 80141b6:	bf00      	nop
 80141b8:	080186c0 	.word	0x080186c0

080141bc <create_topic>:
 80141bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141c0:	4605      	mov	r5, r0
 80141c2:	b084      	sub	sp, #16
 80141c4:	4822      	ldr	r0, [pc, #136]	@ (8014250 <create_topic+0x94>)
 80141c6:	460f      	mov	r7, r1
 80141c8:	4616      	mov	r6, r2
 80141ca:	f7ff ff89 	bl	80140e0 <get_memory>
 80141ce:	4604      	mov	r4, r0
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d039      	beq.n	8014248 <create_topic+0x8c>
 80141d4:	692b      	ldr	r3, [r5, #16]
 80141d6:	6884      	ldr	r4, [r0, #8]
 80141d8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8014258 <create_topic+0x9c>
 80141dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80141e0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80141e4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80141e8:	1c42      	adds	r2, r0, #1
 80141ea:	2102      	movs	r1, #2
 80141ec:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80141f0:	f7f8 ff7a 	bl	800d0e8 <uxr_object_id>
 80141f4:	223c      	movs	r2, #60	@ 0x3c
 80141f6:	6120      	str	r0, [r4, #16]
 80141f8:	4641      	mov	r1, r8
 80141fa:	4638      	mov	r0, r7
 80141fc:	f7f8 fb76 	bl	800c8ec <generate_topic_name>
 8014200:	b1f0      	cbz	r0, 8014240 <create_topic+0x84>
 8014202:	4f14      	ldr	r7, [pc, #80]	@ (8014254 <create_topic+0x98>)
 8014204:	4630      	mov	r0, r6
 8014206:	2264      	movs	r2, #100	@ 0x64
 8014208:	4639      	mov	r1, r7
 801420a:	f7f8 fb3f 	bl	800c88c <generate_type_name>
 801420e:	b1b8      	cbz	r0, 8014240 <create_topic+0x84>
 8014210:	6928      	ldr	r0, [r5, #16]
 8014212:	2306      	movs	r3, #6
 8014214:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014218:	f8cd 8000 	str.w	r8, [sp]
 801421c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014224:	6811      	ldr	r1, [r2, #0]
 8014226:	696b      	ldr	r3, [r5, #20]
 8014228:	6922      	ldr	r2, [r4, #16]
 801422a:	f7f8 fcdd 	bl	800cbe8 <uxr_buffer_create_topic_bin>
 801422e:	4602      	mov	r2, r0
 8014230:	6928      	ldr	r0, [r5, #16]
 8014232:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014236:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801423a:	f7f8 fa57 	bl	800c6ec <run_xrce_session>
 801423e:	b918      	cbnz	r0, 8014248 <create_topic+0x8c>
 8014240:	4620      	mov	r0, r4
 8014242:	f7f8 f951 	bl	800c4e8 <rmw_uxrce_fini_topic_memory>
 8014246:	2400      	movs	r4, #0
 8014248:	4620      	mov	r0, r4
 801424a:	b004      	add	sp, #16
 801424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014250:	2000ada4 	.word	0x2000ada4
 8014254:	2000af00 	.word	0x2000af00
 8014258:	2000aec4 	.word	0x2000aec4

0801425c <destroy_topic>:
 801425c:	b538      	push	{r3, r4, r5, lr}
 801425e:	6985      	ldr	r5, [r0, #24]
 8014260:	b1d5      	cbz	r5, 8014298 <destroy_topic+0x3c>
 8014262:	4604      	mov	r4, r0
 8014264:	6928      	ldr	r0, [r5, #16]
 8014266:	6922      	ldr	r2, [r4, #16]
 8014268:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801426c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014270:	6819      	ldr	r1, [r3, #0]
 8014272:	f7f8 fc3b 	bl	800caec <uxr_buffer_delete_entity>
 8014276:	4602      	mov	r2, r0
 8014278:	6928      	ldr	r0, [r5, #16]
 801427a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801427e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014282:	f7f8 fa33 	bl	800c6ec <run_xrce_session>
 8014286:	2800      	cmp	r0, #0
 8014288:	4620      	mov	r0, r4
 801428a:	bf14      	ite	ne
 801428c:	2400      	movne	r4, #0
 801428e:	2402      	moveq	r4, #2
 8014290:	f7f8 f92a 	bl	800c4e8 <rmw_uxrce_fini_topic_memory>
 8014294:	4620      	mov	r0, r4
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	2401      	movs	r4, #1
 801429a:	4620      	mov	r0, r4
 801429c:	bd38      	pop	{r3, r4, r5, pc}
 801429e:	bf00      	nop

080142a0 <rmw_send_request>:
 80142a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142a4:	4604      	mov	r4, r0
 80142a6:	6800      	ldr	r0, [r0, #0]
 80142a8:	b08b      	sub	sp, #44	@ 0x2c
 80142aa:	460e      	mov	r6, r1
 80142ac:	4615      	mov	r5, r2
 80142ae:	b128      	cbz	r0, 80142bc <rmw_send_request+0x1c>
 80142b0:	4b21      	ldr	r3, [pc, #132]	@ (8014338 <rmw_send_request+0x98>)
 80142b2:	6819      	ldr	r1, [r3, #0]
 80142b4:	f7eb ffb4 	bl	8000220 <strcmp>
 80142b8:	2800      	cmp	r0, #0
 80142ba:	d139      	bne.n	8014330 <rmw_send_request+0x90>
 80142bc:	6864      	ldr	r4, [r4, #4]
 80142be:	6963      	ldr	r3, [r4, #20]
 80142c0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80142c4:	689b      	ldr	r3, [r3, #8]
 80142c6:	4798      	blx	r3
 80142c8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80142cc:	4630      	mov	r0, r6
 80142ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142d2:	4798      	blx	r3
 80142d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80142d8:	9000      	str	r0, [sp, #0]
 80142da:	6922      	ldr	r2, [r4, #16]
 80142dc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80142de:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80142e2:	ab02      	add	r3, sp, #8
 80142e4:	f7fa ffbe 	bl	800f264 <uxr_prepare_output_stream>
 80142e8:	2700      	movs	r7, #0
 80142ea:	6028      	str	r0, [r5, #0]
 80142ec:	606f      	str	r7, [r5, #4]
 80142ee:	b198      	cbz	r0, 8014318 <rmw_send_request+0x78>
 80142f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80142f4:	a902      	add	r1, sp, #8
 80142f6:	4630      	mov	r0, r6
 80142f8:	4798      	blx	r3
 80142fa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80142fe:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014302:	2b01      	cmp	r3, #1
 8014304:	d00c      	beq.n	8014320 <rmw_send_request+0x80>
 8014306:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014308:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801430c:	f7f9 fd2c 	bl	800dd68 <uxr_run_session_until_confirm_delivery>
 8014310:	4638      	mov	r0, r7
 8014312:	b00b      	add	sp, #44	@ 0x2c
 8014314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014318:	2001      	movs	r0, #1
 801431a:	b00b      	add	sp, #44	@ 0x2c
 801431c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014320:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014324:	f7f9 f960 	bl	800d5e8 <uxr_flash_output_streams>
 8014328:	4638      	mov	r0, r7
 801432a:	b00b      	add	sp, #44	@ 0x2c
 801432c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014330:	200c      	movs	r0, #12
 8014332:	b00b      	add	sp, #44	@ 0x2c
 8014334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014338:	080186c0 	.word	0x080186c0

0801433c <rmw_take_request>:
 801433c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014340:	4605      	mov	r5, r0
 8014342:	6800      	ldr	r0, [r0, #0]
 8014344:	b089      	sub	sp, #36	@ 0x24
 8014346:	460c      	mov	r4, r1
 8014348:	4690      	mov	r8, r2
 801434a:	461e      	mov	r6, r3
 801434c:	b128      	cbz	r0, 801435a <rmw_take_request+0x1e>
 801434e:	4b28      	ldr	r3, [pc, #160]	@ (80143f0 <rmw_take_request+0xb4>)
 8014350:	6819      	ldr	r1, [r3, #0]
 8014352:	f7eb ff65 	bl	8000220 <strcmp>
 8014356:	2800      	cmp	r0, #0
 8014358:	d146      	bne.n	80143e8 <rmw_take_request+0xac>
 801435a:	b10e      	cbz	r6, 8014360 <rmw_take_request+0x24>
 801435c:	2300      	movs	r3, #0
 801435e:	7033      	strb	r3, [r6, #0]
 8014360:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014364:	f7f8 f944 	bl	800c5f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014368:	4648      	mov	r0, r9
 801436a:	f7f8 f919 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801436e:	4607      	mov	r7, r0
 8014370:	b3b0      	cbz	r0, 80143e0 <rmw_take_request+0xa4>
 8014372:	6885      	ldr	r5, [r0, #8]
 8014374:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014378:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801437c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014380:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014384:	7423      	strb	r3, [r4, #16]
 8014386:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801438a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801438e:	74e2      	strb	r2, [r4, #19]
 8014390:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014394:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014398:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801439c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80143a0:	61e1      	str	r1, [r4, #28]
 80143a2:	6162      	str	r2, [r4, #20]
 80143a4:	61a3      	str	r3, [r4, #24]
 80143a6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80143aa:	689b      	ldr	r3, [r3, #8]
 80143ac:	4798      	blx	r3
 80143ae:	6844      	ldr	r4, [r0, #4]
 80143b0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80143b4:	f105 0110 	add.w	r1, r5, #16
 80143b8:	4668      	mov	r0, sp
 80143ba:	f7f5 fbbb 	bl	8009b34 <ucdr_init_buffer>
 80143be:	68e3      	ldr	r3, [r4, #12]
 80143c0:	4641      	mov	r1, r8
 80143c2:	4668      	mov	r0, sp
 80143c4:	4798      	blx	r3
 80143c6:	4639      	mov	r1, r7
 80143c8:	4604      	mov	r4, r0
 80143ca:	480a      	ldr	r0, [pc, #40]	@ (80143f4 <rmw_take_request+0xb8>)
 80143cc:	f7ff fe98 	bl	8014100 <put_memory>
 80143d0:	b106      	cbz	r6, 80143d4 <rmw_take_request+0x98>
 80143d2:	7034      	strb	r4, [r6, #0]
 80143d4:	f084 0001 	eor.w	r0, r4, #1
 80143d8:	b2c0      	uxtb	r0, r0
 80143da:	b009      	add	sp, #36	@ 0x24
 80143dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143e0:	2001      	movs	r0, #1
 80143e2:	b009      	add	sp, #36	@ 0x24
 80143e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143e8:	200c      	movs	r0, #12
 80143ea:	b009      	add	sp, #36	@ 0x24
 80143ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143f0:	080186c0 	.word	0x080186c0
 80143f4:	2000ad84 	.word	0x2000ad84

080143f8 <rmw_send_response>:
 80143f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143fa:	4605      	mov	r5, r0
 80143fc:	6800      	ldr	r0, [r0, #0]
 80143fe:	b091      	sub	sp, #68	@ 0x44
 8014400:	460c      	mov	r4, r1
 8014402:	4616      	mov	r6, r2
 8014404:	b128      	cbz	r0, 8014412 <rmw_send_response+0x1a>
 8014406:	4b29      	ldr	r3, [pc, #164]	@ (80144ac <rmw_send_response+0xb4>)
 8014408:	6819      	ldr	r1, [r3, #0]
 801440a:	f7eb ff09 	bl	8000220 <strcmp>
 801440e:	2800      	cmp	r0, #0
 8014410:	d141      	bne.n	8014496 <rmw_send_response+0x9e>
 8014412:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014416:	9306      	str	r3, [sp, #24]
 8014418:	4623      	mov	r3, r4
 801441a:	9207      	str	r2, [sp, #28]
 801441c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014420:	686d      	ldr	r5, [r5, #4]
 8014422:	789b      	ldrb	r3, [r3, #2]
 8014424:	68a1      	ldr	r1, [r4, #8]
 8014426:	f88d 2017 	strb.w	r2, [sp, #23]
 801442a:	f88d 3016 	strb.w	r3, [sp, #22]
 801442e:	68e2      	ldr	r2, [r4, #12]
 8014430:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014434:	6860      	ldr	r0, [r4, #4]
 8014436:	f8ad 3014 	strh.w	r3, [sp, #20]
 801443a:	ab02      	add	r3, sp, #8
 801443c:	c307      	stmia	r3!, {r0, r1, r2}
 801443e:	696b      	ldr	r3, [r5, #20]
 8014440:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	4798      	blx	r3
 8014446:	6844      	ldr	r4, [r0, #4]
 8014448:	4630      	mov	r0, r6
 801444a:	6923      	ldr	r3, [r4, #16]
 801444c:	4798      	blx	r3
 801444e:	f100 0318 	add.w	r3, r0, #24
 8014452:	6938      	ldr	r0, [r7, #16]
 8014454:	9300      	str	r3, [sp, #0]
 8014456:	692a      	ldr	r2, [r5, #16]
 8014458:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801445a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801445e:	ab08      	add	r3, sp, #32
 8014460:	f7fa ff00 	bl	800f264 <uxr_prepare_output_stream>
 8014464:	b910      	cbnz	r0, 801446c <rmw_send_response+0x74>
 8014466:	2001      	movs	r0, #1
 8014468:	b011      	add	sp, #68	@ 0x44
 801446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801446c:	a902      	add	r1, sp, #8
 801446e:	a808      	add	r0, sp, #32
 8014470:	f7fc f864 	bl	801053c <uxr_serialize_SampleIdentity>
 8014474:	68a3      	ldr	r3, [r4, #8]
 8014476:	a908      	add	r1, sp, #32
 8014478:	4630      	mov	r0, r6
 801447a:	4798      	blx	r3
 801447c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014480:	6938      	ldr	r0, [r7, #16]
 8014482:	2b01      	cmp	r3, #1
 8014484:	d00a      	beq.n	801449c <rmw_send_response+0xa4>
 8014486:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014488:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801448c:	f7f9 fc6c 	bl	800dd68 <uxr_run_session_until_confirm_delivery>
 8014490:	2000      	movs	r0, #0
 8014492:	b011      	add	sp, #68	@ 0x44
 8014494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014496:	200c      	movs	r0, #12
 8014498:	b011      	add	sp, #68	@ 0x44
 801449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801449c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80144a0:	f7f9 f8a2 	bl	800d5e8 <uxr_flash_output_streams>
 80144a4:	2000      	movs	r0, #0
 80144a6:	b011      	add	sp, #68	@ 0x44
 80144a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144aa:	bf00      	nop
 80144ac:	080186c0 	.word	0x080186c0

080144b0 <rmw_take_response>:
 80144b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144b4:	4604      	mov	r4, r0
 80144b6:	6800      	ldr	r0, [r0, #0]
 80144b8:	b088      	sub	sp, #32
 80144ba:	4688      	mov	r8, r1
 80144bc:	4617      	mov	r7, r2
 80144be:	461d      	mov	r5, r3
 80144c0:	b120      	cbz	r0, 80144cc <rmw_take_response+0x1c>
 80144c2:	4b1e      	ldr	r3, [pc, #120]	@ (801453c <rmw_take_response+0x8c>)
 80144c4:	6819      	ldr	r1, [r3, #0]
 80144c6:	f7eb feab 	bl	8000220 <strcmp>
 80144ca:	bb78      	cbnz	r0, 801452c <rmw_take_response+0x7c>
 80144cc:	b10d      	cbz	r5, 80144d2 <rmw_take_response+0x22>
 80144ce:	2300      	movs	r3, #0
 80144d0:	702b      	strb	r3, [r5, #0]
 80144d2:	6864      	ldr	r4, [r4, #4]
 80144d4:	f7f8 f88c 	bl	800c5f0 <rmw_uxrce_clean_expired_static_input_buffer>
 80144d8:	4620      	mov	r0, r4
 80144da:	f7f8 f861 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80144de:	4606      	mov	r6, r0
 80144e0:	b340      	cbz	r0, 8014534 <rmw_take_response+0x84>
 80144e2:	6963      	ldr	r3, [r4, #20]
 80144e4:	6884      	ldr	r4, [r0, #8]
 80144e6:	68db      	ldr	r3, [r3, #12]
 80144e8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80144ec:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80144f0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80144f4:	4798      	blx	r3
 80144f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80144fa:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80144fe:	f104 0110 	add.w	r1, r4, #16
 8014502:	4668      	mov	r0, sp
 8014504:	f7f5 fb16 	bl	8009b34 <ucdr_init_buffer>
 8014508:	4639      	mov	r1, r7
 801450a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801450e:	4668      	mov	r0, sp
 8014510:	4798      	blx	r3
 8014512:	4631      	mov	r1, r6
 8014514:	4604      	mov	r4, r0
 8014516:	480a      	ldr	r0, [pc, #40]	@ (8014540 <rmw_take_response+0x90>)
 8014518:	f7ff fdf2 	bl	8014100 <put_memory>
 801451c:	b105      	cbz	r5, 8014520 <rmw_take_response+0x70>
 801451e:	702c      	strb	r4, [r5, #0]
 8014520:	f084 0001 	eor.w	r0, r4, #1
 8014524:	b2c0      	uxtb	r0, r0
 8014526:	b008      	add	sp, #32
 8014528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801452c:	200c      	movs	r0, #12
 801452e:	b008      	add	sp, #32
 8014530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014534:	2001      	movs	r0, #1
 8014536:	b008      	add	sp, #32
 8014538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801453c:	080186c0 	.word	0x080186c0
 8014540:	2000ad84 	.word	0x2000ad84

08014544 <rmw_take_with_info>:
 8014544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014546:	4604      	mov	r4, r0
 8014548:	6800      	ldr	r0, [r0, #0]
 801454a:	b089      	sub	sp, #36	@ 0x24
 801454c:	460f      	mov	r7, r1
 801454e:	4615      	mov	r5, r2
 8014550:	b128      	cbz	r0, 801455e <rmw_take_with_info+0x1a>
 8014552:	4b24      	ldr	r3, [pc, #144]	@ (80145e4 <rmw_take_with_info+0xa0>)
 8014554:	6819      	ldr	r1, [r3, #0]
 8014556:	f7eb fe63 	bl	8000220 <strcmp>
 801455a:	2800      	cmp	r0, #0
 801455c:	d13e      	bne.n	80145dc <rmw_take_with_info+0x98>
 801455e:	b305      	cbz	r5, 80145a2 <rmw_take_with_info+0x5e>
 8014560:	6864      	ldr	r4, [r4, #4]
 8014562:	2300      	movs	r3, #0
 8014564:	702b      	strb	r3, [r5, #0]
 8014566:	f7f8 f843 	bl	800c5f0 <rmw_uxrce_clean_expired_static_input_buffer>
 801456a:	4620      	mov	r0, r4
 801456c:	f7f8 f818 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014570:	4606      	mov	r6, r0
 8014572:	b1f0      	cbz	r0, 80145b2 <rmw_take_with_info+0x6e>
 8014574:	6881      	ldr	r1, [r0, #8]
 8014576:	4668      	mov	r0, sp
 8014578:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801457c:	3110      	adds	r1, #16
 801457e:	f7f5 fad9 	bl	8009b34 <ucdr_init_buffer>
 8014582:	69a3      	ldr	r3, [r4, #24]
 8014584:	4639      	mov	r1, r7
 8014586:	68db      	ldr	r3, [r3, #12]
 8014588:	4668      	mov	r0, sp
 801458a:	4798      	blx	r3
 801458c:	4631      	mov	r1, r6
 801458e:	4604      	mov	r4, r0
 8014590:	4815      	ldr	r0, [pc, #84]	@ (80145e8 <rmw_take_with_info+0xa4>)
 8014592:	f7ff fdb5 	bl	8014100 <put_memory>
 8014596:	702c      	strb	r4, [r5, #0]
 8014598:	f084 0001 	eor.w	r0, r4, #1
 801459c:	b2c0      	uxtb	r0, r0
 801459e:	b009      	add	sp, #36	@ 0x24
 80145a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145a2:	6864      	ldr	r4, [r4, #4]
 80145a4:	f7f8 f824 	bl	800c5f0 <rmw_uxrce_clean_expired_static_input_buffer>
 80145a8:	4620      	mov	r0, r4
 80145aa:	f7f7 fff9 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80145ae:	4605      	mov	r5, r0
 80145b0:	b910      	cbnz	r0, 80145b8 <rmw_take_with_info+0x74>
 80145b2:	2001      	movs	r0, #1
 80145b4:	b009      	add	sp, #36	@ 0x24
 80145b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b8:	68a9      	ldr	r1, [r5, #8]
 80145ba:	4668      	mov	r0, sp
 80145bc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80145c0:	3110      	adds	r1, #16
 80145c2:	f7f5 fab7 	bl	8009b34 <ucdr_init_buffer>
 80145c6:	69a3      	ldr	r3, [r4, #24]
 80145c8:	4639      	mov	r1, r7
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	4668      	mov	r0, sp
 80145ce:	4798      	blx	r3
 80145d0:	4629      	mov	r1, r5
 80145d2:	4604      	mov	r4, r0
 80145d4:	4804      	ldr	r0, [pc, #16]	@ (80145e8 <rmw_take_with_info+0xa4>)
 80145d6:	f7ff fd93 	bl	8014100 <put_memory>
 80145da:	e7dd      	b.n	8014598 <rmw_take_with_info+0x54>
 80145dc:	200c      	movs	r0, #12
 80145de:	b009      	add	sp, #36	@ 0x24
 80145e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145e2:	bf00      	nop
 80145e4:	080186c0 	.word	0x080186c0
 80145e8:	2000ad84 	.word	0x2000ad84

080145ec <rmw_wait>:
 80145ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145f0:	b089      	sub	sp, #36	@ 0x24
 80145f2:	4605      	mov	r5, r0
 80145f4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80145f6:	460e      	mov	r6, r1
 80145f8:	4698      	mov	r8, r3
 80145fa:	4691      	mov	r9, r2
 80145fc:	2a00      	cmp	r2, #0
 80145fe:	f000 810a 	beq.w	8014816 <rmw_wait+0x22a>
 8014602:	b16c      	cbz	r4, 8014620 <rmw_wait+0x34>
 8014604:	4bae      	ldr	r3, [pc, #696]	@ (80148c0 <rmw_wait+0x2d4>)
 8014606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014608:	af04      	add	r7, sp, #16
 801460a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801460e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014612:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014616:	f7ff faaf 	bl	8013b78 <rmw_time_equal>
 801461a:	2800      	cmp	r0, #0
 801461c:	f000 8127 	beq.w	801486e <rmw_wait+0x282>
 8014620:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014624:	f7f7 ffe4 	bl	800c5f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014628:	4ba6      	ldr	r3, [pc, #664]	@ (80148c4 <rmw_wait+0x2d8>)
 801462a:	681c      	ldr	r4, [r3, #0]
 801462c:	b14c      	cbz	r4, 8014642 <rmw_wait+0x56>
 801462e:	4623      	mov	r3, r4
 8014630:	2100      	movs	r1, #0
 8014632:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014636:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801463a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801463e:	2b00      	cmp	r3, #0
 8014640:	d1f7      	bne.n	8014632 <rmw_wait+0x46>
 8014642:	f1b9 0f00 	cmp.w	r9, #0
 8014646:	d011      	beq.n	801466c <rmw_wait+0x80>
 8014648:	f8d9 1000 	ldr.w	r1, [r9]
 801464c:	b171      	cbz	r1, 801466c <rmw_wait+0x80>
 801464e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014652:	2300      	movs	r3, #0
 8014654:	2001      	movs	r0, #1
 8014656:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801465a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801465c:	6912      	ldr	r2, [r2, #16]
 801465e:	3301      	adds	r3, #1
 8014660:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014664:	4299      	cmp	r1, r3
 8014666:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801466a:	d1f4      	bne.n	8014656 <rmw_wait+0x6a>
 801466c:	f1b8 0f00 	cmp.w	r8, #0
 8014670:	d011      	beq.n	8014696 <rmw_wait+0xaa>
 8014672:	f8d8 1000 	ldr.w	r1, [r8]
 8014676:	b171      	cbz	r1, 8014696 <rmw_wait+0xaa>
 8014678:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801467c:	2300      	movs	r3, #0
 801467e:	2001      	movs	r0, #1
 8014680:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014684:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014686:	6912      	ldr	r2, [r2, #16]
 8014688:	3301      	adds	r3, #1
 801468a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801468e:	4299      	cmp	r1, r3
 8014690:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014694:	d1f4      	bne.n	8014680 <rmw_wait+0x94>
 8014696:	b185      	cbz	r5, 80146ba <rmw_wait+0xce>
 8014698:	6829      	ldr	r1, [r5, #0]
 801469a:	b171      	cbz	r1, 80146ba <rmw_wait+0xce>
 801469c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80146a0:	2300      	movs	r3, #0
 80146a2:	2001      	movs	r0, #1
 80146a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80146a8:	6a12      	ldr	r2, [r2, #32]
 80146aa:	6912      	ldr	r2, [r2, #16]
 80146ac:	3301      	adds	r3, #1
 80146ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80146b2:	4299      	cmp	r1, r3
 80146b4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80146b8:	d1f4      	bne.n	80146a4 <rmw_wait+0xb8>
 80146ba:	b34c      	cbz	r4, 8014710 <rmw_wait+0x124>
 80146bc:	4622      	mov	r2, r4
 80146be:	2300      	movs	r3, #0
 80146c0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80146c4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80146c8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80146cc:	440b      	add	r3, r1
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	2a00      	cmp	r2, #0
 80146d2:	d1f5      	bne.n	80146c0 <rmw_wait+0xd4>
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	f000 8084 	beq.w	80147e2 <rmw_wait+0x1f6>
 80146da:	1c7a      	adds	r2, r7, #1
 80146dc:	d00d      	beq.n	80146fa <rmw_wait+0x10e>
 80146de:	ee07 7a90 	vmov	s15, r7
 80146e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80146e6:	ee07 3a90 	vmov	s15, r3
 80146ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80146f2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80146f6:	ee17 7a90 	vmov	r7, s15
 80146fa:	68a0      	ldr	r0, [r4, #8]
 80146fc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014700:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014704:	2b00      	cmp	r3, #0
 8014706:	f040 8090 	bne.w	801482a <rmw_wait+0x23e>
 801470a:	6864      	ldr	r4, [r4, #4]
 801470c:	2c00      	cmp	r4, #0
 801470e:	d1f4      	bne.n	80146fa <rmw_wait+0x10e>
 8014710:	f1b9 0f00 	cmp.w	r9, #0
 8014714:	f000 80bc 	beq.w	8014890 <rmw_wait+0x2a4>
 8014718:	f8d9 7000 	ldr.w	r7, [r9]
 801471c:	2f00      	cmp	r7, #0
 801471e:	f000 808e 	beq.w	801483e <rmw_wait+0x252>
 8014722:	2400      	movs	r4, #0
 8014724:	4627      	mov	r7, r4
 8014726:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801472a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801472e:	f7f7 ff37 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014732:	2800      	cmp	r0, #0
 8014734:	d05f      	beq.n	80147f6 <rmw_wait+0x20a>
 8014736:	f8d9 3000 	ldr.w	r3, [r9]
 801473a:	3401      	adds	r4, #1
 801473c:	42a3      	cmp	r3, r4
 801473e:	f04f 0701 	mov.w	r7, #1
 8014742:	d8f0      	bhi.n	8014726 <rmw_wait+0x13a>
 8014744:	f1b8 0f00 	cmp.w	r8, #0
 8014748:	d012      	beq.n	8014770 <rmw_wait+0x184>
 801474a:	f8d8 3000 	ldr.w	r3, [r8]
 801474e:	b17b      	cbz	r3, 8014770 <rmw_wait+0x184>
 8014750:	2400      	movs	r4, #0
 8014752:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014756:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801475a:	f7f7 ff21 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801475e:	2800      	cmp	r0, #0
 8014760:	d051      	beq.n	8014806 <rmw_wait+0x21a>
 8014762:	f8d8 3000 	ldr.w	r3, [r8]
 8014766:	3401      	adds	r4, #1
 8014768:	42a3      	cmp	r3, r4
 801476a:	f04f 0701 	mov.w	r7, #1
 801476e:	d8f0      	bhi.n	8014752 <rmw_wait+0x166>
 8014770:	b1dd      	cbz	r5, 80147aa <rmw_wait+0x1be>
 8014772:	682b      	ldr	r3, [r5, #0]
 8014774:	b1cb      	cbz	r3, 80147aa <rmw_wait+0x1be>
 8014776:	2400      	movs	r4, #0
 8014778:	686b      	ldr	r3, [r5, #4]
 801477a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801477e:	f7f7 ff0f 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014782:	b158      	cbz	r0, 801479c <rmw_wait+0x1b0>
 8014784:	682b      	ldr	r3, [r5, #0]
 8014786:	3401      	adds	r4, #1
 8014788:	42a3      	cmp	r3, r4
 801478a:	d969      	bls.n	8014860 <rmw_wait+0x274>
 801478c:	686b      	ldr	r3, [r5, #4]
 801478e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014792:	2701      	movs	r7, #1
 8014794:	f7f7 ff04 	bl	800c5a0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014798:	2800      	cmp	r0, #0
 801479a:	d1f3      	bne.n	8014784 <rmw_wait+0x198>
 801479c:	e9d5 3200 	ldrd	r3, r2, [r5]
 80147a0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80147a4:	3401      	adds	r4, #1
 80147a6:	42a3      	cmp	r3, r4
 80147a8:	d8e6      	bhi.n	8014778 <rmw_wait+0x18c>
 80147aa:	b1a6      	cbz	r6, 80147d6 <rmw_wait+0x1ea>
 80147ac:	6834      	ldr	r4, [r6, #0]
 80147ae:	b194      	cbz	r4, 80147d6 <rmw_wait+0x1ea>
 80147b0:	2300      	movs	r3, #0
 80147b2:	461d      	mov	r5, r3
 80147b4:	e004      	b.n	80147c0 <rmw_wait+0x1d4>
 80147b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80147ba:	3301      	adds	r3, #1
 80147bc:	42a3      	cmp	r3, r4
 80147be:	d00a      	beq.n	80147d6 <rmw_wait+0x1ea>
 80147c0:	6870      	ldr	r0, [r6, #4]
 80147c2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80147c6:	7c0a      	ldrb	r2, [r1, #16]
 80147c8:	2a00      	cmp	r2, #0
 80147ca:	d0f4      	beq.n	80147b6 <rmw_wait+0x1ca>
 80147cc:	3301      	adds	r3, #1
 80147ce:	42a3      	cmp	r3, r4
 80147d0:	740d      	strb	r5, [r1, #16]
 80147d2:	4617      	mov	r7, r2
 80147d4:	d1f4      	bne.n	80147c0 <rmw_wait+0x1d4>
 80147d6:	2f00      	cmp	r7, #0
 80147d8:	d03e      	beq.n	8014858 <rmw_wait+0x26c>
 80147da:	2000      	movs	r0, #0
 80147dc:	b009      	add	sp, #36	@ 0x24
 80147de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147e2:	68a0      	ldr	r0, [r4, #8]
 80147e4:	2100      	movs	r1, #0
 80147e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147ea:	f7f9 fa83 	bl	800dcf4 <uxr_run_session_timeout>
 80147ee:	6864      	ldr	r4, [r4, #4]
 80147f0:	2c00      	cmp	r4, #0
 80147f2:	d1f6      	bne.n	80147e2 <rmw_wait+0x1f6>
 80147f4:	e78c      	b.n	8014710 <rmw_wait+0x124>
 80147f6:	e9d9 3200 	ldrd	r3, r2, [r9]
 80147fa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80147fe:	3401      	adds	r4, #1
 8014800:	42a3      	cmp	r3, r4
 8014802:	d890      	bhi.n	8014726 <rmw_wait+0x13a>
 8014804:	e79e      	b.n	8014744 <rmw_wait+0x158>
 8014806:	e9d8 3200 	ldrd	r3, r2, [r8]
 801480a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801480e:	3401      	adds	r4, #1
 8014810:	429c      	cmp	r4, r3
 8014812:	d39e      	bcc.n	8014752 <rmw_wait+0x166>
 8014814:	e7ac      	b.n	8014770 <rmw_wait+0x184>
 8014816:	2b00      	cmp	r3, #0
 8014818:	f47f aef3 	bne.w	8014602 <rmw_wait+0x16>
 801481c:	2800      	cmp	r0, #0
 801481e:	f47f aef0 	bne.w	8014602 <rmw_wait+0x16>
 8014822:	2900      	cmp	r1, #0
 8014824:	f47f aeed 	bne.w	8014602 <rmw_wait+0x16>
 8014828:	e7d7      	b.n	80147da <rmw_wait+0x1ee>
 801482a:	4639      	mov	r1, r7
 801482c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014830:	f7f9 fa7a 	bl	800dd28 <uxr_run_session_until_data>
 8014834:	6864      	ldr	r4, [r4, #4]
 8014836:	2c00      	cmp	r4, #0
 8014838:	f47f af5f 	bne.w	80146fa <rmw_wait+0x10e>
 801483c:	e768      	b.n	8014710 <rmw_wait+0x124>
 801483e:	f1b8 0f00 	cmp.w	r8, #0
 8014842:	d032      	beq.n	80148aa <rmw_wait+0x2be>
 8014844:	f8d8 3000 	ldr.w	r3, [r8]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d181      	bne.n	8014750 <rmw_wait+0x164>
 801484c:	461f      	mov	r7, r3
 801484e:	2d00      	cmp	r5, #0
 8014850:	d18f      	bne.n	8014772 <rmw_wait+0x186>
 8014852:	462f      	mov	r7, r5
 8014854:	2e00      	cmp	r6, #0
 8014856:	d1a9      	bne.n	80147ac <rmw_wait+0x1c0>
 8014858:	2002      	movs	r0, #2
 801485a:	b009      	add	sp, #36	@ 0x24
 801485c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014860:	2e00      	cmp	r6, #0
 8014862:	d0ba      	beq.n	80147da <rmw_wait+0x1ee>
 8014864:	6834      	ldr	r4, [r6, #0]
 8014866:	2701      	movs	r7, #1
 8014868:	2c00      	cmp	r4, #0
 801486a:	d1a1      	bne.n	80147b0 <rmw_wait+0x1c4>
 801486c:	e7b5      	b.n	80147da <rmw_wait+0x1ee>
 801486e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014872:	f7ff f9d5 	bl	8013c20 <rmw_time_total_nsec>
 8014876:	2300      	movs	r3, #0
 8014878:	4a13      	ldr	r2, [pc, #76]	@ (80148c8 <rmw_wait+0x2dc>)
 801487a:	f7eb fd89 	bl	8000390 <__aeabi_uldivmod>
 801487e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8014882:	f171 0300 	sbcs.w	r3, r1, #0
 8014886:	4607      	mov	r7, r0
 8014888:	bfa8      	it	ge
 801488a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801488e:	e6c9      	b.n	8014624 <rmw_wait+0x38>
 8014890:	f1b8 0f00 	cmp.w	r8, #0
 8014894:	d009      	beq.n	80148aa <rmw_wait+0x2be>
 8014896:	f8d8 3000 	ldr.w	r3, [r8]
 801489a:	464f      	mov	r7, r9
 801489c:	2b00      	cmp	r3, #0
 801489e:	f47f af57 	bne.w	8014750 <rmw_wait+0x164>
 80148a2:	2d00      	cmp	r5, #0
 80148a4:	f47f af65 	bne.w	8014772 <rmw_wait+0x186>
 80148a8:	e7d3      	b.n	8014852 <rmw_wait+0x266>
 80148aa:	b17d      	cbz	r5, 80148cc <rmw_wait+0x2e0>
 80148ac:	682b      	ldr	r3, [r5, #0]
 80148ae:	4647      	mov	r7, r8
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	f47f af60 	bne.w	8014776 <rmw_wait+0x18a>
 80148b6:	2e00      	cmp	r6, #0
 80148b8:	f47f af78 	bne.w	80147ac <rmw_wait+0x1c0>
 80148bc:	e7cc      	b.n	8014858 <rmw_wait+0x26c>
 80148be:	bf00      	nop
 80148c0:	080176c0 	.word	0x080176c0
 80148c4:	2000ad74 	.word	0x2000ad74
 80148c8:	000f4240 	.word	0x000f4240
 80148cc:	2e00      	cmp	r6, #0
 80148ce:	d0c3      	beq.n	8014858 <rmw_wait+0x26c>
 80148d0:	6834      	ldr	r4, [r6, #0]
 80148d2:	462f      	mov	r7, r5
 80148d4:	2c00      	cmp	r4, #0
 80148d6:	f47f af6b 	bne.w	80147b0 <rmw_wait+0x1c4>
 80148da:	e7bd      	b.n	8014858 <rmw_wait+0x26c>

080148dc <rmw_create_wait_set>:
 80148dc:	b508      	push	{r3, lr}
 80148de:	4803      	ldr	r0, [pc, #12]	@ (80148ec <rmw_create_wait_set+0x10>)
 80148e0:	f7ff fbfe 	bl	80140e0 <get_memory>
 80148e4:	b108      	cbz	r0, 80148ea <rmw_create_wait_set+0xe>
 80148e6:	6880      	ldr	r0, [r0, #8]
 80148e8:	3010      	adds	r0, #16
 80148ea:	bd08      	pop	{r3, pc}
 80148ec:	2000adb4 	.word	0x2000adb4

080148f0 <rmw_destroy_wait_set>:
 80148f0:	b508      	push	{r3, lr}
 80148f2:	4b08      	ldr	r3, [pc, #32]	@ (8014914 <rmw_destroy_wait_set+0x24>)
 80148f4:	6819      	ldr	r1, [r3, #0]
 80148f6:	b911      	cbnz	r1, 80148fe <rmw_destroy_wait_set+0xe>
 80148f8:	e00a      	b.n	8014910 <rmw_destroy_wait_set+0x20>
 80148fa:	6849      	ldr	r1, [r1, #4]
 80148fc:	b141      	cbz	r1, 8014910 <rmw_destroy_wait_set+0x20>
 80148fe:	688b      	ldr	r3, [r1, #8]
 8014900:	3310      	adds	r3, #16
 8014902:	4298      	cmp	r0, r3
 8014904:	d1f9      	bne.n	80148fa <rmw_destroy_wait_set+0xa>
 8014906:	4803      	ldr	r0, [pc, #12]	@ (8014914 <rmw_destroy_wait_set+0x24>)
 8014908:	f7ff fbfa 	bl	8014100 <put_memory>
 801490c:	2000      	movs	r0, #0
 801490e:	bd08      	pop	{r3, pc}
 8014910:	2001      	movs	r0, #1
 8014912:	bd08      	pop	{r3, pc}
 8014914:	2000adb4 	.word	0x2000adb4

08014918 <rmw_uros_epoch_nanos>:
 8014918:	4b05      	ldr	r3, [pc, #20]	@ (8014930 <rmw_uros_epoch_nanos+0x18>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	b123      	cbz	r3, 8014928 <rmw_uros_epoch_nanos+0x10>
 801491e:	6898      	ldr	r0, [r3, #8]
 8014920:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014924:	f7f8 be56 	b.w	800d5d4 <uxr_epoch_nanos>
 8014928:	2000      	movs	r0, #0
 801492a:	2100      	movs	r1, #0
 801492c:	4770      	bx	lr
 801492e:	bf00      	nop
 8014930:	2000ad74 	.word	0x2000ad74

08014934 <std_msgs__msg__Int32__init>:
 8014934:	3800      	subs	r0, #0
 8014936:	bf18      	it	ne
 8014938:	2001      	movne	r0, #1
 801493a:	4770      	bx	lr

0801493c <std_msgs__msg__Int32__fini>:
 801493c:	4770      	bx	lr
 801493e:	bf00      	nop

08014940 <ucdr_serialize_endian_array_char>:
 8014940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014944:	4619      	mov	r1, r3
 8014946:	461f      	mov	r7, r3
 8014948:	4605      	mov	r5, r0
 801494a:	4690      	mov	r8, r2
 801494c:	f7f5 f89e 	bl	8009a8c <ucdr_check_buffer_available_for>
 8014950:	b9e0      	cbnz	r0, 801498c <ucdr_serialize_endian_array_char+0x4c>
 8014952:	463e      	mov	r6, r7
 8014954:	e009      	b.n	801496a <ucdr_serialize_endian_array_char+0x2a>
 8014956:	68a8      	ldr	r0, [r5, #8]
 8014958:	f001 ff81 	bl	801685e <memcpy>
 801495c:	68ab      	ldr	r3, [r5, #8]
 801495e:	6928      	ldr	r0, [r5, #16]
 8014960:	4423      	add	r3, r4
 8014962:	4420      	add	r0, r4
 8014964:	1b36      	subs	r6, r6, r4
 8014966:	60ab      	str	r3, [r5, #8]
 8014968:	6128      	str	r0, [r5, #16]
 801496a:	4631      	mov	r1, r6
 801496c:	2201      	movs	r2, #1
 801496e:	4628      	mov	r0, r5
 8014970:	f7f5 f914 	bl	8009b9c <ucdr_check_final_buffer_behavior_array>
 8014974:	1bb9      	subs	r1, r7, r6
 8014976:	4441      	add	r1, r8
 8014978:	4604      	mov	r4, r0
 801497a:	4602      	mov	r2, r0
 801497c:	2800      	cmp	r0, #0
 801497e:	d1ea      	bne.n	8014956 <ucdr_serialize_endian_array_char+0x16>
 8014980:	2301      	movs	r3, #1
 8014982:	7da8      	ldrb	r0, [r5, #22]
 8014984:	756b      	strb	r3, [r5, #21]
 8014986:	4058      	eors	r0, r3
 8014988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801498c:	463a      	mov	r2, r7
 801498e:	68a8      	ldr	r0, [r5, #8]
 8014990:	4641      	mov	r1, r8
 8014992:	f001 ff64 	bl	801685e <memcpy>
 8014996:	68aa      	ldr	r2, [r5, #8]
 8014998:	692b      	ldr	r3, [r5, #16]
 801499a:	443a      	add	r2, r7
 801499c:	443b      	add	r3, r7
 801499e:	60aa      	str	r2, [r5, #8]
 80149a0:	612b      	str	r3, [r5, #16]
 80149a2:	e7ed      	b.n	8014980 <ucdr_serialize_endian_array_char+0x40>

080149a4 <ucdr_deserialize_endian_array_char>:
 80149a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a8:	4619      	mov	r1, r3
 80149aa:	461f      	mov	r7, r3
 80149ac:	4605      	mov	r5, r0
 80149ae:	4690      	mov	r8, r2
 80149b0:	f7f5 f86c 	bl	8009a8c <ucdr_check_buffer_available_for>
 80149b4:	b9e0      	cbnz	r0, 80149f0 <ucdr_deserialize_endian_array_char+0x4c>
 80149b6:	463e      	mov	r6, r7
 80149b8:	e009      	b.n	80149ce <ucdr_deserialize_endian_array_char+0x2a>
 80149ba:	68a9      	ldr	r1, [r5, #8]
 80149bc:	f001 ff4f 	bl	801685e <memcpy>
 80149c0:	68ab      	ldr	r3, [r5, #8]
 80149c2:	6928      	ldr	r0, [r5, #16]
 80149c4:	4423      	add	r3, r4
 80149c6:	4420      	add	r0, r4
 80149c8:	1b36      	subs	r6, r6, r4
 80149ca:	60ab      	str	r3, [r5, #8]
 80149cc:	6128      	str	r0, [r5, #16]
 80149ce:	2201      	movs	r2, #1
 80149d0:	4631      	mov	r1, r6
 80149d2:	4628      	mov	r0, r5
 80149d4:	f7f5 f8e2 	bl	8009b9c <ucdr_check_final_buffer_behavior_array>
 80149d8:	4604      	mov	r4, r0
 80149da:	1bb8      	subs	r0, r7, r6
 80149dc:	4440      	add	r0, r8
 80149de:	4622      	mov	r2, r4
 80149e0:	2c00      	cmp	r4, #0
 80149e2:	d1ea      	bne.n	80149ba <ucdr_deserialize_endian_array_char+0x16>
 80149e4:	2301      	movs	r3, #1
 80149e6:	7da8      	ldrb	r0, [r5, #22]
 80149e8:	756b      	strb	r3, [r5, #21]
 80149ea:	4058      	eors	r0, r3
 80149ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149f0:	463a      	mov	r2, r7
 80149f2:	68a9      	ldr	r1, [r5, #8]
 80149f4:	4640      	mov	r0, r8
 80149f6:	f001 ff32 	bl	801685e <memcpy>
 80149fa:	68aa      	ldr	r2, [r5, #8]
 80149fc:	692b      	ldr	r3, [r5, #16]
 80149fe:	443a      	add	r2, r7
 8014a00:	443b      	add	r3, r7
 8014a02:	60aa      	str	r2, [r5, #8]
 8014a04:	612b      	str	r3, [r5, #16]
 8014a06:	e7ed      	b.n	80149e4 <ucdr_deserialize_endian_array_char+0x40>

08014a08 <ucdr_serialize_array_uint8_t>:
 8014a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a0c:	4688      	mov	r8, r1
 8014a0e:	4611      	mov	r1, r2
 8014a10:	4617      	mov	r7, r2
 8014a12:	4605      	mov	r5, r0
 8014a14:	f7f5 f83a 	bl	8009a8c <ucdr_check_buffer_available_for>
 8014a18:	b9e0      	cbnz	r0, 8014a54 <ucdr_serialize_array_uint8_t+0x4c>
 8014a1a:	463e      	mov	r6, r7
 8014a1c:	e009      	b.n	8014a32 <ucdr_serialize_array_uint8_t+0x2a>
 8014a1e:	68a8      	ldr	r0, [r5, #8]
 8014a20:	f001 ff1d 	bl	801685e <memcpy>
 8014a24:	68aa      	ldr	r2, [r5, #8]
 8014a26:	692b      	ldr	r3, [r5, #16]
 8014a28:	4422      	add	r2, r4
 8014a2a:	4423      	add	r3, r4
 8014a2c:	1b36      	subs	r6, r6, r4
 8014a2e:	60aa      	str	r2, [r5, #8]
 8014a30:	612b      	str	r3, [r5, #16]
 8014a32:	4631      	mov	r1, r6
 8014a34:	2201      	movs	r2, #1
 8014a36:	4628      	mov	r0, r5
 8014a38:	f7f5 f8b0 	bl	8009b9c <ucdr_check_final_buffer_behavior_array>
 8014a3c:	1bb9      	subs	r1, r7, r6
 8014a3e:	4441      	add	r1, r8
 8014a40:	4604      	mov	r4, r0
 8014a42:	4602      	mov	r2, r0
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d1ea      	bne.n	8014a1e <ucdr_serialize_array_uint8_t+0x16>
 8014a48:	2301      	movs	r3, #1
 8014a4a:	7da8      	ldrb	r0, [r5, #22]
 8014a4c:	756b      	strb	r3, [r5, #21]
 8014a4e:	4058      	eors	r0, r3
 8014a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a54:	463a      	mov	r2, r7
 8014a56:	68a8      	ldr	r0, [r5, #8]
 8014a58:	4641      	mov	r1, r8
 8014a5a:	f001 ff00 	bl	801685e <memcpy>
 8014a5e:	68aa      	ldr	r2, [r5, #8]
 8014a60:	692b      	ldr	r3, [r5, #16]
 8014a62:	443a      	add	r2, r7
 8014a64:	443b      	add	r3, r7
 8014a66:	60aa      	str	r2, [r5, #8]
 8014a68:	612b      	str	r3, [r5, #16]
 8014a6a:	e7ed      	b.n	8014a48 <ucdr_serialize_array_uint8_t+0x40>

08014a6c <ucdr_serialize_endian_array_uint8_t>:
 8014a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a70:	4619      	mov	r1, r3
 8014a72:	461f      	mov	r7, r3
 8014a74:	4605      	mov	r5, r0
 8014a76:	4690      	mov	r8, r2
 8014a78:	f7f5 f808 	bl	8009a8c <ucdr_check_buffer_available_for>
 8014a7c:	b9e0      	cbnz	r0, 8014ab8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8014a7e:	463e      	mov	r6, r7
 8014a80:	e009      	b.n	8014a96 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8014a82:	68a8      	ldr	r0, [r5, #8]
 8014a84:	f001 feeb 	bl	801685e <memcpy>
 8014a88:	68ab      	ldr	r3, [r5, #8]
 8014a8a:	6928      	ldr	r0, [r5, #16]
 8014a8c:	4423      	add	r3, r4
 8014a8e:	4420      	add	r0, r4
 8014a90:	1b36      	subs	r6, r6, r4
 8014a92:	60ab      	str	r3, [r5, #8]
 8014a94:	6128      	str	r0, [r5, #16]
 8014a96:	4631      	mov	r1, r6
 8014a98:	2201      	movs	r2, #1
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	f7f5 f87e 	bl	8009b9c <ucdr_check_final_buffer_behavior_array>
 8014aa0:	1bb9      	subs	r1, r7, r6
 8014aa2:	4441      	add	r1, r8
 8014aa4:	4604      	mov	r4, r0
 8014aa6:	4602      	mov	r2, r0
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d1ea      	bne.n	8014a82 <ucdr_serialize_endian_array_uint8_t+0x16>
 8014aac:	2301      	movs	r3, #1
 8014aae:	7da8      	ldrb	r0, [r5, #22]
 8014ab0:	756b      	strb	r3, [r5, #21]
 8014ab2:	4058      	eors	r0, r3
 8014ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab8:	463a      	mov	r2, r7
 8014aba:	68a8      	ldr	r0, [r5, #8]
 8014abc:	4641      	mov	r1, r8
 8014abe:	f001 fece 	bl	801685e <memcpy>
 8014ac2:	68aa      	ldr	r2, [r5, #8]
 8014ac4:	692b      	ldr	r3, [r5, #16]
 8014ac6:	443a      	add	r2, r7
 8014ac8:	443b      	add	r3, r7
 8014aca:	60aa      	str	r2, [r5, #8]
 8014acc:	612b      	str	r3, [r5, #16]
 8014ace:	e7ed      	b.n	8014aac <ucdr_serialize_endian_array_uint8_t+0x40>

08014ad0 <ucdr_deserialize_array_uint8_t>:
 8014ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad4:	4688      	mov	r8, r1
 8014ad6:	4611      	mov	r1, r2
 8014ad8:	4617      	mov	r7, r2
 8014ada:	4605      	mov	r5, r0
 8014adc:	f7f4 ffd6 	bl	8009a8c <ucdr_check_buffer_available_for>
 8014ae0:	b9e0      	cbnz	r0, 8014b1c <ucdr_deserialize_array_uint8_t+0x4c>
 8014ae2:	463e      	mov	r6, r7
 8014ae4:	e009      	b.n	8014afa <ucdr_deserialize_array_uint8_t+0x2a>
 8014ae6:	68a9      	ldr	r1, [r5, #8]
 8014ae8:	f001 feb9 	bl	801685e <memcpy>
 8014aec:	68aa      	ldr	r2, [r5, #8]
 8014aee:	692b      	ldr	r3, [r5, #16]
 8014af0:	4422      	add	r2, r4
 8014af2:	4423      	add	r3, r4
 8014af4:	1b36      	subs	r6, r6, r4
 8014af6:	60aa      	str	r2, [r5, #8]
 8014af8:	612b      	str	r3, [r5, #16]
 8014afa:	2201      	movs	r2, #1
 8014afc:	4631      	mov	r1, r6
 8014afe:	4628      	mov	r0, r5
 8014b00:	f7f5 f84c 	bl	8009b9c <ucdr_check_final_buffer_behavior_array>
 8014b04:	4604      	mov	r4, r0
 8014b06:	1bb8      	subs	r0, r7, r6
 8014b08:	4440      	add	r0, r8
 8014b0a:	4622      	mov	r2, r4
 8014b0c:	2c00      	cmp	r4, #0
 8014b0e:	d1ea      	bne.n	8014ae6 <ucdr_deserialize_array_uint8_t+0x16>
 8014b10:	2301      	movs	r3, #1
 8014b12:	7da8      	ldrb	r0, [r5, #22]
 8014b14:	756b      	strb	r3, [r5, #21]
 8014b16:	4058      	eors	r0, r3
 8014b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b1c:	463a      	mov	r2, r7
 8014b1e:	68a9      	ldr	r1, [r5, #8]
 8014b20:	4640      	mov	r0, r8
 8014b22:	f001 fe9c 	bl	801685e <memcpy>
 8014b26:	68aa      	ldr	r2, [r5, #8]
 8014b28:	692b      	ldr	r3, [r5, #16]
 8014b2a:	443a      	add	r2, r7
 8014b2c:	443b      	add	r3, r7
 8014b2e:	60aa      	str	r2, [r5, #8]
 8014b30:	612b      	str	r3, [r5, #16]
 8014b32:	e7ed      	b.n	8014b10 <ucdr_deserialize_array_uint8_t+0x40>

08014b34 <ucdr_deserialize_endian_array_uint8_t>:
 8014b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b38:	4619      	mov	r1, r3
 8014b3a:	461f      	mov	r7, r3
 8014b3c:	4605      	mov	r5, r0
 8014b3e:	4690      	mov	r8, r2
 8014b40:	f7f4 ffa4 	bl	8009a8c <ucdr_check_buffer_available_for>
 8014b44:	b9e0      	cbnz	r0, 8014b80 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8014b46:	463e      	mov	r6, r7
 8014b48:	e009      	b.n	8014b5e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8014b4a:	68a9      	ldr	r1, [r5, #8]
 8014b4c:	f001 fe87 	bl	801685e <memcpy>
 8014b50:	68ab      	ldr	r3, [r5, #8]
 8014b52:	6928      	ldr	r0, [r5, #16]
 8014b54:	4423      	add	r3, r4
 8014b56:	4420      	add	r0, r4
 8014b58:	1b36      	subs	r6, r6, r4
 8014b5a:	60ab      	str	r3, [r5, #8]
 8014b5c:	6128      	str	r0, [r5, #16]
 8014b5e:	2201      	movs	r2, #1
 8014b60:	4631      	mov	r1, r6
 8014b62:	4628      	mov	r0, r5
 8014b64:	f7f5 f81a 	bl	8009b9c <ucdr_check_final_buffer_behavior_array>
 8014b68:	4604      	mov	r4, r0
 8014b6a:	1bb8      	subs	r0, r7, r6
 8014b6c:	4440      	add	r0, r8
 8014b6e:	4622      	mov	r2, r4
 8014b70:	2c00      	cmp	r4, #0
 8014b72:	d1ea      	bne.n	8014b4a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8014b74:	2301      	movs	r3, #1
 8014b76:	7da8      	ldrb	r0, [r5, #22]
 8014b78:	756b      	strb	r3, [r5, #21]
 8014b7a:	4058      	eors	r0, r3
 8014b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b80:	463a      	mov	r2, r7
 8014b82:	68a9      	ldr	r1, [r5, #8]
 8014b84:	4640      	mov	r0, r8
 8014b86:	f001 fe6a 	bl	801685e <memcpy>
 8014b8a:	68aa      	ldr	r2, [r5, #8]
 8014b8c:	692b      	ldr	r3, [r5, #16]
 8014b8e:	443a      	add	r2, r7
 8014b90:	443b      	add	r3, r7
 8014b92:	60aa      	str	r2, [r5, #8]
 8014b94:	612b      	str	r3, [r5, #16]
 8014b96:	e7ed      	b.n	8014b74 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014b98 <ucdr_serialize_sequence_char>:
 8014b98:	b570      	push	{r4, r5, r6, lr}
 8014b9a:	4615      	mov	r5, r2
 8014b9c:	460e      	mov	r6, r1
 8014b9e:	7d01      	ldrb	r1, [r0, #20]
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	f7f4 f933 	bl	8008e0c <ucdr_serialize_endian_uint32_t>
 8014ba6:	b90d      	cbnz	r5, 8014bac <ucdr_serialize_sequence_char+0x14>
 8014ba8:	2001      	movs	r0, #1
 8014baa:	bd70      	pop	{r4, r5, r6, pc}
 8014bac:	7d21      	ldrb	r1, [r4, #20]
 8014bae:	462b      	mov	r3, r5
 8014bb0:	4632      	mov	r2, r6
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bb8:	f7ff bec2 	b.w	8014940 <ucdr_serialize_endian_array_char>

08014bbc <ucdr_deserialize_sequence_char>:
 8014bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc0:	461d      	mov	r5, r3
 8014bc2:	4616      	mov	r6, r2
 8014bc4:	460f      	mov	r7, r1
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	7d01      	ldrb	r1, [r0, #20]
 8014bca:	4604      	mov	r4, r0
 8014bcc:	f7f4 fa46 	bl	800905c <ucdr_deserialize_endian_uint32_t>
 8014bd0:	682b      	ldr	r3, [r5, #0]
 8014bd2:	429e      	cmp	r6, r3
 8014bd4:	bf3c      	itt	cc
 8014bd6:	2201      	movcc	r2, #1
 8014bd8:	75a2      	strbcc	r2, [r4, #22]
 8014bda:	b913      	cbnz	r3, 8014be2 <ucdr_deserialize_sequence_char+0x26>
 8014bdc:	2001      	movs	r0, #1
 8014bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014be2:	7d21      	ldrb	r1, [r4, #20]
 8014be4:	463a      	mov	r2, r7
 8014be6:	4620      	mov	r0, r4
 8014be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bec:	f7ff beda 	b.w	80149a4 <ucdr_deserialize_endian_array_char>

08014bf0 <ucdr_serialize_sequence_uint8_t>:
 8014bf0:	b570      	push	{r4, r5, r6, lr}
 8014bf2:	4615      	mov	r5, r2
 8014bf4:	460e      	mov	r6, r1
 8014bf6:	7d01      	ldrb	r1, [r0, #20]
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	f7f4 f907 	bl	8008e0c <ucdr_serialize_endian_uint32_t>
 8014bfe:	b90d      	cbnz	r5, 8014c04 <ucdr_serialize_sequence_uint8_t+0x14>
 8014c00:	2001      	movs	r0, #1
 8014c02:	bd70      	pop	{r4, r5, r6, pc}
 8014c04:	7d21      	ldrb	r1, [r4, #20]
 8014c06:	462b      	mov	r3, r5
 8014c08:	4632      	mov	r2, r6
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c10:	f7ff bf2c 	b.w	8014a6c <ucdr_serialize_endian_array_uint8_t>

08014c14 <ucdr_deserialize_sequence_uint8_t>:
 8014c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c18:	461d      	mov	r5, r3
 8014c1a:	4616      	mov	r6, r2
 8014c1c:	460f      	mov	r7, r1
 8014c1e:	461a      	mov	r2, r3
 8014c20:	7d01      	ldrb	r1, [r0, #20]
 8014c22:	4604      	mov	r4, r0
 8014c24:	f7f4 fa1a 	bl	800905c <ucdr_deserialize_endian_uint32_t>
 8014c28:	682b      	ldr	r3, [r5, #0]
 8014c2a:	429e      	cmp	r6, r3
 8014c2c:	bf3c      	itt	cc
 8014c2e:	2201      	movcc	r2, #1
 8014c30:	75a2      	strbcc	r2, [r4, #22]
 8014c32:	b913      	cbnz	r3, 8014c3a <ucdr_deserialize_sequence_uint8_t+0x26>
 8014c34:	2001      	movs	r0, #1
 8014c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c3a:	7d21      	ldrb	r1, [r4, #20]
 8014c3c:	463a      	mov	r2, r7
 8014c3e:	4620      	mov	r0, r4
 8014c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c44:	f7ff bf76 	b.w	8014b34 <ucdr_deserialize_endian_array_uint8_t>

08014c48 <ucdr_serialize_string>:
 8014c48:	b510      	push	{r4, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	4608      	mov	r0, r1
 8014c50:	9101      	str	r1, [sp, #4]
 8014c52:	f7eb faef 	bl	8000234 <strlen>
 8014c56:	9901      	ldr	r1, [sp, #4]
 8014c58:	1c42      	adds	r2, r0, #1
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	b002      	add	sp, #8
 8014c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c62:	f7ff bf99 	b.w	8014b98 <ucdr_serialize_sequence_char>
 8014c66:	bf00      	nop

08014c68 <ucdr_deserialize_string>:
 8014c68:	b500      	push	{lr}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	ab01      	add	r3, sp, #4
 8014c6e:	f7ff ffa5 	bl	8014bbc <ucdr_deserialize_sequence_char>
 8014c72:	b003      	add	sp, #12
 8014c74:	f85d fb04 	ldr.w	pc, [sp], #4

08014c78 <uxr_init_input_best_effort_stream>:
 8014c78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014c7c:	8003      	strh	r3, [r0, #0]
 8014c7e:	4770      	bx	lr

08014c80 <uxr_reset_input_best_effort_stream>:
 8014c80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014c84:	8003      	strh	r3, [r0, #0]
 8014c86:	4770      	bx	lr

08014c88 <uxr_receive_best_effort_message>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	8800      	ldrh	r0, [r0, #0]
 8014c8e:	460d      	mov	r5, r1
 8014c90:	f000 fd42 	bl	8015718 <uxr_seq_num_cmp>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014c9c:	bfb8      	it	lt
 8014c9e:	8025      	strhlt	r5, [r4, #0]
 8014ca0:	bd38      	pop	{r3, r4, r5, pc}
 8014ca2:	bf00      	nop

08014ca4 <on_full_input_buffer>:
 8014ca4:	b570      	push	{r4, r5, r6, lr}
 8014ca6:	4605      	mov	r5, r0
 8014ca8:	460c      	mov	r4, r1
 8014caa:	682b      	ldr	r3, [r5, #0]
 8014cac:	6809      	ldr	r1, [r1, #0]
 8014cae:	8920      	ldrh	r0, [r4, #8]
 8014cb0:	6862      	ldr	r2, [r4, #4]
 8014cb2:	fbb2 f2f0 	udiv	r2, r2, r0
 8014cb6:	eba3 0c01 	sub.w	ip, r3, r1
 8014cba:	fbbc fcf2 	udiv	ip, ip, r2
 8014cbe:	f10c 0c01 	add.w	ip, ip, #1
 8014cc2:	fa1f f38c 	uxth.w	r3, ip
 8014cc6:	fbb3 f6f0 	udiv	r6, r3, r0
 8014cca:	fb00 3316 	mls	r3, r0, r6, r3
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	fb02 f303 	mul.w	r3, r2, r3
 8014cd4:	1d18      	adds	r0, r3, #4
 8014cd6:	4408      	add	r0, r1
 8014cd8:	7d26      	ldrb	r6, [r4, #20]
 8014cda:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014cde:	b116      	cbz	r6, 8014ce6 <on_full_input_buffer+0x42>
 8014ce0:	2600      	movs	r6, #0
 8014ce2:	f840 6c04 	str.w	r6, [r0, #-4]
 8014ce6:	2a03      	cmp	r2, #3
 8014ce8:	d801      	bhi.n	8014cee <on_full_input_buffer+0x4a>
 8014cea:	2001      	movs	r0, #1
 8014cec:	bd70      	pop	{r4, r5, r6, pc}
 8014cee:	3308      	adds	r3, #8
 8014cf0:	4419      	add	r1, r3
 8014cf2:	4628      	mov	r0, r5
 8014cf4:	692b      	ldr	r3, [r5, #16]
 8014cf6:	3a04      	subs	r2, #4
 8014cf8:	f7f4 ff14 	bl	8009b24 <ucdr_init_buffer_origin>
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	4903      	ldr	r1, [pc, #12]	@ (8014d0c <on_full_input_buffer+0x68>)
 8014d00:	4622      	mov	r2, r4
 8014d02:	f7f4 feeb 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 8014d06:	2000      	movs	r0, #0
 8014d08:	bd70      	pop	{r4, r5, r6, pc}
 8014d0a:	bf00      	nop
 8014d0c:	08014ca5 	.word	0x08014ca5

08014d10 <uxr_init_input_reliable_stream>:
 8014d10:	b500      	push	{lr}
 8014d12:	e9c0 1200 	strd	r1, r2, [r0]
 8014d16:	f04f 0e00 	mov.w	lr, #0
 8014d1a:	9a01      	ldr	r2, [sp, #4]
 8014d1c:	8103      	strh	r3, [r0, #8]
 8014d1e:	6102      	str	r2, [r0, #16]
 8014d20:	f880 e014 	strb.w	lr, [r0, #20]
 8014d24:	b1d3      	cbz	r3, 8014d5c <uxr_init_input_reliable_stream+0x4c>
 8014d26:	f8c1 e000 	str.w	lr, [r1]
 8014d2a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014d2e:	f1bc 0f01 	cmp.w	ip, #1
 8014d32:	d913      	bls.n	8014d5c <uxr_init_input_reliable_stream+0x4c>
 8014d34:	2301      	movs	r3, #1
 8014d36:	fbb3 f1fc 	udiv	r1, r3, ip
 8014d3a:	fb0c 3111 	mls	r1, ip, r1, r3
 8014d3e:	b289      	uxth	r1, r1
 8014d40:	6842      	ldr	r2, [r0, #4]
 8014d42:	fbb2 f2fc 	udiv	r2, r2, ip
 8014d46:	fb01 f202 	mul.w	r2, r1, r2
 8014d4a:	6801      	ldr	r1, [r0, #0]
 8014d4c:	f841 e002 	str.w	lr, [r1, r2]
 8014d50:	3301      	adds	r3, #1
 8014d52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	459c      	cmp	ip, r3
 8014d5a:	d8ec      	bhi.n	8014d36 <uxr_init_input_reliable_stream+0x26>
 8014d5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014d60:	60c3      	str	r3, [r0, #12]
 8014d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d66:	bf00      	nop

08014d68 <uxr_reset_input_reliable_stream>:
 8014d68:	8901      	ldrh	r1, [r0, #8]
 8014d6a:	b1e9      	cbz	r1, 8014da8 <uxr_reset_input_reliable_stream+0x40>
 8014d6c:	f04f 0c00 	mov.w	ip, #0
 8014d70:	b500      	push	{lr}
 8014d72:	4663      	mov	r3, ip
 8014d74:	46e6      	mov	lr, ip
 8014d76:	fbb3 f2f1 	udiv	r2, r3, r1
 8014d7a:	fb01 3312 	mls	r3, r1, r2, r3
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	6842      	ldr	r2, [r0, #4]
 8014d82:	fbb2 f2f1 	udiv	r2, r2, r1
 8014d86:	fb02 f303 	mul.w	r3, r2, r3
 8014d8a:	6802      	ldr	r2, [r0, #0]
 8014d8c:	f842 e003 	str.w	lr, [r2, r3]
 8014d90:	f10c 0c01 	add.w	ip, ip, #1
 8014d94:	8901      	ldrh	r1, [r0, #8]
 8014d96:	fa1f f38c 	uxth.w	r3, ip
 8014d9a:	4299      	cmp	r1, r3
 8014d9c:	d8eb      	bhi.n	8014d76 <uxr_reset_input_reliable_stream+0xe>
 8014d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014da2:	60c3      	str	r3, [r0, #12]
 8014da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8014da8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014dac:	60c3      	str	r3, [r0, #12]
 8014dae:	4770      	bx	lr

08014db0 <uxr_receive_reliable_message>:
 8014db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014db4:	4604      	mov	r4, r0
 8014db6:	460d      	mov	r5, r1
 8014db8:	8901      	ldrh	r1, [r0, #8]
 8014dba:	8980      	ldrh	r0, [r0, #12]
 8014dbc:	4690      	mov	r8, r2
 8014dbe:	461f      	mov	r7, r3
 8014dc0:	f000 fca2 	bl	8015708 <uxr_seq_num_add>
 8014dc4:	4629      	mov	r1, r5
 8014dc6:	4606      	mov	r6, r0
 8014dc8:	89a0      	ldrh	r0, [r4, #12]
 8014dca:	f000 fca5 	bl	8015718 <uxr_seq_num_cmp>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	db0a      	blt.n	8014de8 <uxr_receive_reliable_message+0x38>
 8014dd2:	2600      	movs	r6, #0
 8014dd4:	89e0      	ldrh	r0, [r4, #14]
 8014dd6:	4629      	mov	r1, r5
 8014dd8:	f000 fc9e 	bl	8015718 <uxr_seq_num_cmp>
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	da00      	bge.n	8014de2 <uxr_receive_reliable_message+0x32>
 8014de0:	81e5      	strh	r5, [r4, #14]
 8014de2:	4630      	mov	r0, r6
 8014de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014de8:	4630      	mov	r0, r6
 8014dea:	4629      	mov	r1, r5
 8014dec:	f000 fc94 	bl	8015718 <uxr_seq_num_cmp>
 8014df0:	2800      	cmp	r0, #0
 8014df2:	dbee      	blt.n	8014dd2 <uxr_receive_reliable_message+0x22>
 8014df4:	6923      	ldr	r3, [r4, #16]
 8014df6:	4640      	mov	r0, r8
 8014df8:	4798      	blx	r3
 8014dfa:	2101      	movs	r1, #1
 8014dfc:	4681      	mov	r9, r0
 8014dfe:	89a0      	ldrh	r0, [r4, #12]
 8014e00:	f000 fc82 	bl	8015708 <uxr_seq_num_add>
 8014e04:	f1b9 0f00 	cmp.w	r9, #0
 8014e08:	d101      	bne.n	8014e0e <uxr_receive_reliable_message+0x5e>
 8014e0a:	4285      	cmp	r5, r0
 8014e0c:	d047      	beq.n	8014e9e <uxr_receive_reliable_message+0xee>
 8014e0e:	8922      	ldrh	r2, [r4, #8]
 8014e10:	fbb5 f0f2 	udiv	r0, r5, r2
 8014e14:	fb02 5010 	mls	r0, r2, r0, r5
 8014e18:	b280      	uxth	r0, r0
 8014e1a:	6863      	ldr	r3, [r4, #4]
 8014e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e20:	fb00 f303 	mul.w	r3, r0, r3
 8014e24:	6820      	ldr	r0, [r4, #0]
 8014e26:	3304      	adds	r3, #4
 8014e28:	4418      	add	r0, r3
 8014e2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d1cf      	bne.n	8014dd2 <uxr_receive_reliable_message+0x22>
 8014e32:	4641      	mov	r1, r8
 8014e34:	463a      	mov	r2, r7
 8014e36:	f001 fd12 	bl	801685e <memcpy>
 8014e3a:	8921      	ldrh	r1, [r4, #8]
 8014e3c:	fbb5 f2f1 	udiv	r2, r5, r1
 8014e40:	fb01 5212 	mls	r2, r1, r2, r5
 8014e44:	b292      	uxth	r2, r2
 8014e46:	6863      	ldr	r3, [r4, #4]
 8014e48:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e4c:	fb02 f303 	mul.w	r3, r2, r3
 8014e50:	6822      	ldr	r2, [r4, #0]
 8014e52:	50d7      	str	r7, [r2, r3]
 8014e54:	9a08      	ldr	r2, [sp, #32]
 8014e56:	2301      	movs	r3, #1
 8014e58:	7013      	strb	r3, [r2, #0]
 8014e5a:	f1b9 0f00 	cmp.w	r9, #0
 8014e5e:	d0b8      	beq.n	8014dd2 <uxr_receive_reliable_message+0x22>
 8014e60:	89a6      	ldrh	r6, [r4, #12]
 8014e62:	4630      	mov	r0, r6
 8014e64:	2101      	movs	r1, #1
 8014e66:	f000 fc4f 	bl	8015708 <uxr_seq_num_add>
 8014e6a:	8922      	ldrh	r2, [r4, #8]
 8014e6c:	6863      	ldr	r3, [r4, #4]
 8014e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014e72:	4606      	mov	r6, r0
 8014e74:	fbb0 f0f2 	udiv	r0, r0, r2
 8014e78:	fb02 6010 	mls	r0, r2, r0, r6
 8014e7c:	b280      	uxth	r0, r0
 8014e7e:	fb00 f303 	mul.w	r3, r0, r3
 8014e82:	6820      	ldr	r0, [r4, #0]
 8014e84:	3304      	adds	r3, #4
 8014e86:	4418      	add	r0, r3
 8014e88:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d0a0      	beq.n	8014dd2 <uxr_receive_reliable_message+0x22>
 8014e90:	6923      	ldr	r3, [r4, #16]
 8014e92:	4798      	blx	r3
 8014e94:	2802      	cmp	r0, #2
 8014e96:	d008      	beq.n	8014eaa <uxr_receive_reliable_message+0xfa>
 8014e98:	2801      	cmp	r0, #1
 8014e9a:	d0e2      	beq.n	8014e62 <uxr_receive_reliable_message+0xb2>
 8014e9c:	e799      	b.n	8014dd2 <uxr_receive_reliable_message+0x22>
 8014e9e:	9b08      	ldr	r3, [sp, #32]
 8014ea0:	81a5      	strh	r5, [r4, #12]
 8014ea2:	2601      	movs	r6, #1
 8014ea4:	f883 9000 	strb.w	r9, [r3]
 8014ea8:	e794      	b.n	8014dd4 <uxr_receive_reliable_message+0x24>
 8014eaa:	2601      	movs	r6, #1
 8014eac:	e792      	b.n	8014dd4 <uxr_receive_reliable_message+0x24>
 8014eae:	bf00      	nop

08014eb0 <uxr_next_input_reliable_buffer_available>:
 8014eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eb4:	4604      	mov	r4, r0
 8014eb6:	460f      	mov	r7, r1
 8014eb8:	8980      	ldrh	r0, [r0, #12]
 8014eba:	2101      	movs	r1, #1
 8014ebc:	4690      	mov	r8, r2
 8014ebe:	f000 fc23 	bl	8015708 <uxr_seq_num_add>
 8014ec2:	8922      	ldrh	r2, [r4, #8]
 8014ec4:	fbb0 f6f2 	udiv	r6, r0, r2
 8014ec8:	fb02 0616 	mls	r6, r2, r6, r0
 8014ecc:	b2b6      	uxth	r6, r6
 8014ece:	6863      	ldr	r3, [r4, #4]
 8014ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ed4:	fb06 f303 	mul.w	r3, r6, r3
 8014ed8:	6826      	ldr	r6, [r4, #0]
 8014eda:	3304      	adds	r3, #4
 8014edc:	441e      	add	r6, r3
 8014ede:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8014ee2:	f1b9 0f00 	cmp.w	r9, #0
 8014ee6:	d023      	beq.n	8014f30 <uxr_next_input_reliable_buffer_available+0x80>
 8014ee8:	6923      	ldr	r3, [r4, #16]
 8014eea:	4605      	mov	r5, r0
 8014eec:	4630      	mov	r0, r6
 8014eee:	4798      	blx	r3
 8014ef0:	4682      	mov	sl, r0
 8014ef2:	b300      	cbz	r0, 8014f36 <uxr_next_input_reliable_buffer_available+0x86>
 8014ef4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8014ef8:	2101      	movs	r1, #1
 8014efa:	4650      	mov	r0, sl
 8014efc:	f000 fc04 	bl	8015708 <uxr_seq_num_add>
 8014f00:	8921      	ldrh	r1, [r4, #8]
 8014f02:	fbb0 f2f1 	udiv	r2, r0, r1
 8014f06:	4682      	mov	sl, r0
 8014f08:	fb01 0212 	mls	r2, r1, r2, r0
 8014f0c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8014f10:	b292      	uxth	r2, r2
 8014f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f16:	fb02 f303 	mul.w	r3, r2, r3
 8014f1a:	3304      	adds	r3, #4
 8014f1c:	4418      	add	r0, r3
 8014f1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014f22:	b12b      	cbz	r3, 8014f30 <uxr_next_input_reliable_buffer_available+0x80>
 8014f24:	6923      	ldr	r3, [r4, #16]
 8014f26:	4798      	blx	r3
 8014f28:	2802      	cmp	r0, #2
 8014f2a:	d01b      	beq.n	8014f64 <uxr_next_input_reliable_buffer_available+0xb4>
 8014f2c:	2801      	cmp	r0, #1
 8014f2e:	d0e3      	beq.n	8014ef8 <uxr_next_input_reliable_buffer_available+0x48>
 8014f30:	2000      	movs	r0, #0
 8014f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f36:	464a      	mov	r2, r9
 8014f38:	4631      	mov	r1, r6
 8014f3a:	4638      	mov	r0, r7
 8014f3c:	f7f4 fdfa 	bl	8009b34 <ucdr_init_buffer>
 8014f40:	8921      	ldrh	r1, [r4, #8]
 8014f42:	fbb5 f2f1 	udiv	r2, r5, r1
 8014f46:	fb01 5212 	mls	r2, r1, r2, r5
 8014f4a:	b292      	uxth	r2, r2
 8014f4c:	6863      	ldr	r3, [r4, #4]
 8014f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f52:	fb02 f303 	mul.w	r3, r2, r3
 8014f56:	6822      	ldr	r2, [r4, #0]
 8014f58:	f842 a003 	str.w	sl, [r2, r3]
 8014f5c:	2001      	movs	r0, #1
 8014f5e:	81a5      	strh	r5, [r4, #12]
 8014f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f64:	8920      	ldrh	r0, [r4, #8]
 8014f66:	fbb5 f3f0 	udiv	r3, r5, r0
 8014f6a:	fb00 5513 	mls	r5, r0, r3, r5
 8014f6e:	b2ad      	uxth	r5, r5
 8014f70:	6863      	ldr	r3, [r4, #4]
 8014f72:	fbb3 f3f0 	udiv	r3, r3, r0
 8014f76:	fb03 f505 	mul.w	r5, r3, r5
 8014f7a:	6823      	ldr	r3, [r4, #0]
 8014f7c:	2000      	movs	r0, #0
 8014f7e:	5158      	str	r0, [r3, r5]
 8014f80:	eb06 0108 	add.w	r1, r6, r8
 8014f84:	eba9 0208 	sub.w	r2, r9, r8
 8014f88:	4638      	mov	r0, r7
 8014f8a:	f7f4 fdd3 	bl	8009b34 <ucdr_init_buffer>
 8014f8e:	4638      	mov	r0, r7
 8014f90:	4903      	ldr	r1, [pc, #12]	@ (8014fa0 <uxr_next_input_reliable_buffer_available+0xf0>)
 8014f92:	4622      	mov	r2, r4
 8014f94:	f7f4 fda2 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 8014f98:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014f9c:	2001      	movs	r0, #1
 8014f9e:	e7c8      	b.n	8014f32 <uxr_next_input_reliable_buffer_available+0x82>
 8014fa0:	08014ca5 	.word	0x08014ca5

08014fa4 <uxr_process_heartbeat>:
 8014fa4:	b538      	push	{r3, r4, r5, lr}
 8014fa6:	4611      	mov	r1, r2
 8014fa8:	4604      	mov	r4, r0
 8014faa:	89c0      	ldrh	r0, [r0, #14]
 8014fac:	4615      	mov	r5, r2
 8014fae:	f000 fbb3 	bl	8015718 <uxr_seq_num_cmp>
 8014fb2:	2800      	cmp	r0, #0
 8014fb4:	bfb8      	it	lt
 8014fb6:	81e5      	strhlt	r5, [r4, #14]
 8014fb8:	bd38      	pop	{r3, r4, r5, pc}
 8014fba:	bf00      	nop

08014fbc <uxr_compute_acknack>:
 8014fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fc0:	8903      	ldrh	r3, [r0, #8]
 8014fc2:	8985      	ldrh	r5, [r0, #12]
 8014fc4:	4604      	mov	r4, r0
 8014fc6:	460e      	mov	r6, r1
 8014fc8:	b1d3      	cbz	r3, 8015000 <uxr_compute_acknack+0x44>
 8014fca:	4628      	mov	r0, r5
 8014fcc:	2701      	movs	r7, #1
 8014fce:	e003      	b.n	8014fd8 <uxr_compute_acknack+0x1c>
 8014fd0:	4567      	cmp	r7, ip
 8014fd2:	d215      	bcs.n	8015000 <uxr_compute_acknack+0x44>
 8014fd4:	89a0      	ldrh	r0, [r4, #12]
 8014fd6:	3701      	adds	r7, #1
 8014fd8:	b2b9      	uxth	r1, r7
 8014fda:	f000 fb95 	bl	8015708 <uxr_seq_num_add>
 8014fde:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014fe2:	fbb0 f3fc 	udiv	r3, r0, ip
 8014fe6:	fb0c 0313 	mls	r3, ip, r3, r0
 8014fea:	b29a      	uxth	r2, r3
 8014fec:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014ff0:	fbb3 f3fc 	udiv	r3, r3, ip
 8014ff4:	fb02 f303 	mul.w	r3, r2, r3
 8014ff8:	58cb      	ldr	r3, [r1, r3]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d1e8      	bne.n	8014fd0 <uxr_compute_acknack+0x14>
 8014ffe:	4605      	mov	r5, r0
 8015000:	8035      	strh	r5, [r6, #0]
 8015002:	2101      	movs	r1, #1
 8015004:	4628      	mov	r0, r5
 8015006:	89e7      	ldrh	r7, [r4, #14]
 8015008:	f000 fb82 	bl	8015710 <uxr_seq_num_sub>
 801500c:	4601      	mov	r1, r0
 801500e:	4638      	mov	r0, r7
 8015010:	f000 fb7e 	bl	8015710 <uxr_seq_num_sub>
 8015014:	4605      	mov	r5, r0
 8015016:	b318      	cbz	r0, 8015060 <uxr_compute_acknack+0xa4>
 8015018:	f04f 0900 	mov.w	r9, #0
 801501c:	464f      	mov	r7, r9
 801501e:	f04f 0801 	mov.w	r8, #1
 8015022:	fa1f f189 	uxth.w	r1, r9
 8015026:	8830      	ldrh	r0, [r6, #0]
 8015028:	f000 fb6e 	bl	8015708 <uxr_seq_num_add>
 801502c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015030:	fbb0 f3fc 	udiv	r3, r0, ip
 8015034:	e9d4 1200 	ldrd	r1, r2, [r4]
 8015038:	fb03 001c 	mls	r0, r3, ip, r0
 801503c:	b283      	uxth	r3, r0
 801503e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015042:	fb02 f303 	mul.w	r3, r2, r3
 8015046:	fa08 f209 	lsl.w	r2, r8, r9
 801504a:	58cb      	ldr	r3, [r1, r3]
 801504c:	f109 0901 	add.w	r9, r9, #1
 8015050:	b90b      	cbnz	r3, 8015056 <uxr_compute_acknack+0x9a>
 8015052:	4317      	orrs	r7, r2
 8015054:	b2bf      	uxth	r7, r7
 8015056:	454d      	cmp	r5, r9
 8015058:	d1e3      	bne.n	8015022 <uxr_compute_acknack+0x66>
 801505a:	4638      	mov	r0, r7
 801505c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015060:	4607      	mov	r7, r0
 8015062:	4638      	mov	r0, r7
 8015064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015068 <uxr_init_output_best_effort_stream>:
 8015068:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801506c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015070:	6001      	str	r1, [r0, #0]
 8015072:	7303      	strb	r3, [r0, #12]
 8015074:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015078:	4770      	bx	lr
 801507a:	bf00      	nop

0801507c <uxr_reset_output_best_effort_stream>:
 801507c:	7b02      	ldrb	r2, [r0, #12]
 801507e:	6042      	str	r2, [r0, #4]
 8015080:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015084:	81c3      	strh	r3, [r0, #14]
 8015086:	4770      	bx	lr

08015088 <uxr_prepare_best_effort_buffer_to_write>:
 8015088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801508a:	4604      	mov	r4, r0
 801508c:	b083      	sub	sp, #12
 801508e:	6840      	ldr	r0, [r0, #4]
 8015090:	460d      	mov	r5, r1
 8015092:	4616      	mov	r6, r2
 8015094:	f7fa f826 	bl	800f0e4 <uxr_submessage_padding>
 8015098:	6863      	ldr	r3, [r4, #4]
 801509a:	4418      	add	r0, r3
 801509c:	68a3      	ldr	r3, [r4, #8]
 801509e:	1942      	adds	r2, r0, r5
 80150a0:	4293      	cmp	r3, r2
 80150a2:	bf2c      	ite	cs
 80150a4:	2701      	movcs	r7, #1
 80150a6:	2700      	movcc	r7, #0
 80150a8:	d202      	bcs.n	80150b0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80150aa:	4638      	mov	r0, r7
 80150ac:	b003      	add	sp, #12
 80150ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150b0:	9000      	str	r0, [sp, #0]
 80150b2:	6821      	ldr	r1, [r4, #0]
 80150b4:	4630      	mov	r0, r6
 80150b6:	2300      	movs	r3, #0
 80150b8:	f7f4 fd2a 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 80150bc:	6861      	ldr	r1, [r4, #4]
 80150be:	4638      	mov	r0, r7
 80150c0:	4429      	add	r1, r5
 80150c2:	6061      	str	r1, [r4, #4]
 80150c4:	b003      	add	sp, #12
 80150c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080150c8 <uxr_prepare_best_effort_buffer_to_send>:
 80150c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150cc:	4604      	mov	r4, r0
 80150ce:	461d      	mov	r5, r3
 80150d0:	6840      	ldr	r0, [r0, #4]
 80150d2:	7b23      	ldrb	r3, [r4, #12]
 80150d4:	4298      	cmp	r0, r3
 80150d6:	bf8c      	ite	hi
 80150d8:	2601      	movhi	r6, #1
 80150da:	2600      	movls	r6, #0
 80150dc:	d802      	bhi.n	80150e4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80150de:	4630      	mov	r0, r6
 80150e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150e4:	4688      	mov	r8, r1
 80150e6:	89e0      	ldrh	r0, [r4, #14]
 80150e8:	2101      	movs	r1, #1
 80150ea:	4617      	mov	r7, r2
 80150ec:	f000 fb0c 	bl	8015708 <uxr_seq_num_add>
 80150f0:	6823      	ldr	r3, [r4, #0]
 80150f2:	81e0      	strh	r0, [r4, #14]
 80150f4:	8028      	strh	r0, [r5, #0]
 80150f6:	f8c8 3000 	str.w	r3, [r8]
 80150fa:	6863      	ldr	r3, [r4, #4]
 80150fc:	603b      	str	r3, [r7, #0]
 80150fe:	7b23      	ldrb	r3, [r4, #12]
 8015100:	6063      	str	r3, [r4, #4]
 8015102:	4630      	mov	r0, r6
 8015104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015108 <on_full_output_buffer>:
 8015108:	b538      	push	{r3, r4, r5, lr}
 801510a:	6802      	ldr	r2, [r0, #0]
 801510c:	460c      	mov	r4, r1
 801510e:	6809      	ldr	r1, [r1, #0]
 8015110:	8923      	ldrh	r3, [r4, #8]
 8015112:	eba2 0c01 	sub.w	ip, r2, r1
 8015116:	6862      	ldr	r2, [r4, #4]
 8015118:	fbb2 f2f3 	udiv	r2, r2, r3
 801511c:	fbbc fcf2 	udiv	ip, ip, r2
 8015120:	f10c 0c01 	add.w	ip, ip, #1
 8015124:	fa1f fc8c 	uxth.w	ip, ip
 8015128:	fbbc fef3 	udiv	lr, ip, r3
 801512c:	fb03 c31e 	mls	r3, r3, lr, ip
 8015130:	b29b      	uxth	r3, r3
 8015132:	fb02 f303 	mul.w	r3, r2, r3
 8015136:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801513a:	58ca      	ldr	r2, [r1, r3]
 801513c:	4463      	add	r3, ip
 801513e:	eba2 020c 	sub.w	r2, r2, ip
 8015142:	3308      	adds	r3, #8
 8015144:	4605      	mov	r5, r0
 8015146:	4419      	add	r1, r3
 8015148:	3a04      	subs	r2, #4
 801514a:	6903      	ldr	r3, [r0, #16]
 801514c:	f7f4 fcea 	bl	8009b24 <ucdr_init_buffer_origin>
 8015150:	4628      	mov	r0, r5
 8015152:	4903      	ldr	r1, [pc, #12]	@ (8015160 <on_full_output_buffer+0x58>)
 8015154:	4622      	mov	r2, r4
 8015156:	f7f4 fcc1 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 801515a:	2000      	movs	r0, #0
 801515c:	bd38      	pop	{r3, r4, r5, pc}
 801515e:	bf00      	nop
 8015160:	08015109 	.word	0x08015109

08015164 <uxr_init_output_reliable_stream>:
 8015164:	b410      	push	{r4}
 8015166:	f89d c004 	ldrb.w	ip, [sp, #4]
 801516a:	8103      	strh	r3, [r0, #8]
 801516c:	e9c0 1200 	strd	r1, r2, [r0]
 8015170:	f880 c00c 	strb.w	ip, [r0, #12]
 8015174:	b1d3      	cbz	r3, 80151ac <uxr_init_output_reliable_stream+0x48>
 8015176:	f8c1 c000 	str.w	ip, [r1]
 801517a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801517e:	f1bc 0f01 	cmp.w	ip, #1
 8015182:	d913      	bls.n	80151ac <uxr_init_output_reliable_stream+0x48>
 8015184:	2301      	movs	r3, #1
 8015186:	fbb3 f1fc 	udiv	r1, r3, ip
 801518a:	fb0c 3111 	mls	r1, ip, r1, r3
 801518e:	b289      	uxth	r1, r1
 8015190:	6842      	ldr	r2, [r0, #4]
 8015192:	6804      	ldr	r4, [r0, #0]
 8015194:	fbb2 f2fc 	udiv	r2, r2, ip
 8015198:	fb01 f202 	mul.w	r2, r1, r2
 801519c:	7b01      	ldrb	r1, [r0, #12]
 801519e:	50a1      	str	r1, [r4, r2]
 80151a0:	3301      	adds	r3, #1
 80151a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80151a6:	b29b      	uxth	r3, r3
 80151a8:	459c      	cmp	ip, r3
 80151aa:	d8ec      	bhi.n	8015186 <uxr_init_output_reliable_stream+0x22>
 80151ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80151b0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80151b4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80151b8:	4905      	ldr	r1, [pc, #20]	@ (80151d0 <uxr_init_output_reliable_stream+0x6c>)
 80151ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151be:	f8c0 100e 	str.w	r1, [r0, #14]
 80151c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80151c6:	2300      	movs	r3, #0
 80151c8:	8242      	strh	r2, [r0, #18]
 80151ca:	8403      	strh	r3, [r0, #32]
 80151cc:	4770      	bx	lr
 80151ce:	bf00      	nop
 80151d0:	ffff0000 	.word	0xffff0000

080151d4 <uxr_reset_output_reliable_stream>:
 80151d4:	8901      	ldrh	r1, [r0, #8]
 80151d6:	b1b1      	cbz	r1, 8015206 <uxr_reset_output_reliable_stream+0x32>
 80151d8:	f04f 0c00 	mov.w	ip, #0
 80151dc:	4663      	mov	r3, ip
 80151de:	fbb3 f2f1 	udiv	r2, r3, r1
 80151e2:	fb01 3312 	mls	r3, r1, r2, r3
 80151e6:	b29b      	uxth	r3, r3
 80151e8:	6842      	ldr	r2, [r0, #4]
 80151ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80151ee:	6801      	ldr	r1, [r0, #0]
 80151f0:	fb02 f303 	mul.w	r3, r2, r3
 80151f4:	7b02      	ldrb	r2, [r0, #12]
 80151f6:	50ca      	str	r2, [r1, r3]
 80151f8:	f10c 0c01 	add.w	ip, ip, #1
 80151fc:	8901      	ldrh	r1, [r0, #8]
 80151fe:	fa1f f38c 	uxth.w	r3, ip
 8015202:	4299      	cmp	r1, r3
 8015204:	d8eb      	bhi.n	80151de <uxr_reset_output_reliable_stream+0xa>
 8015206:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801520a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801520e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015212:	4904      	ldr	r1, [pc, #16]	@ (8015224 <uxr_reset_output_reliable_stream+0x50>)
 8015214:	f8c0 100e 	str.w	r1, [r0, #14]
 8015218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801521c:	2300      	movs	r3, #0
 801521e:	8242      	strh	r2, [r0, #18]
 8015220:	8403      	strh	r3, [r0, #32]
 8015222:	4770      	bx	lr
 8015224:	ffff0000 	.word	0xffff0000

08015228 <uxr_prepare_reliable_buffer_to_write>:
 8015228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522c:	4604      	mov	r4, r0
 801522e:	b091      	sub	sp, #68	@ 0x44
 8015230:	8900      	ldrh	r0, [r0, #8]
 8015232:	89e6      	ldrh	r6, [r4, #14]
 8015234:	6823      	ldr	r3, [r4, #0]
 8015236:	9204      	str	r2, [sp, #16]
 8015238:	fbb6 f2f0 	udiv	r2, r6, r0
 801523c:	fb00 6212 	mls	r2, r0, r2, r6
 8015240:	b292      	uxth	r2, r2
 8015242:	6865      	ldr	r5, [r4, #4]
 8015244:	fbb5 f5f0 	udiv	r5, r5, r0
 8015248:	fb05 3202 	mla	r2, r5, r2, r3
 801524c:	3204      	adds	r2, #4
 801524e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8015252:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015256:	9203      	str	r2, [sp, #12]
 8015258:	468b      	mov	fp, r1
 801525a:	1f2f      	subs	r7, r5, #4
 801525c:	2800      	cmp	r0, #0
 801525e:	f000 814c 	beq.w	80154fa <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015262:	f04f 0c00 	mov.w	ip, #0
 8015266:	46e2      	mov	sl, ip
 8015268:	4661      	mov	r1, ip
 801526a:	fbb1 f2f0 	udiv	r2, r1, r0
 801526e:	fb00 1212 	mls	r2, r0, r2, r1
 8015272:	b292      	uxth	r2, r2
 8015274:	fb05 f202 	mul.w	r2, r5, r2
 8015278:	f10c 0c01 	add.w	ip, ip, #1
 801527c:	589a      	ldr	r2, [r3, r2]
 801527e:	454a      	cmp	r2, r9
 8015280:	bf08      	it	eq
 8015282:	f10a 0a01 	addeq.w	sl, sl, #1
 8015286:	fa1f f18c 	uxth.w	r1, ip
 801528a:	bf08      	it	eq
 801528c:	fa1f fa8a 	uxtheq.w	sl, sl
 8015290:	4281      	cmp	r1, r0
 8015292:	d3ea      	bcc.n	801526a <uxr_prepare_reliable_buffer_to_write+0x42>
 8015294:	4640      	mov	r0, r8
 8015296:	2104      	movs	r1, #4
 8015298:	f8cd a014 	str.w	sl, [sp, #20]
 801529c:	f7f4 fc4e 	bl	8009b3c <ucdr_alignment>
 80152a0:	4480      	add	r8, r0
 80152a2:	eb08 020b 	add.w	r2, r8, fp
 80152a6:	42ba      	cmp	r2, r7
 80152a8:	f240 80cd 	bls.w	8015446 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80152ac:	7b22      	ldrb	r2, [r4, #12]
 80152ae:	445a      	add	r2, fp
 80152b0:	42ba      	cmp	r2, r7
 80152b2:	f240 80b5 	bls.w	8015420 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80152b6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80152ba:	33fc      	adds	r3, #252	@ 0xfc
 80152bc:	b2ba      	uxth	r2, r7
 80152be:	4413      	add	r3, r2
 80152c0:	b29b      	uxth	r3, r3
 80152c2:	fb0a f903 	mul.w	r9, sl, r3
 80152c6:	45d9      	cmp	r9, fp
 80152c8:	9305      	str	r3, [sp, #20]
 80152ca:	9306      	str	r3, [sp, #24]
 80152cc:	f0c0 80b7 	bcc.w	801543e <uxr_prepare_reliable_buffer_to_write+0x216>
 80152d0:	f108 0304 	add.w	r3, r8, #4
 80152d4:	42bb      	cmp	r3, r7
 80152d6:	f080 80db 	bcs.w	8015490 <uxr_prepare_reliable_buffer_to_write+0x268>
 80152da:	f1a2 0904 	sub.w	r9, r2, #4
 80152de:	eba9 0908 	sub.w	r9, r9, r8
 80152e2:	9b05      	ldr	r3, [sp, #20]
 80152e4:	fa1f f989 	uxth.w	r9, r9
 80152e8:	ebab 0b09 	sub.w	fp, fp, r9
 80152ec:	fbbb f2f3 	udiv	r2, fp, r3
 80152f0:	fb03 b312 	mls	r3, r3, r2, fp
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f000 80c8 	beq.w	801548a <uxr_prepare_reliable_buffer_to_write+0x262>
 80152fa:	3201      	adds	r2, #1
 80152fc:	b292      	uxth	r2, r2
 80152fe:	9306      	str	r3, [sp, #24]
 8015300:	4552      	cmp	r2, sl
 8015302:	f200 809c 	bhi.w	801543e <uxr_prepare_reliable_buffer_to_write+0x216>
 8015306:	f10d 0b20 	add.w	fp, sp, #32
 801530a:	2a00      	cmp	r2, #0
 801530c:	d042      	beq.n	8015394 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801530e:	f8cd 801c 	str.w	r8, [sp, #28]
 8015312:	f04f 0a00 	mov.w	sl, #0
 8015316:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801531a:	9505      	str	r5, [sp, #20]
 801531c:	f10d 0b20 	add.w	fp, sp, #32
 8015320:	4615      	mov	r5, r2
 8015322:	e000      	b.n	8015326 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015324:	46c1      	mov	r9, r8
 8015326:	8920      	ldrh	r0, [r4, #8]
 8015328:	fbb6 f2f0 	udiv	r2, r6, r0
 801532c:	fb00 6112 	mls	r1, r0, r2, r6
 8015330:	b28a      	uxth	r2, r1
 8015332:	6863      	ldr	r3, [r4, #4]
 8015334:	fbb3 f1f0 	udiv	r1, r3, r0
 8015338:	6823      	ldr	r3, [r4, #0]
 801533a:	fb02 f101 	mul.w	r1, r2, r1
 801533e:	3104      	adds	r1, #4
 8015340:	4419      	add	r1, r3
 8015342:	4658      	mov	r0, fp
 8015344:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015348:	9200      	str	r2, [sp, #0]
 801534a:	2300      	movs	r3, #0
 801534c:	463a      	mov	r2, r7
 801534e:	f7f4 fbdf 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 8015352:	464a      	mov	r2, r9
 8015354:	2300      	movs	r3, #0
 8015356:	210d      	movs	r1, #13
 8015358:	4658      	mov	r0, fp
 801535a:	f7f9 fe83 	bl	800f064 <uxr_buffer_submessage_header>
 801535e:	8921      	ldrh	r1, [r4, #8]
 8015360:	fbb6 f2f1 	udiv	r2, r6, r1
 8015364:	fb01 6212 	mls	r2, r1, r2, r6
 8015368:	b292      	uxth	r2, r2
 801536a:	6863      	ldr	r3, [r4, #4]
 801536c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015370:	fb02 f303 	mul.w	r3, r2, r3
 8015374:	6822      	ldr	r2, [r4, #0]
 8015376:	4630      	mov	r0, r6
 8015378:	50d7      	str	r7, [r2, r3]
 801537a:	2101      	movs	r1, #1
 801537c:	f000 f9c4 	bl	8015708 <uxr_seq_num_add>
 8015380:	f10a 0a01 	add.w	sl, sl, #1
 8015384:	fa1f f38a 	uxth.w	r3, sl
 8015388:	429d      	cmp	r5, r3
 801538a:	4606      	mov	r6, r0
 801538c:	d8ca      	bhi.n	8015324 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801538e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015392:	9d05      	ldr	r5, [sp, #20]
 8015394:	8920      	ldrh	r0, [r4, #8]
 8015396:	fbb6 f3f0 	udiv	r3, r6, r0
 801539a:	fb00 6313 	mls	r3, r0, r3, r6
 801539e:	b299      	uxth	r1, r3
 80153a0:	6863      	ldr	r3, [r4, #4]
 80153a2:	fbb3 f3f0 	udiv	r3, r3, r0
 80153a6:	fb01 f303 	mul.w	r3, r1, r3
 80153aa:	6821      	ldr	r1, [r4, #0]
 80153ac:	3304      	adds	r3, #4
 80153ae:	4419      	add	r1, r3
 80153b0:	463a      	mov	r2, r7
 80153b2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80153b6:	9000      	str	r0, [sp, #0]
 80153b8:	2300      	movs	r3, #0
 80153ba:	4658      	mov	r0, fp
 80153bc:	f7f4 fba8 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 80153c0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80153c4:	4658      	mov	r0, fp
 80153c6:	fa1f f289 	uxth.w	r2, r9
 80153ca:	2302      	movs	r3, #2
 80153cc:	210d      	movs	r1, #13
 80153ce:	f7f9 fe49 	bl	800f064 <uxr_buffer_submessage_header>
 80153d2:	9b03      	ldr	r3, [sp, #12]
 80153d4:	8927      	ldrh	r7, [r4, #8]
 80153d6:	7b20      	ldrb	r0, [r4, #12]
 80153d8:	f108 0104 	add.w	r1, r8, #4
 80153dc:	440b      	add	r3, r1
 80153de:	4619      	mov	r1, r3
 80153e0:	fbb6 f3f7 	udiv	r3, r6, r7
 80153e4:	fb07 6313 	mls	r3, r7, r3, r6
 80153e8:	f1a5 0208 	sub.w	r2, r5, #8
 80153ec:	b29d      	uxth	r5, r3
 80153ee:	3004      	adds	r0, #4
 80153f0:	6863      	ldr	r3, [r4, #4]
 80153f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80153f6:	fb05 f303 	mul.w	r3, r5, r3
 80153fa:	6825      	ldr	r5, [r4, #0]
 80153fc:	4448      	add	r0, r9
 80153fe:	50e8      	str	r0, [r5, r3]
 8015400:	9d04      	ldr	r5, [sp, #16]
 8015402:	eba2 0208 	sub.w	r2, r2, r8
 8015406:	4628      	mov	r0, r5
 8015408:	f7f4 fb94 	bl	8009b34 <ucdr_init_buffer>
 801540c:	4628      	mov	r0, r5
 801540e:	493c      	ldr	r1, [pc, #240]	@ (8015500 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015410:	4622      	mov	r2, r4
 8015412:	f7f4 fb63 	bl	8009adc <ucdr_set_on_full_buffer_callback>
 8015416:	2001      	movs	r0, #1
 8015418:	81e6      	strh	r6, [r4, #14]
 801541a:	b011      	add	sp, #68	@ 0x44
 801541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015420:	2101      	movs	r1, #1
 8015422:	89e0      	ldrh	r0, [r4, #14]
 8015424:	f000 f970 	bl	8015708 <uxr_seq_num_add>
 8015428:	8921      	ldrh	r1, [r4, #8]
 801542a:	4605      	mov	r5, r0
 801542c:	8a60      	ldrh	r0, [r4, #18]
 801542e:	f000 f96b 	bl	8015708 <uxr_seq_num_add>
 8015432:	4601      	mov	r1, r0
 8015434:	4628      	mov	r0, r5
 8015436:	f000 f96f 	bl	8015718 <uxr_seq_num_cmp>
 801543a:	2800      	cmp	r0, #0
 801543c:	dd42      	ble.n	80154c4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801543e:	2000      	movs	r0, #0
 8015440:	b011      	add	sp, #68	@ 0x44
 8015442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015446:	8921      	ldrh	r1, [r4, #8]
 8015448:	8a60      	ldrh	r0, [r4, #18]
 801544a:	9205      	str	r2, [sp, #20]
 801544c:	f000 f95c 	bl	8015708 <uxr_seq_num_add>
 8015450:	4601      	mov	r1, r0
 8015452:	4630      	mov	r0, r6
 8015454:	f000 f960 	bl	8015718 <uxr_seq_num_cmp>
 8015458:	2800      	cmp	r0, #0
 801545a:	9a05      	ldr	r2, [sp, #20]
 801545c:	dcef      	bgt.n	801543e <uxr_prepare_reliable_buffer_to_write+0x216>
 801545e:	8927      	ldrh	r7, [r4, #8]
 8015460:	fbb6 f3f7 	udiv	r3, r6, r7
 8015464:	fb07 6313 	mls	r3, r7, r3, r6
 8015468:	b29d      	uxth	r5, r3
 801546a:	6863      	ldr	r3, [r4, #4]
 801546c:	6824      	ldr	r4, [r4, #0]
 801546e:	fbb3 f3f7 	udiv	r3, r3, r7
 8015472:	fb05 f303 	mul.w	r3, r5, r3
 8015476:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801547a:	50e2      	str	r2, [r4, r3]
 801547c:	2300      	movs	r3, #0
 801547e:	f8cd 8000 	str.w	r8, [sp]
 8015482:	f7f4 fb45 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 8015486:	2001      	movs	r0, #1
 8015488:	e7da      	b.n	8015440 <uxr_prepare_reliable_buffer_to_write+0x218>
 801548a:	b293      	uxth	r3, r2
 801548c:	461a      	mov	r2, r3
 801548e:	e737      	b.n	8015300 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015490:	4630      	mov	r0, r6
 8015492:	2101      	movs	r1, #1
 8015494:	9207      	str	r2, [sp, #28]
 8015496:	f000 f937 	bl	8015708 <uxr_seq_num_add>
 801549a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801549e:	fbb0 f1fc 	udiv	r1, r0, ip
 80154a2:	fb0c 0111 	mls	r1, ip, r1, r0
 80154a6:	4606      	mov	r6, r0
 80154a8:	b288      	uxth	r0, r1
 80154aa:	6863      	ldr	r3, [r4, #4]
 80154ac:	fbb3 f1fc 	udiv	r1, r3, ip
 80154b0:	6823      	ldr	r3, [r4, #0]
 80154b2:	9a07      	ldr	r2, [sp, #28]
 80154b4:	fb00 f101 	mul.w	r1, r0, r1
 80154b8:	3104      	adds	r1, #4
 80154ba:	440b      	add	r3, r1
 80154bc:	9303      	str	r3, [sp, #12]
 80154be:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80154c2:	e70a      	b.n	80152da <uxr_prepare_reliable_buffer_to_write+0xb2>
 80154c4:	8921      	ldrh	r1, [r4, #8]
 80154c6:	fbb5 f3f1 	udiv	r3, r5, r1
 80154ca:	fb01 5313 	mls	r3, r1, r3, r5
 80154ce:	b29a      	uxth	r2, r3
 80154d0:	6863      	ldr	r3, [r4, #4]
 80154d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80154d6:	6821      	ldr	r1, [r4, #0]
 80154d8:	9804      	ldr	r0, [sp, #16]
 80154da:	fb02 f303 	mul.w	r3, r2, r3
 80154de:	3304      	adds	r3, #4
 80154e0:	7b22      	ldrb	r2, [r4, #12]
 80154e2:	4419      	add	r1, r3
 80154e4:	445a      	add	r2, fp
 80154e6:	f841 2c04 	str.w	r2, [r1, #-4]
 80154ea:	7b23      	ldrb	r3, [r4, #12]
 80154ec:	9300      	str	r3, [sp, #0]
 80154ee:	2300      	movs	r3, #0
 80154f0:	f7f4 fb0e 	bl	8009b10 <ucdr_init_buffer_origin_offset>
 80154f4:	81e5      	strh	r5, [r4, #14]
 80154f6:	2001      	movs	r0, #1
 80154f8:	e7a2      	b.n	8015440 <uxr_prepare_reliable_buffer_to_write+0x218>
 80154fa:	4682      	mov	sl, r0
 80154fc:	e6ca      	b.n	8015294 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80154fe:	bf00      	nop
 8015500:	08015109 	.word	0x08015109

08015504 <uxr_prepare_next_reliable_buffer_to_send>:
 8015504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015506:	4604      	mov	r4, r0
 8015508:	460f      	mov	r7, r1
 801550a:	8a00      	ldrh	r0, [r0, #16]
 801550c:	2101      	movs	r1, #1
 801550e:	4616      	mov	r6, r2
 8015510:	461d      	mov	r5, r3
 8015512:	f000 f8f9 	bl	8015708 <uxr_seq_num_add>
 8015516:	8028      	strh	r0, [r5, #0]
 8015518:	8922      	ldrh	r2, [r4, #8]
 801551a:	fbb0 f3f2 	udiv	r3, r0, r2
 801551e:	fb02 0c13 	mls	ip, r2, r3, r0
 8015522:	fa1f fc8c 	uxth.w	ip, ip
 8015526:	6863      	ldr	r3, [r4, #4]
 8015528:	fbb3 f3f2 	udiv	r3, r3, r2
 801552c:	fb0c fc03 	mul.w	ip, ip, r3
 8015530:	6823      	ldr	r3, [r4, #0]
 8015532:	89e1      	ldrh	r1, [r4, #14]
 8015534:	f10c 0c04 	add.w	ip, ip, #4
 8015538:	4463      	add	r3, ip
 801553a:	603b      	str	r3, [r7, #0]
 801553c:	6823      	ldr	r3, [r4, #0]
 801553e:	449c      	add	ip, r3
 8015540:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015544:	6033      	str	r3, [r6, #0]
 8015546:	f000 f8e7 	bl	8015718 <uxr_seq_num_cmp>
 801554a:	2800      	cmp	r0, #0
 801554c:	dd01      	ble.n	8015552 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801554e:	2000      	movs	r0, #0
 8015550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015552:	7b23      	ldrb	r3, [r4, #12]
 8015554:	6832      	ldr	r2, [r6, #0]
 8015556:	429a      	cmp	r2, r3
 8015558:	d9f9      	bls.n	801554e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801555a:	8a61      	ldrh	r1, [r4, #18]
 801555c:	8a20      	ldrh	r0, [r4, #16]
 801555e:	f000 f8d7 	bl	8015710 <uxr_seq_num_sub>
 8015562:	8923      	ldrh	r3, [r4, #8]
 8015564:	4283      	cmp	r3, r0
 8015566:	d0f2      	beq.n	801554e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015568:	8828      	ldrh	r0, [r5, #0]
 801556a:	89e3      	ldrh	r3, [r4, #14]
 801556c:	8220      	strh	r0, [r4, #16]
 801556e:	4298      	cmp	r0, r3
 8015570:	d001      	beq.n	8015576 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015572:	2001      	movs	r0, #1
 8015574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015576:	2101      	movs	r1, #1
 8015578:	f000 f8c6 	bl	8015708 <uxr_seq_num_add>
 801557c:	81e0      	strh	r0, [r4, #14]
 801557e:	2001      	movs	r0, #1
 8015580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015582:	bf00      	nop

08015584 <uxr_update_output_stream_heartbeat_timestamp>:
 8015584:	b570      	push	{r4, r5, r6, lr}
 8015586:	8a01      	ldrh	r1, [r0, #16]
 8015588:	4604      	mov	r4, r0
 801558a:	8a40      	ldrh	r0, [r0, #18]
 801558c:	4615      	mov	r5, r2
 801558e:	461e      	mov	r6, r3
 8015590:	f000 f8c2 	bl	8015718 <uxr_seq_num_cmp>
 8015594:	2800      	cmp	r0, #0
 8015596:	db07      	blt.n	80155a8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015598:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801559c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80155a0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80155a4:	2000      	movs	r0, #0
 80155a6:	bd70      	pop	{r4, r5, r6, pc}
 80155a8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80155ac:	b940      	cbnz	r0, 80155c0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80155ae:	2301      	movs	r3, #1
 80155b0:	f884 3020 	strb.w	r3, [r4, #32]
 80155b4:	3564      	adds	r5, #100	@ 0x64
 80155b6:	f146 0600 	adc.w	r6, r6, #0
 80155ba:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80155be:	bd70      	pop	{r4, r5, r6, pc}
 80155c0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80155c4:	4295      	cmp	r5, r2
 80155c6:	eb76 0303 	sbcs.w	r3, r6, r3
 80155ca:	bfa5      	ittet	ge
 80155cc:	3001      	addge	r0, #1
 80155ce:	f884 0020 	strbge.w	r0, [r4, #32]
 80155d2:	2000      	movlt	r0, #0
 80155d4:	2001      	movge	r0, #1
 80155d6:	e7ed      	b.n	80155b4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

080155d8 <uxr_begin_output_nack_buffer_it>:
 80155d8:	8a40      	ldrh	r0, [r0, #18]
 80155da:	4770      	bx	lr

080155dc <uxr_next_reliable_nack_buffer_to_send>:
 80155dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155e0:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80155e4:	b082      	sub	sp, #8
 80155e6:	f1b8 0f00 	cmp.w	r8, #0
 80155ea:	d011      	beq.n	8015610 <uxr_next_reliable_nack_buffer_to_send+0x34>
 80155ec:	4604      	mov	r4, r0
 80155ee:	8818      	ldrh	r0, [r3, #0]
 80155f0:	460e      	mov	r6, r1
 80155f2:	4617      	mov	r7, r2
 80155f4:	461d      	mov	r5, r3
 80155f6:	2101      	movs	r1, #1
 80155f8:	f000 f886 	bl	8015708 <uxr_seq_num_add>
 80155fc:	8028      	strh	r0, [r5, #0]
 80155fe:	8a21      	ldrh	r1, [r4, #16]
 8015600:	f000 f88a 	bl	8015718 <uxr_seq_num_cmp>
 8015604:	2800      	cmp	r0, #0
 8015606:	dd07      	ble.n	8015618 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015608:	f04f 0800 	mov.w	r8, #0
 801560c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015610:	4640      	mov	r0, r8
 8015612:	b002      	add	sp, #8
 8015614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015618:	8921      	ldrh	r1, [r4, #8]
 801561a:	8828      	ldrh	r0, [r5, #0]
 801561c:	6823      	ldr	r3, [r4, #0]
 801561e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015622:	fb01 0c12 	mls	ip, r1, r2, r0
 8015626:	fa1f f28c 	uxth.w	r2, ip
 801562a:	9301      	str	r3, [sp, #4]
 801562c:	6863      	ldr	r3, [r4, #4]
 801562e:	fbb3 fcf1 	udiv	ip, r3, r1
 8015632:	9b01      	ldr	r3, [sp, #4]
 8015634:	fb02 fc0c 	mul.w	ip, r2, ip
 8015638:	f10c 0c04 	add.w	ip, ip, #4
 801563c:	4463      	add	r3, ip
 801563e:	6033      	str	r3, [r6, #0]
 8015640:	6823      	ldr	r3, [r4, #0]
 8015642:	4463      	add	r3, ip
 8015644:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015648:	603b      	str	r3, [r7, #0]
 801564a:	7b22      	ldrb	r2, [r4, #12]
 801564c:	429a      	cmp	r2, r3
 801564e:	d0d2      	beq.n	80155f6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015650:	4640      	mov	r0, r8
 8015652:	b002      	add	sp, #8
 8015654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015658 <uxr_process_acknack>:
 8015658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801565a:	4604      	mov	r4, r0
 801565c:	460e      	mov	r6, r1
 801565e:	4610      	mov	r0, r2
 8015660:	2101      	movs	r1, #1
 8015662:	f000 f855 	bl	8015710 <uxr_seq_num_sub>
 8015666:	8a61      	ldrh	r1, [r4, #18]
 8015668:	f000 f852 	bl	8015710 <uxr_seq_num_sub>
 801566c:	b1c0      	cbz	r0, 80156a0 <uxr_process_acknack+0x48>
 801566e:	4605      	mov	r5, r0
 8015670:	2700      	movs	r7, #0
 8015672:	2101      	movs	r1, #1
 8015674:	8a60      	ldrh	r0, [r4, #18]
 8015676:	f000 f847 	bl	8015708 <uxr_seq_num_add>
 801567a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801567e:	fbb0 f1fc 	udiv	r1, r0, ip
 8015682:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015686:	fb0c 0111 	mls	r1, ip, r1, r0
 801568a:	b289      	uxth	r1, r1
 801568c:	3701      	adds	r7, #1
 801568e:	fbb3 f3fc 	udiv	r3, r3, ip
 8015692:	fb01 f303 	mul.w	r3, r1, r3
 8015696:	42bd      	cmp	r5, r7
 8015698:	7b21      	ldrb	r1, [r4, #12]
 801569a:	8260      	strh	r0, [r4, #18]
 801569c:	50d1      	str	r1, [r2, r3]
 801569e:	d1e8      	bne.n	8015672 <uxr_process_acknack+0x1a>
 80156a0:	3e00      	subs	r6, #0
 80156a2:	f04f 0300 	mov.w	r3, #0
 80156a6:	bf18      	it	ne
 80156a8:	2601      	movne	r6, #1
 80156aa:	f884 3020 	strb.w	r3, [r4, #32]
 80156ae:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80156b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156b4 <uxr_is_output_up_to_date>:
 80156b4:	8a01      	ldrh	r1, [r0, #16]
 80156b6:	8a40      	ldrh	r0, [r0, #18]
 80156b8:	b508      	push	{r3, lr}
 80156ba:	f000 f82d 	bl	8015718 <uxr_seq_num_cmp>
 80156be:	fab0 f080 	clz	r0, r0
 80156c2:	0940      	lsrs	r0, r0, #5
 80156c4:	bd08      	pop	{r3, pc}
 80156c6:	bf00      	nop

080156c8 <get_available_free_slots>:
 80156c8:	8902      	ldrh	r2, [r0, #8]
 80156ca:	b1da      	cbz	r2, 8015704 <get_available_free_slots+0x3c>
 80156cc:	b530      	push	{r4, r5, lr}
 80156ce:	2100      	movs	r1, #0
 80156d0:	6843      	ldr	r3, [r0, #4]
 80156d2:	6805      	ldr	r5, [r0, #0]
 80156d4:	7b04      	ldrb	r4, [r0, #12]
 80156d6:	fbb3 fef2 	udiv	lr, r3, r2
 80156da:	4608      	mov	r0, r1
 80156dc:	460b      	mov	r3, r1
 80156de:	fbb3 fcf2 	udiv	ip, r3, r2
 80156e2:	fb02 331c 	mls	r3, r2, ip, r3
 80156e6:	b29b      	uxth	r3, r3
 80156e8:	fb0e f303 	mul.w	r3, lr, r3
 80156ec:	3101      	adds	r1, #1
 80156ee:	f855 c003 	ldr.w	ip, [r5, r3]
 80156f2:	4564      	cmp	r4, ip
 80156f4:	bf08      	it	eq
 80156f6:	3001      	addeq	r0, #1
 80156f8:	b28b      	uxth	r3, r1
 80156fa:	bf08      	it	eq
 80156fc:	b280      	uxtheq	r0, r0
 80156fe:	4293      	cmp	r3, r2
 8015700:	d3ed      	bcc.n	80156de <get_available_free_slots+0x16>
 8015702:	bd30      	pop	{r4, r5, pc}
 8015704:	4610      	mov	r0, r2
 8015706:	4770      	bx	lr

08015708 <uxr_seq_num_add>:
 8015708:	4408      	add	r0, r1
 801570a:	b280      	uxth	r0, r0
 801570c:	4770      	bx	lr
 801570e:	bf00      	nop

08015710 <uxr_seq_num_sub>:
 8015710:	1a40      	subs	r0, r0, r1
 8015712:	b280      	uxth	r0, r0
 8015714:	4770      	bx	lr
 8015716:	bf00      	nop

08015718 <uxr_seq_num_cmp>:
 8015718:	4288      	cmp	r0, r1
 801571a:	d011      	beq.n	8015740 <uxr_seq_num_cmp+0x28>
 801571c:	d309      	bcc.n	8015732 <uxr_seq_num_cmp+0x1a>
 801571e:	4288      	cmp	r0, r1
 8015720:	d910      	bls.n	8015744 <uxr_seq_num_cmp+0x2c>
 8015722:	1a40      	subs	r0, r0, r1
 8015724:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015728:	bfd4      	ite	le
 801572a:	2001      	movle	r0, #1
 801572c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015730:	4770      	bx	lr
 8015732:	1a0b      	subs	r3, r1, r0
 8015734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015738:	daf1      	bge.n	801571e <uxr_seq_num_cmp+0x6>
 801573a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801573e:	4770      	bx	lr
 8015740:	2000      	movs	r0, #0
 8015742:	4770      	bx	lr
 8015744:	2001      	movs	r0, #1
 8015746:	4770      	bx	lr

08015748 <rcl_get_default_domain_id>:
 8015748:	b530      	push	{r4, r5, lr}
 801574a:	b083      	sub	sp, #12
 801574c:	2300      	movs	r3, #0
 801574e:	9300      	str	r3, [sp, #0]
 8015750:	b1d0      	cbz	r0, 8015788 <rcl_get_default_domain_id+0x40>
 8015752:	4604      	mov	r4, r0
 8015754:	4669      	mov	r1, sp
 8015756:	4815      	ldr	r0, [pc, #84]	@ (80157ac <rcl_get_default_domain_id+0x64>)
 8015758:	f7fd ff32 	bl	80135c0 <rcutils_get_env>
 801575c:	4602      	mov	r2, r0
 801575e:	b110      	cbz	r0, 8015766 <rcl_get_default_domain_id+0x1e>
 8015760:	2001      	movs	r0, #1
 8015762:	b003      	add	sp, #12
 8015764:	bd30      	pop	{r4, r5, pc}
 8015766:	9b00      	ldr	r3, [sp, #0]
 8015768:	b18b      	cbz	r3, 801578e <rcl_get_default_domain_id+0x46>
 801576a:	7818      	ldrb	r0, [r3, #0]
 801576c:	2800      	cmp	r0, #0
 801576e:	d0f8      	beq.n	8015762 <rcl_get_default_domain_id+0x1a>
 8015770:	a901      	add	r1, sp, #4
 8015772:	4618      	mov	r0, r3
 8015774:	9201      	str	r2, [sp, #4]
 8015776:	f000 fdf1 	bl	801635c <strtoul>
 801577a:	4605      	mov	r5, r0
 801577c:	b150      	cbz	r0, 8015794 <rcl_get_default_domain_id+0x4c>
 801577e:	1c43      	adds	r3, r0, #1
 8015780:	d00d      	beq.n	801579e <rcl_get_default_domain_id+0x56>
 8015782:	6025      	str	r5, [r4, #0]
 8015784:	2000      	movs	r0, #0
 8015786:	e7ec      	b.n	8015762 <rcl_get_default_domain_id+0x1a>
 8015788:	200b      	movs	r0, #11
 801578a:	b003      	add	sp, #12
 801578c:	bd30      	pop	{r4, r5, pc}
 801578e:	4618      	mov	r0, r3
 8015790:	b003      	add	sp, #12
 8015792:	bd30      	pop	{r4, r5, pc}
 8015794:	9b01      	ldr	r3, [sp, #4]
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d0f2      	beq.n	8015782 <rcl_get_default_domain_id+0x3a>
 801579c:	e7e0      	b.n	8015760 <rcl_get_default_domain_id+0x18>
 801579e:	f001 f829 	bl	80167f4 <__errno>
 80157a2:	6803      	ldr	r3, [r0, #0]
 80157a4:	2b22      	cmp	r3, #34	@ 0x22
 80157a6:	d1ec      	bne.n	8015782 <rcl_get_default_domain_id+0x3a>
 80157a8:	e7da      	b.n	8015760 <rcl_get_default_domain_id+0x18>
 80157aa:	bf00      	nop
 80157ac:	080186c4 	.word	0x080186c4

080157b0 <rcl_expand_topic_name>:
 80157b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b4:	b08b      	sub	sp, #44	@ 0x2c
 80157b6:	9306      	str	r3, [sp, #24]
 80157b8:	2800      	cmp	r0, #0
 80157ba:	f000 80ad 	beq.w	8015918 <rcl_expand_topic_name+0x168>
 80157be:	460e      	mov	r6, r1
 80157c0:	2900      	cmp	r1, #0
 80157c2:	f000 80a9 	beq.w	8015918 <rcl_expand_topic_name+0x168>
 80157c6:	4617      	mov	r7, r2
 80157c8:	2a00      	cmp	r2, #0
 80157ca:	f000 80a5 	beq.w	8015918 <rcl_expand_topic_name+0x168>
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	f000 80a2 	beq.w	8015918 <rcl_expand_topic_name+0x168>
 80157d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	f000 809e 	beq.w	8015918 <rcl_expand_topic_name+0x168>
 80157dc:	2200      	movs	r2, #0
 80157de:	a909      	add	r1, sp, #36	@ 0x24
 80157e0:	4680      	mov	r8, r0
 80157e2:	f000 fa57 	bl	8015c94 <rcl_validate_topic_name>
 80157e6:	4604      	mov	r4, r0
 80157e8:	2800      	cmp	r0, #0
 80157ea:	f040 8096 	bne.w	801591a <rcl_expand_topic_name+0x16a>
 80157ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	f040 809a 	bne.w	801592a <rcl_expand_topic_name+0x17a>
 80157f6:	4602      	mov	r2, r0
 80157f8:	a909      	add	r1, sp, #36	@ 0x24
 80157fa:	4630      	mov	r0, r6
 80157fc:	f7fe fb2a 	bl	8013e54 <rmw_validate_node_name>
 8015800:	2800      	cmp	r0, #0
 8015802:	f040 808e 	bne.w	8015922 <rcl_expand_topic_name+0x172>
 8015806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015808:	2a00      	cmp	r2, #0
 801580a:	f040 8093 	bne.w	8015934 <rcl_expand_topic_name+0x184>
 801580e:	a909      	add	r1, sp, #36	@ 0x24
 8015810:	4638      	mov	r0, r7
 8015812:	f7fe fb01 	bl	8013e18 <rmw_validate_namespace>
 8015816:	2800      	cmp	r0, #0
 8015818:	f040 8083 	bne.w	8015922 <rcl_expand_topic_name+0x172>
 801581c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801581e:	2c00      	cmp	r4, #0
 8015820:	f040 80ed 	bne.w	80159fe <rcl_expand_topic_name+0x24e>
 8015824:	217b      	movs	r1, #123	@ 0x7b
 8015826:	4640      	mov	r0, r8
 8015828:	f000 ff58 	bl	80166dc <strchr>
 801582c:	f898 3000 	ldrb.w	r3, [r8]
 8015830:	2b2f      	cmp	r3, #47	@ 0x2f
 8015832:	4605      	mov	r5, r0
 8015834:	f000 809e 	beq.w	8015974 <rcl_expand_topic_name+0x1c4>
 8015838:	2b7e      	cmp	r3, #126	@ 0x7e
 801583a:	f040 80a2 	bne.w	8015982 <rcl_expand_topic_name+0x1d2>
 801583e:	4638      	mov	r0, r7
 8015840:	f7ea fcf8 	bl	8000234 <strlen>
 8015844:	4a82      	ldr	r2, [pc, #520]	@ (8015a50 <rcl_expand_topic_name+0x2a0>)
 8015846:	4b83      	ldr	r3, [pc, #524]	@ (8015a54 <rcl_expand_topic_name+0x2a4>)
 8015848:	2801      	cmp	r0, #1
 801584a:	bf18      	it	ne
 801584c:	4613      	movne	r3, r2
 801584e:	9302      	str	r3, [sp, #8]
 8015850:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8015852:	9300      	str	r3, [sp, #0]
 8015854:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015858:	f108 0301 	add.w	r3, r8, #1
 801585c:	9305      	str	r3, [sp, #20]
 801585e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015862:	9301      	str	r3, [sp, #4]
 8015864:	ab14      	add	r3, sp, #80	@ 0x50
 8015866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015868:	f7fd fed2 	bl	8013610 <rcutils_format_string_limit>
 801586c:	4682      	mov	sl, r0
 801586e:	2800      	cmp	r0, #0
 8015870:	f000 80c7 	beq.w	8015a02 <rcl_expand_topic_name+0x252>
 8015874:	2d00      	cmp	r5, #0
 8015876:	f000 80a2 	beq.w	80159be <rcl_expand_topic_name+0x20e>
 801587a:	217b      	movs	r1, #123	@ 0x7b
 801587c:	f000 ff2e 	bl	80166dc <strchr>
 8015880:	46d1      	mov	r9, sl
 8015882:	4605      	mov	r5, r0
 8015884:	9407      	str	r4, [sp, #28]
 8015886:	46d3      	mov	fp, sl
 8015888:	464c      	mov	r4, r9
 801588a:	2d00      	cmp	r5, #0
 801588c:	f000 80be 	beq.w	8015a0c <rcl_expand_topic_name+0x25c>
 8015890:	217d      	movs	r1, #125	@ 0x7d
 8015892:	4620      	mov	r0, r4
 8015894:	f000 ff22 	bl	80166dc <strchr>
 8015898:	eba0 0905 	sub.w	r9, r0, r5
 801589c:	f109 0a01 	add.w	sl, r9, #1
 80158a0:	486d      	ldr	r0, [pc, #436]	@ (8015a58 <rcl_expand_topic_name+0x2a8>)
 80158a2:	4652      	mov	r2, sl
 80158a4:	4629      	mov	r1, r5
 80158a6:	f000 ff26 	bl	80166f6 <strncmp>
 80158aa:	2800      	cmp	r0, #0
 80158ac:	d067      	beq.n	801597e <rcl_expand_topic_name+0x1ce>
 80158ae:	486b      	ldr	r0, [pc, #428]	@ (8015a5c <rcl_expand_topic_name+0x2ac>)
 80158b0:	4652      	mov	r2, sl
 80158b2:	4629      	mov	r1, r5
 80158b4:	f000 ff1f 	bl	80166f6 <strncmp>
 80158b8:	b130      	cbz	r0, 80158c8 <rcl_expand_topic_name+0x118>
 80158ba:	4869      	ldr	r0, [pc, #420]	@ (8015a60 <rcl_expand_topic_name+0x2b0>)
 80158bc:	4652      	mov	r2, sl
 80158be:	4629      	mov	r1, r5
 80158c0:	f000 ff19 	bl	80166f6 <strncmp>
 80158c4:	2800      	cmp	r0, #0
 80158c6:	d137      	bne.n	8015938 <rcl_expand_topic_name+0x188>
 80158c8:	46b9      	mov	r9, r7
 80158ca:	ab16      	add	r3, sp, #88	@ 0x58
 80158cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80158d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80158d4:	ab14      	add	r3, sp, #80	@ 0x50
 80158d6:	4628      	mov	r0, r5
 80158d8:	cb0c      	ldmia	r3, {r2, r3}
 80158da:	4651      	mov	r1, sl
 80158dc:	f7fd ffd4 	bl	8013888 <rcutils_strndup>
 80158e0:	4605      	mov	r5, r0
 80158e2:	2800      	cmp	r0, #0
 80158e4:	f000 809c 	beq.w	8015a20 <rcl_expand_topic_name+0x270>
 80158e8:	464a      	mov	r2, r9
 80158ea:	4620      	mov	r0, r4
 80158ec:	ab14      	add	r3, sp, #80	@ 0x50
 80158ee:	4629      	mov	r1, r5
 80158f0:	f7fd fec8 	bl	8013684 <rcutils_repl_str>
 80158f4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80158f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80158f8:	4604      	mov	r4, r0
 80158fa:	4628      	mov	r0, r5
 80158fc:	4798      	blx	r3
 80158fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015900:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015902:	4658      	mov	r0, fp
 8015904:	4798      	blx	r3
 8015906:	2c00      	cmp	r4, #0
 8015908:	d07b      	beq.n	8015a02 <rcl_expand_topic_name+0x252>
 801590a:	217b      	movs	r1, #123	@ 0x7b
 801590c:	4620      	mov	r0, r4
 801590e:	f000 fee5 	bl	80166dc <strchr>
 8015912:	46a3      	mov	fp, r4
 8015914:	4605      	mov	r5, r0
 8015916:	e7b8      	b.n	801588a <rcl_expand_topic_name+0xda>
 8015918:	240b      	movs	r4, #11
 801591a:	4620      	mov	r0, r4
 801591c:	b00b      	add	sp, #44	@ 0x2c
 801591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015922:	f7fa feeb 	bl	80106fc <rcl_convert_rmw_ret_to_rcl_ret>
 8015926:	4604      	mov	r4, r0
 8015928:	e7f7      	b.n	801591a <rcl_expand_topic_name+0x16a>
 801592a:	2467      	movs	r4, #103	@ 0x67
 801592c:	4620      	mov	r0, r4
 801592e:	b00b      	add	sp, #44	@ 0x2c
 8015930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015934:	24c9      	movs	r4, #201	@ 0xc9
 8015936:	e7f0      	b.n	801591a <rcl_expand_topic_name+0x16a>
 8015938:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801593c:	9806      	ldr	r0, [sp, #24]
 801593e:	1c69      	adds	r1, r5, #1
 8015940:	f7fe f8bc 	bl	8013abc <rcutils_string_map_getn>
 8015944:	4681      	mov	r9, r0
 8015946:	2800      	cmp	r0, #0
 8015948:	d1bf      	bne.n	80158ca <rcl_expand_topic_name+0x11a>
 801594a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801594c:	aa16      	add	r2, sp, #88	@ 0x58
 801594e:	6018      	str	r0, [r3, #0]
 8015950:	ca07      	ldmia	r2, {r0, r1, r2}
 8015952:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015956:	ab14      	add	r3, sp, #80	@ 0x50
 8015958:	cb0c      	ldmia	r3, {r2, r3}
 801595a:	4651      	mov	r1, sl
 801595c:	4628      	mov	r0, r5
 801595e:	f7fd ff93 	bl	8013888 <rcutils_strndup>
 8015962:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015964:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015966:	4798      	blx	r3
 8015968:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801596a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801596c:	4658      	mov	r0, fp
 801596e:	2469      	movs	r4, #105	@ 0x69
 8015970:	4798      	blx	r3
 8015972:	e7d2      	b.n	801591a <rcl_expand_topic_name+0x16a>
 8015974:	2800      	cmp	r0, #0
 8015976:	d05b      	beq.n	8015a30 <rcl_expand_topic_name+0x280>
 8015978:	46c1      	mov	r9, r8
 801597a:	46a2      	mov	sl, r4
 801597c:	e782      	b.n	8015884 <rcl_expand_topic_name+0xd4>
 801597e:	46b1      	mov	r9, r6
 8015980:	e7a3      	b.n	80158ca <rcl_expand_topic_name+0x11a>
 8015982:	2800      	cmp	r0, #0
 8015984:	d1f8      	bne.n	8015978 <rcl_expand_topic_name+0x1c8>
 8015986:	4638      	mov	r0, r7
 8015988:	f7ea fc54 	bl	8000234 <strlen>
 801598c:	4a35      	ldr	r2, [pc, #212]	@ (8015a64 <rcl_expand_topic_name+0x2b4>)
 801598e:	4b36      	ldr	r3, [pc, #216]	@ (8015a68 <rcl_expand_topic_name+0x2b8>)
 8015990:	f8cd 8010 	str.w	r8, [sp, #16]
 8015994:	2801      	cmp	r0, #1
 8015996:	bf18      	it	ne
 8015998:	4613      	movne	r3, r2
 801599a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801599e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80159a2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80159a4:	9703      	str	r7, [sp, #12]
 80159a6:	9200      	str	r2, [sp, #0]
 80159a8:	ab14      	add	r3, sp, #80	@ 0x50
 80159aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159ac:	f7fd fe30 	bl	8013610 <rcutils_format_string_limit>
 80159b0:	4682      	mov	sl, r0
 80159b2:	4653      	mov	r3, sl
 80159b4:	b32b      	cbz	r3, 8015a02 <rcl_expand_topic_name+0x252>
 80159b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80159b8:	f8c3 a000 	str.w	sl, [r3]
 80159bc:	e7ad      	b.n	801591a <rcl_expand_topic_name+0x16a>
 80159be:	f89a 3000 	ldrb.w	r3, [sl]
 80159c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80159c4:	d0f7      	beq.n	80159b6 <rcl_expand_topic_name+0x206>
 80159c6:	4638      	mov	r0, r7
 80159c8:	f7ea fc34 	bl	8000234 <strlen>
 80159cc:	4a25      	ldr	r2, [pc, #148]	@ (8015a64 <rcl_expand_topic_name+0x2b4>)
 80159ce:	4b26      	ldr	r3, [pc, #152]	@ (8015a68 <rcl_expand_topic_name+0x2b8>)
 80159d0:	f8cd a010 	str.w	sl, [sp, #16]
 80159d4:	2801      	cmp	r0, #1
 80159d6:	bf18      	it	ne
 80159d8:	4613      	movne	r3, r2
 80159da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80159de:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80159e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80159e4:	9703      	str	r7, [sp, #12]
 80159e6:	9200      	str	r2, [sp, #0]
 80159e8:	ab14      	add	r3, sp, #80	@ 0x50
 80159ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80159ec:	f7fd fe10 	bl	8013610 <rcutils_format_string_limit>
 80159f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80159f2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80159f4:	4605      	mov	r5, r0
 80159f6:	4650      	mov	r0, sl
 80159f8:	4798      	blx	r3
 80159fa:	46aa      	mov	sl, r5
 80159fc:	e7d9      	b.n	80159b2 <rcl_expand_topic_name+0x202>
 80159fe:	24ca      	movs	r4, #202	@ 0xca
 8015a00:	e78b      	b.n	801591a <rcl_expand_topic_name+0x16a>
 8015a02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015a04:	2300      	movs	r3, #0
 8015a06:	6013      	str	r3, [r2, #0]
 8015a08:	240a      	movs	r4, #10
 8015a0a:	e786      	b.n	801591a <rcl_expand_topic_name+0x16a>
 8015a0c:	465b      	mov	r3, fp
 8015a0e:	9c07      	ldr	r4, [sp, #28]
 8015a10:	46da      	mov	sl, fp
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d1d3      	bne.n	80159be <rcl_expand_topic_name+0x20e>
 8015a16:	f898 3000 	ldrb.w	r3, [r8]
 8015a1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8015a1c:	d0cb      	beq.n	80159b6 <rcl_expand_topic_name+0x206>
 8015a1e:	e7b2      	b.n	8015986 <rcl_expand_topic_name+0x1d6>
 8015a20:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8015a24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015a26:	6015      	str	r5, [r2, #0]
 8015a28:	4658      	mov	r0, fp
 8015a2a:	4798      	blx	r3
 8015a2c:	240a      	movs	r4, #10
 8015a2e:	e774      	b.n	801591a <rcl_expand_topic_name+0x16a>
 8015a30:	ab17      	add	r3, sp, #92	@ 0x5c
 8015a32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a36:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015a3a:	ab14      	add	r3, sp, #80	@ 0x50
 8015a3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015a3e:	4640      	mov	r0, r8
 8015a40:	f7fd ff00 	bl	8013844 <rcutils_strdup>
 8015a44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015a46:	2800      	cmp	r0, #0
 8015a48:	6018      	str	r0, [r3, #0]
 8015a4a:	bf08      	it	eq
 8015a4c:	240a      	moveq	r4, #10
 8015a4e:	e764      	b.n	801591a <rcl_expand_topic_name+0x16a>
 8015a50:	080186d4 	.word	0x080186d4
 8015a54:	08017d3c 	.word	0x08017d3c
 8015a58:	080186dc 	.word	0x080186dc
 8015a5c:	080186e4 	.word	0x080186e4
 8015a60:	080186ec 	.word	0x080186ec
 8015a64:	08017d28 	.word	0x08017d28
 8015a68:	08017d4c 	.word	0x08017d4c

08015a6c <rcl_get_default_topic_name_substitutions>:
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	bf0c      	ite	eq
 8015a70:	200b      	moveq	r0, #11
 8015a72:	2000      	movne	r0, #0
 8015a74:	4770      	bx	lr
 8015a76:	bf00      	nop

08015a78 <rcl_get_zero_initialized_guard_condition>:
 8015a78:	4a03      	ldr	r2, [pc, #12]	@ (8015a88 <rcl_get_zero_initialized_guard_condition+0x10>)
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015a80:	e883 0003 	stmia.w	r3, {r0, r1}
 8015a84:	4618      	mov	r0, r3
 8015a86:	4770      	bx	lr
 8015a88:	080186f8 	.word	0x080186f8

08015a8c <rcl_guard_condition_init>:
 8015a8c:	b082      	sub	sp, #8
 8015a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a90:	b087      	sub	sp, #28
 8015a92:	ac0c      	add	r4, sp, #48	@ 0x30
 8015a94:	e884 000c 	stmia.w	r4, {r2, r3}
 8015a98:	46a6      	mov	lr, r4
 8015a9a:	460d      	mov	r5, r1
 8015a9c:	4604      	mov	r4, r0
 8015a9e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015aa2:	f10d 0c04 	add.w	ip, sp, #4
 8015aa6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015aaa:	f8de 3000 	ldr.w	r3, [lr]
 8015aae:	f8cc 3000 	str.w	r3, [ip]
 8015ab2:	a801      	add	r0, sp, #4
 8015ab4:	f7f5 faca 	bl	800b04c <rcutils_allocator_is_valid>
 8015ab8:	b338      	cbz	r0, 8015b0a <rcl_guard_condition_init+0x7e>
 8015aba:	b334      	cbz	r4, 8015b0a <rcl_guard_condition_init+0x7e>
 8015abc:	6866      	ldr	r6, [r4, #4]
 8015abe:	b9ee      	cbnz	r6, 8015afc <rcl_guard_condition_init+0x70>
 8015ac0:	b31d      	cbz	r5, 8015b0a <rcl_guard_condition_init+0x7e>
 8015ac2:	4628      	mov	r0, r5
 8015ac4:	f7fa fe38 	bl	8010738 <rcl_context_is_valid>
 8015ac8:	b308      	cbz	r0, 8015b0e <rcl_guard_condition_init+0x82>
 8015aca:	9b01      	ldr	r3, [sp, #4]
 8015acc:	9905      	ldr	r1, [sp, #20]
 8015ace:	201c      	movs	r0, #28
 8015ad0:	4798      	blx	r3
 8015ad2:	4607      	mov	r7, r0
 8015ad4:	6060      	str	r0, [r4, #4]
 8015ad6:	b310      	cbz	r0, 8015b1e <rcl_guard_condition_init+0x92>
 8015ad8:	6828      	ldr	r0, [r5, #0]
 8015ada:	3028      	adds	r0, #40	@ 0x28
 8015adc:	f000 f9d4 	bl	8015e88 <rmw_create_guard_condition>
 8015ae0:	6038      	str	r0, [r7, #0]
 8015ae2:	6860      	ldr	r0, [r4, #4]
 8015ae4:	6805      	ldr	r5, [r0, #0]
 8015ae6:	b1a5      	cbz	r5, 8015b12 <rcl_guard_condition_init+0x86>
 8015ae8:	2301      	movs	r3, #1
 8015aea:	ac01      	add	r4, sp, #4
 8015aec:	7103      	strb	r3, [r0, #4]
 8015aee:	f100 0708 	add.w	r7, r0, #8
 8015af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015af4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015af6:	6823      	ldr	r3, [r4, #0]
 8015af8:	603b      	str	r3, [r7, #0]
 8015afa:	e000      	b.n	8015afe <rcl_guard_condition_init+0x72>
 8015afc:	2664      	movs	r6, #100	@ 0x64
 8015afe:	4630      	mov	r0, r6
 8015b00:	b007      	add	sp, #28
 8015b02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015b06:	b002      	add	sp, #8
 8015b08:	4770      	bx	lr
 8015b0a:	260b      	movs	r6, #11
 8015b0c:	e7f7      	b.n	8015afe <rcl_guard_condition_init+0x72>
 8015b0e:	2665      	movs	r6, #101	@ 0x65
 8015b10:	e7f5      	b.n	8015afe <rcl_guard_condition_init+0x72>
 8015b12:	9b02      	ldr	r3, [sp, #8]
 8015b14:	9905      	ldr	r1, [sp, #20]
 8015b16:	4798      	blx	r3
 8015b18:	2601      	movs	r6, #1
 8015b1a:	6065      	str	r5, [r4, #4]
 8015b1c:	e7ef      	b.n	8015afe <rcl_guard_condition_init+0x72>
 8015b1e:	260a      	movs	r6, #10
 8015b20:	e7ed      	b.n	8015afe <rcl_guard_condition_init+0x72>
 8015b22:	bf00      	nop

08015b24 <rcl_guard_condition_init_from_rmw>:
 8015b24:	b082      	sub	sp, #8
 8015b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b2a:	b086      	sub	sp, #24
 8015b2c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015b30:	4604      	mov	r4, r0
 8015b32:	f84c 3f04 	str.w	r3, [ip, #4]!
 8015b36:	460e      	mov	r6, r1
 8015b38:	4617      	mov	r7, r2
 8015b3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015b3e:	f10d 0e04 	add.w	lr, sp, #4
 8015b42:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b46:	f8dc 3000 	ldr.w	r3, [ip]
 8015b4a:	f8ce 3000 	str.w	r3, [lr]
 8015b4e:	a801      	add	r0, sp, #4
 8015b50:	f7f5 fa7c 	bl	800b04c <rcutils_allocator_is_valid>
 8015b54:	b350      	cbz	r0, 8015bac <rcl_guard_condition_init_from_rmw+0x88>
 8015b56:	b34c      	cbz	r4, 8015bac <rcl_guard_condition_init_from_rmw+0x88>
 8015b58:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015b5c:	f1b8 0f00 	cmp.w	r8, #0
 8015b60:	d11e      	bne.n	8015ba0 <rcl_guard_condition_init_from_rmw+0x7c>
 8015b62:	b31f      	cbz	r7, 8015bac <rcl_guard_condition_init_from_rmw+0x88>
 8015b64:	4638      	mov	r0, r7
 8015b66:	f7fa fde7 	bl	8010738 <rcl_context_is_valid>
 8015b6a:	b328      	cbz	r0, 8015bb8 <rcl_guard_condition_init_from_rmw+0x94>
 8015b6c:	9b01      	ldr	r3, [sp, #4]
 8015b6e:	9905      	ldr	r1, [sp, #20]
 8015b70:	201c      	movs	r0, #28
 8015b72:	4798      	blx	r3
 8015b74:	4605      	mov	r5, r0
 8015b76:	6060      	str	r0, [r4, #4]
 8015b78:	b358      	cbz	r0, 8015bd2 <rcl_guard_condition_init_from_rmw+0xae>
 8015b7a:	b1fe      	cbz	r6, 8015bbc <rcl_guard_condition_init_from_rmw+0x98>
 8015b7c:	6006      	str	r6, [r0, #0]
 8015b7e:	f880 8004 	strb.w	r8, [r0, #4]
 8015b82:	ac01      	add	r4, sp, #4
 8015b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b86:	f105 0c08 	add.w	ip, r5, #8
 8015b8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b8e:	6823      	ldr	r3, [r4, #0]
 8015b90:	f8cc 3000 	str.w	r3, [ip]
 8015b94:	2000      	movs	r0, #0
 8015b96:	b006      	add	sp, #24
 8015b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b9c:	b002      	add	sp, #8
 8015b9e:	4770      	bx	lr
 8015ba0:	2064      	movs	r0, #100	@ 0x64
 8015ba2:	b006      	add	sp, #24
 8015ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba8:	b002      	add	sp, #8
 8015baa:	4770      	bx	lr
 8015bac:	200b      	movs	r0, #11
 8015bae:	b006      	add	sp, #24
 8015bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb4:	b002      	add	sp, #8
 8015bb6:	4770      	bx	lr
 8015bb8:	2065      	movs	r0, #101	@ 0x65
 8015bba:	e7f2      	b.n	8015ba2 <rcl_guard_condition_init_from_rmw+0x7e>
 8015bbc:	6838      	ldr	r0, [r7, #0]
 8015bbe:	3028      	adds	r0, #40	@ 0x28
 8015bc0:	f000 f962 	bl	8015e88 <rmw_create_guard_condition>
 8015bc4:	6028      	str	r0, [r5, #0]
 8015bc6:	6865      	ldr	r5, [r4, #4]
 8015bc8:	682e      	ldr	r6, [r5, #0]
 8015bca:	b126      	cbz	r6, 8015bd6 <rcl_guard_condition_init_from_rmw+0xb2>
 8015bcc:	2301      	movs	r3, #1
 8015bce:	712b      	strb	r3, [r5, #4]
 8015bd0:	e7d7      	b.n	8015b82 <rcl_guard_condition_init_from_rmw+0x5e>
 8015bd2:	200a      	movs	r0, #10
 8015bd4:	e7e5      	b.n	8015ba2 <rcl_guard_condition_init_from_rmw+0x7e>
 8015bd6:	4628      	mov	r0, r5
 8015bd8:	9b02      	ldr	r3, [sp, #8]
 8015bda:	9905      	ldr	r1, [sp, #20]
 8015bdc:	4798      	blx	r3
 8015bde:	6066      	str	r6, [r4, #4]
 8015be0:	2001      	movs	r0, #1
 8015be2:	e7de      	b.n	8015ba2 <rcl_guard_condition_init_from_rmw+0x7e>

08015be4 <rcl_guard_condition_fini>:
 8015be4:	b570      	push	{r4, r5, r6, lr}
 8015be6:	b082      	sub	sp, #8
 8015be8:	b1f0      	cbz	r0, 8015c28 <rcl_guard_condition_fini+0x44>
 8015bea:	6843      	ldr	r3, [r0, #4]
 8015bec:	4604      	mov	r4, r0
 8015bee:	b163      	cbz	r3, 8015c0a <rcl_guard_condition_fini+0x26>
 8015bf0:	6818      	ldr	r0, [r3, #0]
 8015bf2:	68de      	ldr	r6, [r3, #12]
 8015bf4:	6999      	ldr	r1, [r3, #24]
 8015bf6:	b160      	cbz	r0, 8015c12 <rcl_guard_condition_fini+0x2e>
 8015bf8:	791d      	ldrb	r5, [r3, #4]
 8015bfa:	b965      	cbnz	r5, 8015c16 <rcl_guard_condition_fini+0x32>
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	47b0      	blx	r6
 8015c00:	2300      	movs	r3, #0
 8015c02:	4628      	mov	r0, r5
 8015c04:	6063      	str	r3, [r4, #4]
 8015c06:	b002      	add	sp, #8
 8015c08:	bd70      	pop	{r4, r5, r6, pc}
 8015c0a:	461d      	mov	r5, r3
 8015c0c:	4628      	mov	r0, r5
 8015c0e:	b002      	add	sp, #8
 8015c10:	bd70      	pop	{r4, r5, r6, pc}
 8015c12:	4605      	mov	r5, r0
 8015c14:	e7f2      	b.n	8015bfc <rcl_guard_condition_fini+0x18>
 8015c16:	9101      	str	r1, [sp, #4]
 8015c18:	f000 f94a 	bl	8015eb0 <rmw_destroy_guard_condition>
 8015c1c:	1e05      	subs	r5, r0, #0
 8015c1e:	6863      	ldr	r3, [r4, #4]
 8015c20:	9901      	ldr	r1, [sp, #4]
 8015c22:	bf18      	it	ne
 8015c24:	2501      	movne	r5, #1
 8015c26:	e7e9      	b.n	8015bfc <rcl_guard_condition_fini+0x18>
 8015c28:	250b      	movs	r5, #11
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	b002      	add	sp, #8
 8015c2e:	bd70      	pop	{r4, r5, r6, pc}

08015c30 <rcl_guard_condition_get_default_options>:
 8015c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c32:	b087      	sub	sp, #28
 8015c34:	4606      	mov	r6, r0
 8015c36:	4668      	mov	r0, sp
 8015c38:	f7f5 f9fa 	bl	800b030 <rcutils_get_default_allocator>
 8015c3c:	4b09      	ldr	r3, [pc, #36]	@ (8015c64 <rcl_guard_condition_get_default_options+0x34>)
 8015c3e:	46ee      	mov	lr, sp
 8015c40:	469c      	mov	ip, r3
 8015c42:	461d      	mov	r5, r3
 8015c44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c4e:	4634      	mov	r4, r6
 8015c50:	f8de 7000 	ldr.w	r7, [lr]
 8015c54:	f8cc 7000 	str.w	r7, [ip]
 8015c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015c5a:	4630      	mov	r0, r6
 8015c5c:	6027      	str	r7, [r4, #0]
 8015c5e:	b007      	add	sp, #28
 8015c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c62:	bf00      	nop
 8015c64:	2000af64 	.word	0x2000af64

08015c68 <rcl_trigger_guard_condition>:
 8015c68:	b148      	cbz	r0, 8015c7e <rcl_trigger_guard_condition+0x16>
 8015c6a:	b508      	push	{r3, lr}
 8015c6c:	6843      	ldr	r3, [r0, #4]
 8015c6e:	b143      	cbz	r3, 8015c82 <rcl_trigger_guard_condition+0x1a>
 8015c70:	6818      	ldr	r0, [r3, #0]
 8015c72:	f000 f931 	bl	8015ed8 <rmw_trigger_guard_condition>
 8015c76:	3800      	subs	r0, #0
 8015c78:	bf18      	it	ne
 8015c7a:	2001      	movne	r0, #1
 8015c7c:	bd08      	pop	{r3, pc}
 8015c7e:	200b      	movs	r0, #11
 8015c80:	4770      	bx	lr
 8015c82:	200b      	movs	r0, #11
 8015c84:	bd08      	pop	{r3, pc}
 8015c86:	bf00      	nop

08015c88 <rcl_guard_condition_get_rmw_handle>:
 8015c88:	b110      	cbz	r0, 8015c90 <rcl_guard_condition_get_rmw_handle+0x8>
 8015c8a:	6840      	ldr	r0, [r0, #4]
 8015c8c:	b100      	cbz	r0, 8015c90 <rcl_guard_condition_get_rmw_handle+0x8>
 8015c8e:	6800      	ldr	r0, [r0, #0]
 8015c90:	4770      	bx	lr
 8015c92:	bf00      	nop

08015c94 <rcl_validate_topic_name>:
 8015c94:	2800      	cmp	r0, #0
 8015c96:	d07a      	beq.n	8015d8e <rcl_validate_topic_name+0xfa>
 8015c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c9c:	460e      	mov	r6, r1
 8015c9e:	2900      	cmp	r1, #0
 8015ca0:	d07c      	beq.n	8015d9c <rcl_validate_topic_name+0x108>
 8015ca2:	4617      	mov	r7, r2
 8015ca4:	4605      	mov	r5, r0
 8015ca6:	f7ea fac5 	bl	8000234 <strlen>
 8015caa:	b1b0      	cbz	r0, 8015cda <rcl_validate_topic_name+0x46>
 8015cac:	f895 9000 	ldrb.w	r9, [r5]
 8015cb0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015e34 <rcl_validate_topic_name+0x1a0>
 8015cb4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015cb8:	f013 0304 	ands.w	r3, r3, #4
 8015cbc:	d169      	bne.n	8015d92 <rcl_validate_topic_name+0xfe>
 8015cbe:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015cc2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015cc6:	2a2f      	cmp	r2, #47	@ 0x2f
 8015cc8:	d10e      	bne.n	8015ce8 <rcl_validate_topic_name+0x54>
 8015cca:	2202      	movs	r2, #2
 8015ccc:	6032      	str	r2, [r6, #0]
 8015cce:	b36f      	cbz	r7, 8015d2c <rcl_validate_topic_name+0x98>
 8015cd0:	f8c7 8000 	str.w	r8, [r7]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cda:	2301      	movs	r3, #1
 8015cdc:	6033      	str	r3, [r6, #0]
 8015cde:	b32f      	cbz	r7, 8015d2c <rcl_validate_topic_name+0x98>
 8015ce0:	2000      	movs	r0, #0
 8015ce2:	6038      	str	r0, [r7, #0]
 8015ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ce8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015cec:	461c      	mov	r4, r3
 8015cee:	4619      	mov	r1, r3
 8015cf0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015cf4:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015cf8:	f1be 0f09 	cmp.w	lr, #9
 8015cfc:	d919      	bls.n	8015d32 <rcl_validate_topic_name+0x9e>
 8015cfe:	f022 0e20 	bic.w	lr, r2, #32
 8015d02:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8015d06:	f1be 0f19 	cmp.w	lr, #25
 8015d0a:	d912      	bls.n	8015d32 <rcl_validate_topic_name+0x9e>
 8015d0c:	2a5f      	cmp	r2, #95	@ 0x5f
 8015d0e:	d019      	beq.n	8015d44 <rcl_validate_topic_name+0xb0>
 8015d10:	2a2f      	cmp	r2, #47	@ 0x2f
 8015d12:	d051      	beq.n	8015db8 <rcl_validate_topic_name+0x124>
 8015d14:	2a7e      	cmp	r2, #126	@ 0x7e
 8015d16:	d048      	beq.n	8015daa <rcl_validate_topic_name+0x116>
 8015d18:	2a7b      	cmp	r2, #123	@ 0x7b
 8015d1a:	d054      	beq.n	8015dc6 <rcl_validate_topic_name+0x132>
 8015d1c:	2a7d      	cmp	r2, #125	@ 0x7d
 8015d1e:	d161      	bne.n	8015de4 <rcl_validate_topic_name+0x150>
 8015d20:	2c00      	cmp	r4, #0
 8015d22:	d155      	bne.n	8015dd0 <rcl_validate_topic_name+0x13c>
 8015d24:	2305      	movs	r3, #5
 8015d26:	6033      	str	r3, [r6, #0]
 8015d28:	b107      	cbz	r7, 8015d2c <rcl_validate_topic_name+0x98>
 8015d2a:	6039      	str	r1, [r7, #0]
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d32:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015d36:	0752      	lsls	r2, r2, #29
 8015d38:	d504      	bpl.n	8015d44 <rcl_validate_topic_name+0xb0>
 8015d3a:	b11c      	cbz	r4, 8015d44 <rcl_validate_topic_name+0xb0>
 8015d3c:	b111      	cbz	r1, 8015d44 <rcl_validate_topic_name+0xb0>
 8015d3e:	1e4a      	subs	r2, r1, #1
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d02d      	beq.n	8015da0 <rcl_validate_topic_name+0x10c>
 8015d44:	3101      	adds	r1, #1
 8015d46:	4288      	cmp	r0, r1
 8015d48:	d1d2      	bne.n	8015cf0 <rcl_validate_topic_name+0x5c>
 8015d4a:	2c00      	cmp	r4, #0
 8015d4c:	d145      	bne.n	8015dda <rcl_validate_topic_name+0x146>
 8015d4e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015d52:	d04f      	beq.n	8015df4 <rcl_validate_topic_name+0x160>
 8015d54:	4620      	mov	r0, r4
 8015d56:	2301      	movs	r3, #1
 8015d58:	e006      	b.n	8015d68 <rcl_validate_topic_name+0xd4>
 8015d5a:	428b      	cmp	r3, r1
 8015d5c:	f105 0501 	add.w	r5, r5, #1
 8015d60:	f103 0201 	add.w	r2, r3, #1
 8015d64:	d236      	bcs.n	8015dd4 <rcl_validate_topic_name+0x140>
 8015d66:	4613      	mov	r3, r2
 8015d68:	4580      	cmp	r8, r0
 8015d6a:	f100 0001 	add.w	r0, r0, #1
 8015d6e:	d0f4      	beq.n	8015d5a <rcl_validate_topic_name+0xc6>
 8015d70:	782a      	ldrb	r2, [r5, #0]
 8015d72:	2a2f      	cmp	r2, #47	@ 0x2f
 8015d74:	d1f1      	bne.n	8015d5a <rcl_validate_topic_name+0xc6>
 8015d76:	786a      	ldrb	r2, [r5, #1]
 8015d78:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015d7c:	0754      	lsls	r4, r2, #29
 8015d7e:	d5ec      	bpl.n	8015d5a <rcl_validate_topic_name+0xc6>
 8015d80:	2204      	movs	r2, #4
 8015d82:	6032      	str	r2, [r6, #0]
 8015d84:	2f00      	cmp	r7, #0
 8015d86:	d0d1      	beq.n	8015d2c <rcl_validate_topic_name+0x98>
 8015d88:	603b      	str	r3, [r7, #0]
 8015d8a:	2000      	movs	r0, #0
 8015d8c:	e7aa      	b.n	8015ce4 <rcl_validate_topic_name+0x50>
 8015d8e:	200b      	movs	r0, #11
 8015d90:	4770      	bx	lr
 8015d92:	2304      	movs	r3, #4
 8015d94:	6033      	str	r3, [r6, #0]
 8015d96:	2f00      	cmp	r7, #0
 8015d98:	d1a2      	bne.n	8015ce0 <rcl_validate_topic_name+0x4c>
 8015d9a:	e7c7      	b.n	8015d2c <rcl_validate_topic_name+0x98>
 8015d9c:	200b      	movs	r0, #11
 8015d9e:	e7a1      	b.n	8015ce4 <rcl_validate_topic_name+0x50>
 8015da0:	2309      	movs	r3, #9
 8015da2:	6033      	str	r3, [r6, #0]
 8015da4:	2f00      	cmp	r7, #0
 8015da6:	d1c0      	bne.n	8015d2a <rcl_validate_topic_name+0x96>
 8015da8:	e7c0      	b.n	8015d2c <rcl_validate_topic_name+0x98>
 8015daa:	2900      	cmp	r1, #0
 8015dac:	d0ca      	beq.n	8015d44 <rcl_validate_topic_name+0xb0>
 8015dae:	2306      	movs	r3, #6
 8015db0:	6033      	str	r3, [r6, #0]
 8015db2:	2f00      	cmp	r7, #0
 8015db4:	d1b9      	bne.n	8015d2a <rcl_validate_topic_name+0x96>
 8015db6:	e7b9      	b.n	8015d2c <rcl_validate_topic_name+0x98>
 8015db8:	2c00      	cmp	r4, #0
 8015dba:	d0c3      	beq.n	8015d44 <rcl_validate_topic_name+0xb0>
 8015dbc:	2308      	movs	r3, #8
 8015dbe:	6033      	str	r3, [r6, #0]
 8015dc0:	2f00      	cmp	r7, #0
 8015dc2:	d1b2      	bne.n	8015d2a <rcl_validate_topic_name+0x96>
 8015dc4:	e7b2      	b.n	8015d2c <rcl_validate_topic_name+0x98>
 8015dc6:	2c00      	cmp	r4, #0
 8015dc8:	d1f8      	bne.n	8015dbc <rcl_validate_topic_name+0x128>
 8015dca:	460b      	mov	r3, r1
 8015dcc:	2401      	movs	r4, #1
 8015dce:	e7b9      	b.n	8015d44 <rcl_validate_topic_name+0xb0>
 8015dd0:	2400      	movs	r4, #0
 8015dd2:	e7b7      	b.n	8015d44 <rcl_validate_topic_name+0xb0>
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	6030      	str	r0, [r6, #0]
 8015dd8:	e784      	b.n	8015ce4 <rcl_validate_topic_name+0x50>
 8015dda:	2205      	movs	r2, #5
 8015ddc:	6032      	str	r2, [r6, #0]
 8015dde:	2f00      	cmp	r7, #0
 8015de0:	d1d2      	bne.n	8015d88 <rcl_validate_topic_name+0xf4>
 8015de2:	e7a3      	b.n	8015d2c <rcl_validate_topic_name+0x98>
 8015de4:	2c00      	cmp	r4, #0
 8015de6:	bf14      	ite	ne
 8015de8:	2308      	movne	r3, #8
 8015dea:	2303      	moveq	r3, #3
 8015dec:	6033      	str	r3, [r6, #0]
 8015dee:	2f00      	cmp	r7, #0
 8015df0:	d19b      	bne.n	8015d2a <rcl_validate_topic_name+0x96>
 8015df2:	e79b      	b.n	8015d2c <rcl_validate_topic_name+0x98>
 8015df4:	2301      	movs	r3, #1
 8015df6:	e00a      	b.n	8015e0e <rcl_validate_topic_name+0x17a>
 8015df8:	2c01      	cmp	r4, #1
 8015dfa:	d013      	beq.n	8015e24 <rcl_validate_topic_name+0x190>
 8015dfc:	4299      	cmp	r1, r3
 8015dfe:	f104 0401 	add.w	r4, r4, #1
 8015e02:	f105 0501 	add.w	r5, r5, #1
 8015e06:	f103 0201 	add.w	r2, r3, #1
 8015e0a:	d9e3      	bls.n	8015dd4 <rcl_validate_topic_name+0x140>
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	45a0      	cmp	r8, r4
 8015e10:	d0f4      	beq.n	8015dfc <rcl_validate_topic_name+0x168>
 8015e12:	782a      	ldrb	r2, [r5, #0]
 8015e14:	2a2f      	cmp	r2, #47	@ 0x2f
 8015e16:	d1ef      	bne.n	8015df8 <rcl_validate_topic_name+0x164>
 8015e18:	786a      	ldrb	r2, [r5, #1]
 8015e1a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015e1e:	0752      	lsls	r2, r2, #29
 8015e20:	d5ec      	bpl.n	8015dfc <rcl_validate_topic_name+0x168>
 8015e22:	e7ad      	b.n	8015d80 <rcl_validate_topic_name+0xec>
 8015e24:	2307      	movs	r3, #7
 8015e26:	6033      	str	r3, [r6, #0]
 8015e28:	2f00      	cmp	r7, #0
 8015e2a:	f43f af7f 	beq.w	8015d2c <rcl_validate_topic_name+0x98>
 8015e2e:	603c      	str	r4, [r7, #0]
 8015e30:	2000      	movs	r0, #0
 8015e32:	e757      	b.n	8015ce4 <rcl_validate_topic_name+0x50>
 8015e34:	08018770 	.word	0x08018770

08015e38 <rcutils_string_array_fini>:
 8015e38:	b320      	cbz	r0, 8015e84 <rcutils_string_array_fini+0x4c>
 8015e3a:	b570      	push	{r4, r5, r6, lr}
 8015e3c:	4604      	mov	r4, r0
 8015e3e:	6840      	ldr	r0, [r0, #4]
 8015e40:	b1d8      	cbz	r0, 8015e7a <rcutils_string_array_fini+0x42>
 8015e42:	f104 0008 	add.w	r0, r4, #8
 8015e46:	f7f5 f901 	bl	800b04c <rcutils_allocator_is_valid>
 8015e4a:	b1b8      	cbz	r0, 8015e7c <rcutils_string_array_fini+0x44>
 8015e4c:	6823      	ldr	r3, [r4, #0]
 8015e4e:	b1bb      	cbz	r3, 8015e80 <rcutils_string_array_fini+0x48>
 8015e50:	2500      	movs	r5, #0
 8015e52:	6860      	ldr	r0, [r4, #4]
 8015e54:	462e      	mov	r6, r5
 8015e56:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8015e5a:	68e3      	ldr	r3, [r4, #12]
 8015e5c:	69a1      	ldr	r1, [r4, #24]
 8015e5e:	4798      	blx	r3
 8015e60:	e9d4 3000 	ldrd	r3, r0, [r4]
 8015e64:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8015e68:	3501      	adds	r5, #1
 8015e6a:	429d      	cmp	r5, r3
 8015e6c:	d3f3      	bcc.n	8015e56 <rcutils_string_array_fini+0x1e>
 8015e6e:	68e3      	ldr	r3, [r4, #12]
 8015e70:	69a1      	ldr	r1, [r4, #24]
 8015e72:	4798      	blx	r3
 8015e74:	2000      	movs	r0, #0
 8015e76:	e9c4 0000 	strd	r0, r0, [r4]
 8015e7a:	bd70      	pop	{r4, r5, r6, pc}
 8015e7c:	200b      	movs	r0, #11
 8015e7e:	bd70      	pop	{r4, r5, r6, pc}
 8015e80:	6860      	ldr	r0, [r4, #4]
 8015e82:	e7f4      	b.n	8015e6e <rcutils_string_array_fini+0x36>
 8015e84:	200b      	movs	r0, #11
 8015e86:	4770      	bx	lr

08015e88 <rmw_create_guard_condition>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	4605      	mov	r5, r0
 8015e8c:	4807      	ldr	r0, [pc, #28]	@ (8015eac <rmw_create_guard_condition+0x24>)
 8015e8e:	f7fe f927 	bl	80140e0 <get_memory>
 8015e92:	b148      	cbz	r0, 8015ea8 <rmw_create_guard_condition+0x20>
 8015e94:	6884      	ldr	r4, [r0, #8]
 8015e96:	2300      	movs	r3, #0
 8015e98:	7423      	strb	r3, [r4, #16]
 8015e9a:	61e5      	str	r5, [r4, #28]
 8015e9c:	f7fe f988 	bl	80141b0 <rmw_get_implementation_identifier>
 8015ea0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015ea4:	f104 0014 	add.w	r0, r4, #20
 8015ea8:	bd38      	pop	{r3, r4, r5, pc}
 8015eaa:	bf00      	nop
 8015eac:	2000ad24 	.word	0x2000ad24

08015eb0 <rmw_destroy_guard_condition>:
 8015eb0:	b508      	push	{r3, lr}
 8015eb2:	4b08      	ldr	r3, [pc, #32]	@ (8015ed4 <rmw_destroy_guard_condition+0x24>)
 8015eb4:	6819      	ldr	r1, [r3, #0]
 8015eb6:	b911      	cbnz	r1, 8015ebe <rmw_destroy_guard_condition+0xe>
 8015eb8:	e00a      	b.n	8015ed0 <rmw_destroy_guard_condition+0x20>
 8015eba:	6849      	ldr	r1, [r1, #4]
 8015ebc:	b141      	cbz	r1, 8015ed0 <rmw_destroy_guard_condition+0x20>
 8015ebe:	688b      	ldr	r3, [r1, #8]
 8015ec0:	3314      	adds	r3, #20
 8015ec2:	4298      	cmp	r0, r3
 8015ec4:	d1f9      	bne.n	8015eba <rmw_destroy_guard_condition+0xa>
 8015ec6:	4803      	ldr	r0, [pc, #12]	@ (8015ed4 <rmw_destroy_guard_condition+0x24>)
 8015ec8:	f7fe f91a 	bl	8014100 <put_memory>
 8015ecc:	2000      	movs	r0, #0
 8015ece:	bd08      	pop	{r3, pc}
 8015ed0:	2001      	movs	r0, #1
 8015ed2:	bd08      	pop	{r3, pc}
 8015ed4:	2000ad24 	.word	0x2000ad24

08015ed8 <rmw_trigger_guard_condition>:
 8015ed8:	b160      	cbz	r0, 8015ef4 <rmw_trigger_guard_condition+0x1c>
 8015eda:	b510      	push	{r4, lr}
 8015edc:	4604      	mov	r4, r0
 8015ede:	6800      	ldr	r0, [r0, #0]
 8015ee0:	f7f6 fd1e 	bl	800c920 <is_uxrce_rmw_identifier_valid>
 8015ee4:	b908      	cbnz	r0, 8015eea <rmw_trigger_guard_condition+0x12>
 8015ee6:	2001      	movs	r0, #1
 8015ee8:	bd10      	pop	{r4, pc}
 8015eea:	6863      	ldr	r3, [r4, #4]
 8015eec:	2201      	movs	r2, #1
 8015eee:	741a      	strb	r2, [r3, #16]
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	bd10      	pop	{r4, pc}
 8015ef4:	2001      	movs	r0, #1
 8015ef6:	4770      	bx	lr

08015ef8 <calloc>:
 8015ef8:	4b02      	ldr	r3, [pc, #8]	@ (8015f04 <calloc+0xc>)
 8015efa:	460a      	mov	r2, r1
 8015efc:	4601      	mov	r1, r0
 8015efe:	6818      	ldr	r0, [r3, #0]
 8015f00:	f000 b802 	b.w	8015f08 <_calloc_r>
 8015f04:	20000254 	.word	0x20000254

08015f08 <_calloc_r>:
 8015f08:	b570      	push	{r4, r5, r6, lr}
 8015f0a:	fba1 5402 	umull	r5, r4, r1, r2
 8015f0e:	b93c      	cbnz	r4, 8015f20 <_calloc_r+0x18>
 8015f10:	4629      	mov	r1, r5
 8015f12:	f000 f887 	bl	8016024 <_malloc_r>
 8015f16:	4606      	mov	r6, r0
 8015f18:	b928      	cbnz	r0, 8015f26 <_calloc_r+0x1e>
 8015f1a:	2600      	movs	r6, #0
 8015f1c:	4630      	mov	r0, r6
 8015f1e:	bd70      	pop	{r4, r5, r6, pc}
 8015f20:	220c      	movs	r2, #12
 8015f22:	6002      	str	r2, [r0, #0]
 8015f24:	e7f9      	b.n	8015f1a <_calloc_r+0x12>
 8015f26:	462a      	mov	r2, r5
 8015f28:	4621      	mov	r1, r4
 8015f2a:	f000 fbcf 	bl	80166cc <memset>
 8015f2e:	e7f5      	b.n	8015f1c <_calloc_r+0x14>

08015f30 <getenv>:
 8015f30:	b507      	push	{r0, r1, r2, lr}
 8015f32:	4b04      	ldr	r3, [pc, #16]	@ (8015f44 <getenv+0x14>)
 8015f34:	4601      	mov	r1, r0
 8015f36:	aa01      	add	r2, sp, #4
 8015f38:	6818      	ldr	r0, [r3, #0]
 8015f3a:	f000 f805 	bl	8015f48 <_findenv_r>
 8015f3e:	b003      	add	sp, #12
 8015f40:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f44:	20000254 	.word	0x20000254

08015f48 <_findenv_r>:
 8015f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f4c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015fbc <_findenv_r+0x74>
 8015f50:	4606      	mov	r6, r0
 8015f52:	4689      	mov	r9, r1
 8015f54:	4617      	mov	r7, r2
 8015f56:	f000 fcaf 	bl	80168b8 <__env_lock>
 8015f5a:	f8da 4000 	ldr.w	r4, [sl]
 8015f5e:	b134      	cbz	r4, 8015f6e <_findenv_r+0x26>
 8015f60:	464b      	mov	r3, r9
 8015f62:	4698      	mov	r8, r3
 8015f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f68:	b13a      	cbz	r2, 8015f7a <_findenv_r+0x32>
 8015f6a:	2a3d      	cmp	r2, #61	@ 0x3d
 8015f6c:	d1f9      	bne.n	8015f62 <_findenv_r+0x1a>
 8015f6e:	4630      	mov	r0, r6
 8015f70:	f000 fca8 	bl	80168c4 <__env_unlock>
 8015f74:	2000      	movs	r0, #0
 8015f76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f7a:	eba8 0809 	sub.w	r8, r8, r9
 8015f7e:	46a3      	mov	fp, r4
 8015f80:	f854 0b04 	ldr.w	r0, [r4], #4
 8015f84:	2800      	cmp	r0, #0
 8015f86:	d0f2      	beq.n	8015f6e <_findenv_r+0x26>
 8015f88:	4642      	mov	r2, r8
 8015f8a:	4649      	mov	r1, r9
 8015f8c:	f000 fbb3 	bl	80166f6 <strncmp>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d1f4      	bne.n	8015f7e <_findenv_r+0x36>
 8015f94:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015f98:	eb03 0508 	add.w	r5, r3, r8
 8015f9c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015fa0:	2b3d      	cmp	r3, #61	@ 0x3d
 8015fa2:	d1ec      	bne.n	8015f7e <_findenv_r+0x36>
 8015fa4:	f8da 3000 	ldr.w	r3, [sl]
 8015fa8:	ebab 0303 	sub.w	r3, fp, r3
 8015fac:	109b      	asrs	r3, r3, #2
 8015fae:	4630      	mov	r0, r6
 8015fb0:	603b      	str	r3, [r7, #0]
 8015fb2:	f000 fc87 	bl	80168c4 <__env_unlock>
 8015fb6:	1c68      	adds	r0, r5, #1
 8015fb8:	e7dd      	b.n	8015f76 <_findenv_r+0x2e>
 8015fba:	bf00      	nop
 8015fbc:	20000004 	.word	0x20000004

08015fc0 <malloc>:
 8015fc0:	4b02      	ldr	r3, [pc, #8]	@ (8015fcc <malloc+0xc>)
 8015fc2:	4601      	mov	r1, r0
 8015fc4:	6818      	ldr	r0, [r3, #0]
 8015fc6:	f000 b82d 	b.w	8016024 <_malloc_r>
 8015fca:	bf00      	nop
 8015fcc:	20000254 	.word	0x20000254

08015fd0 <free>:
 8015fd0:	4b02      	ldr	r3, [pc, #8]	@ (8015fdc <free+0xc>)
 8015fd2:	4601      	mov	r1, r0
 8015fd4:	6818      	ldr	r0, [r3, #0]
 8015fd6:	f000 bc7b 	b.w	80168d0 <_free_r>
 8015fda:	bf00      	nop
 8015fdc:	20000254 	.word	0x20000254

08015fe0 <sbrk_aligned>:
 8015fe0:	b570      	push	{r4, r5, r6, lr}
 8015fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8016020 <sbrk_aligned+0x40>)
 8015fe4:	460c      	mov	r4, r1
 8015fe6:	6831      	ldr	r1, [r6, #0]
 8015fe8:	4605      	mov	r5, r0
 8015fea:	b911      	cbnz	r1, 8015ff2 <sbrk_aligned+0x12>
 8015fec:	f000 fbe0 	bl	80167b0 <_sbrk_r>
 8015ff0:	6030      	str	r0, [r6, #0]
 8015ff2:	4621      	mov	r1, r4
 8015ff4:	4628      	mov	r0, r5
 8015ff6:	f000 fbdb 	bl	80167b0 <_sbrk_r>
 8015ffa:	1c43      	adds	r3, r0, #1
 8015ffc:	d103      	bne.n	8016006 <sbrk_aligned+0x26>
 8015ffe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016002:	4620      	mov	r0, r4
 8016004:	bd70      	pop	{r4, r5, r6, pc}
 8016006:	1cc4      	adds	r4, r0, #3
 8016008:	f024 0403 	bic.w	r4, r4, #3
 801600c:	42a0      	cmp	r0, r4
 801600e:	d0f8      	beq.n	8016002 <sbrk_aligned+0x22>
 8016010:	1a21      	subs	r1, r4, r0
 8016012:	4628      	mov	r0, r5
 8016014:	f000 fbcc 	bl	80167b0 <_sbrk_r>
 8016018:	3001      	adds	r0, #1
 801601a:	d1f2      	bne.n	8016002 <sbrk_aligned+0x22>
 801601c:	e7ef      	b.n	8015ffe <sbrk_aligned+0x1e>
 801601e:	bf00      	nop
 8016020:	2000af78 	.word	0x2000af78

08016024 <_malloc_r>:
 8016024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016028:	1ccd      	adds	r5, r1, #3
 801602a:	f025 0503 	bic.w	r5, r5, #3
 801602e:	3508      	adds	r5, #8
 8016030:	2d0c      	cmp	r5, #12
 8016032:	bf38      	it	cc
 8016034:	250c      	movcc	r5, #12
 8016036:	2d00      	cmp	r5, #0
 8016038:	4606      	mov	r6, r0
 801603a:	db01      	blt.n	8016040 <_malloc_r+0x1c>
 801603c:	42a9      	cmp	r1, r5
 801603e:	d904      	bls.n	801604a <_malloc_r+0x26>
 8016040:	230c      	movs	r3, #12
 8016042:	6033      	str	r3, [r6, #0]
 8016044:	2000      	movs	r0, #0
 8016046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801604a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016120 <_malloc_r+0xfc>
 801604e:	f000 f869 	bl	8016124 <__malloc_lock>
 8016052:	f8d8 3000 	ldr.w	r3, [r8]
 8016056:	461c      	mov	r4, r3
 8016058:	bb44      	cbnz	r4, 80160ac <_malloc_r+0x88>
 801605a:	4629      	mov	r1, r5
 801605c:	4630      	mov	r0, r6
 801605e:	f7ff ffbf 	bl	8015fe0 <sbrk_aligned>
 8016062:	1c43      	adds	r3, r0, #1
 8016064:	4604      	mov	r4, r0
 8016066:	d158      	bne.n	801611a <_malloc_r+0xf6>
 8016068:	f8d8 4000 	ldr.w	r4, [r8]
 801606c:	4627      	mov	r7, r4
 801606e:	2f00      	cmp	r7, #0
 8016070:	d143      	bne.n	80160fa <_malloc_r+0xd6>
 8016072:	2c00      	cmp	r4, #0
 8016074:	d04b      	beq.n	801610e <_malloc_r+0xea>
 8016076:	6823      	ldr	r3, [r4, #0]
 8016078:	4639      	mov	r1, r7
 801607a:	4630      	mov	r0, r6
 801607c:	eb04 0903 	add.w	r9, r4, r3
 8016080:	f000 fb96 	bl	80167b0 <_sbrk_r>
 8016084:	4581      	cmp	r9, r0
 8016086:	d142      	bne.n	801610e <_malloc_r+0xea>
 8016088:	6821      	ldr	r1, [r4, #0]
 801608a:	1a6d      	subs	r5, r5, r1
 801608c:	4629      	mov	r1, r5
 801608e:	4630      	mov	r0, r6
 8016090:	f7ff ffa6 	bl	8015fe0 <sbrk_aligned>
 8016094:	3001      	adds	r0, #1
 8016096:	d03a      	beq.n	801610e <_malloc_r+0xea>
 8016098:	6823      	ldr	r3, [r4, #0]
 801609a:	442b      	add	r3, r5
 801609c:	6023      	str	r3, [r4, #0]
 801609e:	f8d8 3000 	ldr.w	r3, [r8]
 80160a2:	685a      	ldr	r2, [r3, #4]
 80160a4:	bb62      	cbnz	r2, 8016100 <_malloc_r+0xdc>
 80160a6:	f8c8 7000 	str.w	r7, [r8]
 80160aa:	e00f      	b.n	80160cc <_malloc_r+0xa8>
 80160ac:	6822      	ldr	r2, [r4, #0]
 80160ae:	1b52      	subs	r2, r2, r5
 80160b0:	d420      	bmi.n	80160f4 <_malloc_r+0xd0>
 80160b2:	2a0b      	cmp	r2, #11
 80160b4:	d917      	bls.n	80160e6 <_malloc_r+0xc2>
 80160b6:	1961      	adds	r1, r4, r5
 80160b8:	42a3      	cmp	r3, r4
 80160ba:	6025      	str	r5, [r4, #0]
 80160bc:	bf18      	it	ne
 80160be:	6059      	strne	r1, [r3, #4]
 80160c0:	6863      	ldr	r3, [r4, #4]
 80160c2:	bf08      	it	eq
 80160c4:	f8c8 1000 	streq.w	r1, [r8]
 80160c8:	5162      	str	r2, [r4, r5]
 80160ca:	604b      	str	r3, [r1, #4]
 80160cc:	4630      	mov	r0, r6
 80160ce:	f000 f82f 	bl	8016130 <__malloc_unlock>
 80160d2:	f104 000b 	add.w	r0, r4, #11
 80160d6:	1d23      	adds	r3, r4, #4
 80160d8:	f020 0007 	bic.w	r0, r0, #7
 80160dc:	1ac2      	subs	r2, r0, r3
 80160de:	bf1c      	itt	ne
 80160e0:	1a1b      	subne	r3, r3, r0
 80160e2:	50a3      	strne	r3, [r4, r2]
 80160e4:	e7af      	b.n	8016046 <_malloc_r+0x22>
 80160e6:	6862      	ldr	r2, [r4, #4]
 80160e8:	42a3      	cmp	r3, r4
 80160ea:	bf0c      	ite	eq
 80160ec:	f8c8 2000 	streq.w	r2, [r8]
 80160f0:	605a      	strne	r2, [r3, #4]
 80160f2:	e7eb      	b.n	80160cc <_malloc_r+0xa8>
 80160f4:	4623      	mov	r3, r4
 80160f6:	6864      	ldr	r4, [r4, #4]
 80160f8:	e7ae      	b.n	8016058 <_malloc_r+0x34>
 80160fa:	463c      	mov	r4, r7
 80160fc:	687f      	ldr	r7, [r7, #4]
 80160fe:	e7b6      	b.n	801606e <_malloc_r+0x4a>
 8016100:	461a      	mov	r2, r3
 8016102:	685b      	ldr	r3, [r3, #4]
 8016104:	42a3      	cmp	r3, r4
 8016106:	d1fb      	bne.n	8016100 <_malloc_r+0xdc>
 8016108:	2300      	movs	r3, #0
 801610a:	6053      	str	r3, [r2, #4]
 801610c:	e7de      	b.n	80160cc <_malloc_r+0xa8>
 801610e:	230c      	movs	r3, #12
 8016110:	6033      	str	r3, [r6, #0]
 8016112:	4630      	mov	r0, r6
 8016114:	f000 f80c 	bl	8016130 <__malloc_unlock>
 8016118:	e794      	b.n	8016044 <_malloc_r+0x20>
 801611a:	6005      	str	r5, [r0, #0]
 801611c:	e7d6      	b.n	80160cc <_malloc_r+0xa8>
 801611e:	bf00      	nop
 8016120:	2000af7c 	.word	0x2000af7c

08016124 <__malloc_lock>:
 8016124:	4801      	ldr	r0, [pc, #4]	@ (801612c <__malloc_lock+0x8>)
 8016126:	f000 bb90 	b.w	801684a <__retarget_lock_acquire_recursive>
 801612a:	bf00      	nop
 801612c:	2000b0c1 	.word	0x2000b0c1

08016130 <__malloc_unlock>:
 8016130:	4801      	ldr	r0, [pc, #4]	@ (8016138 <__malloc_unlock+0x8>)
 8016132:	f000 bb8b 	b.w	801684c <__retarget_lock_release_recursive>
 8016136:	bf00      	nop
 8016138:	2000b0c1 	.word	0x2000b0c1

0801613c <srand>:
 801613c:	b538      	push	{r3, r4, r5, lr}
 801613e:	4b10      	ldr	r3, [pc, #64]	@ (8016180 <srand+0x44>)
 8016140:	681d      	ldr	r5, [r3, #0]
 8016142:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016144:	4604      	mov	r4, r0
 8016146:	b9b3      	cbnz	r3, 8016176 <srand+0x3a>
 8016148:	2018      	movs	r0, #24
 801614a:	f7ff ff39 	bl	8015fc0 <malloc>
 801614e:	4602      	mov	r2, r0
 8016150:	6328      	str	r0, [r5, #48]	@ 0x30
 8016152:	b920      	cbnz	r0, 801615e <srand+0x22>
 8016154:	4b0b      	ldr	r3, [pc, #44]	@ (8016184 <srand+0x48>)
 8016156:	480c      	ldr	r0, [pc, #48]	@ (8016188 <srand+0x4c>)
 8016158:	2146      	movs	r1, #70	@ 0x46
 801615a:	f000 fb8f 	bl	801687c <__assert_func>
 801615e:	490b      	ldr	r1, [pc, #44]	@ (801618c <srand+0x50>)
 8016160:	4b0b      	ldr	r3, [pc, #44]	@ (8016190 <srand+0x54>)
 8016162:	e9c0 1300 	strd	r1, r3, [r0]
 8016166:	4b0b      	ldr	r3, [pc, #44]	@ (8016194 <srand+0x58>)
 8016168:	6083      	str	r3, [r0, #8]
 801616a:	230b      	movs	r3, #11
 801616c:	8183      	strh	r3, [r0, #12]
 801616e:	2100      	movs	r1, #0
 8016170:	2001      	movs	r0, #1
 8016172:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016176:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016178:	2200      	movs	r2, #0
 801617a:	611c      	str	r4, [r3, #16]
 801617c:	615a      	str	r2, [r3, #20]
 801617e:	bd38      	pop	{r3, r4, r5, pc}
 8016180:	20000254 	.word	0x20000254
 8016184:	08018700 	.word	0x08018700
 8016188:	08018717 	.word	0x08018717
 801618c:	abcd330e 	.word	0xabcd330e
 8016190:	e66d1234 	.word	0xe66d1234
 8016194:	0005deec 	.word	0x0005deec

08016198 <rand>:
 8016198:	4b16      	ldr	r3, [pc, #88]	@ (80161f4 <rand+0x5c>)
 801619a:	b510      	push	{r4, lr}
 801619c:	681c      	ldr	r4, [r3, #0]
 801619e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80161a0:	b9b3      	cbnz	r3, 80161d0 <rand+0x38>
 80161a2:	2018      	movs	r0, #24
 80161a4:	f7ff ff0c 	bl	8015fc0 <malloc>
 80161a8:	4602      	mov	r2, r0
 80161aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80161ac:	b920      	cbnz	r0, 80161b8 <rand+0x20>
 80161ae:	4b12      	ldr	r3, [pc, #72]	@ (80161f8 <rand+0x60>)
 80161b0:	4812      	ldr	r0, [pc, #72]	@ (80161fc <rand+0x64>)
 80161b2:	2152      	movs	r1, #82	@ 0x52
 80161b4:	f000 fb62 	bl	801687c <__assert_func>
 80161b8:	4911      	ldr	r1, [pc, #68]	@ (8016200 <rand+0x68>)
 80161ba:	4b12      	ldr	r3, [pc, #72]	@ (8016204 <rand+0x6c>)
 80161bc:	e9c0 1300 	strd	r1, r3, [r0]
 80161c0:	4b11      	ldr	r3, [pc, #68]	@ (8016208 <rand+0x70>)
 80161c2:	6083      	str	r3, [r0, #8]
 80161c4:	230b      	movs	r3, #11
 80161c6:	8183      	strh	r3, [r0, #12]
 80161c8:	2100      	movs	r1, #0
 80161ca:	2001      	movs	r0, #1
 80161cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80161d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80161d2:	480e      	ldr	r0, [pc, #56]	@ (801620c <rand+0x74>)
 80161d4:	690b      	ldr	r3, [r1, #16]
 80161d6:	694c      	ldr	r4, [r1, #20]
 80161d8:	4a0d      	ldr	r2, [pc, #52]	@ (8016210 <rand+0x78>)
 80161da:	4358      	muls	r0, r3
 80161dc:	fb02 0004 	mla	r0, r2, r4, r0
 80161e0:	fba3 3202 	umull	r3, r2, r3, r2
 80161e4:	3301      	adds	r3, #1
 80161e6:	eb40 0002 	adc.w	r0, r0, r2
 80161ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80161ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80161f2:	bd10      	pop	{r4, pc}
 80161f4:	20000254 	.word	0x20000254
 80161f8:	08018700 	.word	0x08018700
 80161fc:	08018717 	.word	0x08018717
 8016200:	abcd330e 	.word	0xabcd330e
 8016204:	e66d1234 	.word	0xe66d1234
 8016208:	0005deec 	.word	0x0005deec
 801620c:	5851f42d 	.word	0x5851f42d
 8016210:	4c957f2d 	.word	0x4c957f2d

08016214 <realloc>:
 8016214:	4b02      	ldr	r3, [pc, #8]	@ (8016220 <realloc+0xc>)
 8016216:	460a      	mov	r2, r1
 8016218:	4601      	mov	r1, r0
 801621a:	6818      	ldr	r0, [r3, #0]
 801621c:	f000 b802 	b.w	8016224 <_realloc_r>
 8016220:	20000254 	.word	0x20000254

08016224 <_realloc_r>:
 8016224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016228:	4680      	mov	r8, r0
 801622a:	4615      	mov	r5, r2
 801622c:	460c      	mov	r4, r1
 801622e:	b921      	cbnz	r1, 801623a <_realloc_r+0x16>
 8016230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016234:	4611      	mov	r1, r2
 8016236:	f7ff bef5 	b.w	8016024 <_malloc_r>
 801623a:	b92a      	cbnz	r2, 8016248 <_realloc_r+0x24>
 801623c:	f000 fb48 	bl	80168d0 <_free_r>
 8016240:	2400      	movs	r4, #0
 8016242:	4620      	mov	r0, r4
 8016244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016248:	f000 fb8c 	bl	8016964 <_malloc_usable_size_r>
 801624c:	4285      	cmp	r5, r0
 801624e:	4606      	mov	r6, r0
 8016250:	d802      	bhi.n	8016258 <_realloc_r+0x34>
 8016252:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016256:	d8f4      	bhi.n	8016242 <_realloc_r+0x1e>
 8016258:	4629      	mov	r1, r5
 801625a:	4640      	mov	r0, r8
 801625c:	f7ff fee2 	bl	8016024 <_malloc_r>
 8016260:	4607      	mov	r7, r0
 8016262:	2800      	cmp	r0, #0
 8016264:	d0ec      	beq.n	8016240 <_realloc_r+0x1c>
 8016266:	42b5      	cmp	r5, r6
 8016268:	462a      	mov	r2, r5
 801626a:	4621      	mov	r1, r4
 801626c:	bf28      	it	cs
 801626e:	4632      	movcs	r2, r6
 8016270:	f000 faf5 	bl	801685e <memcpy>
 8016274:	4621      	mov	r1, r4
 8016276:	4640      	mov	r0, r8
 8016278:	f000 fb2a 	bl	80168d0 <_free_r>
 801627c:	463c      	mov	r4, r7
 801627e:	e7e0      	b.n	8016242 <_realloc_r+0x1e>

08016280 <_strtoul_l.constprop.0>:
 8016280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016284:	4e34      	ldr	r6, [pc, #208]	@ (8016358 <_strtoul_l.constprop.0+0xd8>)
 8016286:	4686      	mov	lr, r0
 8016288:	460d      	mov	r5, r1
 801628a:	4628      	mov	r0, r5
 801628c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016290:	5d37      	ldrb	r7, [r6, r4]
 8016292:	f017 0708 	ands.w	r7, r7, #8
 8016296:	d1f8      	bne.n	801628a <_strtoul_l.constprop.0+0xa>
 8016298:	2c2d      	cmp	r4, #45	@ 0x2d
 801629a:	d12f      	bne.n	80162fc <_strtoul_l.constprop.0+0x7c>
 801629c:	782c      	ldrb	r4, [r5, #0]
 801629e:	2701      	movs	r7, #1
 80162a0:	1c85      	adds	r5, r0, #2
 80162a2:	f033 0010 	bics.w	r0, r3, #16
 80162a6:	d109      	bne.n	80162bc <_strtoul_l.constprop.0+0x3c>
 80162a8:	2c30      	cmp	r4, #48	@ 0x30
 80162aa:	d12c      	bne.n	8016306 <_strtoul_l.constprop.0+0x86>
 80162ac:	7828      	ldrb	r0, [r5, #0]
 80162ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80162b2:	2858      	cmp	r0, #88	@ 0x58
 80162b4:	d127      	bne.n	8016306 <_strtoul_l.constprop.0+0x86>
 80162b6:	786c      	ldrb	r4, [r5, #1]
 80162b8:	2310      	movs	r3, #16
 80162ba:	3502      	adds	r5, #2
 80162bc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80162c0:	2600      	movs	r6, #0
 80162c2:	fbb8 f8f3 	udiv	r8, r8, r3
 80162c6:	fb03 f908 	mul.w	r9, r3, r8
 80162ca:	ea6f 0909 	mvn.w	r9, r9
 80162ce:	4630      	mov	r0, r6
 80162d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80162d4:	f1bc 0f09 	cmp.w	ip, #9
 80162d8:	d81c      	bhi.n	8016314 <_strtoul_l.constprop.0+0x94>
 80162da:	4664      	mov	r4, ip
 80162dc:	42a3      	cmp	r3, r4
 80162de:	dd2a      	ble.n	8016336 <_strtoul_l.constprop.0+0xb6>
 80162e0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80162e4:	d007      	beq.n	80162f6 <_strtoul_l.constprop.0+0x76>
 80162e6:	4580      	cmp	r8, r0
 80162e8:	d322      	bcc.n	8016330 <_strtoul_l.constprop.0+0xb0>
 80162ea:	d101      	bne.n	80162f0 <_strtoul_l.constprop.0+0x70>
 80162ec:	45a1      	cmp	r9, r4
 80162ee:	db1f      	blt.n	8016330 <_strtoul_l.constprop.0+0xb0>
 80162f0:	fb00 4003 	mla	r0, r0, r3, r4
 80162f4:	2601      	movs	r6, #1
 80162f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80162fa:	e7e9      	b.n	80162d0 <_strtoul_l.constprop.0+0x50>
 80162fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80162fe:	bf04      	itt	eq
 8016300:	782c      	ldrbeq	r4, [r5, #0]
 8016302:	1c85      	addeq	r5, r0, #2
 8016304:	e7cd      	b.n	80162a2 <_strtoul_l.constprop.0+0x22>
 8016306:	2b00      	cmp	r3, #0
 8016308:	d1d8      	bne.n	80162bc <_strtoul_l.constprop.0+0x3c>
 801630a:	2c30      	cmp	r4, #48	@ 0x30
 801630c:	bf0c      	ite	eq
 801630e:	2308      	moveq	r3, #8
 8016310:	230a      	movne	r3, #10
 8016312:	e7d3      	b.n	80162bc <_strtoul_l.constprop.0+0x3c>
 8016314:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016318:	f1bc 0f19 	cmp.w	ip, #25
 801631c:	d801      	bhi.n	8016322 <_strtoul_l.constprop.0+0xa2>
 801631e:	3c37      	subs	r4, #55	@ 0x37
 8016320:	e7dc      	b.n	80162dc <_strtoul_l.constprop.0+0x5c>
 8016322:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016326:	f1bc 0f19 	cmp.w	ip, #25
 801632a:	d804      	bhi.n	8016336 <_strtoul_l.constprop.0+0xb6>
 801632c:	3c57      	subs	r4, #87	@ 0x57
 801632e:	e7d5      	b.n	80162dc <_strtoul_l.constprop.0+0x5c>
 8016330:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016334:	e7df      	b.n	80162f6 <_strtoul_l.constprop.0+0x76>
 8016336:	1c73      	adds	r3, r6, #1
 8016338:	d106      	bne.n	8016348 <_strtoul_l.constprop.0+0xc8>
 801633a:	2322      	movs	r3, #34	@ 0x22
 801633c:	f8ce 3000 	str.w	r3, [lr]
 8016340:	4630      	mov	r0, r6
 8016342:	b932      	cbnz	r2, 8016352 <_strtoul_l.constprop.0+0xd2>
 8016344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016348:	b107      	cbz	r7, 801634c <_strtoul_l.constprop.0+0xcc>
 801634a:	4240      	negs	r0, r0
 801634c:	2a00      	cmp	r2, #0
 801634e:	d0f9      	beq.n	8016344 <_strtoul_l.constprop.0+0xc4>
 8016350:	b106      	cbz	r6, 8016354 <_strtoul_l.constprop.0+0xd4>
 8016352:	1e69      	subs	r1, r5, #1
 8016354:	6011      	str	r1, [r2, #0]
 8016356:	e7f5      	b.n	8016344 <_strtoul_l.constprop.0+0xc4>
 8016358:	08018770 	.word	0x08018770

0801635c <strtoul>:
 801635c:	4613      	mov	r3, r2
 801635e:	460a      	mov	r2, r1
 8016360:	4601      	mov	r1, r0
 8016362:	4802      	ldr	r0, [pc, #8]	@ (801636c <strtoul+0x10>)
 8016364:	6800      	ldr	r0, [r0, #0]
 8016366:	f7ff bf8b 	b.w	8016280 <_strtoul_l.constprop.0>
 801636a:	bf00      	nop
 801636c:	20000254 	.word	0x20000254

08016370 <std>:
 8016370:	2300      	movs	r3, #0
 8016372:	b510      	push	{r4, lr}
 8016374:	4604      	mov	r4, r0
 8016376:	e9c0 3300 	strd	r3, r3, [r0]
 801637a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801637e:	6083      	str	r3, [r0, #8]
 8016380:	8181      	strh	r1, [r0, #12]
 8016382:	6643      	str	r3, [r0, #100]	@ 0x64
 8016384:	81c2      	strh	r2, [r0, #14]
 8016386:	6183      	str	r3, [r0, #24]
 8016388:	4619      	mov	r1, r3
 801638a:	2208      	movs	r2, #8
 801638c:	305c      	adds	r0, #92	@ 0x5c
 801638e:	f000 f99d 	bl	80166cc <memset>
 8016392:	4b0d      	ldr	r3, [pc, #52]	@ (80163c8 <std+0x58>)
 8016394:	6263      	str	r3, [r4, #36]	@ 0x24
 8016396:	4b0d      	ldr	r3, [pc, #52]	@ (80163cc <std+0x5c>)
 8016398:	62a3      	str	r3, [r4, #40]	@ 0x28
 801639a:	4b0d      	ldr	r3, [pc, #52]	@ (80163d0 <std+0x60>)
 801639c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801639e:	4b0d      	ldr	r3, [pc, #52]	@ (80163d4 <std+0x64>)
 80163a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80163a2:	4b0d      	ldr	r3, [pc, #52]	@ (80163d8 <std+0x68>)
 80163a4:	6224      	str	r4, [r4, #32]
 80163a6:	429c      	cmp	r4, r3
 80163a8:	d006      	beq.n	80163b8 <std+0x48>
 80163aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80163ae:	4294      	cmp	r4, r2
 80163b0:	d002      	beq.n	80163b8 <std+0x48>
 80163b2:	33d0      	adds	r3, #208	@ 0xd0
 80163b4:	429c      	cmp	r4, r3
 80163b6:	d105      	bne.n	80163c4 <std+0x54>
 80163b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80163bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163c0:	f000 ba42 	b.w	8016848 <__retarget_lock_init_recursive>
 80163c4:	bd10      	pop	{r4, pc}
 80163c6:	bf00      	nop
 80163c8:	08016581 	.word	0x08016581
 80163cc:	080165a3 	.word	0x080165a3
 80163d0:	080165db 	.word	0x080165db
 80163d4:	080165ff 	.word	0x080165ff
 80163d8:	2000af80 	.word	0x2000af80

080163dc <stdio_exit_handler>:
 80163dc:	4a02      	ldr	r2, [pc, #8]	@ (80163e8 <stdio_exit_handler+0xc>)
 80163de:	4903      	ldr	r1, [pc, #12]	@ (80163ec <stdio_exit_handler+0x10>)
 80163e0:	4803      	ldr	r0, [pc, #12]	@ (80163f0 <stdio_exit_handler+0x14>)
 80163e2:	f000 b869 	b.w	80164b8 <_fwalk_sglue>
 80163e6:	bf00      	nop
 80163e8:	20000248 	.word	0x20000248
 80163ec:	080172cd 	.word	0x080172cd
 80163f0:	20000258 	.word	0x20000258

080163f4 <cleanup_stdio>:
 80163f4:	6841      	ldr	r1, [r0, #4]
 80163f6:	4b0c      	ldr	r3, [pc, #48]	@ (8016428 <cleanup_stdio+0x34>)
 80163f8:	4299      	cmp	r1, r3
 80163fa:	b510      	push	{r4, lr}
 80163fc:	4604      	mov	r4, r0
 80163fe:	d001      	beq.n	8016404 <cleanup_stdio+0x10>
 8016400:	f000 ff64 	bl	80172cc <_fflush_r>
 8016404:	68a1      	ldr	r1, [r4, #8]
 8016406:	4b09      	ldr	r3, [pc, #36]	@ (801642c <cleanup_stdio+0x38>)
 8016408:	4299      	cmp	r1, r3
 801640a:	d002      	beq.n	8016412 <cleanup_stdio+0x1e>
 801640c:	4620      	mov	r0, r4
 801640e:	f000 ff5d 	bl	80172cc <_fflush_r>
 8016412:	68e1      	ldr	r1, [r4, #12]
 8016414:	4b06      	ldr	r3, [pc, #24]	@ (8016430 <cleanup_stdio+0x3c>)
 8016416:	4299      	cmp	r1, r3
 8016418:	d004      	beq.n	8016424 <cleanup_stdio+0x30>
 801641a:	4620      	mov	r0, r4
 801641c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016420:	f000 bf54 	b.w	80172cc <_fflush_r>
 8016424:	bd10      	pop	{r4, pc}
 8016426:	bf00      	nop
 8016428:	2000af80 	.word	0x2000af80
 801642c:	2000afe8 	.word	0x2000afe8
 8016430:	2000b050 	.word	0x2000b050

08016434 <global_stdio_init.part.0>:
 8016434:	b510      	push	{r4, lr}
 8016436:	4b0b      	ldr	r3, [pc, #44]	@ (8016464 <global_stdio_init.part.0+0x30>)
 8016438:	4c0b      	ldr	r4, [pc, #44]	@ (8016468 <global_stdio_init.part.0+0x34>)
 801643a:	4a0c      	ldr	r2, [pc, #48]	@ (801646c <global_stdio_init.part.0+0x38>)
 801643c:	601a      	str	r2, [r3, #0]
 801643e:	4620      	mov	r0, r4
 8016440:	2200      	movs	r2, #0
 8016442:	2104      	movs	r1, #4
 8016444:	f7ff ff94 	bl	8016370 <std>
 8016448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801644c:	2201      	movs	r2, #1
 801644e:	2109      	movs	r1, #9
 8016450:	f7ff ff8e 	bl	8016370 <std>
 8016454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016458:	2202      	movs	r2, #2
 801645a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801645e:	2112      	movs	r1, #18
 8016460:	f7ff bf86 	b.w	8016370 <std>
 8016464:	2000b0b8 	.word	0x2000b0b8
 8016468:	2000af80 	.word	0x2000af80
 801646c:	080163dd 	.word	0x080163dd

08016470 <__sfp_lock_acquire>:
 8016470:	4801      	ldr	r0, [pc, #4]	@ (8016478 <__sfp_lock_acquire+0x8>)
 8016472:	f000 b9ea 	b.w	801684a <__retarget_lock_acquire_recursive>
 8016476:	bf00      	nop
 8016478:	2000b0c2 	.word	0x2000b0c2

0801647c <__sfp_lock_release>:
 801647c:	4801      	ldr	r0, [pc, #4]	@ (8016484 <__sfp_lock_release+0x8>)
 801647e:	f000 b9e5 	b.w	801684c <__retarget_lock_release_recursive>
 8016482:	bf00      	nop
 8016484:	2000b0c2 	.word	0x2000b0c2

08016488 <__sinit>:
 8016488:	b510      	push	{r4, lr}
 801648a:	4604      	mov	r4, r0
 801648c:	f7ff fff0 	bl	8016470 <__sfp_lock_acquire>
 8016490:	6a23      	ldr	r3, [r4, #32]
 8016492:	b11b      	cbz	r3, 801649c <__sinit+0x14>
 8016494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016498:	f7ff bff0 	b.w	801647c <__sfp_lock_release>
 801649c:	4b04      	ldr	r3, [pc, #16]	@ (80164b0 <__sinit+0x28>)
 801649e:	6223      	str	r3, [r4, #32]
 80164a0:	4b04      	ldr	r3, [pc, #16]	@ (80164b4 <__sinit+0x2c>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d1f5      	bne.n	8016494 <__sinit+0xc>
 80164a8:	f7ff ffc4 	bl	8016434 <global_stdio_init.part.0>
 80164ac:	e7f2      	b.n	8016494 <__sinit+0xc>
 80164ae:	bf00      	nop
 80164b0:	080163f5 	.word	0x080163f5
 80164b4:	2000b0b8 	.word	0x2000b0b8

080164b8 <_fwalk_sglue>:
 80164b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164bc:	4607      	mov	r7, r0
 80164be:	4688      	mov	r8, r1
 80164c0:	4614      	mov	r4, r2
 80164c2:	2600      	movs	r6, #0
 80164c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80164c8:	f1b9 0901 	subs.w	r9, r9, #1
 80164cc:	d505      	bpl.n	80164da <_fwalk_sglue+0x22>
 80164ce:	6824      	ldr	r4, [r4, #0]
 80164d0:	2c00      	cmp	r4, #0
 80164d2:	d1f7      	bne.n	80164c4 <_fwalk_sglue+0xc>
 80164d4:	4630      	mov	r0, r6
 80164d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164da:	89ab      	ldrh	r3, [r5, #12]
 80164dc:	2b01      	cmp	r3, #1
 80164de:	d907      	bls.n	80164f0 <_fwalk_sglue+0x38>
 80164e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164e4:	3301      	adds	r3, #1
 80164e6:	d003      	beq.n	80164f0 <_fwalk_sglue+0x38>
 80164e8:	4629      	mov	r1, r5
 80164ea:	4638      	mov	r0, r7
 80164ec:	47c0      	blx	r8
 80164ee:	4306      	orrs	r6, r0
 80164f0:	3568      	adds	r5, #104	@ 0x68
 80164f2:	e7e9      	b.n	80164c8 <_fwalk_sglue+0x10>

080164f4 <iprintf>:
 80164f4:	b40f      	push	{r0, r1, r2, r3}
 80164f6:	b507      	push	{r0, r1, r2, lr}
 80164f8:	4906      	ldr	r1, [pc, #24]	@ (8016514 <iprintf+0x20>)
 80164fa:	ab04      	add	r3, sp, #16
 80164fc:	6808      	ldr	r0, [r1, #0]
 80164fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016502:	6881      	ldr	r1, [r0, #8]
 8016504:	9301      	str	r3, [sp, #4]
 8016506:	f000 fbb7 	bl	8016c78 <_vfiprintf_r>
 801650a:	b003      	add	sp, #12
 801650c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016510:	b004      	add	sp, #16
 8016512:	4770      	bx	lr
 8016514:	20000254 	.word	0x20000254

08016518 <sniprintf>:
 8016518:	b40c      	push	{r2, r3}
 801651a:	b530      	push	{r4, r5, lr}
 801651c:	4b17      	ldr	r3, [pc, #92]	@ (801657c <sniprintf+0x64>)
 801651e:	1e0c      	subs	r4, r1, #0
 8016520:	681d      	ldr	r5, [r3, #0]
 8016522:	b09d      	sub	sp, #116	@ 0x74
 8016524:	da08      	bge.n	8016538 <sniprintf+0x20>
 8016526:	238b      	movs	r3, #139	@ 0x8b
 8016528:	602b      	str	r3, [r5, #0]
 801652a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801652e:	b01d      	add	sp, #116	@ 0x74
 8016530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016534:	b002      	add	sp, #8
 8016536:	4770      	bx	lr
 8016538:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801653c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016540:	bf14      	ite	ne
 8016542:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016546:	4623      	moveq	r3, r4
 8016548:	9304      	str	r3, [sp, #16]
 801654a:	9307      	str	r3, [sp, #28]
 801654c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016550:	9002      	str	r0, [sp, #8]
 8016552:	9006      	str	r0, [sp, #24]
 8016554:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016558:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801655a:	ab21      	add	r3, sp, #132	@ 0x84
 801655c:	a902      	add	r1, sp, #8
 801655e:	4628      	mov	r0, r5
 8016560:	9301      	str	r3, [sp, #4]
 8016562:	f000 fa63 	bl	8016a2c <_svfiprintf_r>
 8016566:	1c43      	adds	r3, r0, #1
 8016568:	bfbc      	itt	lt
 801656a:	238b      	movlt	r3, #139	@ 0x8b
 801656c:	602b      	strlt	r3, [r5, #0]
 801656e:	2c00      	cmp	r4, #0
 8016570:	d0dd      	beq.n	801652e <sniprintf+0x16>
 8016572:	9b02      	ldr	r3, [sp, #8]
 8016574:	2200      	movs	r2, #0
 8016576:	701a      	strb	r2, [r3, #0]
 8016578:	e7d9      	b.n	801652e <sniprintf+0x16>
 801657a:	bf00      	nop
 801657c:	20000254 	.word	0x20000254

08016580 <__sread>:
 8016580:	b510      	push	{r4, lr}
 8016582:	460c      	mov	r4, r1
 8016584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016588:	f000 f900 	bl	801678c <_read_r>
 801658c:	2800      	cmp	r0, #0
 801658e:	bfab      	itete	ge
 8016590:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016592:	89a3      	ldrhlt	r3, [r4, #12]
 8016594:	181b      	addge	r3, r3, r0
 8016596:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801659a:	bfac      	ite	ge
 801659c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801659e:	81a3      	strhlt	r3, [r4, #12]
 80165a0:	bd10      	pop	{r4, pc}

080165a2 <__swrite>:
 80165a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165a6:	461f      	mov	r7, r3
 80165a8:	898b      	ldrh	r3, [r1, #12]
 80165aa:	05db      	lsls	r3, r3, #23
 80165ac:	4605      	mov	r5, r0
 80165ae:	460c      	mov	r4, r1
 80165b0:	4616      	mov	r6, r2
 80165b2:	d505      	bpl.n	80165c0 <__swrite+0x1e>
 80165b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165b8:	2302      	movs	r3, #2
 80165ba:	2200      	movs	r2, #0
 80165bc:	f000 f8d4 	bl	8016768 <_lseek_r>
 80165c0:	89a3      	ldrh	r3, [r4, #12]
 80165c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80165ca:	81a3      	strh	r3, [r4, #12]
 80165cc:	4632      	mov	r2, r6
 80165ce:	463b      	mov	r3, r7
 80165d0:	4628      	mov	r0, r5
 80165d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165d6:	f000 b8fb 	b.w	80167d0 <_write_r>

080165da <__sseek>:
 80165da:	b510      	push	{r4, lr}
 80165dc:	460c      	mov	r4, r1
 80165de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165e2:	f000 f8c1 	bl	8016768 <_lseek_r>
 80165e6:	1c43      	adds	r3, r0, #1
 80165e8:	89a3      	ldrh	r3, [r4, #12]
 80165ea:	bf15      	itete	ne
 80165ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80165ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80165f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80165f6:	81a3      	strheq	r3, [r4, #12]
 80165f8:	bf18      	it	ne
 80165fa:	81a3      	strhne	r3, [r4, #12]
 80165fc:	bd10      	pop	{r4, pc}

080165fe <__sclose>:
 80165fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016602:	f000 b8a1 	b.w	8016748 <_close_r>

08016606 <_vsniprintf_r>:
 8016606:	b530      	push	{r4, r5, lr}
 8016608:	4614      	mov	r4, r2
 801660a:	2c00      	cmp	r4, #0
 801660c:	b09b      	sub	sp, #108	@ 0x6c
 801660e:	4605      	mov	r5, r0
 8016610:	461a      	mov	r2, r3
 8016612:	da05      	bge.n	8016620 <_vsniprintf_r+0x1a>
 8016614:	238b      	movs	r3, #139	@ 0x8b
 8016616:	6003      	str	r3, [r0, #0]
 8016618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801661c:	b01b      	add	sp, #108	@ 0x6c
 801661e:	bd30      	pop	{r4, r5, pc}
 8016620:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016624:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016628:	bf14      	ite	ne
 801662a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801662e:	4623      	moveq	r3, r4
 8016630:	9302      	str	r3, [sp, #8]
 8016632:	9305      	str	r3, [sp, #20]
 8016634:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016638:	9100      	str	r1, [sp, #0]
 801663a:	9104      	str	r1, [sp, #16]
 801663c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016640:	4669      	mov	r1, sp
 8016642:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016644:	f000 f9f2 	bl	8016a2c <_svfiprintf_r>
 8016648:	1c43      	adds	r3, r0, #1
 801664a:	bfbc      	itt	lt
 801664c:	238b      	movlt	r3, #139	@ 0x8b
 801664e:	602b      	strlt	r3, [r5, #0]
 8016650:	2c00      	cmp	r4, #0
 8016652:	d0e3      	beq.n	801661c <_vsniprintf_r+0x16>
 8016654:	9b00      	ldr	r3, [sp, #0]
 8016656:	2200      	movs	r2, #0
 8016658:	701a      	strb	r2, [r3, #0]
 801665a:	e7df      	b.n	801661c <_vsniprintf_r+0x16>

0801665c <vsniprintf>:
 801665c:	b507      	push	{r0, r1, r2, lr}
 801665e:	9300      	str	r3, [sp, #0]
 8016660:	4613      	mov	r3, r2
 8016662:	460a      	mov	r2, r1
 8016664:	4601      	mov	r1, r0
 8016666:	4803      	ldr	r0, [pc, #12]	@ (8016674 <vsniprintf+0x18>)
 8016668:	6800      	ldr	r0, [r0, #0]
 801666a:	f7ff ffcc 	bl	8016606 <_vsniprintf_r>
 801666e:	b003      	add	sp, #12
 8016670:	f85d fb04 	ldr.w	pc, [sp], #4
 8016674:	20000254 	.word	0x20000254

08016678 <memcmp>:
 8016678:	b510      	push	{r4, lr}
 801667a:	3901      	subs	r1, #1
 801667c:	4402      	add	r2, r0
 801667e:	4290      	cmp	r0, r2
 8016680:	d101      	bne.n	8016686 <memcmp+0xe>
 8016682:	2000      	movs	r0, #0
 8016684:	e005      	b.n	8016692 <memcmp+0x1a>
 8016686:	7803      	ldrb	r3, [r0, #0]
 8016688:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801668c:	42a3      	cmp	r3, r4
 801668e:	d001      	beq.n	8016694 <memcmp+0x1c>
 8016690:	1b18      	subs	r0, r3, r4
 8016692:	bd10      	pop	{r4, pc}
 8016694:	3001      	adds	r0, #1
 8016696:	e7f2      	b.n	801667e <memcmp+0x6>

08016698 <memmove>:
 8016698:	4288      	cmp	r0, r1
 801669a:	b510      	push	{r4, lr}
 801669c:	eb01 0402 	add.w	r4, r1, r2
 80166a0:	d902      	bls.n	80166a8 <memmove+0x10>
 80166a2:	4284      	cmp	r4, r0
 80166a4:	4623      	mov	r3, r4
 80166a6:	d807      	bhi.n	80166b8 <memmove+0x20>
 80166a8:	1e43      	subs	r3, r0, #1
 80166aa:	42a1      	cmp	r1, r4
 80166ac:	d008      	beq.n	80166c0 <memmove+0x28>
 80166ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80166b6:	e7f8      	b.n	80166aa <memmove+0x12>
 80166b8:	4402      	add	r2, r0
 80166ba:	4601      	mov	r1, r0
 80166bc:	428a      	cmp	r2, r1
 80166be:	d100      	bne.n	80166c2 <memmove+0x2a>
 80166c0:	bd10      	pop	{r4, pc}
 80166c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80166c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80166ca:	e7f7      	b.n	80166bc <memmove+0x24>

080166cc <memset>:
 80166cc:	4402      	add	r2, r0
 80166ce:	4603      	mov	r3, r0
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d100      	bne.n	80166d6 <memset+0xa>
 80166d4:	4770      	bx	lr
 80166d6:	f803 1b01 	strb.w	r1, [r3], #1
 80166da:	e7f9      	b.n	80166d0 <memset+0x4>

080166dc <strchr>:
 80166dc:	b2c9      	uxtb	r1, r1
 80166de:	4603      	mov	r3, r0
 80166e0:	4618      	mov	r0, r3
 80166e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166e6:	b112      	cbz	r2, 80166ee <strchr+0x12>
 80166e8:	428a      	cmp	r2, r1
 80166ea:	d1f9      	bne.n	80166e0 <strchr+0x4>
 80166ec:	4770      	bx	lr
 80166ee:	2900      	cmp	r1, #0
 80166f0:	bf18      	it	ne
 80166f2:	2000      	movne	r0, #0
 80166f4:	4770      	bx	lr

080166f6 <strncmp>:
 80166f6:	b510      	push	{r4, lr}
 80166f8:	b16a      	cbz	r2, 8016716 <strncmp+0x20>
 80166fa:	3901      	subs	r1, #1
 80166fc:	1884      	adds	r4, r0, r2
 80166fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016702:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016706:	429a      	cmp	r2, r3
 8016708:	d103      	bne.n	8016712 <strncmp+0x1c>
 801670a:	42a0      	cmp	r0, r4
 801670c:	d001      	beq.n	8016712 <strncmp+0x1c>
 801670e:	2a00      	cmp	r2, #0
 8016710:	d1f5      	bne.n	80166fe <strncmp+0x8>
 8016712:	1ad0      	subs	r0, r2, r3
 8016714:	bd10      	pop	{r4, pc}
 8016716:	4610      	mov	r0, r2
 8016718:	e7fc      	b.n	8016714 <strncmp+0x1e>

0801671a <strstr>:
 801671a:	780a      	ldrb	r2, [r1, #0]
 801671c:	b570      	push	{r4, r5, r6, lr}
 801671e:	b96a      	cbnz	r2, 801673c <strstr+0x22>
 8016720:	bd70      	pop	{r4, r5, r6, pc}
 8016722:	429a      	cmp	r2, r3
 8016724:	d109      	bne.n	801673a <strstr+0x20>
 8016726:	460c      	mov	r4, r1
 8016728:	4605      	mov	r5, r0
 801672a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801672e:	2b00      	cmp	r3, #0
 8016730:	d0f6      	beq.n	8016720 <strstr+0x6>
 8016732:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016736:	429e      	cmp	r6, r3
 8016738:	d0f7      	beq.n	801672a <strstr+0x10>
 801673a:	3001      	adds	r0, #1
 801673c:	7803      	ldrb	r3, [r0, #0]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d1ef      	bne.n	8016722 <strstr+0x8>
 8016742:	4618      	mov	r0, r3
 8016744:	e7ec      	b.n	8016720 <strstr+0x6>
	...

08016748 <_close_r>:
 8016748:	b538      	push	{r3, r4, r5, lr}
 801674a:	4d06      	ldr	r5, [pc, #24]	@ (8016764 <_close_r+0x1c>)
 801674c:	2300      	movs	r3, #0
 801674e:	4604      	mov	r4, r0
 8016750:	4608      	mov	r0, r1
 8016752:	602b      	str	r3, [r5, #0]
 8016754:	f7ea ffca 	bl	80016ec <_close>
 8016758:	1c43      	adds	r3, r0, #1
 801675a:	d102      	bne.n	8016762 <_close_r+0x1a>
 801675c:	682b      	ldr	r3, [r5, #0]
 801675e:	b103      	cbz	r3, 8016762 <_close_r+0x1a>
 8016760:	6023      	str	r3, [r4, #0]
 8016762:	bd38      	pop	{r3, r4, r5, pc}
 8016764:	2000b0bc 	.word	0x2000b0bc

08016768 <_lseek_r>:
 8016768:	b538      	push	{r3, r4, r5, lr}
 801676a:	4d07      	ldr	r5, [pc, #28]	@ (8016788 <_lseek_r+0x20>)
 801676c:	4604      	mov	r4, r0
 801676e:	4608      	mov	r0, r1
 8016770:	4611      	mov	r1, r2
 8016772:	2200      	movs	r2, #0
 8016774:	602a      	str	r2, [r5, #0]
 8016776:	461a      	mov	r2, r3
 8016778:	f7ea ffdf 	bl	800173a <_lseek>
 801677c:	1c43      	adds	r3, r0, #1
 801677e:	d102      	bne.n	8016786 <_lseek_r+0x1e>
 8016780:	682b      	ldr	r3, [r5, #0]
 8016782:	b103      	cbz	r3, 8016786 <_lseek_r+0x1e>
 8016784:	6023      	str	r3, [r4, #0]
 8016786:	bd38      	pop	{r3, r4, r5, pc}
 8016788:	2000b0bc 	.word	0x2000b0bc

0801678c <_read_r>:
 801678c:	b538      	push	{r3, r4, r5, lr}
 801678e:	4d07      	ldr	r5, [pc, #28]	@ (80167ac <_read_r+0x20>)
 8016790:	4604      	mov	r4, r0
 8016792:	4608      	mov	r0, r1
 8016794:	4611      	mov	r1, r2
 8016796:	2200      	movs	r2, #0
 8016798:	602a      	str	r2, [r5, #0]
 801679a:	461a      	mov	r2, r3
 801679c:	f7ea ff6d 	bl	800167a <_read>
 80167a0:	1c43      	adds	r3, r0, #1
 80167a2:	d102      	bne.n	80167aa <_read_r+0x1e>
 80167a4:	682b      	ldr	r3, [r5, #0]
 80167a6:	b103      	cbz	r3, 80167aa <_read_r+0x1e>
 80167a8:	6023      	str	r3, [r4, #0]
 80167aa:	bd38      	pop	{r3, r4, r5, pc}
 80167ac:	2000b0bc 	.word	0x2000b0bc

080167b0 <_sbrk_r>:
 80167b0:	b538      	push	{r3, r4, r5, lr}
 80167b2:	4d06      	ldr	r5, [pc, #24]	@ (80167cc <_sbrk_r+0x1c>)
 80167b4:	2300      	movs	r3, #0
 80167b6:	4604      	mov	r4, r0
 80167b8:	4608      	mov	r0, r1
 80167ba:	602b      	str	r3, [r5, #0]
 80167bc:	f7ea ffca 	bl	8001754 <_sbrk>
 80167c0:	1c43      	adds	r3, r0, #1
 80167c2:	d102      	bne.n	80167ca <_sbrk_r+0x1a>
 80167c4:	682b      	ldr	r3, [r5, #0]
 80167c6:	b103      	cbz	r3, 80167ca <_sbrk_r+0x1a>
 80167c8:	6023      	str	r3, [r4, #0]
 80167ca:	bd38      	pop	{r3, r4, r5, pc}
 80167cc:	2000b0bc 	.word	0x2000b0bc

080167d0 <_write_r>:
 80167d0:	b538      	push	{r3, r4, r5, lr}
 80167d2:	4d07      	ldr	r5, [pc, #28]	@ (80167f0 <_write_r+0x20>)
 80167d4:	4604      	mov	r4, r0
 80167d6:	4608      	mov	r0, r1
 80167d8:	4611      	mov	r1, r2
 80167da:	2200      	movs	r2, #0
 80167dc:	602a      	str	r2, [r5, #0]
 80167de:	461a      	mov	r2, r3
 80167e0:	f7ea ff68 	bl	80016b4 <_write>
 80167e4:	1c43      	adds	r3, r0, #1
 80167e6:	d102      	bne.n	80167ee <_write_r+0x1e>
 80167e8:	682b      	ldr	r3, [r5, #0]
 80167ea:	b103      	cbz	r3, 80167ee <_write_r+0x1e>
 80167ec:	6023      	str	r3, [r4, #0]
 80167ee:	bd38      	pop	{r3, r4, r5, pc}
 80167f0:	2000b0bc 	.word	0x2000b0bc

080167f4 <__errno>:
 80167f4:	4b01      	ldr	r3, [pc, #4]	@ (80167fc <__errno+0x8>)
 80167f6:	6818      	ldr	r0, [r3, #0]
 80167f8:	4770      	bx	lr
 80167fa:	bf00      	nop
 80167fc:	20000254 	.word	0x20000254

08016800 <__libc_init_array>:
 8016800:	b570      	push	{r4, r5, r6, lr}
 8016802:	4d0d      	ldr	r5, [pc, #52]	@ (8016838 <__libc_init_array+0x38>)
 8016804:	4c0d      	ldr	r4, [pc, #52]	@ (801683c <__libc_init_array+0x3c>)
 8016806:	1b64      	subs	r4, r4, r5
 8016808:	10a4      	asrs	r4, r4, #2
 801680a:	2600      	movs	r6, #0
 801680c:	42a6      	cmp	r6, r4
 801680e:	d109      	bne.n	8016824 <__libc_init_array+0x24>
 8016810:	4d0b      	ldr	r5, [pc, #44]	@ (8016840 <__libc_init_array+0x40>)
 8016812:	4c0c      	ldr	r4, [pc, #48]	@ (8016844 <__libc_init_array+0x44>)
 8016814:	f000 fef8 	bl	8017608 <_init>
 8016818:	1b64      	subs	r4, r4, r5
 801681a:	10a4      	asrs	r4, r4, #2
 801681c:	2600      	movs	r6, #0
 801681e:	42a6      	cmp	r6, r4
 8016820:	d105      	bne.n	801682e <__libc_init_array+0x2e>
 8016822:	bd70      	pop	{r4, r5, r6, pc}
 8016824:	f855 3b04 	ldr.w	r3, [r5], #4
 8016828:	4798      	blx	r3
 801682a:	3601      	adds	r6, #1
 801682c:	e7ee      	b.n	801680c <__libc_init_array+0xc>
 801682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016832:	4798      	blx	r3
 8016834:	3601      	adds	r6, #1
 8016836:	e7f2      	b.n	801681e <__libc_init_array+0x1e>
 8016838:	080188e8 	.word	0x080188e8
 801683c:	080188e8 	.word	0x080188e8
 8016840:	080188e8 	.word	0x080188e8
 8016844:	080188f4 	.word	0x080188f4

08016848 <__retarget_lock_init_recursive>:
 8016848:	4770      	bx	lr

0801684a <__retarget_lock_acquire_recursive>:
 801684a:	4770      	bx	lr

0801684c <__retarget_lock_release_recursive>:
 801684c:	4770      	bx	lr

0801684e <strcpy>:
 801684e:	4603      	mov	r3, r0
 8016850:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016854:	f803 2b01 	strb.w	r2, [r3], #1
 8016858:	2a00      	cmp	r2, #0
 801685a:	d1f9      	bne.n	8016850 <strcpy+0x2>
 801685c:	4770      	bx	lr

0801685e <memcpy>:
 801685e:	440a      	add	r2, r1
 8016860:	4291      	cmp	r1, r2
 8016862:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8016866:	d100      	bne.n	801686a <memcpy+0xc>
 8016868:	4770      	bx	lr
 801686a:	b510      	push	{r4, lr}
 801686c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016874:	4291      	cmp	r1, r2
 8016876:	d1f9      	bne.n	801686c <memcpy+0xe>
 8016878:	bd10      	pop	{r4, pc}
	...

0801687c <__assert_func>:
 801687c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801687e:	4614      	mov	r4, r2
 8016880:	461a      	mov	r2, r3
 8016882:	4b09      	ldr	r3, [pc, #36]	@ (80168a8 <__assert_func+0x2c>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	4605      	mov	r5, r0
 8016888:	68d8      	ldr	r0, [r3, #12]
 801688a:	b954      	cbnz	r4, 80168a2 <__assert_func+0x26>
 801688c:	4b07      	ldr	r3, [pc, #28]	@ (80168ac <__assert_func+0x30>)
 801688e:	461c      	mov	r4, r3
 8016890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016894:	9100      	str	r1, [sp, #0]
 8016896:	462b      	mov	r3, r5
 8016898:	4905      	ldr	r1, [pc, #20]	@ (80168b0 <__assert_func+0x34>)
 801689a:	f000 fd3f 	bl	801731c <fiprintf>
 801689e:	f000 fde3 	bl	8017468 <abort>
 80168a2:	4b04      	ldr	r3, [pc, #16]	@ (80168b4 <__assert_func+0x38>)
 80168a4:	e7f4      	b.n	8016890 <__assert_func+0x14>
 80168a6:	bf00      	nop
 80168a8:	20000254 	.word	0x20000254
 80168ac:	080188ab 	.word	0x080188ab
 80168b0:	0801887d 	.word	0x0801887d
 80168b4:	08018870 	.word	0x08018870

080168b8 <__env_lock>:
 80168b8:	4801      	ldr	r0, [pc, #4]	@ (80168c0 <__env_lock+0x8>)
 80168ba:	f7ff bfc6 	b.w	801684a <__retarget_lock_acquire_recursive>
 80168be:	bf00      	nop
 80168c0:	2000b0c0 	.word	0x2000b0c0

080168c4 <__env_unlock>:
 80168c4:	4801      	ldr	r0, [pc, #4]	@ (80168cc <__env_unlock+0x8>)
 80168c6:	f7ff bfc1 	b.w	801684c <__retarget_lock_release_recursive>
 80168ca:	bf00      	nop
 80168cc:	2000b0c0 	.word	0x2000b0c0

080168d0 <_free_r>:
 80168d0:	b538      	push	{r3, r4, r5, lr}
 80168d2:	4605      	mov	r5, r0
 80168d4:	2900      	cmp	r1, #0
 80168d6:	d041      	beq.n	801695c <_free_r+0x8c>
 80168d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168dc:	1f0c      	subs	r4, r1, #4
 80168de:	2b00      	cmp	r3, #0
 80168e0:	bfb8      	it	lt
 80168e2:	18e4      	addlt	r4, r4, r3
 80168e4:	f7ff fc1e 	bl	8016124 <__malloc_lock>
 80168e8:	4a1d      	ldr	r2, [pc, #116]	@ (8016960 <_free_r+0x90>)
 80168ea:	6813      	ldr	r3, [r2, #0]
 80168ec:	b933      	cbnz	r3, 80168fc <_free_r+0x2c>
 80168ee:	6063      	str	r3, [r4, #4]
 80168f0:	6014      	str	r4, [r2, #0]
 80168f2:	4628      	mov	r0, r5
 80168f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168f8:	f7ff bc1a 	b.w	8016130 <__malloc_unlock>
 80168fc:	42a3      	cmp	r3, r4
 80168fe:	d908      	bls.n	8016912 <_free_r+0x42>
 8016900:	6820      	ldr	r0, [r4, #0]
 8016902:	1821      	adds	r1, r4, r0
 8016904:	428b      	cmp	r3, r1
 8016906:	bf01      	itttt	eq
 8016908:	6819      	ldreq	r1, [r3, #0]
 801690a:	685b      	ldreq	r3, [r3, #4]
 801690c:	1809      	addeq	r1, r1, r0
 801690e:	6021      	streq	r1, [r4, #0]
 8016910:	e7ed      	b.n	80168ee <_free_r+0x1e>
 8016912:	461a      	mov	r2, r3
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	b10b      	cbz	r3, 801691c <_free_r+0x4c>
 8016918:	42a3      	cmp	r3, r4
 801691a:	d9fa      	bls.n	8016912 <_free_r+0x42>
 801691c:	6811      	ldr	r1, [r2, #0]
 801691e:	1850      	adds	r0, r2, r1
 8016920:	42a0      	cmp	r0, r4
 8016922:	d10b      	bne.n	801693c <_free_r+0x6c>
 8016924:	6820      	ldr	r0, [r4, #0]
 8016926:	4401      	add	r1, r0
 8016928:	1850      	adds	r0, r2, r1
 801692a:	4283      	cmp	r3, r0
 801692c:	6011      	str	r1, [r2, #0]
 801692e:	d1e0      	bne.n	80168f2 <_free_r+0x22>
 8016930:	6818      	ldr	r0, [r3, #0]
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	6053      	str	r3, [r2, #4]
 8016936:	4408      	add	r0, r1
 8016938:	6010      	str	r0, [r2, #0]
 801693a:	e7da      	b.n	80168f2 <_free_r+0x22>
 801693c:	d902      	bls.n	8016944 <_free_r+0x74>
 801693e:	230c      	movs	r3, #12
 8016940:	602b      	str	r3, [r5, #0]
 8016942:	e7d6      	b.n	80168f2 <_free_r+0x22>
 8016944:	6820      	ldr	r0, [r4, #0]
 8016946:	1821      	adds	r1, r4, r0
 8016948:	428b      	cmp	r3, r1
 801694a:	bf04      	itt	eq
 801694c:	6819      	ldreq	r1, [r3, #0]
 801694e:	685b      	ldreq	r3, [r3, #4]
 8016950:	6063      	str	r3, [r4, #4]
 8016952:	bf04      	itt	eq
 8016954:	1809      	addeq	r1, r1, r0
 8016956:	6021      	streq	r1, [r4, #0]
 8016958:	6054      	str	r4, [r2, #4]
 801695a:	e7ca      	b.n	80168f2 <_free_r+0x22>
 801695c:	bd38      	pop	{r3, r4, r5, pc}
 801695e:	bf00      	nop
 8016960:	2000af7c 	.word	0x2000af7c

08016964 <_malloc_usable_size_r>:
 8016964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016968:	1f18      	subs	r0, r3, #4
 801696a:	2b00      	cmp	r3, #0
 801696c:	bfbc      	itt	lt
 801696e:	580b      	ldrlt	r3, [r1, r0]
 8016970:	18c0      	addlt	r0, r0, r3
 8016972:	4770      	bx	lr

08016974 <__ssputs_r>:
 8016974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016978:	688e      	ldr	r6, [r1, #8]
 801697a:	461f      	mov	r7, r3
 801697c:	42be      	cmp	r6, r7
 801697e:	680b      	ldr	r3, [r1, #0]
 8016980:	4682      	mov	sl, r0
 8016982:	460c      	mov	r4, r1
 8016984:	4690      	mov	r8, r2
 8016986:	d82d      	bhi.n	80169e4 <__ssputs_r+0x70>
 8016988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801698c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016990:	d026      	beq.n	80169e0 <__ssputs_r+0x6c>
 8016992:	6965      	ldr	r5, [r4, #20]
 8016994:	6909      	ldr	r1, [r1, #16]
 8016996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801699a:	eba3 0901 	sub.w	r9, r3, r1
 801699e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80169a2:	1c7b      	adds	r3, r7, #1
 80169a4:	444b      	add	r3, r9
 80169a6:	106d      	asrs	r5, r5, #1
 80169a8:	429d      	cmp	r5, r3
 80169aa:	bf38      	it	cc
 80169ac:	461d      	movcc	r5, r3
 80169ae:	0553      	lsls	r3, r2, #21
 80169b0:	d527      	bpl.n	8016a02 <__ssputs_r+0x8e>
 80169b2:	4629      	mov	r1, r5
 80169b4:	f7ff fb36 	bl	8016024 <_malloc_r>
 80169b8:	4606      	mov	r6, r0
 80169ba:	b360      	cbz	r0, 8016a16 <__ssputs_r+0xa2>
 80169bc:	6921      	ldr	r1, [r4, #16]
 80169be:	464a      	mov	r2, r9
 80169c0:	f7ff ff4d 	bl	801685e <memcpy>
 80169c4:	89a3      	ldrh	r3, [r4, #12]
 80169c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80169ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80169ce:	81a3      	strh	r3, [r4, #12]
 80169d0:	6126      	str	r6, [r4, #16]
 80169d2:	6165      	str	r5, [r4, #20]
 80169d4:	444e      	add	r6, r9
 80169d6:	eba5 0509 	sub.w	r5, r5, r9
 80169da:	6026      	str	r6, [r4, #0]
 80169dc:	60a5      	str	r5, [r4, #8]
 80169de:	463e      	mov	r6, r7
 80169e0:	42be      	cmp	r6, r7
 80169e2:	d900      	bls.n	80169e6 <__ssputs_r+0x72>
 80169e4:	463e      	mov	r6, r7
 80169e6:	6820      	ldr	r0, [r4, #0]
 80169e8:	4632      	mov	r2, r6
 80169ea:	4641      	mov	r1, r8
 80169ec:	f7ff fe54 	bl	8016698 <memmove>
 80169f0:	68a3      	ldr	r3, [r4, #8]
 80169f2:	1b9b      	subs	r3, r3, r6
 80169f4:	60a3      	str	r3, [r4, #8]
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	4433      	add	r3, r6
 80169fa:	6023      	str	r3, [r4, #0]
 80169fc:	2000      	movs	r0, #0
 80169fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a02:	462a      	mov	r2, r5
 8016a04:	f7ff fc0e 	bl	8016224 <_realloc_r>
 8016a08:	4606      	mov	r6, r0
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d1e0      	bne.n	80169d0 <__ssputs_r+0x5c>
 8016a0e:	6921      	ldr	r1, [r4, #16]
 8016a10:	4650      	mov	r0, sl
 8016a12:	f7ff ff5d 	bl	80168d0 <_free_r>
 8016a16:	230c      	movs	r3, #12
 8016a18:	f8ca 3000 	str.w	r3, [sl]
 8016a1c:	89a3      	ldrh	r3, [r4, #12]
 8016a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a22:	81a3      	strh	r3, [r4, #12]
 8016a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a28:	e7e9      	b.n	80169fe <__ssputs_r+0x8a>
	...

08016a2c <_svfiprintf_r>:
 8016a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a30:	4698      	mov	r8, r3
 8016a32:	898b      	ldrh	r3, [r1, #12]
 8016a34:	061b      	lsls	r3, r3, #24
 8016a36:	b09d      	sub	sp, #116	@ 0x74
 8016a38:	4607      	mov	r7, r0
 8016a3a:	460d      	mov	r5, r1
 8016a3c:	4614      	mov	r4, r2
 8016a3e:	d510      	bpl.n	8016a62 <_svfiprintf_r+0x36>
 8016a40:	690b      	ldr	r3, [r1, #16]
 8016a42:	b973      	cbnz	r3, 8016a62 <_svfiprintf_r+0x36>
 8016a44:	2140      	movs	r1, #64	@ 0x40
 8016a46:	f7ff faed 	bl	8016024 <_malloc_r>
 8016a4a:	6028      	str	r0, [r5, #0]
 8016a4c:	6128      	str	r0, [r5, #16]
 8016a4e:	b930      	cbnz	r0, 8016a5e <_svfiprintf_r+0x32>
 8016a50:	230c      	movs	r3, #12
 8016a52:	603b      	str	r3, [r7, #0]
 8016a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a58:	b01d      	add	sp, #116	@ 0x74
 8016a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a5e:	2340      	movs	r3, #64	@ 0x40
 8016a60:	616b      	str	r3, [r5, #20]
 8016a62:	2300      	movs	r3, #0
 8016a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a66:	2320      	movs	r3, #32
 8016a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a70:	2330      	movs	r3, #48	@ 0x30
 8016a72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016c10 <_svfiprintf_r+0x1e4>
 8016a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016a7a:	f04f 0901 	mov.w	r9, #1
 8016a7e:	4623      	mov	r3, r4
 8016a80:	469a      	mov	sl, r3
 8016a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a86:	b10a      	cbz	r2, 8016a8c <_svfiprintf_r+0x60>
 8016a88:	2a25      	cmp	r2, #37	@ 0x25
 8016a8a:	d1f9      	bne.n	8016a80 <_svfiprintf_r+0x54>
 8016a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8016a90:	d00b      	beq.n	8016aaa <_svfiprintf_r+0x7e>
 8016a92:	465b      	mov	r3, fp
 8016a94:	4622      	mov	r2, r4
 8016a96:	4629      	mov	r1, r5
 8016a98:	4638      	mov	r0, r7
 8016a9a:	f7ff ff6b 	bl	8016974 <__ssputs_r>
 8016a9e:	3001      	adds	r0, #1
 8016aa0:	f000 80a7 	beq.w	8016bf2 <_svfiprintf_r+0x1c6>
 8016aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016aa6:	445a      	add	r2, fp
 8016aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8016aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	f000 809f 	beq.w	8016bf2 <_svfiprintf_r+0x1c6>
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016abe:	f10a 0a01 	add.w	sl, sl, #1
 8016ac2:	9304      	str	r3, [sp, #16]
 8016ac4:	9307      	str	r3, [sp, #28]
 8016ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8016acc:	4654      	mov	r4, sl
 8016ace:	2205      	movs	r2, #5
 8016ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ad4:	484e      	ldr	r0, [pc, #312]	@ (8016c10 <_svfiprintf_r+0x1e4>)
 8016ad6:	f7e9 fbbb 	bl	8000250 <memchr>
 8016ada:	9a04      	ldr	r2, [sp, #16]
 8016adc:	b9d8      	cbnz	r0, 8016b16 <_svfiprintf_r+0xea>
 8016ade:	06d0      	lsls	r0, r2, #27
 8016ae0:	bf44      	itt	mi
 8016ae2:	2320      	movmi	r3, #32
 8016ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ae8:	0711      	lsls	r1, r2, #28
 8016aea:	bf44      	itt	mi
 8016aec:	232b      	movmi	r3, #43	@ 0x2b
 8016aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016af2:	f89a 3000 	ldrb.w	r3, [sl]
 8016af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8016af8:	d015      	beq.n	8016b26 <_svfiprintf_r+0xfa>
 8016afa:	9a07      	ldr	r2, [sp, #28]
 8016afc:	4654      	mov	r4, sl
 8016afe:	2000      	movs	r0, #0
 8016b00:	f04f 0c0a 	mov.w	ip, #10
 8016b04:	4621      	mov	r1, r4
 8016b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b0a:	3b30      	subs	r3, #48	@ 0x30
 8016b0c:	2b09      	cmp	r3, #9
 8016b0e:	d94b      	bls.n	8016ba8 <_svfiprintf_r+0x17c>
 8016b10:	b1b0      	cbz	r0, 8016b40 <_svfiprintf_r+0x114>
 8016b12:	9207      	str	r2, [sp, #28]
 8016b14:	e014      	b.n	8016b40 <_svfiprintf_r+0x114>
 8016b16:	eba0 0308 	sub.w	r3, r0, r8
 8016b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8016b1e:	4313      	orrs	r3, r2
 8016b20:	9304      	str	r3, [sp, #16]
 8016b22:	46a2      	mov	sl, r4
 8016b24:	e7d2      	b.n	8016acc <_svfiprintf_r+0xa0>
 8016b26:	9b03      	ldr	r3, [sp, #12]
 8016b28:	1d19      	adds	r1, r3, #4
 8016b2a:	681b      	ldr	r3, [r3, #0]
 8016b2c:	9103      	str	r1, [sp, #12]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	bfbb      	ittet	lt
 8016b32:	425b      	neglt	r3, r3
 8016b34:	f042 0202 	orrlt.w	r2, r2, #2
 8016b38:	9307      	strge	r3, [sp, #28]
 8016b3a:	9307      	strlt	r3, [sp, #28]
 8016b3c:	bfb8      	it	lt
 8016b3e:	9204      	strlt	r2, [sp, #16]
 8016b40:	7823      	ldrb	r3, [r4, #0]
 8016b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8016b44:	d10a      	bne.n	8016b5c <_svfiprintf_r+0x130>
 8016b46:	7863      	ldrb	r3, [r4, #1]
 8016b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b4a:	d132      	bne.n	8016bb2 <_svfiprintf_r+0x186>
 8016b4c:	9b03      	ldr	r3, [sp, #12]
 8016b4e:	1d1a      	adds	r2, r3, #4
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	9203      	str	r2, [sp, #12]
 8016b54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016b58:	3402      	adds	r4, #2
 8016b5a:	9305      	str	r3, [sp, #20]
 8016b5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016c20 <_svfiprintf_r+0x1f4>
 8016b60:	7821      	ldrb	r1, [r4, #0]
 8016b62:	2203      	movs	r2, #3
 8016b64:	4650      	mov	r0, sl
 8016b66:	f7e9 fb73 	bl	8000250 <memchr>
 8016b6a:	b138      	cbz	r0, 8016b7c <_svfiprintf_r+0x150>
 8016b6c:	9b04      	ldr	r3, [sp, #16]
 8016b6e:	eba0 000a 	sub.w	r0, r0, sl
 8016b72:	2240      	movs	r2, #64	@ 0x40
 8016b74:	4082      	lsls	r2, r0
 8016b76:	4313      	orrs	r3, r2
 8016b78:	3401      	adds	r4, #1
 8016b7a:	9304      	str	r3, [sp, #16]
 8016b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b80:	4824      	ldr	r0, [pc, #144]	@ (8016c14 <_svfiprintf_r+0x1e8>)
 8016b82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016b86:	2206      	movs	r2, #6
 8016b88:	f7e9 fb62 	bl	8000250 <memchr>
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	d036      	beq.n	8016bfe <_svfiprintf_r+0x1d2>
 8016b90:	4b21      	ldr	r3, [pc, #132]	@ (8016c18 <_svfiprintf_r+0x1ec>)
 8016b92:	bb1b      	cbnz	r3, 8016bdc <_svfiprintf_r+0x1b0>
 8016b94:	9b03      	ldr	r3, [sp, #12]
 8016b96:	3307      	adds	r3, #7
 8016b98:	f023 0307 	bic.w	r3, r3, #7
 8016b9c:	3308      	adds	r3, #8
 8016b9e:	9303      	str	r3, [sp, #12]
 8016ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ba2:	4433      	add	r3, r6
 8016ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ba6:	e76a      	b.n	8016a7e <_svfiprintf_r+0x52>
 8016ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bac:	460c      	mov	r4, r1
 8016bae:	2001      	movs	r0, #1
 8016bb0:	e7a8      	b.n	8016b04 <_svfiprintf_r+0xd8>
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	3401      	adds	r4, #1
 8016bb6:	9305      	str	r3, [sp, #20]
 8016bb8:	4619      	mov	r1, r3
 8016bba:	f04f 0c0a 	mov.w	ip, #10
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bc4:	3a30      	subs	r2, #48	@ 0x30
 8016bc6:	2a09      	cmp	r2, #9
 8016bc8:	d903      	bls.n	8016bd2 <_svfiprintf_r+0x1a6>
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d0c6      	beq.n	8016b5c <_svfiprintf_r+0x130>
 8016bce:	9105      	str	r1, [sp, #20]
 8016bd0:	e7c4      	b.n	8016b5c <_svfiprintf_r+0x130>
 8016bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bd6:	4604      	mov	r4, r0
 8016bd8:	2301      	movs	r3, #1
 8016bda:	e7f0      	b.n	8016bbe <_svfiprintf_r+0x192>
 8016bdc:	ab03      	add	r3, sp, #12
 8016bde:	9300      	str	r3, [sp, #0]
 8016be0:	462a      	mov	r2, r5
 8016be2:	4b0e      	ldr	r3, [pc, #56]	@ (8016c1c <_svfiprintf_r+0x1f0>)
 8016be4:	a904      	add	r1, sp, #16
 8016be6:	4638      	mov	r0, r7
 8016be8:	f3af 8000 	nop.w
 8016bec:	1c42      	adds	r2, r0, #1
 8016bee:	4606      	mov	r6, r0
 8016bf0:	d1d6      	bne.n	8016ba0 <_svfiprintf_r+0x174>
 8016bf2:	89ab      	ldrh	r3, [r5, #12]
 8016bf4:	065b      	lsls	r3, r3, #25
 8016bf6:	f53f af2d 	bmi.w	8016a54 <_svfiprintf_r+0x28>
 8016bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016bfc:	e72c      	b.n	8016a58 <_svfiprintf_r+0x2c>
 8016bfe:	ab03      	add	r3, sp, #12
 8016c00:	9300      	str	r3, [sp, #0]
 8016c02:	462a      	mov	r2, r5
 8016c04:	4b05      	ldr	r3, [pc, #20]	@ (8016c1c <_svfiprintf_r+0x1f0>)
 8016c06:	a904      	add	r1, sp, #16
 8016c08:	4638      	mov	r0, r7
 8016c0a:	f000 f9bb 	bl	8016f84 <_printf_i>
 8016c0e:	e7ed      	b.n	8016bec <_svfiprintf_r+0x1c0>
 8016c10:	080188ac 	.word	0x080188ac
 8016c14:	080188b6 	.word	0x080188b6
 8016c18:	00000000 	.word	0x00000000
 8016c1c:	08016975 	.word	0x08016975
 8016c20:	080188b2 	.word	0x080188b2

08016c24 <__sfputc_r>:
 8016c24:	6893      	ldr	r3, [r2, #8]
 8016c26:	3b01      	subs	r3, #1
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	b410      	push	{r4}
 8016c2c:	6093      	str	r3, [r2, #8]
 8016c2e:	da08      	bge.n	8016c42 <__sfputc_r+0x1e>
 8016c30:	6994      	ldr	r4, [r2, #24]
 8016c32:	42a3      	cmp	r3, r4
 8016c34:	db01      	blt.n	8016c3a <__sfputc_r+0x16>
 8016c36:	290a      	cmp	r1, #10
 8016c38:	d103      	bne.n	8016c42 <__sfputc_r+0x1e>
 8016c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c3e:	f000 bb7f 	b.w	8017340 <__swbuf_r>
 8016c42:	6813      	ldr	r3, [r2, #0]
 8016c44:	1c58      	adds	r0, r3, #1
 8016c46:	6010      	str	r0, [r2, #0]
 8016c48:	7019      	strb	r1, [r3, #0]
 8016c4a:	4608      	mov	r0, r1
 8016c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c50:	4770      	bx	lr

08016c52 <__sfputs_r>:
 8016c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c54:	4606      	mov	r6, r0
 8016c56:	460f      	mov	r7, r1
 8016c58:	4614      	mov	r4, r2
 8016c5a:	18d5      	adds	r5, r2, r3
 8016c5c:	42ac      	cmp	r4, r5
 8016c5e:	d101      	bne.n	8016c64 <__sfputs_r+0x12>
 8016c60:	2000      	movs	r0, #0
 8016c62:	e007      	b.n	8016c74 <__sfputs_r+0x22>
 8016c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c68:	463a      	mov	r2, r7
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	f7ff ffda 	bl	8016c24 <__sfputc_r>
 8016c70:	1c43      	adds	r3, r0, #1
 8016c72:	d1f3      	bne.n	8016c5c <__sfputs_r+0xa>
 8016c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c78 <_vfiprintf_r>:
 8016c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7c:	460d      	mov	r5, r1
 8016c7e:	b09d      	sub	sp, #116	@ 0x74
 8016c80:	4614      	mov	r4, r2
 8016c82:	4698      	mov	r8, r3
 8016c84:	4606      	mov	r6, r0
 8016c86:	b118      	cbz	r0, 8016c90 <_vfiprintf_r+0x18>
 8016c88:	6a03      	ldr	r3, [r0, #32]
 8016c8a:	b90b      	cbnz	r3, 8016c90 <_vfiprintf_r+0x18>
 8016c8c:	f7ff fbfc 	bl	8016488 <__sinit>
 8016c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016c92:	07d9      	lsls	r1, r3, #31
 8016c94:	d405      	bmi.n	8016ca2 <_vfiprintf_r+0x2a>
 8016c96:	89ab      	ldrh	r3, [r5, #12]
 8016c98:	059a      	lsls	r2, r3, #22
 8016c9a:	d402      	bmi.n	8016ca2 <_vfiprintf_r+0x2a>
 8016c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016c9e:	f7ff fdd4 	bl	801684a <__retarget_lock_acquire_recursive>
 8016ca2:	89ab      	ldrh	r3, [r5, #12]
 8016ca4:	071b      	lsls	r3, r3, #28
 8016ca6:	d501      	bpl.n	8016cac <_vfiprintf_r+0x34>
 8016ca8:	692b      	ldr	r3, [r5, #16]
 8016caa:	b99b      	cbnz	r3, 8016cd4 <_vfiprintf_r+0x5c>
 8016cac:	4629      	mov	r1, r5
 8016cae:	4630      	mov	r0, r6
 8016cb0:	f000 fb84 	bl	80173bc <__swsetup_r>
 8016cb4:	b170      	cbz	r0, 8016cd4 <_vfiprintf_r+0x5c>
 8016cb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016cb8:	07dc      	lsls	r4, r3, #31
 8016cba:	d504      	bpl.n	8016cc6 <_vfiprintf_r+0x4e>
 8016cbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016cc0:	b01d      	add	sp, #116	@ 0x74
 8016cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc6:	89ab      	ldrh	r3, [r5, #12]
 8016cc8:	0598      	lsls	r0, r3, #22
 8016cca:	d4f7      	bmi.n	8016cbc <_vfiprintf_r+0x44>
 8016ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cce:	f7ff fdbd 	bl	801684c <__retarget_lock_release_recursive>
 8016cd2:	e7f3      	b.n	8016cbc <_vfiprintf_r+0x44>
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016cd8:	2320      	movs	r3, #32
 8016cda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ce2:	2330      	movs	r3, #48	@ 0x30
 8016ce4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016e94 <_vfiprintf_r+0x21c>
 8016ce8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016cec:	f04f 0901 	mov.w	r9, #1
 8016cf0:	4623      	mov	r3, r4
 8016cf2:	469a      	mov	sl, r3
 8016cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016cf8:	b10a      	cbz	r2, 8016cfe <_vfiprintf_r+0x86>
 8016cfa:	2a25      	cmp	r2, #37	@ 0x25
 8016cfc:	d1f9      	bne.n	8016cf2 <_vfiprintf_r+0x7a>
 8016cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8016d02:	d00b      	beq.n	8016d1c <_vfiprintf_r+0xa4>
 8016d04:	465b      	mov	r3, fp
 8016d06:	4622      	mov	r2, r4
 8016d08:	4629      	mov	r1, r5
 8016d0a:	4630      	mov	r0, r6
 8016d0c:	f7ff ffa1 	bl	8016c52 <__sfputs_r>
 8016d10:	3001      	adds	r0, #1
 8016d12:	f000 80a7 	beq.w	8016e64 <_vfiprintf_r+0x1ec>
 8016d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d18:	445a      	add	r2, fp
 8016d1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f000 809f 	beq.w	8016e64 <_vfiprintf_r+0x1ec>
 8016d26:	2300      	movs	r3, #0
 8016d28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d30:	f10a 0a01 	add.w	sl, sl, #1
 8016d34:	9304      	str	r3, [sp, #16]
 8016d36:	9307      	str	r3, [sp, #28]
 8016d38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016d3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8016d3e:	4654      	mov	r4, sl
 8016d40:	2205      	movs	r2, #5
 8016d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d46:	4853      	ldr	r0, [pc, #332]	@ (8016e94 <_vfiprintf_r+0x21c>)
 8016d48:	f7e9 fa82 	bl	8000250 <memchr>
 8016d4c:	9a04      	ldr	r2, [sp, #16]
 8016d4e:	b9d8      	cbnz	r0, 8016d88 <_vfiprintf_r+0x110>
 8016d50:	06d1      	lsls	r1, r2, #27
 8016d52:	bf44      	itt	mi
 8016d54:	2320      	movmi	r3, #32
 8016d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d5a:	0713      	lsls	r3, r2, #28
 8016d5c:	bf44      	itt	mi
 8016d5e:	232b      	movmi	r3, #43	@ 0x2b
 8016d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d64:	f89a 3000 	ldrb.w	r3, [sl]
 8016d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d6a:	d015      	beq.n	8016d98 <_vfiprintf_r+0x120>
 8016d6c:	9a07      	ldr	r2, [sp, #28]
 8016d6e:	4654      	mov	r4, sl
 8016d70:	2000      	movs	r0, #0
 8016d72:	f04f 0c0a 	mov.w	ip, #10
 8016d76:	4621      	mov	r1, r4
 8016d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d7c:	3b30      	subs	r3, #48	@ 0x30
 8016d7e:	2b09      	cmp	r3, #9
 8016d80:	d94b      	bls.n	8016e1a <_vfiprintf_r+0x1a2>
 8016d82:	b1b0      	cbz	r0, 8016db2 <_vfiprintf_r+0x13a>
 8016d84:	9207      	str	r2, [sp, #28]
 8016d86:	e014      	b.n	8016db2 <_vfiprintf_r+0x13a>
 8016d88:	eba0 0308 	sub.w	r3, r0, r8
 8016d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8016d90:	4313      	orrs	r3, r2
 8016d92:	9304      	str	r3, [sp, #16]
 8016d94:	46a2      	mov	sl, r4
 8016d96:	e7d2      	b.n	8016d3e <_vfiprintf_r+0xc6>
 8016d98:	9b03      	ldr	r3, [sp, #12]
 8016d9a:	1d19      	adds	r1, r3, #4
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	9103      	str	r1, [sp, #12]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	bfbb      	ittet	lt
 8016da4:	425b      	neglt	r3, r3
 8016da6:	f042 0202 	orrlt.w	r2, r2, #2
 8016daa:	9307      	strge	r3, [sp, #28]
 8016dac:	9307      	strlt	r3, [sp, #28]
 8016dae:	bfb8      	it	lt
 8016db0:	9204      	strlt	r2, [sp, #16]
 8016db2:	7823      	ldrb	r3, [r4, #0]
 8016db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8016db6:	d10a      	bne.n	8016dce <_vfiprintf_r+0x156>
 8016db8:	7863      	ldrb	r3, [r4, #1]
 8016dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8016dbc:	d132      	bne.n	8016e24 <_vfiprintf_r+0x1ac>
 8016dbe:	9b03      	ldr	r3, [sp, #12]
 8016dc0:	1d1a      	adds	r2, r3, #4
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	9203      	str	r2, [sp, #12]
 8016dc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016dca:	3402      	adds	r4, #2
 8016dcc:	9305      	str	r3, [sp, #20]
 8016dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016ea4 <_vfiprintf_r+0x22c>
 8016dd2:	7821      	ldrb	r1, [r4, #0]
 8016dd4:	2203      	movs	r2, #3
 8016dd6:	4650      	mov	r0, sl
 8016dd8:	f7e9 fa3a 	bl	8000250 <memchr>
 8016ddc:	b138      	cbz	r0, 8016dee <_vfiprintf_r+0x176>
 8016dde:	9b04      	ldr	r3, [sp, #16]
 8016de0:	eba0 000a 	sub.w	r0, r0, sl
 8016de4:	2240      	movs	r2, #64	@ 0x40
 8016de6:	4082      	lsls	r2, r0
 8016de8:	4313      	orrs	r3, r2
 8016dea:	3401      	adds	r4, #1
 8016dec:	9304      	str	r3, [sp, #16]
 8016dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016df2:	4829      	ldr	r0, [pc, #164]	@ (8016e98 <_vfiprintf_r+0x220>)
 8016df4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016df8:	2206      	movs	r2, #6
 8016dfa:	f7e9 fa29 	bl	8000250 <memchr>
 8016dfe:	2800      	cmp	r0, #0
 8016e00:	d03f      	beq.n	8016e82 <_vfiprintf_r+0x20a>
 8016e02:	4b26      	ldr	r3, [pc, #152]	@ (8016e9c <_vfiprintf_r+0x224>)
 8016e04:	bb1b      	cbnz	r3, 8016e4e <_vfiprintf_r+0x1d6>
 8016e06:	9b03      	ldr	r3, [sp, #12]
 8016e08:	3307      	adds	r3, #7
 8016e0a:	f023 0307 	bic.w	r3, r3, #7
 8016e0e:	3308      	adds	r3, #8
 8016e10:	9303      	str	r3, [sp, #12]
 8016e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e14:	443b      	add	r3, r7
 8016e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e18:	e76a      	b.n	8016cf0 <_vfiprintf_r+0x78>
 8016e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e1e:	460c      	mov	r4, r1
 8016e20:	2001      	movs	r0, #1
 8016e22:	e7a8      	b.n	8016d76 <_vfiprintf_r+0xfe>
 8016e24:	2300      	movs	r3, #0
 8016e26:	3401      	adds	r4, #1
 8016e28:	9305      	str	r3, [sp, #20]
 8016e2a:	4619      	mov	r1, r3
 8016e2c:	f04f 0c0a 	mov.w	ip, #10
 8016e30:	4620      	mov	r0, r4
 8016e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e36:	3a30      	subs	r2, #48	@ 0x30
 8016e38:	2a09      	cmp	r2, #9
 8016e3a:	d903      	bls.n	8016e44 <_vfiprintf_r+0x1cc>
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d0c6      	beq.n	8016dce <_vfiprintf_r+0x156>
 8016e40:	9105      	str	r1, [sp, #20]
 8016e42:	e7c4      	b.n	8016dce <_vfiprintf_r+0x156>
 8016e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e48:	4604      	mov	r4, r0
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e7f0      	b.n	8016e30 <_vfiprintf_r+0x1b8>
 8016e4e:	ab03      	add	r3, sp, #12
 8016e50:	9300      	str	r3, [sp, #0]
 8016e52:	462a      	mov	r2, r5
 8016e54:	4b12      	ldr	r3, [pc, #72]	@ (8016ea0 <_vfiprintf_r+0x228>)
 8016e56:	a904      	add	r1, sp, #16
 8016e58:	4630      	mov	r0, r6
 8016e5a:	f3af 8000 	nop.w
 8016e5e:	4607      	mov	r7, r0
 8016e60:	1c78      	adds	r0, r7, #1
 8016e62:	d1d6      	bne.n	8016e12 <_vfiprintf_r+0x19a>
 8016e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e66:	07d9      	lsls	r1, r3, #31
 8016e68:	d405      	bmi.n	8016e76 <_vfiprintf_r+0x1fe>
 8016e6a:	89ab      	ldrh	r3, [r5, #12]
 8016e6c:	059a      	lsls	r2, r3, #22
 8016e6e:	d402      	bmi.n	8016e76 <_vfiprintf_r+0x1fe>
 8016e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e72:	f7ff fceb 	bl	801684c <__retarget_lock_release_recursive>
 8016e76:	89ab      	ldrh	r3, [r5, #12]
 8016e78:	065b      	lsls	r3, r3, #25
 8016e7a:	f53f af1f 	bmi.w	8016cbc <_vfiprintf_r+0x44>
 8016e7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016e80:	e71e      	b.n	8016cc0 <_vfiprintf_r+0x48>
 8016e82:	ab03      	add	r3, sp, #12
 8016e84:	9300      	str	r3, [sp, #0]
 8016e86:	462a      	mov	r2, r5
 8016e88:	4b05      	ldr	r3, [pc, #20]	@ (8016ea0 <_vfiprintf_r+0x228>)
 8016e8a:	a904      	add	r1, sp, #16
 8016e8c:	4630      	mov	r0, r6
 8016e8e:	f000 f879 	bl	8016f84 <_printf_i>
 8016e92:	e7e4      	b.n	8016e5e <_vfiprintf_r+0x1e6>
 8016e94:	080188ac 	.word	0x080188ac
 8016e98:	080188b6 	.word	0x080188b6
 8016e9c:	00000000 	.word	0x00000000
 8016ea0:	08016c53 	.word	0x08016c53
 8016ea4:	080188b2 	.word	0x080188b2

08016ea8 <_printf_common>:
 8016ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eac:	4616      	mov	r6, r2
 8016eae:	4698      	mov	r8, r3
 8016eb0:	688a      	ldr	r2, [r1, #8]
 8016eb2:	690b      	ldr	r3, [r1, #16]
 8016eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016eb8:	4293      	cmp	r3, r2
 8016eba:	bfb8      	it	lt
 8016ebc:	4613      	movlt	r3, r2
 8016ebe:	6033      	str	r3, [r6, #0]
 8016ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016ec4:	4607      	mov	r7, r0
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	b10a      	cbz	r2, 8016ece <_printf_common+0x26>
 8016eca:	3301      	adds	r3, #1
 8016ecc:	6033      	str	r3, [r6, #0]
 8016ece:	6823      	ldr	r3, [r4, #0]
 8016ed0:	0699      	lsls	r1, r3, #26
 8016ed2:	bf42      	ittt	mi
 8016ed4:	6833      	ldrmi	r3, [r6, #0]
 8016ed6:	3302      	addmi	r3, #2
 8016ed8:	6033      	strmi	r3, [r6, #0]
 8016eda:	6825      	ldr	r5, [r4, #0]
 8016edc:	f015 0506 	ands.w	r5, r5, #6
 8016ee0:	d106      	bne.n	8016ef0 <_printf_common+0x48>
 8016ee2:	f104 0a19 	add.w	sl, r4, #25
 8016ee6:	68e3      	ldr	r3, [r4, #12]
 8016ee8:	6832      	ldr	r2, [r6, #0]
 8016eea:	1a9b      	subs	r3, r3, r2
 8016eec:	42ab      	cmp	r3, r5
 8016eee:	dc26      	bgt.n	8016f3e <_printf_common+0x96>
 8016ef0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016ef4:	6822      	ldr	r2, [r4, #0]
 8016ef6:	3b00      	subs	r3, #0
 8016ef8:	bf18      	it	ne
 8016efa:	2301      	movne	r3, #1
 8016efc:	0692      	lsls	r2, r2, #26
 8016efe:	d42b      	bmi.n	8016f58 <_printf_common+0xb0>
 8016f00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016f04:	4641      	mov	r1, r8
 8016f06:	4638      	mov	r0, r7
 8016f08:	47c8      	blx	r9
 8016f0a:	3001      	adds	r0, #1
 8016f0c:	d01e      	beq.n	8016f4c <_printf_common+0xa4>
 8016f0e:	6823      	ldr	r3, [r4, #0]
 8016f10:	6922      	ldr	r2, [r4, #16]
 8016f12:	f003 0306 	and.w	r3, r3, #6
 8016f16:	2b04      	cmp	r3, #4
 8016f18:	bf02      	ittt	eq
 8016f1a:	68e5      	ldreq	r5, [r4, #12]
 8016f1c:	6833      	ldreq	r3, [r6, #0]
 8016f1e:	1aed      	subeq	r5, r5, r3
 8016f20:	68a3      	ldr	r3, [r4, #8]
 8016f22:	bf0c      	ite	eq
 8016f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016f28:	2500      	movne	r5, #0
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	bfc4      	itt	gt
 8016f2e:	1a9b      	subgt	r3, r3, r2
 8016f30:	18ed      	addgt	r5, r5, r3
 8016f32:	2600      	movs	r6, #0
 8016f34:	341a      	adds	r4, #26
 8016f36:	42b5      	cmp	r5, r6
 8016f38:	d11a      	bne.n	8016f70 <_printf_common+0xc8>
 8016f3a:	2000      	movs	r0, #0
 8016f3c:	e008      	b.n	8016f50 <_printf_common+0xa8>
 8016f3e:	2301      	movs	r3, #1
 8016f40:	4652      	mov	r2, sl
 8016f42:	4641      	mov	r1, r8
 8016f44:	4638      	mov	r0, r7
 8016f46:	47c8      	blx	r9
 8016f48:	3001      	adds	r0, #1
 8016f4a:	d103      	bne.n	8016f54 <_printf_common+0xac>
 8016f4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f54:	3501      	adds	r5, #1
 8016f56:	e7c6      	b.n	8016ee6 <_printf_common+0x3e>
 8016f58:	18e1      	adds	r1, r4, r3
 8016f5a:	1c5a      	adds	r2, r3, #1
 8016f5c:	2030      	movs	r0, #48	@ 0x30
 8016f5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016f62:	4422      	add	r2, r4
 8016f64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016f68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016f6c:	3302      	adds	r3, #2
 8016f6e:	e7c7      	b.n	8016f00 <_printf_common+0x58>
 8016f70:	2301      	movs	r3, #1
 8016f72:	4622      	mov	r2, r4
 8016f74:	4641      	mov	r1, r8
 8016f76:	4638      	mov	r0, r7
 8016f78:	47c8      	blx	r9
 8016f7a:	3001      	adds	r0, #1
 8016f7c:	d0e6      	beq.n	8016f4c <_printf_common+0xa4>
 8016f7e:	3601      	adds	r6, #1
 8016f80:	e7d9      	b.n	8016f36 <_printf_common+0x8e>
	...

08016f84 <_printf_i>:
 8016f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f88:	7e0f      	ldrb	r7, [r1, #24]
 8016f8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016f8c:	2f78      	cmp	r7, #120	@ 0x78
 8016f8e:	4691      	mov	r9, r2
 8016f90:	4680      	mov	r8, r0
 8016f92:	460c      	mov	r4, r1
 8016f94:	469a      	mov	sl, r3
 8016f96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016f9a:	d807      	bhi.n	8016fac <_printf_i+0x28>
 8016f9c:	2f62      	cmp	r7, #98	@ 0x62
 8016f9e:	d80a      	bhi.n	8016fb6 <_printf_i+0x32>
 8016fa0:	2f00      	cmp	r7, #0
 8016fa2:	f000 80d2 	beq.w	801714a <_printf_i+0x1c6>
 8016fa6:	2f58      	cmp	r7, #88	@ 0x58
 8016fa8:	f000 80b9 	beq.w	801711e <_printf_i+0x19a>
 8016fac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016fb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016fb4:	e03a      	b.n	801702c <_printf_i+0xa8>
 8016fb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016fba:	2b15      	cmp	r3, #21
 8016fbc:	d8f6      	bhi.n	8016fac <_printf_i+0x28>
 8016fbe:	a101      	add	r1, pc, #4	@ (adr r1, 8016fc4 <_printf_i+0x40>)
 8016fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016fc4:	0801701d 	.word	0x0801701d
 8016fc8:	08017031 	.word	0x08017031
 8016fcc:	08016fad 	.word	0x08016fad
 8016fd0:	08016fad 	.word	0x08016fad
 8016fd4:	08016fad 	.word	0x08016fad
 8016fd8:	08016fad 	.word	0x08016fad
 8016fdc:	08017031 	.word	0x08017031
 8016fe0:	08016fad 	.word	0x08016fad
 8016fe4:	08016fad 	.word	0x08016fad
 8016fe8:	08016fad 	.word	0x08016fad
 8016fec:	08016fad 	.word	0x08016fad
 8016ff0:	08017131 	.word	0x08017131
 8016ff4:	0801705b 	.word	0x0801705b
 8016ff8:	080170eb 	.word	0x080170eb
 8016ffc:	08016fad 	.word	0x08016fad
 8017000:	08016fad 	.word	0x08016fad
 8017004:	08017153 	.word	0x08017153
 8017008:	08016fad 	.word	0x08016fad
 801700c:	0801705b 	.word	0x0801705b
 8017010:	08016fad 	.word	0x08016fad
 8017014:	08016fad 	.word	0x08016fad
 8017018:	080170f3 	.word	0x080170f3
 801701c:	6833      	ldr	r3, [r6, #0]
 801701e:	1d1a      	adds	r2, r3, #4
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	6032      	str	r2, [r6, #0]
 8017024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017028:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801702c:	2301      	movs	r3, #1
 801702e:	e09d      	b.n	801716c <_printf_i+0x1e8>
 8017030:	6833      	ldr	r3, [r6, #0]
 8017032:	6820      	ldr	r0, [r4, #0]
 8017034:	1d19      	adds	r1, r3, #4
 8017036:	6031      	str	r1, [r6, #0]
 8017038:	0606      	lsls	r6, r0, #24
 801703a:	d501      	bpl.n	8017040 <_printf_i+0xbc>
 801703c:	681d      	ldr	r5, [r3, #0]
 801703e:	e003      	b.n	8017048 <_printf_i+0xc4>
 8017040:	0645      	lsls	r5, r0, #25
 8017042:	d5fb      	bpl.n	801703c <_printf_i+0xb8>
 8017044:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017048:	2d00      	cmp	r5, #0
 801704a:	da03      	bge.n	8017054 <_printf_i+0xd0>
 801704c:	232d      	movs	r3, #45	@ 0x2d
 801704e:	426d      	negs	r5, r5
 8017050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017054:	4859      	ldr	r0, [pc, #356]	@ (80171bc <_printf_i+0x238>)
 8017056:	230a      	movs	r3, #10
 8017058:	e011      	b.n	801707e <_printf_i+0xfa>
 801705a:	6821      	ldr	r1, [r4, #0]
 801705c:	6833      	ldr	r3, [r6, #0]
 801705e:	0608      	lsls	r0, r1, #24
 8017060:	f853 5b04 	ldr.w	r5, [r3], #4
 8017064:	d402      	bmi.n	801706c <_printf_i+0xe8>
 8017066:	0649      	lsls	r1, r1, #25
 8017068:	bf48      	it	mi
 801706a:	b2ad      	uxthmi	r5, r5
 801706c:	2f6f      	cmp	r7, #111	@ 0x6f
 801706e:	4853      	ldr	r0, [pc, #332]	@ (80171bc <_printf_i+0x238>)
 8017070:	6033      	str	r3, [r6, #0]
 8017072:	bf14      	ite	ne
 8017074:	230a      	movne	r3, #10
 8017076:	2308      	moveq	r3, #8
 8017078:	2100      	movs	r1, #0
 801707a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801707e:	6866      	ldr	r6, [r4, #4]
 8017080:	60a6      	str	r6, [r4, #8]
 8017082:	2e00      	cmp	r6, #0
 8017084:	bfa2      	ittt	ge
 8017086:	6821      	ldrge	r1, [r4, #0]
 8017088:	f021 0104 	bicge.w	r1, r1, #4
 801708c:	6021      	strge	r1, [r4, #0]
 801708e:	b90d      	cbnz	r5, 8017094 <_printf_i+0x110>
 8017090:	2e00      	cmp	r6, #0
 8017092:	d04b      	beq.n	801712c <_printf_i+0x1a8>
 8017094:	4616      	mov	r6, r2
 8017096:	fbb5 f1f3 	udiv	r1, r5, r3
 801709a:	fb03 5711 	mls	r7, r3, r1, r5
 801709e:	5dc7      	ldrb	r7, [r0, r7]
 80170a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80170a4:	462f      	mov	r7, r5
 80170a6:	42bb      	cmp	r3, r7
 80170a8:	460d      	mov	r5, r1
 80170aa:	d9f4      	bls.n	8017096 <_printf_i+0x112>
 80170ac:	2b08      	cmp	r3, #8
 80170ae:	d10b      	bne.n	80170c8 <_printf_i+0x144>
 80170b0:	6823      	ldr	r3, [r4, #0]
 80170b2:	07df      	lsls	r7, r3, #31
 80170b4:	d508      	bpl.n	80170c8 <_printf_i+0x144>
 80170b6:	6923      	ldr	r3, [r4, #16]
 80170b8:	6861      	ldr	r1, [r4, #4]
 80170ba:	4299      	cmp	r1, r3
 80170bc:	bfde      	ittt	le
 80170be:	2330      	movle	r3, #48	@ 0x30
 80170c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80170c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80170c8:	1b92      	subs	r2, r2, r6
 80170ca:	6122      	str	r2, [r4, #16]
 80170cc:	f8cd a000 	str.w	sl, [sp]
 80170d0:	464b      	mov	r3, r9
 80170d2:	aa03      	add	r2, sp, #12
 80170d4:	4621      	mov	r1, r4
 80170d6:	4640      	mov	r0, r8
 80170d8:	f7ff fee6 	bl	8016ea8 <_printf_common>
 80170dc:	3001      	adds	r0, #1
 80170de:	d14a      	bne.n	8017176 <_printf_i+0x1f2>
 80170e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170e4:	b004      	add	sp, #16
 80170e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170ea:	6823      	ldr	r3, [r4, #0]
 80170ec:	f043 0320 	orr.w	r3, r3, #32
 80170f0:	6023      	str	r3, [r4, #0]
 80170f2:	4833      	ldr	r0, [pc, #204]	@ (80171c0 <_printf_i+0x23c>)
 80170f4:	2778      	movs	r7, #120	@ 0x78
 80170f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80170fa:	6823      	ldr	r3, [r4, #0]
 80170fc:	6831      	ldr	r1, [r6, #0]
 80170fe:	061f      	lsls	r7, r3, #24
 8017100:	f851 5b04 	ldr.w	r5, [r1], #4
 8017104:	d402      	bmi.n	801710c <_printf_i+0x188>
 8017106:	065f      	lsls	r7, r3, #25
 8017108:	bf48      	it	mi
 801710a:	b2ad      	uxthmi	r5, r5
 801710c:	6031      	str	r1, [r6, #0]
 801710e:	07d9      	lsls	r1, r3, #31
 8017110:	bf44      	itt	mi
 8017112:	f043 0320 	orrmi.w	r3, r3, #32
 8017116:	6023      	strmi	r3, [r4, #0]
 8017118:	b11d      	cbz	r5, 8017122 <_printf_i+0x19e>
 801711a:	2310      	movs	r3, #16
 801711c:	e7ac      	b.n	8017078 <_printf_i+0xf4>
 801711e:	4827      	ldr	r0, [pc, #156]	@ (80171bc <_printf_i+0x238>)
 8017120:	e7e9      	b.n	80170f6 <_printf_i+0x172>
 8017122:	6823      	ldr	r3, [r4, #0]
 8017124:	f023 0320 	bic.w	r3, r3, #32
 8017128:	6023      	str	r3, [r4, #0]
 801712a:	e7f6      	b.n	801711a <_printf_i+0x196>
 801712c:	4616      	mov	r6, r2
 801712e:	e7bd      	b.n	80170ac <_printf_i+0x128>
 8017130:	6833      	ldr	r3, [r6, #0]
 8017132:	6825      	ldr	r5, [r4, #0]
 8017134:	6961      	ldr	r1, [r4, #20]
 8017136:	1d18      	adds	r0, r3, #4
 8017138:	6030      	str	r0, [r6, #0]
 801713a:	062e      	lsls	r6, r5, #24
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	d501      	bpl.n	8017144 <_printf_i+0x1c0>
 8017140:	6019      	str	r1, [r3, #0]
 8017142:	e002      	b.n	801714a <_printf_i+0x1c6>
 8017144:	0668      	lsls	r0, r5, #25
 8017146:	d5fb      	bpl.n	8017140 <_printf_i+0x1bc>
 8017148:	8019      	strh	r1, [r3, #0]
 801714a:	2300      	movs	r3, #0
 801714c:	6123      	str	r3, [r4, #16]
 801714e:	4616      	mov	r6, r2
 8017150:	e7bc      	b.n	80170cc <_printf_i+0x148>
 8017152:	6833      	ldr	r3, [r6, #0]
 8017154:	1d1a      	adds	r2, r3, #4
 8017156:	6032      	str	r2, [r6, #0]
 8017158:	681e      	ldr	r6, [r3, #0]
 801715a:	6862      	ldr	r2, [r4, #4]
 801715c:	2100      	movs	r1, #0
 801715e:	4630      	mov	r0, r6
 8017160:	f7e9 f876 	bl	8000250 <memchr>
 8017164:	b108      	cbz	r0, 801716a <_printf_i+0x1e6>
 8017166:	1b80      	subs	r0, r0, r6
 8017168:	6060      	str	r0, [r4, #4]
 801716a:	6863      	ldr	r3, [r4, #4]
 801716c:	6123      	str	r3, [r4, #16]
 801716e:	2300      	movs	r3, #0
 8017170:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017174:	e7aa      	b.n	80170cc <_printf_i+0x148>
 8017176:	6923      	ldr	r3, [r4, #16]
 8017178:	4632      	mov	r2, r6
 801717a:	4649      	mov	r1, r9
 801717c:	4640      	mov	r0, r8
 801717e:	47d0      	blx	sl
 8017180:	3001      	adds	r0, #1
 8017182:	d0ad      	beq.n	80170e0 <_printf_i+0x15c>
 8017184:	6823      	ldr	r3, [r4, #0]
 8017186:	079b      	lsls	r3, r3, #30
 8017188:	d413      	bmi.n	80171b2 <_printf_i+0x22e>
 801718a:	68e0      	ldr	r0, [r4, #12]
 801718c:	9b03      	ldr	r3, [sp, #12]
 801718e:	4298      	cmp	r0, r3
 8017190:	bfb8      	it	lt
 8017192:	4618      	movlt	r0, r3
 8017194:	e7a6      	b.n	80170e4 <_printf_i+0x160>
 8017196:	2301      	movs	r3, #1
 8017198:	4632      	mov	r2, r6
 801719a:	4649      	mov	r1, r9
 801719c:	4640      	mov	r0, r8
 801719e:	47d0      	blx	sl
 80171a0:	3001      	adds	r0, #1
 80171a2:	d09d      	beq.n	80170e0 <_printf_i+0x15c>
 80171a4:	3501      	adds	r5, #1
 80171a6:	68e3      	ldr	r3, [r4, #12]
 80171a8:	9903      	ldr	r1, [sp, #12]
 80171aa:	1a5b      	subs	r3, r3, r1
 80171ac:	42ab      	cmp	r3, r5
 80171ae:	dcf2      	bgt.n	8017196 <_printf_i+0x212>
 80171b0:	e7eb      	b.n	801718a <_printf_i+0x206>
 80171b2:	2500      	movs	r5, #0
 80171b4:	f104 0619 	add.w	r6, r4, #25
 80171b8:	e7f5      	b.n	80171a6 <_printf_i+0x222>
 80171ba:	bf00      	nop
 80171bc:	080188bd 	.word	0x080188bd
 80171c0:	080188ce 	.word	0x080188ce

080171c4 <__sflush_r>:
 80171c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80171c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171cc:	0716      	lsls	r6, r2, #28
 80171ce:	4605      	mov	r5, r0
 80171d0:	460c      	mov	r4, r1
 80171d2:	d454      	bmi.n	801727e <__sflush_r+0xba>
 80171d4:	684b      	ldr	r3, [r1, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	dc02      	bgt.n	80171e0 <__sflush_r+0x1c>
 80171da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80171dc:	2b00      	cmp	r3, #0
 80171de:	dd48      	ble.n	8017272 <__sflush_r+0xae>
 80171e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80171e2:	2e00      	cmp	r6, #0
 80171e4:	d045      	beq.n	8017272 <__sflush_r+0xae>
 80171e6:	2300      	movs	r3, #0
 80171e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80171ec:	682f      	ldr	r7, [r5, #0]
 80171ee:	6a21      	ldr	r1, [r4, #32]
 80171f0:	602b      	str	r3, [r5, #0]
 80171f2:	d030      	beq.n	8017256 <__sflush_r+0x92>
 80171f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80171f6:	89a3      	ldrh	r3, [r4, #12]
 80171f8:	0759      	lsls	r1, r3, #29
 80171fa:	d505      	bpl.n	8017208 <__sflush_r+0x44>
 80171fc:	6863      	ldr	r3, [r4, #4]
 80171fe:	1ad2      	subs	r2, r2, r3
 8017200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017202:	b10b      	cbz	r3, 8017208 <__sflush_r+0x44>
 8017204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017206:	1ad2      	subs	r2, r2, r3
 8017208:	2300      	movs	r3, #0
 801720a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801720c:	6a21      	ldr	r1, [r4, #32]
 801720e:	4628      	mov	r0, r5
 8017210:	47b0      	blx	r6
 8017212:	1c43      	adds	r3, r0, #1
 8017214:	89a3      	ldrh	r3, [r4, #12]
 8017216:	d106      	bne.n	8017226 <__sflush_r+0x62>
 8017218:	6829      	ldr	r1, [r5, #0]
 801721a:	291d      	cmp	r1, #29
 801721c:	d82b      	bhi.n	8017276 <__sflush_r+0xb2>
 801721e:	4a2a      	ldr	r2, [pc, #168]	@ (80172c8 <__sflush_r+0x104>)
 8017220:	410a      	asrs	r2, r1
 8017222:	07d6      	lsls	r6, r2, #31
 8017224:	d427      	bmi.n	8017276 <__sflush_r+0xb2>
 8017226:	2200      	movs	r2, #0
 8017228:	6062      	str	r2, [r4, #4]
 801722a:	04d9      	lsls	r1, r3, #19
 801722c:	6922      	ldr	r2, [r4, #16]
 801722e:	6022      	str	r2, [r4, #0]
 8017230:	d504      	bpl.n	801723c <__sflush_r+0x78>
 8017232:	1c42      	adds	r2, r0, #1
 8017234:	d101      	bne.n	801723a <__sflush_r+0x76>
 8017236:	682b      	ldr	r3, [r5, #0]
 8017238:	b903      	cbnz	r3, 801723c <__sflush_r+0x78>
 801723a:	6560      	str	r0, [r4, #84]	@ 0x54
 801723c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801723e:	602f      	str	r7, [r5, #0]
 8017240:	b1b9      	cbz	r1, 8017272 <__sflush_r+0xae>
 8017242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017246:	4299      	cmp	r1, r3
 8017248:	d002      	beq.n	8017250 <__sflush_r+0x8c>
 801724a:	4628      	mov	r0, r5
 801724c:	f7ff fb40 	bl	80168d0 <_free_r>
 8017250:	2300      	movs	r3, #0
 8017252:	6363      	str	r3, [r4, #52]	@ 0x34
 8017254:	e00d      	b.n	8017272 <__sflush_r+0xae>
 8017256:	2301      	movs	r3, #1
 8017258:	4628      	mov	r0, r5
 801725a:	47b0      	blx	r6
 801725c:	4602      	mov	r2, r0
 801725e:	1c50      	adds	r0, r2, #1
 8017260:	d1c9      	bne.n	80171f6 <__sflush_r+0x32>
 8017262:	682b      	ldr	r3, [r5, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d0c6      	beq.n	80171f6 <__sflush_r+0x32>
 8017268:	2b1d      	cmp	r3, #29
 801726a:	d001      	beq.n	8017270 <__sflush_r+0xac>
 801726c:	2b16      	cmp	r3, #22
 801726e:	d11e      	bne.n	80172ae <__sflush_r+0xea>
 8017270:	602f      	str	r7, [r5, #0]
 8017272:	2000      	movs	r0, #0
 8017274:	e022      	b.n	80172bc <__sflush_r+0xf8>
 8017276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801727a:	b21b      	sxth	r3, r3
 801727c:	e01b      	b.n	80172b6 <__sflush_r+0xf2>
 801727e:	690f      	ldr	r7, [r1, #16]
 8017280:	2f00      	cmp	r7, #0
 8017282:	d0f6      	beq.n	8017272 <__sflush_r+0xae>
 8017284:	0793      	lsls	r3, r2, #30
 8017286:	680e      	ldr	r6, [r1, #0]
 8017288:	bf08      	it	eq
 801728a:	694b      	ldreq	r3, [r1, #20]
 801728c:	600f      	str	r7, [r1, #0]
 801728e:	bf18      	it	ne
 8017290:	2300      	movne	r3, #0
 8017292:	eba6 0807 	sub.w	r8, r6, r7
 8017296:	608b      	str	r3, [r1, #8]
 8017298:	f1b8 0f00 	cmp.w	r8, #0
 801729c:	dde9      	ble.n	8017272 <__sflush_r+0xae>
 801729e:	6a21      	ldr	r1, [r4, #32]
 80172a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80172a2:	4643      	mov	r3, r8
 80172a4:	463a      	mov	r2, r7
 80172a6:	4628      	mov	r0, r5
 80172a8:	47b0      	blx	r6
 80172aa:	2800      	cmp	r0, #0
 80172ac:	dc08      	bgt.n	80172c0 <__sflush_r+0xfc>
 80172ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172b6:	81a3      	strh	r3, [r4, #12]
 80172b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80172bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172c0:	4407      	add	r7, r0
 80172c2:	eba8 0800 	sub.w	r8, r8, r0
 80172c6:	e7e7      	b.n	8017298 <__sflush_r+0xd4>
 80172c8:	dfbffffe 	.word	0xdfbffffe

080172cc <_fflush_r>:
 80172cc:	b538      	push	{r3, r4, r5, lr}
 80172ce:	690b      	ldr	r3, [r1, #16]
 80172d0:	4605      	mov	r5, r0
 80172d2:	460c      	mov	r4, r1
 80172d4:	b913      	cbnz	r3, 80172dc <_fflush_r+0x10>
 80172d6:	2500      	movs	r5, #0
 80172d8:	4628      	mov	r0, r5
 80172da:	bd38      	pop	{r3, r4, r5, pc}
 80172dc:	b118      	cbz	r0, 80172e6 <_fflush_r+0x1a>
 80172de:	6a03      	ldr	r3, [r0, #32]
 80172e0:	b90b      	cbnz	r3, 80172e6 <_fflush_r+0x1a>
 80172e2:	f7ff f8d1 	bl	8016488 <__sinit>
 80172e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d0f3      	beq.n	80172d6 <_fflush_r+0xa>
 80172ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80172f0:	07d0      	lsls	r0, r2, #31
 80172f2:	d404      	bmi.n	80172fe <_fflush_r+0x32>
 80172f4:	0599      	lsls	r1, r3, #22
 80172f6:	d402      	bmi.n	80172fe <_fflush_r+0x32>
 80172f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80172fa:	f7ff faa6 	bl	801684a <__retarget_lock_acquire_recursive>
 80172fe:	4628      	mov	r0, r5
 8017300:	4621      	mov	r1, r4
 8017302:	f7ff ff5f 	bl	80171c4 <__sflush_r>
 8017306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017308:	07da      	lsls	r2, r3, #31
 801730a:	4605      	mov	r5, r0
 801730c:	d4e4      	bmi.n	80172d8 <_fflush_r+0xc>
 801730e:	89a3      	ldrh	r3, [r4, #12]
 8017310:	059b      	lsls	r3, r3, #22
 8017312:	d4e1      	bmi.n	80172d8 <_fflush_r+0xc>
 8017314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017316:	f7ff fa99 	bl	801684c <__retarget_lock_release_recursive>
 801731a:	e7dd      	b.n	80172d8 <_fflush_r+0xc>

0801731c <fiprintf>:
 801731c:	b40e      	push	{r1, r2, r3}
 801731e:	b503      	push	{r0, r1, lr}
 8017320:	4601      	mov	r1, r0
 8017322:	ab03      	add	r3, sp, #12
 8017324:	4805      	ldr	r0, [pc, #20]	@ (801733c <fiprintf+0x20>)
 8017326:	f853 2b04 	ldr.w	r2, [r3], #4
 801732a:	6800      	ldr	r0, [r0, #0]
 801732c:	9301      	str	r3, [sp, #4]
 801732e:	f7ff fca3 	bl	8016c78 <_vfiprintf_r>
 8017332:	b002      	add	sp, #8
 8017334:	f85d eb04 	ldr.w	lr, [sp], #4
 8017338:	b003      	add	sp, #12
 801733a:	4770      	bx	lr
 801733c:	20000254 	.word	0x20000254

08017340 <__swbuf_r>:
 8017340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017342:	460e      	mov	r6, r1
 8017344:	4614      	mov	r4, r2
 8017346:	4605      	mov	r5, r0
 8017348:	b118      	cbz	r0, 8017352 <__swbuf_r+0x12>
 801734a:	6a03      	ldr	r3, [r0, #32]
 801734c:	b90b      	cbnz	r3, 8017352 <__swbuf_r+0x12>
 801734e:	f7ff f89b 	bl	8016488 <__sinit>
 8017352:	69a3      	ldr	r3, [r4, #24]
 8017354:	60a3      	str	r3, [r4, #8]
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	071a      	lsls	r2, r3, #28
 801735a:	d501      	bpl.n	8017360 <__swbuf_r+0x20>
 801735c:	6923      	ldr	r3, [r4, #16]
 801735e:	b943      	cbnz	r3, 8017372 <__swbuf_r+0x32>
 8017360:	4621      	mov	r1, r4
 8017362:	4628      	mov	r0, r5
 8017364:	f000 f82a 	bl	80173bc <__swsetup_r>
 8017368:	b118      	cbz	r0, 8017372 <__swbuf_r+0x32>
 801736a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801736e:	4638      	mov	r0, r7
 8017370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017372:	6823      	ldr	r3, [r4, #0]
 8017374:	6922      	ldr	r2, [r4, #16]
 8017376:	1a98      	subs	r0, r3, r2
 8017378:	6963      	ldr	r3, [r4, #20]
 801737a:	b2f6      	uxtb	r6, r6
 801737c:	4283      	cmp	r3, r0
 801737e:	4637      	mov	r7, r6
 8017380:	dc05      	bgt.n	801738e <__swbuf_r+0x4e>
 8017382:	4621      	mov	r1, r4
 8017384:	4628      	mov	r0, r5
 8017386:	f7ff ffa1 	bl	80172cc <_fflush_r>
 801738a:	2800      	cmp	r0, #0
 801738c:	d1ed      	bne.n	801736a <__swbuf_r+0x2a>
 801738e:	68a3      	ldr	r3, [r4, #8]
 8017390:	3b01      	subs	r3, #1
 8017392:	60a3      	str	r3, [r4, #8]
 8017394:	6823      	ldr	r3, [r4, #0]
 8017396:	1c5a      	adds	r2, r3, #1
 8017398:	6022      	str	r2, [r4, #0]
 801739a:	701e      	strb	r6, [r3, #0]
 801739c:	6962      	ldr	r2, [r4, #20]
 801739e:	1c43      	adds	r3, r0, #1
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d004      	beq.n	80173ae <__swbuf_r+0x6e>
 80173a4:	89a3      	ldrh	r3, [r4, #12]
 80173a6:	07db      	lsls	r3, r3, #31
 80173a8:	d5e1      	bpl.n	801736e <__swbuf_r+0x2e>
 80173aa:	2e0a      	cmp	r6, #10
 80173ac:	d1df      	bne.n	801736e <__swbuf_r+0x2e>
 80173ae:	4621      	mov	r1, r4
 80173b0:	4628      	mov	r0, r5
 80173b2:	f7ff ff8b 	bl	80172cc <_fflush_r>
 80173b6:	2800      	cmp	r0, #0
 80173b8:	d0d9      	beq.n	801736e <__swbuf_r+0x2e>
 80173ba:	e7d6      	b.n	801736a <__swbuf_r+0x2a>

080173bc <__swsetup_r>:
 80173bc:	b538      	push	{r3, r4, r5, lr}
 80173be:	4b29      	ldr	r3, [pc, #164]	@ (8017464 <__swsetup_r+0xa8>)
 80173c0:	4605      	mov	r5, r0
 80173c2:	6818      	ldr	r0, [r3, #0]
 80173c4:	460c      	mov	r4, r1
 80173c6:	b118      	cbz	r0, 80173d0 <__swsetup_r+0x14>
 80173c8:	6a03      	ldr	r3, [r0, #32]
 80173ca:	b90b      	cbnz	r3, 80173d0 <__swsetup_r+0x14>
 80173cc:	f7ff f85c 	bl	8016488 <__sinit>
 80173d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173d4:	0719      	lsls	r1, r3, #28
 80173d6:	d422      	bmi.n	801741e <__swsetup_r+0x62>
 80173d8:	06da      	lsls	r2, r3, #27
 80173da:	d407      	bmi.n	80173ec <__swsetup_r+0x30>
 80173dc:	2209      	movs	r2, #9
 80173de:	602a      	str	r2, [r5, #0]
 80173e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173e4:	81a3      	strh	r3, [r4, #12]
 80173e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80173ea:	e033      	b.n	8017454 <__swsetup_r+0x98>
 80173ec:	0758      	lsls	r0, r3, #29
 80173ee:	d512      	bpl.n	8017416 <__swsetup_r+0x5a>
 80173f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173f2:	b141      	cbz	r1, 8017406 <__swsetup_r+0x4a>
 80173f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173f8:	4299      	cmp	r1, r3
 80173fa:	d002      	beq.n	8017402 <__swsetup_r+0x46>
 80173fc:	4628      	mov	r0, r5
 80173fe:	f7ff fa67 	bl	80168d0 <_free_r>
 8017402:	2300      	movs	r3, #0
 8017404:	6363      	str	r3, [r4, #52]	@ 0x34
 8017406:	89a3      	ldrh	r3, [r4, #12]
 8017408:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801740c:	81a3      	strh	r3, [r4, #12]
 801740e:	2300      	movs	r3, #0
 8017410:	6063      	str	r3, [r4, #4]
 8017412:	6923      	ldr	r3, [r4, #16]
 8017414:	6023      	str	r3, [r4, #0]
 8017416:	89a3      	ldrh	r3, [r4, #12]
 8017418:	f043 0308 	orr.w	r3, r3, #8
 801741c:	81a3      	strh	r3, [r4, #12]
 801741e:	6923      	ldr	r3, [r4, #16]
 8017420:	b94b      	cbnz	r3, 8017436 <__swsetup_r+0x7a>
 8017422:	89a3      	ldrh	r3, [r4, #12]
 8017424:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801742c:	d003      	beq.n	8017436 <__swsetup_r+0x7a>
 801742e:	4621      	mov	r1, r4
 8017430:	4628      	mov	r0, r5
 8017432:	f000 f846 	bl	80174c2 <__smakebuf_r>
 8017436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801743a:	f013 0201 	ands.w	r2, r3, #1
 801743e:	d00a      	beq.n	8017456 <__swsetup_r+0x9a>
 8017440:	2200      	movs	r2, #0
 8017442:	60a2      	str	r2, [r4, #8]
 8017444:	6962      	ldr	r2, [r4, #20]
 8017446:	4252      	negs	r2, r2
 8017448:	61a2      	str	r2, [r4, #24]
 801744a:	6922      	ldr	r2, [r4, #16]
 801744c:	b942      	cbnz	r2, 8017460 <__swsetup_r+0xa4>
 801744e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017452:	d1c5      	bne.n	80173e0 <__swsetup_r+0x24>
 8017454:	bd38      	pop	{r3, r4, r5, pc}
 8017456:	0799      	lsls	r1, r3, #30
 8017458:	bf58      	it	pl
 801745a:	6962      	ldrpl	r2, [r4, #20]
 801745c:	60a2      	str	r2, [r4, #8]
 801745e:	e7f4      	b.n	801744a <__swsetup_r+0x8e>
 8017460:	2000      	movs	r0, #0
 8017462:	e7f7      	b.n	8017454 <__swsetup_r+0x98>
 8017464:	20000254 	.word	0x20000254

08017468 <abort>:
 8017468:	b508      	push	{r3, lr}
 801746a:	2006      	movs	r0, #6
 801746c:	f000 f88e 	bl	801758c <raise>
 8017470:	2001      	movs	r0, #1
 8017472:	f7ea f8f7 	bl	8001664 <_exit>

08017476 <__swhatbuf_r>:
 8017476:	b570      	push	{r4, r5, r6, lr}
 8017478:	460c      	mov	r4, r1
 801747a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801747e:	2900      	cmp	r1, #0
 8017480:	b096      	sub	sp, #88	@ 0x58
 8017482:	4615      	mov	r5, r2
 8017484:	461e      	mov	r6, r3
 8017486:	da0d      	bge.n	80174a4 <__swhatbuf_r+0x2e>
 8017488:	89a3      	ldrh	r3, [r4, #12]
 801748a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801748e:	f04f 0100 	mov.w	r1, #0
 8017492:	bf14      	ite	ne
 8017494:	2340      	movne	r3, #64	@ 0x40
 8017496:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801749a:	2000      	movs	r0, #0
 801749c:	6031      	str	r1, [r6, #0]
 801749e:	602b      	str	r3, [r5, #0]
 80174a0:	b016      	add	sp, #88	@ 0x58
 80174a2:	bd70      	pop	{r4, r5, r6, pc}
 80174a4:	466a      	mov	r2, sp
 80174a6:	f000 f879 	bl	801759c <_fstat_r>
 80174aa:	2800      	cmp	r0, #0
 80174ac:	dbec      	blt.n	8017488 <__swhatbuf_r+0x12>
 80174ae:	9901      	ldr	r1, [sp, #4]
 80174b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80174b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80174b8:	4259      	negs	r1, r3
 80174ba:	4159      	adcs	r1, r3
 80174bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80174c0:	e7eb      	b.n	801749a <__swhatbuf_r+0x24>

080174c2 <__smakebuf_r>:
 80174c2:	898b      	ldrh	r3, [r1, #12]
 80174c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174c6:	079d      	lsls	r5, r3, #30
 80174c8:	4606      	mov	r6, r0
 80174ca:	460c      	mov	r4, r1
 80174cc:	d507      	bpl.n	80174de <__smakebuf_r+0x1c>
 80174ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80174d2:	6023      	str	r3, [r4, #0]
 80174d4:	6123      	str	r3, [r4, #16]
 80174d6:	2301      	movs	r3, #1
 80174d8:	6163      	str	r3, [r4, #20]
 80174da:	b003      	add	sp, #12
 80174dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174de:	ab01      	add	r3, sp, #4
 80174e0:	466a      	mov	r2, sp
 80174e2:	f7ff ffc8 	bl	8017476 <__swhatbuf_r>
 80174e6:	9f00      	ldr	r7, [sp, #0]
 80174e8:	4605      	mov	r5, r0
 80174ea:	4639      	mov	r1, r7
 80174ec:	4630      	mov	r0, r6
 80174ee:	f7fe fd99 	bl	8016024 <_malloc_r>
 80174f2:	b948      	cbnz	r0, 8017508 <__smakebuf_r+0x46>
 80174f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174f8:	059a      	lsls	r2, r3, #22
 80174fa:	d4ee      	bmi.n	80174da <__smakebuf_r+0x18>
 80174fc:	f023 0303 	bic.w	r3, r3, #3
 8017500:	f043 0302 	orr.w	r3, r3, #2
 8017504:	81a3      	strh	r3, [r4, #12]
 8017506:	e7e2      	b.n	80174ce <__smakebuf_r+0xc>
 8017508:	89a3      	ldrh	r3, [r4, #12]
 801750a:	6020      	str	r0, [r4, #0]
 801750c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017510:	81a3      	strh	r3, [r4, #12]
 8017512:	9b01      	ldr	r3, [sp, #4]
 8017514:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017518:	b15b      	cbz	r3, 8017532 <__smakebuf_r+0x70>
 801751a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801751e:	4630      	mov	r0, r6
 8017520:	f000 f84e 	bl	80175c0 <_isatty_r>
 8017524:	b128      	cbz	r0, 8017532 <__smakebuf_r+0x70>
 8017526:	89a3      	ldrh	r3, [r4, #12]
 8017528:	f023 0303 	bic.w	r3, r3, #3
 801752c:	f043 0301 	orr.w	r3, r3, #1
 8017530:	81a3      	strh	r3, [r4, #12]
 8017532:	89a3      	ldrh	r3, [r4, #12]
 8017534:	431d      	orrs	r5, r3
 8017536:	81a5      	strh	r5, [r4, #12]
 8017538:	e7cf      	b.n	80174da <__smakebuf_r+0x18>

0801753a <_raise_r>:
 801753a:	291f      	cmp	r1, #31
 801753c:	b538      	push	{r3, r4, r5, lr}
 801753e:	4605      	mov	r5, r0
 8017540:	460c      	mov	r4, r1
 8017542:	d904      	bls.n	801754e <_raise_r+0x14>
 8017544:	2316      	movs	r3, #22
 8017546:	6003      	str	r3, [r0, #0]
 8017548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801754c:	bd38      	pop	{r3, r4, r5, pc}
 801754e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017550:	b112      	cbz	r2, 8017558 <_raise_r+0x1e>
 8017552:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017556:	b94b      	cbnz	r3, 801756c <_raise_r+0x32>
 8017558:	4628      	mov	r0, r5
 801755a:	f000 f853 	bl	8017604 <_getpid_r>
 801755e:	4622      	mov	r2, r4
 8017560:	4601      	mov	r1, r0
 8017562:	4628      	mov	r0, r5
 8017564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017568:	f000 b83a 	b.w	80175e0 <_kill_r>
 801756c:	2b01      	cmp	r3, #1
 801756e:	d00a      	beq.n	8017586 <_raise_r+0x4c>
 8017570:	1c59      	adds	r1, r3, #1
 8017572:	d103      	bne.n	801757c <_raise_r+0x42>
 8017574:	2316      	movs	r3, #22
 8017576:	6003      	str	r3, [r0, #0]
 8017578:	2001      	movs	r0, #1
 801757a:	e7e7      	b.n	801754c <_raise_r+0x12>
 801757c:	2100      	movs	r1, #0
 801757e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017582:	4620      	mov	r0, r4
 8017584:	4798      	blx	r3
 8017586:	2000      	movs	r0, #0
 8017588:	e7e0      	b.n	801754c <_raise_r+0x12>
	...

0801758c <raise>:
 801758c:	4b02      	ldr	r3, [pc, #8]	@ (8017598 <raise+0xc>)
 801758e:	4601      	mov	r1, r0
 8017590:	6818      	ldr	r0, [r3, #0]
 8017592:	f7ff bfd2 	b.w	801753a <_raise_r>
 8017596:	bf00      	nop
 8017598:	20000254 	.word	0x20000254

0801759c <_fstat_r>:
 801759c:	b538      	push	{r3, r4, r5, lr}
 801759e:	4d07      	ldr	r5, [pc, #28]	@ (80175bc <_fstat_r+0x20>)
 80175a0:	2300      	movs	r3, #0
 80175a2:	4604      	mov	r4, r0
 80175a4:	4608      	mov	r0, r1
 80175a6:	4611      	mov	r1, r2
 80175a8:	602b      	str	r3, [r5, #0]
 80175aa:	f7ea f8ab 	bl	8001704 <_fstat>
 80175ae:	1c43      	adds	r3, r0, #1
 80175b0:	d102      	bne.n	80175b8 <_fstat_r+0x1c>
 80175b2:	682b      	ldr	r3, [r5, #0]
 80175b4:	b103      	cbz	r3, 80175b8 <_fstat_r+0x1c>
 80175b6:	6023      	str	r3, [r4, #0]
 80175b8:	bd38      	pop	{r3, r4, r5, pc}
 80175ba:	bf00      	nop
 80175bc:	2000b0bc 	.word	0x2000b0bc

080175c0 <_isatty_r>:
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	4d06      	ldr	r5, [pc, #24]	@ (80175dc <_isatty_r+0x1c>)
 80175c4:	2300      	movs	r3, #0
 80175c6:	4604      	mov	r4, r0
 80175c8:	4608      	mov	r0, r1
 80175ca:	602b      	str	r3, [r5, #0]
 80175cc:	f7ea f8aa 	bl	8001724 <_isatty>
 80175d0:	1c43      	adds	r3, r0, #1
 80175d2:	d102      	bne.n	80175da <_isatty_r+0x1a>
 80175d4:	682b      	ldr	r3, [r5, #0]
 80175d6:	b103      	cbz	r3, 80175da <_isatty_r+0x1a>
 80175d8:	6023      	str	r3, [r4, #0]
 80175da:	bd38      	pop	{r3, r4, r5, pc}
 80175dc:	2000b0bc 	.word	0x2000b0bc

080175e0 <_kill_r>:
 80175e0:	b538      	push	{r3, r4, r5, lr}
 80175e2:	4d07      	ldr	r5, [pc, #28]	@ (8017600 <_kill_r+0x20>)
 80175e4:	2300      	movs	r3, #0
 80175e6:	4604      	mov	r4, r0
 80175e8:	4608      	mov	r0, r1
 80175ea:	4611      	mov	r1, r2
 80175ec:	602b      	str	r3, [r5, #0]
 80175ee:	f7ea f829 	bl	8001644 <_kill>
 80175f2:	1c43      	adds	r3, r0, #1
 80175f4:	d102      	bne.n	80175fc <_kill_r+0x1c>
 80175f6:	682b      	ldr	r3, [r5, #0]
 80175f8:	b103      	cbz	r3, 80175fc <_kill_r+0x1c>
 80175fa:	6023      	str	r3, [r4, #0]
 80175fc:	bd38      	pop	{r3, r4, r5, pc}
 80175fe:	bf00      	nop
 8017600:	2000b0bc 	.word	0x2000b0bc

08017604 <_getpid_r>:
 8017604:	f7ea b816 	b.w	8001634 <_getpid>

08017608 <_init>:
 8017608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801760a:	bf00      	nop
 801760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801760e:	bc08      	pop	{r3}
 8017610:	469e      	mov	lr, r3
 8017612:	4770      	bx	lr

08017614 <_fini>:
 8017614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017616:	bf00      	nop
 8017618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801761a:	bc08      	pop	{r3}
 801761c:	469e      	mov	lr, r3
 801761e:	4770      	bx	lr
